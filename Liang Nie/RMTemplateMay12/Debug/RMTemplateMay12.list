
RMTemplateMay12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012148  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  080122d8  080122d8  000132d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128e8  080128e8  000142f4  2**0
                  CONTENTS
  4 .ARM          00000008  080128e8  080128e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128f0  080128f0  000142f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128f0  080128f0  000138f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128f4  080128f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  080128f8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142f4  2**0
                  CONTENTS
 10 .bss          00005950  200002f8  200002f8  000142f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005c48  20005c48  000142f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026a56  00000000  00000000  00014324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058ab  00000000  00000000  0003ad7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002020  00000000  00000000  00040628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000190d  00000000  00000000  00042648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275be  00000000  00000000  00043f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027a4f  00000000  00000000  0006b513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3898  00000000  00000000  00092f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001767fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009728  00000000  00000000  00176840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0017ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080122c0 	.word	0x080122c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	080122c0 	.word	0x080122c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000f42:	e003      	b.n	8000f4c <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000f44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f48:	f000 f80a 	bl	8000f60 <BMI088_delay_us>
    while(ms--)
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	80fa      	strh	r2, [r7, #6]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f6      	bne.n	8000f44 <BMI088_delay_ms+0xc>
    }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <BMI088_delay_us+0x84>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	22a8      	movs	r2, #168	@ 0xa8
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <BMI088_delay_us+0x84>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <BMI088_delay_us+0x84>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d0f8      	beq.n	8000f94 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d206      	bcs.n	8000fb8 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	e007      	b.n	8000fc8 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d200      	bcs.n	8000fd6 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000fd4:	e7de      	b.n	8000f94 <BMI088_delay_us+0x34>
            {
                break;
 8000fd6:	bf00      	nop
            }
        }
    }


}
 8000fd8:	bf00      	nop
 8000fda:	3724      	adds	r7, #36	@ 0x24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <BMI088_ACCEL_NS_L+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <BMI088_ACCEL_NS_L+0x1c>)
 8000ff2:	8811      	ldrh	r1, [r2, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f007 f95a 	bl	80082b0 <HAL_GPIO_WritePin>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <BMI088_ACCEL_NS_H+0x18>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <BMI088_ACCEL_NS_H+0x1c>)
 8001012:	8811      	ldrh	r1, [r2, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f007 f94a 	bl	80082b0 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000004 	.word	0x20000004

08001028 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <BMI088_GYRO_NS_L+0x18>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <BMI088_GYRO_NS_L+0x1c>)
 8001032:	8811      	ldrh	r1, [r2, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f007 f93a 	bl	80082b0 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000008 	.word	0x20000008
 8001044:	2000000c 	.word	0x2000000c

08001048 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <BMI088_GYRO_NS_H+0x18>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <BMI088_GYRO_NS_H+0x1c>)
 8001052:	8811      	ldrh	r1, [r2, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f007 f92a 	bl	80082b0 <HAL_GPIO_WritePin>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000008 	.word	0x20000008
 8001064:	2000000c 	.word	0x2000000c

08001068 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8001072:	f107 020f 	add.w	r2, r7, #15
 8001076:	1df9      	adds	r1, r7, #7
 8001078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <BMI088_read_write_byte+0x28>)
 8001082:	f008 fe73 	bl	8009d6c <HAL_SPI_TransmitReceive>
    return rx_data;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000a7c 	.word	0x20000a7c

08001094 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80010a2:	f7ff ffa1 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80010a6:	2080      	movs	r0, #128	@ 0x80
 80010a8:	f7ff ffde 	bl	8001068 <BMI088_read_write_byte>
 80010ac:	2055      	movs	r0, #85	@ 0x55
 80010ae:	f7ff ffdb 	bl	8001068 <BMI088_read_write_byte>
 80010b2:	2055      	movs	r0, #85	@ 0x55
 80010b4:	f7ff ffd8 	bl	8001068 <BMI088_read_write_byte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71bb      	strb	r3, [r7, #6]
 80010bc:	f7ff ffa4 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010c0:	2096      	movs	r0, #150	@ 0x96
 80010c2:	f7ff ff4d 	bl	8000f60 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80010c6:	f7ff ff8f 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80010ca:	2080      	movs	r0, #128	@ 0x80
 80010cc:	f7ff ffcc 	bl	8001068 <BMI088_read_write_byte>
 80010d0:	2055      	movs	r0, #85	@ 0x55
 80010d2:	f7ff ffc9 	bl	8001068 <BMI088_read_write_byte>
 80010d6:	2055      	movs	r0, #85	@ 0x55
 80010d8:	f7ff ffc6 	bl	8001068 <BMI088_read_write_byte>
 80010dc:	4603      	mov	r3, r0
 80010de:	71bb      	strb	r3, [r7, #6]
 80010e0:	f7ff ff92 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010e4:	2096      	movs	r0, #150	@ 0x96
 80010e6:	f7ff ff3b 	bl	8000f60 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 80010ea:	f7ff ff7d 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80010ee:	21b6      	movs	r1, #182	@ 0xb6
 80010f0:	207e      	movs	r0, #126	@ 0x7e
 80010f2:	f000 fa4d 	bl	8001590 <BMI088_write_single_reg>
 80010f6:	f7ff ff87 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80010fa:	2050      	movs	r0, #80	@ 0x50
 80010fc:	f7ff ff1c 	bl	8000f38 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001100:	f7ff ff72 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 8001104:	2080      	movs	r0, #128	@ 0x80
 8001106:	f7ff ffaf 	bl	8001068 <BMI088_read_write_byte>
 800110a:	2055      	movs	r0, #85	@ 0x55
 800110c:	f7ff ffac 	bl	8001068 <BMI088_read_write_byte>
 8001110:	2055      	movs	r0, #85	@ 0x55
 8001112:	f7ff ffa9 	bl	8001068 <BMI088_read_write_byte>
 8001116:	4603      	mov	r3, r0
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	f7ff ff75 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800111e:	2096      	movs	r0, #150	@ 0x96
 8001120:	f7ff ff1e 	bl	8000f60 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001124:	f7ff ff60 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 8001128:	2080      	movs	r0, #128	@ 0x80
 800112a:	f7ff ff9d 	bl	8001068 <BMI088_read_write_byte>
 800112e:	2055      	movs	r0, #85	@ 0x55
 8001130:	f7ff ff9a 	bl	8001068 <BMI088_read_write_byte>
 8001134:	2055      	movs	r0, #85	@ 0x55
 8001136:	f7ff ff97 	bl	8001068 <BMI088_read_write_byte>
 800113a:	4603      	mov	r3, r0
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	f7ff ff63 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001142:	2096      	movs	r0, #150	@ 0x96
 8001144:	f7ff ff0c 	bl	8000f60 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	2b1e      	cmp	r3, #30
 800114c:	d001      	beq.n	8001152 <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	e052      	b.n	80011f8 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8001152:	2300      	movs	r3, #0
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e04b      	b.n	80011f0 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 8001158:	f7ff ff46 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	4928      	ldr	r1, [pc, #160]	@ (8001200 <BMI088_accel_init+0x16c>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	440b      	add	r3, r1
 8001168:	7818      	ldrb	r0, [r3, #0]
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	4924      	ldr	r1, [pc, #144]	@ (8001200 <BMI088_accel_init+0x16c>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	440b      	add	r3, r1
 8001176:	3301      	adds	r3, #1
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	f000 fa08 	bl	8001590 <BMI088_write_single_reg>
 8001180:	f7ff ff42 	bl	8001008 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001184:	2096      	movs	r0, #150	@ 0x96
 8001186:	f7ff feeb 	bl	8000f60 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 800118a:	f7ff ff2d 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	491b      	ldr	r1, [pc, #108]	@ (8001200 <BMI088_accel_init+0x16c>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff60 	bl	8001068 <BMI088_read_write_byte>
 80011a8:	2055      	movs	r0, #85	@ 0x55
 80011aa:	f7ff ff5d 	bl	8001068 <BMI088_read_write_byte>
 80011ae:	2055      	movs	r0, #85	@ 0x55
 80011b0:	f7ff ff5a 	bl	8001068 <BMI088_read_write_byte>
 80011b4:	4603      	mov	r3, r0
 80011b6:	71bb      	strb	r3, [r7, #6]
 80011b8:	f7ff ff26 	bl	8001008 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011bc:	2096      	movs	r0, #150	@ 0x96
 80011be:	f7ff fecf 	bl	8000f60 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <BMI088_accel_init+0x16c>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	3301      	adds	r3, #1
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	79ba      	ldrb	r2, [r7, #6]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d008      	beq.n	80011ea <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	4909      	ldr	r1, [pc, #36]	@ (8001200 <BMI088_accel_init+0x16c>)
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	3302      	adds	r3, #2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	e006      	b.n	80011f8 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	3301      	adds	r3, #1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d9b0      	bls.n	8001158 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000018 	.word	0x20000018

08001204 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001212:	f7ff ff09 	bl	8001028 <BMI088_GYRO_NS_L>
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	4619      	mov	r1, r3
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f9cc 	bl	80015b8 <BMI088_read_single_reg>
 8001220:	f7ff ff12 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001224:	2096      	movs	r0, #150	@ 0x96
 8001226:	f7ff fe9b 	bl	8000f60 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800122a:	f7ff fefd 	bl	8001028 <BMI088_GYRO_NS_L>
 800122e:	1dbb      	adds	r3, r7, #6
 8001230:	4619      	mov	r1, r3
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f9c0 	bl	80015b8 <BMI088_read_single_reg>
 8001238:	f7ff ff06 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800123c:	2096      	movs	r0, #150	@ 0x96
 800123e:	f7ff fe8f 	bl	8000f60 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 8001242:	f7ff fef1 	bl	8001028 <BMI088_GYRO_NS_L>
 8001246:	21b6      	movs	r1, #182	@ 0xb6
 8001248:	2014      	movs	r0, #20
 800124a:	f000 f9a1 	bl	8001590 <BMI088_write_single_reg>
 800124e:	f7ff fefb 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8001252:	2050      	movs	r0, #80	@ 0x50
 8001254:	f7ff fe70 	bl	8000f38 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001258:	f7ff fee6 	bl	8001028 <BMI088_GYRO_NS_L>
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	4619      	mov	r1, r3
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f9a9 	bl	80015b8 <BMI088_read_single_reg>
 8001266:	f7ff feef 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800126a:	2096      	movs	r0, #150	@ 0x96
 800126c:	f7ff fe78 	bl	8000f60 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001270:	f7ff feda 	bl	8001028 <BMI088_GYRO_NS_L>
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	4619      	mov	r1, r3
 8001278:	2000      	movs	r0, #0
 800127a:	f000 f99d 	bl	80015b8 <BMI088_read_single_reg>
 800127e:	f7ff fee3 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001282:	2096      	movs	r0, #150	@ 0x96
 8001284:	f7ff fe6c 	bl	8000f60 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d001      	beq.n	8001292 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800128e:	23ff      	movs	r3, #255	@ 0xff
 8001290:	e049      	b.n	8001326 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	e042      	b.n	800131e <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001298:	f7ff fec6 	bl	8001028 <BMI088_GYRO_NS_L>
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	4924      	ldr	r1, [pc, #144]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	7818      	ldrb	r0, [r3, #0]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4920      	ldr	r1, [pc, #128]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	3301      	adds	r3, #1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	f000 f968 	bl	8001590 <BMI088_write_single_reg>
 80012c0:	f7ff fec2 	bl	8001048 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012c4:	2096      	movs	r0, #150	@ 0x96
 80012c6:	f7ff fe4b 	bl	8000f60 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 80012ca:	f7ff fead 	bl	8001028 <BMI088_GYRO_NS_L>
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	4917      	ldr	r1, [pc, #92]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	440b      	add	r3, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	1dba      	adds	r2, r7, #6
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f969 	bl	80015b8 <BMI088_read_single_reg>
 80012e6:	f7ff feaf 	bl	8001048 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012ea:	2096      	movs	r0, #150	@ 0x96
 80012ec:	f7ff fe38 	bl	8000f60 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	490f      	ldr	r1, [pc, #60]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	3301      	adds	r3, #1
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	429a      	cmp	r2, r3
 8001304:	d008      	beq.n	8001318 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	4909      	ldr	r1, [pc, #36]	@ (8001330 <BMI088_gyro_init+0x12c>)
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	440b      	add	r3, r1
 8001312:	3302      	adds	r3, #2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	e006      	b.n	8001326 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	3301      	adds	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d9b9      	bls.n	8001298 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000002c 	.word	0x2000002c

08001334 <IMU_get_gyro>:

float IMU_get_gyro(axis_t axis) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	BMI088_read(gyro, accel, &temp);
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <IMU_get_gyro+0x4c>)
 8001340:	4910      	ldr	r1, [pc, #64]	@ (8001384 <IMU_get_gyro+0x50>)
 8001342:	4811      	ldr	r0, [pc, #68]	@ (8001388 <IMU_get_gyro+0x54>)
 8001344:	f000 f836 	bl	80013b4 <BMI088_read>
	if(axis == x){
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <IMU_get_gyro+0x20>
		return gyro[0];
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <IMU_get_gyro+0x54>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e00d      	b.n	8001370 <IMU_get_gyro+0x3c>
	} else if (axis == y) {
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <IMU_get_gyro+0x2c>
		return gyro[1];
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <IMU_get_gyro+0x54>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	e007      	b.n	8001370 <IMU_get_gyro+0x3c>
	} else if (axis == z) {
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d102      	bne.n	800136c <IMU_get_gyro+0x38>
		return gyro[2];
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <IMU_get_gyro+0x54>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	e001      	b.n	8001370 <IMU_get_gyro+0x3c>
	} else {
		return 0;
 800136c:	f04f 0300 	mov.w	r3, #0
	}
}
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000032c 	.word	0x2000032c
 8001384:	20000320 	.word	0x20000320
 8001388:	20000314 	.word	0x20000314

0800138c <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8001390:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <IMU_get_temp+0x1c>)
 8001392:	4906      	ldr	r1, [pc, #24]	@ (80013ac <IMU_get_temp+0x20>)
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <IMU_get_temp+0x24>)
 8001396:	f000 f80d 	bl	80013b4 <BMI088_read>
	return temp;
 800139a:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <IMU_get_temp+0x1c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
}
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000032c 	.word	0x2000032c
 80013ac:	20000320 	.word	0x20000320
 80013b0:	20000314 	.word	0x20000314

080013b4 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80013c0:	4a70      	ldr	r2, [pc, #448]	@ (8001584 <BMI088_read+0x1d0>)
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ca:	6018      	str	r0, [r3, #0]
 80013cc:	3304      	adds	r3, #4
 80013ce:	8019      	strh	r1, [r3, #0]
 80013d0:	3302      	adds	r3, #2
 80013d2:	0c0a      	lsrs	r2, r1, #16
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80013da:	f7ff fe05 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80013de:	2092      	movs	r0, #146	@ 0x92
 80013e0:	f7ff fe42 	bl	8001068 <BMI088_read_write_byte>
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2206      	movs	r2, #6
 80013ea:	4619      	mov	r1, r3
 80013ec:	2012      	movs	r0, #18
 80013ee:	f000 f8fb 	bl	80015e8 <BMI088_read_muli_reg>
 80013f2:	f7ff fe09 	bl	8001008 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001404:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001410:	4b5d      	ldr	r3, [pc, #372]	@ (8001588 <BMI088_read+0x1d4>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	7dbb      	ldrb	r3, [r7, #22]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800142e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143a:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <BMI088_read+0x1d4>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3304      	adds	r3, #4
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800144c:	7e7b      	ldrb	r3, [r7, #25]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7e3b      	ldrb	r3, [r7, #24]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800145a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001466:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <BMI088_read+0x1d4>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3308      	adds	r3, #8
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8001478:	f7ff fdd6 	bl	8001028 <BMI088_GYRO_NS_L>
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2208      	movs	r2, #8
 8001482:	4619      	mov	r1, r3
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f8af 	bl	80015e8 <BMI088_read_muli_reg>
 800148a:	f7ff fddd 	bl	8001048 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 800148e:	7d3b      	ldrb	r3, [r7, #20]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d140      	bne.n	8001516 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7dbb      	ldrb	r3, [r7, #22]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80014a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ae:	4b37      	ldr	r3, [pc, #220]	@ (800158c <BMI088_read+0x1d8>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80014be:	7e7b      	ldrb	r3, [r7, #25]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	7e3b      	ldrb	r3, [r7, #24]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80014cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <BMI088_read+0x1d8>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80014ea:	7efb      	ldrb	r3, [r7, #27]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	7ebb      	ldrb	r3, [r7, #26]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80014f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <BMI088_read+0x1d8>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3308      	adds	r3, #8
 800150e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001512:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001516:	f7ff fd67 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 800151a:	20a2      	movs	r0, #162	@ 0xa2
 800151c:	f7ff fda4 	bl	8001068 <BMI088_read_write_byte>
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2202      	movs	r2, #2
 8001526:	4619      	mov	r1, r3
 8001528:	2022      	movs	r0, #34	@ 0x22
 800152a:	f000 f85d 	bl	80015e8 <BMI088_read_muli_reg>
 800152e:	f7ff fd6b 	bl	8001008 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001532:	7d3b      	ldrb	r3, [r7, #20]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	b21a      	sxth	r2, r3
 8001538:	7d7b      	ldrb	r3, [r7, #21]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	b2db      	uxtb	r3, r3
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001544:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154c:	db04      	blt.n	8001558 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001554:	b29b      	uxth	r3, r3
 8001556:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001558:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001564:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	edc3 7a00 	vstr	s15, [r3]
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	080122d8 	.word	0x080122d8
 8001588:	20000010 	.word	0x20000010
 800158c:	20000014 	.word	0x20000014

08001590 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	460a      	mov	r2, r1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd60 	bl	8001068 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd5c 	bl	8001068 <BMI088_read_write_byte>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fd4b 	bl	8001068 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80015d2:	2055      	movs	r0, #85	@ 0x55
 80015d4:	f7ff fd48 	bl	8001068 <BMI088_read_write_byte>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	701a      	strb	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd31 	bl	8001068 <BMI088_read_write_byte>

    while (len != 0)
 8001606:	e00c      	b.n	8001622 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001608:	2055      	movs	r0, #85	@ 0x55
 800160a:	f7ff fd2d 	bl	8001068 <BMI088_read_write_byte>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	701a      	strb	r2, [r3, #0]
        buf++;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	603b      	str	r3, [r7, #0]
        len--;
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	3b01      	subs	r3, #1
 8001620:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ef      	bne.n	8001608 <BMI088_read_muli_reg+0x20>
    }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_CAN_RxFifo0MsgPendingCallback>:
motorFeedback_t motorFeedback[2][11];
PID_data_t PID_data[2][11];



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	@ 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	f107 0210 	add.w	r2, r7, #16
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f005 fc0a 	bl	8006e60 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d874      	bhi.n	8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
        	uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        	if (hcan == &hcan1) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a3b      	ldr	r2, [pc, #236]	@ (8001750 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d131      	bne.n	80016cc <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
        		//memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
        		//memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
        		get_motor_feedback(&motorFeedback[0][i], rx_data);
 8001668:	7a3b      	ldrb	r3, [r7, #8]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7a7b      	ldrb	r3, [r7, #9]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21a      	sxth	r2, r3
 8001676:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800167a:	b291      	uxth	r1, r2
 800167c:	4a35      	ldr	r2, [pc, #212]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800167e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001682:	7abb      	ldrb	r3, [r7, #10]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b219      	sxth	r1, r3
 8001688:	7afb      	ldrb	r3, [r7, #11]
 800168a:	b21a      	sxth	r2, r3
 800168c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001690:	430a      	orrs	r2, r1
 8001692:	b211      	sxth	r1, r2
 8001694:	4a2f      	ldr	r2, [pc, #188]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	460a      	mov	r2, r1
 800169c:	805a      	strh	r2, [r3, #2]
 800169e:	7b3b      	ldrb	r3, [r7, #12]
 80016a0:	021b      	lsls	r3, r3, #8
 80016a2:	b219      	sxth	r1, r3
 80016a4:	7b7b      	ldrb	r3, [r7, #13]
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016ac:	430a      	orrs	r2, r1
 80016ae:	b211      	sxth	r1, r2
 80016b0:	4a28      	ldr	r2, [pc, #160]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4413      	add	r3, r2
 80016b6:	460a      	mov	r2, r1
 80016b8:	809a      	strh	r2, [r3, #4]
 80016ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016be:	7bb9      	ldrb	r1, [r7, #14]
 80016c0:	4a24      	ldr	r2, [pc, #144]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4413      	add	r3, r2
 80016c6:	460a      	mov	r2, r1
 80016c8:	719a      	strb	r2, [r3, #6]
        	} else if (hcan == &hcan2) {
        		//memcpy(&motorFeedback[1][i], &rx_data[0], 8);
        		get_motor_feedback(&motorFeedback[1][i], rx_data);
        		//usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
        	}
        	break;
 80016ca:	e03b      	b.n	8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
        	} else if (hcan == &hcan2) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a22      	ldr	r2, [pc, #136]	@ (8001758 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d137      	bne.n	8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
        		get_motor_feedback(&motorFeedback[1][i], rx_data);
 80016d4:	7a3b      	ldrb	r3, [r7, #8]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	7a7b      	ldrb	r3, [r7, #9]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016e6:	b291      	uxth	r1, r2
 80016e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80016ea:	330b      	adds	r3, #11
 80016ec:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80016f0:	7abb      	ldrb	r3, [r7, #10]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b219      	sxth	r1, r3
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016fe:	430a      	orrs	r2, r1
 8001700:	b211      	sxth	r1, r2
 8001702:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001704:	330b      	adds	r3, #11
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	460a      	mov	r2, r1
 800170c:	805a      	strh	r2, [r3, #2]
 800170e:	7b3b      	ldrb	r3, [r7, #12]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b219      	sxth	r1, r3
 8001714:	7b7b      	ldrb	r3, [r7, #13]
 8001716:	b21a      	sxth	r2, r3
 8001718:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800171c:	430a      	orrs	r2, r1
 800171e:	b211      	sxth	r1, r2
 8001720:	4a0c      	ldr	r2, [pc, #48]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001722:	330b      	adds	r3, #11
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	460a      	mov	r2, r1
 800172a:	809a      	strh	r2, [r3, #4]
 800172c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001730:	7bb9      	ldrb	r1, [r7, #14]
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001734:	330b      	adds	r3, #11
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	460a      	mov	r2, r1
 800173c:	719a      	strb	r2, [r3, #6]
        	break;
 800173e:	e001      	b.n	8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
        }
        default: {
            break;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
        	break;
 8001744:	bf00      	nop
        }
    }
}
 8001746:	bf00      	nop
 8001748:	3730      	adds	r7, #48	@ 0x30
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200009d8 	.word	0x200009d8
 8001754:	20000380 	.word	0x20000380
 8001758:	20000a00 	.word	0x20000a00

0800175c <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	4604      	mov	r4, r0
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4623      	mov	r3, r4
 800176c:	71fb      	strb	r3, [r7, #7]
 800176e:	4603      	mov	r3, r0
 8001770:	80bb      	strh	r3, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	807b      	strh	r3, [r7, #2]
 8001776:	4613      	mov	r3, r2
 8001778:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 800177a:	88bb      	ldrh	r3, [r7, #4]
 800177c:	4a27      	ldr	r2, [pc, #156]	@ (800181c <CAN_DriveMotor+0xc0>)
 800177e:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <CAN_DriveMotor+0xc0>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <CAN_DriveMotor+0xc0>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 800178c:	4b23      	ldr	r3, [pc, #140]	@ (800181c <CAN_DriveMotor+0xc0>)
 800178e:	2208      	movs	r2, #8
 8001790:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8001792:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001796:	121b      	asrs	r3, r3, #8
 8001798:	b21b      	sxth	r3, r3
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <CAN_DriveMotor+0xc4>)
 800179e:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017a6:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 80017a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017ac:	121b      	asrs	r3, r3, #8
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017b4:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 80017b6:	883b      	ldrh	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017bc:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 80017be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017ca:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 80017cc:	8c3b      	ldrh	r3, [r7, #32]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017d2:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 80017d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80017d8:	121b      	asrs	r3, r3, #8
 80017da:	b21b      	sxth	r3, r3
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017e0:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 80017e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017e8:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d107      	bne.n	8001800 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <CAN_DriveMotor+0xc4>)
 80017f6:	4909      	ldr	r1, [pc, #36]	@ (800181c <CAN_DriveMotor+0xc0>)
 80017f8:	480a      	ldr	r0, [pc, #40]	@ (8001824 <CAN_DriveMotor+0xc8>)
 80017fa:	f005 fa61 	bl	8006cc0 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 80017fe:	e009      	b.n	8001814 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d106      	bne.n	8001814 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <CAN_DriveMotor+0xc4>)
 800180c:	4903      	ldr	r1, [pc, #12]	@ (800181c <CAN_DriveMotor+0xc0>)
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <CAN_DriveMotor+0xcc>)
 8001810:	f005 fa56 	bl	8006cc0 <HAL_CAN_AddTxMessage>
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	20000330 	.word	0x20000330
 8001820:	20000348 	.word	0x20000348
 8001824:	200009d8 	.word	0x200009d8
 8001828:	20000a00 	.word	0x20000a00

0800182c <CAN_defineMotor>:

void CAN_defineMotor(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	460b      	mov	r3, r1
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	717b      	strb	r3, [r7, #5]
	switch(motorType) {
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b02      	cmp	r3, #2
 8001842:	dc02      	bgt.n	800184a <CAN_defineMotor+0x1e>
 8001844:	2b00      	cmp	r3, #0
 8001846:	dc03      	bgt.n	8001850 <CAN_defineMotor+0x24>
 8001848:	e082      	b.n	8001950 <CAN_defineMotor+0x124>
 800184a:	2b03      	cmp	r3, #3
 800184c:	d03a      	beq.n	80018c4 <CAN_defineMotor+0x98>
 800184e:	e07f      	b.n	8001950 <CAN_defineMotor+0x124>
		case (1) :
		case (2) : {
			switch(motorID) {
 8001850:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001854:	2b04      	cmp	r3, #4
 8001856:	dc02      	bgt.n	800185e <CAN_defineMotor+0x32>
 8001858:	2b00      	cmp	r3, #0
 800185a:	dc04      	bgt.n	8001866 <CAN_defineMotor+0x3a>
 800185c:	e02a      	b.n	80018b4 <CAN_defineMotor+0x88>
 800185e:	3b05      	subs	r3, #5
 8001860:	2b03      	cmp	r3, #3
 8001862:	d827      	bhi.n	80018b4 <CAN_defineMotor+0x88>
 8001864:	e012      	b.n	800188c <CAN_defineMotor+0x60>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group1[motorID - 1], motorType);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800186e:	1e59      	subs	r1, r3, #1
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	440b      	add	r3, r1
 800187c:	4a39      	ldr	r2, [pc, #228]	@ (8001964 <CAN_defineMotor+0x138>)
 800187e:	4413      	add	r3, r2
 8001880:	79ba      	ldrb	r2, [r7, #6]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f875 	bl	8001974 <CAN_setMotorDefinition>
					break;
 800188a:	e01a      	b.n	80018c2 <CAN_defineMotor+0x96>
				}
				case (5):
				case (6):
				case (7):
				case (8): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	1e5a      	subs	r2, r3, #1
 8001890:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001894:	1e59      	subs	r1, r3, #1
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	4a30      	ldr	r2, [pc, #192]	@ (8001964 <CAN_defineMotor+0x138>)
 80018a4:	4413      	add	r3, r2
 80018a6:	3304      	adds	r3, #4
 80018a8:	79ba      	ldrb	r2, [r7, #6]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f861 	bl	8001974 <CAN_setMotorDefinition>
					break;
 80018b2:	e006      	b.n	80018c2 <CAN_defineMotor+0x96>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 80018b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018b8:	4619      	mov	r1, r3
 80018ba:	482b      	ldr	r0, [pc, #172]	@ (8001968 <CAN_defineMotor+0x13c>)
 80018bc:	f000 fe94 	bl	80025e8 <usart_printf>
					break;
 80018c0:	bf00      	nop
				}
			}
			break;
 80018c2:	e04b      	b.n	800195c <CAN_defineMotor+0x130>
		}
		case (3): {
			switch(motorID) {
 80018c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d032      	beq.n	8001932 <CAN_defineMotor+0x106>
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	dc37      	bgt.n	8001940 <CAN_defineMotor+0x114>
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	dc02      	bgt.n	80018da <CAN_defineMotor+0xae>
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dc04      	bgt.n	80018e2 <CAN_defineMotor+0xb6>
 80018d8:	e032      	b.n	8001940 <CAN_defineMotor+0x114>
 80018da:	3b05      	subs	r3, #5
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d82f      	bhi.n	8001940 <CAN_defineMotor+0x114>
 80018e0:	e013      	b.n	800190a <CAN_defineMotor+0xde>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001964 <CAN_defineMotor+0x138>)
 80018fa:	4413      	add	r3, r2
 80018fc:	3304      	adds	r3, #4
 80018fe:	79ba      	ldrb	r2, [r7, #6]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f836 	bl	8001974 <CAN_setMotorDefinition>
					break;
 8001908:	e021      	b.n	800194e <CAN_defineMotor+0x122>
				}
				case (5):
				case (6):
				case (7): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group3[motorID - 5], motorType);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001912:	1f59      	subs	r1, r3, #5
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	440b      	add	r3, r1
 8001920:	3308      	adds	r3, #8
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <CAN_defineMotor+0x138>)
 8001924:	4413      	add	r3, r2
 8001926:	79ba      	ldrb	r2, [r7, #6]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f822 	bl	8001974 <CAN_setMotorDefinition>
					break;
 8001930:	e00d      	b.n	800194e <CAN_defineMotor+0x122>
				}
				case (8): {               // call the user a dumbass for spawning an ID 8 on 0x2FF
					usart_printf("WARNING - motor ID 8 is not available for GM6020s according to DJI's CAN protocols \r\n", motorID);
 8001932:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001936:	4619      	mov	r1, r3
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <CAN_defineMotor+0x140>)
 800193a:	f000 fe55 	bl	80025e8 <usart_printf>
					break;
 800193e:	e006      	b.n	800194e <CAN_defineMotor+0x122>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001940:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001944:	4619      	mov	r1, r3
 8001946:	4808      	ldr	r0, [pc, #32]	@ (8001968 <CAN_defineMotor+0x13c>)
 8001948:	f000 fe4e 	bl	80025e8 <usart_printf>
					break;
 800194c:	bf00      	nop
				}
			}
			break;
 800194e:	e005      	b.n	800195c <CAN_defineMotor+0x130>
		}
		default: {
			usart_printf("WARNING - motor type %d does not match any registered motors \r\n", motorType);
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	4619      	mov	r1, r3
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <CAN_defineMotor+0x144>)
 8001956:	f000 fe47 	bl	80025e8 <usart_printf>
			break;
 800195a:	bf00      	nop
		}
	}
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000040 	.word	0x20000040
 8001968:	080122e0 	.word	0x080122e0
 800196c:	08012320 	.word	0x08012320
 8001970:	08012378 	.word	0x08012378

08001974 <CAN_setMotorDefinition>:

void CAN_setMotorDefinition(int8_t *Declaration, MotorType_ID motorType) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
	if (*Declaration == -1) {    // ok
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f993 3000 	ldrsb.w	r3, [r3]
 8001986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800198a:	d104      	bne.n	8001996 <CAN_setMotorDefinition+0x22>
		*Declaration = motorType;
 800198c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	701a      	strb	r2, [r3, #0]
	} else {                           // repeat definition, do nothing
		usart_printf("WARNING - motor ID has already been set \r\n");
	}
}
 8001994:	e002      	b.n	800199c <CAN_setMotorDefinition+0x28>
		usart_printf("WARNING - motor ID has already been set \r\n");
 8001996:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <CAN_setMotorDefinition+0x30>)
 8001998:	f000 fe26 	bl	80025e8 <usart_printf>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	080123b8 	.word	0x080123b8

080019a8 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	4603      	mov	r3, r0
 80019bc:	71bb      	strb	r3, [r7, #6]
 80019be:	460b      	mov	r3, r1
 80019c0:	717b      	strb	r3, [r7, #5]
 80019c2:	4613      	mov	r3, r2
 80019c4:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 80019c6:	79bb      	ldrb	r3, [r7, #6]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	f000 8142 	beq.w	8001c52 <CAN_setMotorCtrlVal+0x2aa>
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	f300 81e1 	bgt.w	8001d96 <CAN_setMotorCtrlVal+0x3ee>
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	dc02      	bgt.n	80019de <CAN_setMotorCtrlVal+0x36>
 80019d8:	2b00      	cmp	r3, #0
 80019da:	dc04      	bgt.n	80019e6 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 80019dc:	e1db      	b.n	8001d96 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 80019de:	2b03      	cmp	r3, #3
 80019e0:	f000 8097 	beq.w	8001b12 <CAN_setMotorCtrlVal+0x16a>
}
 80019e4:	e1d7      	b.n	8001d96 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80019e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	dc02      	bgt.n	80019f4 <CAN_setMotorCtrlVal+0x4c>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc05      	bgt.n	80019fe <CAN_setMotorCtrlVal+0x56>
					break;
 80019f2:	e08c      	b.n	8001b0e <CAN_setMotorCtrlVal+0x166>
 80019f4:	3b05      	subs	r3, #5
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	f200 8089 	bhi.w	8001b0e <CAN_setMotorCtrlVal+0x166>
 80019fc:	e042      	b.n	8001a84 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a06:	1e59      	subs	r1, r3, #1
 8001a08:	48bd      	ldr	r0, [pc, #756]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	887a      	ldrh	r2, [r7, #2]
 8001a16:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	49b8      	ldr	r1, [pc, #736]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	49b3      	ldr	r1, [pc, #716]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	49ad      	ldr	r1, [pc, #692]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	3304      	adds	r3, #4
 8001a56:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	48a8      	ldr	r0, [pc, #672]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4403      	add	r3, r0
 8001a6a:	3306      	adds	r3, #6
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	79f8      	ldrb	r0, [r7, #7]
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	9100      	str	r1, [sp, #0]
 8001a76:	462b      	mov	r3, r5
 8001a78:	4622      	mov	r2, r4
 8001a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a7e:	f7ff fe6d 	bl	800175c <CAN_DriveMotor>
					break;
 8001a82:	e045      	b.n	8001b10 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a8c:	1f59      	subs	r1, r3, #5
 8001a8e:	489c      	ldr	r0, [pc, #624]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	4996      	ldr	r1, [pc, #600]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	1e5a      	subs	r2, r3, #1
 8001abc:	4990      	ldr	r1, [pc, #576]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	330a      	adds	r3, #10
 8001aca:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	498b      	ldr	r1, [pc, #556]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	330c      	adds	r3, #12
 8001ae0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	4885      	ldr	r0, [pc, #532]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4403      	add	r3, r0
 8001af4:	330e      	adds	r3, #14
 8001af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afa:	79f8      	ldrb	r0, [r7, #7]
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	9100      	str	r1, [sp, #0]
 8001b00:	462b      	mov	r3, r5
 8001b02:	4622      	mov	r2, r4
 8001b04:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001b08:	f7ff fe28 	bl	800175c <CAN_DriveMotor>
					break;
 8001b0c:	e000      	b.n	8001b10 <CAN_setMotorCtrlVal+0x168>
					break;
 8001b0e:	bf00      	nop
			break;
 8001b10:	e141      	b.n	8001d96 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001b12:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	f000 8097 	beq.w	8001c4a <CAN_setMotorCtrlVal+0x2a2>
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	f300 8096 	bgt.w	8001c4e <CAN_setMotorCtrlVal+0x2a6>
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	dc02      	bgt.n	8001b2c <CAN_setMotorCtrlVal+0x184>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	dc05      	bgt.n	8001b36 <CAN_setMotorCtrlVal+0x18e>
					break;
 8001b2a:	e090      	b.n	8001c4e <CAN_setMotorCtrlVal+0x2a6>
 8001b2c:	3b05      	subs	r3, #5
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	f200 808d 	bhi.w	8001c4e <CAN_setMotorCtrlVal+0x2a6>
 8001b34:	e044      	b.n	8001bc0 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b3e:	1e59      	subs	r1, r3, #1
 8001b40:	486f      	ldr	r0, [pc, #444]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	1e5a      	subs	r2, r3, #1
 8001b58:	4969      	ldr	r1, [pc, #420]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	3308      	adds	r3, #8
 8001b66:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	4964      	ldr	r1, [pc, #400]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	495e      	ldr	r1, [pc, #376]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	330c      	adds	r3, #12
 8001b92:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	4859      	ldr	r0, [pc, #356]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4403      	add	r3, r0
 8001ba6:	330e      	adds	r3, #14
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	79f8      	ldrb	r0, [r7, #7]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	9100      	str	r1, [sp, #0]
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001bba:	f7ff fdcf 	bl	800175c <CAN_DriveMotor>
					break;
 8001bbe:	e047      	b.n	8001c50 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	1e5a      	subs	r2, r3, #1
 8001bc4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bc8:	1f59      	subs	r1, r3, #5
 8001bca:	484d      	ldr	r0, [pc, #308]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	887a      	ldrh	r2, [r7, #2]
 8001bda:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	1e5a      	subs	r2, r3, #1
 8001be2:	4947      	ldr	r1, [pc, #284]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	3310      	adds	r3, #16
 8001bf0:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	4941      	ldr	r1, [pc, #260]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3312      	adds	r3, #18
 8001c06:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	1e5a      	subs	r2, r3, #1
 8001c0e:	493c      	ldr	r1, [pc, #240]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	3314      	adds	r3, #20
 8001c1c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	1e5a      	subs	r2, r3, #1
 8001c24:	4836      	ldr	r0, [pc, #216]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4403      	add	r3, r0
 8001c30:	3316      	adds	r3, #22
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	79f8      	ldrb	r0, [r7, #7]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	9100      	str	r1, [sp, #0]
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	4622      	mov	r2, r4
 8001c40:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001c44:	f7ff fd8a 	bl	800175c <CAN_DriveMotor>
					break;
 8001c48:	e002      	b.n	8001c50 <CAN_setMotorCtrlVal+0x2a8>
					break;
 8001c4a:	bf00      	nop
 8001c4c:	e0a3      	b.n	8001d96 <CAN_setMotorCtrlVal+0x3ee>
					break;
 8001c4e:	bf00      	nop
			break;
 8001c50:	e0a1      	b.n	8001d96 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001c52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	f000 8099 	beq.w	8001d8e <CAN_setMotorCtrlVal+0x3e6>
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	f300 8098 	bgt.w	8001d92 <CAN_setMotorCtrlVal+0x3ea>
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	dc02      	bgt.n	8001c6c <CAN_setMotorCtrlVal+0x2c4>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	dc05      	bgt.n	8001c76 <CAN_setMotorCtrlVal+0x2ce>
					break;
 8001c6a:	e092      	b.n	8001d92 <CAN_setMotorCtrlVal+0x3ea>
 8001c6c:	3b05      	subs	r3, #5
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	f200 808f 	bhi.w	8001d92 <CAN_setMotorCtrlVal+0x3ea>
 8001c74:	e046      	b.n	8001d04 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c7e:	1e59      	subs	r1, r3, #1
 8001c80:	481f      	ldr	r0, [pc, #124]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	4919      	ldr	r1, [pc, #100]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	4914      	ldr	r1, [pc, #80]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	330a      	adds	r3, #10
 8001cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	490e      	ldr	r1, [pc, #56]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	4809      	ldr	r0, [pc, #36]	@ (8001d00 <CAN_setMotorCtrlVal+0x358>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4403      	add	r3, r0
 8001ce6:	330e      	adds	r3, #14
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	79f8      	ldrb	r0, [r7, #7]
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	9100      	str	r1, [sp, #0]
 8001cf2:	462b      	mov	r3, r5
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001cfa:	f7ff fd2f 	bl	800175c <CAN_DriveMotor>
					break;
 8001cfe:	e049      	b.n	8001d94 <CAN_setMotorCtrlVal+0x3ec>
 8001d00:	20000350 	.word	0x20000350
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d0c:	1f59      	subs	r1, r3, #5
 8001d0e:	4824      	ldr	r0, [pc, #144]	@ (8001da0 <CAN_setMotorCtrlVal+0x3f8>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	491e      	ldr	r1, [pc, #120]	@ (8001da0 <CAN_setMotorCtrlVal+0x3f8>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	3310      	adds	r3, #16
 8001d34:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	1e5a      	subs	r2, r3, #1
 8001d3c:	4918      	ldr	r1, [pc, #96]	@ (8001da0 <CAN_setMotorCtrlVal+0x3f8>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	3312      	adds	r3, #18
 8001d4a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	4913      	ldr	r1, [pc, #76]	@ (8001da0 <CAN_setMotorCtrlVal+0x3f8>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3314      	adds	r3, #20
 8001d60:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	1e5a      	subs	r2, r3, #1
 8001d68:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <CAN_setMotorCtrlVal+0x3f8>)
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4403      	add	r3, r0
 8001d74:	3316      	adds	r3, #22
 8001d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7a:	79f8      	ldrb	r0, [r7, #7]
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	9100      	str	r1, [sp, #0]
 8001d80:	462b      	mov	r3, r5
 8001d82:	4622      	mov	r2, r4
 8001d84:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001d88:	f7ff fce8 	bl	800175c <CAN_DriveMotor>
					break;
 8001d8c:	e002      	b.n	8001d94 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8001d8e:	bf00      	nop
 8001d90:	e000      	b.n	8001d94 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8001d92:	bf00      	nop
			break;
 8001d94:	bf00      	nop
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000350 	.word	0x20000350

08001da4 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b08b      	sub	sp, #44	@ 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4604      	mov	r4, r0
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	eef0 6a40 	vmov.f32	s13, s0
 8001db6:	eeb0 7a60 	vmov.f32	s14, s1
 8001dba:	eef0 7a41 	vmov.f32	s15, s2
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	75fb      	strb	r3, [r7, #23]
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	75bb      	strb	r3, [r7, #22]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	757b      	strb	r3, [r7, #21]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	827b      	strh	r3, [r7, #18]
 8001dce:	edc7 6a01 	vstr	s13, [r7, #4]
 8001dd2:	ed87 7a02 	vstr	s14, [r7, #8]
 8001dd6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001de4:	7dbb      	ldrb	r3, [r7, #22]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	dc02      	bgt.n	8001df0 <calcRPM_PID+0x4c>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dc04      	bgt.n	8001df8 <calcRPM_PID+0x54>
 8001dee:	e00d      	b.n	8001e0c <calcRPM_PID+0x68>
 8001df0:	3b03      	subs	r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d80a      	bhi.n	8001e0c <calcRPM_PID+0x68>
 8001df6:	e004      	b.n	8001e02 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001df8:	7d7b      	ldrb	r3, [r7, #21]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e00:	e009      	b.n	8001e16 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001e02:	7d7b      	ldrb	r3, [r7, #21]
 8001e04:	3303      	adds	r3, #3
 8001e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e0a:	e004      	b.n	8001e16 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8001e0c:	7d7b      	ldrb	r3, [r7, #21]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e14:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001e16:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001e1a:	7ffa      	ldrb	r2, [r7, #31]
 8001e1c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001e20:	4c70      	ldr	r4, [pc, #448]	@ (8001fe4 <calcRPM_PID+0x240>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4403      	add	r3, r0
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4423      	add	r3, r4
 8001e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e36:	7ffa      	ldrb	r2, [r7, #31]
 8001e38:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001e3c:	1ac9      	subs	r1, r1, r3
 8001e3e:	4c6a      	ldr	r4, [pc, #424]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	4403      	add	r3, r0
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	4423      	add	r3, r4
 8001e50:	3304      	adds	r3, #4
 8001e52:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001e54:	7ffa      	ldrb	r2, [r7, #31]
 8001e56:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e5a:	4863      	ldr	r0, [pc, #396]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4403      	add	r3, r0
 8001e6c:	3308      	adds	r3, #8
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	7ffa      	ldrb	r2, [r7, #31]
 8001e72:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001e76:	4c5c      	ldr	r4, [pc, #368]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	4403      	add	r3, r0
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4423      	add	r3, r4
 8001e88:	3304      	adds	r3, #4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	7ffa      	ldrb	r2, [r7, #31]
 8001e8e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001e92:	4419      	add	r1, r3
 8001e94:	4c54      	ldr	r4, [pc, #336]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4403      	add	r3, r0
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4423      	add	r3, r4
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8001eaa:	7ffa      	ldrb	r2, [r7, #31]
 8001eac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001eb0:	484d      	ldr	r0, [pc, #308]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4403      	add	r3, r0
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	7ffa      	ldrb	r2, [r7, #31]
 8001ec6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001eca:	4c46      	ldr	r4, [pc, #280]	@ (8001fe4 <calcRPM_PID+0x240>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4403      	add	r3, r0
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4423      	add	r3, r4
 8001edc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ee0:	7ffa      	ldrb	r2, [r7, #31]
 8001ee2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001ee6:	1ac9      	subs	r1, r1, r3
 8001ee8:	4c3f      	ldr	r4, [pc, #252]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4423      	add	r3, r4
 8001efa:	330c      	adds	r3, #12
 8001efc:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8001efe:	7ffa      	ldrb	r2, [r7, #31]
 8001f00:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001f04:	4837      	ldr	r0, [pc, #220]	@ (8001fe4 <calcRPM_PID+0x240>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4403      	add	r3, r0
 8001f16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f1a:	7ffa      	ldrb	r2, [r7, #31]
 8001f1c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001f20:	461c      	mov	r4, r3
 8001f22:	4831      	ldr	r0, [pc, #196]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4403      	add	r3, r0
 8001f34:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001f36:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f3a:	7ffa      	ldrb	r2, [r7, #31]
 8001f3c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001f40:	4829      	ldr	r0, [pc, #164]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4403      	add	r3, r0
 8001f52:	3304      	adds	r3, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f62:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f66:	7ffa      	ldrb	r2, [r7, #31]
 8001f68:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001f6c:	481e      	ldr	r0, [pc, #120]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4403      	add	r3, r0
 8001f7e:	3308      	adds	r3, #8
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f92:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f96:	7ffa      	ldrb	r2, [r7, #31]
 8001f98:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001f9c:	4812      	ldr	r0, [pc, #72]	@ (8001fe8 <calcRPM_PID+0x244>)
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	4403      	add	r3, r0
 8001fae:	330c      	adds	r3, #12
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001fcc:	7dbb      	ldrb	r3, [r7, #22]
 8001fce:	6a39      	ldr	r1, [r7, #32]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f997 	bl	8002304 <applyCtrlLimit>
 8001fd6:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	372c      	adds	r7, #44	@ 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000380 	.word	0x20000380
 8001fe8:	20000430 	.word	0x20000430

08001fec <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b08b      	sub	sp, #44	@ 0x2c
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	eef0 6a40 	vmov.f32	s13, s0
 8001ffe:	eeb0 7a60 	vmov.f32	s14, s1
 8002002:	eef0 7a41 	vmov.f32	s15, s2
 8002006:	4623      	mov	r3, r4
 8002008:	75fb      	strb	r3, [r7, #23]
 800200a:	4603      	mov	r3, r0
 800200c:	75bb      	strb	r3, [r7, #22]
 800200e:	460b      	mov	r3, r1
 8002010:	757b      	strb	r3, [r7, #21]
 8002012:	4613      	mov	r3, r2
 8002014:	827b      	strh	r3, [r7, #18]
 8002016:	edc7 6a01 	vstr	s13, [r7, #4]
 800201a:	ed87 7a02 	vstr	s14, [r7, #8]
 800201e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	3b01      	subs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8002034:	7dbb      	ldrb	r3, [r7, #22]
 8002036:	2b02      	cmp	r3, #2
 8002038:	dc02      	bgt.n	8002040 <calcPosition_PID+0x54>
 800203a:	2b00      	cmp	r3, #0
 800203c:	dc04      	bgt.n	8002048 <calcPosition_PID+0x5c>
 800203e:	e00d      	b.n	800205c <calcPosition_PID+0x70>
 8002040:	3b03      	subs	r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d80a      	bhi.n	800205c <calcPosition_PID+0x70>
 8002046:	e004      	b.n	8002052 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8002048:	7d7b      	ldrb	r3, [r7, #21]
 800204a:	3b01      	subs	r3, #1
 800204c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002050:	e009      	b.n	8002066 <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8002052:	7d7b      	ldrb	r3, [r7, #21]
 8002054:	3303      	adds	r3, #3
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800205a:	e004      	b.n	8002066 <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 800205c:	7d7b      	ldrb	r3, [r7, #21]
 800205e:	3b01      	subs	r3, #1
 8002060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002064:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 8002066:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800206a:	7ffa      	ldrb	r2, [r7, #31]
 800206c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002070:	4ca2      	ldr	r4, [pc, #648]	@ (80022fc <calcPosition_PID+0x310>)
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	4403      	add	r3, r0
 800207e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002082:	1acb      	subs	r3, r1, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	db10      	blt.n	80020aa <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 8002088:	8a79      	ldrh	r1, [r7, #18]
 800208a:	7ffa      	ldrb	r2, [r7, #31]
 800208c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002090:	4c9a      	ldr	r4, [pc, #616]	@ (80022fc <calcPosition_PID+0x310>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	4403      	add	r3, r0
 800209e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80020a2:	1acb      	subs	r3, r1, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	83bb      	strh	r3, [r7, #28]
 80020a8:	e012      	b.n	80020d0 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 80020aa:	8a79      	ldrh	r1, [r7, #18]
 80020ac:	7ffa      	ldrb	r2, [r7, #31]
 80020ae:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020b2:	4c92      	ldr	r4, [pc, #584]	@ (80022fc <calcPosition_PID+0x310>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	4403      	add	r3, r0
 80020c0:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80020c4:	1acb      	subs	r3, r1, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 80020d0:	7ffa      	ldrb	r2, [r7, #31]
 80020d2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80020d6:	4889      	ldr	r0, [pc, #548]	@ (80022fc <calcPosition_PID+0x310>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	db10      	blt.n	8002116 <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 80020f4:	7ffa      	ldrb	r2, [r7, #31]
 80020f6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80020fa:	4880      	ldr	r0, [pc, #512]	@ (80022fc <calcPosition_PID+0x310>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	440b      	add	r3, r1
 8002108:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800210c:	8a7b      	ldrh	r3, [r7, #18]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	b29b      	uxth	r3, r3
 8002112:	837b      	strh	r3, [r7, #26]
 8002114:	e012      	b.n	800213c <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 8002116:	7ffa      	ldrb	r2, [r7, #31]
 8002118:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800211c:	4877      	ldr	r0, [pc, #476]	@ (80022fc <calcPosition_PID+0x310>)
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	440b      	add	r3, r1
 800212a:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800212e:	8a7b      	ldrh	r3, [r7, #18]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b29b      	uxth	r3, r3
 8002134:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002138:	b29b      	uxth	r3, r3
 800213a:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 800213c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002140:	7ffa      	ldrb	r2, [r7, #31]
 8002142:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002146:	4c6d      	ldr	r4, [pc, #436]	@ (80022fc <calcPosition_PID+0x310>)
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	4403      	add	r3, r0
 8002154:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002158:	7ffa      	ldrb	r2, [r7, #31]
 800215a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800215e:	1ac9      	subs	r1, r1, r3
 8002160:	4c67      	ldr	r4, [pc, #412]	@ (8002300 <calcPosition_PID+0x314>)
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	4403      	add	r3, r0
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	4423      	add	r3, r4
 8002172:	3304      	adds	r3, #4
 8002174:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002176:	7ffa      	ldrb	r2, [r7, #31]
 8002178:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800217c:	4860      	ldr	r0, [pc, #384]	@ (8002300 <calcPosition_PID+0x314>)
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	440b      	add	r3, r1
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4403      	add	r3, r0
 800218e:	3308      	adds	r3, #8
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	7ffa      	ldrb	r2, [r7, #31]
 8002194:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002198:	4c59      	ldr	r4, [pc, #356]	@ (8002300 <calcPosition_PID+0x314>)
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	4403      	add	r3, r0
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	4423      	add	r3, r4
 80021aa:	3304      	adds	r3, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	7ffa      	ldrb	r2, [r7, #31]
 80021b0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80021b4:	4419      	add	r1, r3
 80021b6:	4c52      	ldr	r4, [pc, #328]	@ (8002300 <calcPosition_PID+0x314>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	4403      	add	r3, r0
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4423      	add	r3, r4
 80021c8:	3308      	adds	r3, #8
 80021ca:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 80021cc:	7ffa      	ldrb	r2, [r7, #31]
 80021ce:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021d2:	484b      	ldr	r0, [pc, #300]	@ (8002300 <calcPosition_PID+0x314>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	440b      	add	r3, r1
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	4403      	add	r3, r0
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	7ffa      	ldrb	r2, [r7, #31]
 80021e8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80021ec:	4c43      	ldr	r4, [pc, #268]	@ (80022fc <calcPosition_PID+0x310>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	4403      	add	r3, r0
 80021fa:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80021fe:	7ffa      	ldrb	r2, [r7, #31]
 8002200:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002204:	1ac9      	subs	r1, r1, r3
 8002206:	4c3e      	ldr	r4, [pc, #248]	@ (8002300 <calcPosition_PID+0x314>)
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	4403      	add	r3, r0
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4423      	add	r3, r4
 8002218:	330c      	adds	r3, #12
 800221a:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 800221c:	7ffa      	ldrb	r2, [r7, #31]
 800221e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002222:	4836      	ldr	r0, [pc, #216]	@ (80022fc <calcPosition_PID+0x310>)
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	440b      	add	r3, r1
 8002230:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002234:	7ffa      	ldrb	r2, [r7, #31]
 8002236:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800223a:	461c      	mov	r4, r3
 800223c:	4830      	ldr	r0, [pc, #192]	@ (8002300 <calcPosition_PID+0x314>)
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	440b      	add	r3, r1
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	4403      	add	r3, r0
 800224e:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8002250:	ed97 7a01 	vldr	s14, [r7, #4]
 8002254:	7ffa      	ldrb	r2, [r7, #31]
 8002256:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800225a:	4829      	ldr	r0, [pc, #164]	@ (8002300 <calcPosition_PID+0x314>)
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	440b      	add	r3, r1
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	4403      	add	r3, r0
 800226c:	3304      	adds	r3, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227c:	edd7 6a02 	vldr	s13, [r7, #8]
 8002280:	7ffa      	ldrb	r2, [r7, #31]
 8002282:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002286:	481e      	ldr	r0, [pc, #120]	@ (8002300 <calcPosition_PID+0x314>)
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	440b      	add	r3, r1
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4403      	add	r3, r0
 8002298:	3308      	adds	r3, #8
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ac:	edd7 6a03 	vldr	s13, [r7, #12]
 80022b0:	7ffa      	ldrb	r2, [r7, #31]
 80022b2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80022b6:	4812      	ldr	r0, [pc, #72]	@ (8002300 <calcPosition_PID+0x314>)
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	4403      	add	r3, r0
 80022c8:	330c      	adds	r3, #12
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e0:	ee17 3a90 	vmov	r3, s15
 80022e4:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f80a 	bl	8002304 <applyCtrlLimit>
 80022f0:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	372c      	adds	r7, #44	@ 0x2c
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	20000380 	.word	0x20000380
 8002300:	20000430 	.word	0x20000430

08002304 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d009      	beq.n	800232a <applyCtrlLimit+0x26>
 8002316:	2b04      	cmp	r3, #4
 8002318:	dc29      	bgt.n	800236e <applyCtrlLimit+0x6a>
 800231a:	2b02      	cmp	r3, #2
 800231c:	dc02      	bgt.n	8002324 <applyCtrlLimit+0x20>
 800231e:	2b00      	cmp	r3, #0
 8002320:	dc03      	bgt.n	800232a <applyCtrlLimit+0x26>
 8002322:	e024      	b.n	800236e <applyCtrlLimit+0x6a>
 8002324:	2b03      	cmp	r3, #3
 8002326:	d00f      	beq.n	8002348 <applyCtrlLimit+0x44>
 8002328:	e021      	b.n	800236e <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002330:	dd03      	ble.n	800233a <applyCtrlLimit+0x36>
				val = 16384;
 8002332:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002336:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8002338:	e016      	b.n	8002368 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8002340:	da12      	bge.n	8002368 <applyCtrlLimit+0x64>
				val = -16384;
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <applyCtrlLimit+0x78>)
 8002344:	603b      	str	r3, [r7, #0]
			break;
 8002346:	e00f      	b.n	8002368 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800234e:	4293      	cmp	r3, r2
 8002350:	dd03      	ble.n	800235a <applyCtrlLimit+0x56>
				val = 25000;
 8002352:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8002356:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8002358:	e008      	b.n	800236c <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	4a08      	ldr	r2, [pc, #32]	@ (8002380 <applyCtrlLimit+0x7c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	da04      	bge.n	800236c <applyCtrlLimit+0x68>
				val = -25000;
 8002362:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <applyCtrlLimit+0x7c>)
 8002364:	603b      	str	r3, [r7, #0]
			break;
 8002366:	e001      	b.n	800236c <applyCtrlLimit+0x68>
			break;
 8002368:	bf00      	nop
 800236a:	e000      	b.n	800236e <applyCtrlLimit+0x6a>
			break;
 800236c:	bf00      	nop
		}
	}
	return val;
 800236e:	683b      	ldr	r3, [r7, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	ffffc000 	.word	0xffffc000
 8002380:	ffff9e58 	.word	0xffff9e58

08002384 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	eef0 6a40 	vmov.f32	s13, s0
 8002396:	eeb0 7a60 	vmov.f32	s14, s1
 800239a:	eef0 7a41 	vmov.f32	s15, s2
 800239e:	4623      	mov	r3, r4
 80023a0:	75fb      	strb	r3, [r7, #23]
 80023a2:	4603      	mov	r3, r0
 80023a4:	75bb      	strb	r3, [r7, #22]
 80023a6:	460b      	mov	r3, r1
 80023a8:	757b      	strb	r3, [r7, #21]
 80023aa:	4613      	mov	r3, r2
 80023ac:	827b      	strh	r3, [r7, #18]
 80023ae:	edc7 6a01 	vstr	s13, [r7, #4]
 80023b2:	ed87 7a02 	vstr	s14, [r7, #8]
 80023b6:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 80023ba:	edd7 6a01 	vldr	s13, [r7, #4]
 80023be:	ed97 7a02 	vldr	s14, [r7, #8]
 80023c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ca:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80023ce:	7db9      	ldrb	r1, [r7, #22]
 80023d0:	7df8      	ldrb	r0, [r7, #23]
 80023d2:	eeb0 0a66 	vmov.f32	s0, s13
 80023d6:	eef0 0a47 	vmov.f32	s1, s14
 80023da:	eeb0 1a67 	vmov.f32	s2, s15
 80023de:	f7ff fce1 	bl	8001da4 <calcRPM_PID>
 80023e2:	4603      	mov	r3, r0
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80023ea:	7db9      	ldrb	r1, [r7, #22]
 80023ec:	7df8      	ldrb	r0, [r7, #23]
 80023ee:	f7ff fadb 	bl	80019a8 <CAN_setMotorCtrlVal>
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}

080023fa <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 80023fa:	b590      	push	{r4, r7, lr}
 80023fc:	b087      	sub	sp, #28
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4604      	mov	r4, r0
 8002402:	4608      	mov	r0, r1
 8002404:	4611      	mov	r1, r2
 8002406:	461a      	mov	r2, r3
 8002408:	eef0 6a40 	vmov.f32	s13, s0
 800240c:	eeb0 7a60 	vmov.f32	s14, s1
 8002410:	eef0 7a41 	vmov.f32	s15, s2
 8002414:	4623      	mov	r3, r4
 8002416:	75fb      	strb	r3, [r7, #23]
 8002418:	4603      	mov	r3, r0
 800241a:	75bb      	strb	r3, [r7, #22]
 800241c:	460b      	mov	r3, r1
 800241e:	757b      	strb	r3, [r7, #21]
 8002420:	4613      	mov	r3, r2
 8002422:	827b      	strh	r3, [r7, #18]
 8002424:	edc7 6a01 	vstr	s13, [r7, #4]
 8002428:	ed87 7a02 	vstr	s14, [r7, #8]
 800242c:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 8002430:	edd7 6a01 	vldr	s13, [r7, #4]
 8002434:	ed97 7a02 	vldr	s14, [r7, #8]
 8002438:	edd7 7a03 	vldr	s15, [r7, #12]
 800243c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002440:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002444:	7db9      	ldrb	r1, [r7, #22]
 8002446:	7df8      	ldrb	r0, [r7, #23]
 8002448:	eeb0 0a66 	vmov.f32	s0, s13
 800244c:	eef0 0a47 	vmov.f32	s1, s14
 8002450:	eeb0 1a67 	vmov.f32	s2, s15
 8002454:	f7ff fdca 	bl	8001fec <calcPosition_PID>
 8002458:	4603      	mov	r3, r0
 800245a:	b21b      	sxth	r3, r3
 800245c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002460:	7db9      	ldrb	r1, [r7, #22]
 8002462:	7df8      	ldrb	r0, [r7, #23]
 8002464:	f7ff faa0 	bl	80019a8 <CAN_setMotorCtrlVal>
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}

08002470 <getMotorRPM>:
		}
	}
	return -1;
}

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
 800247a:	460b      	mov	r3, r1
 800247c:	71bb      	strb	r3, [r7, #6]
 800247e:	4613      	mov	r3, r2
 8002480:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002482:	79bb      	ldrb	r3, [r7, #6]
 8002484:	2b02      	cmp	r3, #2
 8002486:	dc02      	bgt.n	800248e <getMotorRPM+0x1e>
 8002488:	2b00      	cmp	r3, #0
 800248a:	dc04      	bgt.n	8002496 <getMotorRPM+0x26>
 800248c:	e038      	b.n	8002500 <getMotorRPM+0x90>
 800248e:	3b03      	subs	r3, #3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d835      	bhi.n	8002500 <getMotorRPM+0x90>
 8002494:	e018      	b.n	80024c8 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002496:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800249a:	2b00      	cmp	r3, #0
 800249c:	dd2d      	ble.n	80024fa <getMotorRPM+0x8a>
 800249e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	dc29      	bgt.n	80024fa <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024ae:	1e59      	subs	r1, r3, #1
 80024b0:	4817      	ldr	r0, [pc, #92]	@ (8002510 <getMotorRPM+0xa0>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	440b      	add	r3, r1
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4403      	add	r3, r0
 80024c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024c6:	e01d      	b.n	8002504 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 80024c8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	dd16      	ble.n	80024fe <getMotorRPM+0x8e>
 80024d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024d4:	2b07      	cmp	r3, #7
 80024d6:	dc12      	bgt.n	80024fe <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	1e5a      	subs	r2, r3, #1
 80024dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024e0:	1cd9      	adds	r1, r3, #3
 80024e2:	480b      	ldr	r0, [pc, #44]	@ (8002510 <getMotorRPM+0xa0>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4403      	add	r3, r0
 80024f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024f8:	e004      	b.n	8002504 <getMotorRPM+0x94>
			break;
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <getMotorRPM+0x90>
			}
			break;
 80024fe:	bf00      	nop
		}
	}
	return -1;
 8002500:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20000380 	.word	0x20000380

08002514 <getMotorCurrent>:

int16_t getMotorCurrent(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	460b      	mov	r3, r1
 8002520:	71bb      	strb	r3, [r7, #6]
 8002522:	4613      	mov	r3, r2
 8002524:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b02      	cmp	r3, #2
 800252a:	dc02      	bgt.n	8002532 <getMotorCurrent+0x1e>
 800252c:	2b00      	cmp	r3, #0
 800252e:	dc04      	bgt.n	800253a <getMotorCurrent+0x26>
 8002530:	e038      	b.n	80025a4 <getMotorCurrent+0x90>
 8002532:	3b03      	subs	r3, #3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d835      	bhi.n	80025a4 <getMotorCurrent+0x90>
 8002538:	e018      	b.n	800256c <getMotorCurrent+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 800253a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800253e:	2b00      	cmp	r3, #0
 8002540:	dd2d      	ble.n	800259e <getMotorCurrent+0x8a>
 8002542:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002546:	2b08      	cmp	r3, #8
 8002548:	dc29      	bgt.n	800259e <getMotorCurrent+0x8a>
				return motorFeedback[bus - 1][motorID - 1].torque_current;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002552:	1e59      	subs	r1, r3, #1
 8002554:	4817      	ldr	r0, [pc, #92]	@ (80025b4 <getMotorCurrent+0xa0>)
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	440b      	add	r3, r1
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4403      	add	r3, r0
 8002566:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800256a:	e01d      	b.n	80025a8 <getMotorCurrent+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 800256c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002570:	2b00      	cmp	r3, #0
 8002572:	dd16      	ble.n	80025a2 <getMotorCurrent+0x8e>
 8002574:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002578:	2b07      	cmp	r3, #7
 800257a:	dc12      	bgt.n	80025a2 <getMotorCurrent+0x8e>
				return motorFeedback[bus - 1][motorID + 3].torque_current;
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002584:	1cd9      	adds	r1, r3, #3
 8002586:	480b      	ldr	r0, [pc, #44]	@ (80025b4 <getMotorCurrent+0xa0>)
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	440b      	add	r3, r1
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4403      	add	r3, r0
 8002598:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800259c:	e004      	b.n	80025a8 <getMotorCurrent+0x94>
			break;
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <getMotorCurrent+0x90>
			}
			break;
 80025a2:	bf00      	nop
		}
	}
	return -1;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20000380 	.word	0x20000380

080025b8 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 80025bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025c0:	4905      	ldr	r1, [pc, #20]	@ (80025d8 <usart_Init+0x20>)
 80025c2:	4806      	ldr	r0, [pc, #24]	@ (80025dc <usart_Init+0x24>)
 80025c4:	f008 fed2 	bl	800b36c <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80025c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025cc:	4904      	ldr	r1, [pc, #16]	@ (80025e0 <usart_Init+0x28>)
 80025ce:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <usart_Init+0x2c>)
 80025d0:	f008 fecc 	bl	800b36c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000590 	.word	0x20000590
 80025dc:	20000d5c 	.word	0x20000d5c
 80025e0:	20000690 	.word	0x20000690
 80025e4:	20000dec 	.word	0x20000dec

080025e8 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80025e8:	b40f      	push	{r0, r1, r2, r3}
 80025ea:	b580      	push	{r7, lr}
 80025ec:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002624 <usart_printf+0x3c>)
 80025f4:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80025f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <usart_printf+0x3c>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	480a      	ldr	r0, [pc, #40]	@ (8002628 <usart_printf+0x40>)
 80025fe:	f00d fcf3 	bl	800ffe8 <vsiprintf>
 8002602:	4603      	mov	r3, r0
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <usart_printf+0x44>)
 8002608:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <usart_printf+0x44>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4905      	ldr	r1, [pc, #20]	@ (8002628 <usart_printf+0x40>)
 8002612:	4807      	ldr	r0, [pc, #28]	@ (8002630 <usart_printf+0x48>)
 8002614:	f008 fe3a 	bl	800b28c <HAL_UART_Transmit_DMA>
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002620:	b004      	add	sp, #16
 8002622:	4770      	bx	lr
 8002624:	20000858 	.word	0x20000858
 8002628:	2000085c 	.word	0x2000085c
 800262c:	2000095c 	.word	0x2000095c
 8002630:	20000d5c 	.word	0x20000d5c

08002634 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart6) {
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a7f      	ldr	r2, [pc, #508]	@ (8002840 <HAL_UARTEx_RxEventCallback+0x20c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	f040 80f7 	bne.w	8002838 <HAL_UARTEx_RxEventCallback+0x204>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 800264a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800264e:	497d      	ldr	r1, [pc, #500]	@ (8002844 <HAL_UARTEx_RxEventCallback+0x210>)
 8002650:	487b      	ldr	r0, [pc, #492]	@ (8002840 <HAL_UARTEx_RxEventCallback+0x20c>)
 8002652:	f008 fe8b 	bl	800b36c <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[6] << 8) | RxBuff_2[5];
 8002656:	4b7b      	ldr	r3, [pc, #492]	@ (8002844 <HAL_UARTEx_RxEventCallback+0x210>)
 8002658:	799b      	ldrb	r3, [r3, #6]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	b21a      	sxth	r2, r3
 800265e:	4b79      	ldr	r3, [pc, #484]	@ (8002844 <HAL_UARTEx_RxEventCallback+0x210>)
 8002660:	795b      	ldrb	r3, [r3, #5]
 8002662:	b21b      	sxth	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b21b      	sxth	r3, r3
 8002668:	81fb      	strh	r3, [r7, #14]
		switch (RxBuff16) {
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8002670:	f280 80e1 	bge.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 8002674:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8002678:	f300 80d7 	bgt.w	800282a <HAL_UARTEx_RxEventCallback+0x1f6>
 800267c:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8002680:	f300 80d9 	bgt.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 8002684:	f240 3202 	movw	r2, #770	@ 0x302
 8002688:	4293      	cmp	r3, r2
 800268a:	f280 80c6 	bge.w	800281a <HAL_UARTEx_RxEventCallback+0x1e6>
 800268e:	f240 3201 	movw	r2, #769	@ 0x301
 8002692:	4293      	cmp	r3, r2
 8002694:	f000 80bb 	beq.w	800280e <HAL_UARTEx_RxEventCallback+0x1da>
 8002698:	f240 3201 	movw	r2, #769	@ 0x301
 800269c:	4293      	cmp	r3, r2
 800269e:	f300 80ca 	bgt.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 80026a2:	f240 220e 	movw	r2, #526	@ 0x20e
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f300 80c5 	bgt.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 80026ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b0:	dc1f      	bgt.n	80026f2 <HAL_UARTEx_RxEventCallback+0xbe>
 80026b2:	f240 1205 	movw	r2, #261	@ 0x105
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d05b      	beq.n	8002772 <HAL_UARTEx_RxEventCallback+0x13e>
 80026ba:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80026be:	f280 80ba 	bge.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 80026c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026c6:	d04e      	beq.n	8002766 <HAL_UARTEx_RxEventCallback+0x132>
 80026c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026cc:	f300 80b3 	bgt.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 80026d0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80026d4:	f300 80af 	bgt.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 80026d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026dc:	dc3e      	bgt.n	800275c <HAL_UARTEx_RxEventCallback+0x128>
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d036      	beq.n	8002750 <HAL_UARTEx_RxEventCallback+0x11c>
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	f300 80a7 	bgt.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d027      	beq.n	800273c <HAL_UARTEx_RxEventCallback+0x108>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d02b      	beq.n	8002748 <HAL_UARTEx_RxEventCallback+0x114>
		    	//memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
		    }

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 80026f0:	e0a1      	b.n	8002836 <HAL_UARTEx_RxEventCallback+0x202>
		switch (RxBuff16) {
 80026f2:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80026f6:	2b0d      	cmp	r3, #13
 80026f8:	f200 809d 	bhi.w	8002836 <HAL_UARTEx_RxEventCallback+0x202>
 80026fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <HAL_UARTEx_RxEventCallback+0xd0>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	0800277f 	.word	0x0800277f
 8002708:	0800278b 	.word	0x0800278b
 800270c:	08002797 	.word	0x08002797
 8002710:	080027a3 	.word	0x080027a3
 8002714:	080027af 	.word	0x080027af
 8002718:	080027af 	.word	0x080027af
 800271c:	080027b7 	.word	0x080027b7
 8002720:	080027c3 	.word	0x080027c3
 8002724:	080027cf 	.word	0x080027cf
 8002728:	080027d9 	.word	0x080027d9
 800272c:	080027e5 	.word	0x080027e5
 8002730:	080027f1 	.word	0x080027f1
 8002734:	080027fd 	.word	0x080027fd
 8002738:	08002807 	.word	0x08002807
		    	memcpy(&game_status, (RxBuff_2 + frame_header_offset), game_status_len);
 800273c:	4b42      	ldr	r3, [pc, #264]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 800273e:	220b      	movs	r2, #11
 8002740:	4619      	mov	r1, r3
 8002742:	4842      	ldr	r0, [pc, #264]	@ (800284c <HAL_UARTEx_RxEventCallback+0x218>)
 8002744:	f00d fce9 	bl	801011a <memcpy>
		    	memcpy(&game_result, (RxBuff_2 + frame_header_offset), game_result_len);
 8002748:	4b3f      	ldr	r3, [pc, #252]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	4b40      	ldr	r3, [pc, #256]	@ (8002850 <HAL_UARTEx_RxEventCallback+0x21c>)
 800274e:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 8002750:	4b3d      	ldr	r3, [pc, #244]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 8002752:	220d      	movs	r2, #13
 8002754:	4619      	mov	r1, r3
 8002756:	483f      	ldr	r0, [pc, #252]	@ (8002854 <HAL_UARTEx_RxEventCallback+0x220>)
 8002758:	f00d fcdf 	bl	801011a <memcpy>
		    	memcpy(&ext_supply_projectile_action, (RxBuff_2 + frame_header_offset), ext_supply_projectile_action_len);
 800275c:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b3d      	ldr	r3, [pc, #244]	@ (8002858 <HAL_UARTEx_RxEventCallback+0x224>)
 8002764:	601a      	str	r2, [r3, #0]
		    	memcpy(&referee_warning, (RxBuff_2 + frame_header_offset), referee_warning_len);
 8002766:	4a38      	ldr	r2, [pc, #224]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 8002768:	4b3c      	ldr	r3, [pc, #240]	@ (800285c <HAL_UARTEx_RxEventCallback+0x228>)
 800276a:	8811      	ldrh	r1, [r2, #0]
 800276c:	7892      	ldrb	r2, [r2, #2]
 800276e:	8019      	strh	r1, [r3, #0]
 8002770:	709a      	strb	r2, [r3, #2]
		    	memcpy(&dart_info, (RxBuff_2 + frame_header_offset), dart_info_len);
 8002772:	4b35      	ldr	r3, [pc, #212]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 8002774:	2203      	movs	r2, #3
 8002776:	4619      	mov	r1, r3
 8002778:	4839      	ldr	r0, [pc, #228]	@ (8002860 <HAL_UARTEx_RxEventCallback+0x22c>)
 800277a:	f00d fcce 	bl	801011a <memcpy>
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 800277e:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 8002780:	220d      	movs	r2, #13
 8002782:	4619      	mov	r1, r3
 8002784:	4833      	ldr	r0, [pc, #204]	@ (8002854 <HAL_UARTEx_RxEventCallback+0x220>)
 8002786:	f00d fcc8 	bl	801011a <memcpy>
		    	memcpy(&power_heat_data, (RxBuff_2 + frame_header_offset), power_heat_data_len);
 800278a:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 800278c:	2210      	movs	r2, #16
 800278e:	4619      	mov	r1, r3
 8002790:	4834      	ldr	r0, [pc, #208]	@ (8002864 <HAL_UARTEx_RxEventCallback+0x230>)
 8002792:	f00d fcc2 	bl	801011a <memcpy>
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
 8002796:	4b2c      	ldr	r3, [pc, #176]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 8002798:	2210      	movs	r2, #16
 800279a:	4619      	mov	r1, r3
 800279c:	4832      	ldr	r0, [pc, #200]	@ (8002868 <HAL_UARTEx_RxEventCallback+0x234>)
 800279e:	f00d fcbc 	bl	801011a <memcpy>
		    	memcpy(&buffs, (RxBuff_2 + frame_header_offset), buff_len);
 80027a2:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027a4:	2206      	movs	r2, #6
 80027a6:	4619      	mov	r1, r3
 80027a8:	4830      	ldr	r0, [pc, #192]	@ (800286c <HAL_UARTEx_RxEventCallback+0x238>)
 80027aa:	f00d fcb6 	bl	801011a <memcpy>
		    	memcpy(&damage_data, (RxBuff_2 + frame_header_offset), damage_data_len);
 80027ae:	4b26      	ldr	r3, [pc, #152]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002870 <HAL_UARTEx_RxEventCallback+0x23c>)
 80027b4:	701a      	strb	r2, [r3, #0]
		    	memcpy(&shoot_data, (RxBuff_2 + frame_header_offset), shoot_data_len);
 80027b6:	4b24      	ldr	r3, [pc, #144]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	4619      	mov	r1, r3
 80027bc:	482d      	ldr	r0, [pc, #180]	@ (8002874 <HAL_UARTEx_RxEventCallback+0x240>)
 80027be:	f00d fcac 	bl	801011a <memcpy>
		    	memcpy(&projectile_allowance, (RxBuff_2 + frame_header_offset), projectile_allowance_len);
 80027c2:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027c4:	2206      	movs	r2, #6
 80027c6:	4619      	mov	r1, r3
 80027c8:	482b      	ldr	r0, [pc, #172]	@ (8002878 <HAL_UARTEx_RxEventCallback+0x244>)
 80027ca:	f00d fca6 	bl	801011a <memcpy>
		    	memcpy(&rfid_status, (RxBuff_2 + frame_header_offset), rfid_status_len);
 80027ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <HAL_UARTEx_RxEventCallback+0x248>)
 80027d6:	601a      	str	r2, [r3, #0]
		    	memcpy(&dart_client_cmd, (RxBuff_2 + frame_header_offset), dart_client_cmd_len);
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027da:	2206      	movs	r2, #6
 80027dc:	4619      	mov	r1, r3
 80027de:	4828      	ldr	r0, [pc, #160]	@ (8002880 <HAL_UARTEx_RxEventCallback+0x24c>)
 80027e0:	f00d fc9b 	bl	801011a <memcpy>
		    	memcpy(&robot_positions, (RxBuff_2 + frame_header_offset), ground_robot_position_len);
 80027e4:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027e6:	2228      	movs	r2, #40	@ 0x28
 80027e8:	4619      	mov	r1, r3
 80027ea:	4826      	ldr	r0, [pc, #152]	@ (8002884 <HAL_UARTEx_RxEventCallback+0x250>)
 80027ec:	f00d fc95 	bl	801011a <memcpy>
		    	memcpy(&radar_mark_data, (RxBuff_2 + frame_header_offset), radar_mark_data_len);
 80027f0:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <HAL_UARTEx_RxEventCallback+0x254>)
 80027f4:	6810      	ldr	r0, [r2, #0]
 80027f6:	6018      	str	r0, [r3, #0]
 80027f8:	8892      	ldrh	r2, [r2, #4]
 80027fa:	809a      	strh	r2, [r3, #4]
		    	memcpy(&sentry_info, (RxBuff_2 + frame_header_offset), sentry_info_len);
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b22      	ldr	r3, [pc, #136]	@ (800288c <HAL_UARTEx_RxEventCallback+0x258>)
 8002804:	601a      	str	r2, [r3, #0]
		    	memcpy(&radar_info, (RxBuff_2 + frame_header_offset), radar_info_len);
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_UARTEx_RxEventCallback+0x25c>)
 800280c:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_interaction_data_len);
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	4619      	mov	r1, r3
 8002814:	4814      	ldr	r0, [pc, #80]	@ (8002868 <HAL_UARTEx_RxEventCallback+0x234>)
 8002816:	f00d fc80 	bl	801011a <memcpy>
		    	memcpy(&pc_control, (RxBuff_2 + frame_header_offset), pc_control_len);
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 800281c:	220c      	movs	r2, #12
 800281e:	4619      	mov	r1, r3
 8002820:	481c      	ldr	r0, [pc, #112]	@ (8002894 <HAL_UARTEx_RxEventCallback+0x260>)
 8002822:	f00d fc7a 	bl	801011a <memcpy>
		    	usart_decode_keyboard();
 8002826:	f000 f837 	bl	8002898 <usart_decode_keyboard>
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), map_data_len);
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_UARTEx_RxEventCallback+0x214>)
 800282c:	2267      	movs	r2, #103	@ 0x67
 800282e:	4619      	mov	r1, r3
 8002830:	480d      	ldr	r0, [pc, #52]	@ (8002868 <HAL_UARTEx_RxEventCallback+0x234>)
 8002832:	f00d fc72 	bl	801011a <memcpy>
		        break;
 8002836:	bf00      	nop
		    }
		}
	}
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000dec 	.word	0x20000dec
 8002844:	20000690 	.word	0x20000690
 8002848:	20000697 	.word	0x20000697
 800284c:	20000790 	.word	0x20000790
 8002850:	200007a0 	.word	0x200007a0
 8002854:	200007b0 	.word	0x200007b0
 8002858:	200007a4 	.word	0x200007a4
 800285c:	200007a8 	.word	0x200007a8
 8002860:	200007ac 	.word	0x200007ac
 8002864:	200007c0 	.word	0x200007c0
 8002868:	200007d0 	.word	0x200007d0
 800286c:	200007dc 	.word	0x200007dc
 8002870:	200007e4 	.word	0x200007e4
 8002874:	200007e8 	.word	0x200007e8
 8002878:	200007f0 	.word	0x200007f0
 800287c:	200007f8 	.word	0x200007f8
 8002880:	200007fc 	.word	0x200007fc
 8002884:	20000804 	.word	0x20000804
 8002888:	2000082c 	.word	0x2000082c
 800288c:	20000834 	.word	0x20000834
 8002890:	20000838 	.word	0x20000838
 8002894:	2000083c 	.word	0x2000083c

08002898 <usart_decode_keyboard>:

void usart_decode_keyboard(void) {
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
	if(pc_control.keyboard_values_1 > 127){
 800289c:	4b85      	ldr	r3, [pc, #532]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800289e:	7a1b      	ldrb	r3, [r3, #8]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	da09      	bge.n	80028ba <usart_decode_keyboard+0x22>
		pc_control.e = 1;
 80028a6:	4b83      	ldr	r3, [pc, #524]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	74da      	strb	r2, [r3, #19]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 128;
 80028ac:	4b81      	ldr	r3, [pc, #516]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028ae:	7a1b      	ldrb	r3, [r3, #8]
 80028b0:	3b80      	subs	r3, #128	@ 0x80
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028b6:	721a      	strb	r2, [r3, #8]
 80028b8:	e002      	b.n	80028c0 <usart_decode_keyboard+0x28>
	}else{
		pc_control.e = 0;
 80028ba:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	74da      	strb	r2, [r3, #19]
	}
	if(pc_control.keyboard_values_1>63){
 80028c0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028c2:	7a1b      	ldrb	r3, [r3, #8]
 80028c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80028c6:	d909      	bls.n	80028dc <usart_decode_keyboard+0x44>
		pc_control.q = 1;
 80028c8:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	749a      	strb	r2, [r3, #18]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 64;
 80028ce:	4b79      	ldr	r3, [pc, #484]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028d0:	7a1b      	ldrb	r3, [r3, #8]
 80028d2:	3b40      	subs	r3, #64	@ 0x40
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b77      	ldr	r3, [pc, #476]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028d8:	721a      	strb	r2, [r3, #8]
 80028da:	e002      	b.n	80028e2 <usart_decode_keyboard+0x4a>
	}else{
		pc_control.q = 0;
 80028dc:	4b75      	ldr	r3, [pc, #468]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	749a      	strb	r2, [r3, #18]
	}
	if(pc_control.keyboard_values_1>31){
 80028e2:	4b74      	ldr	r3, [pc, #464]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028e4:	7a1b      	ldrb	r3, [r3, #8]
 80028e6:	2b1f      	cmp	r3, #31
 80028e8:	d909      	bls.n	80028fe <usart_decode_keyboard+0x66>
		pc_control.ctrl = 1;
 80028ea:	4b72      	ldr	r3, [pc, #456]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	745a      	strb	r2, [r3, #17]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 32;
 80028f0:	4b70      	ldr	r3, [pc, #448]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028f2:	7a1b      	ldrb	r3, [r3, #8]
 80028f4:	3b20      	subs	r3, #32
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80028fa:	721a      	strb	r2, [r3, #8]
 80028fc:	e002      	b.n	8002904 <usart_decode_keyboard+0x6c>
	}else{
		pc_control.ctrl = 0;
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002900:	2200      	movs	r2, #0
 8002902:	745a      	strb	r2, [r3, #17]
	}
	if(pc_control.keyboard_values_1>15){
 8002904:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002906:	7a1b      	ldrb	r3, [r3, #8]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d909      	bls.n	8002920 <usart_decode_keyboard+0x88>
		pc_control.shift = 1;
 800290c:	4b69      	ldr	r3, [pc, #420]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800290e:	2201      	movs	r2, #1
 8002910:	741a      	strb	r2, [r3, #16]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 16;
 8002912:	4b68      	ldr	r3, [pc, #416]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002914:	7a1b      	ldrb	r3, [r3, #8]
 8002916:	3b10      	subs	r3, #16
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800291c:	721a      	strb	r2, [r3, #8]
 800291e:	e002      	b.n	8002926 <usart_decode_keyboard+0x8e>
	}else{
		pc_control.shift = 0;
 8002920:	4b64      	ldr	r3, [pc, #400]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002922:	2200      	movs	r2, #0
 8002924:	741a      	strb	r2, [r3, #16]
	}
	if(pc_control.keyboard_values_1>7){
 8002926:	4b63      	ldr	r3, [pc, #396]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002928:	7a1b      	ldrb	r3, [r3, #8]
 800292a:	2b07      	cmp	r3, #7
 800292c:	d909      	bls.n	8002942 <usart_decode_keyboard+0xaa>
		pc_control.d = 1;
 800292e:	4b61      	ldr	r3, [pc, #388]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002930:	2201      	movs	r2, #1
 8002932:	73da      	strb	r2, [r3, #15]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 8;
 8002934:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002936:	7a1b      	ldrb	r3, [r3, #8]
 8002938:	3b08      	subs	r3, #8
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800293e:	721a      	strb	r2, [r3, #8]
 8002940:	e002      	b.n	8002948 <usart_decode_keyboard+0xb0>
	}else{
		pc_control.d = 0;
 8002942:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002944:	2200      	movs	r2, #0
 8002946:	73da      	strb	r2, [r3, #15]
	}
	if(pc_control.keyboard_values_1>3){
 8002948:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800294a:	7a1b      	ldrb	r3, [r3, #8]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d909      	bls.n	8002964 <usart_decode_keyboard+0xcc>
		pc_control.a = 1;
 8002950:	4b58      	ldr	r3, [pc, #352]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002952:	2201      	movs	r2, #1
 8002954:	739a      	strb	r2, [r3, #14]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 4;
 8002956:	4b57      	ldr	r3, [pc, #348]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002958:	7a1b      	ldrb	r3, [r3, #8]
 800295a:	3b04      	subs	r3, #4
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b55      	ldr	r3, [pc, #340]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002960:	721a      	strb	r2, [r3, #8]
 8002962:	e002      	b.n	800296a <usart_decode_keyboard+0xd2>
	}else{
		pc_control.a = 0;
 8002964:	4b53      	ldr	r3, [pc, #332]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002966:	2200      	movs	r2, #0
 8002968:	739a      	strb	r2, [r3, #14]
	}
	if(pc_control.keyboard_values_1>1){
 800296a:	4b52      	ldr	r3, [pc, #328]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800296c:	7a1b      	ldrb	r3, [r3, #8]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d909      	bls.n	8002986 <usart_decode_keyboard+0xee>
		pc_control.s = 1;
 8002972:	4b50      	ldr	r3, [pc, #320]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002974:	2201      	movs	r2, #1
 8002976:	735a      	strb	r2, [r3, #13]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 2;
 8002978:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800297a:	7a1b      	ldrb	r3, [r3, #8]
 800297c:	3b02      	subs	r3, #2
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002982:	721a      	strb	r2, [r3, #8]
 8002984:	e002      	b.n	800298c <usart_decode_keyboard+0xf4>
	}else{
		pc_control.s = 0;
 8002986:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002988:	2200      	movs	r2, #0
 800298a:	735a      	strb	r2, [r3, #13]
	}
	if(pc_control.keyboard_values_1 > 0){
 800298c:	4b49      	ldr	r3, [pc, #292]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800298e:	7a1b      	ldrb	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <usart_decode_keyboard+0x104>
		pc_control.w = 1;
 8002994:	4b47      	ldr	r3, [pc, #284]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002996:	2201      	movs	r2, #1
 8002998:	731a      	strb	r2, [r3, #12]
 800299a:	e002      	b.n	80029a2 <usart_decode_keyboard+0x10a>
	}else{
		pc_control.w = 0;
 800299c:	4b45      	ldr	r3, [pc, #276]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	731a      	strb	r2, [r3, #12]
	}
	if(pc_control.keyboard_values_2 > 127){
 80029a2:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029a4:	7a5b      	ldrb	r3, [r3, #9]
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da09      	bge.n	80029c0 <usart_decode_keyboard+0x128>
		pc_control.b = 1;
 80029ac:	4b41      	ldr	r3, [pc, #260]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	76da      	strb	r2, [r3, #27]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 128;
 80029b2:	4b40      	ldr	r3, [pc, #256]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029b4:	7a5b      	ldrb	r3, [r3, #9]
 80029b6:	3b80      	subs	r3, #128	@ 0x80
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b3e      	ldr	r3, [pc, #248]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029bc:	725a      	strb	r2, [r3, #9]
 80029be:	e002      	b.n	80029c6 <usart_decode_keyboard+0x12e>
	}else{
		pc_control.b = 0;
 80029c0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	76da      	strb	r2, [r3, #27]
	}
	if(pc_control.keyboard_values_2>63){
 80029c6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029c8:	7a5b      	ldrb	r3, [r3, #9]
 80029ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80029cc:	d909      	bls.n	80029e2 <usart_decode_keyboard+0x14a>
		pc_control.v = 1;
 80029ce:	4b39      	ldr	r3, [pc, #228]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	769a      	strb	r2, [r3, #26]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 64;
 80029d4:	4b37      	ldr	r3, [pc, #220]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029d6:	7a5b      	ldrb	r3, [r3, #9]
 80029d8:	3b40      	subs	r3, #64	@ 0x40
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b35      	ldr	r3, [pc, #212]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029de:	725a      	strb	r2, [r3, #9]
 80029e0:	e002      	b.n	80029e8 <usart_decode_keyboard+0x150>
	}else{
		pc_control.v = 0;
 80029e2:	4b34      	ldr	r3, [pc, #208]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	769a      	strb	r2, [r3, #26]
	}
	if(pc_control.keyboard_values_2>31){
 80029e8:	4b32      	ldr	r3, [pc, #200]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029ea:	7a5b      	ldrb	r3, [r3, #9]
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	d909      	bls.n	8002a04 <usart_decode_keyboard+0x16c>
		pc_control.c = 1;
 80029f0:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	765a      	strb	r2, [r3, #25]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 32;
 80029f6:	4b2f      	ldr	r3, [pc, #188]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 80029f8:	7a5b      	ldrb	r3, [r3, #9]
 80029fa:	3b20      	subs	r3, #32
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a00:	725a      	strb	r2, [r3, #9]
 8002a02:	e002      	b.n	8002a0a <usart_decode_keyboard+0x172>
	}else{
		pc_control.c = 0;
 8002a04:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	765a      	strb	r2, [r3, #25]
	}
	if(pc_control.keyboard_values_2>15){
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a0c:	7a5b      	ldrb	r3, [r3, #9]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	d909      	bls.n	8002a26 <usart_decode_keyboard+0x18e>
		pc_control.x = 1;
 8002a12:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	761a      	strb	r2, [r3, #24]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 16;
 8002a18:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a1a:	7a5b      	ldrb	r3, [r3, #9]
 8002a1c:	3b10      	subs	r3, #16
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b24      	ldr	r3, [pc, #144]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a22:	725a      	strb	r2, [r3, #9]
 8002a24:	e002      	b.n	8002a2c <usart_decode_keyboard+0x194>
	}else{
		pc_control.x = 0;
 8002a26:	4b23      	ldr	r3, [pc, #140]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	761a      	strb	r2, [r3, #24]
	}
	if(pc_control.keyboard_values_2>7){
 8002a2c:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a2e:	7a5b      	ldrb	r3, [r3, #9]
 8002a30:	2b07      	cmp	r3, #7
 8002a32:	d909      	bls.n	8002a48 <usart_decode_keyboard+0x1b0>
		pc_control.z = 1;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	75da      	strb	r2, [r3, #23]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 8;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a3c:	7a5b      	ldrb	r3, [r3, #9]
 8002a3e:	3b08      	subs	r3, #8
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a44:	725a      	strb	r2, [r3, #9]
 8002a46:	e002      	b.n	8002a4e <usart_decode_keyboard+0x1b6>
	}else{
		pc_control.z = 0;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	75da      	strb	r2, [r3, #23]
	}
	if(pc_control.keyboard_values_2>3){
 8002a4e:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a50:	7a5b      	ldrb	r3, [r3, #9]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d909      	bls.n	8002a6a <usart_decode_keyboard+0x1d2>
		pc_control.g = 1;
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	759a      	strb	r2, [r3, #22]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 4;
 8002a5c:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a5e:	7a5b      	ldrb	r3, [r3, #9]
 8002a60:	3b04      	subs	r3, #4
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a66:	725a      	strb	r2, [r3, #9]
 8002a68:	e002      	b.n	8002a70 <usart_decode_keyboard+0x1d8>
	}else{
		pc_control.g = 0;
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	759a      	strb	r2, [r3, #22]
	}
	if(pc_control.keyboard_values_2>1){
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a72:	7a5b      	ldrb	r3, [r3, #9]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d909      	bls.n	8002a8c <usart_decode_keyboard+0x1f4>
		pc_control.f = 1;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	755a      	strb	r2, [r3, #21]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 2;
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a80:	7a5b      	ldrb	r3, [r3, #9]
 8002a82:	3b02      	subs	r3, #2
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a88:	725a      	strb	r2, [r3, #9]
 8002a8a:	e002      	b.n	8002a92 <usart_decode_keyboard+0x1fa>
	}else{
		pc_control.f = 0;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	755a      	strb	r2, [r3, #21]
	}
	if(pc_control.keyboard_values_2 > 0){
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a94:	7a5b      	ldrb	r3, [r3, #9]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <usart_decode_keyboard+0x20a>
		pc_control.r = 1;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	751a      	strb	r2, [r3, #20]
	}else{
		pc_control.r = 0;
	}
}
 8002aa0:	e002      	b.n	8002aa8 <usart_decode_keyboard+0x210>
		pc_control.r = 0;
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <usart_decode_keyboard+0x21c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	751a      	strb	r2, [r3, #20]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000083c 	.word	0x2000083c

08002ab8 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	@ 0x28
 8002abc:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480f      	ldr	r0, [pc, #60]	@ (8002b24 <can_filter_init+0x6c>)
 8002ae8:	f003 ffc6 	bl	8006a78 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002aec:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <can_filter_init+0x6c>)
 8002aee:	f004 f8a3 	bl	8006c38 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002af2:	2102      	movs	r1, #2
 8002af4:	480b      	ldr	r0, [pc, #44]	@ (8002b24 <can_filter_init+0x6c>)
 8002af6:	f004 fad5 	bl	80070a4 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8002afa:	230e      	movs	r3, #14
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8002afe:	230e      	movs	r3, #14
 8002b00:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8002b02:	463b      	mov	r3, r7
 8002b04:	4619      	mov	r1, r3
 8002b06:	4808      	ldr	r0, [pc, #32]	@ (8002b28 <can_filter_init+0x70>)
 8002b08:	f003 ffb6 	bl	8006a78 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8002b0c:	4806      	ldr	r0, [pc, #24]	@ (8002b28 <can_filter_init+0x70>)
 8002b0e:	f004 f893 	bl	8006c38 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002b12:	2102      	movs	r1, #2
 8002b14:	4804      	ldr	r0, [pc, #16]	@ (8002b28 <can_filter_init+0x70>)
 8002b16:	f004 fac5 	bl	80070a4 <HAL_CAN_ActivateNotification>
}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	@ 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200009d8 	.word	0x200009d8
 8002b28:	20000a00 	.word	0x20000a00

08002b2c <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <imu_pwm_set+0x1c>)
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40014400 	.word	0x40014400

08002b4c <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8002b5a:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <RC_init+0xac>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <RC_init+0xac>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b68:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8002b6a:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <RC_init+0xac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <RC_init+0xac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0210 	orr.w	r2, r2, #16
 8002b78:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8002b7a:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <RC_init+0xb0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b1e      	ldr	r3, [pc, #120]	@ (8002bfc <RC_init+0xb0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002b8a:	e007      	b.n	8002b9c <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <RC_init+0xb0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b1a      	ldr	r3, [pc, #104]	@ (8002bfc <RC_init+0xb0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002b9c:	4b17      	ldr	r3, [pc, #92]	@ (8002bfc <RC_init+0xb0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <RC_init+0xb0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <RC_init+0xb4>)
 8002bb0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002bb2:	4b12      	ldr	r3, [pc, #72]	@ (8002bfc <RC_init+0xb0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <RC_init+0xb0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <RC_init+0xb0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002bca:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <RC_init+0xb0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <RC_init+0xb0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002bd8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002bda:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <RC_init+0xb0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <RC_init+0xb0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000da4 	.word	0x20000da4
 8002bfc:	20000ef4 	.word	0x20000ef4
 8002c00:	40004804 	.word	0x40004804

08002c04 <findingKIScaler>:
float maxPowerLimitor = 0;
float powerScaler = 0;
int16_t M3508Current[4] = {0, 0, 0, 0};
int16_t M3508ScaledCurrent[4] = {0, 0, 0, 0};

void findingKIScaler() {
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	e019      	b.n	8002c48 <findingKIScaler+0x44>
		if (M3508Current[i] > 0) {
 8002c14:	4a25      	ldr	r2, [pc, #148]	@ (8002cac <findingKIScaler+0xa8>)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	dd08      	ble.n	8002c32 <findingKIScaler+0x2e>
			sum += M3508Current[i];
 8002c20:	4a22      	ldr	r2, [pc, #136]	@ (8002cac <findingKIScaler+0xa8>)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	e007      	b.n	8002c42 <findingKIScaler+0x3e>
		} else {
			sum -= M3508Current[i];
 8002c32:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <findingKIScaler+0xa8>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	dde2      	ble.n	8002c14 <findingKIScaler+0x10>
		}
	}
	powerScaler = maxPowerLimitor/sum;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <findingKIScaler+0xac>)
 8002c50:	edd3 6a00 	vldr	s13, [r3]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c62:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <findingKIScaler+0xb0>)
 8002c64:	edc3 7a00 	vstr	s15, [r3]
	if (powerScaler > 1) {
 8002c68:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <findingKIScaler+0xb0>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	dd04      	ble.n	8002c86 <findingKIScaler+0x82>
		powerScaler = 1;
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <findingKIScaler+0xb0>)
 8002c7e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c82:	601a      	str	r2, [r3, #0]
	} else if (powerScaler < 0) {
		powerScaler = 0;
	}
	// usart_printf("%f/%d = %f\r\n", maxPowerLimitor, sum, powerScaler);
}
 8002c84:	e00c      	b.n	8002ca0 <findingKIScaler+0x9c>
	} else if (powerScaler < 0) {
 8002c86:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <findingKIScaler+0xb0>)
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d400      	bmi.n	8002c98 <findingKIScaler+0x94>
}
 8002c96:	e003      	b.n	8002ca0 <findingKIScaler+0x9c>
		powerScaler = 0;
 8002c98:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <findingKIScaler+0xb0>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20000968 	.word	0x20000968
 8002cb0:	20000960 	.word	0x20000960
 8002cb4:	20000964 	.word	0x20000964

08002cb8 <settingMaxCurrentVal>:

void settingMaxCurrentVal (float bufferValFromPMM, uint16_t powerLimit) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	807b      	strh	r3, [r7, #2]

	// uint16_t adjustedPowerLimit = powerLimit - 6;

	float maxPowerForRobot = 0;
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
	if (powerLimit > 100) {
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	2b64      	cmp	r3, #100	@ 0x64
 8002cd0:	d902      	bls.n	8002cd8 <settingMaxCurrentVal+0x20>
		maxPowerForRobot = 2;
 8002cd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cd6:	60fb      	str	r3, [r7, #12]
	} if (powerLimit >= 60 && powerLimit <=100) {
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	2b3b      	cmp	r3, #59	@ 0x3b
 8002cdc:	d91c      	bls.n	8002d18 <settingMaxCurrentVal+0x60>
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	2b64      	cmp	r3, #100	@ 0x64
 8002ce2:	d819      	bhi.n	8002d18 <settingMaxCurrentVal+0x60>
		maxPowerForRobot = (0.025*powerLimit)-0.5;
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fc1c 	bl	8000524 <__aeabi_i2d>
 8002cec:	a33f      	add	r3, pc, #252	@ (adr r3, 8002dec <settingMaxCurrentVal+0x134>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fc81 	bl	80005f8 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	4b35      	ldr	r3, [pc, #212]	@ (8002dd8 <settingMaxCurrentVal+0x120>)
 8002d04:	f7fd fac0 	bl	8000288 <__aeabi_dsub>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd ff4a 	bl	8000ba8 <__aeabi_d2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	60fb      	str	r3, [r7, #12]
	} if (powerLimit < 60) {
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	2b3b      	cmp	r3, #59	@ 0x3b
 8002d1c:	d802      	bhi.n	8002d24 <settingMaxCurrentVal+0x6c>
		maxPowerForRobot = 1;
 8002d1e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d22:	60fb      	str	r3, [r7, #12]
	}

	if (bufferValFromPMM > 50) {
 8002d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d28:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002ddc <settingMaxCurrentVal+0x124>
 8002d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	dd03      	ble.n	8002d3e <settingMaxCurrentVal+0x86>
		maxPowerLimitor = 8192;
 8002d36:	4b2a      	ldr	r3, [pc, #168]	@ (8002de0 <settingMaxCurrentVal+0x128>)
 8002d38:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002d3c:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 50) {
 8002d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d42:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd22      	ble.n	8002d96 <settingMaxCurrentVal+0xde>
 8002d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d54:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002ddc <settingMaxCurrentVal+0x124>
 8002d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	d819      	bhi.n	8002d96 <settingMaxCurrentVal+0xde>
		maxPowerLimitor = (179.8*bufferValFromPMM) - 798.0f;
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd fbf0 	bl	8000548 <__aeabi_f2d>
 8002d68:	a319      	add	r3, pc, #100	@ (adr r3, 8002dd0 <settingMaxCurrentVal+0x118>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	f7fd fc43 	bl	80005f8 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <settingMaxCurrentVal+0x12c>)
 8002d80:	f7fd fa82 	bl	8000288 <__aeabi_dsub>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd ff0c 	bl	8000ba8 <__aeabi_d2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <settingMaxCurrentVal+0x128>)
 8002d94:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 8002d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d802      	bhi.n	8002dae <settingMaxCurrentVal+0xf6>
		maxPowerLimitor = 0.00001;
 8002da8:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <settingMaxCurrentVal+0x128>)
 8002daa:	4a0f      	ldr	r2, [pc, #60]	@ (8002de8 <settingMaxCurrentVal+0x130>)
 8002dac:	601a      	str	r2, [r3, #0]
	}
	maxPowerLimitor = maxPowerLimitor * maxPowerForRobot;
 8002dae:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <settingMaxCurrentVal+0x128>)
 8002db0:	ed93 7a00 	vldr	s14, [r3]
 8002db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <settingMaxCurrentVal+0x128>)
 8002dbe:	edc3 7a00 	vstr	s15, [r3]
	// maxPowerLimitor = 8192*8;
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	9999999a 	.word	0x9999999a
 8002dd4:	40667999 	.word	0x40667999
 8002dd8:	3fe00000 	.word	0x3fe00000
 8002ddc:	42480000 	.word	0x42480000
 8002de0:	20000960 	.word	0x20000960
 8002de4:	4088f000 	.word	0x4088f000
 8002de8:	3727c5ac 	.word	0x3727c5ac
 8002dec:	9999999a 	.word	0x9999999a
 8002df0:	3f999999 	.word	0x3f999999

08002df4 <driveMotorRPM>:

void driveMotorRPM (int16_t RPMtarget[], PID_preset_t preset) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	eef0 6a40 	vmov.f32	s13, s0
 8002e00:	eeb0 7a60 	vmov.f32	s14, s1
 8002e04:	eef0 7a41 	vmov.f32	s15, s2
 8002e08:	edc7 6a00 	vstr	s13, [r7]
 8002e0c:	ed87 7a01 	vstr	s14, [r7, #4]
 8002e10:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < 4; i++) {
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e024      	b.n	8002e64 <driveMotorRPM+0x70>
		M3508Current[i] = calcRPM_PID(Bus2, M3508, i+1, RPMtarget[i], preset);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	b259      	sxtb	r1, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e30:	edd7 6a00 	vldr	s13, [r7]
 8002e34:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e3c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e40:	eef0 0a47 	vmov.f32	s1, s14
 8002e44:	eeb0 1a67 	vmov.f32	s2, s15
 8002e48:	460a      	mov	r2, r1
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	f7fe ffa9 	bl	8001da4 <calcRPM_PID>
 8002e52:	4603      	mov	r3, r0
 8002e54:	b219      	sxth	r1, r3
 8002e56:	4a07      	ldr	r2, [pc, #28]	@ (8002e74 <driveMotorRPM+0x80>)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3301      	adds	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	ddd7      	ble.n	8002e1a <driveMotorRPM+0x26>
	}
	// M3508Current[motorID-1] = calcRPM_PID(Bus2, M3508, motorID, RPMtarget, preset);
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000968 	.word	0x20000968

08002e78 <ScaleAllCurrentValuesForDriveMotors>:

void ScaleAllCurrentValuesForDriveMotors () {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
	findingKIScaler();
 8002e7e:	f7ff fec1 	bl	8002c04 <findingKIScaler>
	for (int i = 0; i < 4; i++) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	e018      	b.n	8002eba <ScaleAllCurrentValuesForDriveMotors+0x42>
		M3508ScaledCurrent[i] = M3508Current[i] * powerScaler;
 8002e88:	4a10      	ldr	r2, [pc, #64]	@ (8002ecc <ScaleAllCurrentValuesForDriveMotors+0x54>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <ScaleAllCurrentValuesForDriveMotors+0x58>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea6:	ee17 3a90 	vmov	r3, s15
 8002eaa:	b219      	sxth	r1, r3
 8002eac:	4a09      	ldr	r2, [pc, #36]	@ (8002ed4 <ScaleAllCurrentValuesForDriveMotors+0x5c>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	dde3      	ble.n	8002e88 <ScaleAllCurrentValuesForDriveMotors+0x10>
	}
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000968 	.word	0x20000968
 8002ed0:	20000964 	.word	0x20000964
 8002ed4:	20000970 	.word	0x20000970

08002ed8 <createDriveMotorCAN>:

void createDriveMotorCAN() {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
	for (int j = 0; j < 4; j++) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	e00f      	b.n	8002f04 <createDriveMotorCAN+0x2c>
		CAN_setMotorCtrlVal(Bus2, M3508, j+1, M3508ScaledCurrent[j]);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	b25a      	sxtb	r2, r3
 8002eee:	4909      	ldr	r1, [pc, #36]	@ (8002f14 <createDriveMotorCAN+0x3c>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2002      	movs	r0, #2
 8002efa:	f7fe fd55 	bl	80019a8 <CAN_setMotorCtrlVal>
	for (int j = 0; j < 4; j++) {
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3301      	adds	r3, #1
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	ddec      	ble.n	8002ee4 <createDriveMotorCAN+0xc>
	}
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000970 	.word	0x20000970

08002f18 <bufferLimitedDriveMode>:

void bufferLimitedDriveMode(int16_t RPMtarget[], PID_preset_t preset) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	eef0 6a40 	vmov.f32	s13, s0
 8002f24:	eeb0 7a60 	vmov.f32	s14, s1
 8002f28:	eef0 7a41 	vmov.f32	s15, s2
 8002f2c:	edc7 6a00 	vstr	s13, [r7]
 8002f30:	ed87 7a01 	vstr	s14, [r7, #4]
 8002f34:	edc7 7a02 	vstr	s15, [r7, #8]
	driveMotorRPM(RPMtarget, preset);
 8002f38:	edd7 6a00 	vldr	s13, [r7]
 8002f3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f44:	eeb0 0a66 	vmov.f32	s0, s13
 8002f48:	eef0 0a47 	vmov.f32	s1, s14
 8002f4c:	eeb0 1a67 	vmov.f32	s2, s15
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff ff4f 	bl	8002df4 <driveMotorRPM>
	findingKIScaler();
 8002f56:	f7ff fe55 	bl	8002c04 <findingKIScaler>
	ScaleAllCurrentValuesForDriveMotors();
 8002f5a:	f7ff ff8d 	bl	8002e78 <ScaleAllCurrentValuesForDriveMotors>
	createDriveMotorCAN();
 8002f5e:	f7ff ffbb 	bl	8002ed8 <createDriveMotorCAN>
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8002f74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f78:	f009 fc58 	bl	800c82c <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8002f7c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003020 <imu_temp_control_task+0xb4>
 8002f80:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8003024 <imu_temp_control_task+0xb8>
 8002f84:	4a28      	ldr	r2, [pc, #160]	@ (8003028 <imu_temp_control_task+0xbc>)
 8002f86:	2100      	movs	r1, #0
 8002f88:	4828      	ldr	r0, [pc, #160]	@ (800302c <imu_temp_control_task+0xc0>)
 8002f8a:	f001 fcdf 	bl	800494c <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f8e:	4b28      	ldr	r3, [pc, #160]	@ (8003030 <imu_temp_control_task+0xc4>)
 8002f90:	2210      	movs	r2, #16
 8002f92:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f94:	4826      	ldr	r0, [pc, #152]	@ (8003030 <imu_temp_control_task+0xc4>)
 8002f96:	f006 fe60 	bl	8009c5a <HAL_SPI_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8002fa0:	f001 fcce 	bl	8004940 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f00a fd5f 	bl	800da68 <pcTaskGetName>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f00a fdef 	bl	800db90 <xTaskGetHandle>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <imu_temp_control_task+0xc8>)
 8002fb6:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <imu_temp_control_task+0xcc>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8002fbe:	bf00      	nop
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f00b fa0f 	bl	800e3e8 <ulTaskNotifyTake>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d1f7      	bne.n	8002fc0 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8002fd0:	f7fe f9dc 	bl	800138c <IMU_get_temp>
 8002fd4:	eef0 7a40 	vmov.f32	s15, s0
 8002fd8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800303c <imu_temp_control_task+0xd0>
 8002fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe0:	4812      	ldr	r0, [pc, #72]	@ (800302c <imu_temp_control_task+0xc0>)
 8002fe2:	f001 fd0a 	bl	80049fa <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <imu_temp_control_task+0xc0>)
 8002fe8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	d503      	bpl.n	8002ffe <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <imu_temp_control_task+0xc0>)
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <imu_temp_control_task+0xc0>)
 8003000:	edd3 7a08 	vldr	s15, [r3, #32]
 8003004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003008:	ee17 3a90 	vmov	r3, s15
 800300c:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 800300e:	89fb      	ldrh	r3, [r7, #14]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fd8b 	bl	8002b2c <imu_pwm_set>
        osDelay(5);
 8003016:	2005      	movs	r0, #5
 8003018:	f009 fc08 	bl	800c82c <osDelay>
    {
 800301c:	e7cf      	b.n	8002fbe <imu_temp_control_task+0x52>
 800301e:	bf00      	nop
 8003020:	45898000 	.word	0x45898000
 8003024:	458ca000 	.word	0x458ca000
 8003028:	080124a8 	.word	0x080124a8
 800302c:	20000980 	.word	0x20000980
 8003030:	20000a7c 	.word	0x20000a7c
 8003034:	20000978 	.word	0x20000978
 8003038:	2000097c 	.word	0x2000097c
 800303c:	42200000 	.word	0x42200000

08003040 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 800304a:	4b12      	ldr	r3, [pc, #72]	@ (8003094 <HAL_GPIO_EXTI_Callback+0x54>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	429a      	cmp	r2, r3
 8003052:	d11b      	bne.n	800308c <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8003054:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <HAL_GPIO_EXTI_Callback+0x58>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800305e:	f00b f935 	bl	800e2cc <xTaskGetSchedulerState>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d011      	beq.n	800308c <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8003068:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <HAL_GPIO_EXTI_Callback+0x5c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	490c      	ldr	r1, [pc, #48]	@ (80030a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800306e:	4618      	mov	r0, r3
 8003070:	f00b fa06 	bl	800e480 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003074:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_GPIO_EXTI_Callback+0x60>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_GPIO_EXTI_Callback+0x4c>
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_GPIO_EXTI_Callback+0x64>)
 800307e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000000e 	.word	0x2000000e
 8003098:	2000097c 	.word	0x2000097c
 800309c:	20000978 	.word	0x20000978
 80030a0:	200009c8 	.word	0x200009c8
 80030a4:	e000ed04 	.word	0xe000ed04

080030a8 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80030b6:	f000 f8bd 	bl	8003234 <ist8310_GPIO_init>
    ist8310_com_init();
 80030ba:	f000 f8c2 	bl	8003242 <ist8310_com_init>

    ist8310_RST_L();
 80030be:	f000 f97b 	bl	80033b8 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 80030c2:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <ist8310_init+0xdc>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f916 	bl	80032f8 <ist8310_delay_ms>
    ist8310_RST_H();
 80030cc:	f000 f968 	bl	80033a0 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 80030d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003184 <ist8310_init+0xdc>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f90f 	bl	80032f8 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f8b8 	bl	8003250 <ist8310_IIC_read_single_reg>
 80030e0:	4603      	mov	r3, r0
 80030e2:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d001      	beq.n	80030ee <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 80030ea:	2340      	movs	r3, #64	@ 0x40
 80030ec:	e045      	b.n	800317a <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80030ee:	2300      	movs	r3, #0
 80030f0:	71fb      	strb	r3, [r7, #7]
 80030f2:	e03e      	b.n	8003172 <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 80030f4:	79fa      	ldrb	r2, [r7, #7]
 80030f6:	4924      	ldr	r1, [pc, #144]	@ (8003188 <ist8310_init+0xe0>)
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	440b      	add	r3, r1
 8003100:	7818      	ldrb	r0, [r3, #0]
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	4920      	ldr	r1, [pc, #128]	@ (8003188 <ist8310_init+0xe0>)
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	440b      	add	r3, r1
 800310e:	3301      	adds	r3, #1
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	f000 f8b8 	bl	8003288 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8003118:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <ist8310_init+0xe4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f8f9 	bl	8003314 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8003122:	79fa      	ldrb	r2, [r7, #7]
 8003124:	4918      	ldr	r1, [pc, #96]	@ (8003188 <ist8310_init+0xe0>)
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	440b      	add	r3, r1
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f88d 	bl	8003250 <ist8310_IIC_read_single_reg>
 8003136:	4603      	mov	r3, r0
 8003138:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 800313a:	4b14      	ldr	r3, [pc, #80]	@ (800318c <ist8310_init+0xe4>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f8e8 	bl	8003314 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8003144:	79fa      	ldrb	r2, [r7, #7]
 8003146:	4910      	ldr	r1, [pc, #64]	@ (8003188 <ist8310_init+0xe0>)
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	440b      	add	r3, r1
 8003150:	3301      	adds	r3, #1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	79ba      	ldrb	r2, [r7, #6]
 8003156:	429a      	cmp	r2, r3
 8003158:	d008      	beq.n	800316c <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 800315a:	79fa      	ldrb	r2, [r7, #7]
 800315c:	490a      	ldr	r1, [pc, #40]	@ (8003188 <ist8310_init+0xe0>)
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	440b      	add	r3, r1
 8003166:	3302      	adds	r3, #2
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	e006      	b.n	800317a <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	3301      	adds	r3, #1
 8003170:	71fb      	strb	r3, [r7, #7]
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d9bd      	bls.n	80030f4 <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	080124c0 	.word	0x080124c0
 8003188:	080124b4 	.word	0x080124b4
 800318c:	080124c1 	.word	0x080124c1

08003190 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 800319c:	f107 0308 	add.w	r3, r7, #8
 80031a0:	2206      	movs	r2, #6
 80031a2:	4619      	mov	r1, r3
 80031a4:	2003      	movs	r0, #3
 80031a6:	f000 f88b 	bl	80032c0 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80031aa:	7a7b      	ldrb	r3, [r7, #9]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	b21a      	sxth	r2, r3
 80031b0:	7a3b      	ldrb	r3, [r7, #8]
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	4313      	orrs	r3, r2
 80031b6:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80031b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003230 <ist8310_read_mag+0xa0>
 80031c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 80031d2:	7afb      	ldrb	r3, [r7, #11]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	b21a      	sxth	r2, r3
 80031d8:	7abb      	ldrb	r3, [r7, #10]
 80031da:	b21b      	sxth	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 80031e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003230 <ist8310_read_mag+0xa0>
 80031f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f8:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 80031fc:	7b7b      	ldrb	r3, [r7, #13]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	b21a      	sxth	r2, r3
 8003202:	7b3b      	ldrb	r3, [r7, #12]
 8003204:	b21b      	sxth	r3, r3
 8003206:	4313      	orrs	r3, r2
 8003208:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800320a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3308      	adds	r3, #8
 800321a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003230 <ist8310_read_mag+0xa0>
 800321e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003222:	edc3 7a00 	vstr	s15, [r3]
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	3e99999a 	.word	0x3e99999a

08003234 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af04      	add	r7, sp, #16
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	b29a      	uxth	r2, r3
 8003262:	230a      	movs	r3, #10
 8003264:	9302      	str	r3, [sp, #8]
 8003266:	2301      	movs	r3, #1
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	f107 030f 	add.w	r3, r7, #15
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2301      	movs	r3, #1
 8003272:	211c      	movs	r1, #28
 8003274:	4803      	ldr	r0, [pc, #12]	@ (8003284 <ist8310_IIC_read_single_reg+0x34>)
 8003276:	f005 fa8b 	bl	8008790 <HAL_I2C_Mem_Read>
    return res;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000a28 	.word	0x20000a28

08003288 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af04      	add	r7, sp, #16
 800328e:	4603      	mov	r3, r0
 8003290:	460a      	mov	r2, r1
 8003292:	71fb      	strb	r3, [r7, #7]
 8003294:	4613      	mov	r3, r2
 8003296:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	b29a      	uxth	r2, r3
 800329c:	230a      	movs	r3, #10
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	2301      	movs	r3, #1
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	1dbb      	adds	r3, r7, #6
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2301      	movs	r3, #1
 80032aa:	211c      	movs	r1, #28
 80032ac:	4803      	ldr	r0, [pc, #12]	@ (80032bc <ist8310_IIC_write_single_reg+0x34>)
 80032ae:	f005 f975 	bl	800859c <HAL_I2C_Mem_Write>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000a28 	.word	0x20000a28

080032c0 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	79bb      	ldrb	r3, [r7, #6]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	210a      	movs	r1, #10
 80032da:	9102      	str	r1, [sp, #8]
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2301      	movs	r3, #1
 80032e4:	211c      	movs	r1, #28
 80032e6:	4803      	ldr	r0, [pc, #12]	@ (80032f4 <ist8310_IIC_read_muli_reg+0x34>)
 80032e8:	f005 fa52 	bl	8008790 <HAL_I2C_Mem_Read>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000a28 	.word	0x20000a28

080032f8 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fa97 	bl	8006838 <HAL_Delay>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	@ 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	2300      	movs	r3, #0
 800332c:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <ist8310_delay_us+0x88>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8003344:	4b15      	ldr	r3, [pc, #84]	@ (800339c <ist8310_delay_us+0x88>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 800334a:	4b14      	ldr	r3, [pc, #80]	@ (800339c <ist8310_delay_us+0x88>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	d0f8      	beq.n	800334a <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	d206      	bcs.n	800336e <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4413      	add	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e007      	b.n	800337e <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad2      	subs	r2, r2, r3
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	429a      	cmp	r2, r3
 8003388:	d200      	bcs.n	800338c <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 800338a:	e7de      	b.n	800334a <ist8310_delay_us+0x36>
            {
                break;
 800338c:	bf00      	nop
            }
        }
    }
}
 800338e:	bf00      	nop
 8003390:	3724      	adds	r7, #36	@ 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e010 	.word	0xe000e010

080033a0 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80033a4:	2201      	movs	r2, #1
 80033a6:	2140      	movs	r1, #64	@ 0x40
 80033a8:	4802      	ldr	r0, [pc, #8]	@ (80033b4 <ist8310_RST_H+0x14>)
 80033aa:	f004 ff81 	bl	80082b0 <HAL_GPIO_WritePin>
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021800 	.word	0x40021800

080033b8 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80033bc:	2200      	movs	r2, #0
 80033be:	2140      	movs	r1, #64	@ 0x40
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <ist8310_RST_L+0x14>)
 80033c2:	f004 ff75 	bl	80082b0 <HAL_GPIO_WritePin>
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021800 	.word	0x40021800

080033d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d4:	f003 f9be 	bl	8006754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033d8:	f000 f868 	bl	80034ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033dc:	f000 fd02 	bl	8003de4 <MX_GPIO_Init>
  MX_DMA_Init();
 80033e0:	f000 fc9a 	bl	8003d18 <MX_DMA_Init>
  MX_CAN1_Init();
 80033e4:	f000 f8ce 	bl	8003584 <MX_CAN1_Init>
  MX_CAN2_Init();
 80033e8:	f000 f902 	bl	80035f0 <MX_CAN2_Init>
  MX_SPI1_Init();
 80033ec:	f000 f964 	bl	80036b8 <MX_SPI1_Init>
  MX_TIM4_Init();
 80033f0:	f000 fa40 	bl	8003874 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80033f4:	f000 fc10 	bl	8003c18 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80033f8:	f000 fc64 	bl	8003cc4 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80033fc:	f000 f992 	bl	8003724 <MX_TIM1_Init>
  MX_TIM8_Init();
 8003400:	f000 fb20 	bl	8003a44 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8003404:	f000 fc32 	bl	8003c6c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003408:	f000 fbb8 	bl	8003b7c <MX_TIM10_Init>
  MX_I2C3_Init();
 800340c:	f000 f926 	bl	800365c <MX_I2C3_Init>
  MX_TIM5_Init();
 8003410:	f000 faa8 	bl	8003964 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8003414:	f7ff fb50 	bl	8002ab8 <can_filter_init>
  remote_control_init();
 8003418:	f002 f802 	bl	8005420 <remote_control_init>
  usart_Init();
 800341c:	f7ff f8cc 	bl	80025b8 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8003420:	f002 f80c 	bl	800543c <get_remote_control_point>
 8003424:	4603      	mov	r3, r0
 8003426:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <main+0xa8>)
 8003428:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800342a:	f009 f923 	bl	800c674 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 800342e:	4a13      	ldr	r2, [pc, #76]	@ (800347c <main+0xac>)
 8003430:	2100      	movs	r1, #0
 8003432:	4813      	ldr	r0, [pc, #76]	@ (8003480 <main+0xb0>)
 8003434:	f009 f968 	bl	800c708 <osThreadNew>
 8003438:	4603      	mov	r3, r0
 800343a:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <main+0xb4>)
 800343c:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 800343e:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <main+0xb8>)
 8003440:	2100      	movs	r1, #0
 8003442:	4812      	ldr	r0, [pc, #72]	@ (800348c <main+0xbc>)
 8003444:	f009 f960 	bl	800c708 <osThreadNew>
 8003448:	4603      	mov	r3, r0
 800344a:	4a11      	ldr	r2, [pc, #68]	@ (8003490 <main+0xc0>)
 800344c:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 800344e:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <main+0xc4>)
 8003450:	2100      	movs	r1, #0
 8003452:	4811      	ldr	r0, [pc, #68]	@ (8003498 <main+0xc8>)
 8003454:	f009 f958 	bl	800c708 <osThreadNew>
 8003458:	4603      	mov	r3, r0
 800345a:	4a10      	ldr	r2, [pc, #64]	@ (800349c <main+0xcc>)
 800345c:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 800345e:	4a10      	ldr	r2, [pc, #64]	@ (80034a0 <main+0xd0>)
 8003460:	2100      	movs	r1, #0
 8003462:	4810      	ldr	r0, [pc, #64]	@ (80034a4 <main+0xd4>)
 8003464:	f009 f950 	bl	800c708 <osThreadNew>
 8003468:	4603      	mov	r3, r0
 800346a:	4a0f      	ldr	r2, [pc, #60]	@ (80034a8 <main+0xd8>)
 800346c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800346e:	f009 f925 	bl	800c6bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <main+0xa2>
 8003476:	bf00      	nop
 8003478:	20001024 	.word	0x20001024
 800347c:	080124c4 	.word	0x080124c4
 8003480:	08003fd9 	.word	0x08003fd9
 8003484:	20001014 	.word	0x20001014
 8003488:	080124e8 	.word	0x080124e8
 800348c:	08004151 	.word	0x08004151
 8003490:	20001018 	.word	0x20001018
 8003494:	0801250c 	.word	0x0801250c
 8003498:	08002f6d 	.word	0x08002f6d
 800349c:	2000101c 	.word	0x2000101c
 80034a0:	08012530 	.word	0x08012530
 80034a4:	08004931 	.word	0x08004931
 80034a8:	20001020 	.word	0x20001020

080034ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b094      	sub	sp, #80	@ 0x50
 80034b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034b2:	f107 0320 	add.w	r3, r7, #32
 80034b6:	2230      	movs	r2, #48	@ 0x30
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f00c fd9e 	bl	800fffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	4b29      	ldr	r3, [pc, #164]	@ (800357c <SystemClock_Config+0xd0>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	4a28      	ldr	r2, [pc, #160]	@ (800357c <SystemClock_Config+0xd0>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034de:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e0:	4b26      	ldr	r3, [pc, #152]	@ (800357c <SystemClock_Config+0xd0>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ec:	2300      	movs	r3, #0
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	4b23      	ldr	r3, [pc, #140]	@ (8003580 <SystemClock_Config+0xd4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a22      	ldr	r2, [pc, #136]	@ (8003580 <SystemClock_Config+0xd4>)
 80034f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <SystemClock_Config+0xd4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003508:	2301      	movs	r3, #1
 800350a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800350c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003512:	2302      	movs	r3, #2
 8003514:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003516:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800351a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800351c:	2306      	movs	r3, #6
 800351e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003520:	23a8      	movs	r3, #168	@ 0xa8
 8003522:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003524:	2302      	movs	r3, #2
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003528:	2304      	movs	r3, #4
 800352a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800352c:	f107 0320 	add.w	r3, r7, #32
 8003530:	4618      	mov	r0, r3
 8003532:	f005 ff13 	bl	800935c <HAL_RCC_OscConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800353c:	f001 fa00 	bl	8004940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003540:	230f      	movs	r3, #15
 8003542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003544:	2302      	movs	r3, #2
 8003546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800354c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	2105      	movs	r1, #5
 800355e:	4618      	mov	r0, r3
 8003560:	f006 f974 	bl	800984c <HAL_RCC_ClockConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800356a:	f001 f9e9 	bl	8004940 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800356e:	f006 fa53 	bl	8009a18 <HAL_RCC_EnableCSS>
}
 8003572:	bf00      	nop
 8003574:	3750      	adds	r7, #80	@ 0x50
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	40007000 	.word	0x40007000

08003584 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003588:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <MX_CAN1_Init+0x64>)
 800358a:	4a18      	ldr	r2, [pc, #96]	@ (80035ec <MX_CAN1_Init+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800358e:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <MX_CAN1_Init+0x64>)
 8003590:	2203      	movs	r2, #3
 8003592:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003594:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <MX_CAN1_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800359a:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <MX_CAN1_Init+0x64>)
 800359c:	2200      	movs	r2, #0
 800359e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035a2:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80035a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035aa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80035ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80035b0:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80035b6:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035be:	2200      	movs	r2, #0
 80035c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80035c2:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80035c8:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80035d4:	4804      	ldr	r0, [pc, #16]	@ (80035e8 <MX_CAN1_Init+0x64>)
 80035d6:	f003 f953 	bl	8006880 <HAL_CAN_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80035e0:	f001 f9ae 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200009d8 	.word	0x200009d8
 80035ec:	40006400 	.word	0x40006400

080035f0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80035f4:	4b17      	ldr	r3, [pc, #92]	@ (8003654 <MX_CAN2_Init+0x64>)
 80035f6:	4a18      	ldr	r2, [pc, #96]	@ (8003658 <MX_CAN2_Init+0x68>)
 80035f8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80035fa:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <MX_CAN2_Init+0x64>)
 80035fc:	2203      	movs	r2, #3
 80035fe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <MX_CAN2_Init+0x64>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003606:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <MX_CAN2_Init+0x64>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <MX_CAN2_Init+0x64>)
 800360e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003612:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003614:	4b0f      	ldr	r3, [pc, #60]	@ (8003654 <MX_CAN2_Init+0x64>)
 8003616:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800361a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800361c:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <MX_CAN2_Init+0x64>)
 800361e:	2200      	movs	r2, #0
 8003620:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003622:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <MX_CAN2_Init+0x64>)
 8003624:	2200      	movs	r2, #0
 8003626:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003628:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <MX_CAN2_Init+0x64>)
 800362a:	2200      	movs	r2, #0
 800362c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800362e:	4b09      	ldr	r3, [pc, #36]	@ (8003654 <MX_CAN2_Init+0x64>)
 8003630:	2200      	movs	r2, #0
 8003632:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003634:	4b07      	ldr	r3, [pc, #28]	@ (8003654 <MX_CAN2_Init+0x64>)
 8003636:	2200      	movs	r2, #0
 8003638:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <MX_CAN2_Init+0x64>)
 800363c:	2200      	movs	r2, #0
 800363e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003640:	4804      	ldr	r0, [pc, #16]	@ (8003654 <MX_CAN2_Init+0x64>)
 8003642:	f003 f91d 	bl	8006880 <HAL_CAN_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800364c:	f001 f978 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000a00 	.word	0x20000a00
 8003658:	40006800 	.word	0x40006800

0800365c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <MX_I2C3_Init+0x50>)
 8003662:	4a13      	ldr	r2, [pc, #76]	@ (80036b0 <MX_I2C3_Init+0x54>)
 8003664:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <MX_I2C3_Init+0x50>)
 8003668:	4a12      	ldr	r2, [pc, #72]	@ (80036b4 <MX_I2C3_Init+0x58>)
 800366a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800366c:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <MX_I2C3_Init+0x50>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003672:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_I2C3_Init+0x50>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <MX_I2C3_Init+0x50>)
 800367a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800367e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <MX_I2C3_Init+0x50>)
 8003682:	2200      	movs	r2, #0
 8003684:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <MX_I2C3_Init+0x50>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <MX_I2C3_Init+0x50>)
 800368e:	2200      	movs	r2, #0
 8003690:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <MX_I2C3_Init+0x50>)
 8003694:	2200      	movs	r2, #0
 8003696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003698:	4804      	ldr	r0, [pc, #16]	@ (80036ac <MX_I2C3_Init+0x50>)
 800369a:	f004 fe3b 	bl	8008314 <HAL_I2C_Init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80036a4:	f001 f94c 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000a28 	.word	0x20000a28
 80036b0:	40005c00 	.word	0x40005c00
 80036b4:	00061a80 	.word	0x00061a80

080036b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036bc:	4b17      	ldr	r3, [pc, #92]	@ (800371c <MX_SPI1_Init+0x64>)
 80036be:	4a18      	ldr	r2, [pc, #96]	@ (8003720 <MX_SPI1_Init+0x68>)
 80036c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036c2:	4b16      	ldr	r3, [pc, #88]	@ (800371c <MX_SPI1_Init+0x64>)
 80036c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036ca:	4b14      	ldr	r3, [pc, #80]	@ (800371c <MX_SPI1_Init+0x64>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <MX_SPI1_Init+0x64>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <MX_SPI1_Init+0x64>)
 80036d8:	2202      	movs	r2, #2
 80036da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036dc:	4b0f      	ldr	r3, [pc, #60]	@ (800371c <MX_SPI1_Init+0x64>)
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <MX_SPI1_Init+0x64>)
 80036e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80036ea:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <MX_SPI1_Init+0x64>)
 80036ec:	2238      	movs	r2, #56	@ 0x38
 80036ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <MX_SPI1_Init+0x64>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036f6:	4b09      	ldr	r3, [pc, #36]	@ (800371c <MX_SPI1_Init+0x64>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fc:	4b07      	ldr	r3, [pc, #28]	@ (800371c <MX_SPI1_Init+0x64>)
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <MX_SPI1_Init+0x64>)
 8003704:	220a      	movs	r2, #10
 8003706:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003708:	4804      	ldr	r0, [pc, #16]	@ (800371c <MX_SPI1_Init+0x64>)
 800370a:	f006 faa6 	bl	8009c5a <HAL_SPI_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003714:	f001 f914 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000a7c 	.word	0x20000a7c
 8003720:	40013000 	.word	0x40013000

08003724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b092      	sub	sp, #72	@ 0x48
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
 8003744:	615a      	str	r2, [r3, #20]
 8003746:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	2220      	movs	r2, #32
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f00c fc54 	bl	800fffc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003754:	4b45      	ldr	r3, [pc, #276]	@ (800386c <MX_TIM1_Init+0x148>)
 8003756:	4a46      	ldr	r2, [pc, #280]	@ (8003870 <MX_TIM1_Init+0x14c>)
 8003758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800375a:	4b44      	ldr	r3, [pc, #272]	@ (800386c <MX_TIM1_Init+0x148>)
 800375c:	2253      	movs	r2, #83	@ 0x53
 800375e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003760:	4b42      	ldr	r3, [pc, #264]	@ (800386c <MX_TIM1_Init+0x148>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003766:	4b41      	ldr	r3, [pc, #260]	@ (800386c <MX_TIM1_Init+0x148>)
 8003768:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800376c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800376e:	4b3f      	ldr	r3, [pc, #252]	@ (800386c <MX_TIM1_Init+0x148>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003774:	4b3d      	ldr	r3, [pc, #244]	@ (800386c <MX_TIM1_Init+0x148>)
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377a:	4b3c      	ldr	r3, [pc, #240]	@ (800386c <MX_TIM1_Init+0x148>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003780:	483a      	ldr	r0, [pc, #232]	@ (800386c <MX_TIM1_Init+0x148>)
 8003782:	f006 fe37 	bl	800a3f4 <HAL_TIM_PWM_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800378c:	f001 f8d8 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003798:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800379c:	4619      	mov	r1, r3
 800379e:	4833      	ldr	r0, [pc, #204]	@ (800386c <MX_TIM1_Init+0x148>)
 80037a0:	f007 fc56 	bl	800b050 <HAL_TIMEx_MasterConfigSynchronization>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80037aa:	f001 f8c9 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ae:	2360      	movs	r3, #96	@ 0x60
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037b6:	2300      	movs	r3, #0
 80037b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037ba:	2300      	movs	r3, #0
 80037bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ce:	2200      	movs	r2, #0
 80037d0:	4619      	mov	r1, r3
 80037d2:	4826      	ldr	r0, [pc, #152]	@ (800386c <MX_TIM1_Init+0x148>)
 80037d4:	f006 ff96 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80037de:	f001 f8af 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e6:	2204      	movs	r2, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4820      	ldr	r0, [pc, #128]	@ (800386c <MX_TIM1_Init+0x148>)
 80037ec:	f006 ff8a 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80037f6:	f001 f8a3 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037fe:	2208      	movs	r2, #8
 8003800:	4619      	mov	r1, r3
 8003802:	481a      	ldr	r0, [pc, #104]	@ (800386c <MX_TIM1_Init+0x148>)
 8003804:	f006 ff7e 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800380e:	f001 f897 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003816:	220c      	movs	r2, #12
 8003818:	4619      	mov	r1, r3
 800381a:	4814      	ldr	r0, [pc, #80]	@ (800386c <MX_TIM1_Init+0x148>)
 800381c:	f006 ff72 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003826:	f001 f88b 	bl	8004940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800383e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003842:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4807      	ldr	r0, [pc, #28]	@ (800386c <MX_TIM1_Init+0x148>)
 800384e:	f007 fc7b 	bl	800b148 <HAL_TIMEx_ConfigBreakDeadTime>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003858:	f001 f872 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800385c:	4803      	ldr	r0, [pc, #12]	@ (800386c <MX_TIM1_Init+0x148>)
 800385e:	f002 fad1 	bl	8005e04 <HAL_TIM_MspPostInit>

}
 8003862:	bf00      	nop
 8003864:	3748      	adds	r7, #72	@ 0x48
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000ad4 	.word	0x20000ad4
 8003870:	40010000 	.word	0x40010000

08003874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	@ 0x38
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800387a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003888:	f107 0320 	add.w	r3, r7, #32
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
 80038a0:	615a      	str	r2, [r3, #20]
 80038a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038a4:	4b2d      	ldr	r3, [pc, #180]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <MX_TIM4_Init+0xec>)
 80038a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80038aa:	4b2c      	ldr	r3, [pc, #176]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038ac:	2253      	movs	r2, #83	@ 0x53
 80038ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b0:	4b2a      	ldr	r3, [pc, #168]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 80038b6:	4b29      	ldr	r3, [pc, #164]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038b8:	f245 2207 	movw	r2, #20999	@ 0x5207
 80038bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038be:	4b27      	ldr	r3, [pc, #156]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038c4:	4b25      	ldr	r3, [pc, #148]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038c6:	2280      	movs	r2, #128	@ 0x80
 80038c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038ca:	4824      	ldr	r0, [pc, #144]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038cc:	f006 fcda 	bl	800a284 <HAL_TIM_Base_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80038d6:	f001 f833 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80038e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e4:	4619      	mov	r1, r3
 80038e6:	481d      	ldr	r0, [pc, #116]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038e8:	f006 ffce 	bl	800a888 <HAL_TIM_ConfigClockSource>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80038f2:	f001 f825 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80038f6:	4819      	ldr	r0, [pc, #100]	@ (800395c <MX_TIM4_Init+0xe8>)
 80038f8:	f006 fd7c 	bl	800a3f4 <HAL_TIM_PWM_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003902:	f001 f81d 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800390e:	f107 0320 	add.w	r3, r7, #32
 8003912:	4619      	mov	r1, r3
 8003914:	4811      	ldr	r0, [pc, #68]	@ (800395c <MX_TIM4_Init+0xe8>)
 8003916:	f007 fb9b 	bl	800b050 <HAL_TIMEx_MasterConfigSynchronization>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003920:	f001 f80e 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003924:	2360      	movs	r3, #96	@ 0x60
 8003926:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8003928:	f642 1303 	movw	r3, #10499	@ 0x2903
 800392c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	2208      	movs	r2, #8
 800393a:	4619      	mov	r1, r3
 800393c:	4807      	ldr	r0, [pc, #28]	@ (800395c <MX_TIM4_Init+0xe8>)
 800393e:	f006 fee1 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003948:	f000 fffa 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800394c:	4803      	ldr	r0, [pc, #12]	@ (800395c <MX_TIM4_Init+0xe8>)
 800394e:	f002 fa59 	bl	8005e04 <HAL_TIM_MspPostInit>

}
 8003952:	bf00      	nop
 8003954:	3738      	adds	r7, #56	@ 0x38
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000b1c 	.word	0x20000b1c
 8003960:	40000800 	.word	0x40000800

08003964 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396a:	f107 0320 	add.w	r3, r7, #32
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	615a      	str	r2, [r3, #20]
 8003984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003986:	4b2d      	ldr	r3, [pc, #180]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 8003988:	4a2d      	ldr	r2, [pc, #180]	@ (8003a40 <MX_TIM5_Init+0xdc>)
 800398a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800398c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 800398e:	2253      	movs	r2, #83	@ 0x53
 8003990:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003992:	4b2a      	ldr	r3, [pc, #168]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8003998:	4b28      	ldr	r3, [pc, #160]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 800399a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800399e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a0:	4b26      	ldr	r3, [pc, #152]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a6:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80039ac:	4823      	ldr	r0, [pc, #140]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 80039ae:	f006 fd21 	bl	800a3f4 <HAL_TIM_PWM_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80039b8:	f000 ffc2 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039c4:	f107 0320 	add.w	r3, r7, #32
 80039c8:	4619      	mov	r1, r3
 80039ca:	481c      	ldr	r0, [pc, #112]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 80039cc:	f007 fb40 	bl	800b050 <HAL_TIMEx_MasterConfigSynchronization>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80039d6:	f000 ffb3 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039da:	2360      	movs	r3, #96	@ 0x60
 80039dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	2200      	movs	r2, #0
 80039ee:	4619      	mov	r1, r3
 80039f0:	4812      	ldr	r0, [pc, #72]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 80039f2:	f006 fe87 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80039fc:	f000 ffa0 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	2204      	movs	r2, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	480d      	ldr	r0, [pc, #52]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 8003a08:	f006 fe7c 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003a12:	f000 ff95 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2208      	movs	r2, #8
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4807      	ldr	r0, [pc, #28]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 8003a1e:	f006 fe71 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8003a28:	f000 ff8a 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003a2c:	4803      	ldr	r0, [pc, #12]	@ (8003a3c <MX_TIM5_Init+0xd8>)
 8003a2e:	f002 f9e9 	bl	8005e04 <HAL_TIM_MspPostInit>

}
 8003a32:	bf00      	nop
 8003a34:	3728      	adds	r7, #40	@ 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000b64 	.word	0x20000b64
 8003a40:	40000c00 	.word	0x40000c00

08003a44 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b092      	sub	sp, #72	@ 0x48
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
 8003a64:	615a      	str	r2, [r3, #20]
 8003a66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00c fac4 	bl	800fffc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a74:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003a76:	4a40      	ldr	r2, [pc, #256]	@ (8003b78 <MX_TIM8_Init+0x134>)
 8003a78:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003a7c:	2253      	movs	r2, #83	@ 0x53
 8003a7e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a80:	4b3c      	ldr	r3, [pc, #240]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003a88:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003a8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8e:	4b39      	ldr	r3, [pc, #228]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a94:	4b37      	ldr	r3, [pc, #220]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a9a:	4b36      	ldr	r3, [pc, #216]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003a9c:	2280      	movs	r2, #128	@ 0x80
 8003a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003aa0:	4834      	ldr	r0, [pc, #208]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003aa2:	f006 fca7 	bl	800a3f4 <HAL_TIM_PWM_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003aac:	f000 ff48 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ab8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003abc:	4619      	mov	r1, r3
 8003abe:	482d      	ldr	r0, [pc, #180]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003ac0:	f007 fac6 	bl	800b050 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003aca:	f000 ff39 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ace:	2360      	movs	r3, #96	@ 0x60
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ada:	2300      	movs	r3, #0
 8003adc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aee:	2200      	movs	r2, #0
 8003af0:	4619      	mov	r1, r3
 8003af2:	4820      	ldr	r0, [pc, #128]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003af4:	f006 fe06 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003afe:	f000 ff1f 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b06:	2204      	movs	r2, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	481a      	ldr	r0, [pc, #104]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003b0c:	f006 fdfa 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003b16:	f000 ff13 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b1e:	2208      	movs	r2, #8
 8003b20:	4619      	mov	r1, r3
 8003b22:	4814      	ldr	r0, [pc, #80]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003b24:	f006 fdee 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8003b2e:	f000 ff07 	bl	8004940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4807      	ldr	r0, [pc, #28]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003b56:	f007 faf7 	bl	800b148 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8003b60:	f000 feee 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003b64:	4803      	ldr	r0, [pc, #12]	@ (8003b74 <MX_TIM8_Init+0x130>)
 8003b66:	f002 f94d 	bl	8005e04 <HAL_TIM_MspPostInit>

}
 8003b6a:	bf00      	nop
 8003b6c:	3748      	adds	r7, #72	@ 0x48
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000bac 	.word	0x20000bac
 8003b78:	40010400 	.word	0x40010400

08003b7c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	615a      	str	r2, [r3, #20]
 8003b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003b94:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003b96:	4a1f      	ldr	r2, [pc, #124]	@ (8003c14 <MX_TIM10_Init+0x98>)
 8003b98:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003ba8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003bac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bae:	4b18      	ldr	r3, [pc, #96]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb4:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003bba:	4815      	ldr	r0, [pc, #84]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003bbc:	f006 fb62 	bl	800a284 <HAL_TIM_Base_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003bc6:	f000 febb 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003bca:	4811      	ldr	r0, [pc, #68]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003bcc:	f006 fc12 	bl	800a3f4 <HAL_TIM_PWM_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003bd6:	f000 feb3 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bda:	2360      	movs	r3, #96	@ 0x60
 8003bdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	2200      	movs	r2, #0
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4807      	ldr	r0, [pc, #28]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003bf2:	f006 fd87 	bl	800a704 <HAL_TIM_PWM_ConfigChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003bfc:	f000 fea0 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003c00:	4803      	ldr	r0, [pc, #12]	@ (8003c10 <MX_TIM10_Init+0x94>)
 8003c02:	f002 f8ff 	bl	8005e04 <HAL_TIM_MspPostInit>

}
 8003c06:	bf00      	nop
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000bf4 	.word	0x20000bf4
 8003c14:	40014400 	.word	0x40014400

08003c18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	@ (8003c68 <MX_USART1_UART_Init+0x50>)
 8003c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c36:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c3c:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c3e:	220c      	movs	r2, #12
 8003c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c42:	4b08      	ldr	r3, [pc, #32]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c4e:	4805      	ldr	r0, [pc, #20]	@ (8003c64 <MX_USART1_UART_Init+0x4c>)
 8003c50:	f007 facc 	bl	800b1ec <HAL_UART_Init>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c5a:	f000 fe71 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000d5c 	.word	0x20000d5c
 8003c68:	40011000 	.word	0x40011000

08003c6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c72:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <MX_USART3_UART_Init+0x50>)
 8003c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8003c76:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c78:	4a11      	ldr	r2, [pc, #68]	@ (8003cc0 <MX_USART3_UART_Init+0x54>)
 8003c7a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8003c88:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c90:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c92:	220c      	movs	r2, #12
 8003c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c96:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ca2:	4805      	ldr	r0, [pc, #20]	@ (8003cb8 <MX_USART3_UART_Init+0x4c>)
 8003ca4:	f007 faa2 	bl	800b1ec <HAL_UART_Init>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003cae:	f000 fe47 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000da4 	.word	0x20000da4
 8003cbc:	40004800 	.word	0x40004800
 8003cc0:	000186a0 	.word	0x000186a0

08003cc4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cca:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <MX_USART6_UART_Init+0x50>)
 8003ccc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003cce:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003cd4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003ce8:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cea:	220c      	movs	r2, #12
 8003cec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cee:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003cfa:	4805      	ldr	r0, [pc, #20]	@ (8003d10 <MX_USART6_UART_Init+0x4c>)
 8003cfc:	f007 fa76 	bl	800b1ec <HAL_UART_Init>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003d06:	f000 fe1b 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000dec 	.word	0x20000dec
 8003d14:	40011400 	.word	0x40011400

08003d18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	4b2f      	ldr	r3, [pc, #188]	@ (8003de0 <MX_DMA_Init+0xc8>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <MX_DMA_Init+0xc8>)
 8003d28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003de0 <MX_DMA_Init+0xc8>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	4b28      	ldr	r3, [pc, #160]	@ (8003de0 <MX_DMA_Init+0xc8>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	4a27      	ldr	r2, [pc, #156]	@ (8003de0 <MX_DMA_Init+0xc8>)
 8003d44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4a:	4b25      	ldr	r3, [pc, #148]	@ (8003de0 <MX_DMA_Init+0xc8>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2105      	movs	r1, #5
 8003d5a:	200c      	movs	r0, #12
 8003d5c:	f003 fcd3 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003d60:	200c      	movs	r0, #12
 8003d62:	f003 fcec 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2105      	movs	r1, #5
 8003d6a:	200d      	movs	r0, #13
 8003d6c:	f003 fccb 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003d70:	200d      	movs	r0, #13
 8003d72:	f003 fce4 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2105      	movs	r1, #5
 8003d7a:	200f      	movs	r0, #15
 8003d7c:	f003 fcc3 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003d80:	200f      	movs	r0, #15
 8003d82:	f003 fcdc 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	2105      	movs	r1, #5
 8003d8a:	202f      	movs	r0, #47	@ 0x2f
 8003d8c:	f003 fcbb 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003d90:	202f      	movs	r0, #47	@ 0x2f
 8003d92:	f003 fcd4 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2105      	movs	r1, #5
 8003d9a:	2039      	movs	r0, #57	@ 0x39
 8003d9c:	f003 fcb3 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003da0:	2039      	movs	r0, #57	@ 0x39
 8003da2:	f003 fccc 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003da6:	2200      	movs	r2, #0
 8003da8:	2105      	movs	r1, #5
 8003daa:	203a      	movs	r0, #58	@ 0x3a
 8003dac:	f003 fcab 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003db0:	203a      	movs	r0, #58	@ 0x3a
 8003db2:	f003 fcc4 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2105      	movs	r1, #5
 8003dba:	2045      	movs	r0, #69	@ 0x45
 8003dbc:	f003 fca3 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003dc0:	2045      	movs	r0, #69	@ 0x45
 8003dc2:	f003 fcbc 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2105      	movs	r1, #5
 8003dca:	2046      	movs	r0, #70	@ 0x46
 8003dcc:	f003 fc9b 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003dd0:	2046      	movs	r0, #70	@ 0x46
 8003dd2:	f003 fcb4 	bl	800773e <HAL_NVIC_EnableIRQ>

}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	@ 0x38
 8003de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	4b71      	ldr	r3, [pc, #452]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	4a70      	ldr	r2, [pc, #448]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	4a69      	ldr	r2, [pc, #420]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e26:	4b67      	ldr	r3, [pc, #412]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	4b63      	ldr	r3, [pc, #396]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	4a62      	ldr	r2, [pc, #392]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e42:	4b60      	ldr	r3, [pc, #384]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e58:	f043 0308 	orr.w	r3, r3, #8
 8003e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e5e:	4b59      	ldr	r3, [pc, #356]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	4b55      	ldr	r3, [pc, #340]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	4a54      	ldr	r2, [pc, #336]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7a:	4b52      	ldr	r3, [pc, #328]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e96:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b47      	ldr	r3, [pc, #284]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	4a46      	ldr	r2, [pc, #280]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eb2:	4b44      	ldr	r3, [pc, #272]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	4b40      	ldr	r3, [pc, #256]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003ec8:	f043 0320 	orr.w	r3, r3, #32
 8003ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ece:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	4b39      	ldr	r3, [pc, #228]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	4a38      	ldr	r2, [pc, #224]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003ee4:	f043 0310 	orr.w	r3, r3, #16
 8003ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eea:	4b36      	ldr	r3, [pc, #216]	@ (8003fc4 <MX_GPIO_Init+0x1e0>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2140      	movs	r1, #64	@ 0x40
 8003efa:	4833      	ldr	r0, [pc, #204]	@ (8003fc8 <MX_GPIO_Init+0x1e4>)
 8003efc:	f004 f9d8 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2110      	movs	r1, #16
 8003f04:	4831      	ldr	r0, [pc, #196]	@ (8003fcc <MX_GPIO_Init+0x1e8>)
 8003f06:	f004 f9d3 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4830      	ldr	r0, [pc, #192]	@ (8003fd0 <MX_GPIO_Init+0x1ec>)
 8003f10:	f004 f9ce 	bl	80082b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f14:	2340      	movs	r3, #64	@ 0x40
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	2300      	movs	r3, #0
 8003f22:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4827      	ldr	r0, [pc, #156]	@ (8003fc8 <MX_GPIO_Init+0x1e4>)
 8003f2c:	f004 f824 	bl	8007f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f30:	2308      	movs	r3, #8
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f42:	4619      	mov	r1, r3
 8003f44:	4820      	ldr	r0, [pc, #128]	@ (8003fc8 <MX_GPIO_Init+0x1e4>)
 8003f46:	f004 f817 	bl	8007f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f4a:	2310      	movs	r3, #16
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f56:	2300      	movs	r3, #0
 8003f58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f5e:	4619      	mov	r1, r3
 8003f60:	481a      	ldr	r0, [pc, #104]	@ (8003fcc <MX_GPIO_Init+0x1e8>)
 8003f62:	f004 f809 	bl	8007f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8003f66:	2330      	movs	r3, #48	@ 0x30
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4816      	ldr	r0, [pc, #88]	@ (8003fd4 <MX_GPIO_Init+0x1f0>)
 8003f7c:	f003 fffc 	bl	8007f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f80:	2301      	movs	r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f84:	2301      	movs	r3, #1
 8003f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f94:	4619      	mov	r1, r3
 8003f96:	480e      	ldr	r0, [pc, #56]	@ (8003fd0 <MX_GPIO_Init+0x1ec>)
 8003f98:	f003 ffee 	bl	8007f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2105      	movs	r1, #5
 8003fa0:	2009      	movs	r0, #9
 8003fa2:	f003 fbb0 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003fa6:	2009      	movs	r0, #9
 8003fa8:	f003 fbc9 	bl	800773e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	2105      	movs	r1, #5
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f003 fba8 	bl	8007706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003fb6:	200a      	movs	r0, #10
 8003fb8:	f003 fbc1 	bl	800773e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003fbc:	bf00      	nop
 8003fbe:	3738      	adds	r7, #56	@ 0x38
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40021800 	.word	0x40021800
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	40020800 	.word	0x40020800

08003fd8 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	// LED_PWM_Start();
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fe6:	4850      	ldr	r0, [pc, #320]	@ (8004128 <TaskMain+0x150>)
 8003fe8:	f004 f962 	bl	80082b0 <HAL_GPIO_WritePin>
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8003fec:	f7fd f852 	bl	8001094 <BMI088_accel_init>
		//usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8003ff0:	f7fd f908 	bl	8001204 <BMI088_gyro_init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <TaskMain+0x28>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 8003ffa:	484c      	ldr	r0, [pc, #304]	@ (800412c <TaskMain+0x154>)
 8003ffc:	f7fe faf4 	bl	80025e8 <usart_printf>
	}
	if (ist8310_init()) {
 8004000:	f7ff f852 	bl	80030a8 <ist8310_init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <TaskMain+0x38>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 800400a:	4849      	ldr	r0, [pc, #292]	@ (8004130 <TaskMain+0x158>)
 800400c:	f7fe faec 	bl	80025e8 <usart_printf>
	}
	CAN_defineMotor(Bus2, M3508, 1);
 8004010:	2201      	movs	r2, #1
 8004012:	2101      	movs	r1, #1
 8004014:	2002      	movs	r0, #2
 8004016:	f7fd fc09 	bl	800182c <CAN_defineMotor>
	CAN_defineMotor(Bus2, M2006, 2);
 800401a:	2202      	movs	r2, #2
 800401c:	2102      	movs	r1, #2
 800401e:	2002      	movs	r0, #2
 8004020:	f7fd fc04 	bl	800182c <CAN_defineMotor>
	CAN_defineMotor(Bus2, GM6020, 1);
 8004024:	2201      	movs	r2, #1
 8004026:	2103      	movs	r1, #3
 8004028:	2002      	movs	r0, #2
 800402a:	f7fd fbff 	bl	800182c <CAN_defineMotor>

	osDelay(150);
 800402e:	2096      	movs	r0, #150	@ 0x96
 8004030:	f008 fbfc 	bl	800c82c <osDelay>
	PWMOutput(LED, 2, 500);
 8004034:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004038:	2102      	movs	r1, #2
 800403a:	2001      	movs	r0, #1
 800403c:	f001 f85c 	bl	80050f8 <PWMOutput>
	PWMInitialize(LED, FR, 2, 0.9);
 8004040:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8004134 <TaskMain+0x15c>
 8004044:	2202      	movs	r2, #2
 8004046:	2101      	movs	r1, #1
 8004048:	2001      	movs	r0, #1
 800404a:	f000 ff3d 	bl	8004ec8 <PWMInitialize>
	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
	JoulesBuffer = 60;
 800404e:	4b3a      	ldr	r3, [pc, #232]	@ (8004138 <TaskMain+0x160>)
 8004050:	4a3a      	ldr	r2, [pc, #232]	@ (800413c <TaskMain+0x164>)
 8004052:	601a      	str	r2, [r3, #0]
	for(;;) {
		JoulesBuffer += ((PowerLimitor-6)-maxPower)*0.1;
 8004054:	4b38      	ldr	r3, [pc, #224]	@ (8004138 <TaskMain+0x160>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc fa75 	bl	8000548 <__aeabi_f2d>
 800405e:	4604      	mov	r4, r0
 8004060:	460d      	mov	r5, r1
 8004062:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <TaskMain+0x168>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3b06      	subs	r3, #6
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004070:	4b34      	ldr	r3, [pc, #208]	@ (8004144 <TaskMain+0x16c>)
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800407a:	ee17 0a90 	vmov	r0, s15
 800407e:	f7fc fa63 	bl	8000548 <__aeabi_f2d>
 8004082:	a327      	add	r3, pc, #156	@ (adr r3, 8004120 <TaskMain+0x148>)
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	f7fc fab6 	bl	80005f8 <__aeabi_dmul>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4620      	mov	r0, r4
 8004092:	4629      	mov	r1, r5
 8004094:	f7fc f8fa 	bl	800028c <__adddf3>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	f7fc fd82 	bl	8000ba8 <__aeabi_d2f>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4a24      	ldr	r2, [pc, #144]	@ (8004138 <TaskMain+0x160>)
 80040a8:	6013      	str	r3, [r2, #0]
		if (JoulesBuffer > 60) {
 80040aa:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <TaskMain+0x160>)
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004148 <TaskMain+0x170>
 80040b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	dd02      	ble.n	80040c4 <TaskMain+0xec>
			JoulesBuffer = 60;
 80040be:	4b1e      	ldr	r3, [pc, #120]	@ (8004138 <TaskMain+0x160>)
 80040c0:	4a1e      	ldr	r2, [pc, #120]	@ (800413c <TaskMain+0x164>)
 80040c2:	601a      	str	r2, [r3, #0]
		}
		if (JoulesBuffer < 0) {
 80040c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004138 <TaskMain+0x160>)
 80040c6:	edd3 7a00 	vldr	s15, [r3]
 80040ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d2:	d503      	bpl.n	80040dc <TaskMain+0x104>
			JoulesBuffer = 0;
 80040d4:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <TaskMain+0x160>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
		}
		if (JoulesBuffer == 0) {
 80040dc:	4b16      	ldr	r3, [pc, #88]	@ (8004138 <TaskMain+0x160>)
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ea:	d104      	bne.n	80040f6 <TaskMain+0x11e>
			PWMOn(LED, 2);
 80040ec:	2102      	movs	r1, #2
 80040ee:	2001      	movs	r0, #1
 80040f0:	f001 f832 	bl	8005158 <PWMOn>
 80040f4:	e003      	b.n	80040fe <TaskMain+0x126>
		} else {
			PWMOff(LED, 2);
 80040f6:	2102      	movs	r1, #2
 80040f8:	2001      	movs	r0, #1
 80040fa:	f001 f859 	bl	80051b0 <PWMOff>
		}
		settingMaxCurrentVal(JoulesBuffer, PowerLimitor);
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <TaskMain+0x160>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <TaskMain+0x168>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	4618      	mov	r0, r3
 800410c:	eeb0 0a67 	vmov.f32	s0, s15
 8004110:	f7fe fdd2 	bl	8002cb8 <settingMaxCurrentVal>
		osDelay(100);
 8004114:	2064      	movs	r0, #100	@ 0x64
 8004116:	f008 fb89 	bl	800c82c <osDelay>
		JoulesBuffer += ((PowerLimitor-6)-maxPower)*0.1;
 800411a:	e79b      	b.n	8004054 <TaskMain+0x7c>
 800411c:	f3af 8000 	nop.w
 8004120:	9999999a 	.word	0x9999999a
 8004124:	3fb99999 	.word	0x3fb99999
 8004128:	40021c00 	.word	0x40021c00
 800412c:	08012418 	.word	0x08012418
 8004130:	08012444 	.word	0x08012444
 8004134:	3f666666 	.word	0x3f666666
 8004138:	20000094 	.word	0x20000094
 800413c:	42700000 	.word	0x42700000
 8004140:	20000098 	.word	0x20000098
 8004144:	20001028 	.word	0x20001028
 8004148:	42700000 	.word	0x42700000
 800414c:	00000000 	.word	0x00000000

08004150 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8004150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004154:	b0ac      	sub	sp, #176	@ 0xb0
 8004156:	af0c      	add	r7, sp, #48	@ 0x30
 8004158:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 800415a:	4bb7      	ldr	r3, [pc, #732]	@ (8004438 <TaskChassis+0x2e8>)
 800415c:	4ab7      	ldr	r2, [pc, #732]	@ (800443c <TaskChassis+0x2ec>)
 800415e:	49b8      	ldr	r1, [pc, #736]	@ (8004440 <TaskChassis+0x2f0>)
 8004160:	48b8      	ldr	r0, [pc, #736]	@ (8004444 <TaskChassis+0x2f4>)
 8004162:	f000 fd93 	bl	8004c8c <PWMInit>
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 8004166:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
    int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 8004170:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
    int16_t rcYaw = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    // int16_t rcPitch = 0;   	                    // range: 2204 ~ 4726
    int8_t jammed = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    int8_t indexerStopped = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    int8_t indexerTargetReached = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    int8_t bufferDead = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    int8_t M3508Voltage = 24;
 8004198:	2318      	movs	r3, #24
 800419a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

    maxPower = 0;
 800419e:	4baa      	ldr	r3, [pc, #680]	@ (8004448 <TaskChassis+0x2f8>)
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
    float scuffedMaxedPower = 0;
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    float percentagePowerLimit = 1;
 80041ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80041b0:	65fb      	str	r3, [r7, #92]	@ 0x5c

    float gyroidValue = 0;
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	677b      	str	r3, [r7, #116]	@ 0x74

    int8_t switchForShooter = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    int8_t motorOn = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

    float MC[4] = {0, 0, 0, 0};
 80041c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]


    int8_t switcherForBuzzer = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    int16_t counterForBuzzer = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

    int16_t turretPitchNew = 2735;
 80041de:	f640 23af 	movw	r3, #2735	@ 0xaaf
 80041e2:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

    //int16_t targetRPM[4] = {0,0,0,0};

  /* Infinite loop */
    for(;;) {
	    for (int i = 0; i < 4; i++) {
 80041e6:	2300      	movs	r3, #0
 80041e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041ea:	e01d      	b.n	8004228 <TaskChassis+0xd8>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 80041ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fad9 	bl	80057a8 <getRCchannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004200:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 800444c <TaskChassis+0x2fc>
 8004204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420c:	ee17 3a90 	vmov	r3, s15
 8004210:	b21a      	sxth	r2, r3
 8004212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	3368      	adds	r3, #104	@ 0x68
 8004218:	f107 0118 	add.w	r1, r7, #24
 800421c:	440b      	add	r3, r1
 800421e:	f823 2c38 	strh.w	r2, [r3, #-56]
	    for (int i = 0; i < 4; i++) {
 8004222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004224:	3301      	adds	r3, #1
 8004226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800422a:	2b03      	cmp	r3, #3
 800422c:	ddde      	ble.n	80041ec <TaskChassis+0x9c>
	    }
	    rcYaw = getRCchannel(4) * 0.85f;
 800422e:	2004      	movs	r0, #4
 8004230:	f001 faba 	bl	80057a8 <getRCchannel>
 8004234:	4603      	mov	r3, r0
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423e:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8004450 <TaskChassis+0x300>
 8004242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004246:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424a:	ee17 3a90 	vmov	r3, s15
 800424e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	    //CAN_setMotorCurrent(1, M3508, 7, 2000);
	    //rcPitch = getRotorPosition(1, 1, 2);

	    // int16_t turretPitch = (getRCchannel(1)*0.63f)+2640;

	    turretPitchNew += getRCchannel(1)*0.1;
 8004252:	2001      	movs	r0, #1
 8004254:	f001 faa8 	bl	80057a8 <getRCchannel>
 8004258:	4603      	mov	r3, r0
 800425a:	4618      	mov	r0, r3
 800425c:	f7fc f962 	bl	8000524 <__aeabi_i2d>
 8004260:	a36b      	add	r3, pc, #428	@ (adr r3, 8004410 <TaskChassis+0x2c0>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f7fc f9c7 	bl	80005f8 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4614      	mov	r4, r2
 8004270:	461d      	mov	r5, r3
 8004272:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc f954 	bl	8000524 <__aeabi_i2d>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fc f802 	bl	800028c <__adddf3>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f7fc fc62 	bl	8000b58 <__aeabi_d2iz>
 8004294:	4603      	mov	r3, r0
 8004296:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

	    if (turretPitchNew > 5000) {
 800429a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 800429e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	dd04      	ble.n	80042b0 <TaskChassis+0x160>
	    	turretPitchNew = 5000;
 80042a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042aa:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 80042ae:	e009      	b.n	80042c4 <TaskChassis+0x174>
	    } else if (turretPitchNew < 2299) {
 80042b0:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 80042b4:	f640 02fa 	movw	r2, #2298	@ 0x8fa
 80042b8:	4293      	cmp	r3, r2
 80042ba:	dc03      	bgt.n	80042c4 <TaskChassis+0x174>
	    	turretPitchNew = 2299;
 80042bc:	f640 03fb 	movw	r3, #2299	@ 0x8fb
 80042c0:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	    }

	    setMotorPosition(Bus1, GM6020, 5, turretPitchNew, pitchPresetVoltagePosition);
 80042c4:	4b63      	ldr	r3, [pc, #396]	@ (8004454 <TaskChassis+0x304>)
 80042c6:	edd3 6a00 	vldr	s13, [r3]
 80042ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80042ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80042d2:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 80042d6:	eeb0 0a66 	vmov.f32	s0, s13
 80042da:	eef0 0a47 	vmov.f32	s1, s14
 80042de:	eeb0 1a67 	vmov.f32	s2, s15
 80042e2:	2205      	movs	r2, #5
 80042e4:	2103      	movs	r1, #3
 80042e6:	2001      	movs	r0, #1
 80042e8:	f7fe f887 	bl	80023fa <setMotorPosition>

	    // usart_printf("%d %d\r\n", turretPitchNew, getRotorPosition(Bus1, GM6020, 5));
	    // setMotorRPM(Bus2, GM6020, 5, chassisTargetRPM[0], chassisPreset);

	    //CAN_DriveMotor(Bus1, 0x2FF, 2000, 0, 0, 0);
	    osDelay(2);
 80042ec:	2002      	movs	r0, #2
 80042ee:	f008 fa9d 	bl	800c82c <osDelay>

	    //setMotorRPM(Bus2, M3508, 8, 50, shooterPreset);
	    int8_t leftSwitch = getRCswitch(0);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f001 fa6c 	bl	80057d0 <getRCswitch>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	    float gyroVel[3] = {IMU_get_gyro(x), IMU_get_gyro(y), IMU_get_gyro(z)};
 80042fe:	2000      	movs	r0, #0
 8004300:	f7fd f818 	bl	8001334 <IMU_get_gyro>
 8004304:	eef0 7a40 	vmov.f32	s15, s0
 8004308:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800430c:	2001      	movs	r0, #1
 800430e:	f7fd f811 	bl	8001334 <IMU_get_gyro>
 8004312:	eef0 7a40 	vmov.f32	s15, s0
 8004316:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 800431a:	2002      	movs	r0, #2
 800431c:	f7fd f80a 	bl	8001334 <IMU_get_gyro>
 8004320:	eef0 7a40 	vmov.f32	s15, s0
 8004324:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c


	    if (leftSwitch == 1) {
 8004328:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800432c:	2b01      	cmp	r3, #1
 800432e:	f040 8097 	bne.w	8004460 <TaskChassis+0x310>
	    	// usart_printf("%f, %f, %f\r\n", gyroVel[0], gyroVel[1], gyroVel[2]);
	    	// gyroidValue += gyroVel[2]*0.005;
	    	if (((gyroVel[2] > -0.02) && (gyroVel[2] < 0.02))) {
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc f907 	bl	8000548 <__aeabi_f2d>
 800433a:	a337      	add	r3, pc, #220	@ (adr r3, 8004418 <TaskChassis+0x2c8>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f7fc fbea 	bl	8000b18 <__aeabi_dcmpgt>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00e      	beq.n	8004368 <TaskChassis+0x218>
 800434a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434c:	4618      	mov	r0, r3
 800434e:	f7fc f8fb 	bl	8000548 <__aeabi_f2d>
 8004352:	a333      	add	r3, pc, #204	@ (adr r3, 8004420 <TaskChassis+0x2d0>)
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	f7fc fbc0 	bl	8000adc <__aeabi_dcmplt>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <TaskChassis+0x218>
	    		gyroVel[2] = 0;
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    	}
	    	gyroidValue += (gyroVel[2] + -0.008*rcYaw)*0.01;
 8004368:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800436a:	f7fc f8ed 	bl	8000548 <__aeabi_f2d>
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc f8e7 	bl	8000548 <__aeabi_f2d>
 800437a:	4680      	mov	r8, r0
 800437c:	4689      	mov	r9, r1
 800437e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc f8ce 	bl	8000524 <__aeabi_i2d>
 8004388:	a327      	add	r3, pc, #156	@ (adr r3, 8004428 <TaskChassis+0x2d8>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fc f933 	bl	80005f8 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4640      	mov	r0, r8
 8004398:	4649      	mov	r1, r9
 800439a:	f7fb ff77 	bl	800028c <__adddf3>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	a322      	add	r3, pc, #136	@ (adr r3, 8004430 <TaskChassis+0x2e0>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fc f924 	bl	80005f8 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fb ff68 	bl	800028c <__adddf3>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7fc fbf0 	bl	8000ba8 <__aeabi_d2f>
 80043c8:	4603      	mov	r3, r0
 80043ca:	677b      	str	r3, [r7, #116]	@ 0x74
	    	setMotorRPM(Bus2, GM6020, 1, (int16_t)(-3000*gyroidValue), yawPresetVoltageRPM);
 80043cc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80043d0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004458 <TaskChassis+0x308>
 80043d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043dc:	ee17 3a90 	vmov	r3, s15
 80043e0:	b21a      	sxth	r2, r3
 80043e2:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <TaskChassis+0x30c>)
 80043e4:	edd3 6a00 	vldr	s13, [r3]
 80043e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80043ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f0:	eeb0 0a66 	vmov.f32	s0, s13
 80043f4:	eef0 0a47 	vmov.f32	s1, s14
 80043f8:	eeb0 1a67 	vmov.f32	s2, s15
 80043fc:	4613      	mov	r3, r2
 80043fe:	2201      	movs	r2, #1
 8004400:	2103      	movs	r1, #3
 8004402:	2002      	movs	r0, #2
 8004404:	f7fd ffbe 	bl	8002384 <setMotorRPM>
 8004408:	e03e      	b.n	8004488 <TaskChassis+0x338>
 800440a:	bf00      	nop
 800440c:	f3af 8000 	nop.w
 8004410:	9999999a 	.word	0x9999999a
 8004414:	3fb99999 	.word	0x3fb99999
 8004418:	47ae147b 	.word	0x47ae147b
 800441c:	bf947ae1 	.word	0xbf947ae1
 8004420:	47ae147b 	.word	0x47ae147b
 8004424:	3f947ae1 	.word	0x3f947ae1
 8004428:	d2f1a9fc 	.word	0xd2f1a9fc
 800442c:	bf80624d 	.word	0xbf80624d
 8004430:	47ae147b 	.word	0x47ae147b
 8004434:	3f847ae1 	.word	0x3f847ae1
 8004438:	20000bac 	.word	0x20000bac
 800443c:	20000b64 	.word	0x20000b64
 8004440:	20000b1c 	.word	0x20000b1c
 8004444:	20000ad4 	.word	0x20000ad4
 8004448:	20001028 	.word	0x20001028
 800444c:	415a51ec 	.word	0x415a51ec
 8004450:	3f59999a 	.word	0x3f59999a
 8004454:	20000070 	.word	0x20000070
 8004458:	c53b8000 	.word	0xc53b8000
 800445c:	20000064 	.word	0x20000064
	    } else {
	    	setMotorRPM(Bus2, GM6020, 1, rcYaw, yawPresetVoltageRPM);
 8004460:	4bc5      	ldr	r3, [pc, #788]	@ (8004778 <TaskChassis+0x628>)
 8004462:	edd3 6a00 	vldr	s13, [r3]
 8004466:	ed93 7a01 	vldr	s14, [r3, #4]
 800446a:	edd3 7a02 	vldr	s15, [r3, #8]
 800446e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 8004472:	eeb0 0a66 	vmov.f32	s0, s13
 8004476:	eef0 0a47 	vmov.f32	s1, s14
 800447a:	eeb0 1a67 	vmov.f32	s2, s15
 800447e:	2201      	movs	r2, #1
 8004480:	2103      	movs	r1, #3
 8004482:	2002      	movs	r0, #2
 8004484:	f7fd ff7e 	bl	8002384 <setMotorRPM>
	    // int16_t rcPitch = getRCchannel(1) * 1.91f + 3462;        // range: 4968 ~ 7490       110.85deg
	    //usart_printf("ch1: %d\r\n", getRotorPosition(2,3,5));
	    //setMotorPosition(Bus2, GM6020, 5, 3462, pitchPresetVoltagePosition);

	    //usart_printf("%d \r\n", rcPitch);
	    chassisTargetRPM[0] = rcRPM[3] + rcRPM[0] + rcRPM[2];
 8004488:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800448c:	b29a      	uxth	r2, r3
 800448e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8004492:	b29b      	uxth	r3, r3
 8004494:	4413      	add	r3, r2
 8004496:	b29a      	uxth	r2, r3
 8004498:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800449c:	b29b      	uxth	r3, r3
 800449e:	4413      	add	r3, r2
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	    chassisTargetRPM[1] = rcRPM[3] + rcRPM[0] - rcRPM[2];
 80044a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80044bc:	b29b      	uxth	r3, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b21b      	sxth	r3, r3
 80044c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	    chassisTargetRPM[2] = -rcRPM[3] + rcRPM[0] - rcRPM[2];
 80044c8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80044dc:	b29b      	uxth	r3, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	    chassisTargetRPM[3] = -rcRPM[3] + rcRPM[0] + rcRPM[2];
 80044e8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4413      	add	r3, r2
 8004500:	b29b      	uxth	r3, r3
 8004502:	b21b      	sxth	r3, r3
 8004504:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	    // CURRENT LIMITOR
	    // 0.0012207 = 20/16384


	    for (int i = 0; i < 4; i++) {
 8004508:	2300      	movs	r3, #0
 800450a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800450c:	e040      	b.n	8004590 <TaskChassis+0x440>
	    	MC[i] = getMotorCurrent(Bus2, M3508, (i+1)) * 0.0012207f;
 800450e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004510:	b2db      	uxtb	r3, r3
 8004512:	3301      	adds	r3, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	b25b      	sxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	2101      	movs	r1, #1
 800451c:	2002      	movs	r0, #2
 800451e:	f7fd fff9 	bl	8002514 <getMotorCurrent>
 8004522:	4603      	mov	r3, r0
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800452c:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800477c <TaskChassis+0x62c>
 8004530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	3368      	adds	r3, #104	@ 0x68
 800453a:	f107 0218 	add.w	r2, r7, #24
 800453e:	4413      	add	r3, r2
 8004540:	3b50      	subs	r3, #80	@ 0x50
 8004542:	edc3 7a00 	vstr	s15, [r3]
	    	if (MC[i] < 0) {
 8004546:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	3368      	adds	r3, #104	@ 0x68
 800454c:	f107 0218 	add.w	r2, r7, #24
 8004550:	4413      	add	r3, r2
 8004552:	3b50      	subs	r3, #80	@ 0x50
 8004554:	edd3 7a00 	vldr	s15, [r3]
 8004558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004560:	d513      	bpl.n	800458a <TaskChassis+0x43a>
	    		MC[i] = -1* MC[i];
 8004562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3368      	adds	r3, #104	@ 0x68
 8004568:	f107 0218 	add.w	r2, r7, #24
 800456c:	4413      	add	r3, r2
 800456e:	3b50      	subs	r3, #80	@ 0x50
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	eef1 7a67 	vneg.f32	s15, s15
 8004578:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	3368      	adds	r3, #104	@ 0x68
 800457e:	f107 0218 	add.w	r2, r7, #24
 8004582:	4413      	add	r3, r2
 8004584:	3b50      	subs	r3, #80	@ 0x50
 8004586:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < 4; i++) {
 800458a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800458c:	3301      	adds	r3, #1
 800458e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004590:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004592:	2b03      	cmp	r3, #3
 8004594:	ddbb      	ble.n	800450e <TaskChassis+0x3be>
	    	}
	    }
	    maxPower = 0;
 8004596:	4b7a      	ldr	r3, [pc, #488]	@ (8004780 <TaskChassis+0x630>)
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
	    scuffedMaxedPower = 0;
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	67bb      	str	r3, [r7, #120]	@ 0x78
	    for (int i = 0; i < 4; i++) {
 80045a4:	2300      	movs	r3, #0
 80045a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80045a8:	e02a      	b.n	8004600 <TaskChassis+0x4b0>
	    	maxPower += ((MC[i])) * M3508Voltage;
 80045aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	3368      	adds	r3, #104	@ 0x68
 80045b0:	f107 0218 	add.w	r2, r7, #24
 80045b4:	4413      	add	r3, r2
 80045b6:	3b50      	subs	r3, #80	@ 0x50
 80045b8:	ed93 7a00 	vldr	s14, [r3]
 80045bc:	f997 3061 	ldrsb.w	r3, [r7, #97]	@ 0x61
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045cc:	4b6c      	ldr	r3, [pc, #432]	@ (8004780 <TaskChassis+0x630>)
 80045ce:	edd3 7a00 	vldr	s15, [r3]
 80045d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004780 <TaskChassis+0x630>)
 80045d8:	edc3 7a00 	vstr	s15, [r3]
	    	scuffedMaxedPower += MC[i];
 80045dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	3368      	adds	r3, #104	@ 0x68
 80045e2:	f107 0218 	add.w	r2, r7, #24
 80045e6:	4413      	add	r3, r2
 80045e8:	3b50      	subs	r3, #80	@ 0x50
 80045ea:	edd3 7a00 	vldr	s15, [r3]
 80045ee:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80045f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	    for (int i = 0; i < 4; i++) {
 80045fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045fc:	3301      	adds	r3, #1
 80045fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004602:	2b03      	cmp	r3, #3
 8004604:	ddd1      	ble.n	80045aa <TaskChassis+0x45a>
	    }

	    usart_printf("%f, %f, %f, %f, %f, %f, %f\r\n", MC[0], MC[1], MC[2], MC[3], scuffedMaxedPower, PowerLimitor*0.04166, JoulesBuffer);
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ff9d 	bl	8000548 <__aeabi_f2d>
 800460e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004614:	4618      	mov	r0, r3
 8004616:	f7fb ff97 	bl	8000548 <__aeabi_f2d>
 800461a:	4680      	mov	r8, r0
 800461c:	4689      	mov	r9, r1
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb ff91 	bl	8000548 <__aeabi_f2d>
 8004626:	4682      	mov	sl, r0
 8004628:	468b      	mov	fp, r1
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	4618      	mov	r0, r3
 800462e:	f7fb ff8b 	bl	8000548 <__aeabi_f2d>
 8004632:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004636:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8004638:	f7fb ff86 	bl	8000548 <__aeabi_f2d>
 800463c:	e9c7 0100 	strd	r0, r1, [r7]
 8004640:	4b50      	ldr	r3, [pc, #320]	@ (8004784 <TaskChassis+0x634>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7fb ff5d 	bl	8000504 <__aeabi_ui2d>
 800464a:	a349      	add	r3, pc, #292	@ (adr r3, 8004770 <TaskChassis+0x620>)
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f7fb ffd2 	bl	80005f8 <__aeabi_dmul>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4614      	mov	r4, r2
 800465a:	461d      	mov	r5, r3
 800465c:	4b4a      	ldr	r3, [pc, #296]	@ (8004788 <TaskChassis+0x638>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fb ff71 	bl	8000548 <__aeabi_f2d>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800466e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004672:	ed97 7b00 	vldr	d7, [r7]
 8004676:	ed8d 7b06 	vstr	d7, [sp, #24]
 800467a:	ed97 7b02 	vldr	d7, [r7, #8]
 800467e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004682:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004686:	e9cd 8900 	strd	r8, r9, [sp]
 800468a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800468e:	483f      	ldr	r0, [pc, #252]	@ (800478c <TaskChassis+0x63c>)
 8004690:	f7fd ffaa 	bl	80025e8 <usart_printf>
	    PWMOutput(Buzzer, 1, 2000);
 8004694:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004698:	2101      	movs	r1, #1
 800469a:	2002      	movs	r0, #2
 800469c:	f000 fd2c 	bl	80050f8 <PWMOutput>
	    PWMInitialize(Buzzer, FR, 1, 0.5);
 80046a0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80046a4:	2201      	movs	r2, #1
 80046a6:	2101      	movs	r1, #1
 80046a8:	2002      	movs	r0, #2
 80046aa:	f000 fc0d 	bl	8004ec8 <PWMInitialize>

	    PWMOutput(LED, 1, 500);
 80046ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80046b2:	2101      	movs	r1, #1
 80046b4:	2001      	movs	r0, #1
 80046b6:	f000 fd1f 	bl	80050f8 <PWMOutput>
	    PWMOutput(LED, 3, 500);
 80046ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80046be:	2103      	movs	r1, #3
 80046c0:	2001      	movs	r0, #1
 80046c2:	f000 fd19 	bl	80050f8 <PWMOutput>
	    PWMInitialize(LED, FR, 1, 0.9);
 80046c6:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8004790 <TaskChassis+0x640>
 80046ca:	2201      	movs	r2, #1
 80046cc:	2101      	movs	r1, #1
 80046ce:	2001      	movs	r0, #1
 80046d0:	f000 fbfa 	bl	8004ec8 <PWMInitialize>
	    PWMInitialize(LED, FR, 3, 0.9);
 80046d4:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8004790 <TaskChassis+0x640>
 80046d8:	2203      	movs	r2, #3
 80046da:	2101      	movs	r1, #1
 80046dc:	2001      	movs	r0, #1
 80046de:	f000 fbf3 	bl	8004ec8 <PWMInitialize>
	    if (JoulesBuffer < 1) {
 80046e2:	4b29      	ldr	r3, [pc, #164]	@ (8004788 <TaskChassis+0x638>)
 80046e4:	edd3 7a00 	vldr	s15, [r3]
 80046e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d502      	bpl.n	80046fc <TaskChassis+0x5ac>
	    	bufferDead = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	    }
	    if (bufferDead == 1) {
 80046fc:	f997 307c 	ldrsb.w	r3, [r7, #124]	@ 0x7c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d104      	bne.n	800470e <TaskChassis+0x5be>
	    	PWMOn(LED, 3);
 8004704:	2103      	movs	r1, #3
 8004706:	2001      	movs	r0, #1
 8004708:	f000 fd26 	bl	8005158 <PWMOn>
 800470c:	e003      	b.n	8004716 <TaskChassis+0x5c6>
	    } else {
	    	PWMOff(LED, 3);
 800470e:	2103      	movs	r1, #3
 8004710:	2001      	movs	r0, #1
 8004712:	f000 fd4d 	bl	80051b0 <PWMOff>
	    }
	    PWMOff(Buzzer, 1);
 8004716:	2101      	movs	r1, #1
 8004718:	2002      	movs	r0, #2
 800471a:	f000 fd49 	bl	80051b0 <PWMOff>
	    }
		*/
	    //usart_printf("%d\r\n", M1C);


	    bufferLimitedDriveMode(chassisTargetRPM, chassisPreset);
 800471e:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <TaskChassis+0x644>)
 8004720:	edd3 6a00 	vldr	s13, [r3]
 8004724:	ed93 7a01 	vldr	s14, [r3, #4]
 8004728:	edd3 7a02 	vldr	s15, [r3, #8]
 800472c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004730:	eeb0 0a66 	vmov.f32	s0, s13
 8004734:	eef0 0a47 	vmov.f32	s1, s14
 8004738:	eeb0 1a67 	vmov.f32	s2, s15
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fbeb 	bl	8002f18 <bufferLimitedDriveMode>


	    // ^^^^^^^^^ chassis code


	    uint32_t notes = CountryRoadsNotes();
 8004742:	f001 f859 	bl	80057f8 <CountryRoadsNotes>
 8004746:	4603      	mov	r3, r0
 8004748:	653b      	str	r3, [r7, #80]	@ 0x50
	    if (leftSwitch == 2 && switchForShooter == 0 && motorOn == 0) {
 800474a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800474e:	2b02      	cmp	r3, #2
 8004750:	d122      	bne.n	8004798 <TaskChassis+0x648>
 8004752:	f997 3073 	ldrsb.w	r3, [r7, #115]	@ 0x73
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11e      	bne.n	8004798 <TaskChassis+0x648>
 800475a:	f997 3072 	ldrsb.w	r3, [r7, #114]	@ 0x72
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11a      	bne.n	8004798 <TaskChassis+0x648>
	    	/*
		    setMotorRPM(Bus2, M3508, 7, notes, flywheel);
		    setMotorRPM(Bus2, M3508, 8, -1*notes, flywheel);
		    */
	    	switchForShooter = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	    	motorOn = 1;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 800476e:	e025      	b.n	80047bc <TaskChassis+0x66c>
 8004770:	a31a4bdc 	.word	0xa31a4bdc
 8004774:	3fa55475 	.word	0x3fa55475
 8004778:	20000064 	.word	0x20000064
 800477c:	3a9fffe5 	.word	0x3a9fffe5
 8004780:	20001028 	.word	0x20001028
 8004784:	20000098 	.word	0x20000098
 8004788:	20000094 	.word	0x20000094
 800478c:	08012470 	.word	0x08012470
 8004790:	3f666666 	.word	0x3f666666
 8004794:	20000058 	.word	0x20000058
	    } else if (leftSwitch == 2 && switchForShooter == 0 && motorOn == 1) {
 8004798:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800479c:	2b02      	cmp	r3, #2
 800479e:	d10d      	bne.n	80047bc <TaskChassis+0x66c>
 80047a0:	f997 3073 	ldrsb.w	r3, [r7, #115]	@ 0x73
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <TaskChassis+0x66c>
 80047a8:	f997 3072 	ldrsb.w	r3, [r7, #114]	@ 0x72
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d105      	bne.n	80047bc <TaskChassis+0x66c>
			switchForShooter = 1;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			motorOn = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	    }
	    if (leftSwitch == 3) {
 80047bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d102      	bne.n	80047ca <TaskChassis+0x67a>
	    	switchForShooter = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	    }

	    if (leftSwitch == 4) {
 80047ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d15d      	bne.n	800488e <TaskChassis+0x73e>
	    	// setMotorRPM(Bus2, M2006, 6, (100), indexerPreset);

			if (jammed > 0 && indexerStopped == 0) {
 80047d2:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	dd1f      	ble.n	800481a <TaskChassis+0x6ca>
 80047da:	f997 307e 	ldrsb.w	r3, [r7, #126]	@ 0x7e
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11b      	bne.n	800481a <TaskChassis+0x6ca>
				setMotorRPM(Bus2, M2006, 6, 15000, indexerPreset);
 80047e2:	4b51      	ldr	r3, [pc, #324]	@ (8004928 <TaskChassis+0x7d8>)
 80047e4:	edd3 6a00 	vldr	s13, [r3]
 80047e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80047ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80047f0:	eeb0 0a66 	vmov.f32	s0, s13
 80047f4:	eef0 0a47 	vmov.f32	s1, s14
 80047f8:	eeb0 1a67 	vmov.f32	s2, s15
 80047fc:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8004800:	2206      	movs	r2, #6
 8004802:	2102      	movs	r1, #2
 8004804:	2002      	movs	r0, #2
 8004806:	f7fd fdbd 	bl	8002384 <setMotorRPM>
				jammed--;
 800480a:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800480e:	b2db      	uxtb	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004818:	e039      	b.n	800488e <TaskChassis+0x73e>
			} else {
				indexerStopped = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
				setMotorRPM(Bus2, M2006, 6, -100, indexerPreset);
 8004820:	4b41      	ldr	r3, [pc, #260]	@ (8004928 <TaskChassis+0x7d8>)
 8004822:	edd3 6a00 	vldr	s13, [r3]
 8004826:	ed93 7a01 	vldr	s14, [r3, #4]
 800482a:	edd3 7a02 	vldr	s15, [r3, #8]
 800482e:	eeb0 0a66 	vmov.f32	s0, s13
 8004832:	eef0 0a47 	vmov.f32	s1, s14
 8004836:	eeb0 1a67 	vmov.f32	s2, s15
 800483a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800483e:	2206      	movs	r2, #6
 8004840:	2102      	movs	r1, #2
 8004842:	2002      	movs	r0, #2
 8004844:	f7fd fd9e 	bl	8002384 <setMotorRPM>
				if (indexerTargetReached == 0 && getMotorRPM(1, 2, 6) <= -10) {
 8004848:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10c      	bne.n	800486a <TaskChassis+0x71a>
 8004850:	2206      	movs	r2, #6
 8004852:	2102      	movs	r1, #2
 8004854:	2001      	movs	r0, #1
 8004856:	f7fd fe0b 	bl	8002470 <getMotorRPM>
 800485a:	4603      	mov	r3, r0
 800485c:	f113 0f09 	cmn.w	r3, #9
 8004860:	da03      	bge.n	800486a <TaskChassis+0x71a>
					indexerTargetReached = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8004868:	e011      	b.n	800488e <TaskChassis+0x73e>
				} else if (getMotorRPM(1, 2, 6) > -1 && indexerTargetReached == 1) {         // jammed
 800486a:	2206      	movs	r2, #6
 800486c:	2102      	movs	r1, #2
 800486e:	2001      	movs	r0, #1
 8004870:	f7fd fdfe 	bl	8002470 <getMotorRPM>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	db09      	blt.n	800488e <TaskChassis+0x73e>
 800487a:	f997 307d 	ldrsb.w	r3, [r7, #125]	@ 0x7d
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <TaskChassis+0x73e>
					jammed = 12;
 8004882:	230c      	movs	r3, #12
 8004884:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
					indexerTargetReached = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
				}
			}
	    }

		setMotorRPM(Bus2, M3508, 7, (800*motorOn), flywheel);
 800488e:	f997 3072 	ldrsb.w	r3, [r7, #114]	@ 0x72
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	0092      	lsls	r2, r2, #2
 8004898:	4413      	add	r3, r2
 800489a:	461a      	mov	r2, r3
 800489c:	0091      	lsls	r1, r2, #2
 800489e:	461a      	mov	r2, r3
 80048a0:	460b      	mov	r3, r1
 80048a2:	4413      	add	r3, r2
 80048a4:	015b      	lsls	r3, r3, #5
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	b21a      	sxth	r2, r3
 80048aa:	4b20      	ldr	r3, [pc, #128]	@ (800492c <TaskChassis+0x7dc>)
 80048ac:	edd3 6a00 	vldr	s13, [r3]
 80048b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80048b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80048b8:	eeb0 0a66 	vmov.f32	s0, s13
 80048bc:	eef0 0a47 	vmov.f32	s1, s14
 80048c0:	eeb0 1a67 	vmov.f32	s2, s15
 80048c4:	4613      	mov	r3, r2
 80048c6:	2207      	movs	r2, #7
 80048c8:	2101      	movs	r1, #1
 80048ca:	2002      	movs	r0, #2
 80048cc:	f7fd fd5a 	bl	8002384 <setMotorRPM>
		setMotorRPM(Bus2, M3508, 8, (-800*motorOn), flywheel);
 80048d0:	f997 3072 	ldrsb.w	r3, [r7, #114]	@ 0x72
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	00d2      	lsls	r2, r2, #3
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	0111      	lsls	r1, r2, #4
 80048e0:	461a      	mov	r2, r3
 80048e2:	460b      	mov	r3, r1
 80048e4:	4413      	add	r3, r2
 80048e6:	461a      	mov	r2, r3
 80048e8:	0111      	lsls	r1, r2, #4
 80048ea:	461a      	mov	r2, r3
 80048ec:	460b      	mov	r3, r1
 80048ee:	4413      	add	r3, r2
 80048f0:	015b      	lsls	r3, r3, #5
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	b21a      	sxth	r2, r3
 80048f6:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <TaskChassis+0x7dc>)
 80048f8:	edd3 6a00 	vldr	s13, [r3]
 80048fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004900:	edd3 7a02 	vldr	s15, [r3, #8]
 8004904:	eeb0 0a66 	vmov.f32	s0, s13
 8004908:	eef0 0a47 	vmov.f32	s1, s14
 800490c:	eeb0 1a67 	vmov.f32	s2, s15
 8004910:	4613      	mov	r3, r2
 8004912:	2208      	movs	r2, #8
 8004914:	2101      	movs	r1, #1
 8004916:	2002      	movs	r0, #2
 8004918:	f7fd fd34 	bl	8002384 <setMotorRPM>
			indexerStopped = 1;
			indexerTargetReached = 0;
		}
		*/
		// usart_printf("%f\r\n", JoulesBuffer);
		PWMTimerStarter();
 800491c:	f000 fc74 	bl	8005208 <PWMTimerStarter>
        osDelay(5);
 8004920:	2005      	movs	r0, #5
 8004922:	f007 ff83 	bl	800c82c <osDelay>
    for(;;) {
 8004926:	e45e      	b.n	80041e6 <TaskChassis+0x96>
 8004928:	2000007c 	.word	0x2000007c
 800492c:	20000088 	.word	0x20000088

08004930 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
		}
		if (JoulesBuffer == 0) {
			PWMOutput(Buzzer, 1, 6000);
		}
		*/
		osDelay(5);
 8004938:	2005      	movs	r0, #5
 800493a:	f007 ff77 	bl	800c82c <osDelay>
 800493e:	e7fb      	b.n	8004938 <TaskTurret+0x8>

08004940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004944:	b672      	cpsid	i
}
 8004946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004948:	bf00      	nop
 800494a:	e7fd      	b.n	8004948 <Error_Handler+0x8>

0800494c <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6178      	str	r0, [r7, #20]
 8004954:	460b      	mov	r3, r1
 8004956:	60fa      	str	r2, [r7, #12]
 8004958:	ed87 0a02 	vstr	s0, [r7, #8]
 800495c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004960:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d042      	beq.n	80049ee <PID_init+0xa2>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d03f      	beq.n	80049ee <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	7cfa      	ldrb	r2, [r7, #19]
 8004972:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3304      	adds	r3, #4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3308      	adds	r3, #8
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	621a      	str	r2, [r3, #32]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	645a      	str	r2, [r3, #68]	@ 0x44
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049ec:	e000      	b.n	80049f0 <PID_init+0xa4>
        return;
 80049ee:	bf00      	nop
}
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a06:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <PID_calc+0x1c>
    {
        return 0.0f;
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e130      	b.n	8004c78 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8004a32:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f040 8095 	bne.w	8004b78 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad4:	dd04      	ble.n	8004ae0 <PID_calc+0xe6>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ade:	e014      	b.n	8004b0a <PID_calc+0x110>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	edd3 7a05 	vldr	s15, [r3, #20]
 8004aec:	eef1 7a67 	vneg.f32	s15, s15
 8004af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	d507      	bpl.n	8004b0a <PID_calc+0x110>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b00:	eef1 7a67 	vneg.f32	s15, s15
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3e:	dd04      	ble.n	8004b4a <PID_calc+0x150>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	621a      	str	r2, [r3, #32]
 8004b48:	e094      	b.n	8004c74 <PID_calc+0x27a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b56:	eef1 7a67 	vneg.f32	s15, s15
 8004b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b62:	f140 8087 	bpl.w	8004c74 <PID_calc+0x27a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b6c:	eef1 7a67 	vneg.f32	s15, s15
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	edc3 7a08 	vstr	s15, [r3, #32]
 8004b76:	e07d      	b.n	8004c74 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d179      	bne.n	8004c74 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004b92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004bd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004bd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	ed93 7a03 	vldr	s14, [r3, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004c12:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	dd04      	ble.n	8004c4a <PID_calc+0x250>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	621a      	str	r2, [r3, #32]
 8004c48:	e014      	b.n	8004c74 <PID_calc+0x27a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c56:	eef1 7a67 	vneg.f32	s15, s15
 8004c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c62:	d507      	bpl.n	8004c74 <PID_calc+0x27a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c6a:	eef1 7a67 	vneg.f32	s15, s15
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
}
 8004c78:	ee07 3a90 	vmov	s15, r3
 8004c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8004c9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ce4 <PWMInit+0x58>)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8004ca0:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <PWMInit+0x5c>)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8004ca6:	4a11      	ldr	r2, [pc, #68]	@ (8004cec <PWMInit+0x60>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8004cac:	4a10      	ldr	r2, [pc, #64]	@ (8004cf0 <PWMInit+0x64>)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <PWMInit+0x58>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f005 fb34 	bl	800a324 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <PWMInit+0x5c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f005 fb2f 	bl	800a324 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8004cc6:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <PWMInit+0x60>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f005 fb2a 	bl	800a324 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8004cd0:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <PWMInit+0x64>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f005 fb25 	bl	800a324 <HAL_TIM_Base_Start>
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2000102c 	.word	0x2000102c
 8004ce8:	20001030 	.word	0x20001030
 8004cec:	20001034 	.word	0x20001034
 8004cf0:	20001038 	.word	0x20001038

08004cf4 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d02c      	beq.n	8004d64 <calculateOutputPeriodToGetFrequency+0x70>
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	dc3d      	bgt.n	8004d8a <calculateOutputPeriodToGetFrequency+0x96>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <calculateOutputPeriodToGetFrequency+0x24>
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d013      	beq.n	8004d3e <calculateOutputPeriodToGetFrequency+0x4a>
 8004d16:	e038      	b.n	8004d8a <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004d98 <calculateOutputPeriodToGetFrequency+0xa4>
 8004d26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d36:	ee17 3a90 	vmov	r3, s15
 8004d3a:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8004d3c:	e025      	b.n	8004d8a <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	ee07 3a90 	vmov	s15, r3
 8004d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d48:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004d9c <calculateOutputPeriodToGetFrequency+0xa8>
 8004d4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5c:	ee17 3a90 	vmov	r3, s15
 8004d60:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8004d62:	e012      	b.n	8004d8a <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004d9c <calculateOutputPeriodToGetFrequency+0xa8>
 8004d72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d82:	ee17 3a90 	vmov	r3, s15
 8004d86:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8004d88:	bf00      	nop
	}

	return finalVal;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	360637bd 	.word	0x360637bd
 8004d9c:	358637bd 	.word	0x358637bd

08004da0 <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db6:	edd7 7a00 	vldr	s15, [r7]
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc2:	ee17 3a90 	vmov	r3, s15
 8004dc6:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d902      	bls.n	8004dd6 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e004      	b.n	8004de0 <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 8004de0:	68fb      	ldr	r3, [r7, #12]

}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	ed87 0a00 	vstr	s0, [r7]
 8004dfc:	71fb      	strb	r3, [r7, #7]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	71bb      	strb	r3, [r7, #6]
 8004e02:	4613      	mov	r3, r2
 8004e04:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d03c      	beq.n	8004e8a <calculateOutputPeriodValue+0x9a>
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	dc51      	bgt.n	8004eb8 <calculateOutputPeriodValue+0xc8>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <calculateOutputPeriodValue+0x2e>
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d01b      	beq.n	8004e54 <calculateOutputPeriodValue+0x64>
 8004e1c:	e04c      	b.n	8004eb8 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 8004e1e:	79bb      	ldrb	r3, [r7, #6]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8004e24:	edd7 7a00 	vldr	s15, [r7]
 8004e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2c:	ee17 2a90 	vmov	r2, s15
 8004e30:	2302      	movs	r3, #2
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8004e38:	e03e      	b.n	8004eb8 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 8004e3a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	4a20      	ldr	r2, [pc, #128]	@ (8004ec4 <calculateOutputPeriodValue+0xd4>)
 8004e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e46:	ed97 0a00 	vldr	s0, [r7]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff ffa8 	bl	8004da0 <safeOutputPeriodValueCalculator>
 8004e50:	60f8      	str	r0, [r7, #12]
			break;
 8004e52:	e031      	b.n	8004eb8 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 8004e54:	79bb      	ldrb	r3, [r7, #6]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 8004e5a:	edd7 7a00 	vldr	s15, [r7]
 8004e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e62:	ee17 2a90 	vmov	r2, s15
 8004e66:	2301      	movs	r3, #1
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 8004e6e:	e023      	b.n	8004eb8 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 8004e70:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004e74:	3306      	adds	r3, #6
 8004e76:	4a13      	ldr	r2, [pc, #76]	@ (8004ec4 <calculateOutputPeriodValue+0xd4>)
 8004e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7c:	ed97 0a00 	vldr	s0, [r7]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff8d 	bl	8004da0 <safeOutputPeriodValueCalculator>
 8004e86:	60f8      	str	r0, [r7, #12]
			break;
 8004e88:	e016      	b.n	8004eb8 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 8004e8a:	79bb      	ldrb	r3, [r7, #6]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8004e90:	edd7 7a00 	vldr	s15, [r7]
 8004e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e98:	ee17 2a90 	vmov	r2, s15
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8004ea4:	e007      	b.n	8004eb6 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8004ea6:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <calculateOutputPeriodValue+0xd4>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	ed97 0a00 	vldr	s0, [r7]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff76 	bl	8004da0 <safeOutputPeriodValueCalculator>
 8004eb4:	60f8      	str	r0, [r7, #12]
			break;
 8004eb6:	bf00      	nop
		default:
	}
	return returnVal;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20001074 	.word	0x20001074

08004ec8 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	ed87 0a00 	vstr	s0, [r7]
 8004ed4:	71fb      	strb	r3, [r7, #7]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	71bb      	strb	r3, [r7, #6]
 8004eda:	4613      	mov	r3, r2
 8004edc:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 8004ede:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8004ee2:	79b9      	ldrb	r1, [r7, #6]
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	ed97 0a00 	vldr	s0, [r7]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ff80 	bl	8004df0 <calculateOutputPeriodValue>
 8004ef0:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d076      	beq.n	8004fe6 <PWMInitialize+0x11e>
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	dc7e      	bgt.n	8004ffa <PWMInitialize+0x132>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <PWMInitialize+0x3e>
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d04a      	beq.n	8004f9a <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 8004f04:	e079      	b.n	8004ffa <PWMInitialize+0x132>
		switch (position) {
 8004f06:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	2b06      	cmp	r3, #6
 8004f0e:	d83b      	bhi.n	8004f88 <PWMInitialize+0xc0>
 8004f10:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <PWMInitialize+0x50>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f35 	.word	0x08004f35
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f59 	.word	0x08004f59
 8004f28:	08004f65 	.word	0x08004f65
 8004f2c:	08004f71 	.word	0x08004f71
 8004f30:	08004f7d 	.word	0x08004f7d
			(*tim1).Instance->CCR1=value;
 8004f34:	4b33      	ldr	r3, [pc, #204]	@ (8005004 <PWMInitialize+0x13c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8004f3e:	e024      	b.n	8004f8a <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 8004f40:	4b30      	ldr	r3, [pc, #192]	@ (8005004 <PWMInitialize+0x13c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8004f4a:	e01e      	b.n	8004f8a <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8005004 <PWMInitialize+0x13c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8004f56:	e018      	b.n	8004f8a <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8004f58:	4b2a      	ldr	r3, [pc, #168]	@ (8005004 <PWMInitialize+0x13c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8004f62:	e012      	b.n	8004f8a <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8004f64:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <PWMInitialize+0x140>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8004f6e:	e00c      	b.n	8004f8a <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 8004f70:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <PWMInitialize+0x140>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8004f7a:	e006      	b.n	8004f8a <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8004f7c:	4b22      	ldr	r3, [pc, #136]	@ (8005008 <PWMInitialize+0x140>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8004f86:	e000      	b.n	8004f8a <PWMInitialize+0xc2>
			break;
 8004f88:	bf00      	nop
		subPeriod[position-1] = value;
 8004f8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	491e      	ldr	r1, [pc, #120]	@ (800500c <PWMInitialize+0x144>)
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8004f98:	e02e      	b.n	8004ff8 <PWMInitialize+0x130>
		switch (position) {
 8004f9a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d012      	beq.n	8004fc8 <PWMInitialize+0x100>
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	dc16      	bgt.n	8004fd4 <PWMInitialize+0x10c>
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d002      	beq.n	8004fb0 <PWMInitialize+0xe8>
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d006      	beq.n	8004fbc <PWMInitialize+0xf4>
			break;
 8004fae:	e011      	b.n	8004fd4 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8004fb0:	4b17      	ldr	r3, [pc, #92]	@ (8005010 <PWMInitialize+0x148>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8004fba:	e00c      	b.n	8004fd6 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8004fbc:	4b14      	ldr	r3, [pc, #80]	@ (8005010 <PWMInitialize+0x148>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8004fc6:	e006      	b.n	8004fd6 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8004fc8:	4b11      	ldr	r3, [pc, #68]	@ (8005010 <PWMInitialize+0x148>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8004fd2:	e000      	b.n	8004fd6 <PWMInitialize+0x10e>
			break;
 8004fd4:	bf00      	nop
		subPeriod[position+6] = value;
 8004fd6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004fda:	3306      	adds	r3, #6
 8004fdc:	490b      	ldr	r1, [pc, #44]	@ (800500c <PWMInitialize+0x144>)
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8004fe4:	e008      	b.n	8004ff8 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <PWMInitialize+0x14c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8004ff0:	4a06      	ldr	r2, [pc, #24]	@ (800500c <PWMInitialize+0x144>)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8004ff6:	bf00      	nop
	return;
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
}
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	2000102c 	.word	0x2000102c
 8005008:	20001038 	.word	0x20001038
 800500c:	20001048 	.word	0x20001048
 8005010:	20001034 	.word	0x20001034
 8005014:	20001030 	.word	0x20001030

08005018 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	6039      	str	r1, [r7, #0]
 8005022:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8005024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005028:	2b04      	cmp	r3, #4
 800502a:	dc0c      	bgt.n	8005046 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 800502c:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <MotorPositionForInitializingPeriod+0x54>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8005036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503a:	3b01      	subs	r3, #1
 800503c:	490c      	ldr	r1, [pc, #48]	@ (8005070 <MotorPositionForInitializingPeriod+0x58>)
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8005044:	e00b      	b.n	800505e <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8005046:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <MotorPositionForInitializingPeriod+0x5c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	3b01      	subs	r3, #1
 8005056:	4906      	ldr	r1, [pc, #24]	@ (8005070 <MotorPositionForInitializingPeriod+0x58>)
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	2000102c 	.word	0x2000102c
 8005070:	20001074 	.word	0x20001074
 8005074:	20001038 	.word	0x20001038

08005078 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	603a      	str	r2, [r7, #0]
 8005082:	71fb      	strb	r3, [r7, #7]
 8005084:	460b      	mov	r3, r1
 8005086:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fe31 	bl	8004cf4 <calculateOutputPeriodToGetFrequency>
 8005092:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d01a      	beq.n	80050d0 <initializePeriod+0x58>
 800509a:	2b02      	cmp	r3, #2
 800509c:	dc22      	bgt.n	80050e4 <initializePeriod+0x6c>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <initializePeriod+0x30>
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d007      	beq.n	80050b6 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 80050a6:	e01d      	b.n	80050e4 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 80050a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80050ac:	68f9      	ldr	r1, [r7, #12]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffb2 	bl	8005018 <MotorPositionForInitializingPeriod>
		break;
 80050b4:	e015      	b.n	80050e2 <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 80050b6:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <initializePeriod+0x74>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 80050c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80050c4:	3306      	adds	r3, #6
 80050c6:	490a      	ldr	r1, [pc, #40]	@ (80050f0 <initializePeriod+0x78>)
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80050ce:	e008      	b.n	80050e2 <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 80050d0:	4b08      	ldr	r3, [pc, #32]	@ (80050f4 <initializePeriod+0x7c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 80050da:	4a05      	ldr	r2, [pc, #20]	@ (80050f0 <initializePeriod+0x78>)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 80050e0:	bf00      	nop
	return;
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
}
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20001034 	.word	0x20001034
 80050f0:	20001074 	.word	0x20001074
 80050f4:	20001030 	.word	0x20001030

080050f8 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	603a      	str	r2, [r7, #0]
 8005102:	71fb      	strb	r3, [r7, #7]
 8005104:	460b      	mov	r3, r1
 8005106:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8005108:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ffb1 	bl	8005078 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d014      	beq.n	8005146 <PWMOutput+0x4e>
 800511c:	2b02      	cmp	r3, #2
 800511e:	dc16      	bgt.n	800514e <PWMOutput+0x56>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <PWMOutput+0x32>
 8005124:	2b01      	cmp	r3, #1
 8005126:	d007      	beq.n	8005138 <PWMOutput+0x40>
 8005128:	e011      	b.n	800514e <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 800512a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800512e:	3b01      	subs	r3, #1
 8005130:	4a08      	ldr	r2, [pc, #32]	@ (8005154 <PWMOutput+0x5c>)
 8005132:	2101      	movs	r1, #1
 8005134:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005136:	e00a      	b.n	800514e <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8005138:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800513c:	3306      	adds	r3, #6
 800513e:	4a05      	ldr	r2, [pc, #20]	@ (8005154 <PWMOutput+0x5c>)
 8005140:	2101      	movs	r1, #1
 8005142:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005144:	e003      	b.n	800514e <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8005146:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <PWMOutput+0x5c>)
 8005148:	2201      	movs	r2, #1
 800514a:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 800514c:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2000103c 	.word	0x2000103c

08005158 <PWMOn>:

void PWMOn(TypesThatUsePWM_t Type, int8_t Position) {
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	460a      	mov	r2, r1
 8005162:	71fb      	strb	r3, [r7, #7]
 8005164:	4613      	mov	r3, r2
 8005166:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d014      	beq.n	8005198 <PWMOn+0x40>
 800516e:	2b02      	cmp	r3, #2
 8005170:	dc16      	bgt.n	80051a0 <PWMOn+0x48>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <PWMOn+0x24>
 8005176:	2b01      	cmp	r3, #1
 8005178:	d007      	beq.n	800518a <PWMOn+0x32>
 800517a:	e011      	b.n	80051a0 <PWMOn+0x48>
	case 0:
		whichPWMisOn[Position-1] = 1;
 800517c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005180:	3b01      	subs	r3, #1
 8005182:	4a0a      	ldr	r2, [pc, #40]	@ (80051ac <PWMOn+0x54>)
 8005184:	2101      	movs	r1, #1
 8005186:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005188:	e00a      	b.n	80051a0 <PWMOn+0x48>
	case 1:
		whichPWMisOn[Position+6] = 1;
 800518a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800518e:	3306      	adds	r3, #6
 8005190:	4a06      	ldr	r2, [pc, #24]	@ (80051ac <PWMOn+0x54>)
 8005192:	2101      	movs	r1, #1
 8005194:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005196:	e003      	b.n	80051a0 <PWMOn+0x48>
	case 2:
		whichPWMisOn[10] = 1;
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <PWMOn+0x54>)
 800519a:	2201      	movs	r2, #1
 800519c:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 800519e:	bf00      	nop
	}
}
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	2000103c 	.word	0x2000103c

080051b0 <PWMOff>:

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	460a      	mov	r2, r1
 80051ba:	71fb      	strb	r3, [r7, #7]
 80051bc:	4613      	mov	r3, r2
 80051be:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d014      	beq.n	80051f0 <PWMOff+0x40>
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	dc16      	bgt.n	80051f8 <PWMOff+0x48>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <PWMOff+0x24>
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d007      	beq.n	80051e2 <PWMOff+0x32>
 80051d2:	e011      	b.n	80051f8 <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 80051d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80051d8:	3b01      	subs	r3, #1
 80051da:	4a0a      	ldr	r2, [pc, #40]	@ (8005204 <PWMOff+0x54>)
 80051dc:	2100      	movs	r1, #0
 80051de:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 80051e0:	e00a      	b.n	80051f8 <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 80051e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80051e6:	3306      	adds	r3, #6
 80051e8:	4a06      	ldr	r2, [pc, #24]	@ (8005204 <PWMOff+0x54>)
 80051ea:	2100      	movs	r1, #0
 80051ec:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 80051ee:	e003      	b.n	80051f8 <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 80051f0:	4b04      	ldr	r3, [pc, #16]	@ (8005204 <PWMOff+0x54>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 80051f6:	bf00      	nop
	}
}
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	2000103c 	.word	0x2000103c

08005208 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e0f1      	b.n	80053f8 <PWMTimerStarter+0x1f0>
		switch (i) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b0a      	cmp	r3, #10
 8005218:	f200 80eb 	bhi.w	80053f2 <PWMTimerStarter+0x1ea>
 800521c:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <PWMTimerStarter+0x1c>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005251 	.word	0x08005251
 8005228:	08005277 	.word	0x08005277
 800522c:	0800529d 	.word	0x0800529d
 8005230:	080052c3 	.word	0x080052c3
 8005234:	080052e9 	.word	0x080052e9
 8005238:	0800530f 	.word	0x0800530f
 800523c:	08005335 	.word	0x08005335
 8005240:	0800535b 	.word	0x0800535b
 8005244:	08005381 	.word	0x08005381
 8005248:	080053a7 	.word	0x080053a7
 800524c:	080053cd 	.word	0x080053cd
		case 0:
			if (whichPWMisOn[0] == 1) {
 8005250:	4b6e      	ldr	r3, [pc, #440]	@ (800540c <PWMTimerStarter+0x204>)
 8005252:	f993 3000 	ldrsb.w	r3, [r3]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d106      	bne.n	8005268 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800525a:	4b6d      	ldr	r3, [pc, #436]	@ (8005410 <PWMTimerStarter+0x208>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f005 f917 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8005266:	e0c4      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8005268:	4b69      	ldr	r3, [pc, #420]	@ (8005410 <PWMTimerStarter+0x208>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f005 f9d8 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 8005274:	e0bd      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8005276:	4b65      	ldr	r3, [pc, #404]	@ (800540c <PWMTimerStarter+0x204>)
 8005278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d106      	bne.n	800528e <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8005280:	4b63      	ldr	r3, [pc, #396]	@ (8005410 <PWMTimerStarter+0x208>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2104      	movs	r1, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f005 f904 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 800528c:	e0b1      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 800528e:	4b60      	ldr	r3, [pc, #384]	@ (8005410 <PWMTimerStarter+0x208>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2104      	movs	r1, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f005 f9c5 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 800529a:	e0aa      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 800529c:	4b5b      	ldr	r3, [pc, #364]	@ (800540c <PWMTimerStarter+0x204>)
 800529e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d106      	bne.n	80052b4 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 80052a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005410 <PWMTimerStarter+0x208>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2108      	movs	r1, #8
 80052ac:	4618      	mov	r0, r3
 80052ae:	f005 f8f1 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 80052b2:	e09e      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 80052b4:	4b56      	ldr	r3, [pc, #344]	@ (8005410 <PWMTimerStarter+0x208>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2108      	movs	r1, #8
 80052ba:	4618      	mov	r0, r3
 80052bc:	f005 f9b2 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 80052c0:	e097      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 80052c2:	4b52      	ldr	r3, [pc, #328]	@ (800540c <PWMTimerStarter+0x204>)
 80052c4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d106      	bne.n	80052da <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80052cc:	4b50      	ldr	r3, [pc, #320]	@ (8005410 <PWMTimerStarter+0x208>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	210c      	movs	r1, #12
 80052d2:	4618      	mov	r0, r3
 80052d4:	f005 f8de 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80052d8:	e08b      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80052da:	4b4d      	ldr	r3, [pc, #308]	@ (8005410 <PWMTimerStarter+0x208>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	210c      	movs	r1, #12
 80052e0:	4618      	mov	r0, r3
 80052e2:	f005 f99f 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 80052e6:	e084      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 80052e8:	4b48      	ldr	r3, [pc, #288]	@ (800540c <PWMTimerStarter+0x204>)
 80052ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d106      	bne.n	8005300 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 80052f2:	4b48      	ldr	r3, [pc, #288]	@ (8005414 <PWMTimerStarter+0x20c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f005 f8cb 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 80052fe:	e078      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8005300:	4b44      	ldr	r3, [pc, #272]	@ (8005414 <PWMTimerStarter+0x20c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2100      	movs	r1, #0
 8005306:	4618      	mov	r0, r3
 8005308:	f005 f98c 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 800530c:	e071      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 800530e:	4b3f      	ldr	r3, [pc, #252]	@ (800540c <PWMTimerStarter+0x204>)
 8005310:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8005318:	4b3e      	ldr	r3, [pc, #248]	@ (8005414 <PWMTimerStarter+0x20c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2104      	movs	r1, #4
 800531e:	4618      	mov	r0, r3
 8005320:	f005 f8b8 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8005324:	e065      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8005326:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <PWMTimerStarter+0x20c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2104      	movs	r1, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f005 f979 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 8005332:	e05e      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8005334:	4b35      	ldr	r3, [pc, #212]	@ (800540c <PWMTimerStarter+0x204>)
 8005336:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d106      	bne.n	800534c <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 800533e:	4b35      	ldr	r3, [pc, #212]	@ (8005414 <PWMTimerStarter+0x20c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2108      	movs	r1, #8
 8005344:	4618      	mov	r0, r3
 8005346:	f005 f8a5 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 800534a:	e052      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 800534c:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <PWMTimerStarter+0x20c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2108      	movs	r1, #8
 8005352:	4618      	mov	r0, r3
 8005354:	f005 f966 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 8005358:	e04b      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 800535a:	4b2c      	ldr	r3, [pc, #176]	@ (800540c <PWMTimerStarter+0x204>)
 800535c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d106      	bne.n	8005372 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8005364:	4b2c      	ldr	r3, [pc, #176]	@ (8005418 <PWMTimerStarter+0x210>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f005 f892 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8005370:	e03f      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8005372:	4b29      	ldr	r3, [pc, #164]	@ (8005418 <PWMTimerStarter+0x210>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f005 f953 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 800537e:	e038      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8005380:	4b22      	ldr	r3, [pc, #136]	@ (800540c <PWMTimerStarter+0x204>)
 8005382:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d106      	bne.n	8005398 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800538a:	4b23      	ldr	r3, [pc, #140]	@ (8005418 <PWMTimerStarter+0x210>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2104      	movs	r1, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f005 f87f 	bl	800a494 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8005396:	e02c      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8005398:	4b1f      	ldr	r3, [pc, #124]	@ (8005418 <PWMTimerStarter+0x210>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2104      	movs	r1, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f005 f940 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 80053a4:	e025      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 80053a6:	4b19      	ldr	r3, [pc, #100]	@ (800540c <PWMTimerStarter+0x204>)
 80053a8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d106      	bne.n	80053be <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 80053b0:	4b19      	ldr	r3, [pc, #100]	@ (8005418 <PWMTimerStarter+0x210>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2108      	movs	r1, #8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f005 f86c 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 80053bc:	e019      	b.n	80053f2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 80053be:	4b16      	ldr	r3, [pc, #88]	@ (8005418 <PWMTimerStarter+0x210>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2108      	movs	r1, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f005 f92d 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 80053ca:	e012      	b.n	80053f2 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 80053cc:	4b0f      	ldr	r3, [pc, #60]	@ (800540c <PWMTimerStarter+0x204>)
 80053ce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d106      	bne.n	80053e4 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 80053d6:	4b11      	ldr	r3, [pc, #68]	@ (800541c <PWMTimerStarter+0x214>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2108      	movs	r1, #8
 80053dc:	4618      	mov	r0, r3
 80053de:	f005 f859 	bl	800a494 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 80053e2:	e005      	b.n	80053f0 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 80053e4:	4b0d      	ldr	r3, [pc, #52]	@ (800541c <PWMTimerStarter+0x214>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2108      	movs	r1, #8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f005 f91a 	bl	800a624 <HAL_TIM_PWM_Stop>
			break;
 80053f0:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3301      	adds	r3, #1
 80053f6:	607b      	str	r3, [r7, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b0a      	cmp	r3, #10
 80053fc:	f77f af0a 	ble.w	8005214 <PWMTimerStarter+0xc>
		}
	}
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	2000103c 	.word	0x2000103c
 8005410:	2000102c 	.word	0x2000102c
 8005414:	20001038 	.word	0x20001038
 8005418:	20001034 	.word	0x20001034
 800541c:	20001030 	.word	0x20001030

08005420 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8005424:	2224      	movs	r2, #36	@ 0x24
 8005426:	4903      	ldr	r1, [pc, #12]	@ (8005434 <remote_control_init+0x14>)
 8005428:	4803      	ldr	r0, [pc, #12]	@ (8005438 <remote_control_init+0x18>)
 800542a:	f7fd fb8f 	bl	8002b4c <RC_init>
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200010dc 	.word	0x200010dc
 8005438:	200010b8 	.word	0x200010b8

0800543c <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8005440:	4b02      	ldr	r3, [pc, #8]	@ (800544c <get_remote_control_point+0x10>)
}
 8005442:	4618      	mov	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	200010a0 	.word	0x200010a0

08005450 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8005456:	4b44      	ldr	r3, [pc, #272]	@ (8005568 <USART3_IRQHandler+0x118>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00b      	beq.n	800547c <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005464:	2300      	movs	r3, #0
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	4b3f      	ldr	r3, [pc, #252]	@ (8005568 <USART3_IRQHandler+0x118>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	4b3d      	ldr	r3, [pc, #244]	@ (8005568 <USART3_IRQHandler+0x118>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 800547a:	e070      	b.n	800555e <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 800547c:	4b3b      	ldr	r3, [pc, #236]	@ (800556c <USART3_IRQHandler+0x11c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	d06a      	beq.n	800555e <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005488:	2300      	movs	r3, #0
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <USART3_IRQHandler+0x118>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4b34      	ldr	r3, [pc, #208]	@ (8005568 <USART3_IRQHandler+0x118>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 800549e:	4b34      	ldr	r3, [pc, #208]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d12d      	bne.n	8005508 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80054ac:	4b30      	ldr	r3, [pc, #192]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80054bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005574 <USART3_IRQHandler+0x124>)
 80054cc:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80054ce:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2224      	movs	r2, #36	@ 0x24
 80054d4:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 80054d6:	4b26      	ldr	r3, [pc, #152]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b24      	ldr	r3, [pc, #144]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80054e4:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80054e6:	4b22      	ldr	r3, [pc, #136]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b20      	ldr	r3, [pc, #128]	@ (8005570 <USART3_IRQHandler+0x120>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 80054f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005574 <USART3_IRQHandler+0x124>)
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	2b12      	cmp	r3, #18
 80054fc:	d12f      	bne.n	800555e <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 80054fe:	491e      	ldr	r1, [pc, #120]	@ (8005578 <USART3_IRQHandler+0x128>)
 8005500:	481e      	ldr	r0, [pc, #120]	@ (800557c <USART3_IRQHandler+0x12c>)
 8005502:	f000 f841 	bl	8005588 <sbus_to_rc>
}
 8005506:	e02a      	b.n	800555e <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8005508:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <USART3_IRQHandler+0x120>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b18      	ldr	r3, [pc, #96]	@ (8005570 <USART3_IRQHandler+0x120>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8005518:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <USART3_IRQHandler+0x120>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005524:	b29a      	uxth	r2, r3
 8005526:	4b13      	ldr	r3, [pc, #76]	@ (8005574 <USART3_IRQHandler+0x124>)
 8005528:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 800552a:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <USART3_IRQHandler+0x120>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2224      	movs	r2, #36	@ 0x24
 8005530:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8005532:	4b13      	ldr	r3, [pc, #76]	@ (8005580 <USART3_IRQHandler+0x130>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a12      	ldr	r2, [pc, #72]	@ (8005580 <USART3_IRQHandler+0x130>)
 8005538:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800553c:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800553e:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <USART3_IRQHandler+0x120>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <USART3_IRQHandler+0x120>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0201 	orr.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 800554e:	4b09      	ldr	r3, [pc, #36]	@ (8005574 <USART3_IRQHandler+0x124>)
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	2b12      	cmp	r3, #18
 8005554:	d103      	bne.n	800555e <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8005556:	4908      	ldr	r1, [pc, #32]	@ (8005578 <USART3_IRQHandler+0x128>)
 8005558:	480a      	ldr	r0, [pc, #40]	@ (8005584 <USART3_IRQHandler+0x134>)
 800555a:	f000 f815 	bl	8005588 <sbus_to_rc>
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000da4 	.word	0x20000da4
 800556c:	40004800 	.word	0x40004800
 8005570:	20000ef4 	.word	0x20000ef4
 8005574:	20001100 	.word	0x20001100
 8005578:	200010a0 	.word	0x200010a0
 800557c:	200010b8 	.word	0x200010b8
 8005580:	40026028 	.word	0x40026028
 8005584:	200010dc 	.word	0x200010dc

08005588 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8101 	beq.w	800579c <sbus_to_rc+0x214>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 80fd 	beq.w	800579c <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	b21a      	sxth	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3301      	adds	r3, #1
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	4313      	orrs	r3, r2
 80055b8:	b21b      	sxth	r3, r3
 80055ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055be:	b21a      	sxth	r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	08db      	lsrs	r3, r3, #3
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	b21a      	sxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3302      	adds	r3, #2
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	015b      	lsls	r3, r3, #5
 80055dc:	b21b      	sxth	r3, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055e6:	b21a      	sxth	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3302      	adds	r3, #2
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	b21a      	sxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3303      	adds	r3, #3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	b21b      	sxth	r3, r3
 8005606:	4313      	orrs	r3, r2
 8005608:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005614:	b21b      	sxth	r3, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800561a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800561e:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	b2db      	uxtb	r3, r3
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	b21a      	sxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3305      	adds	r3, #5
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	01db      	lsls	r3, r3, #7
 800563c:	b21b      	sxth	r3, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	b21b      	sxth	r3, r3
 8005642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005646:	b21a      	sxth	r2, r3
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3305      	adds	r3, #5
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	b2da      	uxtb	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3305      	adds	r3, #5
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	b2db      	uxtb	r3, r3
 800566e:	109b      	asrs	r3, r3, #2
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	b2da      	uxtb	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3306      	adds	r3, #6
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	b21a      	sxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3307      	adds	r3, #7
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	b21b      	sxth	r3, r3
 8005692:	4313      	orrs	r3, r2
 8005694:	b21a      	sxth	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3308      	adds	r3, #8
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	b21a      	sxth	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3309      	adds	r3, #9
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	b21b      	sxth	r3, r3
 80056b0:	4313      	orrs	r3, r2
 80056b2:	b21a      	sxth	r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	330a      	adds	r3, #10
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	b21a      	sxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	330b      	adds	r3, #11
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	b21b      	sxth	r3, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	b21a      	sxth	r2, r3
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	330c      	adds	r3, #12
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	330d      	adds	r3, #13
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	330e      	adds	r3, #14
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	b21a      	sxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	330f      	adds	r3, #15
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	b21b      	sxth	r3, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	b21b      	sxth	r3, r3
 8005708:	b29a      	uxth	r2, r3
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3310      	adds	r3, #16
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	b21a      	sxth	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3311      	adds	r3, #17
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	b21b      	sxth	r3, r3
 8005724:	4313      	orrs	r3, r2
 8005726:	b21a      	sxth	r2, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005732:	b21b      	sxth	r3, r3
 8005734:	b29b      	uxth	r3, r3
 8005736:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800573a:	b29b      	uxth	r3, r3
 800573c:	b21a      	sxth	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005748:	b21b      	sxth	r3, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005750:	b29b      	uxth	r3, r3
 8005752:	b21a      	sxth	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800575e:	b21b      	sxth	r3, r3
 8005760:	b29b      	uxth	r3, r3
 8005762:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005766:	b29b      	uxth	r3, r3
 8005768:	b21a      	sxth	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005774:	b21b      	sxth	r3, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800577c:	b29b      	uxth	r3, r3
 800577e:	b21a      	sxth	r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800578a:	b21b      	sxth	r3, r3
 800578c:	b29b      	uxth	r3, r3
 800578e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005792:	b29b      	uxth	r3, r3
 8005794:	b21a      	sxth	r2, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	811a      	strh	r2, [r3, #8]
 800579a:	e000      	b.n	800579e <sbus_to_rc+0x216>
        return;
 800579c:	bf00      	nop
}
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 80057b2:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <getRCchannel+0x24>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80057ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80057be:	b21b      	sxth	r3, r3
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	2000009c 	.word	0x2000009c

080057d0 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 80057da:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <getRCswitch+0x24>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	4413      	add	r3, r2
 80057e4:	7a9b      	ldrb	r3, [r3, #10]
 80057e6:	b25b      	sxtb	r3, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	2000009c 	.word	0x2000009c

080057f8 <CountryRoadsNotes>:
	songProgress = 0;
	timeTracker = 0;
	noteTracker = 0;
}

uint32_t CountryRoadsNotes() {
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	if (timeTracker > countryRoadsRests[noteTracker]) {
 80057fc:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <CountryRoadsNotes+0x60>)
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	4b16      	ldr	r3, [pc, #88]	@ (800585c <CountryRoadsNotes+0x64>)
 8005804:	5c9b      	ldrb	r3, [r3, r2]
 8005806:	461a      	mov	r2, r3
 8005808:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <CountryRoadsNotes+0x68>)
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d208      	bcs.n	8005822 <CountryRoadsNotes+0x2a>
		noteTracker++;
 8005810:	4b11      	ldr	r3, [pc, #68]	@ (8005858 <CountryRoadsNotes+0x60>)
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <CountryRoadsNotes+0x60>)
 800581a:	801a      	strh	r2, [r3, #0]
		timeTracker = 0;
 800581c:	4b10      	ldr	r3, [pc, #64]	@ (8005860 <CountryRoadsNotes+0x68>)
 800581e:	2200      	movs	r2, #0
 8005820:	801a      	strh	r2, [r3, #0]
	}

	if (noteTracker > 36) {
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <CountryRoadsNotes+0x60>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	2b24      	cmp	r3, #36	@ 0x24
 8005828:	d902      	bls.n	8005830 <CountryRoadsNotes+0x38>
		noteTracker = 0;
 800582a:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <CountryRoadsNotes+0x60>)
 800582c:	2200      	movs	r2, #0
 800582e:	801a      	strh	r2, [r3, #0]
	}
	// usart_printf();
	// PWMOutput(Buzzer, 1, frequenciesAtA4[NeverGoingToGiveYouUpNotes[noteTracker]]);

	timeTracker++;
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <CountryRoadsNotes+0x68>)
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <CountryRoadsNotes+0x68>)
 800583a:	801a      	strh	r2, [r3, #0]

	return  frequencyMotor[countryRoadsNotes[noteTracker]];
 800583c:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <CountryRoadsNotes+0x60>)
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <CountryRoadsNotes+0x6c>)
 8005844:	5c9b      	ldrb	r3, [r3, r2]
 8005846:	461a      	mov	r2, r3
 8005848:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <CountryRoadsNotes+0x70>)
 800584a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800584e:	4618      	mov	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	20001104 	.word	0x20001104
 800585c:	200000f4 	.word	0x200000f4
 8005860:	20001102 	.word	0x20001102
 8005864:	200000cc 	.word	0x200000cc
 8005868:	200000a0 	.word	0x200000a0

0800586c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005872:	2300      	movs	r3, #0
 8005874:	607b      	str	r3, [r7, #4]
 8005876:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <HAL_MspInit+0x54>)
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <HAL_MspInit+0x54>)
 800587c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005880:	6453      	str	r3, [r2, #68]	@ 0x44
 8005882:	4b0f      	ldr	r3, [pc, #60]	@ (80058c0 <HAL_MspInit+0x54>)
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800588a:	607b      	str	r3, [r7, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <HAL_MspInit+0x54>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	4a0a      	ldr	r2, [pc, #40]	@ (80058c0 <HAL_MspInit+0x54>)
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589c:	6413      	str	r3, [r2, #64]	@ 0x40
 800589e:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <HAL_MspInit+0x54>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80058aa:	2200      	movs	r2, #0
 80058ac:	210f      	movs	r1, #15
 80058ae:	f06f 0001 	mvn.w	r0, #1
 80058b2:	f001 ff28 	bl	8007706 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023800 	.word	0x40023800

080058c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	@ 0x30
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058cc:	f107 031c 	add.w	r3, r7, #28
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a4a      	ldr	r2, [pc, #296]	@ (8005a0c <HAL_CAN_MspInit+0x148>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d13d      	bne.n	8005962 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80058e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a10 <HAL_CAN_MspInit+0x14c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a48      	ldr	r2, [pc, #288]	@ (8005a10 <HAL_CAN_MspInit+0x14c>)
 80058ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80058f0:	4b47      	ldr	r3, [pc, #284]	@ (8005a10 <HAL_CAN_MspInit+0x14c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d10d      	bne.n	8005914 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	4b45      	ldr	r3, [pc, #276]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	4a44      	ldr	r2, [pc, #272]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 8005902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005906:	6413      	str	r3, [r2, #64]	@ 0x40
 8005908:	4b42      	ldr	r3, [pc, #264]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005914:	2300      	movs	r3, #0
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	4b3e      	ldr	r3, [pc, #248]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591c:	4a3d      	ldr	r2, [pc, #244]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 800591e:	f043 0308 	orr.w	r3, r3, #8
 8005922:	6313      	str	r3, [r2, #48]	@ 0x30
 8005924:	4b3b      	ldr	r3, [pc, #236]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005930:	2303      	movs	r3, #3
 8005932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005934:	2302      	movs	r3, #2
 8005936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005938:	2300      	movs	r3, #0
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800593c:	2303      	movs	r3, #3
 800593e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005940:	2309      	movs	r3, #9
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005944:	f107 031c 	add.w	r3, r7, #28
 8005948:	4619      	mov	r1, r3
 800594a:	4833      	ldr	r0, [pc, #204]	@ (8005a18 <HAL_CAN_MspInit+0x154>)
 800594c:	f002 fb14 	bl	8007f78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005950:	2200      	movs	r2, #0
 8005952:	2105      	movs	r1, #5
 8005954:	2014      	movs	r0, #20
 8005956:	f001 fed6 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800595a:	2014      	movs	r0, #20
 800595c:	f001 feef 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8005960:	e04f      	b.n	8005a02 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2d      	ldr	r2, [pc, #180]	@ (8005a1c <HAL_CAN_MspInit+0x158>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d14a      	bne.n	8005a02 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800596c:	2300      	movs	r3, #0
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	4b28      	ldr	r3, [pc, #160]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	4a27      	ldr	r2, [pc, #156]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 8005976:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800597a:	6413      	str	r3, [r2, #64]	@ 0x40
 800597c:	4b25      	ldr	r3, [pc, #148]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 800597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005988:	4b21      	ldr	r3, [pc, #132]	@ (8005a10 <HAL_CAN_MspInit+0x14c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	4a20      	ldr	r2, [pc, #128]	@ (8005a10 <HAL_CAN_MspInit+0x14c>)
 8005990:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005992:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <HAL_CAN_MspInit+0x14c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d10d      	bne.n	80059b6 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 80059a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80059c6:	4b13      	ldr	r3, [pc, #76]	@ (8005a14 <HAL_CAN_MspInit+0x150>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80059d2:	2360      	movs	r3, #96	@ 0x60
 80059d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d6:	2302      	movs	r3, #2
 80059d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059de:	2303      	movs	r3, #3
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80059e2:	2309      	movs	r3, #9
 80059e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e6:	f107 031c 	add.w	r3, r7, #28
 80059ea:	4619      	mov	r1, r3
 80059ec:	480c      	ldr	r0, [pc, #48]	@ (8005a20 <HAL_CAN_MspInit+0x15c>)
 80059ee:	f002 fac3 	bl	8007f78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2105      	movs	r1, #5
 80059f6:	2040      	movs	r0, #64	@ 0x40
 80059f8:	f001 fe85 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80059fc:	2040      	movs	r0, #64	@ 0x40
 80059fe:	f001 fe9e 	bl	800773e <HAL_NVIC_EnableIRQ>
}
 8005a02:	bf00      	nop
 8005a04:	3730      	adds	r7, #48	@ 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40006400 	.word	0x40006400
 8005a10:	20001108 	.word	0x20001108
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40020c00 	.word	0x40020c00
 8005a1c:	40006800 	.word	0x40006800
 8005a20:	40020400 	.word	0x40020400

08005a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	@ 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a2c:	f107 0314 	add.w	r3, r7, #20
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	609a      	str	r2, [r3, #8]
 8005a38:	60da      	str	r2, [r3, #12]
 8005a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a29      	ldr	r2, [pc, #164]	@ (8005ae8 <HAL_I2C_MspInit+0xc4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d14b      	bne.n	8005ade <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	4b28      	ldr	r3, [pc, #160]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4e:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a56:	4b25      	ldr	r3, [pc, #148]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	4b21      	ldr	r3, [pc, #132]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6a:	4a20      	ldr	r2, [pc, #128]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a72:	4b1e      	ldr	r3, [pc, #120]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a84:	2312      	movs	r3, #18
 8005a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005a90:	2304      	movs	r3, #4
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4815      	ldr	r0, [pc, #84]	@ (8005af0 <HAL_I2C_MspInit+0xcc>)
 8005a9c:	f002 fa6c 	bl	8007f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005aa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005aa6:	2312      	movs	r3, #18
 8005aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab6:	f107 0314 	add.w	r3, r7, #20
 8005aba:	4619      	mov	r1, r3
 8005abc:	480d      	ldr	r0, [pc, #52]	@ (8005af4 <HAL_I2C_MspInit+0xd0>)
 8005abe:	f002 fa5b 	bl	8007f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	4b09      	ldr	r3, [pc, #36]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005acc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ad2:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <HAL_I2C_MspInit+0xc8>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	@ 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40005c00 	.word	0x40005c00
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40020800 	.word	0x40020800
 8005af4:	40020000 	.word	0x40020000

08005af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	@ 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a28      	ldr	r2, [pc, #160]	@ (8005bb8 <HAL_SPI_MspInit+0xc0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d149      	bne.n	8005bae <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	4b27      	ldr	r3, [pc, #156]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	4a26      	ldr	r2, [pc, #152]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b2a:	4b24      	ldr	r3, [pc, #144]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b40:	f043 0302 	orr.w	r3, r3, #2
 8005b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b46:	4b1d      	ldr	r3, [pc, #116]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	4b19      	ldr	r3, [pc, #100]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b62:	4b16      	ldr	r3, [pc, #88]	@ (8005bbc <HAL_SPI_MspInit+0xc4>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8005b6e:	2318      	movs	r3, #24
 8005b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b72:	2302      	movs	r3, #2
 8005b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b7e:	2305      	movs	r3, #5
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b82:	f107 0314 	add.w	r3, r7, #20
 8005b86:	4619      	mov	r1, r3
 8005b88:	480d      	ldr	r0, [pc, #52]	@ (8005bc0 <HAL_SPI_MspInit+0xc8>)
 8005b8a:	f002 f9f5 	bl	8007f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005b8e:	2380      	movs	r3, #128	@ 0x80
 8005b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b92:	2302      	movs	r3, #2
 8005b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b9e:	2305      	movs	r3, #5
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4806      	ldr	r0, [pc, #24]	@ (8005bc4 <HAL_SPI_MspInit+0xcc>)
 8005baa:	f002 f9e5 	bl	8007f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005bae:	bf00      	nop
 8005bb0:	3728      	adds	r7, #40	@ 0x28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40013000 	.word	0x40013000
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40020400 	.word	0x40020400
 8005bc4:	40020000 	.word	0x40020000

08005bc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8005d10 <HAL_TIM_PWM_MspInit+0x148>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	4b4d      	ldr	r3, [pc, #308]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	4a4c      	ldr	r2, [pc, #304]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bea:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005bf6:	e086      	b.n	8005d06 <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a46      	ldr	r2, [pc, #280]	@ (8005d18 <HAL_TIM_PWM_MspInit+0x150>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d16e      	bne.n	8005ce0 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	4b43      	ldr	r3, [pc, #268]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	4a42      	ldr	r2, [pc, #264]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005c0c:	f043 0308 	orr.w	r3, r3, #8
 8005c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c12:	4b40      	ldr	r3, [pc, #256]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8005c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c20:	4a3f      	ldr	r2, [pc, #252]	@ (8005d20 <HAL_TIM_PWM_MspInit+0x158>)
 8005c22:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8005c24:	4b3d      	ldr	r3, [pc, #244]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c26:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8005c2a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c32:	4b3a      	ldr	r3, [pc, #232]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005c38:	4b38      	ldr	r3, [pc, #224]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c3e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005c40:	4b36      	ldr	r3, [pc, #216]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005c46:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005c48:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005c4e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8005c50:	4b32      	ldr	r3, [pc, #200]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005c56:	4b31      	ldr	r3, [pc, #196]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8005c62:	482e      	ldr	r0, [pc, #184]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c64:	f001 fd86 	bl	8007774 <HAL_DMA_Init>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8005c6e:	f7fe fe67 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a29      	ldr	r2, [pc, #164]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c76:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c78:	4a28      	ldr	r2, [pc, #160]	@ (8005d1c <HAL_TIM_PWM_MspInit+0x154>)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8005c7e:	4b29      	ldr	r3, [pc, #164]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005c80:	4a29      	ldr	r2, [pc, #164]	@ (8005d28 <HAL_TIM_PWM_MspInit+0x160>)
 8005c82:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8005c84:	4b27      	ldr	r3, [pc, #156]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005c86:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8005c8a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c8c:	4b25      	ldr	r3, [pc, #148]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c92:	4b24      	ldr	r3, [pc, #144]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005c98:	4b22      	ldr	r3, [pc, #136]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c9e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005ca0:	4b20      	ldr	r3, [pc, #128]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005ca2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005ca6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005caa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005cae:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8005cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cbc:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8005cc2:	4818      	ldr	r0, [pc, #96]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005cc4:	f001 fd56 	bl	8007774 <HAL_DMA_Init>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8005cce:	f7fe fe37 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005cd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cd8:	4a12      	ldr	r2, [pc, #72]	@ (8005d24 <HAL_TIM_PWM_MspInit+0x15c>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005cde:	e012      	b.n	8005d06 <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a11      	ldr	r2, [pc, #68]	@ (8005d2c <HAL_TIM_PWM_MspInit+0x164>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10d      	bne.n	8005d06 <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005cea:	2300      	movs	r3, #0
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	4a08      	ldr	r2, [pc, #32]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005cf4:	f043 0302 	orr.w	r3, r3, #2
 8005cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cfa:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_TIM_PWM_MspInit+0x14c>)
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
}
 8005d06:	bf00      	nop
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40023800 	.word	0x40023800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	20000c9c 	.word	0x20000c9c
 8005d20:	40026040 	.word	0x40026040
 8005d24:	20000cfc 	.word	0x20000cfc
 8005d28:	40026070 	.word	0x40026070
 8005d2c:	40010400 	.word	0x40010400

08005d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <HAL_TIM_Base_MspInit+0xc0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d13e      	bne.n	8005dc0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <HAL_TIM_Base_MspInit+0xc4>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005df4 <HAL_TIM_Base_MspInit+0xc4>)
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d52:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <HAL_TIM_Base_MspInit+0xc4>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8005d5e:	4b26      	ldr	r3, [pc, #152]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d60:	4a26      	ldr	r2, [pc, #152]	@ (8005dfc <HAL_TIM_Base_MspInit+0xcc>)
 8005d62:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8005d64:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d66:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005d6a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d6c:	4b22      	ldr	r3, [pc, #136]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d72:	4b21      	ldr	r3, [pc, #132]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005d78:	4b1f      	ldr	r3, [pc, #124]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d7e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d86:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d88:	4b1b      	ldr	r3, [pc, #108]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d8e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8005d90:	4b19      	ldr	r3, [pc, #100]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005d96:	4b18      	ldr	r3, [pc, #96]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d9c:	4b16      	ldr	r3, [pc, #88]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8005da2:	4815      	ldr	r0, [pc, #84]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005da4:	f001 fce6 	bl	8007774 <HAL_DMA_Init>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8005dae:	f7fe fdc7 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a10      	ldr	r2, [pc, #64]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005db6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005db8:	4a0f      	ldr	r2, [pc, #60]	@ (8005df8 <HAL_TIM_Base_MspInit+0xc8>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005dbe:	e012      	b.n	8005de6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8005e00 <HAL_TIM_Base_MspInit+0xd0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10d      	bne.n	8005de6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	4b09      	ldr	r3, [pc, #36]	@ (8005df4 <HAL_TIM_Base_MspInit+0xc4>)
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	4a08      	ldr	r2, [pc, #32]	@ (8005df4 <HAL_TIM_Base_MspInit+0xc4>)
 8005dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dda:	4b06      	ldr	r3, [pc, #24]	@ (8005df4 <HAL_TIM_Base_MspInit+0xc4>)
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	68bb      	ldr	r3, [r7, #8]
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40023800 	.word	0x40023800
 8005df8:	20000c3c 	.word	0x20000c3c
 8005dfc:	400260b8 	.word	0x400260b8
 8005e00:	40014400 	.word	0x40014400

08005e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	@ 0x38
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	60da      	str	r2, [r3, #12]
 8005e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a6a      	ldr	r2, [pc, #424]	@ (8005fcc <HAL_TIM_MspPostInit+0x1c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d11f      	bne.n	8005e66 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	4b69      	ldr	r3, [pc, #420]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	4a68      	ldr	r2, [pc, #416]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005e30:	f043 0310 	orr.w	r3, r3, #16
 8005e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e36:	4b66      	ldr	r3, [pc, #408]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8005e42:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e50:	2300      	movs	r3, #0
 8005e52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e54:	2301      	movs	r3, #1
 8005e56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	485d      	ldr	r0, [pc, #372]	@ (8005fd4 <HAL_TIM_MspPostInit+0x1d0>)
 8005e60:	f002 f88a 	bl	8007f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005e64:	e0ae      	b.n	8005fc4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a5b      	ldr	r2, [pc, #364]	@ (8005fd8 <HAL_TIM_MspPostInit+0x1d4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d11f      	bne.n	8005eb0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
 8005e74:	4b56      	ldr	r3, [pc, #344]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e78:	4a55      	ldr	r2, [pc, #340]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005e7a:	f043 0308 	orr.w	r3, r3, #8
 8005e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e80:	4b53      	ldr	r3, [pc, #332]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005e8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e92:	2302      	movs	r3, #2
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	484c      	ldr	r0, [pc, #304]	@ (8005fdc <HAL_TIM_MspPostInit+0x1d8>)
 8005eaa:	f002 f865 	bl	8007f78 <HAL_GPIO_Init>
}
 8005eae:	e089      	b.n	8005fc4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8005fe0 <HAL_TIM_MspPostInit+0x1dc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d11f      	bne.n	8005efa <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	4b44      	ldr	r3, [pc, #272]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec2:	4a43      	ldr	r2, [pc, #268]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005eca:	4b41      	ldr	r3, [pc, #260]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8005ed6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005edc:	2302      	movs	r3, #2
 8005ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	483c      	ldr	r0, [pc, #240]	@ (8005fe4 <HAL_TIM_MspPostInit+0x1e0>)
 8005ef4:	f002 f840 	bl	8007f78 <HAL_GPIO_Init>
}
 8005ef8:	e064      	b.n	8005fc4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe8 <HAL_TIM_MspPostInit+0x1e4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d13c      	bne.n	8005f7e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	4b31      	ldr	r3, [pc, #196]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	4a30      	ldr	r2, [pc, #192]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f14:	4b2e      	ldr	r3, [pc, #184]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f28:	4a29      	ldr	r2, [pc, #164]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f2a:	f043 0304 	orr.w	r3, r3, #4
 8005f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f30:	4b27      	ldr	r3, [pc, #156]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005f3c:	23c0      	movs	r3, #192	@ 0xc0
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f40:	2302      	movs	r3, #2
 8005f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f54:	4619      	mov	r1, r3
 8005f56:	4825      	ldr	r0, [pc, #148]	@ (8005fec <HAL_TIM_MspPostInit+0x1e8>)
 8005f58:	f002 f80e 	bl	8007f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005f5c:	2340      	movs	r3, #64	@ 0x40
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f60:	2302      	movs	r3, #2
 8005f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f74:	4619      	mov	r1, r3
 8005f76:	481e      	ldr	r0, [pc, #120]	@ (8005ff0 <HAL_TIM_MspPostInit+0x1ec>)
 8005f78:	f001 fffe 	bl	8007f78 <HAL_GPIO_Init>
}
 8005f7c:	e022      	b.n	8005fc4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff4 <HAL_TIM_MspPostInit+0x1f0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d11d      	bne.n	8005fc4 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f90:	4a0f      	ldr	r2, [pc, #60]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f92:	f043 0320 	orr.w	r3, r3, #32
 8005f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f98:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd0 <HAL_TIM_MspPostInit+0x1cc>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005fa4:	2340      	movs	r3, #64	@ 0x40
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fac:	2301      	movs	r3, #1
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	480e      	ldr	r0, [pc, #56]	@ (8005ff8 <HAL_TIM_MspPostInit+0x1f4>)
 8005fc0:	f001 ffda 	bl	8007f78 <HAL_GPIO_Init>
}
 8005fc4:	bf00      	nop
 8005fc6:	3738      	adds	r7, #56	@ 0x38
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40020c00 	.word	0x40020c00
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	40021c00 	.word	0x40021c00
 8005fe8:	40010400 	.word	0x40010400
 8005fec:	40022000 	.word	0x40022000
 8005ff0:	40020800 	.word	0x40020800
 8005ff4:	40014400 	.word	0x40014400
 8005ff8:	40021400 	.word	0x40021400

08005ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08e      	sub	sp, #56	@ 0x38
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a90      	ldr	r2, [pc, #576]	@ (800625c <HAL_UART_MspInit+0x260>)
 800601a:	4293      	cmp	r3, r2
 800601c:	f040 80b2 	bne.w	8006184 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006020:	2300      	movs	r3, #0
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	4b8e      	ldr	r3, [pc, #568]	@ (8006260 <HAL_UART_MspInit+0x264>)
 8006026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006028:	4a8d      	ldr	r2, [pc, #564]	@ (8006260 <HAL_UART_MspInit+0x264>)
 800602a:	f043 0310 	orr.w	r3, r3, #16
 800602e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006030:	4b8b      	ldr	r3, [pc, #556]	@ (8006260 <HAL_UART_MspInit+0x264>)
 8006032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	4b87      	ldr	r3, [pc, #540]	@ (8006260 <HAL_UART_MspInit+0x264>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006044:	4a86      	ldr	r2, [pc, #536]	@ (8006260 <HAL_UART_MspInit+0x264>)
 8006046:	f043 0302 	orr.w	r3, r3, #2
 800604a:	6313      	str	r3, [r2, #48]	@ 0x30
 800604c:	4b84      	ldr	r3, [pc, #528]	@ (8006260 <HAL_UART_MspInit+0x264>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006058:	2300      	movs	r3, #0
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	4b80      	ldr	r3, [pc, #512]	@ (8006260 <HAL_UART_MspInit+0x264>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006060:	4a7f      	ldr	r2, [pc, #508]	@ (8006260 <HAL_UART_MspInit+0x264>)
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	6313      	str	r3, [r2, #48]	@ 0x30
 8006068:	4b7d      	ldr	r3, [pc, #500]	@ (8006260 <HAL_UART_MspInit+0x264>)
 800606a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006074:	2380      	movs	r3, #128	@ 0x80
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006078:	2302      	movs	r3, #2
 800607a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607c:	2300      	movs	r3, #0
 800607e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006080:	2303      	movs	r3, #3
 8006082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006084:	2307      	movs	r3, #7
 8006086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800608c:	4619      	mov	r1, r3
 800608e:	4875      	ldr	r0, [pc, #468]	@ (8006264 <HAL_UART_MspInit+0x268>)
 8006090:	f001 ff72 	bl	8007f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006094:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800609a:	2302      	movs	r3, #2
 800609c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a2:	2303      	movs	r3, #3
 80060a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060a6:	2307      	movs	r3, #7
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060ae:	4619      	mov	r1, r3
 80060b0:	486d      	ldr	r0, [pc, #436]	@ (8006268 <HAL_UART_MspInit+0x26c>)
 80060b2:	f001 ff61 	bl	8007f78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80060b6:	4b6d      	ldr	r3, [pc, #436]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060b8:	4a6d      	ldr	r2, [pc, #436]	@ (8006270 <HAL_UART_MspInit+0x274>)
 80060ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80060bc:	4b6b      	ldr	r3, [pc, #428]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80060c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060c4:	4b69      	ldr	r3, [pc, #420]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060c6:	2240      	movs	r2, #64	@ 0x40
 80060c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060ca:	4b68      	ldr	r3, [pc, #416]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060d0:	4b66      	ldr	r3, [pc, #408]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060d8:	4b64      	ldr	r3, [pc, #400]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060da:	2200      	movs	r2, #0
 80060dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060de:	4b63      	ldr	r3, [pc, #396]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80060e4:	4b61      	ldr	r3, [pc, #388]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80060ea:	4b60      	ldr	r3, [pc, #384]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80060f0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060f2:	4b5e      	ldr	r3, [pc, #376]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80060f8:	485c      	ldr	r0, [pc, #368]	@ (800626c <HAL_UART_MspInit+0x270>)
 80060fa:	f001 fb3b 	bl	8007774 <HAL_DMA_Init>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8006104:	f7fe fc1c 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a58      	ldr	r2, [pc, #352]	@ (800626c <HAL_UART_MspInit+0x270>)
 800610c:	639a      	str	r2, [r3, #56]	@ 0x38
 800610e:	4a57      	ldr	r2, [pc, #348]	@ (800626c <HAL_UART_MspInit+0x270>)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006114:	4b57      	ldr	r3, [pc, #348]	@ (8006274 <HAL_UART_MspInit+0x278>)
 8006116:	4a58      	ldr	r2, [pc, #352]	@ (8006278 <HAL_UART_MspInit+0x27c>)
 8006118:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800611a:	4b56      	ldr	r3, [pc, #344]	@ (8006274 <HAL_UART_MspInit+0x278>)
 800611c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006120:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006122:	4b54      	ldr	r3, [pc, #336]	@ (8006274 <HAL_UART_MspInit+0x278>)
 8006124:	2200      	movs	r2, #0
 8006126:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006128:	4b52      	ldr	r3, [pc, #328]	@ (8006274 <HAL_UART_MspInit+0x278>)
 800612a:	2200      	movs	r2, #0
 800612c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800612e:	4b51      	ldr	r3, [pc, #324]	@ (8006274 <HAL_UART_MspInit+0x278>)
 8006130:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006134:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006136:	4b4f      	ldr	r3, [pc, #316]	@ (8006274 <HAL_UART_MspInit+0x278>)
 8006138:	2200      	movs	r2, #0
 800613a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800613c:	4b4d      	ldr	r3, [pc, #308]	@ (8006274 <HAL_UART_MspInit+0x278>)
 800613e:	2200      	movs	r2, #0
 8006140:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006142:	4b4c      	ldr	r3, [pc, #304]	@ (8006274 <HAL_UART_MspInit+0x278>)
 8006144:	2200      	movs	r2, #0
 8006146:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006148:	4b4a      	ldr	r3, [pc, #296]	@ (8006274 <HAL_UART_MspInit+0x278>)
 800614a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800614e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006150:	4b48      	ldr	r3, [pc, #288]	@ (8006274 <HAL_UART_MspInit+0x278>)
 8006152:	2200      	movs	r2, #0
 8006154:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006156:	4847      	ldr	r0, [pc, #284]	@ (8006274 <HAL_UART_MspInit+0x278>)
 8006158:	f001 fb0c 	bl	8007774 <HAL_DMA_Init>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8006162:	f7fe fbed 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a42      	ldr	r2, [pc, #264]	@ (8006274 <HAL_UART_MspInit+0x278>)
 800616a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800616c:	4a41      	ldr	r2, [pc, #260]	@ (8006274 <HAL_UART_MspInit+0x278>)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006172:	2200      	movs	r2, #0
 8006174:	2105      	movs	r1, #5
 8006176:	2025      	movs	r0, #37	@ 0x25
 8006178:	f001 fac5 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800617c:	2025      	movs	r0, #37	@ 0x25
 800617e:	f001 fade 	bl	800773e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006182:	e11c      	b.n	80063be <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a3c      	ldr	r2, [pc, #240]	@ (800627c <HAL_UART_MspInit+0x280>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d17e      	bne.n	800628c <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	4b33      	ldr	r3, [pc, #204]	@ (8006260 <HAL_UART_MspInit+0x264>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	4a32      	ldr	r2, [pc, #200]	@ (8006260 <HAL_UART_MspInit+0x264>)
 8006198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800619c:	6413      	str	r3, [r2, #64]	@ 0x40
 800619e:	4b30      	ldr	r3, [pc, #192]	@ (8006260 <HAL_UART_MspInit+0x264>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006260 <HAL_UART_MspInit+0x264>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006260 <HAL_UART_MspInit+0x264>)
 80061b4:	f043 0304 	orr.w	r3, r3, #4
 80061b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80061ba:	4b29      	ldr	r3, [pc, #164]	@ (8006260 <HAL_UART_MspInit+0x264>)
 80061bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80061c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80061ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061cc:	2302      	movs	r3, #2
 80061ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d4:	2303      	movs	r3, #3
 80061d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061d8:	2307      	movs	r3, #7
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061e0:	4619      	mov	r1, r3
 80061e2:	4827      	ldr	r0, [pc, #156]	@ (8006280 <HAL_UART_MspInit+0x284>)
 80061e4:	f001 fec8 	bl	8007f78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80061e8:	4b26      	ldr	r3, [pc, #152]	@ (8006284 <HAL_UART_MspInit+0x288>)
 80061ea:	4a27      	ldr	r2, [pc, #156]	@ (8006288 <HAL_UART_MspInit+0x28c>)
 80061ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80061ee:	4b25      	ldr	r3, [pc, #148]	@ (8006284 <HAL_UART_MspInit+0x288>)
 80061f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80061f4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061f6:	4b23      	ldr	r3, [pc, #140]	@ (8006284 <HAL_UART_MspInit+0x288>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061fc:	4b21      	ldr	r3, [pc, #132]	@ (8006284 <HAL_UART_MspInit+0x288>)
 80061fe:	2200      	movs	r2, #0
 8006200:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006202:	4b20      	ldr	r3, [pc, #128]	@ (8006284 <HAL_UART_MspInit+0x288>)
 8006204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006208:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800620a:	4b1e      	ldr	r3, [pc, #120]	@ (8006284 <HAL_UART_MspInit+0x288>)
 800620c:	2200      	movs	r2, #0
 800620e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006210:	4b1c      	ldr	r3, [pc, #112]	@ (8006284 <HAL_UART_MspInit+0x288>)
 8006212:	2200      	movs	r2, #0
 8006214:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006216:	4b1b      	ldr	r3, [pc, #108]	@ (8006284 <HAL_UART_MspInit+0x288>)
 8006218:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800621c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800621e:	4b19      	ldr	r3, [pc, #100]	@ (8006284 <HAL_UART_MspInit+0x288>)
 8006220:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006224:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006226:	4b17      	ldr	r3, [pc, #92]	@ (8006284 <HAL_UART_MspInit+0x288>)
 8006228:	2200      	movs	r2, #0
 800622a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800622c:	4815      	ldr	r0, [pc, #84]	@ (8006284 <HAL_UART_MspInit+0x288>)
 800622e:	f001 faa1 	bl	8007774 <HAL_DMA_Init>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_UART_MspInit+0x240>
      Error_Handler();
 8006238:	f7fe fb82 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a11      	ldr	r2, [pc, #68]	@ (8006284 <HAL_UART_MspInit+0x288>)
 8006240:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006242:	4a10      	ldr	r2, [pc, #64]	@ (8006284 <HAL_UART_MspInit+0x288>)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006248:	2200      	movs	r2, #0
 800624a:	2105      	movs	r1, #5
 800624c:	2027      	movs	r0, #39	@ 0x27
 800624e:	f001 fa5a 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006252:	2027      	movs	r0, #39	@ 0x27
 8006254:	f001 fa73 	bl	800773e <HAL_NVIC_EnableIRQ>
}
 8006258:	e0b1      	b.n	80063be <HAL_UART_MspInit+0x3c2>
 800625a:	bf00      	nop
 800625c:	40011000 	.word	0x40011000
 8006260:	40023800 	.word	0x40023800
 8006264:	40020400 	.word	0x40020400
 8006268:	40020000 	.word	0x40020000
 800626c:	20000e34 	.word	0x20000e34
 8006270:	400264b8 	.word	0x400264b8
 8006274:	20000e94 	.word	0x20000e94
 8006278:	40026440 	.word	0x40026440
 800627c:	40004800 	.word	0x40004800
 8006280:	40020800 	.word	0x40020800
 8006284:	20000ef4 	.word	0x20000ef4
 8006288:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a4d      	ldr	r2, [pc, #308]	@ (80063c8 <HAL_UART_MspInit+0x3cc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	f040 8093 	bne.w	80063be <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	4b4b      	ldr	r3, [pc, #300]	@ (80063cc <HAL_UART_MspInit+0x3d0>)
 800629e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a0:	4a4a      	ldr	r2, [pc, #296]	@ (80063cc <HAL_UART_MspInit+0x3d0>)
 80062a2:	f043 0320 	orr.w	r3, r3, #32
 80062a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80062a8:	4b48      	ldr	r3, [pc, #288]	@ (80063cc <HAL_UART_MspInit+0x3d0>)
 80062aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80062b4:	2300      	movs	r3, #0
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	4b44      	ldr	r3, [pc, #272]	@ (80063cc <HAL_UART_MspInit+0x3d0>)
 80062ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062bc:	4a43      	ldr	r2, [pc, #268]	@ (80063cc <HAL_UART_MspInit+0x3d0>)
 80062be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80062c4:	4b41      	ldr	r3, [pc, #260]	@ (80063cc <HAL_UART_MspInit+0x3d0>)
 80062c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80062d0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d6:	2302      	movs	r3, #2
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062de:	2303      	movs	r3, #3
 80062e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80062e2:	2308      	movs	r3, #8
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062ea:	4619      	mov	r1, r3
 80062ec:	4838      	ldr	r0, [pc, #224]	@ (80063d0 <HAL_UART_MspInit+0x3d4>)
 80062ee:	f001 fe43 	bl	8007f78 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80062f2:	4b38      	ldr	r3, [pc, #224]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 80062f4:	4a38      	ldr	r2, [pc, #224]	@ (80063d8 <HAL_UART_MspInit+0x3dc>)
 80062f6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80062f8:	4b36      	ldr	r3, [pc, #216]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 80062fa:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80062fe:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006300:	4b34      	ldr	r3, [pc, #208]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006302:	2200      	movs	r2, #0
 8006304:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006306:	4b33      	ldr	r3, [pc, #204]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006308:	2200      	movs	r2, #0
 800630a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800630c:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 800630e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006312:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006314:	4b2f      	ldr	r3, [pc, #188]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006316:	2200      	movs	r2, #0
 8006318:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800631a:	4b2e      	ldr	r3, [pc, #184]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 800631c:	2200      	movs	r2, #0
 800631e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006320:	4b2c      	ldr	r3, [pc, #176]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006322:	2200      	movs	r2, #0
 8006324:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006326:	4b2b      	ldr	r3, [pc, #172]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006328:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800632c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800632e:	4b29      	ldr	r3, [pc, #164]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006330:	2200      	movs	r2, #0
 8006332:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006334:	4827      	ldr	r0, [pc, #156]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006336:	f001 fa1d 	bl	8007774 <HAL_DMA_Init>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8006340:	f7fe fafe 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a23      	ldr	r2, [pc, #140]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 8006348:	63da      	str	r2, [r3, #60]	@ 0x3c
 800634a:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <HAL_UART_MspInit+0x3d8>)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006350:	4b22      	ldr	r3, [pc, #136]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006352:	4a23      	ldr	r2, [pc, #140]	@ (80063e0 <HAL_UART_MspInit+0x3e4>)
 8006354:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006356:	4b21      	ldr	r3, [pc, #132]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006358:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800635c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800635e:	4b1f      	ldr	r3, [pc, #124]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006360:	2240      	movs	r2, #64	@ 0x40
 8006362:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006364:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006366:	2200      	movs	r2, #0
 8006368:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800636a:	4b1c      	ldr	r3, [pc, #112]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 800636c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006370:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006372:	4b1a      	ldr	r3, [pc, #104]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006374:	2200      	movs	r2, #0
 8006376:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006378:	4b18      	ldr	r3, [pc, #96]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 800637a:	2200      	movs	r2, #0
 800637c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800637e:	4b17      	ldr	r3, [pc, #92]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006380:	2200      	movs	r2, #0
 8006382:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006384:	4b15      	ldr	r3, [pc, #84]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006386:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800638a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800638c:	4b13      	ldr	r3, [pc, #76]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 800638e:	2200      	movs	r2, #0
 8006390:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006392:	4812      	ldr	r0, [pc, #72]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 8006394:	f001 f9ee 	bl	8007774 <HAL_DMA_Init>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 800639e:	f7fe facf 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a0d      	ldr	r2, [pc, #52]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 80063a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80063a8:	4a0c      	ldr	r2, [pc, #48]	@ (80063dc <HAL_UART_MspInit+0x3e0>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80063ae:	2200      	movs	r2, #0
 80063b0:	2105      	movs	r1, #5
 80063b2:	2047      	movs	r0, #71	@ 0x47
 80063b4:	f001 f9a7 	bl	8007706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80063b8:	2047      	movs	r0, #71	@ 0x47
 80063ba:	f001 f9c0 	bl	800773e <HAL_NVIC_EnableIRQ>
}
 80063be:	bf00      	nop
 80063c0:	3738      	adds	r7, #56	@ 0x38
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40011400 	.word	0x40011400
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40021800 	.word	0x40021800
 80063d4:	20000f54 	.word	0x20000f54
 80063d8:	40026428 	.word	0x40026428
 80063dc:	20000fb4 	.word	0x20000fb4
 80063e0:	400264a0 	.word	0x400264a0

080063e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80063e8:	f003 fc1c 	bl	8009c24 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063ec:	bf00      	nop
 80063ee:	e7fd      	b.n	80063ec <NMI_Handler+0x8>

080063f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063f4:	bf00      	nop
 80063f6:	e7fd      	b.n	80063f4 <HardFault_Handler+0x4>

080063f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <MemManage_Handler+0x4>

08006400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <BusFault_Handler+0x4>

08006408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <UsageFault_Handler+0x4>

08006410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006422:	f000 f9e9 	bl	80067f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006426:	f007 ff51 	bl	800e2cc <xTaskGetSchedulerState>
 800642a:	4603      	mov	r3, r0
 800642c:	2b01      	cmp	r3, #1
 800642e:	d001      	beq.n	8006434 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006430:	f008 fe2a 	bl	800f088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006434:	bf00      	nop
 8006436:	bd80      	pop	{r7, pc}

08006438 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800643c:	2008      	movs	r0, #8
 800643e:	f001 ff51 	bl	80082e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8006442:	4802      	ldr	r0, [pc, #8]	@ (800644c <EXTI3_IRQHandler+0x14>)
 8006444:	f7fc fea4 	bl	8003190 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8006448:	bf00      	nop
 800644a:	bd80      	pop	{r7, pc}
 800644c:	200009cc 	.word	0x200009cc

08006450 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8006454:	2010      	movs	r0, #16
 8006456:	f001 ff45 	bl	80082e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006464:	4802      	ldr	r0, [pc, #8]	@ (8006470 <DMA1_Stream1_IRQHandler+0x10>)
 8006466:	f001 fb1d 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800646a:	bf00      	nop
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000ef4 	.word	0x20000ef4

08006474 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8006478:	4802      	ldr	r0, [pc, #8]	@ (8006484 <DMA1_Stream2_IRQHandler+0x10>)
 800647a:	f001 fb13 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800647e:	bf00      	nop
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000c9c 	.word	0x20000c9c

08006488 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800648c:	4802      	ldr	r0, [pc, #8]	@ (8006498 <DMA1_Stream4_IRQHandler+0x10>)
 800648e:	f001 fb09 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000cfc 	.word	0x20000cfc

0800649c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80064a0:	4802      	ldr	r0, [pc, #8]	@ (80064ac <CAN1_RX0_IRQHandler+0x10>)
 80064a2:	f000 fe25 	bl	80070f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80064a6:	bf00      	nop
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200009d8 	.word	0x200009d8

080064b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80064b4:	4802      	ldr	r0, [pc, #8]	@ (80064c0 <USART1_IRQHandler+0x10>)
 80064b6:	f004 ffb7 	bl	800b428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000d5c 	.word	0x20000d5c

080064c4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80064c8:	4802      	ldr	r0, [pc, #8]	@ (80064d4 <DMA1_Stream7_IRQHandler+0x10>)
 80064ca:	f001 faeb 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80064ce:	bf00      	nop
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000c3c 	.word	0x20000c3c

080064d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80064dc:	4802      	ldr	r0, [pc, #8]	@ (80064e8 <DMA2_Stream1_IRQHandler+0x10>)
 80064de:	f001 fae1 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80064e2:	bf00      	nop
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000f54 	.word	0x20000f54

080064ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80064f0:	4802      	ldr	r0, [pc, #8]	@ (80064fc <DMA2_Stream2_IRQHandler+0x10>)
 80064f2:	f001 fad7 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80064f6:	bf00      	nop
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000e94 	.word	0x20000e94

08006500 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006504:	4802      	ldr	r0, [pc, #8]	@ (8006510 <CAN2_RX0_IRQHandler+0x10>)
 8006506:	f000 fdf3 	bl	80070f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000a00 	.word	0x20000a00

08006514 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006518:	4802      	ldr	r0, [pc, #8]	@ (8006524 <DMA2_Stream6_IRQHandler+0x10>)
 800651a:	f001 fac3 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800651e:	bf00      	nop
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000fb4 	.word	0x20000fb4

08006528 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800652c:	4802      	ldr	r0, [pc, #8]	@ (8006538 <DMA2_Stream7_IRQHandler+0x10>)
 800652e:	f001 fab9 	bl	8007aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000e34 	.word	0x20000e34

0800653c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006540:	4802      	ldr	r0, [pc, #8]	@ (800654c <USART6_IRQHandler+0x10>)
 8006542:	f004 ff71 	bl	800b428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000dec 	.word	0x20000dec

08006550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  return 1;
 8006554:	2301      	movs	r3, #1
}
 8006556:	4618      	mov	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <_kill>:

int _kill(int pid, int sig)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800656a:	f009 fda9 	bl	80100c0 <__errno>
 800656e:	4603      	mov	r3, r0
 8006570:	2216      	movs	r2, #22
 8006572:	601a      	str	r2, [r3, #0]
  return -1;
 8006574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <_exit>:

void _exit (int status)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006588:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ffe7 	bl	8006560 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <_exit+0x12>

08006596 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e00a      	b.n	80065be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80065a8:	f3af 8000 	nop.w
 80065ac:	4601      	mov	r1, r0
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	60ba      	str	r2, [r7, #8]
 80065b4:	b2ca      	uxtb	r2, r1
 80065b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	3301      	adds	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	dbf0      	blt.n	80065a8 <_read+0x12>
  }

  return len;
 80065c6:	687b      	ldr	r3, [r7, #4]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e009      	b.n	80065f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	60ba      	str	r2, [r7, #8]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	3301      	adds	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	dbf1      	blt.n	80065e2 <_write+0x12>
  }
  return len;
 80065fe:	687b      	ldr	r3, [r7, #4]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_close>:

int _close(int file)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006630:	605a      	str	r2, [r3, #4]
  return 0;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <_isatty>:

int _isatty(int file)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006648:	2301      	movs	r3, #1
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006678:	4a14      	ldr	r2, [pc, #80]	@ (80066cc <_sbrk+0x5c>)
 800667a:	4b15      	ldr	r3, [pc, #84]	@ (80066d0 <_sbrk+0x60>)
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006684:	4b13      	ldr	r3, [pc, #76]	@ (80066d4 <_sbrk+0x64>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800668c:	4b11      	ldr	r3, [pc, #68]	@ (80066d4 <_sbrk+0x64>)
 800668e:	4a12      	ldr	r2, [pc, #72]	@ (80066d8 <_sbrk+0x68>)
 8006690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <_sbrk+0x64>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	429a      	cmp	r2, r3
 800669e:	d207      	bcs.n	80066b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066a0:	f009 fd0e 	bl	80100c0 <__errno>
 80066a4:	4603      	mov	r3, r0
 80066a6:	220c      	movs	r2, #12
 80066a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066ae:	e009      	b.n	80066c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066b0:	4b08      	ldr	r3, [pc, #32]	@ (80066d4 <_sbrk+0x64>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066b6:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <_sbrk+0x64>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	4a05      	ldr	r2, [pc, #20]	@ (80066d4 <_sbrk+0x64>)
 80066c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066c2:	68fb      	ldr	r3, [r7, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20020000 	.word	0x20020000
 80066d0:	00000400 	.word	0x00000400
 80066d4:	2000110c 	.word	0x2000110c
 80066d8:	20005c48 	.word	0x20005c48

080066dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <SystemInit+0x20>)
 80066e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e6:	4a05      	ldr	r2, [pc, #20]	@ (80066fc <SystemInit+0x20>)
 80066e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006704:	480d      	ldr	r0, [pc, #52]	@ (800673c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006706:	490e      	ldr	r1, [pc, #56]	@ (8006740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006708:	4a0e      	ldr	r2, [pc, #56]	@ (8006744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800670a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800670c:	e002      	b.n	8006714 <LoopCopyDataInit>

0800670e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800670e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006712:	3304      	adds	r3, #4

08006714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006718:	d3f9      	bcc.n	800670e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800671a:	4a0b      	ldr	r2, [pc, #44]	@ (8006748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800671c:	4c0b      	ldr	r4, [pc, #44]	@ (800674c <LoopFillZerobss+0x26>)
  movs r3, #0
 800671e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006720:	e001      	b.n	8006726 <LoopFillZerobss>

08006722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006724:	3204      	adds	r2, #4

08006726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006728:	d3fb      	bcc.n	8006722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800672a:	f7ff ffd7 	bl	80066dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800672e:	f009 fccd 	bl	80100cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006732:	f7fc fe4d 	bl	80033d0 <main>
  bx  lr    
 8006736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800673c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006740:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8006744:	080128f8 	.word	0x080128f8
  ldr r2, =_sbss
 8006748:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 800674c:	20005c48 	.word	0x20005c48

08006750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006750:	e7fe      	b.n	8006750 <ADC_IRQHandler>
	...

08006754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006758:	4b0e      	ldr	r3, [pc, #56]	@ (8006794 <HAL_Init+0x40>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a0d      	ldr	r2, [pc, #52]	@ (8006794 <HAL_Init+0x40>)
 800675e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006764:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <HAL_Init+0x40>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a0a      	ldr	r2, [pc, #40]	@ (8006794 <HAL_Init+0x40>)
 800676a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800676e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006770:	4b08      	ldr	r3, [pc, #32]	@ (8006794 <HAL_Init+0x40>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a07      	ldr	r2, [pc, #28]	@ (8006794 <HAL_Init+0x40>)
 8006776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800677a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800677c:	2003      	movs	r0, #3
 800677e:	f000 ffb7 	bl	80076f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006782:	200f      	movs	r0, #15
 8006784:	f000 f808 	bl	8006798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006788:	f7ff f870 	bl	800586c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40023c00 	.word	0x40023c00

08006798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067a0:	4b12      	ldr	r3, [pc, #72]	@ (80067ec <HAL_InitTick+0x54>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	4b12      	ldr	r3, [pc, #72]	@ (80067f0 <HAL_InitTick+0x58>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 ffcf 	bl	800775a <HAL_SYSTICK_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e00e      	b.n	80067e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b0f      	cmp	r3, #15
 80067ca:	d80a      	bhi.n	80067e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067cc:	2200      	movs	r2, #0
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067d4:	f000 ff97 	bl	8007706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067d8:	4a06      	ldr	r2, [pc, #24]	@ (80067f4 <HAL_InitTick+0x5c>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e000      	b.n	80067e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	2000011c 	.word	0x2000011c
 80067f0:	20000124 	.word	0x20000124
 80067f4:	20000120 	.word	0x20000120

080067f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067fc:	4b06      	ldr	r3, [pc, #24]	@ (8006818 <HAL_IncTick+0x20>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	4b06      	ldr	r3, [pc, #24]	@ (800681c <HAL_IncTick+0x24>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4413      	add	r3, r2
 8006808:	4a04      	ldr	r2, [pc, #16]	@ (800681c <HAL_IncTick+0x24>)
 800680a:	6013      	str	r3, [r2, #0]
}
 800680c:	bf00      	nop
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000124 	.word	0x20000124
 800681c:	20001110 	.word	0x20001110

08006820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  return uwTick;
 8006824:	4b03      	ldr	r3, [pc, #12]	@ (8006834 <HAL_GetTick+0x14>)
 8006826:	681b      	ldr	r3, [r3, #0]
}
 8006828:	4618      	mov	r0, r3
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20001110 	.word	0x20001110

08006838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006840:	f7ff ffee 	bl	8006820 <HAL_GetTick>
 8006844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006850:	d005      	beq.n	800685e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006852:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <HAL_Delay+0x44>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800685e:	bf00      	nop
 8006860:	f7ff ffde 	bl	8006820 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	429a      	cmp	r2, r3
 800686e:	d8f7      	bhi.n	8006860 <HAL_Delay+0x28>
  {
  }
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000124 	.word	0x20000124

08006880 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e0ed      	b.n	8006a6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff f810 	bl	80058c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068b4:	f7ff ffb4 	bl	8006820 <HAL_GetTick>
 80068b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80068ba:	e012      	b.n	80068e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80068bc:	f7ff ffb0 	bl	8006820 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b0a      	cmp	r3, #10
 80068c8:	d90b      	bls.n	80068e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2205      	movs	r2, #5
 80068da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e0c5      	b.n	8006a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0e5      	beq.n	80068bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0202 	bic.w	r2, r2, #2
 80068fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006900:	f7ff ff8e 	bl	8006820 <HAL_GetTick>
 8006904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006906:	e012      	b.n	800692e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006908:	f7ff ff8a 	bl	8006820 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b0a      	cmp	r3, #10
 8006914:	d90b      	bls.n	800692e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2205      	movs	r2, #5
 8006926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e09f      	b.n	8006a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e5      	bne.n	8006908 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7e1b      	ldrb	r3, [r3, #24]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d108      	bne.n	8006956 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e007      	b.n	8006966 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7e5b      	ldrb	r3, [r3, #25]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d108      	bne.n	8006980 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e007      	b.n	8006990 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800698e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7e9b      	ldrb	r3, [r3, #26]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d108      	bne.n	80069aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0220 	orr.w	r2, r2, #32
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e007      	b.n	80069ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0220 	bic.w	r2, r2, #32
 80069b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7edb      	ldrb	r3, [r3, #27]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d108      	bne.n	80069d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0210 	bic.w	r2, r2, #16
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e007      	b.n	80069e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0210 	orr.w	r2, r2, #16
 80069e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7f1b      	ldrb	r3, [r3, #28]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d108      	bne.n	80069fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0208 	orr.w	r2, r2, #8
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	e007      	b.n	8006a0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0208 	bic.w	r2, r2, #8
 8006a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7f5b      	ldrb	r3, [r3, #29]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d108      	bne.n	8006a28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0204 	orr.w	r2, r2, #4
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e007      	b.n	8006a38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0204 	bic.w	r2, r2, #4
 8006a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	ea42 0103 	orr.w	r1, r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	1e5a      	subs	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006a90:	7cfb      	ldrb	r3, [r7, #19]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d003      	beq.n	8006a9e <HAL_CAN_ConfigFilter+0x26>
 8006a96:	7cfb      	ldrb	r3, [r7, #19]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f040 80be 	bne.w	8006c1a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006a9e:	4b65      	ldr	r3, [pc, #404]	@ (8006c34 <HAL_CAN_ConfigFilter+0x1bc>)
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006ab8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2201      	movs	r2, #1
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	43db      	mvns	r3, r3
 8006af0:	401a      	ands	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d123      	bne.n	8006b48 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	401a      	ands	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006b22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	3248      	adds	r2, #72	@ 0x48
 8006b28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b3e:	6979      	ldr	r1, [r7, #20]
 8006b40:	3348      	adds	r3, #72	@ 0x48
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	440b      	add	r3, r1
 8006b46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d122      	bne.n	8006b96 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006b70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	3248      	adds	r2, #72	@ 0x48
 8006b76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b8c:	6979      	ldr	r1, [r7, #20]
 8006b8e:	3348      	adds	r3, #72	@ 0x48
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	440b      	add	r3, r1
 8006b94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	401a      	ands	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006bb0:	e007      	b.n	8006bc2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	401a      	ands	r2, r3
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006bdc:	e007      	b.n	8006bee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c0c:	f023 0201 	bic.w	r2, r3, #1
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	e006      	b.n	8006c28 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
  }
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	40006400 	.word	0x40006400

08006c38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d12e      	bne.n	8006caa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0201 	bic.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c64:	f7ff fddc 	bl	8006820 <HAL_GetTick>
 8006c68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006c6a:	e012      	b.n	8006c92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c6c:	f7ff fdd8 	bl	8006820 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b0a      	cmp	r3, #10
 8006c78:	d90b      	bls.n	8006c92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2205      	movs	r2, #5
 8006c8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e012      	b.n	8006cb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e5      	bne.n	8006c6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e006      	b.n	8006cb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
  }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	@ 0x24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cd4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006cde:	7ffb      	ldrb	r3, [r7, #31]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d003      	beq.n	8006cec <HAL_CAN_AddTxMessage+0x2c>
 8006ce4:	7ffb      	ldrb	r3, [r7, #31]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	f040 80ad 	bne.w	8006e46 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8095 	beq.w	8006e36 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	0e1b      	lsrs	r3, r3, #24
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006d16:	2201      	movs	r2, #1
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10d      	bne.n	8006d44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	6809      	ldr	r1, [r1, #0]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3318      	adds	r3, #24
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	440b      	add	r3, r1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e00f      	b.n	8006d64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006d58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	440b      	add	r3, r1
 8006d62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6819      	ldr	r1, [r3, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	3318      	adds	r3, #24
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	440b      	add	r3, r1
 8006d74:	3304      	adds	r3, #4
 8006d76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	7d1b      	ldrb	r3, [r3, #20]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d111      	bne.n	8006da4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	3318      	adds	r3, #24
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	6811      	ldr	r1, [r2, #0]
 8006d94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	3318      	adds	r3, #24
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	440b      	add	r3, r1
 8006da0:	3304      	adds	r3, #4
 8006da2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3307      	adds	r3, #7
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	061a      	lsls	r2, r3, #24
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3306      	adds	r3, #6
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3305      	adds	r3, #5
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	3204      	adds	r2, #4
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	6811      	ldr	r1, [r2, #0]
 8006dcc:	ea43 0200 	orr.w	r2, r3, r0
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	440b      	add	r3, r1
 8006dd6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006dda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3303      	adds	r3, #3
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	061a      	lsls	r2, r3, #24
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3302      	adds	r3, #2
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3301      	adds	r3, #1
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	4313      	orrs	r3, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	7812      	ldrb	r2, [r2, #0]
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	6811      	ldr	r1, [r2, #0]
 8006e02:	ea43 0200 	orr.w	r2, r3, r0
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	440b      	add	r3, r1
 8006e0c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006e10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	3318      	adds	r3, #24
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	4413      	add	r3, r2
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	6811      	ldr	r1, [r2, #0]
 8006e24:	f043 0201 	orr.w	r2, r3, #1
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	3318      	adds	r3, #24
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	440b      	add	r3, r1
 8006e30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e00e      	b.n	8006e54 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e006      	b.n	8006e54 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
  }
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3724      	adds	r7, #36	@ 0x24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e74:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d003      	beq.n	8006e84 <HAL_CAN_GetRxMessage+0x24>
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	f040 8103 	bne.w	800708a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10e      	bne.n	8006ea8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d116      	bne.n	8006ec6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0f7      	b.n	8007098 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d107      	bne.n	8006ec6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e0e8      	b.n	8007098 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	331b      	adds	r3, #27
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	4413      	add	r3, r2
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0204 	and.w	r2, r3, #4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10c      	bne.n	8006efe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	331b      	adds	r3, #27
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	4413      	add	r3, r2
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	0d5b      	lsrs	r3, r3, #21
 8006ef4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	e00b      	b.n	8006f16 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	331b      	adds	r3, #27
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	4413      	add	r3, r2
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	08db      	lsrs	r3, r3, #3
 8006f0e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	331b      	adds	r3, #27
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	4413      	add	r3, r2
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0202 	and.w	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	331b      	adds	r3, #27
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2208      	movs	r2, #8
 8006f48:	611a      	str	r2, [r3, #16]
 8006f4a:	e00b      	b.n	8006f64 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	331b      	adds	r3, #27
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	4413      	add	r3, r2
 8006f58:	3304      	adds	r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	331b      	adds	r3, #27
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	4413      	add	r3, r2
 8006f70:	3304      	adds	r3, #4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	331b      	adds	r3, #27
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	4413      	add	r3, r2
 8006f88:	3304      	adds	r3, #4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	0c1b      	lsrs	r3, r3, #16
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	011b      	lsls	r3, r3, #4
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	0a1a      	lsrs	r2, r3, #8
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	0c1a      	lsrs	r2, r3, #16
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	3302      	adds	r3, #2
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	0e1a      	lsrs	r2, r3, #24
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	3303      	adds	r3, #3
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	4413      	add	r3, r2
 8007002:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	3304      	adds	r3, #4
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	011b      	lsls	r3, r3, #4
 8007018:	4413      	add	r3, r2
 800701a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	0a1a      	lsrs	r2, r3, #8
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	3305      	adds	r3, #5
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	4413      	add	r3, r2
 8007034:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	0c1a      	lsrs	r2, r3, #16
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	3306      	adds	r3, #6
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	4413      	add	r3, r2
 800704e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	0e1a      	lsrs	r2, r3, #24
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	3307      	adds	r3, #7
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d108      	bne.n	8007076 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0220 	orr.w	r2, r2, #32
 8007072:	60da      	str	r2, [r3, #12]
 8007074:	e007      	b.n	8007086 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0220 	orr.w	r2, r2, #32
 8007084:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e006      	b.n	8007098 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
  }
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070b4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d002      	beq.n	80070c2 <HAL_CAN_ActivateNotification+0x1e>
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d109      	bne.n	80070d6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6959      	ldr	r1, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e006      	b.n	80070e4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
  }
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	@ 0x28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d07c      	beq.n	8007230 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d023      	beq.n	8007188 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2201      	movs	r2, #1
 8007146:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f983 	bl	800745e <HAL_CAN_TxMailbox0CompleteCallback>
 8007158:	e016      	b.n	8007188 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d004      	beq.n	800716e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007166:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800716a:	627b      	str	r3, [r7, #36]	@ 0x24
 800716c:	e00c      	b.n	8007188 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f003 0308 	and.w	r3, r3, #8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800717e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007180:	e002      	b.n	8007188 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f989 	bl	800749a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718e:	2b00      	cmp	r3, #0
 8007190:	d024      	beq.n	80071dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800719a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f963 	bl	8007472 <HAL_CAN_TxMailbox1CompleteCallback>
 80071ac:	e016      	b.n	80071dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d004      	beq.n	80071c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
 80071c0:	e00c      	b.n	80071dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d4:	e002      	b.n	80071dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f969 	bl	80074ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d024      	beq.n	8007230 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80071ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f943 	bl	8007486 <HAL_CAN_TxMailbox2CompleteCallback>
 8007200:	e016      	b.n	8007230 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
 8007214:	e00c      	b.n	8007230 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
 8007228:	e002      	b.n	8007230 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f949 	bl	80074c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00c      	beq.n	8007254 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800724a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2210      	movs	r2, #16
 8007252:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	d006      	beq.n	8007276 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2208      	movs	r2, #8
 800726e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f930 	bl	80074d6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fa f9d0 	bl	8001634 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00c      	beq.n	80072b8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2210      	movs	r2, #16
 80072b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2208      	movs	r2, #8
 80072d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f912 	bl	80074fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f8f9 	bl	80074ea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2210      	movs	r2, #16
 8007312:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8fc 	bl	8007512 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d006      	beq.n	800733c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2208      	movs	r2, #8
 8007334:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8f5 	bl	8007526 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d07b      	beq.n	800743e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d072      	beq.n	8007436 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007356:	2b00      	cmp	r3, #0
 8007358:	d008      	beq.n	800736c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	f043 0302 	orr.w	r3, r3, #2
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800738e:	2b00      	cmp	r3, #0
 8007390:	d008      	beq.n	80073a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	f043 0304 	orr.w	r3, r3, #4
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d043      	beq.n	8007436 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d03e      	beq.n	8007436 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80073be:	2b60      	cmp	r3, #96	@ 0x60
 80073c0:	d02b      	beq.n	800741a <HAL_CAN_IRQHandler+0x32a>
 80073c2:	2b60      	cmp	r3, #96	@ 0x60
 80073c4:	d82e      	bhi.n	8007424 <HAL_CAN_IRQHandler+0x334>
 80073c6:	2b50      	cmp	r3, #80	@ 0x50
 80073c8:	d022      	beq.n	8007410 <HAL_CAN_IRQHandler+0x320>
 80073ca:	2b50      	cmp	r3, #80	@ 0x50
 80073cc:	d82a      	bhi.n	8007424 <HAL_CAN_IRQHandler+0x334>
 80073ce:	2b40      	cmp	r3, #64	@ 0x40
 80073d0:	d019      	beq.n	8007406 <HAL_CAN_IRQHandler+0x316>
 80073d2:	2b40      	cmp	r3, #64	@ 0x40
 80073d4:	d826      	bhi.n	8007424 <HAL_CAN_IRQHandler+0x334>
 80073d6:	2b30      	cmp	r3, #48	@ 0x30
 80073d8:	d010      	beq.n	80073fc <HAL_CAN_IRQHandler+0x30c>
 80073da:	2b30      	cmp	r3, #48	@ 0x30
 80073dc:	d822      	bhi.n	8007424 <HAL_CAN_IRQHandler+0x334>
 80073de:	2b10      	cmp	r3, #16
 80073e0:	d002      	beq.n	80073e8 <HAL_CAN_IRQHandler+0x2f8>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d005      	beq.n	80073f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80073e6:	e01d      	b.n	8007424 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ea:	f043 0308 	orr.w	r3, r3, #8
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80073f0:	e019      	b.n	8007426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	f043 0310 	orr.w	r3, r3, #16
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80073fa:	e014      	b.n	8007426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80073fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fe:	f043 0320 	orr.w	r3, r3, #32
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007404:	e00f      	b.n	8007426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800740e:	e00a      	b.n	8007426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007418:	e005      	b.n	8007426 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007422:	e000      	b.n	8007426 <HAL_CAN_IRQHandler+0x336>
            break;
 8007424:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	699a      	ldr	r2, [r3, #24]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007434:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2204      	movs	r2, #4
 800743c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f872 	bl	800753a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007456:	bf00      	nop
 8007458:	3728      	adds	r7, #40	@ 0x28
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007560:	4b0c      	ldr	r3, [pc, #48]	@ (8007594 <__NVIC_SetPriorityGrouping+0x44>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800756c:	4013      	ands	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800757c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007582:	4a04      	ldr	r2, [pc, #16]	@ (8007594 <__NVIC_SetPriorityGrouping+0x44>)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	60d3      	str	r3, [r2, #12]
}
 8007588:	bf00      	nop
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	e000ed00 	.word	0xe000ed00

08007598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800759c:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <__NVIC_GetPriorityGrouping+0x18>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	0a1b      	lsrs	r3, r3, #8
 80075a2:	f003 0307 	and.w	r3, r3, #7
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	e000ed00 	.word	0xe000ed00

080075b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	db0b      	blt.n	80075de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	f003 021f 	and.w	r2, r3, #31
 80075cc:	4907      	ldr	r1, [pc, #28]	@ (80075ec <__NVIC_EnableIRQ+0x38>)
 80075ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	2001      	movs	r0, #1
 80075d6:	fa00 f202 	lsl.w	r2, r0, r2
 80075da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	e000e100 	.word	0xe000e100

080075f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007600:	2b00      	cmp	r3, #0
 8007602:	db0a      	blt.n	800761a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	490c      	ldr	r1, [pc, #48]	@ (800763c <__NVIC_SetPriority+0x4c>)
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	0112      	lsls	r2, r2, #4
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	440b      	add	r3, r1
 8007614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007618:	e00a      	b.n	8007630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	4908      	ldr	r1, [pc, #32]	@ (8007640 <__NVIC_SetPriority+0x50>)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	3b04      	subs	r3, #4
 8007628:	0112      	lsls	r2, r2, #4
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	440b      	add	r3, r1
 800762e:	761a      	strb	r2, [r3, #24]
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	e000e100 	.word	0xe000e100
 8007640:	e000ed00 	.word	0xe000ed00

08007644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	@ 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f1c3 0307 	rsb	r3, r3, #7
 800765e:	2b04      	cmp	r3, #4
 8007660:	bf28      	it	cs
 8007662:	2304      	movcs	r3, #4
 8007664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3304      	adds	r3, #4
 800766a:	2b06      	cmp	r3, #6
 800766c:	d902      	bls.n	8007674 <NVIC_EncodePriority+0x30>
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3b03      	subs	r3, #3
 8007672:	e000      	b.n	8007676 <NVIC_EncodePriority+0x32>
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	fa02 f303 	lsl.w	r3, r2, r3
 8007682:	43da      	mvns	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	401a      	ands	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800768c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	fa01 f303 	lsl.w	r3, r1, r3
 8007696:	43d9      	mvns	r1, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800769c:	4313      	orrs	r3, r2
         );
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3724      	adds	r7, #36	@ 0x24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
	...

080076ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076bc:	d301      	bcc.n	80076c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076be:	2301      	movs	r3, #1
 80076c0:	e00f      	b.n	80076e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076c2:	4a0a      	ldr	r2, [pc, #40]	@ (80076ec <SysTick_Config+0x40>)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076ca:	210f      	movs	r1, #15
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076d0:	f7ff ff8e 	bl	80075f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076d4:	4b05      	ldr	r3, [pc, #20]	@ (80076ec <SysTick_Config+0x40>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076da:	4b04      	ldr	r3, [pc, #16]	@ (80076ec <SysTick_Config+0x40>)
 80076dc:	2207      	movs	r2, #7
 80076de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	e000e010 	.word	0xe000e010

080076f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff29 	bl	8007550 <__NVIC_SetPriorityGrouping>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007706:	b580      	push	{r7, lr}
 8007708:	b086      	sub	sp, #24
 800770a:	af00      	add	r7, sp, #0
 800770c:	4603      	mov	r3, r0
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007718:	f7ff ff3e 	bl	8007598 <__NVIC_GetPriorityGrouping>
 800771c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	6978      	ldr	r0, [r7, #20]
 8007724:	f7ff ff8e 	bl	8007644 <NVIC_EncodePriority>
 8007728:	4602      	mov	r2, r0
 800772a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff ff5d 	bl	80075f0 <__NVIC_SetPriority>
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	4603      	mov	r3, r0
 8007746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff ff31 	bl	80075b4 <__NVIC_EnableIRQ>
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ffa2 	bl	80076ac <SysTick_Config>
 8007768:	4603      	mov	r3, r0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007780:	f7ff f84e 	bl	8006820 <HAL_GetTick>
 8007784:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e099      	b.n	80078c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0201 	bic.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077b0:	e00f      	b.n	80077d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077b2:	f7ff f835 	bl	8006820 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b05      	cmp	r3, #5
 80077be:	d908      	bls.n	80077d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2203      	movs	r2, #3
 80077ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e078      	b.n	80078c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e8      	bne.n	80077b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4b38      	ldr	r3, [pc, #224]	@ (80078cc <HAL_DMA_Init+0x158>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800780a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	2b04      	cmp	r3, #4
 800782a:	d107      	bne.n	800783c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007834:	4313      	orrs	r3, r2
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4313      	orrs	r3, r2
 800783a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f023 0307 	bic.w	r3, r3, #7
 8007852:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007862:	2b04      	cmp	r3, #4
 8007864:	d117      	bne.n	8007896 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fb01 	bl	8007e80 <DMA_CheckFifoParam>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2240      	movs	r2, #64	@ 0x40
 8007888:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007892:	2301      	movs	r3, #1
 8007894:	e016      	b.n	80078c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fab8 	bl	8007e14 <DMA_CalcBaseAndBitshift>
 80078a4:	4603      	mov	r3, r0
 80078a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078ac:	223f      	movs	r2, #63	@ 0x3f
 80078ae:	409a      	lsls	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	f010803f 	.word	0xf010803f

080078d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d101      	bne.n	80078f6 <HAL_DMA_Start_IT+0x26>
 80078f2:	2302      	movs	r3, #2
 80078f4:	e040      	b.n	8007978 <HAL_DMA_Start_IT+0xa8>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b01      	cmp	r3, #1
 8007908:	d12f      	bne.n	800796a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fa4a 	bl	8007db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007928:	223f      	movs	r2, #63	@ 0x3f
 800792a:	409a      	lsls	r2, r3
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0216 	orr.w	r2, r2, #22
 800793e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0208 	orr.w	r2, r2, #8
 8007956:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0201 	orr.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e005      	b.n	8007976 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007972:	2302      	movs	r3, #2
 8007974:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800798c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800798e:	f7fe ff47 	bl	8006820 <HAL_GetTick>
 8007992:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d008      	beq.n	80079b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2280      	movs	r2, #128	@ 0x80
 80079a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e052      	b.n	8007a58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0216 	bic.w	r2, r2, #22
 80079c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <HAL_DMA_Abort+0x62>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0208 	bic.w	r2, r2, #8
 80079f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a02:	e013      	b.n	8007a2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a04:	f7fe ff0c 	bl	8006820 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d90c      	bls.n	8007a2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e015      	b.n	8007a58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e4      	bne.n	8007a04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a3e:	223f      	movs	r2, #63	@ 0x3f
 8007a40:	409a      	lsls	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d004      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2280      	movs	r2, #128	@ 0x80
 8007a78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e00c      	b.n	8007a98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2205      	movs	r2, #5
 8007a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ab0:	4b8e      	ldr	r3, [pc, #568]	@ (8007cec <HAL_DMA_IRQHandler+0x248>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a8e      	ldr	r2, [pc, #568]	@ (8007cf0 <HAL_DMA_IRQHandler+0x24c>)
 8007ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aba:	0a9b      	lsrs	r3, r3, #10
 8007abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ace:	2208      	movs	r2, #8
 8007ad0:	409a      	lsls	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01a      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d013      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0204 	bic.w	r2, r2, #4
 8007af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afc:	2208      	movs	r2, #8
 8007afe:	409a      	lsls	r2, r3
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b08:	f043 0201 	orr.w	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b14:	2201      	movs	r2, #1
 8007b16:	409a      	lsls	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d012      	beq.n	8007b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b32:	2201      	movs	r2, #1
 8007b34:	409a      	lsls	r2, r3
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3e:	f043 0202 	orr.w	r2, r3, #2
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	409a      	lsls	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4013      	ands	r3, r2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d012      	beq.n	8007b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b68:	2204      	movs	r2, #4
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b74:	f043 0204 	orr.w	r2, r3, #4
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b80:	2210      	movs	r2, #16
 8007b82:	409a      	lsls	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d043      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d03c      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b9e:	2210      	movs	r2, #16
 8007ba0:	409a      	lsls	r2, r3
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d018      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d108      	bne.n	8007bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d024      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
 8007bd2:	e01f      	b.n	8007c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01b      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
 8007be4:	e016      	b.n	8007c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d107      	bne.n	8007c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0208 	bic.w	r2, r2, #8
 8007c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c18:	2220      	movs	r2, #32
 8007c1a:	409a      	lsls	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 808f 	beq.w	8007d44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8087 	beq.w	8007d44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	409a      	lsls	r2, r3
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b05      	cmp	r3, #5
 8007c4c:	d136      	bne.n	8007cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0216 	bic.w	r2, r2, #22
 8007c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695a      	ldr	r2, [r3, #20]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <HAL_DMA_IRQHandler+0x1da>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0208 	bic.w	r2, r2, #8
 8007c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c92:	223f      	movs	r2, #63	@ 0x3f
 8007c94:	409a      	lsls	r2, r3
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d07e      	beq.n	8007db0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
        }
        return;
 8007cba:	e079      	b.n	8007db0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d01d      	beq.n	8007d06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10d      	bne.n	8007cf4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d031      	beq.n	8007d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	4798      	blx	r3
 8007ce8:	e02c      	b.n	8007d44 <HAL_DMA_IRQHandler+0x2a0>
 8007cea:	bf00      	nop
 8007cec:	2000011c 	.word	0x2000011c
 8007cf0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d023      	beq.n	8007d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
 8007d04:	e01e      	b.n	8007d44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10f      	bne.n	8007d34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0210 	bic.w	r2, r2, #16
 8007d22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d032      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d022      	beq.n	8007d9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2205      	movs	r2, #5
 8007d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d307      	bcc.n	8007d8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f2      	bne.n	8007d70 <HAL_DMA_IRQHandler+0x2cc>
 8007d8a:	e000      	b.n	8007d8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007d8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
 8007dae:	e000      	b.n	8007db2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007db0:	bf00      	nop
    }
  }
}
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b40      	cmp	r3, #64	@ 0x40
 8007de4:	d108      	bne.n	8007df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007df6:	e007      	b.n	8007e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	3b10      	subs	r3, #16
 8007e24:	4a14      	ldr	r2, [pc, #80]	@ (8007e78 <DMA_CalcBaseAndBitshift+0x64>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	091b      	lsrs	r3, r3, #4
 8007e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e2e:	4a13      	ldr	r2, [pc, #76]	@ (8007e7c <DMA_CalcBaseAndBitshift+0x68>)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d909      	bls.n	8007e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007e4a:	f023 0303 	bic.w	r3, r3, #3
 8007e4e:	1d1a      	adds	r2, r3, #4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e54:	e007      	b.n	8007e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	aaaaaaab 	.word	0xaaaaaaab
 8007e7c:	0801256c 	.word	0x0801256c

08007e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d11f      	bne.n	8007eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d856      	bhi.n	8007f4e <DMA_CheckFifoParam+0xce>
 8007ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea8 <DMA_CheckFifoParam+0x28>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007ecb 	.word	0x08007ecb
 8007eb0:	08007eb9 	.word	0x08007eb9
 8007eb4:	08007f4f 	.word	0x08007f4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d046      	beq.n	8007f52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ec8:	e043      	b.n	8007f52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007ed2:	d140      	bne.n	8007f56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ed8:	e03d      	b.n	8007f56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ee2:	d121      	bne.n	8007f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d837      	bhi.n	8007f5a <DMA_CheckFifoParam+0xda>
 8007eea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <DMA_CheckFifoParam+0x70>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f01 	.word	0x08007f01
 8007ef4:	08007f07 	.word	0x08007f07
 8007ef8:	08007f01 	.word	0x08007f01
 8007efc:	08007f19 	.word	0x08007f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]
      break;
 8007f04:	e030      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d025      	beq.n	8007f5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f16:	e022      	b.n	8007f5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007f20:	d11f      	bne.n	8007f62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007f26:	e01c      	b.n	8007f62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d903      	bls.n	8007f36 <DMA_CheckFifoParam+0xb6>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d003      	beq.n	8007f3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007f34:	e018      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	73fb      	strb	r3, [r7, #15]
      break;
 8007f3a:	e015      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00e      	beq.n	8007f66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4c:	e00b      	b.n	8007f66 <DMA_CheckFifoParam+0xe6>
      break;
 8007f4e:	bf00      	nop
 8007f50:	e00a      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      break;
 8007f52:	bf00      	nop
 8007f54:	e008      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      break;
 8007f56:	bf00      	nop
 8007f58:	e006      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      break;
 8007f5a:	bf00      	nop
 8007f5c:	e004      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      break;
 8007f5e:	bf00      	nop
 8007f60:	e002      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      break;   
 8007f62:	bf00      	nop
 8007f64:	e000      	b.n	8007f68 <DMA_CheckFifoParam+0xe8>
      break;
 8007f66:	bf00      	nop
    }
  } 
  
  return status; 
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop

08007f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b089      	sub	sp, #36	@ 0x24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e16b      	b.n	800826c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f94:	2201      	movs	r2, #1
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	f040 815a 	bne.w	8008266 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d005      	beq.n	8007fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d130      	bne.n	800802c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	2203      	movs	r2, #3
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008000:	2201      	movs	r2, #1
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	43db      	mvns	r3, r3
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4013      	ands	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	091b      	lsrs	r3, r3, #4
 8008016:	f003 0201 	and.w	r2, r3, #1
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4313      	orrs	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	2b03      	cmp	r3, #3
 8008036:	d017      	beq.n	8008068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	2203      	movs	r2, #3
 8008044:	fa02 f303 	lsl.w	r3, r2, r3
 8008048:	43db      	mvns	r3, r3
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	4013      	ands	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	4313      	orrs	r3, r2
 8008060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d123      	bne.n	80080bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	08da      	lsrs	r2, r3, #3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3208      	adds	r2, #8
 800807c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	220f      	movs	r2, #15
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	43db      	mvns	r3, r3
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	4013      	ands	r3, r2
 8008096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	fa02 f303 	lsl.w	r3, r2, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	08da      	lsrs	r2, r3, #3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3208      	adds	r2, #8
 80080b6:	69b9      	ldr	r1, [r7, #24]
 80080b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	2203      	movs	r2, #3
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	43db      	mvns	r3, r3
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	4013      	ands	r3, r2
 80080d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f003 0203 	and.w	r2, r3, #3
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80b4 	beq.w	8008266 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080fe:	2300      	movs	r3, #0
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	4b60      	ldr	r3, [pc, #384]	@ (8008284 <HAL_GPIO_Init+0x30c>)
 8008104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008106:	4a5f      	ldr	r2, [pc, #380]	@ (8008284 <HAL_GPIO_Init+0x30c>)
 8008108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800810c:	6453      	str	r3, [r2, #68]	@ 0x44
 800810e:	4b5d      	ldr	r3, [pc, #372]	@ (8008284 <HAL_GPIO_Init+0x30c>)
 8008110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800811a:	4a5b      	ldr	r2, [pc, #364]	@ (8008288 <HAL_GPIO_Init+0x310>)
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	089b      	lsrs	r3, r3, #2
 8008120:	3302      	adds	r3, #2
 8008122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	220f      	movs	r2, #15
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	43db      	mvns	r3, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4013      	ands	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a52      	ldr	r2, [pc, #328]	@ (800828c <HAL_GPIO_Init+0x314>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d02b      	beq.n	800819e <HAL_GPIO_Init+0x226>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a51      	ldr	r2, [pc, #324]	@ (8008290 <HAL_GPIO_Init+0x318>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d025      	beq.n	800819a <HAL_GPIO_Init+0x222>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a50      	ldr	r2, [pc, #320]	@ (8008294 <HAL_GPIO_Init+0x31c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d01f      	beq.n	8008196 <HAL_GPIO_Init+0x21e>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a4f      	ldr	r2, [pc, #316]	@ (8008298 <HAL_GPIO_Init+0x320>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d019      	beq.n	8008192 <HAL_GPIO_Init+0x21a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a4e      	ldr	r2, [pc, #312]	@ (800829c <HAL_GPIO_Init+0x324>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d013      	beq.n	800818e <HAL_GPIO_Init+0x216>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a4d      	ldr	r2, [pc, #308]	@ (80082a0 <HAL_GPIO_Init+0x328>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00d      	beq.n	800818a <HAL_GPIO_Init+0x212>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a4c      	ldr	r2, [pc, #304]	@ (80082a4 <HAL_GPIO_Init+0x32c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d007      	beq.n	8008186 <HAL_GPIO_Init+0x20e>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a4b      	ldr	r2, [pc, #300]	@ (80082a8 <HAL_GPIO_Init+0x330>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d101      	bne.n	8008182 <HAL_GPIO_Init+0x20a>
 800817e:	2307      	movs	r3, #7
 8008180:	e00e      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 8008182:	2308      	movs	r3, #8
 8008184:	e00c      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 8008186:	2306      	movs	r3, #6
 8008188:	e00a      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 800818a:	2305      	movs	r3, #5
 800818c:	e008      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 800818e:	2304      	movs	r3, #4
 8008190:	e006      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 8008192:	2303      	movs	r3, #3
 8008194:	e004      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 8008196:	2302      	movs	r3, #2
 8008198:	e002      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <HAL_GPIO_Init+0x228>
 800819e:	2300      	movs	r3, #0
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	f002 0203 	and.w	r2, r2, #3
 80081a6:	0092      	lsls	r2, r2, #2
 80081a8:	4093      	lsls	r3, r2
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081b0:	4935      	ldr	r1, [pc, #212]	@ (8008288 <HAL_GPIO_Init+0x310>)
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	089b      	lsrs	r3, r3, #2
 80081b6:	3302      	adds	r3, #2
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80081be:	4b3b      	ldr	r3, [pc, #236]	@ (80082ac <HAL_GPIO_Init+0x334>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	43db      	mvns	r3, r3
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	4013      	ands	r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80081e2:	4a32      	ldr	r2, [pc, #200]	@ (80082ac <HAL_GPIO_Init+0x334>)
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081e8:	4b30      	ldr	r3, [pc, #192]	@ (80082ac <HAL_GPIO_Init+0x334>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	4013      	ands	r3, r2
 80081f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800820c:	4a27      	ldr	r2, [pc, #156]	@ (80082ac <HAL_GPIO_Init+0x334>)
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008212:	4b26      	ldr	r3, [pc, #152]	@ (80082ac <HAL_GPIO_Init+0x334>)
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	43db      	mvns	r3, r3
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	4013      	ands	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008236:	4a1d      	ldr	r2, [pc, #116]	@ (80082ac <HAL_GPIO_Init+0x334>)
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800823c:	4b1b      	ldr	r3, [pc, #108]	@ (80082ac <HAL_GPIO_Init+0x334>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	43db      	mvns	r3, r3
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	4013      	ands	r3, r2
 800824a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008260:	4a12      	ldr	r2, [pc, #72]	@ (80082ac <HAL_GPIO_Init+0x334>)
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	3301      	adds	r3, #1
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2b0f      	cmp	r3, #15
 8008270:	f67f ae90 	bls.w	8007f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	3724      	adds	r7, #36	@ 0x24
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	40023800 	.word	0x40023800
 8008288:	40013800 	.word	0x40013800
 800828c:	40020000 	.word	0x40020000
 8008290:	40020400 	.word	0x40020400
 8008294:	40020800 	.word	0x40020800
 8008298:	40020c00 	.word	0x40020c00
 800829c:	40021000 	.word	0x40021000
 80082a0:	40021400 	.word	0x40021400
 80082a4:	40021800 	.word	0x40021800
 80082a8:	40021c00 	.word	0x40021c00
 80082ac:	40013c00 	.word	0x40013c00

080082b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	807b      	strh	r3, [r7, #2]
 80082bc:	4613      	mov	r3, r2
 80082be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80082c0:	787b      	ldrb	r3, [r7, #1]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082c6:	887a      	ldrh	r2, [r7, #2]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80082cc:	e003      	b.n	80082d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80082ce:	887b      	ldrh	r3, [r7, #2]
 80082d0:	041a      	lsls	r2, r3, #16
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	619a      	str	r2, [r3, #24]
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
	...

080082e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80082ee:	4b08      	ldr	r3, [pc, #32]	@ (8008310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	4013      	ands	r3, r2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d006      	beq.n	8008308 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80082fa:	4a05      	ldr	r2, [pc, #20]	@ (8008310 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	4618      	mov	r0, r3
 8008304:	f7fa fe9c 	bl	8003040 <HAL_GPIO_EXTI_Callback>
  }
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	40013c00 	.word	0x40013c00

08008314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e12b      	b.n	800857e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d106      	bne.n	8008340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7fd fb72 	bl	8005a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2224      	movs	r2, #36	@ 0x24
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008378:	f001 fc2c 	bl	8009bd4 <HAL_RCC_GetPCLK1Freq>
 800837c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	4a81      	ldr	r2, [pc, #516]	@ (8008588 <HAL_I2C_Init+0x274>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d807      	bhi.n	8008398 <HAL_I2C_Init+0x84>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4a80      	ldr	r2, [pc, #512]	@ (800858c <HAL_I2C_Init+0x278>)
 800838c:	4293      	cmp	r3, r2
 800838e:	bf94      	ite	ls
 8008390:	2301      	movls	r3, #1
 8008392:	2300      	movhi	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	e006      	b.n	80083a6 <HAL_I2C_Init+0x92>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4a7d      	ldr	r2, [pc, #500]	@ (8008590 <HAL_I2C_Init+0x27c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	bf94      	ite	ls
 80083a0:	2301      	movls	r3, #1
 80083a2:	2300      	movhi	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e0e7      	b.n	800857e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4a78      	ldr	r2, [pc, #480]	@ (8008594 <HAL_I2C_Init+0x280>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	0c9b      	lsrs	r3, r3, #18
 80083b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	4a6a      	ldr	r2, [pc, #424]	@ (8008588 <HAL_I2C_Init+0x274>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d802      	bhi.n	80083e8 <HAL_I2C_Init+0xd4>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	3301      	adds	r3, #1
 80083e6:	e009      	b.n	80083fc <HAL_I2C_Init+0xe8>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80083ee:	fb02 f303 	mul.w	r3, r2, r3
 80083f2:	4a69      	ldr	r2, [pc, #420]	@ (8008598 <HAL_I2C_Init+0x284>)
 80083f4:	fba2 2303 	umull	r2, r3, r2, r3
 80083f8:	099b      	lsrs	r3, r3, #6
 80083fa:	3301      	adds	r3, #1
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	430b      	orrs	r3, r1
 8008402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800840e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	495c      	ldr	r1, [pc, #368]	@ (8008588 <HAL_I2C_Init+0x274>)
 8008418:	428b      	cmp	r3, r1
 800841a:	d819      	bhi.n	8008450 <HAL_I2C_Init+0x13c>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	1e59      	subs	r1, r3, #1
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	fbb1 f3f3 	udiv	r3, r1, r3
 800842a:	1c59      	adds	r1, r3, #1
 800842c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008430:	400b      	ands	r3, r1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <HAL_I2C_Init+0x138>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	1e59      	subs	r1, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	fbb1 f3f3 	udiv	r3, r1, r3
 8008444:	3301      	adds	r3, #1
 8008446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800844a:	e051      	b.n	80084f0 <HAL_I2C_Init+0x1dc>
 800844c:	2304      	movs	r3, #4
 800844e:	e04f      	b.n	80084f0 <HAL_I2C_Init+0x1dc>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d111      	bne.n	800847c <HAL_I2C_Init+0x168>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	1e58      	subs	r0, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6859      	ldr	r1, [r3, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	440b      	add	r3, r1
 8008466:	fbb0 f3f3 	udiv	r3, r0, r3
 800846a:	3301      	adds	r3, #1
 800846c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008470:	2b00      	cmp	r3, #0
 8008472:	bf0c      	ite	eq
 8008474:	2301      	moveq	r3, #1
 8008476:	2300      	movne	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	e012      	b.n	80084a2 <HAL_I2C_Init+0x18e>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	1e58      	subs	r0, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6859      	ldr	r1, [r3, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	0099      	lsls	r1, r3, #2
 800848c:	440b      	add	r3, r1
 800848e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008492:	3301      	adds	r3, #1
 8008494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008498:	2b00      	cmp	r3, #0
 800849a:	bf0c      	ite	eq
 800849c:	2301      	moveq	r3, #1
 800849e:	2300      	movne	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <HAL_I2C_Init+0x196>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e022      	b.n	80084f0 <HAL_I2C_Init+0x1dc>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10e      	bne.n	80084d0 <HAL_I2C_Init+0x1bc>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	1e58      	subs	r0, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6859      	ldr	r1, [r3, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	440b      	add	r3, r1
 80084c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80084c4:	3301      	adds	r3, #1
 80084c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ce:	e00f      	b.n	80084f0 <HAL_I2C_Init+0x1dc>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	1e58      	subs	r0, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6859      	ldr	r1, [r3, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	440b      	add	r3, r1
 80084de:	0099      	lsls	r1, r3, #2
 80084e0:	440b      	add	r3, r1
 80084e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80084e6:	3301      	adds	r3, #1
 80084e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	6809      	ldr	r1, [r1, #0]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69da      	ldr	r2, [r3, #28]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800851e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6911      	ldr	r1, [r2, #16]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	68d2      	ldr	r2, [r2, #12]
 800852a:	4311      	orrs	r1, r2
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	430b      	orrs	r3, r1
 8008532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695a      	ldr	r2, [r3, #20]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0201 	orr.w	r2, r2, #1
 800855e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	000186a0 	.word	0x000186a0
 800858c:	001e847f 	.word	0x001e847f
 8008590:	003d08ff 	.word	0x003d08ff
 8008594:	431bde83 	.word	0x431bde83
 8008598:	10624dd3 	.word	0x10624dd3

0800859c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	461a      	mov	r2, r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	817b      	strh	r3, [r7, #10]
 80085ae:	460b      	mov	r3, r1
 80085b0:	813b      	strh	r3, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085b6:	f7fe f933 	bl	8006820 <HAL_GetTick>
 80085ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	f040 80d9 	bne.w	800877c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2319      	movs	r3, #25
 80085d0:	2201      	movs	r2, #1
 80085d2:	496d      	ldr	r1, [pc, #436]	@ (8008788 <HAL_I2C_Mem_Write+0x1ec>)
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 fc8b 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
 80085e2:	e0cc      	b.n	800877e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d101      	bne.n	80085f2 <HAL_I2C_Mem_Write+0x56>
 80085ee:	2302      	movs	r3, #2
 80085f0:	e0c5      	b.n	800877e <HAL_I2C_Mem_Write+0x1e2>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b01      	cmp	r3, #1
 8008606:	d007      	beq.n	8008618 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0201 	orr.w	r2, r2, #1
 8008616:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008626:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2221      	movs	r2, #33	@ 0x21
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2240      	movs	r2, #64	@ 0x40
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a3a      	ldr	r2, [r7, #32]
 8008642:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008648:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4a4d      	ldr	r2, [pc, #308]	@ (800878c <HAL_I2C_Mem_Write+0x1f0>)
 8008658:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800865a:	88f8      	ldrh	r0, [r7, #6]
 800865c:	893a      	ldrh	r2, [r7, #8]
 800865e:	8979      	ldrh	r1, [r7, #10]
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	4603      	mov	r3, r0
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fac2 	bl	8008bf4 <I2C_RequestMemoryWrite>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d052      	beq.n	800871c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e081      	b.n	800877e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 fd50 	bl	8009124 <I2C_WaitOnTXEFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00d      	beq.n	80086a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868e:	2b04      	cmp	r3, #4
 8008690:	d107      	bne.n	80086a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e06b      	b.n	800877e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	3b01      	subs	r3, #1
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d11b      	bne.n	800871c <HAL_I2C_Mem_Write+0x180>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d017      	beq.n	800871c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	781a      	ldrb	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008706:	3b01      	subs	r3, #1
 8008708:	b29a      	uxth	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008712:	b29b      	uxth	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1aa      	bne.n	800867a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fd43 	bl	80091b4 <I2C_WaitOnBTFFlagUntilTimeout>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00d      	beq.n	8008750 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008738:	2b04      	cmp	r3, #4
 800873a:	d107      	bne.n	800874c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800874a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e016      	b.n	800877e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800875e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	e000      	b.n	800877e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800877c:	2302      	movs	r3, #2
  }
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	00100002 	.word	0x00100002
 800878c:	ffff0000 	.word	0xffff0000

08008790 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08c      	sub	sp, #48	@ 0x30
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	4608      	mov	r0, r1
 800879a:	4611      	mov	r1, r2
 800879c:	461a      	mov	r2, r3
 800879e:	4603      	mov	r3, r0
 80087a0:	817b      	strh	r3, [r7, #10]
 80087a2:	460b      	mov	r3, r1
 80087a4:	813b      	strh	r3, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087aa:	f7fe f839 	bl	8006820 <HAL_GetTick>
 80087ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	f040 8214 	bne.w	8008be6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	2319      	movs	r3, #25
 80087c4:	2201      	movs	r2, #1
 80087c6:	497b      	ldr	r1, [pc, #492]	@ (80089b4 <HAL_I2C_Mem_Read+0x224>)
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 fb91 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80087d4:	2302      	movs	r3, #2
 80087d6:	e207      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_I2C_Mem_Read+0x56>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e200      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d007      	beq.n	800880c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0201 	orr.w	r2, r2, #1
 800880a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800881a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2222      	movs	r2, #34	@ 0x22
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2240      	movs	r2, #64	@ 0x40
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008836:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800883c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4a5b      	ldr	r2, [pc, #364]	@ (80089b8 <HAL_I2C_Mem_Read+0x228>)
 800884c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800884e:	88f8      	ldrh	r0, [r7, #6]
 8008850:	893a      	ldrh	r2, [r7, #8]
 8008852:	8979      	ldrh	r1, [r7, #10]
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4603      	mov	r3, r0
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 fa5e 	bl	8008d20 <I2C_RequestMemoryRead>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e1bc      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008872:	2b00      	cmp	r3, #0
 8008874:	d113      	bne.n	800889e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008876:	2300      	movs	r3, #0
 8008878:	623b      	str	r3, [r7, #32]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	623b      	str	r3, [r7, #32]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	623b      	str	r3, [r7, #32]
 800888a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e190      	b.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d11b      	bne.n	80088de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	61fb      	str	r3, [r7, #28]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	61fb      	str	r3, [r7, #28]
 80088ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e170      	b.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d11b      	bne.n	800891e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008906:	2300      	movs	r3, #0
 8008908:	61bb      	str	r3, [r7, #24]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	e150      	b.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800891e:	2300      	movs	r3, #0
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	617b      	str	r3, [r7, #20]
 8008932:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008934:	e144      	b.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800893a:	2b03      	cmp	r3, #3
 800893c:	f200 80f1 	bhi.w	8008b22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008944:	2b01      	cmp	r3, #1
 8008946:	d123      	bne.n	8008990 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800894a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fc79 	bl	8009244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e145      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	b29a      	uxth	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800898e:	e117      	b.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008994:	2b02      	cmp	r3, #2
 8008996:	d14e      	bne.n	8008a36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	2200      	movs	r2, #0
 80089a0:	4906      	ldr	r1, [pc, #24]	@ (80089bc <HAL_I2C_Mem_Read+0x22c>)
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 faa4 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e11a      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
 80089b2:	bf00      	nop
 80089b4:	00100002 	.word	0x00100002
 80089b8:	ffff0000 	.word	0xffff0000
 80089bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	691a      	ldr	r2, [r3, #16]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008a34:	e0c4      	b.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	496c      	ldr	r1, [pc, #432]	@ (8008bf0 <HAL_I2C_Mem_Read+0x460>)
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fa55 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e0cb      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	2200      	movs	r2, #0
 8008a9a:	4955      	ldr	r1, [pc, #340]	@ (8008bf0 <HAL_I2C_Mem_Read+0x460>)
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fa27 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e09d      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008b20:	e04e      	b.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fb8c 	bl	8009244 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e058      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	691a      	ldr	r2, [r3, #16]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b40:	b2d2      	uxtb	r2, r2
 8008b42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b52:	3b01      	subs	r3, #1
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d124      	bne.n	8008bc0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d107      	bne.n	8008b8e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b8c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b98:	b2d2      	uxtb	r2, r2
 8008b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f aeb6 	bne.w	8008936 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e000      	b.n	8008be8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008be6:	2302      	movs	r3, #2
  }
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3728      	adds	r7, #40	@ 0x28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	00010004 	.word	0x00010004

08008bf4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af02      	add	r7, sp, #8
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	461a      	mov	r2, r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	817b      	strh	r3, [r7, #10]
 8008c06:	460b      	mov	r3, r1
 8008c08:	813b      	strh	r3, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	6a3b      	ldr	r3, [r7, #32]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 f960 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00d      	beq.n	8008c52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c44:	d103      	bne.n	8008c4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e05f      	b.n	8008d12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c52:	897b      	ldrh	r3, [r7, #10]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	461a      	mov	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008c60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	6a3a      	ldr	r2, [r7, #32]
 8008c66:	492d      	ldr	r1, [pc, #180]	@ (8008d1c <I2C_RequestMemoryWrite+0x128>)
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 f9bb 	bl	8008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e04c      	b.n	8008d12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	617b      	str	r3, [r7, #20]
 8008c8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c90:	6a39      	ldr	r1, [r7, #32]
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fa46 	bl	8009124 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00d      	beq.n	8008cba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d107      	bne.n	8008cb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e02b      	b.n	8008d12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d105      	bne.n	8008ccc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cc0:	893b      	ldrh	r3, [r7, #8]
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	611a      	str	r2, [r3, #16]
 8008cca:	e021      	b.n	8008d10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ccc:	893b      	ldrh	r3, [r7, #8]
 8008cce:	0a1b      	lsrs	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cdc:	6a39      	ldr	r1, [r7, #32]
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fa20 	bl	8009124 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00d      	beq.n	8008d06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d107      	bne.n	8008d02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e005      	b.n	8008d12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d06:	893b      	ldrh	r3, [r7, #8]
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	00010002 	.word	0x00010002

08008d20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	4603      	mov	r3, r0
 8008d30:	817b      	strh	r3, [r7, #10]
 8008d32:	460b      	mov	r3, r1
 8008d34:	813b      	strh	r3, [r7, #8]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f8c2 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00d      	beq.n	8008d8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d80:	d103      	bne.n	8008d8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e0aa      	b.n	8008ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008d8e:	897b      	ldrh	r3, [r7, #10]
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	461a      	mov	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008d9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	6a3a      	ldr	r2, [r7, #32]
 8008da2:	4952      	ldr	r1, [pc, #328]	@ (8008eec <I2C_RequestMemoryRead+0x1cc>)
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 f91d 	bl	8008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e097      	b.n	8008ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008db4:	2300      	movs	r3, #0
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dcc:	6a39      	ldr	r1, [r7, #32]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f9a8 	bl	8009124 <I2C_WaitOnTXEFlagUntilTimeout>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00d      	beq.n	8008df6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d107      	bne.n	8008df2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008df0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e076      	b.n	8008ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d105      	bne.n	8008e08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008dfc:	893b      	ldrh	r3, [r7, #8]
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	611a      	str	r2, [r3, #16]
 8008e06:	e021      	b.n	8008e4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e08:	893b      	ldrh	r3, [r7, #8]
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e18:	6a39      	ldr	r1, [r7, #32]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f982 	bl	8009124 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00d      	beq.n	8008e42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d107      	bne.n	8008e3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e050      	b.n	8008ee4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e42:	893b      	ldrh	r3, [r7, #8]
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e4e:	6a39      	ldr	r1, [r7, #32]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 f967 	bl	8009124 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00d      	beq.n	8008e78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d107      	bne.n	8008e74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e035      	b.n	8008ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f82b 	bl	8008ef0 <I2C_WaitOnFlagUntilTimeout>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00d      	beq.n	8008ebc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eae:	d103      	bne.n	8008eb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e013      	b.n	8008ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ebc:	897b      	ldrh	r3, [r7, #10]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	4906      	ldr	r1, [pc, #24]	@ (8008eec <I2C_RequestMemoryRead+0x1cc>)
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 f886 	bl	8008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	00010002 	.word	0x00010002

08008ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	4613      	mov	r3, r2
 8008efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f00:	e048      	b.n	8008f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f08:	d044      	beq.n	8008f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0a:	f7fd fc89 	bl	8006820 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d302      	bcc.n	8008f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d139      	bne.n	8008f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	0c1b      	lsrs	r3, r3, #16
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d10d      	bne.n	8008f46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	43da      	mvns	r2, r3
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	4013      	ands	r3, r2
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	461a      	mov	r2, r3
 8008f44:	e00c      	b.n	8008f60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	43da      	mvns	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	4013      	ands	r3, r2
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bf0c      	ite	eq
 8008f58:	2301      	moveq	r3, #1
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	461a      	mov	r2, r3
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d116      	bne.n	8008f94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f80:	f043 0220 	orr.w	r2, r3, #32
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e023      	b.n	8008fdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	0c1b      	lsrs	r3, r3, #16
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d10d      	bne.n	8008fba <I2C_WaitOnFlagUntilTimeout+0xca>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	43da      	mvns	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	e00c      	b.n	8008fd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	43da      	mvns	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bf0c      	ite	eq
 8008fcc:	2301      	moveq	r3, #1
 8008fce:	2300      	movne	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d093      	beq.n	8008f02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ff2:	e071      	b.n	80090d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009002:	d123      	bne.n	800904c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009012:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800901c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009038:	f043 0204 	orr.w	r2, r3, #4
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e067      	b.n	800911c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009052:	d041      	beq.n	80090d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009054:	f7fd fbe4 	bl	8006820 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d302      	bcc.n	800906a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d136      	bne.n	80090d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	0c1b      	lsrs	r3, r3, #16
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b01      	cmp	r3, #1
 8009072:	d10c      	bne.n	800908e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	43da      	mvns	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	4013      	ands	r3, r2
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	bf14      	ite	ne
 8009086:	2301      	movne	r3, #1
 8009088:	2300      	moveq	r3, #0
 800908a:	b2db      	uxtb	r3, r3
 800908c:	e00b      	b.n	80090a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	43da      	mvns	r2, r3
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	4013      	ands	r3, r2
 800909a:	b29b      	uxth	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	bf14      	ite	ne
 80090a0:	2301      	movne	r3, #1
 80090a2:	2300      	moveq	r3, #0
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d016      	beq.n	80090d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c4:	f043 0220 	orr.w	r2, r3, #32
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e021      	b.n	800911c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	0c1b      	lsrs	r3, r3, #16
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d10c      	bne.n	80090fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	43da      	mvns	r2, r3
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4013      	ands	r3, r2
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bf14      	ite	ne
 80090f4:	2301      	movne	r3, #1
 80090f6:	2300      	moveq	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	e00b      	b.n	8009114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	43da      	mvns	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4013      	ands	r3, r2
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	bf14      	ite	ne
 800910e:	2301      	movne	r3, #1
 8009110:	2300      	moveq	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	f47f af6d 	bne.w	8008ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009130:	e034      	b.n	800919c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 f8e3 	bl	80092fe <I2C_IsAcknowledgeFailed>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e034      	b.n	80091ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009148:	d028      	beq.n	800919c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800914a:	f7fd fb69 	bl	8006820 <HAL_GetTick>
 800914e:	4602      	mov	r2, r0
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	429a      	cmp	r2, r3
 8009158:	d302      	bcc.n	8009160 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11d      	bne.n	800919c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800916a:	2b80      	cmp	r3, #128	@ 0x80
 800916c:	d016      	beq.n	800919c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2220      	movs	r2, #32
 8009178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009188:	f043 0220 	orr.w	r2, r3, #32
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e007      	b.n	80091ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a6:	2b80      	cmp	r3, #128	@ 0x80
 80091a8:	d1c3      	bne.n	8009132 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091c0:	e034      	b.n	800922c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f89b 	bl	80092fe <I2C_IsAcknowledgeFailed>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e034      	b.n	800923c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091d8:	d028      	beq.n	800922c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091da:	f7fd fb21 	bl	8006820 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d302      	bcc.n	80091f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11d      	bne.n	800922c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d016      	beq.n	800922c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009218:	f043 0220 	orr.w	r2, r3, #32
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e007      	b.n	800923c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b04      	cmp	r3, #4
 8009238:	d1c3      	bne.n	80091c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009250:	e049      	b.n	80092e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b10      	cmp	r3, #16
 800925e:	d119      	bne.n	8009294 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0210 	mvn.w	r2, #16
 8009268:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e030      	b.n	80092f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009294:	f7fd fac4 	bl	8006820 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d302      	bcc.n	80092aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d11d      	bne.n	80092e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b4:	2b40      	cmp	r3, #64	@ 0x40
 80092b6:	d016      	beq.n	80092e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d2:	f043 0220 	orr.w	r2, r3, #32
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e007      	b.n	80092f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092f0:	2b40      	cmp	r3, #64	@ 0x40
 80092f2:	d1ae      	bne.n	8009252 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009314:	d11b      	bne.n	800934e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800931e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2220      	movs	r2, #32
 800932a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933a:	f043 0204 	orr.w	r2, r3, #4
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e267      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d075      	beq.n	8009466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800937a:	4b88      	ldr	r3, [pc, #544]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 030c 	and.w	r3, r3, #12
 8009382:	2b04      	cmp	r3, #4
 8009384:	d00c      	beq.n	80093a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009386:	4b85      	ldr	r3, [pc, #532]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800938e:	2b08      	cmp	r3, #8
 8009390:	d112      	bne.n	80093b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009392:	4b82      	ldr	r3, [pc, #520]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800939a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800939e:	d10b      	bne.n	80093b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093a0:	4b7e      	ldr	r3, [pc, #504]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d05b      	beq.n	8009464 <HAL_RCC_OscConfig+0x108>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d157      	bne.n	8009464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e242      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093c0:	d106      	bne.n	80093d0 <HAL_RCC_OscConfig+0x74>
 80093c2:	4b76      	ldr	r3, [pc, #472]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a75      	ldr	r2, [pc, #468]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093cc:	6013      	str	r3, [r2, #0]
 80093ce:	e01d      	b.n	800940c <HAL_RCC_OscConfig+0xb0>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093d8:	d10c      	bne.n	80093f4 <HAL_RCC_OscConfig+0x98>
 80093da:	4b70      	ldr	r3, [pc, #448]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a6f      	ldr	r2, [pc, #444]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	4b6d      	ldr	r3, [pc, #436]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a6c      	ldr	r2, [pc, #432]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	e00b      	b.n	800940c <HAL_RCC_OscConfig+0xb0>
 80093f4:	4b69      	ldr	r3, [pc, #420]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a68      	ldr	r2, [pc, #416]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80093fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	4b66      	ldr	r3, [pc, #408]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a65      	ldr	r2, [pc, #404]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800940a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d013      	beq.n	800943c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009414:	f7fd fa04 	bl	8006820 <HAL_GetTick>
 8009418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800941c:	f7fd fa00 	bl	8006820 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b64      	cmp	r3, #100	@ 0x64
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e207      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800942e:	4b5b      	ldr	r3, [pc, #364]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0f0      	beq.n	800941c <HAL_RCC_OscConfig+0xc0>
 800943a:	e014      	b.n	8009466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800943c:	f7fd f9f0 	bl	8006820 <HAL_GetTick>
 8009440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009442:	e008      	b.n	8009456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009444:	f7fd f9ec 	bl	8006820 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b64      	cmp	r3, #100	@ 0x64
 8009450:	d901      	bls.n	8009456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e1f3      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009456:	4b51      	ldr	r3, [pc, #324]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1f0      	bne.n	8009444 <HAL_RCC_OscConfig+0xe8>
 8009462:	e000      	b.n	8009466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d063      	beq.n	800953a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009472:	4b4a      	ldr	r3, [pc, #296]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 030c 	and.w	r3, r3, #12
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00b      	beq.n	8009496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800947e:	4b47      	ldr	r3, [pc, #284]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009486:	2b08      	cmp	r3, #8
 8009488:	d11c      	bne.n	80094c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800948a:	4b44      	ldr	r3, [pc, #272]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d116      	bne.n	80094c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009496:	4b41      	ldr	r3, [pc, #260]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d005      	beq.n	80094ae <HAL_RCC_OscConfig+0x152>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d001      	beq.n	80094ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e1c7      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094ae:	4b3b      	ldr	r3, [pc, #236]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4937      	ldr	r1, [pc, #220]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094c2:	e03a      	b.n	800953a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d020      	beq.n	800950e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094cc:	4b34      	ldr	r3, [pc, #208]	@ (80095a0 <HAL_RCC_OscConfig+0x244>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d2:	f7fd f9a5 	bl	8006820 <HAL_GetTick>
 80094d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094d8:	e008      	b.n	80094ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094da:	f7fd f9a1 	bl	8006820 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e1a8      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094ec:	4b2b      	ldr	r3, [pc, #172]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0f0      	beq.n	80094da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094f8:	4b28      	ldr	r3, [pc, #160]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	4925      	ldr	r1, [pc, #148]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009508:	4313      	orrs	r3, r2
 800950a:	600b      	str	r3, [r1, #0]
 800950c:	e015      	b.n	800953a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800950e:	4b24      	ldr	r3, [pc, #144]	@ (80095a0 <HAL_RCC_OscConfig+0x244>)
 8009510:	2200      	movs	r2, #0
 8009512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009514:	f7fd f984 	bl	8006820 <HAL_GetTick>
 8009518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800951a:	e008      	b.n	800952e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800951c:	f7fd f980 	bl	8006820 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d901      	bls.n	800952e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e187      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800952e:	4b1b      	ldr	r3, [pc, #108]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0302 	and.w	r3, r3, #2
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f0      	bne.n	800951c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0308 	and.w	r3, r3, #8
 8009542:	2b00      	cmp	r3, #0
 8009544:	d036      	beq.n	80095b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d016      	beq.n	800957c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800954e:	4b15      	ldr	r3, [pc, #84]	@ (80095a4 <HAL_RCC_OscConfig+0x248>)
 8009550:	2201      	movs	r2, #1
 8009552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009554:	f7fd f964 	bl	8006820 <HAL_GetTick>
 8009558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800955a:	e008      	b.n	800956e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800955c:	f7fd f960 	bl	8006820 <HAL_GetTick>
 8009560:	4602      	mov	r2, r0
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	2b02      	cmp	r3, #2
 8009568:	d901      	bls.n	800956e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e167      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800956e:	4b0b      	ldr	r3, [pc, #44]	@ (800959c <HAL_RCC_OscConfig+0x240>)
 8009570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0f0      	beq.n	800955c <HAL_RCC_OscConfig+0x200>
 800957a:	e01b      	b.n	80095b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800957c:	4b09      	ldr	r3, [pc, #36]	@ (80095a4 <HAL_RCC_OscConfig+0x248>)
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009582:	f7fd f94d 	bl	8006820 <HAL_GetTick>
 8009586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009588:	e00e      	b.n	80095a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800958a:	f7fd f949 	bl	8006820 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d907      	bls.n	80095a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e150      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
 800959c:	40023800 	.word	0x40023800
 80095a0:	42470000 	.word	0x42470000
 80095a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095a8:	4b88      	ldr	r3, [pc, #544]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80095aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ac:	f003 0302 	and.w	r3, r3, #2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1ea      	bne.n	800958a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8097 	beq.w	80096f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095c2:	2300      	movs	r3, #0
 80095c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095c6:	4b81      	ldr	r3, [pc, #516]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10f      	bne.n	80095f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095d2:	2300      	movs	r3, #0
 80095d4:	60bb      	str	r3, [r7, #8]
 80095d6:	4b7d      	ldr	r3, [pc, #500]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80095d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095da:	4a7c      	ldr	r2, [pc, #496]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80095dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80095e2:	4b7a      	ldr	r3, [pc, #488]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80095e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095ea:	60bb      	str	r3, [r7, #8]
 80095ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095ee:	2301      	movs	r3, #1
 80095f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095f2:	4b77      	ldr	r3, [pc, #476]	@ (80097d0 <HAL_RCC_OscConfig+0x474>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d118      	bne.n	8009630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80095fe:	4b74      	ldr	r3, [pc, #464]	@ (80097d0 <HAL_RCC_OscConfig+0x474>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a73      	ldr	r2, [pc, #460]	@ (80097d0 <HAL_RCC_OscConfig+0x474>)
 8009604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800960a:	f7fd f909 	bl	8006820 <HAL_GetTick>
 800960e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009610:	e008      	b.n	8009624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009612:	f7fd f905 	bl	8006820 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b02      	cmp	r3, #2
 800961e:	d901      	bls.n	8009624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009620:	2303      	movs	r3, #3
 8009622:	e10c      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009624:	4b6a      	ldr	r3, [pc, #424]	@ (80097d0 <HAL_RCC_OscConfig+0x474>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0f0      	beq.n	8009612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d106      	bne.n	8009646 <HAL_RCC_OscConfig+0x2ea>
 8009638:	4b64      	ldr	r3, [pc, #400]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 800963a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800963c:	4a63      	ldr	r2, [pc, #396]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	6713      	str	r3, [r2, #112]	@ 0x70
 8009644:	e01c      	b.n	8009680 <HAL_RCC_OscConfig+0x324>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2b05      	cmp	r3, #5
 800964c:	d10c      	bne.n	8009668 <HAL_RCC_OscConfig+0x30c>
 800964e:	4b5f      	ldr	r3, [pc, #380]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 8009650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009652:	4a5e      	ldr	r2, [pc, #376]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 8009654:	f043 0304 	orr.w	r3, r3, #4
 8009658:	6713      	str	r3, [r2, #112]	@ 0x70
 800965a:	4b5c      	ldr	r3, [pc, #368]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 800965c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800965e:	4a5b      	ldr	r2, [pc, #364]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 8009660:	f043 0301 	orr.w	r3, r3, #1
 8009664:	6713      	str	r3, [r2, #112]	@ 0x70
 8009666:	e00b      	b.n	8009680 <HAL_RCC_OscConfig+0x324>
 8009668:	4b58      	ldr	r3, [pc, #352]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 800966a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800966c:	4a57      	ldr	r2, [pc, #348]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 800966e:	f023 0301 	bic.w	r3, r3, #1
 8009672:	6713      	str	r3, [r2, #112]	@ 0x70
 8009674:	4b55      	ldr	r3, [pc, #340]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 8009676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009678:	4a54      	ldr	r2, [pc, #336]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 800967a:	f023 0304 	bic.w	r3, r3, #4
 800967e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d015      	beq.n	80096b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009688:	f7fd f8ca 	bl	8006820 <HAL_GetTick>
 800968c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800968e:	e00a      	b.n	80096a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009690:	f7fd f8c6 	bl	8006820 <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800969e:	4293      	cmp	r3, r2
 80096a0:	d901      	bls.n	80096a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e0cb      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096a6:	4b49      	ldr	r3, [pc, #292]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80096a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0ee      	beq.n	8009690 <HAL_RCC_OscConfig+0x334>
 80096b2:	e014      	b.n	80096de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096b4:	f7fd f8b4 	bl	8006820 <HAL_GetTick>
 80096b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096ba:	e00a      	b.n	80096d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096bc:	f7fd f8b0 	bl	8006820 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d901      	bls.n	80096d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e0b5      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80096d2:	4b3e      	ldr	r3, [pc, #248]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80096d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1ee      	bne.n	80096bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d105      	bne.n	80096f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096e4:	4b39      	ldr	r3, [pc, #228]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80096e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e8:	4a38      	ldr	r2, [pc, #224]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80096ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 80a1 	beq.w	800983c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80096fa:	4b34      	ldr	r3, [pc, #208]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f003 030c 	and.w	r3, r3, #12
 8009702:	2b08      	cmp	r3, #8
 8009704:	d05c      	beq.n	80097c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d141      	bne.n	8009792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800970e:	4b31      	ldr	r3, [pc, #196]	@ (80097d4 <HAL_RCC_OscConfig+0x478>)
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009714:	f7fd f884 	bl	8006820 <HAL_GetTick>
 8009718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800971a:	e008      	b.n	800972e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800971c:	f7fd f880 	bl	8006820 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b02      	cmp	r3, #2
 8009728:	d901      	bls.n	800972e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e087      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800972e:	4b27      	ldr	r3, [pc, #156]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1f0      	bne.n	800971c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69da      	ldr	r2, [r3, #28]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009748:	019b      	lsls	r3, r3, #6
 800974a:	431a      	orrs	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	3b01      	subs	r3, #1
 8009754:	041b      	lsls	r3, r3, #16
 8009756:	431a      	orrs	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800975c:	061b      	lsls	r3, r3, #24
 800975e:	491b      	ldr	r1, [pc, #108]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 8009760:	4313      	orrs	r3, r2
 8009762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009764:	4b1b      	ldr	r3, [pc, #108]	@ (80097d4 <HAL_RCC_OscConfig+0x478>)
 8009766:	2201      	movs	r2, #1
 8009768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800976a:	f7fd f859 	bl	8006820 <HAL_GetTick>
 800976e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009770:	e008      	b.n	8009784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009772:	f7fd f855 	bl	8006820 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	2b02      	cmp	r3, #2
 800977e:	d901      	bls.n	8009784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e05c      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009784:	4b11      	ldr	r3, [pc, #68]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0f0      	beq.n	8009772 <HAL_RCC_OscConfig+0x416>
 8009790:	e054      	b.n	800983c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009792:	4b10      	ldr	r3, [pc, #64]	@ (80097d4 <HAL_RCC_OscConfig+0x478>)
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009798:	f7fd f842 	bl	8006820 <HAL_GetTick>
 800979c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800979e:	e008      	b.n	80097b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097a0:	f7fd f83e 	bl	8006820 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e045      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097b2:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <HAL_RCC_OscConfig+0x470>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1f0      	bne.n	80097a0 <HAL_RCC_OscConfig+0x444>
 80097be:	e03d      	b.n	800983c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d107      	bne.n	80097d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e038      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
 80097cc:	40023800 	.word	0x40023800
 80097d0:	40007000 	.word	0x40007000
 80097d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80097d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009848 <HAL_RCC_OscConfig+0x4ec>)
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d028      	beq.n	8009838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d121      	bne.n	8009838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80097fe:	429a      	cmp	r2, r3
 8009800:	d11a      	bne.n	8009838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009808:	4013      	ands	r3, r2
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800980e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009810:	4293      	cmp	r3, r2
 8009812:	d111      	bne.n	8009838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981e:	085b      	lsrs	r3, r3, #1
 8009820:	3b01      	subs	r3, #1
 8009822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009824:	429a      	cmp	r2, r3
 8009826:	d107      	bne.n	8009838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009834:	429a      	cmp	r2, r3
 8009836:	d001      	beq.n	800983c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40023800 	.word	0x40023800

0800984c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e0cc      	b.n	80099fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009860:	4b68      	ldr	r3, [pc, #416]	@ (8009a04 <HAL_RCC_ClockConfig+0x1b8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0307 	and.w	r3, r3, #7
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	429a      	cmp	r2, r3
 800986c:	d90c      	bls.n	8009888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800986e:	4b65      	ldr	r3, [pc, #404]	@ (8009a04 <HAL_RCC_ClockConfig+0x1b8>)
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	b2d2      	uxtb	r2, r2
 8009874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009876:	4b63      	ldr	r3, [pc, #396]	@ (8009a04 <HAL_RCC_ClockConfig+0x1b8>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0307 	and.w	r3, r3, #7
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d001      	beq.n	8009888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e0b8      	b.n	80099fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d020      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098a0:	4b59      	ldr	r3, [pc, #356]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	4a58      	ldr	r2, [pc, #352]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80098a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80098aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0308 	and.w	r3, r3, #8
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d005      	beq.n	80098c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80098b8:	4b53      	ldr	r3, [pc, #332]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	4a52      	ldr	r2, [pc, #328]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80098be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80098c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098c4:	4b50      	ldr	r3, [pc, #320]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	494d      	ldr	r1, [pc, #308]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d044      	beq.n	800996c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d107      	bne.n	80098fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ea:	4b47      	ldr	r3, [pc, #284]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d119      	bne.n	800992a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e07f      	b.n	80099fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d003      	beq.n	800990a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009906:	2b03      	cmp	r3, #3
 8009908:	d107      	bne.n	800991a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800990a:	4b3f      	ldr	r3, [pc, #252]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e06f      	b.n	80099fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800991a:	4b3b      	ldr	r3, [pc, #236]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e067      	b.n	80099fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800992a:	4b37      	ldr	r3, [pc, #220]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f023 0203 	bic.w	r2, r3, #3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	4934      	ldr	r1, [pc, #208]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 8009938:	4313      	orrs	r3, r2
 800993a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800993c:	f7fc ff70 	bl	8006820 <HAL_GetTick>
 8009940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009942:	e00a      	b.n	800995a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009944:	f7fc ff6c 	bl	8006820 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009952:	4293      	cmp	r3, r2
 8009954:	d901      	bls.n	800995a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e04f      	b.n	80099fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800995a:	4b2b      	ldr	r3, [pc, #172]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 020c 	and.w	r2, r3, #12
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	429a      	cmp	r2, r3
 800996a:	d1eb      	bne.n	8009944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800996c:	4b25      	ldr	r3, [pc, #148]	@ (8009a04 <HAL_RCC_ClockConfig+0x1b8>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d20c      	bcs.n	8009994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800997a:	4b22      	ldr	r3, [pc, #136]	@ (8009a04 <HAL_RCC_ClockConfig+0x1b8>)
 800997c:	683a      	ldr	r2, [r7, #0]
 800997e:	b2d2      	uxtb	r2, r2
 8009980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009982:	4b20      	ldr	r3, [pc, #128]	@ (8009a04 <HAL_RCC_ClockConfig+0x1b8>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	429a      	cmp	r2, r3
 800998e:	d001      	beq.n	8009994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e032      	b.n	80099fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b00      	cmp	r3, #0
 800999e:	d008      	beq.n	80099b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099a0:	4b19      	ldr	r3, [pc, #100]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	4916      	ldr	r1, [pc, #88]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80099ae:	4313      	orrs	r3, r2
 80099b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 0308 	and.w	r3, r3, #8
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d009      	beq.n	80099d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099be:	4b12      	ldr	r3, [pc, #72]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	490e      	ldr	r1, [pc, #56]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80099d2:	f000 f82d 	bl	8009a30 <HAL_RCC_GetSysClockFreq>
 80099d6:	4602      	mov	r2, r0
 80099d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009a08 <HAL_RCC_ClockConfig+0x1bc>)
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	091b      	lsrs	r3, r3, #4
 80099de:	f003 030f 	and.w	r3, r3, #15
 80099e2:	490a      	ldr	r1, [pc, #40]	@ (8009a0c <HAL_RCC_ClockConfig+0x1c0>)
 80099e4:	5ccb      	ldrb	r3, [r1, r3]
 80099e6:	fa22 f303 	lsr.w	r3, r2, r3
 80099ea:	4a09      	ldr	r2, [pc, #36]	@ (8009a10 <HAL_RCC_ClockConfig+0x1c4>)
 80099ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80099ee:	4b09      	ldr	r3, [pc, #36]	@ (8009a14 <HAL_RCC_ClockConfig+0x1c8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fc fed0 	bl	8006798 <HAL_InitTick>

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	40023c00 	.word	0x40023c00
 8009a08:	40023800 	.word	0x40023800
 8009a0c:	08012554 	.word	0x08012554
 8009a10:	2000011c 	.word	0x2000011c
 8009a14:	20000120 	.word	0x20000120

08009a18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8009a1c:	4b03      	ldr	r3, [pc, #12]	@ (8009a2c <HAL_RCC_EnableCSS+0x14>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
}
 8009a22:	bf00      	nop
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	4247004c 	.word	0x4247004c

08009a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a34:	b090      	sub	sp, #64	@ 0x40
 8009a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a40:	2300      	movs	r3, #0
 8009a42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a48:	4b59      	ldr	r3, [pc, #356]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f003 030c 	and.w	r3, r3, #12
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d00d      	beq.n	8009a70 <HAL_RCC_GetSysClockFreq+0x40>
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	f200 80a1 	bhi.w	8009b9c <HAL_RCC_GetSysClockFreq+0x16c>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <HAL_RCC_GetSysClockFreq+0x34>
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d003      	beq.n	8009a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8009a62:	e09b      	b.n	8009b9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a64:	4b53      	ldr	r3, [pc, #332]	@ (8009bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009a66:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009a68:	e09b      	b.n	8009ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a6a:	4b53      	ldr	r3, [pc, #332]	@ (8009bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009a6e:	e098      	b.n	8009ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a70:	4b4f      	ldr	r3, [pc, #316]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d028      	beq.n	8009ad8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a86:	4b4a      	ldr	r3, [pc, #296]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	099b      	lsrs	r3, r3, #6
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	623b      	str	r3, [r7, #32]
 8009a90:	627a      	str	r2, [r7, #36]	@ 0x24
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4b47      	ldr	r3, [pc, #284]	@ (8009bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009a9c:	fb03 f201 	mul.w	r2, r3, r1
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	fb00 f303 	mul.w	r3, r0, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	4a43      	ldr	r2, [pc, #268]	@ (8009bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8009aaa:	fba0 1202 	umull	r1, r2, r0, r2
 8009aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ab0:	460a      	mov	r2, r1
 8009ab2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ab6:	4413      	add	r3, r2
 8009ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009abc:	2200      	movs	r2, #0
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	61fa      	str	r2, [r7, #28]
 8009ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ac6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009aca:	f7f7 f8bd 	bl	8000c48 <__aeabi_uldivmod>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ad6:	e053      	b.n	8009b80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ad8:	4b35      	ldr	r3, [pc, #212]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	099b      	lsrs	r3, r3, #6
 8009ade:	2200      	movs	r2, #0
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	617a      	str	r2, [r7, #20]
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009aea:	f04f 0b00 	mov.w	fp, #0
 8009aee:	4652      	mov	r2, sl
 8009af0:	465b      	mov	r3, fp
 8009af2:	f04f 0000 	mov.w	r0, #0
 8009af6:	f04f 0100 	mov.w	r1, #0
 8009afa:	0159      	lsls	r1, r3, #5
 8009afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b00:	0150      	lsls	r0, r2, #5
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	ebb2 080a 	subs.w	r8, r2, sl
 8009b0a:	eb63 090b 	sbc.w	r9, r3, fp
 8009b0e:	f04f 0200 	mov.w	r2, #0
 8009b12:	f04f 0300 	mov.w	r3, #0
 8009b16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009b1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009b1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009b22:	ebb2 0408 	subs.w	r4, r2, r8
 8009b26:	eb63 0509 	sbc.w	r5, r3, r9
 8009b2a:	f04f 0200 	mov.w	r2, #0
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	00eb      	lsls	r3, r5, #3
 8009b34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b38:	00e2      	lsls	r2, r4, #3
 8009b3a:	4614      	mov	r4, r2
 8009b3c:	461d      	mov	r5, r3
 8009b3e:	eb14 030a 	adds.w	r3, r4, sl
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	eb45 030b 	adc.w	r3, r5, fp
 8009b48:	607b      	str	r3, [r7, #4]
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009b56:	4629      	mov	r1, r5
 8009b58:	028b      	lsls	r3, r1, #10
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009b60:	4621      	mov	r1, r4
 8009b62:	028a      	lsls	r2, r1, #10
 8009b64:	4610      	mov	r0, r2
 8009b66:	4619      	mov	r1, r3
 8009b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	60bb      	str	r3, [r7, #8]
 8009b6e:	60fa      	str	r2, [r7, #12]
 8009b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b74:	f7f7 f868 	bl	8000c48 <__aeabi_uldivmod>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009b80:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	0c1b      	lsrs	r3, r3, #16
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009b90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009b9a:	e002      	b.n	8009ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b9c:	4b05      	ldr	r3, [pc, #20]	@ (8009bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8009b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3740      	adds	r7, #64	@ 0x40
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bae:	bf00      	nop
 8009bb0:	40023800 	.word	0x40023800
 8009bb4:	00f42400 	.word	0x00f42400
 8009bb8:	00b71b00 	.word	0x00b71b00

08009bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009bc0:	4b03      	ldr	r3, [pc, #12]	@ (8009bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	2000011c 	.word	0x2000011c

08009bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009bd8:	f7ff fff0 	bl	8009bbc <HAL_RCC_GetHCLKFreq>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	0a9b      	lsrs	r3, r3, #10
 8009be4:	f003 0307 	and.w	r3, r3, #7
 8009be8:	4903      	ldr	r1, [pc, #12]	@ (8009bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bea:	5ccb      	ldrb	r3, [r1, r3]
 8009bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	08012564 	.word	0x08012564

08009bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009c00:	f7ff ffdc 	bl	8009bbc <HAL_RCC_GetHCLKFreq>
 8009c04:	4602      	mov	r2, r0
 8009c06:	4b05      	ldr	r3, [pc, #20]	@ (8009c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	0b5b      	lsrs	r3, r3, #13
 8009c0c:	f003 0307 	and.w	r3, r3, #7
 8009c10:	4903      	ldr	r1, [pc, #12]	@ (8009c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c12:	5ccb      	ldrb	r3, [r1, r3]
 8009c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	40023800 	.word	0x40023800
 8009c20:	08012564 	.word	0x08012564

08009c24 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009c28:	4b06      	ldr	r3, [pc, #24]	@ (8009c44 <HAL_RCC_NMI_IRQHandler+0x20>)
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c30:	2b80      	cmp	r3, #128	@ 0x80
 8009c32:	d104      	bne.n	8009c3e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009c34:	f000 f80a 	bl	8009c4c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009c38:	4b03      	ldr	r3, [pc, #12]	@ (8009c48 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009c3a:	2280      	movs	r2, #128	@ 0x80
 8009c3c:	701a      	strb	r2, [r3, #0]
  }
}
 8009c3e:	bf00      	nop
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	40023800 	.word	0x40023800
 8009c48:	4002380e 	.word	0x4002380e

08009c4c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009c50:	bf00      	nop
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e07b      	b.n	8009d64 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d108      	bne.n	8009c86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c7c:	d009      	beq.n	8009c92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	61da      	str	r2, [r3, #28]
 8009c84:	e005      	b.n	8009c92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d106      	bne.n	8009cb2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7fb ff23 	bl	8005af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d16:	ea42 0103 	orr.w	r1, r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	0c1b      	lsrs	r3, r3, #16
 8009d30:	f003 0104 	and.w	r1, r3, #4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d38:	f003 0210 	and.w	r2, r3, #16
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	69da      	ldr	r2, [r3, #28]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08c      	sub	sp, #48	@ 0x30
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d101      	bne.n	8009d92 <HAL_SPI_TransmitReceive+0x26>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	e198      	b.n	800a0c4 <HAL_SPI_TransmitReceive+0x358>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d9a:	f7fc fd41 	bl	8006820 <HAL_GetTick>
 8009d9e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009db0:	887b      	ldrh	r3, [r7, #2]
 8009db2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d00f      	beq.n	8009ddc <HAL_SPI_TransmitReceive+0x70>
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009dc2:	d107      	bne.n	8009dd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d103      	bne.n	8009dd4 <HAL_SPI_TransmitReceive+0x68>
 8009dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d003      	beq.n	8009ddc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009dda:	e16d      	b.n	800a0b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <HAL_SPI_TransmitReceive+0x82>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <HAL_SPI_TransmitReceive+0x82>
 8009de8:	887b      	ldrh	r3, [r7, #2]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009df4:	e160      	b.n	800a0b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d003      	beq.n	8009e0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2205      	movs	r2, #5
 8009e06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	887a      	ldrh	r2, [r7, #2]
 8009e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	887a      	ldrh	r2, [r7, #2]
 8009e20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	887a      	ldrh	r2, [r7, #2]
 8009e2c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	887a      	ldrh	r2, [r7, #2]
 8009e32:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e4a:	2b40      	cmp	r3, #64	@ 0x40
 8009e4c:	d007      	beq.n	8009e5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e66:	d17c      	bne.n	8009f62 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <HAL_SPI_TransmitReceive+0x10a>
 8009e70:	8b7b      	ldrh	r3, [r7, #26]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d16a      	bne.n	8009f4c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7a:	881a      	ldrh	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e86:	1c9a      	adds	r2, r3, #2
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e9a:	e057      	b.n	8009f4c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 0302 	and.w	r3, r3, #2
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d11b      	bne.n	8009ee2 <HAL_SPI_TransmitReceive+0x176>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d016      	beq.n	8009ee2 <HAL_SPI_TransmitReceive+0x176>
 8009eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d113      	bne.n	8009ee2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ebe:	881a      	ldrh	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eca:	1c9a      	adds	r2, r3, #2
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d119      	bne.n	8009f24 <HAL_SPI_TransmitReceive+0x1b8>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d014      	beq.n	8009f24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f04:	b292      	uxth	r2, r2
 8009f06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f0c:	1c9a      	adds	r2, r3, #2
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f20:	2301      	movs	r3, #1
 8009f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f24:	f7fc fc7c 	bl	8006820 <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d80b      	bhi.n	8009f4c <HAL_SPI_TransmitReceive+0x1e0>
 8009f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f3a:	d007      	beq.n	8009f4c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8009f4a:	e0b5      	b.n	800a0b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1a2      	bne.n	8009e9c <HAL_SPI_TransmitReceive+0x130>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d19d      	bne.n	8009e9c <HAL_SPI_TransmitReceive+0x130>
 8009f60:	e080      	b.n	800a064 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <HAL_SPI_TransmitReceive+0x204>
 8009f6a:	8b7b      	ldrh	r3, [r7, #26]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d16f      	bne.n	800a050 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	330c      	adds	r3, #12
 8009f7a:	7812      	ldrb	r2, [r2, #0]
 8009f7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f96:	e05b      	b.n	800a050 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 0302 	and.w	r3, r3, #2
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d11c      	bne.n	8009fe0 <HAL_SPI_TransmitReceive+0x274>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d017      	beq.n	8009fe0 <HAL_SPI_TransmitReceive+0x274>
 8009fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d114      	bne.n	8009fe0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	330c      	adds	r3, #12
 8009fc0:	7812      	ldrb	r2, [r2, #0]
 8009fc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d119      	bne.n	800a022 <HAL_SPI_TransmitReceive+0x2b6>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d014      	beq.n	800a022 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a014:	b29b      	uxth	r3, r3
 800a016:	3b01      	subs	r3, #1
 800a018:	b29a      	uxth	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a01e:	2301      	movs	r3, #1
 800a020:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a022:	f7fc fbfd 	bl	8006820 <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a02e:	429a      	cmp	r2, r3
 800a030:	d803      	bhi.n	800a03a <HAL_SPI_TransmitReceive+0x2ce>
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a038:	d102      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x2d4>
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d107      	bne.n	800a050 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800a04e:	e033      	b.n	800a0b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a054:	b29b      	uxth	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d19e      	bne.n	8009f98 <HAL_SPI_TransmitReceive+0x22c>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a05e:	b29b      	uxth	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d199      	bne.n	8009f98 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a066:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f8b7 	bl	800a1dc <SPI_EndRxTxTransaction>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d006      	beq.n	800a082 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2220      	movs	r2, #32
 800a07e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a080:	e01a      	b.n	800a0b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10a      	bne.n	800a0a0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	617b      	str	r3, [r7, #20]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ae:	e003      	b.n	800a0b8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a0c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3730      	adds	r7, #48	@ 0x30
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a0dc:	f7fc fba0 	bl	8006820 <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a0ec:	f7fc fb98 	bl	8006820 <HAL_GetTick>
 800a0f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a0f2:	4b39      	ldr	r3, [pc, #228]	@ (800a1d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	015b      	lsls	r3, r3, #5
 800a0f8:	0d1b      	lsrs	r3, r3, #20
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	fb02 f303 	mul.w	r3, r2, r3
 800a100:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a102:	e054      	b.n	800a1ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a10a:	d050      	beq.n	800a1ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a10c:	f7fc fb88 	bl	8006820 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	69fa      	ldr	r2, [r7, #28]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d902      	bls.n	800a122 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d13d      	bne.n	800a19e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a130:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a13a:	d111      	bne.n	800a160 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a144:	d004      	beq.n	800a150 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a14e:	d107      	bne.n	800a160 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a15e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a168:	d10f      	bne.n	800a18a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a188:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e017      	b.n	800a1ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	bf0c      	ite	eq
 800a1be:	2301      	moveq	r3, #1
 800a1c0:	2300      	movne	r3, #0
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d19b      	bne.n	800a104 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3720      	adds	r7, #32
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	2000011c 	.word	0x2000011c

0800a1dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af02      	add	r7, sp, #8
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff ff6a 	bl	800a0cc <SPI_WaitFlagStateUntilTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a202:	f043 0220 	orr.w	r2, r3, #32
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e032      	b.n	800a274 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a20e:	4b1b      	ldr	r3, [pc, #108]	@ (800a27c <SPI_EndRxTxTransaction+0xa0>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a1b      	ldr	r2, [pc, #108]	@ (800a280 <SPI_EndRxTxTransaction+0xa4>)
 800a214:	fba2 2303 	umull	r2, r3, r2, r3
 800a218:	0d5b      	lsrs	r3, r3, #21
 800a21a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a21e:	fb02 f303 	mul.w	r3, r2, r3
 800a222:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a22c:	d112      	bne.n	800a254 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2200      	movs	r2, #0
 800a236:	2180      	movs	r1, #128	@ 0x80
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f7ff ff47 	bl	800a0cc <SPI_WaitFlagStateUntilTimeout>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d016      	beq.n	800a272 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a248:	f043 0220 	orr.w	r2, r3, #32
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e00f      	b.n	800a274 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00a      	beq.n	800a270 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a26a:	2b80      	cmp	r3, #128	@ 0x80
 800a26c:	d0f2      	beq.n	800a254 <SPI_EndRxTxTransaction+0x78>
 800a26e:	e000      	b.n	800a272 <SPI_EndRxTxTransaction+0x96>
        break;
 800a270:	bf00      	nop
  }

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	2000011c 	.word	0x2000011c
 800a280:	165e9f81 	.word	0x165e9f81

0800a284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e041      	b.n	800a31a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7fb fd40 	bl	8005d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f000 fba8 	bl	800aa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b01      	cmp	r3, #1
 800a336:	d001      	beq.n	800a33c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e046      	b.n	800a3ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a23      	ldr	r2, [pc, #140]	@ (800a3d8 <HAL_TIM_Base_Start+0xb4>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d022      	beq.n	800a394 <HAL_TIM_Base_Start+0x70>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a356:	d01d      	beq.n	800a394 <HAL_TIM_Base_Start+0x70>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a1f      	ldr	r2, [pc, #124]	@ (800a3dc <HAL_TIM_Base_Start+0xb8>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d018      	beq.n	800a394 <HAL_TIM_Base_Start+0x70>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1e      	ldr	r2, [pc, #120]	@ (800a3e0 <HAL_TIM_Base_Start+0xbc>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d013      	beq.n	800a394 <HAL_TIM_Base_Start+0x70>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a1c      	ldr	r2, [pc, #112]	@ (800a3e4 <HAL_TIM_Base_Start+0xc0>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00e      	beq.n	800a394 <HAL_TIM_Base_Start+0x70>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3e8 <HAL_TIM_Base_Start+0xc4>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d009      	beq.n	800a394 <HAL_TIM_Base_Start+0x70>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a19      	ldr	r2, [pc, #100]	@ (800a3ec <HAL_TIM_Base_Start+0xc8>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d004      	beq.n	800a394 <HAL_TIM_Base_Start+0x70>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a18      	ldr	r2, [pc, #96]	@ (800a3f0 <HAL_TIM_Base_Start+0xcc>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d111      	bne.n	800a3b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b06      	cmp	r3, #6
 800a3a4:	d010      	beq.n	800a3c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f042 0201 	orr.w	r2, r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b6:	e007      	b.n	800a3c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	40010000 	.word	0x40010000
 800a3dc:	40000400 	.word	0x40000400
 800a3e0:	40000800 	.word	0x40000800
 800a3e4:	40000c00 	.word	0x40000c00
 800a3e8:	40010400 	.word	0x40010400
 800a3ec:	40014000 	.word	0x40014000
 800a3f0:	40001800 	.word	0x40001800

0800a3f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e041      	b.n	800a48a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d106      	bne.n	800a420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7fb fbd4 	bl	8005bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3304      	adds	r3, #4
 800a430:	4619      	mov	r1, r3
 800a432:	4610      	mov	r0, r2
 800a434:	f000 faf0 	bl	800aa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d109      	bne.n	800a4b8 <HAL_TIM_PWM_Start+0x24>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	bf14      	ite	ne
 800a4b0:	2301      	movne	r3, #1
 800a4b2:	2300      	moveq	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	e022      	b.n	800a4fe <HAL_TIM_PWM_Start+0x6a>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	2b04      	cmp	r3, #4
 800a4bc:	d109      	bne.n	800a4d2 <HAL_TIM_PWM_Start+0x3e>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	bf14      	ite	ne
 800a4ca:	2301      	movne	r3, #1
 800a4cc:	2300      	moveq	r3, #0
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	e015      	b.n	800a4fe <HAL_TIM_PWM_Start+0x6a>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d109      	bne.n	800a4ec <HAL_TIM_PWM_Start+0x58>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	bf14      	ite	ne
 800a4e4:	2301      	movne	r3, #1
 800a4e6:	2300      	moveq	r3, #0
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	e008      	b.n	800a4fe <HAL_TIM_PWM_Start+0x6a>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	bf14      	ite	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	2300      	moveq	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e07c      	b.n	800a600 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d104      	bne.n	800a516 <HAL_TIM_PWM_Start+0x82>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a514:	e013      	b.n	800a53e <HAL_TIM_PWM_Start+0xaa>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d104      	bne.n	800a526 <HAL_TIM_PWM_Start+0x92>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a524:	e00b      	b.n	800a53e <HAL_TIM_PWM_Start+0xaa>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d104      	bne.n	800a536 <HAL_TIM_PWM_Start+0xa2>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a534:	e003      	b.n	800a53e <HAL_TIM_PWM_Start+0xaa>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2202      	movs	r2, #2
 800a53a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2201      	movs	r2, #1
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fd5c 	bl	800b004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a2d      	ldr	r2, [pc, #180]	@ (800a608 <HAL_TIM_PWM_Start+0x174>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d004      	beq.n	800a560 <HAL_TIM_PWM_Start+0xcc>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a2c      	ldr	r2, [pc, #176]	@ (800a60c <HAL_TIM_PWM_Start+0x178>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d101      	bne.n	800a564 <HAL_TIM_PWM_Start+0xd0>
 800a560:	2301      	movs	r3, #1
 800a562:	e000      	b.n	800a566 <HAL_TIM_PWM_Start+0xd2>
 800a564:	2300      	movs	r3, #0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d007      	beq.n	800a57a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a578:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a22      	ldr	r2, [pc, #136]	@ (800a608 <HAL_TIM_PWM_Start+0x174>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d022      	beq.n	800a5ca <HAL_TIM_PWM_Start+0x136>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a58c:	d01d      	beq.n	800a5ca <HAL_TIM_PWM_Start+0x136>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a1f      	ldr	r2, [pc, #124]	@ (800a610 <HAL_TIM_PWM_Start+0x17c>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d018      	beq.n	800a5ca <HAL_TIM_PWM_Start+0x136>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a1d      	ldr	r2, [pc, #116]	@ (800a614 <HAL_TIM_PWM_Start+0x180>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d013      	beq.n	800a5ca <HAL_TIM_PWM_Start+0x136>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a618 <HAL_TIM_PWM_Start+0x184>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00e      	beq.n	800a5ca <HAL_TIM_PWM_Start+0x136>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a16      	ldr	r2, [pc, #88]	@ (800a60c <HAL_TIM_PWM_Start+0x178>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d009      	beq.n	800a5ca <HAL_TIM_PWM_Start+0x136>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a18      	ldr	r2, [pc, #96]	@ (800a61c <HAL_TIM_PWM_Start+0x188>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d004      	beq.n	800a5ca <HAL_TIM_PWM_Start+0x136>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a16      	ldr	r2, [pc, #88]	@ (800a620 <HAL_TIM_PWM_Start+0x18c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d111      	bne.n	800a5ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f003 0307 	and.w	r3, r3, #7
 800a5d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b06      	cmp	r3, #6
 800a5da:	d010      	beq.n	800a5fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0201 	orr.w	r2, r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ec:	e007      	b.n	800a5fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f042 0201 	orr.w	r2, r2, #1
 800a5fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	40010000 	.word	0x40010000
 800a60c:	40010400 	.word	0x40010400
 800a610:	40000400 	.word	0x40000400
 800a614:	40000800 	.word	0x40000800
 800a618:	40000c00 	.word	0x40000c00
 800a61c:	40014000 	.word	0x40014000
 800a620:	40001800 	.word	0x40001800

0800a624 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2200      	movs	r2, #0
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	4618      	mov	r0, r3
 800a638:	f000 fce4 	bl	800b004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a2e      	ldr	r2, [pc, #184]	@ (800a6fc <HAL_TIM_PWM_Stop+0xd8>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d004      	beq.n	800a650 <HAL_TIM_PWM_Stop+0x2c>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a2d      	ldr	r2, [pc, #180]	@ (800a700 <HAL_TIM_PWM_Stop+0xdc>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d101      	bne.n	800a654 <HAL_TIM_PWM_Stop+0x30>
 800a650:	2301      	movs	r3, #1
 800a652:	e000      	b.n	800a656 <HAL_TIM_PWM_Stop+0x32>
 800a654:	2300      	movs	r3, #0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d017      	beq.n	800a68a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6a1a      	ldr	r2, [r3, #32]
 800a660:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a664:	4013      	ands	r3, r2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10f      	bne.n	800a68a <HAL_TIM_PWM_Stop+0x66>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6a1a      	ldr	r2, [r3, #32]
 800a670:	f240 4344 	movw	r3, #1092	@ 0x444
 800a674:	4013      	ands	r3, r2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d107      	bne.n	800a68a <HAL_TIM_PWM_Stop+0x66>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a688:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6a1a      	ldr	r2, [r3, #32]
 800a690:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a694:	4013      	ands	r3, r2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10f      	bne.n	800a6ba <HAL_TIM_PWM_Stop+0x96>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6a1a      	ldr	r2, [r3, #32]
 800a6a0:	f240 4344 	movw	r3, #1092	@ 0x444
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d107      	bne.n	800a6ba <HAL_TIM_PWM_Stop+0x96>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f022 0201 	bic.w	r2, r2, #1
 800a6b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d104      	bne.n	800a6ca <HAL_TIM_PWM_Stop+0xa6>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6c8:	e013      	b.n	800a6f2 <HAL_TIM_PWM_Stop+0xce>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d104      	bne.n	800a6da <HAL_TIM_PWM_Stop+0xb6>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6d8:	e00b      	b.n	800a6f2 <HAL_TIM_PWM_Stop+0xce>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b08      	cmp	r3, #8
 800a6de:	d104      	bne.n	800a6ea <HAL_TIM_PWM_Stop+0xc6>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6e8:	e003      	b.n	800a6f2 <HAL_TIM_PWM_Stop+0xce>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40010400 	.word	0x40010400

0800a704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d101      	bne.n	800a722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a71e:	2302      	movs	r3, #2
 800a720:	e0ae      	b.n	800a880 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b0c      	cmp	r3, #12
 800a72e:	f200 809f 	bhi.w	800a870 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a732:	a201      	add	r2, pc, #4	@ (adr r2, 800a738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a76d 	.word	0x0800a76d
 800a73c:	0800a871 	.word	0x0800a871
 800a740:	0800a871 	.word	0x0800a871
 800a744:	0800a871 	.word	0x0800a871
 800a748:	0800a7ad 	.word	0x0800a7ad
 800a74c:	0800a871 	.word	0x0800a871
 800a750:	0800a871 	.word	0x0800a871
 800a754:	0800a871 	.word	0x0800a871
 800a758:	0800a7ef 	.word	0x0800a7ef
 800a75c:	0800a871 	.word	0x0800a871
 800a760:	0800a871 	.word	0x0800a871
 800a764:	0800a871 	.word	0x0800a871
 800a768:	0800a82f 	.word	0x0800a82f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68b9      	ldr	r1, [r7, #8]
 800a772:	4618      	mov	r0, r3
 800a774:	f000 f9fc 	bl	800ab70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f042 0208 	orr.w	r2, r2, #8
 800a786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	699a      	ldr	r2, [r3, #24]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0204 	bic.w	r2, r2, #4
 800a796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6999      	ldr	r1, [r3, #24]
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	691a      	ldr	r2, [r3, #16]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	619a      	str	r2, [r3, #24]
      break;
 800a7aa:	e064      	b.n	800a876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68b9      	ldr	r1, [r7, #8]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fa4c 	bl	800ac50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699a      	ldr	r2, [r3, #24]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	699a      	ldr	r2, [r3, #24]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6999      	ldr	r1, [r3, #24]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	021a      	lsls	r2, r3, #8
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	619a      	str	r2, [r3, #24]
      break;
 800a7ec:	e043      	b.n	800a876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 faa1 	bl	800ad3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	69da      	ldr	r2, [r3, #28]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f042 0208 	orr.w	r2, r2, #8
 800a808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69da      	ldr	r2, [r3, #28]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0204 	bic.w	r2, r2, #4
 800a818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69d9      	ldr	r1, [r3, #28]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	691a      	ldr	r2, [r3, #16]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	61da      	str	r2, [r3, #28]
      break;
 800a82c:	e023      	b.n	800a876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68b9      	ldr	r1, [r7, #8]
 800a834:	4618      	mov	r0, r3
 800a836:	f000 faf5 	bl	800ae24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	69da      	ldr	r2, [r3, #28]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69da      	ldr	r2, [r3, #28]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69d9      	ldr	r1, [r3, #28]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	021a      	lsls	r2, r3, #8
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	61da      	str	r2, [r3, #28]
      break;
 800a86e:	e002      	b.n	800a876 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	75fb      	strb	r3, [r7, #23]
      break;
 800a874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d101      	bne.n	800a8a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e0b4      	b.n	800aa0e <HAL_TIM_ConfigClockSource+0x186>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8dc:	d03e      	beq.n	800a95c <HAL_TIM_ConfigClockSource+0xd4>
 800a8de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8e2:	f200 8087 	bhi.w	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ea:	f000 8086 	beq.w	800a9fa <HAL_TIM_ConfigClockSource+0x172>
 800a8ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f2:	d87f      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8f4:	2b70      	cmp	r3, #112	@ 0x70
 800a8f6:	d01a      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0xa6>
 800a8f8:	2b70      	cmp	r3, #112	@ 0x70
 800a8fa:	d87b      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8fc:	2b60      	cmp	r3, #96	@ 0x60
 800a8fe:	d050      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x11a>
 800a900:	2b60      	cmp	r3, #96	@ 0x60
 800a902:	d877      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a904:	2b50      	cmp	r3, #80	@ 0x50
 800a906:	d03c      	beq.n	800a982 <HAL_TIM_ConfigClockSource+0xfa>
 800a908:	2b50      	cmp	r3, #80	@ 0x50
 800a90a:	d873      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a90c:	2b40      	cmp	r3, #64	@ 0x40
 800a90e:	d058      	beq.n	800a9c2 <HAL_TIM_ConfigClockSource+0x13a>
 800a910:	2b40      	cmp	r3, #64	@ 0x40
 800a912:	d86f      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a914:	2b30      	cmp	r3, #48	@ 0x30
 800a916:	d064      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a918:	2b30      	cmp	r3, #48	@ 0x30
 800a91a:	d86b      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a91c:	2b20      	cmp	r3, #32
 800a91e:	d060      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a920:	2b20      	cmp	r3, #32
 800a922:	d867      	bhi.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d05c      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a928:	2b10      	cmp	r3, #16
 800a92a:	d05a      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x15a>
 800a92c:	e062      	b.n	800a9f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a93e:	f000 fb41 	bl	800afc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	609a      	str	r2, [r3, #8]
      break;
 800a95a:	e04f      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a96c:	f000 fb2a 	bl	800afc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a97e:	609a      	str	r2, [r3, #8]
      break;
 800a980:	e03c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a98e:	461a      	mov	r2, r3
 800a990:	f000 fa9e 	bl	800aed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2150      	movs	r1, #80	@ 0x50
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 faf7 	bl	800af8e <TIM_ITRx_SetConfig>
      break;
 800a9a0:	e02c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f000 fabd 	bl	800af2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2160      	movs	r1, #96	@ 0x60
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fae7 	bl	800af8e <TIM_ITRx_SetConfig>
      break;
 800a9c0:	e01c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f000 fa7e 	bl	800aed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2140      	movs	r1, #64	@ 0x40
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fad7 	bl	800af8e <TIM_ITRx_SetConfig>
      break;
 800a9e0:	e00c      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f000 face 	bl	800af8e <TIM_ITRx_SetConfig>
      break;
 800a9f2:	e003      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f8:	e000      	b.n	800a9fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a9fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
	...

0800aa18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a46      	ldr	r2, [pc, #280]	@ (800ab44 <TIM_Base_SetConfig+0x12c>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d013      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa36:	d00f      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a43      	ldr	r2, [pc, #268]	@ (800ab48 <TIM_Base_SetConfig+0x130>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d00b      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a42      	ldr	r2, [pc, #264]	@ (800ab4c <TIM_Base_SetConfig+0x134>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d007      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a41      	ldr	r2, [pc, #260]	@ (800ab50 <TIM_Base_SetConfig+0x138>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d003      	beq.n	800aa58 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a40      	ldr	r2, [pc, #256]	@ (800ab54 <TIM_Base_SetConfig+0x13c>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d108      	bne.n	800aa6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a35      	ldr	r2, [pc, #212]	@ (800ab44 <TIM_Base_SetConfig+0x12c>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d02b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa78:	d027      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a32      	ldr	r2, [pc, #200]	@ (800ab48 <TIM_Base_SetConfig+0x130>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d023      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a31      	ldr	r2, [pc, #196]	@ (800ab4c <TIM_Base_SetConfig+0x134>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d01f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a30      	ldr	r2, [pc, #192]	@ (800ab50 <TIM_Base_SetConfig+0x138>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d01b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a2f      	ldr	r2, [pc, #188]	@ (800ab54 <TIM_Base_SetConfig+0x13c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d017      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a2e      	ldr	r2, [pc, #184]	@ (800ab58 <TIM_Base_SetConfig+0x140>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d013      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a2d      	ldr	r2, [pc, #180]	@ (800ab5c <TIM_Base_SetConfig+0x144>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00f      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a2c      	ldr	r2, [pc, #176]	@ (800ab60 <TIM_Base_SetConfig+0x148>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00b      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a2b      	ldr	r2, [pc, #172]	@ (800ab64 <TIM_Base_SetConfig+0x14c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d007      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a2a      	ldr	r2, [pc, #168]	@ (800ab68 <TIM_Base_SetConfig+0x150>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d003      	beq.n	800aaca <TIM_Base_SetConfig+0xb2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a29      	ldr	r2, [pc, #164]	@ (800ab6c <TIM_Base_SetConfig+0x154>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d108      	bne.n	800aadc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a10      	ldr	r2, [pc, #64]	@ (800ab44 <TIM_Base_SetConfig+0x12c>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_Base_SetConfig+0xf8>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a12      	ldr	r2, [pc, #72]	@ (800ab54 <TIM_Base_SetConfig+0x13c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d103      	bne.n	800ab18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d105      	bne.n	800ab36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	f023 0201 	bic.w	r2, r3, #1
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	611a      	str	r2, [r3, #16]
  }
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	40010000 	.word	0x40010000
 800ab48:	40000400 	.word	0x40000400
 800ab4c:	40000800 	.word	0x40000800
 800ab50:	40000c00 	.word	0x40000c00
 800ab54:	40010400 	.word	0x40010400
 800ab58:	40014000 	.word	0x40014000
 800ab5c:	40014400 	.word	0x40014400
 800ab60:	40014800 	.word	0x40014800
 800ab64:	40001800 	.word	0x40001800
 800ab68:	40001c00 	.word	0x40001c00
 800ab6c:	40002000 	.word	0x40002000

0800ab70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	f023 0201 	bic.w	r2, r3, #1
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f023 0302 	bic.w	r3, r3, #2
 800abb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a20      	ldr	r2, [pc, #128]	@ (800ac48 <TIM_OC1_SetConfig+0xd8>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d003      	beq.n	800abd4 <TIM_OC1_SetConfig+0x64>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a1f      	ldr	r2, [pc, #124]	@ (800ac4c <TIM_OC1_SetConfig+0xdc>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d10c      	bne.n	800abee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f023 0308 	bic.w	r3, r3, #8
 800abda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f023 0304 	bic.w	r3, r3, #4
 800abec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a15      	ldr	r2, [pc, #84]	@ (800ac48 <TIM_OC1_SetConfig+0xd8>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d003      	beq.n	800abfe <TIM_OC1_SetConfig+0x8e>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a14      	ldr	r2, [pc, #80]	@ (800ac4c <TIM_OC1_SetConfig+0xdc>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d111      	bne.n	800ac22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	699b      	ldr	r3, [r3, #24]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	697a      	ldr	r2, [r7, #20]
 800ac3a:	621a      	str	r2, [r3, #32]
}
 800ac3c:	bf00      	nop
 800ac3e:	371c      	adds	r7, #28
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	40010000 	.word	0x40010000
 800ac4c:	40010400 	.word	0x40010400

0800ac50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b087      	sub	sp, #28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	f023 0210 	bic.w	r2, r3, #16
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	f023 0320 	bic.w	r3, r3, #32
 800ac9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	011b      	lsls	r3, r3, #4
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a22      	ldr	r2, [pc, #136]	@ (800ad34 <TIM_OC2_SetConfig+0xe4>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d003      	beq.n	800acb8 <TIM_OC2_SetConfig+0x68>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a21      	ldr	r2, [pc, #132]	@ (800ad38 <TIM_OC2_SetConfig+0xe8>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d10d      	bne.n	800acd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	011b      	lsls	r3, r3, #4
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	4313      	orrs	r3, r2
 800acca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a17      	ldr	r2, [pc, #92]	@ (800ad34 <TIM_OC2_SetConfig+0xe4>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_OC2_SetConfig+0x94>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a16      	ldr	r2, [pc, #88]	@ (800ad38 <TIM_OC2_SetConfig+0xe8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d113      	bne.n	800ad0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	621a      	str	r2, [r3, #32]
}
 800ad26:	bf00      	nop
 800ad28:	371c      	adds	r7, #28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400

0800ad3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f023 0303 	bic.w	r3, r3, #3
 800ad72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	021b      	lsls	r3, r3, #8
 800ad8c:	697a      	ldr	r2, [r7, #20]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a21      	ldr	r2, [pc, #132]	@ (800ae1c <TIM_OC3_SetConfig+0xe0>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d003      	beq.n	800ada2 <TIM_OC3_SetConfig+0x66>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a20      	ldr	r2, [pc, #128]	@ (800ae20 <TIM_OC3_SetConfig+0xe4>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d10d      	bne.n	800adbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ada8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800adbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4a16      	ldr	r2, [pc, #88]	@ (800ae1c <TIM_OC3_SetConfig+0xe0>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d003      	beq.n	800adce <TIM_OC3_SetConfig+0x92>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a15      	ldr	r2, [pc, #84]	@ (800ae20 <TIM_OC3_SetConfig+0xe4>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d113      	bne.n	800adf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800add4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800addc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	011b      	lsls	r3, r3, #4
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	699b      	ldr	r3, [r3, #24]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685a      	ldr	r2, [r3, #4]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	621a      	str	r2, [r3, #32]
}
 800ae10:	bf00      	nop
 800ae12:	371c      	adds	r7, #28
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	40010000 	.word	0x40010000
 800ae20:	40010400 	.word	0x40010400

0800ae24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a1b      	ldr	r3, [r3, #32]
 800ae38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	69db      	ldr	r3, [r3, #28]
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	021b      	lsls	r3, r3, #8
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	031b      	lsls	r3, r3, #12
 800ae76:	693a      	ldr	r2, [r7, #16]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a12      	ldr	r2, [pc, #72]	@ (800aec8 <TIM_OC4_SetConfig+0xa4>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d003      	beq.n	800ae8c <TIM_OC4_SetConfig+0x68>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a11      	ldr	r2, [pc, #68]	@ (800aecc <TIM_OC4_SetConfig+0xa8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d109      	bne.n	800aea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	019b      	lsls	r3, r3, #6
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	621a      	str	r2, [r3, #32]
}
 800aeba:	bf00      	nop
 800aebc:	371c      	adds	r7, #28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	40010000 	.word	0x40010000
 800aecc:	40010400 	.word	0x40010400

0800aed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	f023 0201 	bic.w	r2, r3, #1
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aefa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	4313      	orrs	r3, r2
 800af04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f023 030a 	bic.w	r3, r3, #10
 800af0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	621a      	str	r2, [r3, #32]
}
 800af22:	bf00      	nop
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af2e:	b480      	push	{r7}
 800af30:	b087      	sub	sp, #28
 800af32:	af00      	add	r7, sp, #0
 800af34:	60f8      	str	r0, [r7, #12]
 800af36:	60b9      	str	r1, [r7, #8]
 800af38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	f023 0210 	bic.w	r2, r3, #16
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	031b      	lsls	r3, r3, #12
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	4313      	orrs	r3, r2
 800af62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	011b      	lsls	r3, r3, #4
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	4313      	orrs	r3, r2
 800af74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	621a      	str	r2, [r3, #32]
}
 800af82:	bf00      	nop
 800af84:	371c      	adds	r7, #28
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af8e:	b480      	push	{r7}
 800af90:	b085      	sub	sp, #20
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	f043 0307 	orr.w	r3, r3, #7
 800afb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	609a      	str	r2, [r3, #8]
}
 800afb8:	bf00      	nop
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	021a      	lsls	r2, r3, #8
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	431a      	orrs	r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	4313      	orrs	r3, r2
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	4313      	orrs	r3, r2
 800aff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	609a      	str	r2, [r3, #8]
}
 800aff8:	bf00      	nop
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f003 031f 	and.w	r3, r3, #31
 800b016:	2201      	movs	r2, #1
 800b018:	fa02 f303 	lsl.w	r3, r2, r3
 800b01c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a1a      	ldr	r2, [r3, #32]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	43db      	mvns	r3, r3
 800b026:	401a      	ands	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6a1a      	ldr	r2, [r3, #32]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	f003 031f 	and.w	r3, r3, #31
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	fa01 f303 	lsl.w	r3, r1, r3
 800b03c:	431a      	orrs	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	621a      	str	r2, [r3, #32]
}
 800b042:	bf00      	nop
 800b044:	371c      	adds	r7, #28
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
	...

0800b050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b060:	2b01      	cmp	r3, #1
 800b062:	d101      	bne.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b064:	2302      	movs	r3, #2
 800b066:	e05a      	b.n	800b11e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2202      	movs	r2, #2
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b08e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a21      	ldr	r2, [pc, #132]	@ (800b12c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d022      	beq.n	800b0f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0b4:	d01d      	beq.n	800b0f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a1d      	ldr	r2, [pc, #116]	@ (800b130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d018      	beq.n	800b0f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d013      	beq.n	800b0f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a1a      	ldr	r2, [pc, #104]	@ (800b138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d00e      	beq.n	800b0f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a18      	ldr	r2, [pc, #96]	@ (800b13c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d009      	beq.n	800b0f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a17      	ldr	r2, [pc, #92]	@ (800b140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d004      	beq.n	800b0f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a15      	ldr	r2, [pc, #84]	@ (800b144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d10c      	bne.n	800b10c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	4313      	orrs	r3, r2
 800b102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	40010000 	.word	0x40010000
 800b130:	40000400 	.word	0x40000400
 800b134:	40000800 	.word	0x40000800
 800b138:	40000c00 	.word	0x40000c00
 800b13c:	40010400 	.word	0x40010400
 800b140:	40014000 	.word	0x40014000
 800b144:	40001800 	.word	0x40001800

0800b148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d101      	bne.n	800b164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b160:	2302      	movs	r3, #2
 800b162:	e03d      	b.n	800b1e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	4313      	orrs	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	4313      	orrs	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	4313      	orrs	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d101      	bne.n	800b1fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e042      	b.n	800b284 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7fa fef2 	bl	8005ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2224      	movs	r2, #36	@ 0x24
 800b21c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b22e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 ff77 	bl	800c124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	691a      	ldr	r2, [r3, #16]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	695a      	ldr	r2, [r3, #20]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2220      	movs	r2, #32
 800b270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2220      	movs	r2, #32
 800b278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08c      	sub	sp, #48	@ 0x30
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	4613      	mov	r3, r2
 800b298:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b20      	cmp	r3, #32
 800b2a4:	d156      	bne.n	800b354 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <HAL_UART_Transmit_DMA+0x26>
 800b2ac:	88fb      	ldrh	r3, [r7, #6]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e04f      	b.n	800b356 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	88fa      	ldrh	r2, [r7, #6]
 800b2c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	88fa      	ldrh	r2, [r7, #6]
 800b2c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2221      	movs	r2, #33	@ 0x21
 800b2d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2da:	4a21      	ldr	r2, [pc, #132]	@ (800b360 <HAL_UART_Transmit_DMA+0xd4>)
 800b2dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e2:	4a20      	ldr	r2, [pc, #128]	@ (800b364 <HAL_UART_Transmit_DMA+0xd8>)
 800b2e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b368 <HAL_UART_Transmit_DMA+0xdc>)
 800b2ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b2f6:	f107 0308 	add.w	r3, r7, #8
 800b2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b302:	6819      	ldr	r1, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3304      	adds	r3, #4
 800b30a:	461a      	mov	r2, r3
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	f7fc fadf 	bl	80078d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b31a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	3314      	adds	r3, #20
 800b322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	e853 3f00 	ldrex	r3, [r3]
 800b32a:	617b      	str	r3, [r7, #20]
   return(result);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b332:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3314      	adds	r3, #20
 800b33a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b33c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b33e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b340:	6a39      	ldr	r1, [r7, #32]
 800b342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b344:	e841 2300 	strex	r3, r2, [r1]
 800b348:	61fb      	str	r3, [r7, #28]
   return(result);
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1e5      	bne.n	800b31c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	e000      	b.n	800b356 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b354:	2302      	movs	r3, #2
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	3730      	adds	r7, #48	@ 0x30
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	0800b9b1 	.word	0x0800b9b1
 800b364:	0800ba4b 	.word	0x0800ba4b
 800b368:	0800bbcf 	.word	0x0800bbcf

0800b36c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08c      	sub	sp, #48	@ 0x30
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	4613      	mov	r3, r2
 800b378:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b20      	cmp	r3, #32
 800b384:	d14a      	bne.n	800b41c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e043      	b.n	800b41e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2201      	movs	r2, #1
 800b39a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b3a2:	88fb      	ldrh	r3, [r7, #6]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 fc5b 	bl	800bc64 <UART_Start_Receive_DMA>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d12c      	bne.n	800b416 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d125      	bne.n	800b410 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	613b      	str	r3, [r7, #16]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	613b      	str	r3, [r7, #16]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	613b      	str	r3, [r7, #16]
 800b3d8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	330c      	adds	r3, #12
 800b3e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	e853 3f00 	ldrex	r3, [r3]
 800b3e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f043 0310 	orr.w	r3, r3, #16
 800b3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	330c      	adds	r3, #12
 800b3f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fe:	6a39      	ldr	r1, [r7, #32]
 800b400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	61fb      	str	r3, [r7, #28]
   return(result);
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e5      	bne.n	800b3da <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b40e:	e002      	b.n	800b416 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b41a:	e000      	b.n	800b41e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b41c:	2302      	movs	r3, #2
  }
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3730      	adds	r7, #48	@ 0x30
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
	...

0800b428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b0ba      	sub	sp, #232	@ 0xe8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b44e:	2300      	movs	r3, #0
 800b450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b454:	2300      	movs	r3, #0
 800b456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b45e:	f003 030f 	and.w	r3, r3, #15
 800b462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10f      	bne.n	800b48e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b472:	f003 0320 	and.w	r3, r3, #32
 800b476:	2b00      	cmp	r3, #0
 800b478:	d009      	beq.n	800b48e <HAL_UART_IRQHandler+0x66>
 800b47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fd8d 	bl	800bfa6 <UART_Receive_IT>
      return;
 800b48c:	e25b      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b48e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 80de 	beq.w	800b654 <HAL_UART_IRQHandler+0x22c>
 800b498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f000 80d1 	beq.w	800b654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <HAL_UART_IRQHandler+0xae>
 800b4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ce:	f043 0201 	orr.w	r2, r3, #1
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <HAL_UART_IRQHandler+0xd2>
 800b4e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d005      	beq.n	800b4fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f2:	f043 0202 	orr.w	r2, r3, #2
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00b      	beq.n	800b51e <HAL_UART_IRQHandler+0xf6>
 800b506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d005      	beq.n	800b51e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b516:	f043 0204 	orr.w	r2, r3, #4
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b522:	f003 0308 	and.w	r3, r3, #8
 800b526:	2b00      	cmp	r3, #0
 800b528:	d011      	beq.n	800b54e <HAL_UART_IRQHandler+0x126>
 800b52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b52e:	f003 0320 	and.w	r3, r3, #32
 800b532:	2b00      	cmp	r3, #0
 800b534:	d105      	bne.n	800b542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b546:	f043 0208 	orr.w	r2, r3, #8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b552:	2b00      	cmp	r3, #0
 800b554:	f000 81f2 	beq.w	800b93c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b55c:	f003 0320 	and.w	r3, r3, #32
 800b560:	2b00      	cmp	r3, #0
 800b562:	d008      	beq.n	800b576 <HAL_UART_IRQHandler+0x14e>
 800b564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b568:	f003 0320 	and.w	r3, r3, #32
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fd18 	bl	800bfa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	695b      	ldr	r3, [r3, #20]
 800b57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b580:	2b40      	cmp	r3, #64	@ 0x40
 800b582:	bf0c      	ite	eq
 800b584:	2301      	moveq	r3, #1
 800b586:	2300      	movne	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b592:	f003 0308 	and.w	r3, r3, #8
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <HAL_UART_IRQHandler+0x17a>
 800b59a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d04f      	beq.n	800b642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fc20 	bl	800bde8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b2:	2b40      	cmp	r3, #64	@ 0x40
 800b5b4:	d141      	bne.n	800b63a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5c4:	e853 3f00 	ldrex	r3, [r3]
 800b5c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b5cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b5d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3314      	adds	r3, #20
 800b5de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b5e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b5ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1d9      	bne.n	800b5b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d013      	beq.n	800b632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b60e:	4a7e      	ldr	r2, [pc, #504]	@ (800b808 <HAL_UART_IRQHandler+0x3e0>)
 800b610:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b616:	4618      	mov	r0, r3
 800b618:	f7fc fa22 	bl	8007a60 <HAL_DMA_Abort_IT>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d016      	beq.n	800b650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b62c:	4610      	mov	r0, r2
 800b62e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b630:	e00e      	b.n	800b650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f9b2 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b638:	e00a      	b.n	800b650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f9ae 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b640:	e006      	b.n	800b650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f9aa 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b64e:	e175      	b.n	800b93c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b650:	bf00      	nop
    return;
 800b652:	e173      	b.n	800b93c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b658:	2b01      	cmp	r3, #1
 800b65a:	f040 814f 	bne.w	800b8fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b662:	f003 0310 	and.w	r3, r3, #16
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 8148 	beq.w	800b8fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b670:	f003 0310 	and.w	r3, r3, #16
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 8141 	beq.w	800b8fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b67a:	2300      	movs	r3, #0
 800b67c:	60bb      	str	r3, [r7, #8]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	60bb      	str	r3, [r7, #8]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	60bb      	str	r3, [r7, #8]
 800b68e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b69a:	2b40      	cmp	r3, #64	@ 0x40
 800b69c:	f040 80b6 	bne.w	800b80c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b6ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 8145 	beq.w	800b940 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	f080 813e 	bcs.w	800b940 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6d0:	69db      	ldr	r3, [r3, #28]
 800b6d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6d6:	f000 8088 	beq.w	800b7ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	330c      	adds	r3, #12
 800b6e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b6f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	330c      	adds	r3, #12
 800b702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b706:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b70a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b712:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b71e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1d9      	bne.n	800b6da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3314      	adds	r3, #20
 800b72c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b730:	e853 3f00 	ldrex	r3, [r3]
 800b734:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b738:	f023 0301 	bic.w	r3, r3, #1
 800b73c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3314      	adds	r3, #20
 800b746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b74a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b74e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b750:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b752:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b756:	e841 2300 	strex	r3, r2, [r1]
 800b75a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b75c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1e1      	bne.n	800b726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3314      	adds	r3, #20
 800b768:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b76c:	e853 3f00 	ldrex	r3, [r3]
 800b770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3314      	adds	r3, #20
 800b782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b78c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e3      	bne.n	800b762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	330c      	adds	r3, #12
 800b7ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b2:	e853 3f00 	ldrex	r3, [r3]
 800b7b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7ba:	f023 0310 	bic.w	r3, r3, #16
 800b7be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b7cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b7ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7d4:	e841 2300 	strex	r3, r2, [r1]
 800b7d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1e3      	bne.n	800b7a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fc f8cb 	bl	8007980 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2202      	movs	r2, #2
 800b7ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7f6 ff17 	bl	8002634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b806:	e09b      	b.n	800b940 <HAL_UART_IRQHandler+0x518>
 800b808:	0800beaf 	.word	0x0800beaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b814:	b29b      	uxth	r3, r3
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b820:	b29b      	uxth	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 808e 	beq.w	800b944 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 8089 	beq.w	800b944 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	330c      	adds	r3, #12
 800b838:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b856:	647a      	str	r2, [r7, #68]	@ 0x44
 800b858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b85c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b85e:	e841 2300 	strex	r3, r2, [r1]
 800b862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1e3      	bne.n	800b832 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3314      	adds	r3, #20
 800b870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	623b      	str	r3, [r7, #32]
   return(result);
 800b87a:	6a3b      	ldr	r3, [r7, #32]
 800b87c:	f023 0301 	bic.w	r3, r3, #1
 800b880:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3314      	adds	r3, #20
 800b88a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b88e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e3      	bne.n	800b86a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	330c      	adds	r3, #12
 800b8b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 0310 	bic.w	r3, r3, #16
 800b8c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	330c      	adds	r3, #12
 800b8d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b8d4:	61fa      	str	r2, [r7, #28]
 800b8d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	69b9      	ldr	r1, [r7, #24]
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e3      	bne.n	800b8b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7f6 fe9d 	bl	8002634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8fa:	e023      	b.n	800b944 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <HAL_UART_IRQHandler+0x4f4>
 800b908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b90c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fade 	bl	800bed6 <UART_Transmit_IT>
    return;
 800b91a:	e014      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00e      	beq.n	800b946 <HAL_UART_IRQHandler+0x51e>
 800b928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b930:	2b00      	cmp	r3, #0
 800b932:	d008      	beq.n	800b946 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fb1e 	bl	800bf76 <UART_EndTransmit_IT>
    return;
 800b93a:	e004      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
    return;
 800b93c:	bf00      	nop
 800b93e:	e002      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
      return;
 800b940:	bf00      	nop
 800b942:	e000      	b.n	800b946 <HAL_UART_IRQHandler+0x51e>
      return;
 800b944:	bf00      	nop
  }
}
 800b946:	37e8      	adds	r7, #232	@ 0xe8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b090      	sub	sp, #64	@ 0x40
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d137      	bne.n	800ba3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3314      	adds	r3, #20
 800b9d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9dc:	e853 3f00 	ldrex	r3, [r3]
 800b9e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3314      	adds	r3, #20
 800b9f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b9f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9fa:	e841 2300 	strex	r3, r2, [r1]
 800b9fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1e5      	bne.n	800b9d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	330c      	adds	r3, #12
 800ba0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	e853 3f00 	ldrex	r3, [r3]
 800ba14:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	330c      	adds	r3, #12
 800ba24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba26:	61fa      	str	r2, [r7, #28]
 800ba28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2a:	69b9      	ldr	r1, [r7, #24]
 800ba2c:	69fa      	ldr	r2, [r7, #28]
 800ba2e:	e841 2300 	strex	r3, r2, [r1]
 800ba32:	617b      	str	r3, [r7, #20]
   return(result);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1e5      	bne.n	800ba06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba3a:	e002      	b.n	800ba42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ba3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ba3e:	f7ff ff85 	bl	800b94c <HAL_UART_TxCpltCallback>
}
 800ba42:	bf00      	nop
 800ba44:	3740      	adds	r7, #64	@ 0x40
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f7ff ff81 	bl	800b960 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba5e:	bf00      	nop
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b09c      	sub	sp, #112	@ 0x70
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba72:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d172      	bne.n	800bb68 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ba82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba84:	2200      	movs	r2, #0
 800ba86:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	330c      	adds	r3, #12
 800ba8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba92:	e853 3f00 	ldrex	r3, [r3]
 800ba96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ba98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800baa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	330c      	adds	r3, #12
 800baa6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800baa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800baaa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800baae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bab0:	e841 2300 	strex	r3, r2, [r1]
 800bab4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e5      	bne.n	800ba88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800babc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3314      	adds	r3, #20
 800bac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	e853 3f00 	ldrex	r3, [r3]
 800baca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bacc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bace:	f023 0301 	bic.w	r3, r3, #1
 800bad2:	667b      	str	r3, [r7, #100]	@ 0x64
 800bad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3314      	adds	r3, #20
 800bada:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800badc:	647a      	str	r2, [r7, #68]	@ 0x44
 800bade:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bae4:	e841 2300 	strex	r3, r2, [r1]
 800bae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800baea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e5      	bne.n	800babc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3314      	adds	r3, #20
 800baf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafa:	e853 3f00 	ldrex	r3, [r3]
 800bafe:	623b      	str	r3, [r7, #32]
   return(result);
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb06:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3314      	adds	r3, #20
 800bb0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb10:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb18:	e841 2300 	strex	r3, r2, [r1]
 800bb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e5      	bne.n	800baf0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb26:	2220      	movs	r2, #32
 800bb28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d119      	bne.n	800bb68 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	330c      	adds	r3, #12
 800bb3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	e853 3f00 	ldrex	r3, [r3]
 800bb42:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f023 0310 	bic.w	r3, r3, #16
 800bb4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	330c      	adds	r3, #12
 800bb52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bb54:	61fa      	str	r2, [r7, #28]
 800bb56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb58:	69b9      	ldr	r1, [r7, #24]
 800bb5a:	69fa      	ldr	r2, [r7, #28]
 800bb5c:	e841 2300 	strex	r3, r2, [r1]
 800bb60:	617b      	str	r3, [r7, #20]
   return(result);
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e5      	bne.n	800bb34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d106      	bne.n	800bb84 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb7e:	f7f6 fd59 	bl	8002634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb82:	e002      	b.n	800bb8a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bb84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb86:	f7ff fef5 	bl	800b974 <HAL_UART_RxCpltCallback>
}
 800bb8a:	bf00      	nop
 800bb8c:	3770      	adds	r7, #112	@ 0x70
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b084      	sub	sp, #16
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d108      	bne.n	800bbc0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bbb2:	085b      	lsrs	r3, r3, #1
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f7f6 fd3b 	bl	8002634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbbe:	e002      	b.n	800bbc6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f7ff fee1 	bl	800b988 <HAL_UART_RxHalfCpltCallback>
}
 800bbc6:	bf00      	nop
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbea:	2b80      	cmp	r3, #128	@ 0x80
 800bbec:	bf0c      	ite	eq
 800bbee:	2301      	moveq	r3, #1
 800bbf0:	2300      	movne	r3, #0
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b21      	cmp	r3, #33	@ 0x21
 800bc00:	d108      	bne.n	800bc14 <UART_DMAError+0x46>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d005      	beq.n	800bc14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bc0e:	68b8      	ldr	r0, [r7, #8]
 800bc10:	f000 f8c2 	bl	800bd98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc1e:	2b40      	cmp	r3, #64	@ 0x40
 800bc20:	bf0c      	ite	eq
 800bc22:	2301      	moveq	r3, #1
 800bc24:	2300      	movne	r3, #0
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b22      	cmp	r3, #34	@ 0x22
 800bc34:	d108      	bne.n	800bc48 <UART_DMAError+0x7a>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d005      	beq.n	800bc48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bc42:	68b8      	ldr	r0, [r7, #8]
 800bc44:	f000 f8d0 	bl	800bde8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc4c:	f043 0210 	orr.w	r2, r3, #16
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc54:	68b8      	ldr	r0, [r7, #8]
 800bc56:	f7ff fea1 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc5a:	bf00      	nop
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b098      	sub	sp, #96	@ 0x60
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	88fa      	ldrh	r2, [r7, #6]
 800bc7c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2222      	movs	r2, #34	@ 0x22
 800bc88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc90:	4a3e      	ldr	r2, [pc, #248]	@ (800bd8c <UART_Start_Receive_DMA+0x128>)
 800bc92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc98:	4a3d      	ldr	r2, [pc, #244]	@ (800bd90 <UART_Start_Receive_DMA+0x12c>)
 800bc9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca0:	4a3c      	ldr	r2, [pc, #240]	@ (800bd94 <UART_Start_Receive_DMA+0x130>)
 800bca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca8:	2200      	movs	r2, #0
 800bcaa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bcac:	f107 0308 	add.w	r3, r7, #8
 800bcb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	f7fb fe04 	bl	80078d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bcc8:	2300      	movs	r3, #0
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	613b      	str	r3, [r7, #16]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	613b      	str	r3, [r7, #16]
 800bcdc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d019      	beq.n	800bd1a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	330c      	adds	r3, #12
 800bcec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf0:	e853 3f00 	ldrex	r3, [r3]
 800bcf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	330c      	adds	r3, #12
 800bd04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd06:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bd08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bd0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bd14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e5      	bne.n	800bce6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3314      	adds	r3, #20
 800bd20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2c:	f043 0301 	orr.w	r3, r3, #1
 800bd30:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3314      	adds	r3, #20
 800bd38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd3a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bd3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bd40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e5      	bne.n	800bd1a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3314      	adds	r3, #20
 800bd54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd64:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3314      	adds	r3, #20
 800bd6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd6e:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd72:	6a39      	ldr	r1, [r7, #32]
 800bd74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd76:	e841 2300 	strex	r3, r2, [r1]
 800bd7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1e5      	bne.n	800bd4e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3760      	adds	r7, #96	@ 0x60
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	0800ba67 	.word	0x0800ba67
 800bd90:	0800bb93 	.word	0x0800bb93
 800bd94:	0800bbcf 	.word	0x0800bbcf

0800bd98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b089      	sub	sp, #36	@ 0x24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	330c      	adds	r3, #12
 800bda6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bdb6:	61fb      	str	r3, [r7, #28]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	69fa      	ldr	r2, [r7, #28]
 800bdc0:	61ba      	str	r2, [r7, #24]
 800bdc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	6979      	ldr	r1, [r7, #20]
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	613b      	str	r3, [r7, #16]
   return(result);
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e5      	bne.n	800bda0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bddc:	bf00      	nop
 800bdde:	3724      	adds	r7, #36	@ 0x24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b095      	sub	sp, #84	@ 0x54
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	330c      	adds	r3, #12
 800bdf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdfa:	e853 3f00 	ldrex	r3, [r3]
 800bdfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	330c      	adds	r3, #12
 800be0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be10:	643a      	str	r2, [r7, #64]	@ 0x40
 800be12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be18:	e841 2300 	strex	r3, r2, [r1]
 800be1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1e5      	bne.n	800bdf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3314      	adds	r3, #20
 800be2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	e853 3f00 	ldrex	r3, [r3]
 800be32:	61fb      	str	r3, [r7, #28]
   return(result);
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	f023 0301 	bic.w	r3, r3, #1
 800be3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3314      	adds	r3, #20
 800be42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e5      	bne.n	800be24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d119      	bne.n	800be94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	330c      	adds	r3, #12
 800be66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	e853 3f00 	ldrex	r3, [r3]
 800be6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f023 0310 	bic.w	r3, r3, #16
 800be76:	647b      	str	r3, [r7, #68]	@ 0x44
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	330c      	adds	r3, #12
 800be7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be80:	61ba      	str	r2, [r7, #24]
 800be82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be84:	6979      	ldr	r1, [r7, #20]
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	e841 2300 	strex	r3, r2, [r1]
 800be8c:	613b      	str	r3, [r7, #16]
   return(result);
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e5      	bne.n	800be60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2220      	movs	r2, #32
 800be98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bea2:	bf00      	nop
 800bea4:	3754      	adds	r7, #84	@ 0x54
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f7ff fd67 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bece:	bf00      	nop
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b085      	sub	sp, #20
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b21      	cmp	r3, #33	@ 0x21
 800bee8:	d13e      	bne.n	800bf68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bef2:	d114      	bne.n	800bf1e <UART_Transmit_IT+0x48>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d110      	bne.n	800bf1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a1b      	ldr	r3, [r3, #32]
 800bf00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	881b      	ldrh	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	1c9a      	adds	r2, r3, #2
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	621a      	str	r2, [r3, #32]
 800bf1c:	e008      	b.n	800bf30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	1c59      	adds	r1, r3, #1
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6211      	str	r1, [r2, #32]
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	3b01      	subs	r3, #1
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10f      	bne.n	800bf64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68da      	ldr	r2, [r3, #12]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68da      	ldr	r2, [r3, #12]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf64:	2300      	movs	r3, #0
 800bf66:	e000      	b.n	800bf6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf68:	2302      	movs	r3, #2
  }
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2220      	movs	r2, #32
 800bf92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff fcd8 	bl	800b94c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b08c      	sub	sp, #48	@ 0x30
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b22      	cmp	r3, #34	@ 0x22
 800bfb8:	f040 80ae 	bne.w	800c118 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfc4:	d117      	bne.n	800bff6 <UART_Receive_IT+0x50>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d113      	bne.n	800bff6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfee:	1c9a      	adds	r2, r3, #2
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	629a      	str	r2, [r3, #40]	@ 0x28
 800bff4:	e026      	b.n	800c044 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800bffc:	2300      	movs	r3, #0
 800bffe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c008:	d007      	beq.n	800c01a <UART_Receive_IT+0x74>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10a      	bne.n	800c028 <UART_Receive_IT+0x82>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	b2da      	uxtb	r2, r3
 800c022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c024:	701a      	strb	r2, [r3, #0]
 800c026:	e008      	b.n	800c03a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c034:	b2da      	uxtb	r2, r3
 800c036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c038:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c048:	b29b      	uxth	r3, r3
 800c04a:	3b01      	subs	r3, #1
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	4619      	mov	r1, r3
 800c052:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c054:	2b00      	cmp	r3, #0
 800c056:	d15d      	bne.n	800c114 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68da      	ldr	r2, [r3, #12]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f022 0220 	bic.w	r2, r2, #32
 800c066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68da      	ldr	r2, [r3, #12]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695a      	ldr	r2, [r3, #20]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f022 0201 	bic.w	r2, r2, #1
 800c086:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2220      	movs	r2, #32
 800c08c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d135      	bne.n	800c10a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	330c      	adds	r3, #12
 800c0aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	e853 3f00 	ldrex	r3, [r3]
 800c0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	f023 0310 	bic.w	r3, r3, #16
 800c0ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	330c      	adds	r3, #12
 800c0c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0c4:	623a      	str	r2, [r7, #32]
 800c0c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c8:	69f9      	ldr	r1, [r7, #28]
 800c0ca:	6a3a      	ldr	r2, [r7, #32]
 800c0cc:	e841 2300 	strex	r3, r2, [r1]
 800c0d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1e5      	bne.n	800c0a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f003 0310 	and.w	r3, r3, #16
 800c0e2:	2b10      	cmp	r3, #16
 800c0e4:	d10a      	bne.n	800c0fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7f6 fa96 	bl	8002634 <HAL_UARTEx_RxEventCallback>
 800c108:	e002      	b.n	800c110 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff fc32 	bl	800b974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	e002      	b.n	800c11a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	e000      	b.n	800c11a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c118:	2302      	movs	r3, #2
  }
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3730      	adds	r7, #48	@ 0x30
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c128:	b0c0      	sub	sp, #256	@ 0x100
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c13c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c140:	68d9      	ldr	r1, [r3, #12]
 800c142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	ea40 0301 	orr.w	r3, r0, r1
 800c14c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c152:	689a      	ldr	r2, [r3, #8]
 800c154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	431a      	orrs	r2, r3
 800c15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	431a      	orrs	r2, r3
 800c164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c17c:	f021 010c 	bic.w	r1, r1, #12
 800c180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c18a:	430b      	orrs	r3, r1
 800c18c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c18e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	695b      	ldr	r3, [r3, #20]
 800c196:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c19e:	6999      	ldr	r1, [r3, #24]
 800c1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	ea40 0301 	orr.w	r3, r0, r1
 800c1aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b8f      	ldr	r3, [pc, #572]	@ (800c3f0 <UART_SetConfig+0x2cc>)
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d005      	beq.n	800c1c4 <UART_SetConfig+0xa0>
 800c1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	4b8d      	ldr	r3, [pc, #564]	@ (800c3f4 <UART_SetConfig+0x2d0>)
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d104      	bne.n	800c1ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1c4:	f7fd fd1a 	bl	8009bfc <HAL_RCC_GetPCLK2Freq>
 800c1c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c1cc:	e003      	b.n	800c1d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1ce:	f7fd fd01 	bl	8009bd4 <HAL_RCC_GetPCLK1Freq>
 800c1d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1e0:	f040 810c 	bne.w	800c3fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c1f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	462b      	mov	r3, r5
 800c1fa:	1891      	adds	r1, r2, r2
 800c1fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c1fe:	415b      	adcs	r3, r3
 800c200:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c206:	4621      	mov	r1, r4
 800c208:	eb12 0801 	adds.w	r8, r2, r1
 800c20c:	4629      	mov	r1, r5
 800c20e:	eb43 0901 	adc.w	r9, r3, r1
 800c212:	f04f 0200 	mov.w	r2, #0
 800c216:	f04f 0300 	mov.w	r3, #0
 800c21a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c21e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c226:	4690      	mov	r8, r2
 800c228:	4699      	mov	r9, r3
 800c22a:	4623      	mov	r3, r4
 800c22c:	eb18 0303 	adds.w	r3, r8, r3
 800c230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c234:	462b      	mov	r3, r5
 800c236:	eb49 0303 	adc.w	r3, r9, r3
 800c23a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c23e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c24a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c24e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c252:	460b      	mov	r3, r1
 800c254:	18db      	adds	r3, r3, r3
 800c256:	653b      	str	r3, [r7, #80]	@ 0x50
 800c258:	4613      	mov	r3, r2
 800c25a:	eb42 0303 	adc.w	r3, r2, r3
 800c25e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c268:	f7f4 fcee 	bl	8000c48 <__aeabi_uldivmod>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4b61      	ldr	r3, [pc, #388]	@ (800c3f8 <UART_SetConfig+0x2d4>)
 800c272:	fba3 2302 	umull	r2, r3, r3, r2
 800c276:	095b      	lsrs	r3, r3, #5
 800c278:	011c      	lsls	r4, r3, #4
 800c27a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c27e:	2200      	movs	r2, #0
 800c280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c284:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c28c:	4642      	mov	r2, r8
 800c28e:	464b      	mov	r3, r9
 800c290:	1891      	adds	r1, r2, r2
 800c292:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c294:	415b      	adcs	r3, r3
 800c296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c29c:	4641      	mov	r1, r8
 800c29e:	eb12 0a01 	adds.w	sl, r2, r1
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	eb43 0b01 	adc.w	fp, r3, r1
 800c2a8:	f04f 0200 	mov.w	r2, #0
 800c2ac:	f04f 0300 	mov.w	r3, #0
 800c2b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c2b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c2b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2bc:	4692      	mov	sl, r2
 800c2be:	469b      	mov	fp, r3
 800c2c0:	4643      	mov	r3, r8
 800c2c2:	eb1a 0303 	adds.w	r3, sl, r3
 800c2c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2ca:	464b      	mov	r3, r9
 800c2cc:	eb4b 0303 	adc.w	r3, fp, r3
 800c2d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c2e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	18db      	adds	r3, r3, r3
 800c2ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	eb42 0303 	adc.w	r3, r2, r3
 800c2f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c2fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c2fe:	f7f4 fca3 	bl	8000c48 <__aeabi_uldivmod>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4611      	mov	r1, r2
 800c308:	4b3b      	ldr	r3, [pc, #236]	@ (800c3f8 <UART_SetConfig+0x2d4>)
 800c30a:	fba3 2301 	umull	r2, r3, r3, r1
 800c30e:	095b      	lsrs	r3, r3, #5
 800c310:	2264      	movs	r2, #100	@ 0x64
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	1acb      	subs	r3, r1, r3
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c31e:	4b36      	ldr	r3, [pc, #216]	@ (800c3f8 <UART_SetConfig+0x2d4>)
 800c320:	fba3 2302 	umull	r2, r3, r3, r2
 800c324:	095b      	lsrs	r3, r3, #5
 800c326:	005b      	lsls	r3, r3, #1
 800c328:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c32c:	441c      	add	r4, r3
 800c32e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c332:	2200      	movs	r2, #0
 800c334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c338:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c33c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c340:	4642      	mov	r2, r8
 800c342:	464b      	mov	r3, r9
 800c344:	1891      	adds	r1, r2, r2
 800c346:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c348:	415b      	adcs	r3, r3
 800c34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c34c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c350:	4641      	mov	r1, r8
 800c352:	1851      	adds	r1, r2, r1
 800c354:	6339      	str	r1, [r7, #48]	@ 0x30
 800c356:	4649      	mov	r1, r9
 800c358:	414b      	adcs	r3, r1
 800c35a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c35c:	f04f 0200 	mov.w	r2, #0
 800c360:	f04f 0300 	mov.w	r3, #0
 800c364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c368:	4659      	mov	r1, fp
 800c36a:	00cb      	lsls	r3, r1, #3
 800c36c:	4651      	mov	r1, sl
 800c36e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c372:	4651      	mov	r1, sl
 800c374:	00ca      	lsls	r2, r1, #3
 800c376:	4610      	mov	r0, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	4603      	mov	r3, r0
 800c37c:	4642      	mov	r2, r8
 800c37e:	189b      	adds	r3, r3, r2
 800c380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c384:	464b      	mov	r3, r9
 800c386:	460a      	mov	r2, r1
 800c388:	eb42 0303 	adc.w	r3, r2, r3
 800c38c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c39c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c3a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	18db      	adds	r3, r3, r3
 800c3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	eb42 0303 	adc.w	r3, r2, r3
 800c3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c3b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c3ba:	f7f4 fc45 	bl	8000c48 <__aeabi_uldivmod>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f8 <UART_SetConfig+0x2d4>)
 800c3c4:	fba3 1302 	umull	r1, r3, r3, r2
 800c3c8:	095b      	lsrs	r3, r3, #5
 800c3ca:	2164      	movs	r1, #100	@ 0x64
 800c3cc:	fb01 f303 	mul.w	r3, r1, r3
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	3332      	adds	r3, #50	@ 0x32
 800c3d6:	4a08      	ldr	r2, [pc, #32]	@ (800c3f8 <UART_SetConfig+0x2d4>)
 800c3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3dc:	095b      	lsrs	r3, r3, #5
 800c3de:	f003 0207 	and.w	r2, r3, #7
 800c3e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4422      	add	r2, r4
 800c3ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3ec:	e106      	b.n	800c5fc <UART_SetConfig+0x4d8>
 800c3ee:	bf00      	nop
 800c3f0:	40011000 	.word	0x40011000
 800c3f4:	40011400 	.word	0x40011400
 800c3f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c400:	2200      	movs	r2, #0
 800c402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c406:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c40a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c40e:	4642      	mov	r2, r8
 800c410:	464b      	mov	r3, r9
 800c412:	1891      	adds	r1, r2, r2
 800c414:	6239      	str	r1, [r7, #32]
 800c416:	415b      	adcs	r3, r3
 800c418:	627b      	str	r3, [r7, #36]	@ 0x24
 800c41a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c41e:	4641      	mov	r1, r8
 800c420:	1854      	adds	r4, r2, r1
 800c422:	4649      	mov	r1, r9
 800c424:	eb43 0501 	adc.w	r5, r3, r1
 800c428:	f04f 0200 	mov.w	r2, #0
 800c42c:	f04f 0300 	mov.w	r3, #0
 800c430:	00eb      	lsls	r3, r5, #3
 800c432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c436:	00e2      	lsls	r2, r4, #3
 800c438:	4614      	mov	r4, r2
 800c43a:	461d      	mov	r5, r3
 800c43c:	4643      	mov	r3, r8
 800c43e:	18e3      	adds	r3, r4, r3
 800c440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c444:	464b      	mov	r3, r9
 800c446:	eb45 0303 	adc.w	r3, r5, r3
 800c44a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c44e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c45a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c45e:	f04f 0200 	mov.w	r2, #0
 800c462:	f04f 0300 	mov.w	r3, #0
 800c466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c46a:	4629      	mov	r1, r5
 800c46c:	008b      	lsls	r3, r1, #2
 800c46e:	4621      	mov	r1, r4
 800c470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c474:	4621      	mov	r1, r4
 800c476:	008a      	lsls	r2, r1, #2
 800c478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c47c:	f7f4 fbe4 	bl	8000c48 <__aeabi_uldivmod>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	4b60      	ldr	r3, [pc, #384]	@ (800c608 <UART_SetConfig+0x4e4>)
 800c486:	fba3 2302 	umull	r2, r3, r3, r2
 800c48a:	095b      	lsrs	r3, r3, #5
 800c48c:	011c      	lsls	r4, r3, #4
 800c48e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c492:	2200      	movs	r2, #0
 800c494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c498:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c49c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c4a0:	4642      	mov	r2, r8
 800c4a2:	464b      	mov	r3, r9
 800c4a4:	1891      	adds	r1, r2, r2
 800c4a6:	61b9      	str	r1, [r7, #24]
 800c4a8:	415b      	adcs	r3, r3
 800c4aa:	61fb      	str	r3, [r7, #28]
 800c4ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4b0:	4641      	mov	r1, r8
 800c4b2:	1851      	adds	r1, r2, r1
 800c4b4:	6139      	str	r1, [r7, #16]
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	414b      	adcs	r3, r1
 800c4ba:	617b      	str	r3, [r7, #20]
 800c4bc:	f04f 0200 	mov.w	r2, #0
 800c4c0:	f04f 0300 	mov.w	r3, #0
 800c4c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c4c8:	4659      	mov	r1, fp
 800c4ca:	00cb      	lsls	r3, r1, #3
 800c4cc:	4651      	mov	r1, sl
 800c4ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4d2:	4651      	mov	r1, sl
 800c4d4:	00ca      	lsls	r2, r1, #3
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4603      	mov	r3, r0
 800c4dc:	4642      	mov	r2, r8
 800c4de:	189b      	adds	r3, r3, r2
 800c4e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c4e4:	464b      	mov	r3, r9
 800c4e6:	460a      	mov	r2, r1
 800c4e8:	eb42 0303 	adc.w	r3, r2, r3
 800c4ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c4fc:	f04f 0200 	mov.w	r2, #0
 800c500:	f04f 0300 	mov.w	r3, #0
 800c504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c508:	4649      	mov	r1, r9
 800c50a:	008b      	lsls	r3, r1, #2
 800c50c:	4641      	mov	r1, r8
 800c50e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c512:	4641      	mov	r1, r8
 800c514:	008a      	lsls	r2, r1, #2
 800c516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c51a:	f7f4 fb95 	bl	8000c48 <__aeabi_uldivmod>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4611      	mov	r1, r2
 800c524:	4b38      	ldr	r3, [pc, #224]	@ (800c608 <UART_SetConfig+0x4e4>)
 800c526:	fba3 2301 	umull	r2, r3, r3, r1
 800c52a:	095b      	lsrs	r3, r3, #5
 800c52c:	2264      	movs	r2, #100	@ 0x64
 800c52e:	fb02 f303 	mul.w	r3, r2, r3
 800c532:	1acb      	subs	r3, r1, r3
 800c534:	011b      	lsls	r3, r3, #4
 800c536:	3332      	adds	r3, #50	@ 0x32
 800c538:	4a33      	ldr	r2, [pc, #204]	@ (800c608 <UART_SetConfig+0x4e4>)
 800c53a:	fba2 2303 	umull	r2, r3, r2, r3
 800c53e:	095b      	lsrs	r3, r3, #5
 800c540:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c544:	441c      	add	r4, r3
 800c546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c54a:	2200      	movs	r2, #0
 800c54c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c54e:	677a      	str	r2, [r7, #116]	@ 0x74
 800c550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c554:	4642      	mov	r2, r8
 800c556:	464b      	mov	r3, r9
 800c558:	1891      	adds	r1, r2, r2
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	415b      	adcs	r3, r3
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c564:	4641      	mov	r1, r8
 800c566:	1851      	adds	r1, r2, r1
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	4649      	mov	r1, r9
 800c56c:	414b      	adcs	r3, r1
 800c56e:	607b      	str	r3, [r7, #4]
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c57c:	4659      	mov	r1, fp
 800c57e:	00cb      	lsls	r3, r1, #3
 800c580:	4651      	mov	r1, sl
 800c582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c586:	4651      	mov	r1, sl
 800c588:	00ca      	lsls	r2, r1, #3
 800c58a:	4610      	mov	r0, r2
 800c58c:	4619      	mov	r1, r3
 800c58e:	4603      	mov	r3, r0
 800c590:	4642      	mov	r2, r8
 800c592:	189b      	adds	r3, r3, r2
 800c594:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c596:	464b      	mov	r3, r9
 800c598:	460a      	mov	r2, r1
 800c59a:	eb42 0303 	adc.w	r3, r2, r3
 800c59e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5aa:	667a      	str	r2, [r7, #100]	@ 0x64
 800c5ac:	f04f 0200 	mov.w	r2, #0
 800c5b0:	f04f 0300 	mov.w	r3, #0
 800c5b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	008b      	lsls	r3, r1, #2
 800c5bc:	4641      	mov	r1, r8
 800c5be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5c2:	4641      	mov	r1, r8
 800c5c4:	008a      	lsls	r2, r1, #2
 800c5c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c5ca:	f7f4 fb3d 	bl	8000c48 <__aeabi_uldivmod>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c608 <UART_SetConfig+0x4e4>)
 800c5d4:	fba3 1302 	umull	r1, r3, r3, r2
 800c5d8:	095b      	lsrs	r3, r3, #5
 800c5da:	2164      	movs	r1, #100	@ 0x64
 800c5dc:	fb01 f303 	mul.w	r3, r1, r3
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	3332      	adds	r3, #50	@ 0x32
 800c5e6:	4a08      	ldr	r2, [pc, #32]	@ (800c608 <UART_SetConfig+0x4e4>)
 800c5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ec:	095b      	lsrs	r3, r3, #5
 800c5ee:	f003 020f 	and.w	r2, r3, #15
 800c5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4422      	add	r2, r4
 800c5fa:	609a      	str	r2, [r3, #8]
}
 800c5fc:	bf00      	nop
 800c5fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c602:	46bd      	mov	sp, r7
 800c604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c608:	51eb851f 	.word	0x51eb851f

0800c60c <__NVIC_SetPriority>:
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	4603      	mov	r3, r0
 800c614:	6039      	str	r1, [r7, #0]
 800c616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	db0a      	blt.n	800c636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	b2da      	uxtb	r2, r3
 800c624:	490c      	ldr	r1, [pc, #48]	@ (800c658 <__NVIC_SetPriority+0x4c>)
 800c626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c62a:	0112      	lsls	r2, r2, #4
 800c62c:	b2d2      	uxtb	r2, r2
 800c62e:	440b      	add	r3, r1
 800c630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c634:	e00a      	b.n	800c64c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	4908      	ldr	r1, [pc, #32]	@ (800c65c <__NVIC_SetPriority+0x50>)
 800c63c:	79fb      	ldrb	r3, [r7, #7]
 800c63e:	f003 030f 	and.w	r3, r3, #15
 800c642:	3b04      	subs	r3, #4
 800c644:	0112      	lsls	r2, r2, #4
 800c646:	b2d2      	uxtb	r2, r2
 800c648:	440b      	add	r3, r1
 800c64a:	761a      	strb	r2, [r3, #24]
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	e000e100 	.word	0xe000e100
 800c65c:	e000ed00 	.word	0xe000ed00

0800c660 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c660:	b580      	push	{r7, lr}
 800c662:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c664:	2100      	movs	r1, #0
 800c666:	f06f 0004 	mvn.w	r0, #4
 800c66a:	f7ff ffcf 	bl	800c60c <__NVIC_SetPriority>
#endif
}
 800c66e:	bf00      	nop
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c67a:	f3ef 8305 	mrs	r3, IPSR
 800c67e:	603b      	str	r3, [r7, #0]
  return(result);
 800c680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c686:	f06f 0305 	mvn.w	r3, #5
 800c68a:	607b      	str	r3, [r7, #4]
 800c68c:	e00c      	b.n	800c6a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c68e:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b8 <osKernelInitialize+0x44>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d105      	bne.n	800c6a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c696:	4b08      	ldr	r3, [pc, #32]	@ (800c6b8 <osKernelInitialize+0x44>)
 800c698:	2201      	movs	r2, #1
 800c69a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	607b      	str	r3, [r7, #4]
 800c6a0:	e002      	b.n	800c6a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c6a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c6a8:	687b      	ldr	r3, [r7, #4]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	20001114 	.word	0x20001114

0800c6bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6c2:	f3ef 8305 	mrs	r3, IPSR
 800c6c6:	603b      	str	r3, [r7, #0]
  return(result);
 800c6c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c6ce:	f06f 0305 	mvn.w	r3, #5
 800c6d2:	607b      	str	r3, [r7, #4]
 800c6d4:	e010      	b.n	800c6f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c704 <osKernelStart+0x48>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d109      	bne.n	800c6f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c6de:	f7ff ffbf 	bl	800c660 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c6e2:	4b08      	ldr	r3, [pc, #32]	@ (800c704 <osKernelStart+0x48>)
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c6e8:	f001 f892 	bl	800d810 <vTaskStartScheduler>
      stat = osOK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	607b      	str	r3, [r7, #4]
 800c6f0:	e002      	b.n	800c6f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c6f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c6f8:	687b      	ldr	r3, [r7, #4]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20001114 	.word	0x20001114

0800c708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08e      	sub	sp, #56	@ 0x38
 800c70c:	af04      	add	r7, sp, #16
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c714:	2300      	movs	r3, #0
 800c716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c718:	f3ef 8305 	mrs	r3, IPSR
 800c71c:	617b      	str	r3, [r7, #20]
  return(result);
 800c71e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c720:	2b00      	cmp	r3, #0
 800c722:	d17e      	bne.n	800c822 <osThreadNew+0x11a>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d07b      	beq.n	800c822 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c72a:	2380      	movs	r3, #128	@ 0x80
 800c72c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c72e:	2318      	movs	r3, #24
 800c730:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c73a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d045      	beq.n	800c7ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <osThreadNew+0x48>
        name = attr->name;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d008      	beq.n	800c776 <osThreadNew+0x6e>
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2b38      	cmp	r3, #56	@ 0x38
 800c768:	d805      	bhi.n	800c776 <osThreadNew+0x6e>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <osThreadNew+0x72>
        return (NULL);
 800c776:	2300      	movs	r3, #0
 800c778:	e054      	b.n	800c824 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	089b      	lsrs	r3, r3, #2
 800c788:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00e      	beq.n	800c7b0 <osThreadNew+0xa8>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	68db      	ldr	r3, [r3, #12]
 800c796:	2ba7      	cmp	r3, #167	@ 0xa7
 800c798:	d90a      	bls.n	800c7b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d006      	beq.n	800c7b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d002      	beq.n	800c7b0 <osThreadNew+0xa8>
        mem = 1;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	61bb      	str	r3, [r7, #24]
 800c7ae:	e010      	b.n	800c7d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10c      	bne.n	800c7d2 <osThreadNew+0xca>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d108      	bne.n	800c7d2 <osThreadNew+0xca>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d104      	bne.n	800c7d2 <osThreadNew+0xca>
          mem = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	61bb      	str	r3, [r7, #24]
 800c7cc:	e001      	b.n	800c7d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d110      	bne.n	800c7fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7e0:	9202      	str	r2, [sp, #8]
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	6a3a      	ldr	r2, [r7, #32]
 800c7ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f000 fe1a 	bl	800d428 <xTaskCreateStatic>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	613b      	str	r3, [r7, #16]
 800c7f8:	e013      	b.n	800c822 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d110      	bne.n	800c822 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	b29a      	uxth	r2, r3
 800c804:	f107 0310 	add.w	r3, r7, #16
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f000 fe68 	bl	800d4e8 <xTaskCreate>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d001      	beq.n	800c822 <osThreadNew+0x11a>
            hTask = NULL;
 800c81e:	2300      	movs	r3, #0
 800c820:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c822:	693b      	ldr	r3, [r7, #16]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3728      	adds	r7, #40	@ 0x28
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c834:	f3ef 8305 	mrs	r3, IPSR
 800c838:	60bb      	str	r3, [r7, #8]
  return(result);
 800c83a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <osDelay+0x1c>
    stat = osErrorISR;
 800c840:	f06f 0305 	mvn.w	r3, #5
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e007      	b.n	800c858 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c848:	2300      	movs	r3, #0
 800c84a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d002      	beq.n	800c858 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 ffa6 	bl	800d7a4 <vTaskDelay>
    }
  }

  return (stat);
 800c858:	68fb      	ldr	r3, [r7, #12]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4a07      	ldr	r2, [pc, #28]	@ (800c890 <vApplicationGetIdleTaskMemory+0x2c>)
 800c874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	4a06      	ldr	r2, [pc, #24]	@ (800c894 <vApplicationGetIdleTaskMemory+0x30>)
 800c87a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2280      	movs	r2, #128	@ 0x80
 800c880:	601a      	str	r2, [r3, #0]
}
 800c882:	bf00      	nop
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	20001118 	.word	0x20001118
 800c894:	200011c0 	.word	0x200011c0

0800c898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	4a07      	ldr	r2, [pc, #28]	@ (800c8c4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c8a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	4a06      	ldr	r2, [pc, #24]	@ (800c8c8 <vApplicationGetTimerTaskMemory+0x30>)
 800c8ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c8b6:	601a      	str	r2, [r3, #0]
}
 800c8b8:	bf00      	nop
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	200013c0 	.word	0x200013c0
 800c8c8:	20001468 	.word	0x20001468

0800c8cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f103 0208 	add.w	r2, r3, #8
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c8e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f103 0208 	add.w	r2, r3, #8
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f103 0208 	add.w	r2, r3, #8
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c91a:	bf00      	nop
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c926:	b480      	push	{r7}
 800c928:	b085      	sub	sp, #20
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	601a      	str	r2, [r3, #0]
}
 800c962:	bf00      	nop
 800c964:	3714      	adds	r7, #20
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c96e:	b480      	push	{r7}
 800c970:	b085      	sub	sp, #20
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c984:	d103      	bne.n	800c98e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	e00c      	b.n	800c9a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3308      	adds	r3, #8
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e002      	b.n	800c99c <vListInsert+0x2e>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d2f6      	bcs.n	800c996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	685a      	ldr	r2, [r3, #4]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	683a      	ldr	r2, [r7, #0]
 800c9b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	683a      	ldr	r2, [r7, #0]
 800c9c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	601a      	str	r2, [r3, #0]
}
 800c9d4:	bf00      	nop
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	6892      	ldr	r2, [r2, #8]
 800c9f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	6852      	ldr	r2, [r2, #4]
 800ca00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d103      	bne.n	800ca14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	689a      	ldr	r2, [r3, #8]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	1e5a      	subs	r2, r3, #1
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10b      	bne.n	800ca60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	e7fd      	b.n	800ca5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ca60:	f002 fa82 	bl	800ef68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca6c:	68f9      	ldr	r1, [r7, #12]
 800ca6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ca70:	fb01 f303 	mul.w	r3, r1, r3
 800ca74:	441a      	add	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca90:	3b01      	subs	r3, #1
 800ca92:	68f9      	ldr	r1, [r7, #12]
 800ca94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ca96:	fb01 f303 	mul.w	r3, r1, r3
 800ca9a:	441a      	add	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	22ff      	movs	r2, #255	@ 0xff
 800caa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	22ff      	movs	r2, #255	@ 0xff
 800caac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d114      	bne.n	800cae0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d01a      	beq.n	800caf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3310      	adds	r3, #16
 800cac2:	4618      	mov	r0, r3
 800cac4:	f001 fa3c 	bl	800df40 <xTaskRemoveFromEventList>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d012      	beq.n	800caf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cace:	4b0d      	ldr	r3, [pc, #52]	@ (800cb04 <xQueueGenericReset+0xd0>)
 800cad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad4:	601a      	str	r2, [r3, #0]
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	e009      	b.n	800caf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	3310      	adds	r3, #16
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff fef1 	bl	800c8cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3324      	adds	r3, #36	@ 0x24
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff feec 	bl	800c8cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800caf4:	f002 fa6a 	bl	800efcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800caf8:	2301      	movs	r3, #1
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08e      	sub	sp, #56	@ 0x38
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10b      	bne.n	800cb34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	e7fd      	b.n	800cb30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10b      	bne.n	800cb52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <xQueueGenericCreateStatic+0x56>
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <xQueueGenericCreateStatic+0x5a>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e000      	b.n	800cb64 <xQueueGenericCreateStatic+0x5c>
 800cb62:	2300      	movs	r3, #0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d10b      	bne.n	800cb80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	623b      	str	r3, [r7, #32]
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	e7fd      	b.n	800cb7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d102      	bne.n	800cb8c <xQueueGenericCreateStatic+0x84>
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <xQueueGenericCreateStatic+0x88>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	e000      	b.n	800cb92 <xQueueGenericCreateStatic+0x8a>
 800cb90:	2300      	movs	r3, #0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10b      	bne.n	800cbae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	61fb      	str	r3, [r7, #28]
}
 800cba8:	bf00      	nop
 800cbaa:	bf00      	nop
 800cbac:	e7fd      	b.n	800cbaa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cbae:	2350      	movs	r3, #80	@ 0x50
 800cbb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	2b50      	cmp	r3, #80	@ 0x50
 800cbb6:	d00b      	beq.n	800cbd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	61bb      	str	r3, [r7, #24]
}
 800cbca:	bf00      	nop
 800cbcc:	bf00      	nop
 800cbce:	e7fd      	b.n	800cbcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cbd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00d      	beq.n	800cbf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cbe4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	4613      	mov	r3, r2
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f000 f805 	bl	800cc02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3730      	adds	r7, #48	@ 0x30
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b084      	sub	sp, #16
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	607a      	str	r2, [r7, #4]
 800cc0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d103      	bne.n	800cc1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	e002      	b.n	800cc24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc30:	2101      	movs	r1, #1
 800cc32:	69b8      	ldr	r0, [r7, #24]
 800cc34:	f7ff fefe 	bl	800ca34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	78fa      	ldrb	r2, [r7, #3]
 800cc3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc40:	bf00      	nop
 800cc42:	3710      	adds	r7, #16
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b08e      	sub	sp, #56	@ 0x38
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
 800cc54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc56:	2300      	movs	r3, #0
 800cc58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10b      	bne.n	800cc7c <xQueueGenericSend+0x34>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc76:	bf00      	nop
 800cc78:	bf00      	nop
 800cc7a:	e7fd      	b.n	800cc78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d103      	bne.n	800cc8a <xQueueGenericSend+0x42>
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <xQueueGenericSend+0x46>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <xQueueGenericSend+0x48>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10b      	bne.n	800ccac <xQueueGenericSend+0x64>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cca6:	bf00      	nop
 800cca8:	bf00      	nop
 800ccaa:	e7fd      	b.n	800cca8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d103      	bne.n	800ccba <xQueueGenericSend+0x72>
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d101      	bne.n	800ccbe <xQueueGenericSend+0x76>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e000      	b.n	800ccc0 <xQueueGenericSend+0x78>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10b      	bne.n	800ccdc <xQueueGenericSend+0x94>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	623b      	str	r3, [r7, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	e7fd      	b.n	800ccd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccdc:	f001 faf6 	bl	800e2cc <xTaskGetSchedulerState>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d102      	bne.n	800ccec <xQueueGenericSend+0xa4>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <xQueueGenericSend+0xa8>
 800ccec:	2301      	movs	r3, #1
 800ccee:	e000      	b.n	800ccf2 <xQueueGenericSend+0xaa>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d10b      	bne.n	800cd0e <xQueueGenericSend+0xc6>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	61fb      	str	r3, [r7, #28]
}
 800cd08:	bf00      	nop
 800cd0a:	bf00      	nop
 800cd0c:	e7fd      	b.n	800cd0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd0e:	f002 f92b 	bl	800ef68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d302      	bcc.n	800cd24 <xQueueGenericSend+0xdc>
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d129      	bne.n	800cd78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	68b9      	ldr	r1, [r7, #8]
 800cd28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cd2a:	f000 fa0f 	bl	800d14c <prvCopyDataToQueue>
 800cd2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d010      	beq.n	800cd5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	3324      	adds	r3, #36	@ 0x24
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f001 f8ff 	bl	800df40 <xTaskRemoveFromEventList>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d013      	beq.n	800cd70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd48:	4b3f      	ldr	r3, [pc, #252]	@ (800ce48 <xQueueGenericSend+0x200>)
 800cd4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	e00a      	b.n	800cd70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d007      	beq.n	800cd70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd60:	4b39      	ldr	r3, [pc, #228]	@ (800ce48 <xQueueGenericSend+0x200>)
 800cd62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd70:	f002 f92c 	bl	800efcc <vPortExitCritical>
				return pdPASS;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e063      	b.n	800ce40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d103      	bne.n	800cd86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd7e:	f002 f925 	bl	800efcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	e05c      	b.n	800ce40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d106      	bne.n	800cd9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd8c:	f107 0314 	add.w	r3, r7, #20
 800cd90:	4618      	mov	r0, r3
 800cd92:	f001 f939 	bl	800e008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd96:	2301      	movs	r3, #1
 800cd98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd9a:	f002 f917 	bl	800efcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd9e:	f000 fda7 	bl	800d8f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cda2:	f002 f8e1 	bl	800ef68 <vPortEnterCritical>
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cdac:	b25b      	sxtb	r3, r3
 800cdae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdb2:	d103      	bne.n	800cdbc <xQueueGenericSend+0x174>
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdc2:	b25b      	sxtb	r3, r3
 800cdc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdc8:	d103      	bne.n	800cdd2 <xQueueGenericSend+0x18a>
 800cdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cdd2:	f002 f8fb 	bl	800efcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdd6:	1d3a      	adds	r2, r7, #4
 800cdd8:	f107 0314 	add.w	r3, r7, #20
 800cddc:	4611      	mov	r1, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f001 f928 	bl	800e034 <xTaskCheckForTimeOut>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d124      	bne.n	800ce34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cdea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdec:	f000 faa6 	bl	800d33c <prvIsQueueFull>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d018      	beq.n	800ce28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf8:	3310      	adds	r3, #16
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f001 f84c 	bl	800de9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce06:	f000 fa31 	bl	800d26c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce0a:	f000 fd7f 	bl	800d90c <xTaskResumeAll>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f47f af7c 	bne.w	800cd0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ce16:	4b0c      	ldr	r3, [pc, #48]	@ (800ce48 <xQueueGenericSend+0x200>)
 800ce18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	e772      	b.n	800cd0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce2a:	f000 fa1f 	bl	800d26c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce2e:	f000 fd6d 	bl	800d90c <xTaskResumeAll>
 800ce32:	e76c      	b.n	800cd0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce36:	f000 fa19 	bl	800d26c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce3a:	f000 fd67 	bl	800d90c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3738      	adds	r7, #56	@ 0x38
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	e000ed04 	.word	0xe000ed04

0800ce4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b090      	sub	sp, #64	@ 0x40
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	607a      	str	r2, [r7, #4]
 800ce58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10b      	bne.n	800ce7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ce64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce68:	f383 8811 	msr	BASEPRI, r3
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ce76:	bf00      	nop
 800ce78:	bf00      	nop
 800ce7a:	e7fd      	b.n	800ce78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d103      	bne.n	800ce8a <xQueueGenericSendFromISR+0x3e>
 800ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <xQueueGenericSendFromISR+0x42>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e000      	b.n	800ce90 <xQueueGenericSendFromISR+0x44>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10b      	bne.n	800ceac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cea6:	bf00      	nop
 800cea8:	bf00      	nop
 800ceaa:	e7fd      	b.n	800cea8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d103      	bne.n	800ceba <xQueueGenericSendFromISR+0x6e>
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d101      	bne.n	800cebe <xQueueGenericSendFromISR+0x72>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e000      	b.n	800cec0 <xQueueGenericSendFromISR+0x74>
 800cebe:	2300      	movs	r3, #0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10b      	bne.n	800cedc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	623b      	str	r3, [r7, #32]
}
 800ced6:	bf00      	nop
 800ced8:	bf00      	nop
 800ceda:	e7fd      	b.n	800ced8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cedc:	f002 f924 	bl	800f128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cee0:	f3ef 8211 	mrs	r2, BASEPRI
 800cee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee8:	f383 8811 	msr	BASEPRI, r3
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f3bf 8f4f 	dsb	sy
 800cef4:	61fa      	str	r2, [r7, #28]
 800cef6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cef8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cefa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d302      	bcc.n	800cf0e <xQueueGenericSendFromISR+0xc2>
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d12f      	bne.n	800cf6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf1e:	683a      	ldr	r2, [r7, #0]
 800cf20:	68b9      	ldr	r1, [r7, #8]
 800cf22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf24:	f000 f912 	bl	800d14c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cf2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf30:	d112      	bne.n	800cf58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d016      	beq.n	800cf68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3c:	3324      	adds	r3, #36	@ 0x24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 fffe 	bl	800df40 <xTaskRemoveFromEventList>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00e      	beq.n	800cf68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00b      	beq.n	800cf68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	e007      	b.n	800cf68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	b25a      	sxtb	r2, r3
 800cf62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cf6c:	e001      	b.n	800cf72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3740      	adds	r7, #64	@ 0x40
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08c      	sub	sp, #48	@ 0x30
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10b      	bne.n	800cfba <xQueueReceive+0x32>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	623b      	str	r3, [r7, #32]
}
 800cfb4:	bf00      	nop
 800cfb6:	bf00      	nop
 800cfb8:	e7fd      	b.n	800cfb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d103      	bne.n	800cfc8 <xQueueReceive+0x40>
 800cfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <xQueueReceive+0x44>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e000      	b.n	800cfce <xQueueReceive+0x46>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10b      	bne.n	800cfea <xQueueReceive+0x62>
	__asm volatile
 800cfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	61fb      	str	r3, [r7, #28]
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop
 800cfe8:	e7fd      	b.n	800cfe6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfea:	f001 f96f 	bl	800e2cc <xTaskGetSchedulerState>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d102      	bne.n	800cffa <xQueueReceive+0x72>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <xQueueReceive+0x76>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e000      	b.n	800d000 <xQueueReceive+0x78>
 800cffe:	2300      	movs	r3, #0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10b      	bne.n	800d01c <xQueueReceive+0x94>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	61bb      	str	r3, [r7, #24]
}
 800d016:	bf00      	nop
 800d018:	bf00      	nop
 800d01a:	e7fd      	b.n	800d018 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d01c:	f001 ffa4 	bl	800ef68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d024:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d01f      	beq.n	800d06c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d02c:	68b9      	ldr	r1, [r7, #8]
 800d02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d030:	f000 f8f6 	bl	800d220 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d036:	1e5a      	subs	r2, r3, #1
 800d038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00f      	beq.n	800d064 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d046:	3310      	adds	r3, #16
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 ff79 	bl	800df40 <xTaskRemoveFromEventList>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d007      	beq.n	800d064 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d054:	4b3c      	ldr	r3, [pc, #240]	@ (800d148 <xQueueReceive+0x1c0>)
 800d056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d064:	f001 ffb2 	bl	800efcc <vPortExitCritical>
				return pdPASS;
 800d068:	2301      	movs	r3, #1
 800d06a:	e069      	b.n	800d140 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d072:	f001 ffab 	bl	800efcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d076:	2300      	movs	r3, #0
 800d078:	e062      	b.n	800d140 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d07a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d106      	bne.n	800d08e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d080:	f107 0310 	add.w	r3, r7, #16
 800d084:	4618      	mov	r0, r3
 800d086:	f000 ffbf 	bl	800e008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d08a:	2301      	movs	r3, #1
 800d08c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d08e:	f001 ff9d 	bl	800efcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d092:	f000 fc2d 	bl	800d8f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d096:	f001 ff67 	bl	800ef68 <vPortEnterCritical>
 800d09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0a0:	b25b      	sxtb	r3, r3
 800d0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0a6:	d103      	bne.n	800d0b0 <xQueueReceive+0x128>
 800d0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d0b6:	b25b      	sxtb	r3, r3
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0bc:	d103      	bne.n	800d0c6 <xQueueReceive+0x13e>
 800d0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0c6:	f001 ff81 	bl	800efcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0ca:	1d3a      	adds	r2, r7, #4
 800d0cc:	f107 0310 	add.w	r3, r7, #16
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 ffae 	bl	800e034 <xTaskCheckForTimeOut>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d123      	bne.n	800d126 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0e0:	f000 f916 	bl	800d310 <prvIsQueueEmpty>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d017      	beq.n	800d11a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ec:	3324      	adds	r3, #36	@ 0x24
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 fed2 	bl	800de9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0fa:	f000 f8b7 	bl	800d26c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0fe:	f000 fc05 	bl	800d90c <xTaskResumeAll>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d189      	bne.n	800d01c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d108:	4b0f      	ldr	r3, [pc, #60]	@ (800d148 <xQueueReceive+0x1c0>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	e780      	b.n	800d01c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d11c:	f000 f8a6 	bl	800d26c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d120:	f000 fbf4 	bl	800d90c <xTaskResumeAll>
 800d124:	e77a      	b.n	800d01c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d128:	f000 f8a0 	bl	800d26c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d12c:	f000 fbee 	bl	800d90c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d132:	f000 f8ed 	bl	800d310 <prvIsQueueEmpty>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f43f af6f 	beq.w	800d01c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d13e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d140:	4618      	mov	r0, r3
 800d142:	3730      	adds	r7, #48	@ 0x30
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d158:	2300      	movs	r3, #0
 800d15a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d160:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d166:	2b00      	cmp	r3, #0
 800d168:	d10d      	bne.n	800d186 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d14d      	bne.n	800d20e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	4618      	mov	r0, r3
 800d178:	f001 f8c6 	bl	800e308 <xTaskPriorityDisinherit>
 800d17c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	609a      	str	r2, [r3, #8]
 800d184:	e043      	b.n	800d20e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d119      	bne.n	800d1c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6858      	ldr	r0, [r3, #4]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d194:	461a      	mov	r2, r3
 800d196:	68b9      	ldr	r1, [r7, #8]
 800d198:	f002 ffbf 	bl	801011a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	685a      	ldr	r2, [r3, #4]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a4:	441a      	add	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d32b      	bcc.n	800d20e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	605a      	str	r2, [r3, #4]
 800d1be:	e026      	b.n	800d20e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	68d8      	ldr	r0, [r3, #12]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	68b9      	ldr	r1, [r7, #8]
 800d1cc:	f002 ffa5 	bl	801011a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	68da      	ldr	r2, [r3, #12]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1d8:	425b      	negs	r3, r3
 800d1da:	441a      	add	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	68da      	ldr	r2, [r3, #12]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d207      	bcs.n	800d1fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	689a      	ldr	r2, [r3, #8]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1f4:	425b      	negs	r3, r3
 800d1f6:	441a      	add	r2, r3
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d105      	bne.n	800d20e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	1c5a      	adds	r2, r3, #1
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d216:	697b      	ldr	r3, [r7, #20]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3718      	adds	r7, #24
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d018      	beq.n	800d264 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	68da      	ldr	r2, [r3, #12]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d23a:	441a      	add	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68da      	ldr	r2, [r3, #12]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d303      	bcc.n	800d254 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68d9      	ldr	r1, [r3, #12]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25c:	461a      	mov	r2, r3
 800d25e:	6838      	ldr	r0, [r7, #0]
 800d260:	f002 ff5b 	bl	801011a <memcpy>
	}
}
 800d264:	bf00      	nop
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d274:	f001 fe78 	bl	800ef68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d27e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d280:	e011      	b.n	800d2a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d286:	2b00      	cmp	r3, #0
 800d288:	d012      	beq.n	800d2b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3324      	adds	r3, #36	@ 0x24
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 fe56 	bl	800df40 <xTaskRemoveFromEventList>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d29a:	f000 ff2f 	bl	800e0fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	dce9      	bgt.n	800d282 <prvUnlockQueue+0x16>
 800d2ae:	e000      	b.n	800d2b2 <prvUnlockQueue+0x46>
					break;
 800d2b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	22ff      	movs	r2, #255	@ 0xff
 800d2b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d2ba:	f001 fe87 	bl	800efcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d2be:	f001 fe53 	bl	800ef68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2ca:	e011      	b.n	800d2f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d012      	beq.n	800d2fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	3310      	adds	r3, #16
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 fe31 	bl	800df40 <xTaskRemoveFromEventList>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d2e4:	f000 ff0a 	bl	800e0fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d2e8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	dce9      	bgt.n	800d2cc <prvUnlockQueue+0x60>
 800d2f8:	e000      	b.n	800d2fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d2fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	22ff      	movs	r2, #255	@ 0xff
 800d300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d304:	f001 fe62 	bl	800efcc <vPortExitCritical>
}
 800d308:	bf00      	nop
 800d30a:	3710      	adds	r7, #16
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d318:	f001 fe26 	bl	800ef68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d324:	2301      	movs	r3, #1
 800d326:	60fb      	str	r3, [r7, #12]
 800d328:	e001      	b.n	800d32e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d32e:	f001 fe4d 	bl	800efcc <vPortExitCritical>

	return xReturn;
 800d332:	68fb      	ldr	r3, [r7, #12]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d344:	f001 fe10 	bl	800ef68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d350:	429a      	cmp	r2, r3
 800d352:	d102      	bne.n	800d35a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d354:	2301      	movs	r3, #1
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	e001      	b.n	800d35e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d35e:	f001 fe35 	bl	800efcc <vPortExitCritical>

	return xReturn;
 800d362:	68fb      	ldr	r3, [r7, #12]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d376:	2300      	movs	r3, #0
 800d378:	60fb      	str	r3, [r7, #12]
 800d37a:	e014      	b.n	800d3a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d37c:	4a0f      	ldr	r2, [pc, #60]	@ (800d3bc <vQueueAddToRegistry+0x50>)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10b      	bne.n	800d3a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d388:	490c      	ldr	r1, [pc, #48]	@ (800d3bc <vQueueAddToRegistry+0x50>)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d392:	4a0a      	ldr	r2, [pc, #40]	@ (800d3bc <vQueueAddToRegistry+0x50>)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	4413      	add	r3, r2
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d39e:	e006      	b.n	800d3ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	60fb      	str	r3, [r7, #12]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b07      	cmp	r3, #7
 800d3aa:	d9e7      	bls.n	800d37c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d3ac:	bf00      	nop
 800d3ae:	bf00      	nop
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	20001868 	.word	0x20001868

0800d3c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d3d0:	f001 fdca 	bl	800ef68 <vPortEnterCritical>
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3da:	b25b      	sxtb	r3, r3
 800d3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3e0:	d103      	bne.n	800d3ea <vQueueWaitForMessageRestricted+0x2a>
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3f0:	b25b      	sxtb	r3, r3
 800d3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3f6:	d103      	bne.n	800d400 <vQueueWaitForMessageRestricted+0x40>
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d400:	f001 fde4 	bl	800efcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d106      	bne.n	800d41a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	3324      	adds	r3, #36	@ 0x24
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	4618      	mov	r0, r3
 800d416:	f000 fd67 	bl	800dee8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d41a:	6978      	ldr	r0, [r7, #20]
 800d41c:	f7ff ff26 	bl	800d26c <prvUnlockQueue>
	}
 800d420:	bf00      	nop
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08e      	sub	sp, #56	@ 0x38
 800d42c:	af04      	add	r7, sp, #16
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10b      	bne.n	800d454 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d440:	f383 8811 	msr	BASEPRI, r3
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	623b      	str	r3, [r7, #32]
}
 800d44e:	bf00      	nop
 800d450:	bf00      	nop
 800d452:	e7fd      	b.n	800d450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10b      	bne.n	800d472 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	61fb      	str	r3, [r7, #28]
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	e7fd      	b.n	800d46e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d472:	23a8      	movs	r3, #168	@ 0xa8
 800d474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2ba8      	cmp	r3, #168	@ 0xa8
 800d47a:	d00b      	beq.n	800d494 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	61bb      	str	r3, [r7, #24]
}
 800d48e:	bf00      	nop
 800d490:	bf00      	nop
 800d492:	e7fd      	b.n	800d490 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d494:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d01e      	beq.n	800d4da <xTaskCreateStatic+0xb2>
 800d49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d01b      	beq.n	800d4da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9303      	str	r3, [sp, #12]
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ba:	9302      	str	r3, [sp, #8]
 800d4bc:	f107 0314 	add.w	r3, r7, #20
 800d4c0:	9301      	str	r3, [sp, #4]
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	68b9      	ldr	r1, [r7, #8]
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f000 f851 	bl	800d574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4d4:	f000 f8f6 	bl	800d6c4 <prvAddNewTaskToReadyList>
 800d4d8:	e001      	b.n	800d4de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d4de:	697b      	ldr	r3, [r7, #20]
	}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3728      	adds	r7, #40	@ 0x28
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08c      	sub	sp, #48	@ 0x30
 800d4ec:	af04      	add	r7, sp, #16
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	603b      	str	r3, [r7, #0]
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d4f8:	88fb      	ldrh	r3, [r7, #6]
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f001 fe55 	bl	800f1ac <pvPortMalloc>
 800d502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00e      	beq.n	800d528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d50a:	20a8      	movs	r0, #168	@ 0xa8
 800d50c:	f001 fe4e 	bl	800f1ac <pvPortMalloc>
 800d510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d003      	beq.n	800d520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d51e:	e005      	b.n	800d52c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d520:	6978      	ldr	r0, [r7, #20]
 800d522:	f001 ff11 	bl	800f348 <vPortFree>
 800d526:	e001      	b.n	800d52c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d528:	2300      	movs	r3, #0
 800d52a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d017      	beq.n	800d562 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	2200      	movs	r2, #0
 800d536:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d53a:	88fa      	ldrh	r2, [r7, #6]
 800d53c:	2300      	movs	r3, #0
 800d53e:	9303      	str	r3, [sp, #12]
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	9302      	str	r3, [sp, #8]
 800d544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d546:	9301      	str	r3, [sp, #4]
 800d548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	68b9      	ldr	r1, [r7, #8]
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f000 f80f 	bl	800d574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d556:	69f8      	ldr	r0, [r7, #28]
 800d558:	f000 f8b4 	bl	800d6c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d55c:	2301      	movs	r3, #1
 800d55e:	61bb      	str	r3, [r7, #24]
 800d560:	e002      	b.n	800d568 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d568:	69bb      	ldr	r3, [r7, #24]
	}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3720      	adds	r7, #32
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
 800d580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	461a      	mov	r2, r3
 800d58c:	21a5      	movs	r1, #165	@ 0xa5
 800d58e:	f002 fd35 	bl	800fffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d59c:	3b01      	subs	r3, #1
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	f023 0307 	bic.w	r3, r3, #7
 800d5aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	f003 0307 	and.w	r3, r3, #7
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00b      	beq.n	800d5ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ba:	f383 8811 	msr	BASEPRI, r3
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	617b      	str	r3, [r7, #20]
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	e7fd      	b.n	800d5ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d01f      	beq.n	800d614 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	e012      	b.n	800d600 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	4413      	add	r3, r2
 800d5e0:	7819      	ldrb	r1, [r3, #0]
 800d5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	3334      	adds	r3, #52	@ 0x34
 800d5ea:	460a      	mov	r2, r1
 800d5ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d5ee:	68ba      	ldr	r2, [r7, #8]
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d006      	beq.n	800d608 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	61fb      	str	r3, [r7, #28]
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	2b0f      	cmp	r3, #15
 800d604:	d9e9      	bls.n	800d5da <prvInitialiseNewTask+0x66>
 800d606:	e000      	b.n	800d60a <prvInitialiseNewTask+0x96>
			{
				break;
 800d608:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d612:	e003      	b.n	800d61c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61e:	2b37      	cmp	r3, #55	@ 0x37
 800d620:	d901      	bls.n	800d626 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d622:	2337      	movs	r3, #55	@ 0x37
 800d624:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d62a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d62e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d630:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d634:	2200      	movs	r2, #0
 800d636:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63a:	3304      	adds	r3, #4
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff f965 	bl	800c90c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	3318      	adds	r3, #24
 800d646:	4618      	mov	r0, r3
 800d648:	f7ff f960 	bl	800c90c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d650:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d654:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d660:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d664:	2200      	movs	r2, #0
 800d666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d674:	3354      	adds	r3, #84	@ 0x54
 800d676:	224c      	movs	r2, #76	@ 0x4c
 800d678:	2100      	movs	r1, #0
 800d67a:	4618      	mov	r0, r3
 800d67c:	f002 fcbe 	bl	800fffc <memset>
 800d680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d682:	4a0d      	ldr	r2, [pc, #52]	@ (800d6b8 <prvInitialiseNewTask+0x144>)
 800d684:	659a      	str	r2, [r3, #88]	@ 0x58
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	4a0c      	ldr	r2, [pc, #48]	@ (800d6bc <prvInitialiseNewTask+0x148>)
 800d68a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68e:	4a0c      	ldr	r2, [pc, #48]	@ (800d6c0 <prvInitialiseNewTask+0x14c>)
 800d690:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	68f9      	ldr	r1, [r7, #12]
 800d696:	69b8      	ldr	r0, [r7, #24]
 800d698:	f001 fb36 	bl	800ed08 <pxPortInitialiseStack>
 800d69c:	4602      	mov	r2, r0
 800d69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6ae:	bf00      	nop
 800d6b0:	3720      	adds	r7, #32
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20005afc 	.word	0x20005afc
 800d6bc:	20005b64 	.word	0x20005b64
 800d6c0:	20005bcc 	.word	0x20005bcc

0800d6c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d6cc:	f001 fc4c 	bl	800ef68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d6d0:	4b2d      	ldr	r3, [pc, #180]	@ (800d788 <prvAddNewTaskToReadyList+0xc4>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	4a2c      	ldr	r2, [pc, #176]	@ (800d788 <prvAddNewTaskToReadyList+0xc4>)
 800d6d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d6da:	4b2c      	ldr	r3, [pc, #176]	@ (800d78c <prvAddNewTaskToReadyList+0xc8>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d109      	bne.n	800d6f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d6e2:	4a2a      	ldr	r2, [pc, #168]	@ (800d78c <prvAddNewTaskToReadyList+0xc8>)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d6e8:	4b27      	ldr	r3, [pc, #156]	@ (800d788 <prvAddNewTaskToReadyList+0xc4>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d110      	bne.n	800d712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d6f0:	f000 fd28 	bl	800e144 <prvInitialiseTaskLists>
 800d6f4:	e00d      	b.n	800d712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d6f6:	4b26      	ldr	r3, [pc, #152]	@ (800d790 <prvAddNewTaskToReadyList+0xcc>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d109      	bne.n	800d712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d6fe:	4b23      	ldr	r3, [pc, #140]	@ (800d78c <prvAddNewTaskToReadyList+0xc8>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d708:	429a      	cmp	r2, r3
 800d70a:	d802      	bhi.n	800d712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d70c:	4a1f      	ldr	r2, [pc, #124]	@ (800d78c <prvAddNewTaskToReadyList+0xc8>)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d712:	4b20      	ldr	r3, [pc, #128]	@ (800d794 <prvAddNewTaskToReadyList+0xd0>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	3301      	adds	r3, #1
 800d718:	4a1e      	ldr	r2, [pc, #120]	@ (800d794 <prvAddNewTaskToReadyList+0xd0>)
 800d71a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d71c:	4b1d      	ldr	r3, [pc, #116]	@ (800d794 <prvAddNewTaskToReadyList+0xd0>)
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d728:	4b1b      	ldr	r3, [pc, #108]	@ (800d798 <prvAddNewTaskToReadyList+0xd4>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d903      	bls.n	800d738 <prvAddNewTaskToReadyList+0x74>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d734:	4a18      	ldr	r2, [pc, #96]	@ (800d798 <prvAddNewTaskToReadyList+0xd4>)
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d73c:	4613      	mov	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4a15      	ldr	r2, [pc, #84]	@ (800d79c <prvAddNewTaskToReadyList+0xd8>)
 800d746:	441a      	add	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4619      	mov	r1, r3
 800d74e:	4610      	mov	r0, r2
 800d750:	f7ff f8e9 	bl	800c926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d754:	f001 fc3a 	bl	800efcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d758:	4b0d      	ldr	r3, [pc, #52]	@ (800d790 <prvAddNewTaskToReadyList+0xcc>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00e      	beq.n	800d77e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d760:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <prvAddNewTaskToReadyList+0xc8>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d207      	bcs.n	800d77e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d76e:	4b0c      	ldr	r3, [pc, #48]	@ (800d7a0 <prvAddNewTaskToReadyList+0xdc>)
 800d770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d77e:	bf00      	nop
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20001d7c 	.word	0x20001d7c
 800d78c:	200018a8 	.word	0x200018a8
 800d790:	20001d88 	.word	0x20001d88
 800d794:	20001d98 	.word	0x20001d98
 800d798:	20001d84 	.word	0x20001d84
 800d79c:	200018ac 	.word	0x200018ac
 800d7a0:	e000ed04 	.word	0xe000ed04

0800d7a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d018      	beq.n	800d7e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d7b6:	4b14      	ldr	r3, [pc, #80]	@ (800d808 <vTaskDelay+0x64>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00b      	beq.n	800d7d6 <vTaskDelay+0x32>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	60bb      	str	r3, [r7, #8]
}
 800d7d0:	bf00      	nop
 800d7d2:	bf00      	nop
 800d7d4:	e7fd      	b.n	800d7d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d7d6:	f000 f88b 	bl	800d8f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d7da:	2100      	movs	r1, #0
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 fee5 	bl	800e5ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d7e2:	f000 f893 	bl	800d90c <xTaskResumeAll>
 800d7e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d107      	bne.n	800d7fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d7ee:	4b07      	ldr	r3, [pc, #28]	@ (800d80c <vTaskDelay+0x68>)
 800d7f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7fe:	bf00      	nop
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20001da4 	.word	0x20001da4
 800d80c:	e000ed04 	.word	0xe000ed04

0800d810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b08a      	sub	sp, #40	@ 0x28
 800d814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d816:	2300      	movs	r3, #0
 800d818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d81e:	463a      	mov	r2, r7
 800d820:	1d39      	adds	r1, r7, #4
 800d822:	f107 0308 	add.w	r3, r7, #8
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff f81c 	bl	800c864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	68ba      	ldr	r2, [r7, #8]
 800d832:	9202      	str	r2, [sp, #8]
 800d834:	9301      	str	r3, [sp, #4]
 800d836:	2300      	movs	r3, #0
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	2300      	movs	r3, #0
 800d83c:	460a      	mov	r2, r1
 800d83e:	4924      	ldr	r1, [pc, #144]	@ (800d8d0 <vTaskStartScheduler+0xc0>)
 800d840:	4824      	ldr	r0, [pc, #144]	@ (800d8d4 <vTaskStartScheduler+0xc4>)
 800d842:	f7ff fdf1 	bl	800d428 <xTaskCreateStatic>
 800d846:	4603      	mov	r3, r0
 800d848:	4a23      	ldr	r2, [pc, #140]	@ (800d8d8 <vTaskStartScheduler+0xc8>)
 800d84a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d84c:	4b22      	ldr	r3, [pc, #136]	@ (800d8d8 <vTaskStartScheduler+0xc8>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d854:	2301      	movs	r3, #1
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	e001      	b.n	800d85e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d102      	bne.n	800d86a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d864:	f000 fef6 	bl	800e654 <xTimerCreateTimerTask>
 800d868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d11b      	bne.n	800d8a8 <vTaskStartScheduler+0x98>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	613b      	str	r3, [r7, #16]
}
 800d882:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d884:	4b15      	ldr	r3, [pc, #84]	@ (800d8dc <vTaskStartScheduler+0xcc>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3354      	adds	r3, #84	@ 0x54
 800d88a:	4a15      	ldr	r2, [pc, #84]	@ (800d8e0 <vTaskStartScheduler+0xd0>)
 800d88c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d88e:	4b15      	ldr	r3, [pc, #84]	@ (800d8e4 <vTaskStartScheduler+0xd4>)
 800d890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d896:	4b14      	ldr	r3, [pc, #80]	@ (800d8e8 <vTaskStartScheduler+0xd8>)
 800d898:	2201      	movs	r2, #1
 800d89a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d89c:	4b13      	ldr	r3, [pc, #76]	@ (800d8ec <vTaskStartScheduler+0xdc>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d8a2:	f001 fabd 	bl	800ee20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d8a6:	e00f      	b.n	800d8c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8ae:	d10b      	bne.n	800d8c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	60fb      	str	r3, [r7, #12]
}
 800d8c2:	bf00      	nop
 800d8c4:	bf00      	nop
 800d8c6:	e7fd      	b.n	800d8c4 <vTaskStartScheduler+0xb4>
}
 800d8c8:	bf00      	nop
 800d8ca:	3718      	adds	r7, #24
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	08012490 	.word	0x08012490
 800d8d4:	0800e115 	.word	0x0800e115
 800d8d8:	20001da0 	.word	0x20001da0
 800d8dc:	200018a8 	.word	0x200018a8
 800d8e0:	20000138 	.word	0x20000138
 800d8e4:	20001d9c 	.word	0x20001d9c
 800d8e8:	20001d88 	.word	0x20001d88
 800d8ec:	20001d80 	.word	0x20001d80

0800d8f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d8f4:	4b04      	ldr	r3, [pc, #16]	@ (800d908 <vTaskSuspendAll+0x18>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	4a03      	ldr	r2, [pc, #12]	@ (800d908 <vTaskSuspendAll+0x18>)
 800d8fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d8fe:	bf00      	nop
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	20001da4 	.word	0x20001da4

0800d90c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d912:	2300      	movs	r3, #0
 800d914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d916:	2300      	movs	r3, #0
 800d918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d91a:	4b42      	ldr	r3, [pc, #264]	@ (800da24 <xTaskResumeAll+0x118>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d10b      	bne.n	800d93a <xTaskResumeAll+0x2e>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	603b      	str	r3, [r7, #0]
}
 800d934:	bf00      	nop
 800d936:	bf00      	nop
 800d938:	e7fd      	b.n	800d936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d93a:	f001 fb15 	bl	800ef68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d93e:	4b39      	ldr	r3, [pc, #228]	@ (800da24 <xTaskResumeAll+0x118>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3b01      	subs	r3, #1
 800d944:	4a37      	ldr	r2, [pc, #220]	@ (800da24 <xTaskResumeAll+0x118>)
 800d946:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d948:	4b36      	ldr	r3, [pc, #216]	@ (800da24 <xTaskResumeAll+0x118>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d162      	bne.n	800da16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d950:	4b35      	ldr	r3, [pc, #212]	@ (800da28 <xTaskResumeAll+0x11c>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d05e      	beq.n	800da16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d958:	e02f      	b.n	800d9ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d95a:	4b34      	ldr	r3, [pc, #208]	@ (800da2c <xTaskResumeAll+0x120>)
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3318      	adds	r3, #24
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff f83a 	bl	800c9e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	3304      	adds	r3, #4
 800d970:	4618      	mov	r0, r3
 800d972:	f7ff f835 	bl	800c9e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d97a:	4b2d      	ldr	r3, [pc, #180]	@ (800da30 <xTaskResumeAll+0x124>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d903      	bls.n	800d98a <xTaskResumeAll+0x7e>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d986:	4a2a      	ldr	r2, [pc, #168]	@ (800da30 <xTaskResumeAll+0x124>)
 800d988:	6013      	str	r3, [r2, #0]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d98e:	4613      	mov	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4413      	add	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4a27      	ldr	r2, [pc, #156]	@ (800da34 <xTaskResumeAll+0x128>)
 800d998:	441a      	add	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7fe ffc0 	bl	800c926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9aa:	4b23      	ldr	r3, [pc, #140]	@ (800da38 <xTaskResumeAll+0x12c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d302      	bcc.n	800d9ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d9b4:	4b21      	ldr	r3, [pc, #132]	@ (800da3c <xTaskResumeAll+0x130>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9ba:	4b1c      	ldr	r3, [pc, #112]	@ (800da2c <xTaskResumeAll+0x120>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1cb      	bne.n	800d95a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d9c8:	f000 fc60 	bl	800e28c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d9cc:	4b1c      	ldr	r3, [pc, #112]	@ (800da40 <xTaskResumeAll+0x134>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d010      	beq.n	800d9fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d9d8:	f000 f940 	bl	800dc5c <xTaskIncrementTick>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d9e2:	4b16      	ldr	r3, [pc, #88]	@ (800da3c <xTaskResumeAll+0x130>)
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1f1      	bne.n	800d9d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d9f4:	4b12      	ldr	r3, [pc, #72]	@ (800da40 <xTaskResumeAll+0x134>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d9fa:	4b10      	ldr	r3, [pc, #64]	@ (800da3c <xTaskResumeAll+0x130>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d009      	beq.n	800da16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da02:	2301      	movs	r3, #1
 800da04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da06:	4b0f      	ldr	r3, [pc, #60]	@ (800da44 <xTaskResumeAll+0x138>)
 800da08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da16:	f001 fad9 	bl	800efcc <vPortExitCritical>

	return xAlreadyYielded;
 800da1a:	68bb      	ldr	r3, [r7, #8]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	20001da4 	.word	0x20001da4
 800da28:	20001d7c 	.word	0x20001d7c
 800da2c:	20001d3c 	.word	0x20001d3c
 800da30:	20001d84 	.word	0x20001d84
 800da34:	200018ac 	.word	0x200018ac
 800da38:	200018a8 	.word	0x200018a8
 800da3c:	20001d90 	.word	0x20001d90
 800da40:	20001d8c 	.word	0x20001d8c
 800da44:	e000ed04 	.word	0xe000ed04

0800da48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800da4e:	4b05      	ldr	r3, [pc, #20]	@ (800da64 <xTaskGetTickCount+0x1c>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800da54:	687b      	ldr	r3, [r7, #4]
}
 800da56:	4618      	mov	r0, r3
 800da58:	370c      	adds	r7, #12
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	20001d80 	.word	0x20001d80

0800da68 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d102      	bne.n	800da7c <pcTaskGetName+0x14>
 800da76:	4b0e      	ldr	r3, [pc, #56]	@ (800dab0 <pcTaskGetName+0x48>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	e000      	b.n	800da7e <pcTaskGetName+0x16>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10b      	bne.n	800da9e <pcTaskGetName+0x36>
	__asm volatile
 800da86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	60bb      	str	r3, [r7, #8]
}
 800da98:	bf00      	nop
 800da9a:	bf00      	nop
 800da9c:	e7fd      	b.n	800da9a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3334      	adds	r3, #52	@ 0x34
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3714      	adds	r7, #20
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	200018a8 	.word	0x200018a8

0800dab4 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800dab4:	b480      	push	{r7}
 800dab6:	b08b      	sub	sp, #44	@ 0x2c
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800dabe:	2300      	movs	r3, #0
 800dac0:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d05b      	beq.n	800db82 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	61bb      	str	r3, [r7, #24]
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	605a      	str	r2, [r3, #4]
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	3308      	adds	r3, #8
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d104      	bne.n	800daee <prvSearchForNameWithinSingleList+0x3a>
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	685a      	ldr	r2, [r3, #4]
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	605a      	str	r2, [r3, #4]
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	613b      	str	r3, [r7, #16]
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	685a      	ldr	r2, [r3, #4]
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	605a      	str	r2, [r3, #4]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	3308      	adds	r3, #8
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d104      	bne.n	800db1a <prvSearchForNameWithinSingleList+0x66>
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	605a      	str	r2, [r3, #4]
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800db22:	2300      	movs	r3, #0
 800db24:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db26:	2300      	movs	r3, #0
 800db28:	623b      	str	r3, [r7, #32]
 800db2a:	e01c      	b.n	800db66 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	4413      	add	r3, r2
 800db32:	3334      	adds	r3, #52	@ 0x34
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800db38:	683a      	ldr	r2, [r7, #0]
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	4413      	add	r3, r2
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	7afa      	ldrb	r2, [r7, #11]
 800db42:	429a      	cmp	r2, r3
 800db44:	d002      	beq.n	800db4c <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800db46:	2301      	movs	r3, #1
 800db48:	61fb      	str	r3, [r7, #28]
 800db4a:	e006      	b.n	800db5a <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800db4c:	7afb      	ldrb	r3, [r7, #11]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d103      	bne.n	800db5a <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800db56:	2301      	movs	r3, #1
 800db58:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d106      	bne.n	800db6e <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db60:	6a3b      	ldr	r3, [r7, #32]
 800db62:	3301      	adds	r3, #1
 800db64:	623b      	str	r3, [r7, #32]
 800db66:	6a3b      	ldr	r3, [r7, #32]
 800db68:	2b0f      	cmp	r3, #15
 800db6a:	d9df      	bls.n	800db2c <prvSearchForNameWithinSingleList+0x78>
 800db6c:	e000      	b.n	800db70 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800db6e:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800db70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db72:	2b00      	cmp	r3, #0
 800db74:	d104      	bne.n	800db80 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800db76:	68fa      	ldr	r2, [r7, #12]
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d1bb      	bne.n	800daf6 <prvSearchForNameWithinSingleList+0x42>
 800db7e:	e000      	b.n	800db82 <prvSearchForNameWithinSingleList+0xce>
					break;
 800db80:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800db82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800db84:	4618      	mov	r0, r3
 800db86:	372c      	adds	r7, #44	@ 0x2c
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800db90:	b580      	push	{r7, lr}
 800db92:	b086      	sub	sp, #24
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800db98:	2338      	movs	r3, #56	@ 0x38
 800db9a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7f2 fb67 	bl	8000270 <strlen>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b0f      	cmp	r3, #15
 800dba6:	d90b      	bls.n	800dbc0 <xTaskGetHandle+0x30>
	__asm volatile
 800dba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	60fb      	str	r3, [r7, #12]
}
 800dbba:	bf00      	nop
 800dbbc:	bf00      	nop
 800dbbe:	e7fd      	b.n	800dbbc <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800dbc0:	f7ff fe96 	bl	800d8f0 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800dbca:	697a      	ldr	r2, [r7, #20]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4a1c      	ldr	r2, [pc, #112]	@ (800dc48 <xTaskGetHandle+0xb8>)
 800dbd6:	4413      	add	r3, r2
 800dbd8:	6879      	ldr	r1, [r7, #4]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff ff6a 	bl	800dab4 <prvSearchForNameWithinSingleList>
 800dbe0:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d103      	bne.n	800dbf0 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d1ea      	bne.n	800dbc4 <xTaskGetHandle+0x34>
 800dbee:	e000      	b.n	800dbf2 <xTaskGetHandle+0x62>
					break;
 800dbf0:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d106      	bne.n	800dc06 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800dbf8:	4b14      	ldr	r3, [pc, #80]	@ (800dc4c <xTaskGetHandle+0xbc>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff ff58 	bl	800dab4 <prvSearchForNameWithinSingleList>
 800dc04:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d106      	bne.n	800dc1a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800dc0c:	4b10      	ldr	r3, [pc, #64]	@ (800dc50 <xTaskGetHandle+0xc0>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7ff ff4e 	bl	800dab4 <prvSearchForNameWithinSingleList>
 800dc18:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d104      	bne.n	800dc2a <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800dc20:	6879      	ldr	r1, [r7, #4]
 800dc22:	480c      	ldr	r0, [pc, #48]	@ (800dc54 <xTaskGetHandle+0xc4>)
 800dc24:	f7ff ff46 	bl	800dab4 <prvSearchForNameWithinSingleList>
 800dc28:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d104      	bne.n	800dc3a <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800dc30:	6879      	ldr	r1, [r7, #4]
 800dc32:	4809      	ldr	r0, [pc, #36]	@ (800dc58 <xTaskGetHandle+0xc8>)
 800dc34:	f7ff ff3e 	bl	800dab4 <prvSearchForNameWithinSingleList>
 800dc38:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800dc3a:	f7ff fe67 	bl	800d90c <xTaskResumeAll>

		return pxTCB;
 800dc3e:	693b      	ldr	r3, [r7, #16]
	}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3718      	adds	r7, #24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	200018ac 	.word	0x200018ac
 800dc4c:	20001d34 	.word	0x20001d34
 800dc50:	20001d38 	.word	0x20001d38
 800dc54:	20001d68 	.word	0x20001d68
 800dc58:	20001d50 	.word	0x20001d50

0800dc5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc62:	2300      	movs	r3, #0
 800dc64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc66:	4b4f      	ldr	r3, [pc, #316]	@ (800dda4 <xTaskIncrementTick+0x148>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f040 8090 	bne.w	800dd90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc70:	4b4d      	ldr	r3, [pc, #308]	@ (800dda8 <xTaskIncrementTick+0x14c>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	3301      	adds	r3, #1
 800dc76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc78:	4a4b      	ldr	r2, [pc, #300]	@ (800dda8 <xTaskIncrementTick+0x14c>)
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d121      	bne.n	800dcc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc84:	4b49      	ldr	r3, [pc, #292]	@ (800ddac <xTaskIncrementTick+0x150>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00b      	beq.n	800dca6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc92:	f383 8811 	msr	BASEPRI, r3
 800dc96:	f3bf 8f6f 	isb	sy
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	603b      	str	r3, [r7, #0]
}
 800dca0:	bf00      	nop
 800dca2:	bf00      	nop
 800dca4:	e7fd      	b.n	800dca2 <xTaskIncrementTick+0x46>
 800dca6:	4b41      	ldr	r3, [pc, #260]	@ (800ddac <xTaskIncrementTick+0x150>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	60fb      	str	r3, [r7, #12]
 800dcac:	4b40      	ldr	r3, [pc, #256]	@ (800ddb0 <xTaskIncrementTick+0x154>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a3e      	ldr	r2, [pc, #248]	@ (800ddac <xTaskIncrementTick+0x150>)
 800dcb2:	6013      	str	r3, [r2, #0]
 800dcb4:	4a3e      	ldr	r2, [pc, #248]	@ (800ddb0 <xTaskIncrementTick+0x154>)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	4b3e      	ldr	r3, [pc, #248]	@ (800ddb4 <xTaskIncrementTick+0x158>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	4a3c      	ldr	r2, [pc, #240]	@ (800ddb4 <xTaskIncrementTick+0x158>)
 800dcc2:	6013      	str	r3, [r2, #0]
 800dcc4:	f000 fae2 	bl	800e28c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcc8:	4b3b      	ldr	r3, [pc, #236]	@ (800ddb8 <xTaskIncrementTick+0x15c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d349      	bcc.n	800dd66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcd2:	4b36      	ldr	r3, [pc, #216]	@ (800ddac <xTaskIncrementTick+0x150>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d104      	bne.n	800dce6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcdc:	4b36      	ldr	r3, [pc, #216]	@ (800ddb8 <xTaskIncrementTick+0x15c>)
 800dcde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dce2:	601a      	str	r2, [r3, #0]
					break;
 800dce4:	e03f      	b.n	800dd66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dce6:	4b31      	ldr	r3, [pc, #196]	@ (800ddac <xTaskIncrementTick+0x150>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dcf6:	693a      	ldr	r2, [r7, #16]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d203      	bcs.n	800dd06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dcfe:	4a2e      	ldr	r2, [pc, #184]	@ (800ddb8 <xTaskIncrementTick+0x15c>)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd04:	e02f      	b.n	800dd66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fe fe68 	bl	800c9e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d004      	beq.n	800dd22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	3318      	adds	r3, #24
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe fe5f 	bl	800c9e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd26:	4b25      	ldr	r3, [pc, #148]	@ (800ddbc <xTaskIncrementTick+0x160>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d903      	bls.n	800dd36 <xTaskIncrementTick+0xda>
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd32:	4a22      	ldr	r2, [pc, #136]	@ (800ddbc <xTaskIncrementTick+0x160>)
 800dd34:	6013      	str	r3, [r2, #0]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	4a1f      	ldr	r2, [pc, #124]	@ (800ddc0 <xTaskIncrementTick+0x164>)
 800dd44:	441a      	add	r2, r3
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	f7fe fdea 	bl	800c926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd56:	4b1b      	ldr	r3, [pc, #108]	@ (800ddc4 <xTaskIncrementTick+0x168>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d3b8      	bcc.n	800dcd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd64:	e7b5      	b.n	800dcd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd66:	4b17      	ldr	r3, [pc, #92]	@ (800ddc4 <xTaskIncrementTick+0x168>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd6c:	4914      	ldr	r1, [pc, #80]	@ (800ddc0 <xTaskIncrementTick+0x164>)
 800dd6e:	4613      	mov	r3, r2
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	4413      	add	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	440b      	add	r3, r1
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d901      	bls.n	800dd82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd82:	4b11      	ldr	r3, [pc, #68]	@ (800ddc8 <xTaskIncrementTick+0x16c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d007      	beq.n	800dd9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	e004      	b.n	800dd9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd90:	4b0e      	ldr	r3, [pc, #56]	@ (800ddcc <xTaskIncrementTick+0x170>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3301      	adds	r3, #1
 800dd96:	4a0d      	ldr	r2, [pc, #52]	@ (800ddcc <xTaskIncrementTick+0x170>)
 800dd98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd9a:	697b      	ldr	r3, [r7, #20]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	20001da4 	.word	0x20001da4
 800dda8:	20001d80 	.word	0x20001d80
 800ddac:	20001d34 	.word	0x20001d34
 800ddb0:	20001d38 	.word	0x20001d38
 800ddb4:	20001d94 	.word	0x20001d94
 800ddb8:	20001d9c 	.word	0x20001d9c
 800ddbc:	20001d84 	.word	0x20001d84
 800ddc0:	200018ac 	.word	0x200018ac
 800ddc4:	200018a8 	.word	0x200018a8
 800ddc8:	20001d90 	.word	0x20001d90
 800ddcc:	20001d8c 	.word	0x20001d8c

0800ddd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddd6:	4b2b      	ldr	r3, [pc, #172]	@ (800de84 <vTaskSwitchContext+0xb4>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ddde:	4b2a      	ldr	r3, [pc, #168]	@ (800de88 <vTaskSwitchContext+0xb8>)
 800dde0:	2201      	movs	r2, #1
 800dde2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dde4:	e047      	b.n	800de76 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800dde6:	4b28      	ldr	r3, [pc, #160]	@ (800de88 <vTaskSwitchContext+0xb8>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddec:	4b27      	ldr	r3, [pc, #156]	@ (800de8c <vTaskSwitchContext+0xbc>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	60fb      	str	r3, [r7, #12]
 800ddf2:	e011      	b.n	800de18 <vTaskSwitchContext+0x48>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10b      	bne.n	800de12 <vTaskSwitchContext+0x42>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	607b      	str	r3, [r7, #4]
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	e7fd      	b.n	800de0e <vTaskSwitchContext+0x3e>
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3b01      	subs	r3, #1
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	491d      	ldr	r1, [pc, #116]	@ (800de90 <vTaskSwitchContext+0xc0>)
 800de1a:	68fa      	ldr	r2, [r7, #12]
 800de1c:	4613      	mov	r3, r2
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	4413      	add	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	440b      	add	r3, r1
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d0e3      	beq.n	800ddf4 <vTaskSwitchContext+0x24>
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	4613      	mov	r3, r2
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	4413      	add	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4a16      	ldr	r2, [pc, #88]	@ (800de90 <vTaskSwitchContext+0xc0>)
 800de38:	4413      	add	r3, r2
 800de3a:	60bb      	str	r3, [r7, #8]
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	685a      	ldr	r2, [r3, #4]
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	605a      	str	r2, [r3, #4]
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	3308      	adds	r3, #8
 800de4e:	429a      	cmp	r2, r3
 800de50:	d104      	bne.n	800de5c <vTaskSwitchContext+0x8c>
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	605a      	str	r2, [r3, #4]
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	4a0c      	ldr	r2, [pc, #48]	@ (800de94 <vTaskSwitchContext+0xc4>)
 800de64:	6013      	str	r3, [r2, #0]
 800de66:	4a09      	ldr	r2, [pc, #36]	@ (800de8c <vTaskSwitchContext+0xbc>)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de6c:	4b09      	ldr	r3, [pc, #36]	@ (800de94 <vTaskSwitchContext+0xc4>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3354      	adds	r3, #84	@ 0x54
 800de72:	4a09      	ldr	r2, [pc, #36]	@ (800de98 <vTaskSwitchContext+0xc8>)
 800de74:	6013      	str	r3, [r2, #0]
}
 800de76:	bf00      	nop
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	20001da4 	.word	0x20001da4
 800de88:	20001d90 	.word	0x20001d90
 800de8c:	20001d84 	.word	0x20001d84
 800de90:	200018ac 	.word	0x200018ac
 800de94:	200018a8 	.word	0x200018a8
 800de98:	20000138 	.word	0x20000138

0800de9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10b      	bne.n	800dec4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800deac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	60fb      	str	r3, [r7, #12]
}
 800debe:	bf00      	nop
 800dec0:	bf00      	nop
 800dec2:	e7fd      	b.n	800dec0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dec4:	4b07      	ldr	r3, [pc, #28]	@ (800dee4 <vTaskPlaceOnEventList+0x48>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	3318      	adds	r3, #24
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7fe fd4e 	bl	800c96e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ded2:	2101      	movs	r1, #1
 800ded4:	6838      	ldr	r0, [r7, #0]
 800ded6:	f000 fb69 	bl	800e5ac <prvAddCurrentTaskToDelayedList>
}
 800deda:	bf00      	nop
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	200018a8 	.word	0x200018a8

0800dee8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10b      	bne.n	800df12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	617b      	str	r3, [r7, #20]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df12:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <vTaskPlaceOnEventListRestricted+0x54>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3318      	adds	r3, #24
 800df18:	4619      	mov	r1, r3
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f7fe fd03 	bl	800c926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800df26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	68b8      	ldr	r0, [r7, #8]
 800df30:	f000 fb3c 	bl	800e5ac <prvAddCurrentTaskToDelayedList>
	}
 800df34:	bf00      	nop
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	200018a8 	.word	0x200018a8

0800df40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10b      	bne.n	800df6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800df56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df5a:	f383 8811 	msr	BASEPRI, r3
 800df5e:	f3bf 8f6f 	isb	sy
 800df62:	f3bf 8f4f 	dsb	sy
 800df66:	60fb      	str	r3, [r7, #12]
}
 800df68:	bf00      	nop
 800df6a:	bf00      	nop
 800df6c:	e7fd      	b.n	800df6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	3318      	adds	r3, #24
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe fd34 	bl	800c9e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df78:	4b1d      	ldr	r3, [pc, #116]	@ (800dff0 <xTaskRemoveFromEventList+0xb0>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d11d      	bne.n	800dfbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	3304      	adds	r3, #4
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe fd2b 	bl	800c9e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df8e:	4b19      	ldr	r3, [pc, #100]	@ (800dff4 <xTaskRemoveFromEventList+0xb4>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	429a      	cmp	r2, r3
 800df94:	d903      	bls.n	800df9e <xTaskRemoveFromEventList+0x5e>
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df9a:	4a16      	ldr	r2, [pc, #88]	@ (800dff4 <xTaskRemoveFromEventList+0xb4>)
 800df9c:	6013      	str	r3, [r2, #0]
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	4a13      	ldr	r2, [pc, #76]	@ (800dff8 <xTaskRemoveFromEventList+0xb8>)
 800dfac:	441a      	add	r2, r3
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	f7fe fcb6 	bl	800c926 <vListInsertEnd>
 800dfba:	e005      	b.n	800dfc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	3318      	adds	r3, #24
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	480e      	ldr	r0, [pc, #56]	@ (800dffc <xTaskRemoveFromEventList+0xbc>)
 800dfc4:	f7fe fcaf 	bl	800c926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfcc:	4b0c      	ldr	r3, [pc, #48]	@ (800e000 <xTaskRemoveFromEventList+0xc0>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d905      	bls.n	800dfe2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dfda:	4b0a      	ldr	r3, [pc, #40]	@ (800e004 <xTaskRemoveFromEventList+0xc4>)
 800dfdc:	2201      	movs	r2, #1
 800dfde:	601a      	str	r2, [r3, #0]
 800dfe0:	e001      	b.n	800dfe6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dfe6:	697b      	ldr	r3, [r7, #20]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	20001da4 	.word	0x20001da4
 800dff4:	20001d84 	.word	0x20001d84
 800dff8:	200018ac 	.word	0x200018ac
 800dffc:	20001d3c 	.word	0x20001d3c
 800e000:	200018a8 	.word	0x200018a8
 800e004:	20001d90 	.word	0x20001d90

0800e008 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e010:	4b06      	ldr	r3, [pc, #24]	@ (800e02c <vTaskInternalSetTimeOutState+0x24>)
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e018:	4b05      	ldr	r3, [pc, #20]	@ (800e030 <vTaskInternalSetTimeOutState+0x28>)
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	605a      	str	r2, [r3, #4]
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	20001d94 	.word	0x20001d94
 800e030:	20001d80 	.word	0x20001d80

0800e034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b088      	sub	sp, #32
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10b      	bne.n	800e05c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	613b      	str	r3, [r7, #16]
}
 800e056:	bf00      	nop
 800e058:	bf00      	nop
 800e05a:	e7fd      	b.n	800e058 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10b      	bne.n	800e07a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	60fb      	str	r3, [r7, #12]
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop
 800e078:	e7fd      	b.n	800e076 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e07a:	f000 ff75 	bl	800ef68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e07e:	4b1d      	ldr	r3, [pc, #116]	@ (800e0f4 <xTaskCheckForTimeOut+0xc0>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	69ba      	ldr	r2, [r7, #24]
 800e08a:	1ad3      	subs	r3, r2, r3
 800e08c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e096:	d102      	bne.n	800e09e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e098:	2300      	movs	r3, #0
 800e09a:	61fb      	str	r3, [r7, #28]
 800e09c:	e023      	b.n	800e0e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	4b15      	ldr	r3, [pc, #84]	@ (800e0f8 <xTaskCheckForTimeOut+0xc4>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d007      	beq.n	800e0ba <xTaskCheckForTimeOut+0x86>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	69ba      	ldr	r2, [r7, #24]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d302      	bcc.n	800e0ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	61fb      	str	r3, [r7, #28]
 800e0b8:	e015      	b.n	800e0e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d20b      	bcs.n	800e0dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	1ad2      	subs	r2, r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7ff ff99 	bl	800e008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	e004      	b.n	800e0e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e0e6:	f000 ff71 	bl	800efcc <vPortExitCritical>

	return xReturn;
 800e0ea:	69fb      	ldr	r3, [r7, #28]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3720      	adds	r7, #32
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	20001d80 	.word	0x20001d80
 800e0f8:	20001d94 	.word	0x20001d94

0800e0fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e100:	4b03      	ldr	r3, [pc, #12]	@ (800e110 <vTaskMissedYield+0x14>)
 800e102:	2201      	movs	r2, #1
 800e104:	601a      	str	r2, [r3, #0]
}
 800e106:	bf00      	nop
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	20001d90 	.word	0x20001d90

0800e114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e11c:	f000 f852 	bl	800e1c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e120:	4b06      	ldr	r3, [pc, #24]	@ (800e13c <prvIdleTask+0x28>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d9f9      	bls.n	800e11c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e128:	4b05      	ldr	r3, [pc, #20]	@ (800e140 <prvIdleTask+0x2c>)
 800e12a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e12e:	601a      	str	r2, [r3, #0]
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e138:	e7f0      	b.n	800e11c <prvIdleTask+0x8>
 800e13a:	bf00      	nop
 800e13c:	200018ac 	.word	0x200018ac
 800e140:	e000ed04 	.word	0xe000ed04

0800e144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e14a:	2300      	movs	r3, #0
 800e14c:	607b      	str	r3, [r7, #4]
 800e14e:	e00c      	b.n	800e16a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	4613      	mov	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4a12      	ldr	r2, [pc, #72]	@ (800e1a4 <prvInitialiseTaskLists+0x60>)
 800e15c:	4413      	add	r3, r2
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fe fbb4 	bl	800c8cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3301      	adds	r3, #1
 800e168:	607b      	str	r3, [r7, #4]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b37      	cmp	r3, #55	@ 0x37
 800e16e:	d9ef      	bls.n	800e150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e170:	480d      	ldr	r0, [pc, #52]	@ (800e1a8 <prvInitialiseTaskLists+0x64>)
 800e172:	f7fe fbab 	bl	800c8cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e176:	480d      	ldr	r0, [pc, #52]	@ (800e1ac <prvInitialiseTaskLists+0x68>)
 800e178:	f7fe fba8 	bl	800c8cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e17c:	480c      	ldr	r0, [pc, #48]	@ (800e1b0 <prvInitialiseTaskLists+0x6c>)
 800e17e:	f7fe fba5 	bl	800c8cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e182:	480c      	ldr	r0, [pc, #48]	@ (800e1b4 <prvInitialiseTaskLists+0x70>)
 800e184:	f7fe fba2 	bl	800c8cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e188:	480b      	ldr	r0, [pc, #44]	@ (800e1b8 <prvInitialiseTaskLists+0x74>)
 800e18a:	f7fe fb9f 	bl	800c8cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e18e:	4b0b      	ldr	r3, [pc, #44]	@ (800e1bc <prvInitialiseTaskLists+0x78>)
 800e190:	4a05      	ldr	r2, [pc, #20]	@ (800e1a8 <prvInitialiseTaskLists+0x64>)
 800e192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e194:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c0 <prvInitialiseTaskLists+0x7c>)
 800e196:	4a05      	ldr	r2, [pc, #20]	@ (800e1ac <prvInitialiseTaskLists+0x68>)
 800e198:	601a      	str	r2, [r3, #0]
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	200018ac 	.word	0x200018ac
 800e1a8:	20001d0c 	.word	0x20001d0c
 800e1ac:	20001d20 	.word	0x20001d20
 800e1b0:	20001d3c 	.word	0x20001d3c
 800e1b4:	20001d50 	.word	0x20001d50
 800e1b8:	20001d68 	.word	0x20001d68
 800e1bc:	20001d34 	.word	0x20001d34
 800e1c0:	20001d38 	.word	0x20001d38

0800e1c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1ca:	e019      	b.n	800e200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e1cc:	f000 fecc 	bl	800ef68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1d0:	4b10      	ldr	r3, [pc, #64]	@ (800e214 <prvCheckTasksWaitingTermination+0x50>)
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	3304      	adds	r3, #4
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fe fbff 	bl	800c9e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e218 <prvCheckTasksWaitingTermination+0x54>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	4a0b      	ldr	r2, [pc, #44]	@ (800e218 <prvCheckTasksWaitingTermination+0x54>)
 800e1ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e1ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e21c <prvCheckTasksWaitingTermination+0x58>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	4a0a      	ldr	r2, [pc, #40]	@ (800e21c <prvCheckTasksWaitingTermination+0x58>)
 800e1f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e1f6:	f000 fee9 	bl	800efcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f810 	bl	800e220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e200:	4b06      	ldr	r3, [pc, #24]	@ (800e21c <prvCheckTasksWaitingTermination+0x58>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1e1      	bne.n	800e1cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	20001d50 	.word	0x20001d50
 800e218:	20001d7c 	.word	0x20001d7c
 800e21c:	20001d64 	.word	0x20001d64

0800e220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3354      	adds	r3, #84	@ 0x54
 800e22c:	4618      	mov	r0, r3
 800e22e:	f001 fef1 	bl	8010014 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d108      	bne.n	800e24e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e240:	4618      	mov	r0, r3
 800e242:	f001 f881 	bl	800f348 <vPortFree>
				vPortFree( pxTCB );
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f001 f87e 	bl	800f348 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e24c:	e019      	b.n	800e282 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e254:	2b01      	cmp	r3, #1
 800e256:	d103      	bne.n	800e260 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f001 f875 	bl	800f348 <vPortFree>
	}
 800e25e:	e010      	b.n	800e282 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e266:	2b02      	cmp	r3, #2
 800e268:	d00b      	beq.n	800e282 <prvDeleteTCB+0x62>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	60fb      	str	r3, [r7, #12]
}
 800e27c:	bf00      	nop
 800e27e:	bf00      	nop
 800e280:	e7fd      	b.n	800e27e <prvDeleteTCB+0x5e>
	}
 800e282:	bf00      	nop
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
	...

0800e28c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e292:	4b0c      	ldr	r3, [pc, #48]	@ (800e2c4 <prvResetNextTaskUnblockTime+0x38>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d104      	bne.n	800e2a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e29c:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c8 <prvResetNextTaskUnblockTime+0x3c>)
 800e29e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2a4:	e008      	b.n	800e2b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2a6:	4b07      	ldr	r3, [pc, #28]	@ (800e2c4 <prvResetNextTaskUnblockTime+0x38>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	4a04      	ldr	r2, [pc, #16]	@ (800e2c8 <prvResetNextTaskUnblockTime+0x3c>)
 800e2b6:	6013      	str	r3, [r2, #0]
}
 800e2b8:	bf00      	nop
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	20001d34 	.word	0x20001d34
 800e2c8:	20001d9c 	.word	0x20001d9c

0800e2cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e2d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e300 <xTaskGetSchedulerState+0x34>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d102      	bne.n	800e2e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	607b      	str	r3, [r7, #4]
 800e2de:	e008      	b.n	800e2f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2e0:	4b08      	ldr	r3, [pc, #32]	@ (800e304 <xTaskGetSchedulerState+0x38>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	607b      	str	r3, [r7, #4]
 800e2ec:	e001      	b.n	800e2f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e2f2:	687b      	ldr	r3, [r7, #4]
	}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	20001d88 	.word	0x20001d88
 800e304:	20001da4 	.word	0x20001da4

0800e308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e314:	2300      	movs	r3, #0
 800e316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d058      	beq.n	800e3d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e31e:	4b2f      	ldr	r3, [pc, #188]	@ (800e3dc <xTaskPriorityDisinherit+0xd4>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	429a      	cmp	r2, r3
 800e326:	d00b      	beq.n	800e340 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	60fb      	str	r3, [r7, #12]
}
 800e33a:	bf00      	nop
 800e33c:	bf00      	nop
 800e33e:	e7fd      	b.n	800e33c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10b      	bne.n	800e360 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	60bb      	str	r3, [r7, #8]
}
 800e35a:	bf00      	nop
 800e35c:	bf00      	nop
 800e35e:	e7fd      	b.n	800e35c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e364:	1e5a      	subs	r2, r3, #1
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e372:	429a      	cmp	r2, r3
 800e374:	d02c      	beq.n	800e3d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d128      	bne.n	800e3d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	3304      	adds	r3, #4
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe fb2c 	bl	800c9e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e394:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e0 <xTaskPriorityDisinherit+0xd8>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d903      	bls.n	800e3b0 <xTaskPriorityDisinherit+0xa8>
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ac:	4a0c      	ldr	r2, [pc, #48]	@ (800e3e0 <xTaskPriorityDisinherit+0xd8>)
 800e3ae:	6013      	str	r3, [r2, #0]
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4a09      	ldr	r2, [pc, #36]	@ (800e3e4 <xTaskPriorityDisinherit+0xdc>)
 800e3be:	441a      	add	r2, r3
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	3304      	adds	r3, #4
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	f7fe faad 	bl	800c926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3d0:	697b      	ldr	r3, [r7, #20]
	}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3718      	adds	r7, #24
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	200018a8 	.word	0x200018a8
 800e3e0:	20001d84 	.word	0x20001d84
 800e3e4:	200018ac 	.word	0x200018ac

0800e3e8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e3f2:	f000 fdb9 	bl	800ef68 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e3f6:	4b20      	ldr	r3, [pc, #128]	@ (800e478 <ulTaskNotifyTake+0x90>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d113      	bne.n	800e42a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e402:	4b1d      	ldr	r3, [pc, #116]	@ (800e478 <ulTaskNotifyTake+0x90>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2201      	movs	r2, #1
 800e408:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00b      	beq.n	800e42a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e412:	2101      	movs	r1, #1
 800e414:	6838      	ldr	r0, [r7, #0]
 800e416:	f000 f8c9 	bl	800e5ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e41a:	4b18      	ldr	r3, [pc, #96]	@ (800e47c <ulTaskNotifyTake+0x94>)
 800e41c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e420:	601a      	str	r2, [r3, #0]
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e42a:	f000 fdcf 	bl	800efcc <vPortExitCritical>

		taskENTER_CRITICAL();
 800e42e:	f000 fd9b 	bl	800ef68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e432:	4b11      	ldr	r3, [pc, #68]	@ (800e478 <ulTaskNotifyTake+0x90>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e43a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00e      	beq.n	800e460 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d005      	beq.n	800e454 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e448:	4b0b      	ldr	r3, [pc, #44]	@ (800e478 <ulTaskNotifyTake+0x90>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2200      	movs	r2, #0
 800e44e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e452:	e005      	b.n	800e460 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800e454:	4b08      	ldr	r3, [pc, #32]	@ (800e478 <ulTaskNotifyTake+0x90>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	3a01      	subs	r2, #1
 800e45c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e460:	4b05      	ldr	r3, [pc, #20]	@ (800e478 <ulTaskNotifyTake+0x90>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2200      	movs	r2, #0
 800e466:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800e46a:	f000 fdaf 	bl	800efcc <vPortExitCritical>

		return ulReturn;
 800e46e:	68fb      	ldr	r3, [r7, #12]
	}
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	200018a8 	.word	0x200018a8
 800e47c:	e000ed04 	.word	0xe000ed04

0800e480 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08a      	sub	sp, #40	@ 0x28
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10b      	bne.n	800e4a8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	61bb      	str	r3, [r7, #24]
}
 800e4a2:	bf00      	nop
 800e4a4:	bf00      	nop
 800e4a6:	e7fd      	b.n	800e4a4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4a8:	f000 fe3e 	bl	800f128 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800e4b0:	f3ef 8211 	mrs	r2, BASEPRI
 800e4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	617a      	str	r2, [r7, #20]
 800e4c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e4c8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4ca:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ce:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e4d2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e4ea:	7ffb      	ldrb	r3, [r7, #31]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d147      	bne.n	800e580 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00b      	beq.n	800e510 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	60fb      	str	r3, [r7, #12]
}
 800e50a:	bf00      	nop
 800e50c:	bf00      	nop
 800e50e:	e7fd      	b.n	800e50c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e510:	4b20      	ldr	r3, [pc, #128]	@ (800e594 <vTaskNotifyGiveFromISR+0x114>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d11d      	bne.n	800e554 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51a:	3304      	adds	r3, #4
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fe fa5f 	bl	800c9e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e526:	4b1c      	ldr	r3, [pc, #112]	@ (800e598 <vTaskNotifyGiveFromISR+0x118>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d903      	bls.n	800e536 <vTaskNotifyGiveFromISR+0xb6>
 800e52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e532:	4a19      	ldr	r2, [pc, #100]	@ (800e598 <vTaskNotifyGiveFromISR+0x118>)
 800e534:	6013      	str	r3, [r2, #0]
 800e536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e53a:	4613      	mov	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4413      	add	r3, r2
 800e540:	009b      	lsls	r3, r3, #2
 800e542:	4a16      	ldr	r2, [pc, #88]	@ (800e59c <vTaskNotifyGiveFromISR+0x11c>)
 800e544:	441a      	add	r2, r3
 800e546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e548:	3304      	adds	r3, #4
 800e54a:	4619      	mov	r1, r3
 800e54c:	4610      	mov	r0, r2
 800e54e:	f7fe f9ea 	bl	800c926 <vListInsertEnd>
 800e552:	e005      	b.n	800e560 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e556:	3318      	adds	r3, #24
 800e558:	4619      	mov	r1, r3
 800e55a:	4811      	ldr	r0, [pc, #68]	@ (800e5a0 <vTaskNotifyGiveFromISR+0x120>)
 800e55c:	f7fe f9e3 	bl	800c926 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e564:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a4 <vTaskNotifyGiveFromISR+0x124>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d908      	bls.n	800e580 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d002      	beq.n	800e57a <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2201      	movs	r2, #1
 800e578:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e57a:	4b0b      	ldr	r3, [pc, #44]	@ (800e5a8 <vTaskNotifyGiveFromISR+0x128>)
 800e57c:	2201      	movs	r2, #1
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	6a3b      	ldr	r3, [r7, #32]
 800e582:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	f383 8811 	msr	BASEPRI, r3
}
 800e58a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800e58c:	bf00      	nop
 800e58e:	3728      	adds	r7, #40	@ 0x28
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	20001da4 	.word	0x20001da4
 800e598:	20001d84 	.word	0x20001d84
 800e59c:	200018ac 	.word	0x200018ac
 800e5a0:	20001d3c 	.word	0x20001d3c
 800e5a4:	200018a8 	.word	0x200018a8
 800e5a8:	20001d90 	.word	0x20001d90

0800e5ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e5b6:	4b21      	ldr	r3, [pc, #132]	@ (800e63c <prvAddCurrentTaskToDelayedList+0x90>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5bc:	4b20      	ldr	r3, [pc, #128]	@ (800e640 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fe fa0c 	bl	800c9e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5ce:	d10a      	bne.n	800e5e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d007      	beq.n	800e5e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e640 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	3304      	adds	r3, #4
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4819      	ldr	r0, [pc, #100]	@ (800e644 <prvAddCurrentTaskToDelayedList+0x98>)
 800e5e0:	f7fe f9a1 	bl	800c926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5e4:	e026      	b.n	800e634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5ee:	4b14      	ldr	r3, [pc, #80]	@ (800e640 <prvAddCurrentTaskToDelayedList+0x94>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d209      	bcs.n	800e612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5fe:	4b12      	ldr	r3, [pc, #72]	@ (800e648 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	4b0f      	ldr	r3, [pc, #60]	@ (800e640 <prvAddCurrentTaskToDelayedList+0x94>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	3304      	adds	r3, #4
 800e608:	4619      	mov	r1, r3
 800e60a:	4610      	mov	r0, r2
 800e60c:	f7fe f9af 	bl	800c96e <vListInsert>
}
 800e610:	e010      	b.n	800e634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e612:	4b0e      	ldr	r3, [pc, #56]	@ (800e64c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	4b0a      	ldr	r3, [pc, #40]	@ (800e640 <prvAddCurrentTaskToDelayedList+0x94>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	3304      	adds	r3, #4
 800e61c:	4619      	mov	r1, r3
 800e61e:	4610      	mov	r0, r2
 800e620:	f7fe f9a5 	bl	800c96e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e624:	4b0a      	ldr	r3, [pc, #40]	@ (800e650 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d202      	bcs.n	800e634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e62e:	4a08      	ldr	r2, [pc, #32]	@ (800e650 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	6013      	str	r3, [r2, #0]
}
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	20001d80 	.word	0x20001d80
 800e640:	200018a8 	.word	0x200018a8
 800e644:	20001d68 	.word	0x20001d68
 800e648:	20001d38 	.word	0x20001d38
 800e64c:	20001d34 	.word	0x20001d34
 800e650:	20001d9c 	.word	0x20001d9c

0800e654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b08a      	sub	sp, #40	@ 0x28
 800e658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e65a:	2300      	movs	r3, #0
 800e65c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e65e:	f000 fb13 	bl	800ec88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e662:	4b1d      	ldr	r3, [pc, #116]	@ (800e6d8 <xTimerCreateTimerTask+0x84>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d021      	beq.n	800e6ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e66a:	2300      	movs	r3, #0
 800e66c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e66e:	2300      	movs	r3, #0
 800e670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e672:	1d3a      	adds	r2, r7, #4
 800e674:	f107 0108 	add.w	r1, r7, #8
 800e678:	f107 030c 	add.w	r3, r7, #12
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fe f90b 	bl	800c898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e682:	6879      	ldr	r1, [r7, #4]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	9202      	str	r2, [sp, #8]
 800e68a:	9301      	str	r3, [sp, #4]
 800e68c:	2302      	movs	r3, #2
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	2300      	movs	r3, #0
 800e692:	460a      	mov	r2, r1
 800e694:	4911      	ldr	r1, [pc, #68]	@ (800e6dc <xTimerCreateTimerTask+0x88>)
 800e696:	4812      	ldr	r0, [pc, #72]	@ (800e6e0 <xTimerCreateTimerTask+0x8c>)
 800e698:	f7fe fec6 	bl	800d428 <xTaskCreateStatic>
 800e69c:	4603      	mov	r3, r0
 800e69e:	4a11      	ldr	r2, [pc, #68]	@ (800e6e4 <xTimerCreateTimerTask+0x90>)
 800e6a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e6a2:	4b10      	ldr	r3, [pc, #64]	@ (800e6e4 <xTimerCreateTimerTask+0x90>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10b      	bne.n	800e6cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b8:	f383 8811 	msr	BASEPRI, r3
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f3bf 8f4f 	dsb	sy
 800e6c4:	613b      	str	r3, [r7, #16]
}
 800e6c6:	bf00      	nop
 800e6c8:	bf00      	nop
 800e6ca:	e7fd      	b.n	800e6c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e6cc:	697b      	ldr	r3, [r7, #20]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3718      	adds	r7, #24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	20001dd8 	.word	0x20001dd8
 800e6dc:	08012498 	.word	0x08012498
 800e6e0:	0800e821 	.word	0x0800e821
 800e6e4:	20001ddc 	.word	0x20001ddc

0800e6e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b08a      	sub	sp, #40	@ 0x28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
 800e6f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d10b      	bne.n	800e718 <xTimerGenericCommand+0x30>
	__asm volatile
 800e700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e704:	f383 8811 	msr	BASEPRI, r3
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	623b      	str	r3, [r7, #32]
}
 800e712:	bf00      	nop
 800e714:	bf00      	nop
 800e716:	e7fd      	b.n	800e714 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e718:	4b19      	ldr	r3, [pc, #100]	@ (800e780 <xTimerGenericCommand+0x98>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d02a      	beq.n	800e776 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	2b05      	cmp	r3, #5
 800e730:	dc18      	bgt.n	800e764 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e732:	f7ff fdcb 	bl	800e2cc <xTaskGetSchedulerState>
 800e736:	4603      	mov	r3, r0
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d109      	bne.n	800e750 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e73c:	4b10      	ldr	r3, [pc, #64]	@ (800e780 <xTimerGenericCommand+0x98>)
 800e73e:	6818      	ldr	r0, [r3, #0]
 800e740:	f107 0110 	add.w	r1, r7, #16
 800e744:	2300      	movs	r3, #0
 800e746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e748:	f7fe fa7e 	bl	800cc48 <xQueueGenericSend>
 800e74c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e74e:	e012      	b.n	800e776 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e750:	4b0b      	ldr	r3, [pc, #44]	@ (800e780 <xTimerGenericCommand+0x98>)
 800e752:	6818      	ldr	r0, [r3, #0]
 800e754:	f107 0110 	add.w	r1, r7, #16
 800e758:	2300      	movs	r3, #0
 800e75a:	2200      	movs	r2, #0
 800e75c:	f7fe fa74 	bl	800cc48 <xQueueGenericSend>
 800e760:	6278      	str	r0, [r7, #36]	@ 0x24
 800e762:	e008      	b.n	800e776 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e764:	4b06      	ldr	r3, [pc, #24]	@ (800e780 <xTimerGenericCommand+0x98>)
 800e766:	6818      	ldr	r0, [r3, #0]
 800e768:	f107 0110 	add.w	r1, r7, #16
 800e76c:	2300      	movs	r3, #0
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	f7fe fb6c 	bl	800ce4c <xQueueGenericSendFromISR>
 800e774:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3728      	adds	r7, #40	@ 0x28
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	20001dd8 	.word	0x20001dd8

0800e784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b088      	sub	sp, #32
 800e788:	af02      	add	r7, sp, #8
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e78e:	4b23      	ldr	r3, [pc, #140]	@ (800e81c <prvProcessExpiredTimer+0x98>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	3304      	adds	r3, #4
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fe f91f 	bl	800c9e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7a8:	f003 0304 	and.w	r3, r3, #4
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d023      	beq.n	800e7f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	699a      	ldr	r2, [r3, #24]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	18d1      	adds	r1, r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	6978      	ldr	r0, [r7, #20]
 800e7be:	f000 f8d5 	bl	800e96c <prvInsertTimerInActiveList>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d020      	beq.n	800e80a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	6978      	ldr	r0, [r7, #20]
 800e7d4:	f7ff ff88 	bl	800e6e8 <xTimerGenericCommand>
 800e7d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d114      	bne.n	800e80a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	60fb      	str	r3, [r7, #12]
}
 800e7f2:	bf00      	nop
 800e7f4:	bf00      	nop
 800e7f6:	e7fd      	b.n	800e7f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7fe:	f023 0301 	bic.w	r3, r3, #1
 800e802:	b2da      	uxtb	r2, r3
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	6a1b      	ldr	r3, [r3, #32]
 800e80e:	6978      	ldr	r0, [r7, #20]
 800e810:	4798      	blx	r3
}
 800e812:	bf00      	nop
 800e814:	3718      	adds	r7, #24
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	20001dd0 	.word	0x20001dd0

0800e820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e828:	f107 0308 	add.w	r3, r7, #8
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 f859 	bl	800e8e4 <prvGetNextExpireTime>
 800e832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	4619      	mov	r1, r3
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f000 f805 	bl	800e848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e83e:	f000 f8d7 	bl	800e9f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e842:	bf00      	nop
 800e844:	e7f0      	b.n	800e828 <prvTimerTask+0x8>
	...

0800e848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e852:	f7ff f84d 	bl	800d8f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e856:	f107 0308 	add.w	r3, r7, #8
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 f866 	bl	800e92c <prvSampleTimeNow>
 800e860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d130      	bne.n	800e8ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10a      	bne.n	800e884 <prvProcessTimerOrBlockTask+0x3c>
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	429a      	cmp	r2, r3
 800e874:	d806      	bhi.n	800e884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e876:	f7ff f849 	bl	800d90c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e87a:	68f9      	ldr	r1, [r7, #12]
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f7ff ff81 	bl	800e784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e882:	e024      	b.n	800e8ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d008      	beq.n	800e89c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e88a:	4b13      	ldr	r3, [pc, #76]	@ (800e8d8 <prvProcessTimerOrBlockTask+0x90>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <prvProcessTimerOrBlockTask+0x50>
 800e894:	2301      	movs	r3, #1
 800e896:	e000      	b.n	800e89a <prvProcessTimerOrBlockTask+0x52>
 800e898:	2300      	movs	r3, #0
 800e89a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e89c:	4b0f      	ldr	r3, [pc, #60]	@ (800e8dc <prvProcessTimerOrBlockTask+0x94>)
 800e89e:	6818      	ldr	r0, [r3, #0]
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	1ad3      	subs	r3, r2, r3
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	f7fe fd89 	bl	800d3c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e8ae:	f7ff f82d 	bl	800d90c <xTaskResumeAll>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10a      	bne.n	800e8ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e8b8:	4b09      	ldr	r3, [pc, #36]	@ (800e8e0 <prvProcessTimerOrBlockTask+0x98>)
 800e8ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8be:	601a      	str	r2, [r3, #0]
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	f3bf 8f6f 	isb	sy
}
 800e8c8:	e001      	b.n	800e8ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e8ca:	f7ff f81f 	bl	800d90c <xTaskResumeAll>
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20001dd4 	.word	0x20001dd4
 800e8dc:	20001dd8 	.word	0x20001dd8
 800e8e0:	e000ed04 	.word	0xe000ed04

0800e8e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800e928 <prvGetNextExpireTime+0x44>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <prvGetNextExpireTime+0x16>
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	e000      	b.n	800e8fc <prvGetNextExpireTime+0x18>
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d105      	bne.n	800e914 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e908:	4b07      	ldr	r3, [pc, #28]	@ (800e928 <prvGetNextExpireTime+0x44>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	60fb      	str	r3, [r7, #12]
 800e912:	e001      	b.n	800e918 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e914:	2300      	movs	r3, #0
 800e916:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e918:	68fb      	ldr	r3, [r7, #12]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3714      	adds	r7, #20
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	20001dd0 	.word	0x20001dd0

0800e92c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e934:	f7ff f888 	bl	800da48 <xTaskGetTickCount>
 800e938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e93a:	4b0b      	ldr	r3, [pc, #44]	@ (800e968 <prvSampleTimeNow+0x3c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	429a      	cmp	r2, r3
 800e942:	d205      	bcs.n	800e950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e944:	f000 f93a 	bl	800ebbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	e002      	b.n	800e956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e956:	4a04      	ldr	r2, [pc, #16]	@ (800e968 <prvSampleTimeNow+0x3c>)
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e95c:	68fb      	ldr	r3, [r7, #12]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20001de0 	.word	0x20001de0

0800e96c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e97a:	2300      	movs	r3, #0
 800e97c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d812      	bhi.n	800e9b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	1ad2      	subs	r2, r2, r3
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d302      	bcc.n	800e9a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	617b      	str	r3, [r7, #20]
 800e9a4:	e01b      	b.n	800e9de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e9a6:	4b10      	ldr	r3, [pc, #64]	@ (800e9e8 <prvInsertTimerInActiveList+0x7c>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	4610      	mov	r0, r2
 800e9b2:	f7fd ffdc 	bl	800c96e <vListInsert>
 800e9b6:	e012      	b.n	800e9de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d206      	bcs.n	800e9ce <prvInsertTimerInActiveList+0x62>
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d302      	bcc.n	800e9ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	e007      	b.n	800e9de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9ce:	4b07      	ldr	r3, [pc, #28]	@ (800e9ec <prvInsertTimerInActiveList+0x80>)
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f7fd ffc8 	bl	800c96e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e9de:	697b      	ldr	r3, [r7, #20]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	20001dd4 	.word	0x20001dd4
 800e9ec:	20001dd0 	.word	0x20001dd0

0800e9f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b08e      	sub	sp, #56	@ 0x38
 800e9f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9f6:	e0ce      	b.n	800eb96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	da19      	bge.n	800ea32 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e9fe:	1d3b      	adds	r3, r7, #4
 800ea00:	3304      	adds	r3, #4
 800ea02:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d10b      	bne.n	800ea22 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ea0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	61fb      	str	r3, [r7, #28]
}
 800ea1c:	bf00      	nop
 800ea1e:	bf00      	nop
 800ea20:	e7fd      	b.n	800ea1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea28:	6850      	ldr	r0, [r2, #4]
 800ea2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea2c:	6892      	ldr	r2, [r2, #8]
 800ea2e:	4611      	mov	r1, r2
 800ea30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f2c0 80ae 	blt.w	800eb96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea40:	695b      	ldr	r3, [r3, #20]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d004      	beq.n	800ea50 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea48:	3304      	adds	r3, #4
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fd ffc8 	bl	800c9e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea50:	463b      	mov	r3, r7
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff ff6a 	bl	800e92c <prvSampleTimeNow>
 800ea58:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2b09      	cmp	r3, #9
 800ea5e:	f200 8097 	bhi.w	800eb90 <prvProcessReceivedCommands+0x1a0>
 800ea62:	a201      	add	r2, pc, #4	@ (adr r2, 800ea68 <prvProcessReceivedCommands+0x78>)
 800ea64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea68:	0800ea91 	.word	0x0800ea91
 800ea6c:	0800ea91 	.word	0x0800ea91
 800ea70:	0800ea91 	.word	0x0800ea91
 800ea74:	0800eb07 	.word	0x0800eb07
 800ea78:	0800eb1b 	.word	0x0800eb1b
 800ea7c:	0800eb67 	.word	0x0800eb67
 800ea80:	0800ea91 	.word	0x0800ea91
 800ea84:	0800ea91 	.word	0x0800ea91
 800ea88:	0800eb07 	.word	0x0800eb07
 800ea8c:	0800eb1b 	.word	0x0800eb1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea96:	f043 0301 	orr.w	r3, r3, #1
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	18d1      	adds	r1, r2, r3
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eab0:	f7ff ff5c 	bl	800e96c <prvInsertTimerInActiveList>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d06c      	beq.n	800eb94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eaba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eabc:	6a1b      	ldr	r3, [r3, #32]
 800eabe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eac0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eac8:	f003 0304 	and.w	r3, r3, #4
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d061      	beq.n	800eb94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ead0:	68ba      	ldr	r2, [r7, #8]
 800ead2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	441a      	add	r2, r3
 800ead8:	2300      	movs	r3, #0
 800eada:	9300      	str	r3, [sp, #0]
 800eadc:	2300      	movs	r3, #0
 800eade:	2100      	movs	r1, #0
 800eae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eae2:	f7ff fe01 	bl	800e6e8 <xTimerGenericCommand>
 800eae6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eae8:	6a3b      	ldr	r3, [r7, #32]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d152      	bne.n	800eb94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	61bb      	str	r3, [r7, #24]
}
 800eb00:	bf00      	nop
 800eb02:	bf00      	nop
 800eb04:	e7fd      	b.n	800eb02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb0c:	f023 0301 	bic.w	r3, r3, #1
 800eb10:	b2da      	uxtb	r2, r3
 800eb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb18:	e03d      	b.n	800eb96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb20:	f043 0301 	orr.w	r3, r3, #1
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d10b      	bne.n	800eb52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800eb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb3e:	f383 8811 	msr	BASEPRI, r3
 800eb42:	f3bf 8f6f 	isb	sy
 800eb46:	f3bf 8f4f 	dsb	sy
 800eb4a:	617b      	str	r3, [r7, #20]
}
 800eb4c:	bf00      	nop
 800eb4e:	bf00      	nop
 800eb50:	e7fd      	b.n	800eb4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb54:	699a      	ldr	r2, [r3, #24]
 800eb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb58:	18d1      	adds	r1, r2, r3
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb60:	f7ff ff04 	bl	800e96c <prvInsertTimerInActiveList>
					break;
 800eb64:	e017      	b.n	800eb96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb6c:	f003 0302 	and.w	r3, r3, #2
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d103      	bne.n	800eb7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800eb74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb76:	f000 fbe7 	bl	800f348 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb7a:	e00c      	b.n	800eb96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb82:	f023 0301 	bic.w	r3, r3, #1
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb8e:	e002      	b.n	800eb96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800eb90:	bf00      	nop
 800eb92:	e000      	b.n	800eb96 <prvProcessReceivedCommands+0x1a6>
					break;
 800eb94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb96:	4b08      	ldr	r3, [pc, #32]	@ (800ebb8 <prvProcessReceivedCommands+0x1c8>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	1d39      	adds	r1, r7, #4
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fe f9f2 	bl	800cf88 <xQueueReceive>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f47f af26 	bne.w	800e9f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ebac:	bf00      	nop
 800ebae:	bf00      	nop
 800ebb0:	3730      	adds	r7, #48	@ 0x30
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop
 800ebb8:	20001dd8 	.word	0x20001dd8

0800ebbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b088      	sub	sp, #32
 800ebc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebc2:	e049      	b.n	800ec58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebc4:	4b2e      	ldr	r3, [pc, #184]	@ (800ec80 <prvSwitchTimerLists+0xc4>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebce:	4b2c      	ldr	r3, [pc, #176]	@ (800ec80 <prvSwitchTimerLists+0xc4>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	3304      	adds	r3, #4
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fd feff 	bl	800c9e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebf0:	f003 0304 	and.w	r3, r3, #4
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d02f      	beq.n	800ec58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	693a      	ldr	r2, [r7, #16]
 800ebfe:	4413      	add	r3, r2
 800ec00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d90e      	bls.n	800ec28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec16:	4b1a      	ldr	r3, [pc, #104]	@ (800ec80 <prvSwitchTimerLists+0xc4>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4610      	mov	r0, r2
 800ec22:	f7fd fea4 	bl	800c96e <vListInsert>
 800ec26:	e017      	b.n	800ec58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec28:	2300      	movs	r3, #0
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	693a      	ldr	r2, [r7, #16]
 800ec30:	2100      	movs	r1, #0
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	f7ff fd58 	bl	800e6e8 <xTimerGenericCommand>
 800ec38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10b      	bne.n	800ec58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ec40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	603b      	str	r3, [r7, #0]
}
 800ec52:	bf00      	nop
 800ec54:	bf00      	nop
 800ec56:	e7fd      	b.n	800ec54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec58:	4b09      	ldr	r3, [pc, #36]	@ (800ec80 <prvSwitchTimerLists+0xc4>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1b0      	bne.n	800ebc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ec62:	4b07      	ldr	r3, [pc, #28]	@ (800ec80 <prvSwitchTimerLists+0xc4>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ec68:	4b06      	ldr	r3, [pc, #24]	@ (800ec84 <prvSwitchTimerLists+0xc8>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a04      	ldr	r2, [pc, #16]	@ (800ec80 <prvSwitchTimerLists+0xc4>)
 800ec6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ec70:	4a04      	ldr	r2, [pc, #16]	@ (800ec84 <prvSwitchTimerLists+0xc8>)
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	6013      	str	r3, [r2, #0]
}
 800ec76:	bf00      	nop
 800ec78:	3718      	adds	r7, #24
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	20001dd0 	.word	0x20001dd0
 800ec84:	20001dd4 	.word	0x20001dd4

0800ec88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ec8e:	f000 f96b 	bl	800ef68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec92:	4b15      	ldr	r3, [pc, #84]	@ (800ece8 <prvCheckForValidListAndQueue+0x60>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d120      	bne.n	800ecdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec9a:	4814      	ldr	r0, [pc, #80]	@ (800ecec <prvCheckForValidListAndQueue+0x64>)
 800ec9c:	f7fd fe16 	bl	800c8cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eca0:	4813      	ldr	r0, [pc, #76]	@ (800ecf0 <prvCheckForValidListAndQueue+0x68>)
 800eca2:	f7fd fe13 	bl	800c8cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eca6:	4b13      	ldr	r3, [pc, #76]	@ (800ecf4 <prvCheckForValidListAndQueue+0x6c>)
 800eca8:	4a10      	ldr	r2, [pc, #64]	@ (800ecec <prvCheckForValidListAndQueue+0x64>)
 800ecaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ecac:	4b12      	ldr	r3, [pc, #72]	@ (800ecf8 <prvCheckForValidListAndQueue+0x70>)
 800ecae:	4a10      	ldr	r2, [pc, #64]	@ (800ecf0 <prvCheckForValidListAndQueue+0x68>)
 800ecb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	9300      	str	r3, [sp, #0]
 800ecb6:	4b11      	ldr	r3, [pc, #68]	@ (800ecfc <prvCheckForValidListAndQueue+0x74>)
 800ecb8:	4a11      	ldr	r2, [pc, #68]	@ (800ed00 <prvCheckForValidListAndQueue+0x78>)
 800ecba:	2110      	movs	r1, #16
 800ecbc:	200a      	movs	r0, #10
 800ecbe:	f7fd ff23 	bl	800cb08 <xQueueGenericCreateStatic>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	4a08      	ldr	r2, [pc, #32]	@ (800ece8 <prvCheckForValidListAndQueue+0x60>)
 800ecc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ecc8:	4b07      	ldr	r3, [pc, #28]	@ (800ece8 <prvCheckForValidListAndQueue+0x60>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d005      	beq.n	800ecdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ecd0:	4b05      	ldr	r3, [pc, #20]	@ (800ece8 <prvCheckForValidListAndQueue+0x60>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	490b      	ldr	r1, [pc, #44]	@ (800ed04 <prvCheckForValidListAndQueue+0x7c>)
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fe fb48 	bl	800d36c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecdc:	f000 f976 	bl	800efcc <vPortExitCritical>
}
 800ece0:	bf00      	nop
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20001dd8 	.word	0x20001dd8
 800ecec:	20001da8 	.word	0x20001da8
 800ecf0:	20001dbc 	.word	0x20001dbc
 800ecf4:	20001dd0 	.word	0x20001dd0
 800ecf8:	20001dd4 	.word	0x20001dd4
 800ecfc:	20001e84 	.word	0x20001e84
 800ed00:	20001de4 	.word	0x20001de4
 800ed04:	080124a0 	.word	0x080124a0

0800ed08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	3b04      	subs	r3, #4
 800ed18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ed20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	3b04      	subs	r3, #4
 800ed26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	f023 0201 	bic.w	r2, r3, #1
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	3b04      	subs	r3, #4
 800ed36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ed38:	4a0c      	ldr	r2, [pc, #48]	@ (800ed6c <pxPortInitialiseStack+0x64>)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	3b14      	subs	r3, #20
 800ed42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	3b04      	subs	r3, #4
 800ed4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f06f 0202 	mvn.w	r2, #2
 800ed56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	3b20      	subs	r3, #32
 800ed5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3714      	adds	r7, #20
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	0800ed71 	.word	0x0800ed71

0800ed70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed7a:	4b13      	ldr	r3, [pc, #76]	@ (800edc8 <prvTaskExitError+0x58>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed82:	d00b      	beq.n	800ed9c <prvTaskExitError+0x2c>
	__asm volatile
 800ed84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed88:	f383 8811 	msr	BASEPRI, r3
 800ed8c:	f3bf 8f6f 	isb	sy
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	60fb      	str	r3, [r7, #12]
}
 800ed96:	bf00      	nop
 800ed98:	bf00      	nop
 800ed9a:	e7fd      	b.n	800ed98 <prvTaskExitError+0x28>
	__asm volatile
 800ed9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda0:	f383 8811 	msr	BASEPRI, r3
 800eda4:	f3bf 8f6f 	isb	sy
 800eda8:	f3bf 8f4f 	dsb	sy
 800edac:	60bb      	str	r3, [r7, #8]
}
 800edae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800edb0:	bf00      	nop
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d0fc      	beq.n	800edb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800edb8:	bf00      	nop
 800edba:	bf00      	nop
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	20000128 	.word	0x20000128
 800edcc:	00000000 	.word	0x00000000

0800edd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800edd0:	4b07      	ldr	r3, [pc, #28]	@ (800edf0 <pxCurrentTCBConst2>)
 800edd2:	6819      	ldr	r1, [r3, #0]
 800edd4:	6808      	ldr	r0, [r1, #0]
 800edd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edda:	f380 8809 	msr	PSP, r0
 800edde:	f3bf 8f6f 	isb	sy
 800ede2:	f04f 0000 	mov.w	r0, #0
 800ede6:	f380 8811 	msr	BASEPRI, r0
 800edea:	4770      	bx	lr
 800edec:	f3af 8000 	nop.w

0800edf0 <pxCurrentTCBConst2>:
 800edf0:	200018a8 	.word	0x200018a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800edf4:	bf00      	nop
 800edf6:	bf00      	nop

0800edf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800edf8:	4808      	ldr	r0, [pc, #32]	@ (800ee1c <prvPortStartFirstTask+0x24>)
 800edfa:	6800      	ldr	r0, [r0, #0]
 800edfc:	6800      	ldr	r0, [r0, #0]
 800edfe:	f380 8808 	msr	MSP, r0
 800ee02:	f04f 0000 	mov.w	r0, #0
 800ee06:	f380 8814 	msr	CONTROL, r0
 800ee0a:	b662      	cpsie	i
 800ee0c:	b661      	cpsie	f
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	df00      	svc	0
 800ee18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ee1a:	bf00      	nop
 800ee1c:	e000ed08 	.word	0xe000ed08

0800ee20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ee26:	4b47      	ldr	r3, [pc, #284]	@ (800ef44 <xPortStartScheduler+0x124>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a47      	ldr	r2, [pc, #284]	@ (800ef48 <xPortStartScheduler+0x128>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d10b      	bne.n	800ee48 <xPortStartScheduler+0x28>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	613b      	str	r3, [r7, #16]
}
 800ee42:	bf00      	nop
 800ee44:	bf00      	nop
 800ee46:	e7fd      	b.n	800ee44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ee48:	4b3e      	ldr	r3, [pc, #248]	@ (800ef44 <xPortStartScheduler+0x124>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a3f      	ldr	r2, [pc, #252]	@ (800ef4c <xPortStartScheduler+0x12c>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d10b      	bne.n	800ee6a <xPortStartScheduler+0x4a>
	__asm volatile
 800ee52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee56:	f383 8811 	msr	BASEPRI, r3
 800ee5a:	f3bf 8f6f 	isb	sy
 800ee5e:	f3bf 8f4f 	dsb	sy
 800ee62:	60fb      	str	r3, [r7, #12]
}
 800ee64:	bf00      	nop
 800ee66:	bf00      	nop
 800ee68:	e7fd      	b.n	800ee66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee6a:	4b39      	ldr	r3, [pc, #228]	@ (800ef50 <xPortStartScheduler+0x130>)
 800ee6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	22ff      	movs	r2, #255	@ 0xff
 800ee7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee84:	78fb      	ldrb	r3, [r7, #3]
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	4b31      	ldr	r3, [pc, #196]	@ (800ef54 <xPortStartScheduler+0x134>)
 800ee90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee92:	4b31      	ldr	r3, [pc, #196]	@ (800ef58 <xPortStartScheduler+0x138>)
 800ee94:	2207      	movs	r2, #7
 800ee96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee98:	e009      	b.n	800eeae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ee9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ef58 <xPortStartScheduler+0x138>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	4a2d      	ldr	r2, [pc, #180]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eea2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eeb6:	2b80      	cmp	r3, #128	@ 0x80
 800eeb8:	d0ef      	beq.n	800ee9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eeba:	4b27      	ldr	r3, [pc, #156]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f1c3 0307 	rsb	r3, r3, #7
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d00b      	beq.n	800eede <xPortStartScheduler+0xbe>
	__asm volatile
 800eec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeca:	f383 8811 	msr	BASEPRI, r3
 800eece:	f3bf 8f6f 	isb	sy
 800eed2:	f3bf 8f4f 	dsb	sy
 800eed6:	60bb      	str	r3, [r7, #8]
}
 800eed8:	bf00      	nop
 800eeda:	bf00      	nop
 800eedc:	e7fd      	b.n	800eeda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eede:	4b1e      	ldr	r3, [pc, #120]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	021b      	lsls	r3, r3, #8
 800eee4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eee6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eee8:	4b1b      	ldr	r3, [pc, #108]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eef0:	4a19      	ldr	r2, [pc, #100]	@ (800ef58 <xPortStartScheduler+0x138>)
 800eef2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eefc:	4b17      	ldr	r3, [pc, #92]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a16      	ldr	r2, [pc, #88]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800ef02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef08:	4b14      	ldr	r3, [pc, #80]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a13      	ldr	r2, [pc, #76]	@ (800ef5c <xPortStartScheduler+0x13c>)
 800ef0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ef12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ef14:	f000 f8da 	bl	800f0cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ef18:	4b11      	ldr	r3, [pc, #68]	@ (800ef60 <xPortStartScheduler+0x140>)
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ef1e:	f000 f8f9 	bl	800f114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef22:	4b10      	ldr	r3, [pc, #64]	@ (800ef64 <xPortStartScheduler+0x144>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a0f      	ldr	r2, [pc, #60]	@ (800ef64 <xPortStartScheduler+0x144>)
 800ef28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ef2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef2e:	f7ff ff63 	bl	800edf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef32:	f7fe ff4d 	bl	800ddd0 <vTaskSwitchContext>
	prvTaskExitError();
 800ef36:	f7ff ff1b 	bl	800ed70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef3a:	2300      	movs	r3, #0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3718      	adds	r7, #24
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	e000ed00 	.word	0xe000ed00
 800ef48:	410fc271 	.word	0x410fc271
 800ef4c:	410fc270 	.word	0x410fc270
 800ef50:	e000e400 	.word	0xe000e400
 800ef54:	20001ed4 	.word	0x20001ed4
 800ef58:	20001ed8 	.word	0x20001ed8
 800ef5c:	e000ed20 	.word	0xe000ed20
 800ef60:	20000128 	.word	0x20000128
 800ef64:	e000ef34 	.word	0xe000ef34

0800ef68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	607b      	str	r3, [r7, #4]
}
 800ef80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef82:	4b10      	ldr	r3, [pc, #64]	@ (800efc4 <vPortEnterCritical+0x5c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3301      	adds	r3, #1
 800ef88:	4a0e      	ldr	r2, [pc, #56]	@ (800efc4 <vPortEnterCritical+0x5c>)
 800ef8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef8c:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <vPortEnterCritical+0x5c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d110      	bne.n	800efb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef94:	4b0c      	ldr	r3, [pc, #48]	@ (800efc8 <vPortEnterCritical+0x60>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00b      	beq.n	800efb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ef9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	603b      	str	r3, [r7, #0]
}
 800efb0:	bf00      	nop
 800efb2:	bf00      	nop
 800efb4:	e7fd      	b.n	800efb2 <vPortEnterCritical+0x4a>
	}
}
 800efb6:	bf00      	nop
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	20000128 	.word	0x20000128
 800efc8:	e000ed04 	.word	0xe000ed04

0800efcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800efd2:	4b12      	ldr	r3, [pc, #72]	@ (800f01c <vPortExitCritical+0x50>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d10b      	bne.n	800eff2 <vPortExitCritical+0x26>
	__asm volatile
 800efda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efde:	f383 8811 	msr	BASEPRI, r3
 800efe2:	f3bf 8f6f 	isb	sy
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	607b      	str	r3, [r7, #4]
}
 800efec:	bf00      	nop
 800efee:	bf00      	nop
 800eff0:	e7fd      	b.n	800efee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eff2:	4b0a      	ldr	r3, [pc, #40]	@ (800f01c <vPortExitCritical+0x50>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	3b01      	subs	r3, #1
 800eff8:	4a08      	ldr	r2, [pc, #32]	@ (800f01c <vPortExitCritical+0x50>)
 800effa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800effc:	4b07      	ldr	r3, [pc, #28]	@ (800f01c <vPortExitCritical+0x50>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d105      	bne.n	800f010 <vPortExitCritical+0x44>
 800f004:	2300      	movs	r3, #0
 800f006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	f383 8811 	msr	BASEPRI, r3
}
 800f00e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f010:	bf00      	nop
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	20000128 	.word	0x20000128

0800f020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f020:	f3ef 8009 	mrs	r0, PSP
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	4b15      	ldr	r3, [pc, #84]	@ (800f080 <pxCurrentTCBConst>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	f01e 0f10 	tst.w	lr, #16
 800f030:	bf08      	it	eq
 800f032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03a:	6010      	str	r0, [r2, #0]
 800f03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f040:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f044:	f380 8811 	msr	BASEPRI, r0
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	f3bf 8f6f 	isb	sy
 800f050:	f7fe febe 	bl	800ddd0 <vTaskSwitchContext>
 800f054:	f04f 0000 	mov.w	r0, #0
 800f058:	f380 8811 	msr	BASEPRI, r0
 800f05c:	bc09      	pop	{r0, r3}
 800f05e:	6819      	ldr	r1, [r3, #0]
 800f060:	6808      	ldr	r0, [r1, #0]
 800f062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f066:	f01e 0f10 	tst.w	lr, #16
 800f06a:	bf08      	it	eq
 800f06c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f070:	f380 8809 	msr	PSP, r0
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	f3af 8000 	nop.w

0800f080 <pxCurrentTCBConst>:
 800f080:	200018a8 	.word	0x200018a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f084:	bf00      	nop
 800f086:	bf00      	nop

0800f088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	607b      	str	r3, [r7, #4]
}
 800f0a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f0a2:	f7fe fddb 	bl	800dc5c <xTaskIncrementTick>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f0ac:	4b06      	ldr	r3, [pc, #24]	@ (800f0c8 <xPortSysTickHandler+0x40>)
 800f0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0b2:	601a      	str	r2, [r3, #0]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	f383 8811 	msr	BASEPRI, r3
}
 800f0be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	e000ed04 	.word	0xe000ed04

0800f0cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f0d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f100 <vPortSetupTimerInterrupt+0x34>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f104 <vPortSetupTimerInterrupt+0x38>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f108 <vPortSetupTimerInterrupt+0x3c>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a0a      	ldr	r2, [pc, #40]	@ (800f10c <vPortSetupTimerInterrupt+0x40>)
 800f0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0e6:	099b      	lsrs	r3, r3, #6
 800f0e8:	4a09      	ldr	r2, [pc, #36]	@ (800f110 <vPortSetupTimerInterrupt+0x44>)
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f0ee:	4b04      	ldr	r3, [pc, #16]	@ (800f100 <vPortSetupTimerInterrupt+0x34>)
 800f0f0:	2207      	movs	r2, #7
 800f0f2:	601a      	str	r2, [r3, #0]
}
 800f0f4:	bf00      	nop
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	e000e010 	.word	0xe000e010
 800f104:	e000e018 	.word	0xe000e018
 800f108:	2000011c 	.word	0x2000011c
 800f10c:	10624dd3 	.word	0x10624dd3
 800f110:	e000e014 	.word	0xe000e014

0800f114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f114:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f124 <vPortEnableVFP+0x10>
 800f118:	6801      	ldr	r1, [r0, #0]
 800f11a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f11e:	6001      	str	r1, [r0, #0]
 800f120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f122:	bf00      	nop
 800f124:	e000ed88 	.word	0xe000ed88

0800f128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f12e:	f3ef 8305 	mrs	r3, IPSR
 800f132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b0f      	cmp	r3, #15
 800f138:	d915      	bls.n	800f166 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f13a:	4a18      	ldr	r2, [pc, #96]	@ (800f19c <vPortValidateInterruptPriority+0x74>)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	4413      	add	r3, r2
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f144:	4b16      	ldr	r3, [pc, #88]	@ (800f1a0 <vPortValidateInterruptPriority+0x78>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	7afa      	ldrb	r2, [r7, #11]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d20b      	bcs.n	800f166 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f152:	f383 8811 	msr	BASEPRI, r3
 800f156:	f3bf 8f6f 	isb	sy
 800f15a:	f3bf 8f4f 	dsb	sy
 800f15e:	607b      	str	r3, [r7, #4]
}
 800f160:	bf00      	nop
 800f162:	bf00      	nop
 800f164:	e7fd      	b.n	800f162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f166:	4b0f      	ldr	r3, [pc, #60]	@ (800f1a4 <vPortValidateInterruptPriority+0x7c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f16e:	4b0e      	ldr	r3, [pc, #56]	@ (800f1a8 <vPortValidateInterruptPriority+0x80>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	429a      	cmp	r2, r3
 800f174:	d90b      	bls.n	800f18e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	603b      	str	r3, [r7, #0]
}
 800f188:	bf00      	nop
 800f18a:	bf00      	nop
 800f18c:	e7fd      	b.n	800f18a <vPortValidateInterruptPriority+0x62>
	}
 800f18e:	bf00      	nop
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	e000e3f0 	.word	0xe000e3f0
 800f1a0:	20001ed4 	.word	0x20001ed4
 800f1a4:	e000ed0c 	.word	0xe000ed0c
 800f1a8:	20001ed8 	.word	0x20001ed8

0800f1ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	@ 0x28
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f1b8:	f7fe fb9a 	bl	800d8f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f1bc:	4b5c      	ldr	r3, [pc, #368]	@ (800f330 <pvPortMalloc+0x184>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f1c4:	f000 f924 	bl	800f410 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f1c8:	4b5a      	ldr	r3, [pc, #360]	@ (800f334 <pvPortMalloc+0x188>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4013      	ands	r3, r2
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f040 8095 	bne.w	800f300 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d01e      	beq.n	800f21a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f1dc:	2208      	movs	r2, #8
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f003 0307 	and.w	r3, r3, #7
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d015      	beq.n	800f21a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f023 0307 	bic.w	r3, r3, #7
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f003 0307 	and.w	r3, r3, #7
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00b      	beq.n	800f21a <pvPortMalloc+0x6e>
	__asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	617b      	str	r3, [r7, #20]
}
 800f214:	bf00      	nop
 800f216:	bf00      	nop
 800f218:	e7fd      	b.n	800f216 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d06f      	beq.n	800f300 <pvPortMalloc+0x154>
 800f220:	4b45      	ldr	r3, [pc, #276]	@ (800f338 <pvPortMalloc+0x18c>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	429a      	cmp	r2, r3
 800f228:	d86a      	bhi.n	800f300 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f22a:	4b44      	ldr	r3, [pc, #272]	@ (800f33c <pvPortMalloc+0x190>)
 800f22c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f22e:	4b43      	ldr	r3, [pc, #268]	@ (800f33c <pvPortMalloc+0x190>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f234:	e004      	b.n	800f240 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f238:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	429a      	cmp	r2, r3
 800f248:	d903      	bls.n	800f252 <pvPortMalloc+0xa6>
 800f24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1f1      	bne.n	800f236 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f252:	4b37      	ldr	r3, [pc, #220]	@ (800f330 <pvPortMalloc+0x184>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f258:	429a      	cmp	r2, r3
 800f25a:	d051      	beq.n	800f300 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2208      	movs	r2, #8
 800f262:	4413      	add	r3, r2
 800f264:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	6a3b      	ldr	r3, [r7, #32]
 800f26c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f270:	685a      	ldr	r2, [r3, #4]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	1ad2      	subs	r2, r2, r3
 800f276:	2308      	movs	r3, #8
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d920      	bls.n	800f2c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4413      	add	r3, r2
 800f284:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	f003 0307 	and.w	r3, r3, #7
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00b      	beq.n	800f2a8 <pvPortMalloc+0xfc>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f294:	f383 8811 	msr	BASEPRI, r3
 800f298:	f3bf 8f6f 	isb	sy
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	613b      	str	r3, [r7, #16]
}
 800f2a2:	bf00      	nop
 800f2a4:	bf00      	nop
 800f2a6:	e7fd      	b.n	800f2a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2aa:	685a      	ldr	r2, [r3, #4]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	1ad2      	subs	r2, r2, r3
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f2ba:	69b8      	ldr	r0, [r7, #24]
 800f2bc:	f000 f90a 	bl	800f4d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2c0:	4b1d      	ldr	r3, [pc, #116]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	4a1b      	ldr	r2, [pc, #108]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f340 <pvPortMalloc+0x194>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d203      	bcs.n	800f2e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2da:	4b17      	ldr	r3, [pc, #92]	@ (800f338 <pvPortMalloc+0x18c>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4a18      	ldr	r2, [pc, #96]	@ (800f340 <pvPortMalloc+0x194>)
 800f2e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	4b13      	ldr	r3, [pc, #76]	@ (800f334 <pvPortMalloc+0x188>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	431a      	orrs	r2, r3
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f2f6:	4b13      	ldr	r3, [pc, #76]	@ (800f344 <pvPortMalloc+0x198>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	4a11      	ldr	r2, [pc, #68]	@ (800f344 <pvPortMalloc+0x198>)
 800f2fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f300:	f7fe fb04 	bl	800d90c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	f003 0307 	and.w	r3, r3, #7
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00b      	beq.n	800f326 <pvPortMalloc+0x17a>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	60fb      	str	r3, [r7, #12]
}
 800f320:	bf00      	nop
 800f322:	bf00      	nop
 800f324:	e7fd      	b.n	800f322 <pvPortMalloc+0x176>
	return pvReturn;
 800f326:	69fb      	ldr	r3, [r7, #28]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3728      	adds	r7, #40	@ 0x28
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	20005ae4 	.word	0x20005ae4
 800f334:	20005af8 	.word	0x20005af8
 800f338:	20005ae8 	.word	0x20005ae8
 800f33c:	20005adc 	.word	0x20005adc
 800f340:	20005aec 	.word	0x20005aec
 800f344:	20005af0 	.word	0x20005af0

0800f348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d04f      	beq.n	800f3fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f35a:	2308      	movs	r3, #8
 800f35c:	425b      	negs	r3, r3
 800f35e:	697a      	ldr	r2, [r7, #20]
 800f360:	4413      	add	r3, r2
 800f362:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	4b25      	ldr	r3, [pc, #148]	@ (800f404 <vPortFree+0xbc>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4013      	ands	r3, r2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10b      	bne.n	800f38e <vPortFree+0x46>
	__asm volatile
 800f376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	60fb      	str	r3, [r7, #12]
}
 800f388:	bf00      	nop
 800f38a:	bf00      	nop
 800f38c:	e7fd      	b.n	800f38a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00b      	beq.n	800f3ae <vPortFree+0x66>
	__asm volatile
 800f396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f39a:	f383 8811 	msr	BASEPRI, r3
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	60bb      	str	r3, [r7, #8]
}
 800f3a8:	bf00      	nop
 800f3aa:	bf00      	nop
 800f3ac:	e7fd      	b.n	800f3aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	685a      	ldr	r2, [r3, #4]
 800f3b2:	4b14      	ldr	r3, [pc, #80]	@ (800f404 <vPortFree+0xbc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4013      	ands	r3, r2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d01e      	beq.n	800f3fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d11a      	bne.n	800f3fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	685a      	ldr	r2, [r3, #4]
 800f3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f404 <vPortFree+0xbc>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	43db      	mvns	r3, r3
 800f3ce:	401a      	ands	r2, r3
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f3d4:	f7fe fa8c 	bl	800d8f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	685a      	ldr	r2, [r3, #4]
 800f3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f408 <vPortFree+0xc0>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	4a09      	ldr	r2, [pc, #36]	@ (800f408 <vPortFree+0xc0>)
 800f3e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f3e6:	6938      	ldr	r0, [r7, #16]
 800f3e8:	f000 f874 	bl	800f4d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f3ec:	4b07      	ldr	r3, [pc, #28]	@ (800f40c <vPortFree+0xc4>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	4a06      	ldr	r2, [pc, #24]	@ (800f40c <vPortFree+0xc4>)
 800f3f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f3f6:	f7fe fa89 	bl	800d90c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f3fa:	bf00      	nop
 800f3fc:	3718      	adds	r7, #24
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	20005af8 	.word	0x20005af8
 800f408:	20005ae8 	.word	0x20005ae8
 800f40c:	20005af4 	.word	0x20005af4

0800f410 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f416:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f41a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f41c:	4b27      	ldr	r3, [pc, #156]	@ (800f4bc <prvHeapInit+0xac>)
 800f41e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f003 0307 	and.w	r3, r3, #7
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00c      	beq.n	800f444 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	3307      	adds	r3, #7
 800f42e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f023 0307 	bic.w	r3, r3, #7
 800f436:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f438:	68ba      	ldr	r2, [r7, #8]
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	4a1f      	ldr	r2, [pc, #124]	@ (800f4bc <prvHeapInit+0xac>)
 800f440:	4413      	add	r3, r2
 800f442:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f448:	4a1d      	ldr	r2, [pc, #116]	@ (800f4c0 <prvHeapInit+0xb0>)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f44e:	4b1c      	ldr	r3, [pc, #112]	@ (800f4c0 <prvHeapInit+0xb0>)
 800f450:	2200      	movs	r2, #0
 800f452:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	68ba      	ldr	r2, [r7, #8]
 800f458:	4413      	add	r3, r2
 800f45a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f45c:	2208      	movs	r2, #8
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	1a9b      	subs	r3, r3, r2
 800f462:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f023 0307 	bic.w	r3, r3, #7
 800f46a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	4a15      	ldr	r2, [pc, #84]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f470:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f472:	4b14      	ldr	r3, [pc, #80]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2200      	movs	r2, #0
 800f478:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f47a:	4b12      	ldr	r3, [pc, #72]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2200      	movs	r2, #0
 800f480:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	1ad2      	subs	r2, r2, r3
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f490:	4b0c      	ldr	r3, [pc, #48]	@ (800f4c4 <prvHeapInit+0xb4>)
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	4a0a      	ldr	r2, [pc, #40]	@ (800f4c8 <prvHeapInit+0xb8>)
 800f49e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	4a09      	ldr	r2, [pc, #36]	@ (800f4cc <prvHeapInit+0xbc>)
 800f4a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f4a8:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <prvHeapInit+0xc0>)
 800f4aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f4ae:	601a      	str	r2, [r3, #0]
}
 800f4b0:	bf00      	nop
 800f4b2:	3714      	adds	r7, #20
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr
 800f4bc:	20001edc 	.word	0x20001edc
 800f4c0:	20005adc 	.word	0x20005adc
 800f4c4:	20005ae4 	.word	0x20005ae4
 800f4c8:	20005aec 	.word	0x20005aec
 800f4cc:	20005ae8 	.word	0x20005ae8
 800f4d0:	20005af8 	.word	0x20005af8

0800f4d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4dc:	4b28      	ldr	r3, [pc, #160]	@ (800f580 <prvInsertBlockIntoFreeList+0xac>)
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	e002      	b.n	800f4e8 <prvInsertBlockIntoFreeList+0x14>
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	60fb      	str	r3, [r7, #12]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d8f7      	bhi.n	800f4e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	687a      	ldr	r2, [r7, #4]
 800f500:	429a      	cmp	r2, r3
 800f502:	d108      	bne.n	800f516 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	441a      	add	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	441a      	add	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	429a      	cmp	r2, r3
 800f528:	d118      	bne.n	800f55c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	4b15      	ldr	r3, [pc, #84]	@ (800f584 <prvInsertBlockIntoFreeList+0xb0>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	d00d      	beq.n	800f552 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	441a      	add	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	e008      	b.n	800f564 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f552:	4b0c      	ldr	r3, [pc, #48]	@ (800f584 <prvInsertBlockIntoFreeList+0xb0>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	601a      	str	r2, [r3, #0]
 800f55a:	e003      	b.n	800f564 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d002      	beq.n	800f572 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f572:	bf00      	nop
 800f574:	3714      	adds	r7, #20
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	20005adc 	.word	0x20005adc
 800f584:	20005ae4 	.word	0x20005ae4

0800f588 <__cvt>:
 800f588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f58c:	ec57 6b10 	vmov	r6, r7, d0
 800f590:	2f00      	cmp	r7, #0
 800f592:	460c      	mov	r4, r1
 800f594:	4619      	mov	r1, r3
 800f596:	463b      	mov	r3, r7
 800f598:	bfbb      	ittet	lt
 800f59a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f59e:	461f      	movlt	r7, r3
 800f5a0:	2300      	movge	r3, #0
 800f5a2:	232d      	movlt	r3, #45	@ 0x2d
 800f5a4:	700b      	strb	r3, [r1, #0]
 800f5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f5ac:	4691      	mov	r9, r2
 800f5ae:	f023 0820 	bic.w	r8, r3, #32
 800f5b2:	bfbc      	itt	lt
 800f5b4:	4632      	movlt	r2, r6
 800f5b6:	4616      	movlt	r6, r2
 800f5b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f5bc:	d005      	beq.n	800f5ca <__cvt+0x42>
 800f5be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f5c2:	d100      	bne.n	800f5c6 <__cvt+0x3e>
 800f5c4:	3401      	adds	r4, #1
 800f5c6:	2102      	movs	r1, #2
 800f5c8:	e000      	b.n	800f5cc <__cvt+0x44>
 800f5ca:	2103      	movs	r1, #3
 800f5cc:	ab03      	add	r3, sp, #12
 800f5ce:	9301      	str	r3, [sp, #4]
 800f5d0:	ab02      	add	r3, sp, #8
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	ec47 6b10 	vmov	d0, r6, r7
 800f5d8:	4653      	mov	r3, sl
 800f5da:	4622      	mov	r2, r4
 800f5dc:	f000 fe34 	bl	8010248 <_dtoa_r>
 800f5e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f5e4:	4605      	mov	r5, r0
 800f5e6:	d119      	bne.n	800f61c <__cvt+0x94>
 800f5e8:	f019 0f01 	tst.w	r9, #1
 800f5ec:	d00e      	beq.n	800f60c <__cvt+0x84>
 800f5ee:	eb00 0904 	add.w	r9, r0, r4
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	4639      	mov	r1, r7
 800f5fa:	f7f1 fa65 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5fe:	b108      	cbz	r0, 800f604 <__cvt+0x7c>
 800f600:	f8cd 900c 	str.w	r9, [sp, #12]
 800f604:	2230      	movs	r2, #48	@ 0x30
 800f606:	9b03      	ldr	r3, [sp, #12]
 800f608:	454b      	cmp	r3, r9
 800f60a:	d31e      	bcc.n	800f64a <__cvt+0xc2>
 800f60c:	9b03      	ldr	r3, [sp, #12]
 800f60e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f610:	1b5b      	subs	r3, r3, r5
 800f612:	4628      	mov	r0, r5
 800f614:	6013      	str	r3, [r2, #0]
 800f616:	b004      	add	sp, #16
 800f618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f620:	eb00 0904 	add.w	r9, r0, r4
 800f624:	d1e5      	bne.n	800f5f2 <__cvt+0x6a>
 800f626:	7803      	ldrb	r3, [r0, #0]
 800f628:	2b30      	cmp	r3, #48	@ 0x30
 800f62a:	d10a      	bne.n	800f642 <__cvt+0xba>
 800f62c:	2200      	movs	r2, #0
 800f62e:	2300      	movs	r3, #0
 800f630:	4630      	mov	r0, r6
 800f632:	4639      	mov	r1, r7
 800f634:	f7f1 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 800f638:	b918      	cbnz	r0, 800f642 <__cvt+0xba>
 800f63a:	f1c4 0401 	rsb	r4, r4, #1
 800f63e:	f8ca 4000 	str.w	r4, [sl]
 800f642:	f8da 3000 	ldr.w	r3, [sl]
 800f646:	4499      	add	r9, r3
 800f648:	e7d3      	b.n	800f5f2 <__cvt+0x6a>
 800f64a:	1c59      	adds	r1, r3, #1
 800f64c:	9103      	str	r1, [sp, #12]
 800f64e:	701a      	strb	r2, [r3, #0]
 800f650:	e7d9      	b.n	800f606 <__cvt+0x7e>

0800f652 <__exponent>:
 800f652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f654:	2900      	cmp	r1, #0
 800f656:	bfba      	itte	lt
 800f658:	4249      	neglt	r1, r1
 800f65a:	232d      	movlt	r3, #45	@ 0x2d
 800f65c:	232b      	movge	r3, #43	@ 0x2b
 800f65e:	2909      	cmp	r1, #9
 800f660:	7002      	strb	r2, [r0, #0]
 800f662:	7043      	strb	r3, [r0, #1]
 800f664:	dd29      	ble.n	800f6ba <__exponent+0x68>
 800f666:	f10d 0307 	add.w	r3, sp, #7
 800f66a:	461d      	mov	r5, r3
 800f66c:	270a      	movs	r7, #10
 800f66e:	461a      	mov	r2, r3
 800f670:	fbb1 f6f7 	udiv	r6, r1, r7
 800f674:	fb07 1416 	mls	r4, r7, r6, r1
 800f678:	3430      	adds	r4, #48	@ 0x30
 800f67a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f67e:	460c      	mov	r4, r1
 800f680:	2c63      	cmp	r4, #99	@ 0x63
 800f682:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f686:	4631      	mov	r1, r6
 800f688:	dcf1      	bgt.n	800f66e <__exponent+0x1c>
 800f68a:	3130      	adds	r1, #48	@ 0x30
 800f68c:	1e94      	subs	r4, r2, #2
 800f68e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f692:	1c41      	adds	r1, r0, #1
 800f694:	4623      	mov	r3, r4
 800f696:	42ab      	cmp	r3, r5
 800f698:	d30a      	bcc.n	800f6b0 <__exponent+0x5e>
 800f69a:	f10d 0309 	add.w	r3, sp, #9
 800f69e:	1a9b      	subs	r3, r3, r2
 800f6a0:	42ac      	cmp	r4, r5
 800f6a2:	bf88      	it	hi
 800f6a4:	2300      	movhi	r3, #0
 800f6a6:	3302      	adds	r3, #2
 800f6a8:	4403      	add	r3, r0
 800f6aa:	1a18      	subs	r0, r3, r0
 800f6ac:	b003      	add	sp, #12
 800f6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f6b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f6b8:	e7ed      	b.n	800f696 <__exponent+0x44>
 800f6ba:	2330      	movs	r3, #48	@ 0x30
 800f6bc:	3130      	adds	r1, #48	@ 0x30
 800f6be:	7083      	strb	r3, [r0, #2]
 800f6c0:	70c1      	strb	r1, [r0, #3]
 800f6c2:	1d03      	adds	r3, r0, #4
 800f6c4:	e7f1      	b.n	800f6aa <__exponent+0x58>
	...

0800f6c8 <_printf_float>:
 800f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6cc:	b08d      	sub	sp, #52	@ 0x34
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f6d4:	4616      	mov	r6, r2
 800f6d6:	461f      	mov	r7, r3
 800f6d8:	4605      	mov	r5, r0
 800f6da:	f000 fc97 	bl	801000c <_localeconv_r>
 800f6de:	6803      	ldr	r3, [r0, #0]
 800f6e0:	9304      	str	r3, [sp, #16]
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7f0 fdc4 	bl	8000270 <strlen>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f6f0:	9005      	str	r0, [sp, #20]
 800f6f2:	3307      	adds	r3, #7
 800f6f4:	f023 0307 	bic.w	r3, r3, #7
 800f6f8:	f103 0208 	add.w	r2, r3, #8
 800f6fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f700:	f8d4 b000 	ldr.w	fp, [r4]
 800f704:	f8c8 2000 	str.w	r2, [r8]
 800f708:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f70c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f710:	9307      	str	r3, [sp, #28]
 800f712:	f8cd 8018 	str.w	r8, [sp, #24]
 800f716:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f71a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f71e:	4b9c      	ldr	r3, [pc, #624]	@ (800f990 <_printf_float+0x2c8>)
 800f720:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f724:	f7f1 fa02 	bl	8000b2c <__aeabi_dcmpun>
 800f728:	bb70      	cbnz	r0, 800f788 <_printf_float+0xc0>
 800f72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f72e:	4b98      	ldr	r3, [pc, #608]	@ (800f990 <_printf_float+0x2c8>)
 800f730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f734:	f7f1 f9dc 	bl	8000af0 <__aeabi_dcmple>
 800f738:	bb30      	cbnz	r0, 800f788 <_printf_float+0xc0>
 800f73a:	2200      	movs	r2, #0
 800f73c:	2300      	movs	r3, #0
 800f73e:	4640      	mov	r0, r8
 800f740:	4649      	mov	r1, r9
 800f742:	f7f1 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800f746:	b110      	cbz	r0, 800f74e <_printf_float+0x86>
 800f748:	232d      	movs	r3, #45	@ 0x2d
 800f74a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f74e:	4a91      	ldr	r2, [pc, #580]	@ (800f994 <_printf_float+0x2cc>)
 800f750:	4b91      	ldr	r3, [pc, #580]	@ (800f998 <_printf_float+0x2d0>)
 800f752:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f756:	bf94      	ite	ls
 800f758:	4690      	movls	r8, r2
 800f75a:	4698      	movhi	r8, r3
 800f75c:	2303      	movs	r3, #3
 800f75e:	6123      	str	r3, [r4, #16]
 800f760:	f02b 0304 	bic.w	r3, fp, #4
 800f764:	6023      	str	r3, [r4, #0]
 800f766:	f04f 0900 	mov.w	r9, #0
 800f76a:	9700      	str	r7, [sp, #0]
 800f76c:	4633      	mov	r3, r6
 800f76e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f770:	4621      	mov	r1, r4
 800f772:	4628      	mov	r0, r5
 800f774:	f000 f9d2 	bl	800fb1c <_printf_common>
 800f778:	3001      	adds	r0, #1
 800f77a:	f040 808d 	bne.w	800f898 <_printf_float+0x1d0>
 800f77e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f782:	b00d      	add	sp, #52	@ 0x34
 800f784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f788:	4642      	mov	r2, r8
 800f78a:	464b      	mov	r3, r9
 800f78c:	4640      	mov	r0, r8
 800f78e:	4649      	mov	r1, r9
 800f790:	f7f1 f9cc 	bl	8000b2c <__aeabi_dcmpun>
 800f794:	b140      	cbz	r0, 800f7a8 <_printf_float+0xe0>
 800f796:	464b      	mov	r3, r9
 800f798:	2b00      	cmp	r3, #0
 800f79a:	bfbc      	itt	lt
 800f79c:	232d      	movlt	r3, #45	@ 0x2d
 800f79e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f7a2:	4a7e      	ldr	r2, [pc, #504]	@ (800f99c <_printf_float+0x2d4>)
 800f7a4:	4b7e      	ldr	r3, [pc, #504]	@ (800f9a0 <_printf_float+0x2d8>)
 800f7a6:	e7d4      	b.n	800f752 <_printf_float+0x8a>
 800f7a8:	6863      	ldr	r3, [r4, #4]
 800f7aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f7ae:	9206      	str	r2, [sp, #24]
 800f7b0:	1c5a      	adds	r2, r3, #1
 800f7b2:	d13b      	bne.n	800f82c <_printf_float+0x164>
 800f7b4:	2306      	movs	r3, #6
 800f7b6:	6063      	str	r3, [r4, #4]
 800f7b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f7bc:	2300      	movs	r3, #0
 800f7be:	6022      	str	r2, [r4, #0]
 800f7c0:	9303      	str	r3, [sp, #12]
 800f7c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800f7c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f7c8:	ab09      	add	r3, sp, #36	@ 0x24
 800f7ca:	9300      	str	r3, [sp, #0]
 800f7cc:	6861      	ldr	r1, [r4, #4]
 800f7ce:	ec49 8b10 	vmov	d0, r8, r9
 800f7d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	f7ff fed6 	bl	800f588 <__cvt>
 800f7dc:	9b06      	ldr	r3, [sp, #24]
 800f7de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f7e0:	2b47      	cmp	r3, #71	@ 0x47
 800f7e2:	4680      	mov	r8, r0
 800f7e4:	d129      	bne.n	800f83a <_printf_float+0x172>
 800f7e6:	1cc8      	adds	r0, r1, #3
 800f7e8:	db02      	blt.n	800f7f0 <_printf_float+0x128>
 800f7ea:	6863      	ldr	r3, [r4, #4]
 800f7ec:	4299      	cmp	r1, r3
 800f7ee:	dd41      	ble.n	800f874 <_printf_float+0x1ac>
 800f7f0:	f1aa 0a02 	sub.w	sl, sl, #2
 800f7f4:	fa5f fa8a 	uxtb.w	sl, sl
 800f7f8:	3901      	subs	r1, #1
 800f7fa:	4652      	mov	r2, sl
 800f7fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f800:	9109      	str	r1, [sp, #36]	@ 0x24
 800f802:	f7ff ff26 	bl	800f652 <__exponent>
 800f806:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f808:	1813      	adds	r3, r2, r0
 800f80a:	2a01      	cmp	r2, #1
 800f80c:	4681      	mov	r9, r0
 800f80e:	6123      	str	r3, [r4, #16]
 800f810:	dc02      	bgt.n	800f818 <_printf_float+0x150>
 800f812:	6822      	ldr	r2, [r4, #0]
 800f814:	07d2      	lsls	r2, r2, #31
 800f816:	d501      	bpl.n	800f81c <_printf_float+0x154>
 800f818:	3301      	adds	r3, #1
 800f81a:	6123      	str	r3, [r4, #16]
 800f81c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f820:	2b00      	cmp	r3, #0
 800f822:	d0a2      	beq.n	800f76a <_printf_float+0xa2>
 800f824:	232d      	movs	r3, #45	@ 0x2d
 800f826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f82a:	e79e      	b.n	800f76a <_printf_float+0xa2>
 800f82c:	9a06      	ldr	r2, [sp, #24]
 800f82e:	2a47      	cmp	r2, #71	@ 0x47
 800f830:	d1c2      	bne.n	800f7b8 <_printf_float+0xf0>
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1c0      	bne.n	800f7b8 <_printf_float+0xf0>
 800f836:	2301      	movs	r3, #1
 800f838:	e7bd      	b.n	800f7b6 <_printf_float+0xee>
 800f83a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f83e:	d9db      	bls.n	800f7f8 <_printf_float+0x130>
 800f840:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f844:	d118      	bne.n	800f878 <_printf_float+0x1b0>
 800f846:	2900      	cmp	r1, #0
 800f848:	6863      	ldr	r3, [r4, #4]
 800f84a:	dd0b      	ble.n	800f864 <_printf_float+0x19c>
 800f84c:	6121      	str	r1, [r4, #16]
 800f84e:	b913      	cbnz	r3, 800f856 <_printf_float+0x18e>
 800f850:	6822      	ldr	r2, [r4, #0]
 800f852:	07d0      	lsls	r0, r2, #31
 800f854:	d502      	bpl.n	800f85c <_printf_float+0x194>
 800f856:	3301      	adds	r3, #1
 800f858:	440b      	add	r3, r1
 800f85a:	6123      	str	r3, [r4, #16]
 800f85c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f85e:	f04f 0900 	mov.w	r9, #0
 800f862:	e7db      	b.n	800f81c <_printf_float+0x154>
 800f864:	b913      	cbnz	r3, 800f86c <_printf_float+0x1a4>
 800f866:	6822      	ldr	r2, [r4, #0]
 800f868:	07d2      	lsls	r2, r2, #31
 800f86a:	d501      	bpl.n	800f870 <_printf_float+0x1a8>
 800f86c:	3302      	adds	r3, #2
 800f86e:	e7f4      	b.n	800f85a <_printf_float+0x192>
 800f870:	2301      	movs	r3, #1
 800f872:	e7f2      	b.n	800f85a <_printf_float+0x192>
 800f874:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f87a:	4299      	cmp	r1, r3
 800f87c:	db05      	blt.n	800f88a <_printf_float+0x1c2>
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	6121      	str	r1, [r4, #16]
 800f882:	07d8      	lsls	r0, r3, #31
 800f884:	d5ea      	bpl.n	800f85c <_printf_float+0x194>
 800f886:	1c4b      	adds	r3, r1, #1
 800f888:	e7e7      	b.n	800f85a <_printf_float+0x192>
 800f88a:	2900      	cmp	r1, #0
 800f88c:	bfd4      	ite	le
 800f88e:	f1c1 0202 	rsble	r2, r1, #2
 800f892:	2201      	movgt	r2, #1
 800f894:	4413      	add	r3, r2
 800f896:	e7e0      	b.n	800f85a <_printf_float+0x192>
 800f898:	6823      	ldr	r3, [r4, #0]
 800f89a:	055a      	lsls	r2, r3, #21
 800f89c:	d407      	bmi.n	800f8ae <_printf_float+0x1e6>
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	4642      	mov	r2, r8
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	47b8      	blx	r7
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d12b      	bne.n	800f904 <_printf_float+0x23c>
 800f8ac:	e767      	b.n	800f77e <_printf_float+0xb6>
 800f8ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f8b2:	f240 80dd 	bls.w	800fa70 <_printf_float+0x3a8>
 800f8b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	2300      	movs	r3, #0
 800f8be:	f7f1 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d033      	beq.n	800f92e <_printf_float+0x266>
 800f8c6:	4a37      	ldr	r2, [pc, #220]	@ (800f9a4 <_printf_float+0x2dc>)
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	47b8      	blx	r7
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	f43f af54 	beq.w	800f77e <_printf_float+0xb6>
 800f8d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f8da:	4543      	cmp	r3, r8
 800f8dc:	db02      	blt.n	800f8e4 <_printf_float+0x21c>
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	07d8      	lsls	r0, r3, #31
 800f8e2:	d50f      	bpl.n	800f904 <_printf_float+0x23c>
 800f8e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	47b8      	blx	r7
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	f43f af45 	beq.w	800f77e <_printf_float+0xb6>
 800f8f4:	f04f 0900 	mov.w	r9, #0
 800f8f8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f8fc:	f104 0a1a 	add.w	sl, r4, #26
 800f900:	45c8      	cmp	r8, r9
 800f902:	dc09      	bgt.n	800f918 <_printf_float+0x250>
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	079b      	lsls	r3, r3, #30
 800f908:	f100 8103 	bmi.w	800fb12 <_printf_float+0x44a>
 800f90c:	68e0      	ldr	r0, [r4, #12]
 800f90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f910:	4298      	cmp	r0, r3
 800f912:	bfb8      	it	lt
 800f914:	4618      	movlt	r0, r3
 800f916:	e734      	b.n	800f782 <_printf_float+0xba>
 800f918:	2301      	movs	r3, #1
 800f91a:	4652      	mov	r2, sl
 800f91c:	4631      	mov	r1, r6
 800f91e:	4628      	mov	r0, r5
 800f920:	47b8      	blx	r7
 800f922:	3001      	adds	r0, #1
 800f924:	f43f af2b 	beq.w	800f77e <_printf_float+0xb6>
 800f928:	f109 0901 	add.w	r9, r9, #1
 800f92c:	e7e8      	b.n	800f900 <_printf_float+0x238>
 800f92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f930:	2b00      	cmp	r3, #0
 800f932:	dc39      	bgt.n	800f9a8 <_printf_float+0x2e0>
 800f934:	4a1b      	ldr	r2, [pc, #108]	@ (800f9a4 <_printf_float+0x2dc>)
 800f936:	2301      	movs	r3, #1
 800f938:	4631      	mov	r1, r6
 800f93a:	4628      	mov	r0, r5
 800f93c:	47b8      	blx	r7
 800f93e:	3001      	adds	r0, #1
 800f940:	f43f af1d 	beq.w	800f77e <_printf_float+0xb6>
 800f944:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f948:	ea59 0303 	orrs.w	r3, r9, r3
 800f94c:	d102      	bne.n	800f954 <_printf_float+0x28c>
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	07d9      	lsls	r1, r3, #31
 800f952:	d5d7      	bpl.n	800f904 <_printf_float+0x23c>
 800f954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f958:	4631      	mov	r1, r6
 800f95a:	4628      	mov	r0, r5
 800f95c:	47b8      	blx	r7
 800f95e:	3001      	adds	r0, #1
 800f960:	f43f af0d 	beq.w	800f77e <_printf_float+0xb6>
 800f964:	f04f 0a00 	mov.w	sl, #0
 800f968:	f104 0b1a 	add.w	fp, r4, #26
 800f96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f96e:	425b      	negs	r3, r3
 800f970:	4553      	cmp	r3, sl
 800f972:	dc01      	bgt.n	800f978 <_printf_float+0x2b0>
 800f974:	464b      	mov	r3, r9
 800f976:	e793      	b.n	800f8a0 <_printf_float+0x1d8>
 800f978:	2301      	movs	r3, #1
 800f97a:	465a      	mov	r2, fp
 800f97c:	4631      	mov	r1, r6
 800f97e:	4628      	mov	r0, r5
 800f980:	47b8      	blx	r7
 800f982:	3001      	adds	r0, #1
 800f984:	f43f aefb 	beq.w	800f77e <_printf_float+0xb6>
 800f988:	f10a 0a01 	add.w	sl, sl, #1
 800f98c:	e7ee      	b.n	800f96c <_printf_float+0x2a4>
 800f98e:	bf00      	nop
 800f990:	7fefffff 	.word	0x7fefffff
 800f994:	08012574 	.word	0x08012574
 800f998:	08012578 	.word	0x08012578
 800f99c:	0801257c 	.word	0x0801257c
 800f9a0:	08012580 	.word	0x08012580
 800f9a4:	08012584 	.word	0x08012584
 800f9a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f9aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f9ae:	4553      	cmp	r3, sl
 800f9b0:	bfa8      	it	ge
 800f9b2:	4653      	movge	r3, sl
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	4699      	mov	r9, r3
 800f9b8:	dc36      	bgt.n	800fa28 <_printf_float+0x360>
 800f9ba:	f04f 0b00 	mov.w	fp, #0
 800f9be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9c2:	f104 021a 	add.w	r2, r4, #26
 800f9c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f9c8:	9306      	str	r3, [sp, #24]
 800f9ca:	eba3 0309 	sub.w	r3, r3, r9
 800f9ce:	455b      	cmp	r3, fp
 800f9d0:	dc31      	bgt.n	800fa36 <_printf_float+0x36e>
 800f9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9d4:	459a      	cmp	sl, r3
 800f9d6:	dc3a      	bgt.n	800fa4e <_printf_float+0x386>
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	07da      	lsls	r2, r3, #31
 800f9dc:	d437      	bmi.n	800fa4e <_printf_float+0x386>
 800f9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9e0:	ebaa 0903 	sub.w	r9, sl, r3
 800f9e4:	9b06      	ldr	r3, [sp, #24]
 800f9e6:	ebaa 0303 	sub.w	r3, sl, r3
 800f9ea:	4599      	cmp	r9, r3
 800f9ec:	bfa8      	it	ge
 800f9ee:	4699      	movge	r9, r3
 800f9f0:	f1b9 0f00 	cmp.w	r9, #0
 800f9f4:	dc33      	bgt.n	800fa5e <_printf_float+0x396>
 800f9f6:	f04f 0800 	mov.w	r8, #0
 800f9fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9fe:	f104 0b1a 	add.w	fp, r4, #26
 800fa02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa04:	ebaa 0303 	sub.w	r3, sl, r3
 800fa08:	eba3 0309 	sub.w	r3, r3, r9
 800fa0c:	4543      	cmp	r3, r8
 800fa0e:	f77f af79 	ble.w	800f904 <_printf_float+0x23c>
 800fa12:	2301      	movs	r3, #1
 800fa14:	465a      	mov	r2, fp
 800fa16:	4631      	mov	r1, r6
 800fa18:	4628      	mov	r0, r5
 800fa1a:	47b8      	blx	r7
 800fa1c:	3001      	adds	r0, #1
 800fa1e:	f43f aeae 	beq.w	800f77e <_printf_float+0xb6>
 800fa22:	f108 0801 	add.w	r8, r8, #1
 800fa26:	e7ec      	b.n	800fa02 <_printf_float+0x33a>
 800fa28:	4642      	mov	r2, r8
 800fa2a:	4631      	mov	r1, r6
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	47b8      	blx	r7
 800fa30:	3001      	adds	r0, #1
 800fa32:	d1c2      	bne.n	800f9ba <_printf_float+0x2f2>
 800fa34:	e6a3      	b.n	800f77e <_printf_float+0xb6>
 800fa36:	2301      	movs	r3, #1
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	9206      	str	r2, [sp, #24]
 800fa3e:	47b8      	blx	r7
 800fa40:	3001      	adds	r0, #1
 800fa42:	f43f ae9c 	beq.w	800f77e <_printf_float+0xb6>
 800fa46:	9a06      	ldr	r2, [sp, #24]
 800fa48:	f10b 0b01 	add.w	fp, fp, #1
 800fa4c:	e7bb      	b.n	800f9c6 <_printf_float+0x2fe>
 800fa4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa52:	4631      	mov	r1, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b8      	blx	r7
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d1c0      	bne.n	800f9de <_printf_float+0x316>
 800fa5c:	e68f      	b.n	800f77e <_printf_float+0xb6>
 800fa5e:	9a06      	ldr	r2, [sp, #24]
 800fa60:	464b      	mov	r3, r9
 800fa62:	4442      	add	r2, r8
 800fa64:	4631      	mov	r1, r6
 800fa66:	4628      	mov	r0, r5
 800fa68:	47b8      	blx	r7
 800fa6a:	3001      	adds	r0, #1
 800fa6c:	d1c3      	bne.n	800f9f6 <_printf_float+0x32e>
 800fa6e:	e686      	b.n	800f77e <_printf_float+0xb6>
 800fa70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fa74:	f1ba 0f01 	cmp.w	sl, #1
 800fa78:	dc01      	bgt.n	800fa7e <_printf_float+0x3b6>
 800fa7a:	07db      	lsls	r3, r3, #31
 800fa7c:	d536      	bpl.n	800faec <_printf_float+0x424>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	4642      	mov	r2, r8
 800fa82:	4631      	mov	r1, r6
 800fa84:	4628      	mov	r0, r5
 800fa86:	47b8      	blx	r7
 800fa88:	3001      	adds	r0, #1
 800fa8a:	f43f ae78 	beq.w	800f77e <_printf_float+0xb6>
 800fa8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa92:	4631      	mov	r1, r6
 800fa94:	4628      	mov	r0, r5
 800fa96:	47b8      	blx	r7
 800fa98:	3001      	adds	r0, #1
 800fa9a:	f43f ae70 	beq.w	800f77e <_printf_float+0xb6>
 800fa9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800faa2:	2200      	movs	r2, #0
 800faa4:	2300      	movs	r3, #0
 800faa6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800faaa:	f7f1 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 800faae:	b9c0      	cbnz	r0, 800fae2 <_printf_float+0x41a>
 800fab0:	4653      	mov	r3, sl
 800fab2:	f108 0201 	add.w	r2, r8, #1
 800fab6:	4631      	mov	r1, r6
 800fab8:	4628      	mov	r0, r5
 800faba:	47b8      	blx	r7
 800fabc:	3001      	adds	r0, #1
 800fabe:	d10c      	bne.n	800fada <_printf_float+0x412>
 800fac0:	e65d      	b.n	800f77e <_printf_float+0xb6>
 800fac2:	2301      	movs	r3, #1
 800fac4:	465a      	mov	r2, fp
 800fac6:	4631      	mov	r1, r6
 800fac8:	4628      	mov	r0, r5
 800faca:	47b8      	blx	r7
 800facc:	3001      	adds	r0, #1
 800face:	f43f ae56 	beq.w	800f77e <_printf_float+0xb6>
 800fad2:	f108 0801 	add.w	r8, r8, #1
 800fad6:	45d0      	cmp	r8, sl
 800fad8:	dbf3      	blt.n	800fac2 <_printf_float+0x3fa>
 800fada:	464b      	mov	r3, r9
 800fadc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fae0:	e6df      	b.n	800f8a2 <_printf_float+0x1da>
 800fae2:	f04f 0800 	mov.w	r8, #0
 800fae6:	f104 0b1a 	add.w	fp, r4, #26
 800faea:	e7f4      	b.n	800fad6 <_printf_float+0x40e>
 800faec:	2301      	movs	r3, #1
 800faee:	4642      	mov	r2, r8
 800faf0:	e7e1      	b.n	800fab6 <_printf_float+0x3ee>
 800faf2:	2301      	movs	r3, #1
 800faf4:	464a      	mov	r2, r9
 800faf6:	4631      	mov	r1, r6
 800faf8:	4628      	mov	r0, r5
 800fafa:	47b8      	blx	r7
 800fafc:	3001      	adds	r0, #1
 800fafe:	f43f ae3e 	beq.w	800f77e <_printf_float+0xb6>
 800fb02:	f108 0801 	add.w	r8, r8, #1
 800fb06:	68e3      	ldr	r3, [r4, #12]
 800fb08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fb0a:	1a5b      	subs	r3, r3, r1
 800fb0c:	4543      	cmp	r3, r8
 800fb0e:	dcf0      	bgt.n	800faf2 <_printf_float+0x42a>
 800fb10:	e6fc      	b.n	800f90c <_printf_float+0x244>
 800fb12:	f04f 0800 	mov.w	r8, #0
 800fb16:	f104 0919 	add.w	r9, r4, #25
 800fb1a:	e7f4      	b.n	800fb06 <_printf_float+0x43e>

0800fb1c <_printf_common>:
 800fb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb20:	4616      	mov	r6, r2
 800fb22:	4698      	mov	r8, r3
 800fb24:	688a      	ldr	r2, [r1, #8]
 800fb26:	690b      	ldr	r3, [r1, #16]
 800fb28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	bfb8      	it	lt
 800fb30:	4613      	movlt	r3, r2
 800fb32:	6033      	str	r3, [r6, #0]
 800fb34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fb38:	4607      	mov	r7, r0
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	b10a      	cbz	r2, 800fb42 <_printf_common+0x26>
 800fb3e:	3301      	adds	r3, #1
 800fb40:	6033      	str	r3, [r6, #0]
 800fb42:	6823      	ldr	r3, [r4, #0]
 800fb44:	0699      	lsls	r1, r3, #26
 800fb46:	bf42      	ittt	mi
 800fb48:	6833      	ldrmi	r3, [r6, #0]
 800fb4a:	3302      	addmi	r3, #2
 800fb4c:	6033      	strmi	r3, [r6, #0]
 800fb4e:	6825      	ldr	r5, [r4, #0]
 800fb50:	f015 0506 	ands.w	r5, r5, #6
 800fb54:	d106      	bne.n	800fb64 <_printf_common+0x48>
 800fb56:	f104 0a19 	add.w	sl, r4, #25
 800fb5a:	68e3      	ldr	r3, [r4, #12]
 800fb5c:	6832      	ldr	r2, [r6, #0]
 800fb5e:	1a9b      	subs	r3, r3, r2
 800fb60:	42ab      	cmp	r3, r5
 800fb62:	dc26      	bgt.n	800fbb2 <_printf_common+0x96>
 800fb64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fb68:	6822      	ldr	r2, [r4, #0]
 800fb6a:	3b00      	subs	r3, #0
 800fb6c:	bf18      	it	ne
 800fb6e:	2301      	movne	r3, #1
 800fb70:	0692      	lsls	r2, r2, #26
 800fb72:	d42b      	bmi.n	800fbcc <_printf_common+0xb0>
 800fb74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fb78:	4641      	mov	r1, r8
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	47c8      	blx	r9
 800fb7e:	3001      	adds	r0, #1
 800fb80:	d01e      	beq.n	800fbc0 <_printf_common+0xa4>
 800fb82:	6823      	ldr	r3, [r4, #0]
 800fb84:	6922      	ldr	r2, [r4, #16]
 800fb86:	f003 0306 	and.w	r3, r3, #6
 800fb8a:	2b04      	cmp	r3, #4
 800fb8c:	bf02      	ittt	eq
 800fb8e:	68e5      	ldreq	r5, [r4, #12]
 800fb90:	6833      	ldreq	r3, [r6, #0]
 800fb92:	1aed      	subeq	r5, r5, r3
 800fb94:	68a3      	ldr	r3, [r4, #8]
 800fb96:	bf0c      	ite	eq
 800fb98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb9c:	2500      	movne	r5, #0
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	bfc4      	itt	gt
 800fba2:	1a9b      	subgt	r3, r3, r2
 800fba4:	18ed      	addgt	r5, r5, r3
 800fba6:	2600      	movs	r6, #0
 800fba8:	341a      	adds	r4, #26
 800fbaa:	42b5      	cmp	r5, r6
 800fbac:	d11a      	bne.n	800fbe4 <_printf_common+0xc8>
 800fbae:	2000      	movs	r0, #0
 800fbb0:	e008      	b.n	800fbc4 <_printf_common+0xa8>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	4652      	mov	r2, sl
 800fbb6:	4641      	mov	r1, r8
 800fbb8:	4638      	mov	r0, r7
 800fbba:	47c8      	blx	r9
 800fbbc:	3001      	adds	r0, #1
 800fbbe:	d103      	bne.n	800fbc8 <_printf_common+0xac>
 800fbc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc8:	3501      	adds	r5, #1
 800fbca:	e7c6      	b.n	800fb5a <_printf_common+0x3e>
 800fbcc:	18e1      	adds	r1, r4, r3
 800fbce:	1c5a      	adds	r2, r3, #1
 800fbd0:	2030      	movs	r0, #48	@ 0x30
 800fbd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fbd6:	4422      	add	r2, r4
 800fbd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fbdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fbe0:	3302      	adds	r3, #2
 800fbe2:	e7c7      	b.n	800fb74 <_printf_common+0x58>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	4641      	mov	r1, r8
 800fbea:	4638      	mov	r0, r7
 800fbec:	47c8      	blx	r9
 800fbee:	3001      	adds	r0, #1
 800fbf0:	d0e6      	beq.n	800fbc0 <_printf_common+0xa4>
 800fbf2:	3601      	adds	r6, #1
 800fbf4:	e7d9      	b.n	800fbaa <_printf_common+0x8e>
	...

0800fbf8 <_printf_i>:
 800fbf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbfc:	7e0f      	ldrb	r7, [r1, #24]
 800fbfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc00:	2f78      	cmp	r7, #120	@ 0x78
 800fc02:	4691      	mov	r9, r2
 800fc04:	4680      	mov	r8, r0
 800fc06:	460c      	mov	r4, r1
 800fc08:	469a      	mov	sl, r3
 800fc0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc0e:	d807      	bhi.n	800fc20 <_printf_i+0x28>
 800fc10:	2f62      	cmp	r7, #98	@ 0x62
 800fc12:	d80a      	bhi.n	800fc2a <_printf_i+0x32>
 800fc14:	2f00      	cmp	r7, #0
 800fc16:	f000 80d2 	beq.w	800fdbe <_printf_i+0x1c6>
 800fc1a:	2f58      	cmp	r7, #88	@ 0x58
 800fc1c:	f000 80b9 	beq.w	800fd92 <_printf_i+0x19a>
 800fc20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fc28:	e03a      	b.n	800fca0 <_printf_i+0xa8>
 800fc2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fc2e:	2b15      	cmp	r3, #21
 800fc30:	d8f6      	bhi.n	800fc20 <_printf_i+0x28>
 800fc32:	a101      	add	r1, pc, #4	@ (adr r1, 800fc38 <_printf_i+0x40>)
 800fc34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc38:	0800fc91 	.word	0x0800fc91
 800fc3c:	0800fca5 	.word	0x0800fca5
 800fc40:	0800fc21 	.word	0x0800fc21
 800fc44:	0800fc21 	.word	0x0800fc21
 800fc48:	0800fc21 	.word	0x0800fc21
 800fc4c:	0800fc21 	.word	0x0800fc21
 800fc50:	0800fca5 	.word	0x0800fca5
 800fc54:	0800fc21 	.word	0x0800fc21
 800fc58:	0800fc21 	.word	0x0800fc21
 800fc5c:	0800fc21 	.word	0x0800fc21
 800fc60:	0800fc21 	.word	0x0800fc21
 800fc64:	0800fda5 	.word	0x0800fda5
 800fc68:	0800fccf 	.word	0x0800fccf
 800fc6c:	0800fd5f 	.word	0x0800fd5f
 800fc70:	0800fc21 	.word	0x0800fc21
 800fc74:	0800fc21 	.word	0x0800fc21
 800fc78:	0800fdc7 	.word	0x0800fdc7
 800fc7c:	0800fc21 	.word	0x0800fc21
 800fc80:	0800fccf 	.word	0x0800fccf
 800fc84:	0800fc21 	.word	0x0800fc21
 800fc88:	0800fc21 	.word	0x0800fc21
 800fc8c:	0800fd67 	.word	0x0800fd67
 800fc90:	6833      	ldr	r3, [r6, #0]
 800fc92:	1d1a      	adds	r2, r3, #4
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6032      	str	r2, [r6, #0]
 800fc98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fca0:	2301      	movs	r3, #1
 800fca2:	e09d      	b.n	800fde0 <_printf_i+0x1e8>
 800fca4:	6833      	ldr	r3, [r6, #0]
 800fca6:	6820      	ldr	r0, [r4, #0]
 800fca8:	1d19      	adds	r1, r3, #4
 800fcaa:	6031      	str	r1, [r6, #0]
 800fcac:	0606      	lsls	r6, r0, #24
 800fcae:	d501      	bpl.n	800fcb4 <_printf_i+0xbc>
 800fcb0:	681d      	ldr	r5, [r3, #0]
 800fcb2:	e003      	b.n	800fcbc <_printf_i+0xc4>
 800fcb4:	0645      	lsls	r5, r0, #25
 800fcb6:	d5fb      	bpl.n	800fcb0 <_printf_i+0xb8>
 800fcb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fcbc:	2d00      	cmp	r5, #0
 800fcbe:	da03      	bge.n	800fcc8 <_printf_i+0xd0>
 800fcc0:	232d      	movs	r3, #45	@ 0x2d
 800fcc2:	426d      	negs	r5, r5
 800fcc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcc8:	4859      	ldr	r0, [pc, #356]	@ (800fe30 <_printf_i+0x238>)
 800fcca:	230a      	movs	r3, #10
 800fccc:	e011      	b.n	800fcf2 <_printf_i+0xfa>
 800fcce:	6821      	ldr	r1, [r4, #0]
 800fcd0:	6833      	ldr	r3, [r6, #0]
 800fcd2:	0608      	lsls	r0, r1, #24
 800fcd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800fcd8:	d402      	bmi.n	800fce0 <_printf_i+0xe8>
 800fcda:	0649      	lsls	r1, r1, #25
 800fcdc:	bf48      	it	mi
 800fcde:	b2ad      	uxthmi	r5, r5
 800fce0:	2f6f      	cmp	r7, #111	@ 0x6f
 800fce2:	4853      	ldr	r0, [pc, #332]	@ (800fe30 <_printf_i+0x238>)
 800fce4:	6033      	str	r3, [r6, #0]
 800fce6:	bf14      	ite	ne
 800fce8:	230a      	movne	r3, #10
 800fcea:	2308      	moveq	r3, #8
 800fcec:	2100      	movs	r1, #0
 800fcee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fcf2:	6866      	ldr	r6, [r4, #4]
 800fcf4:	60a6      	str	r6, [r4, #8]
 800fcf6:	2e00      	cmp	r6, #0
 800fcf8:	bfa2      	ittt	ge
 800fcfa:	6821      	ldrge	r1, [r4, #0]
 800fcfc:	f021 0104 	bicge.w	r1, r1, #4
 800fd00:	6021      	strge	r1, [r4, #0]
 800fd02:	b90d      	cbnz	r5, 800fd08 <_printf_i+0x110>
 800fd04:	2e00      	cmp	r6, #0
 800fd06:	d04b      	beq.n	800fda0 <_printf_i+0x1a8>
 800fd08:	4616      	mov	r6, r2
 800fd0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd0e:	fb03 5711 	mls	r7, r3, r1, r5
 800fd12:	5dc7      	ldrb	r7, [r0, r7]
 800fd14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fd18:	462f      	mov	r7, r5
 800fd1a:	42bb      	cmp	r3, r7
 800fd1c:	460d      	mov	r5, r1
 800fd1e:	d9f4      	bls.n	800fd0a <_printf_i+0x112>
 800fd20:	2b08      	cmp	r3, #8
 800fd22:	d10b      	bne.n	800fd3c <_printf_i+0x144>
 800fd24:	6823      	ldr	r3, [r4, #0]
 800fd26:	07df      	lsls	r7, r3, #31
 800fd28:	d508      	bpl.n	800fd3c <_printf_i+0x144>
 800fd2a:	6923      	ldr	r3, [r4, #16]
 800fd2c:	6861      	ldr	r1, [r4, #4]
 800fd2e:	4299      	cmp	r1, r3
 800fd30:	bfde      	ittt	le
 800fd32:	2330      	movle	r3, #48	@ 0x30
 800fd34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fd38:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fd3c:	1b92      	subs	r2, r2, r6
 800fd3e:	6122      	str	r2, [r4, #16]
 800fd40:	f8cd a000 	str.w	sl, [sp]
 800fd44:	464b      	mov	r3, r9
 800fd46:	aa03      	add	r2, sp, #12
 800fd48:	4621      	mov	r1, r4
 800fd4a:	4640      	mov	r0, r8
 800fd4c:	f7ff fee6 	bl	800fb1c <_printf_common>
 800fd50:	3001      	adds	r0, #1
 800fd52:	d14a      	bne.n	800fdea <_printf_i+0x1f2>
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd58:	b004      	add	sp, #16
 800fd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	f043 0320 	orr.w	r3, r3, #32
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	4833      	ldr	r0, [pc, #204]	@ (800fe34 <_printf_i+0x23c>)
 800fd68:	2778      	movs	r7, #120	@ 0x78
 800fd6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fd6e:	6823      	ldr	r3, [r4, #0]
 800fd70:	6831      	ldr	r1, [r6, #0]
 800fd72:	061f      	lsls	r7, r3, #24
 800fd74:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd78:	d402      	bmi.n	800fd80 <_printf_i+0x188>
 800fd7a:	065f      	lsls	r7, r3, #25
 800fd7c:	bf48      	it	mi
 800fd7e:	b2ad      	uxthmi	r5, r5
 800fd80:	6031      	str	r1, [r6, #0]
 800fd82:	07d9      	lsls	r1, r3, #31
 800fd84:	bf44      	itt	mi
 800fd86:	f043 0320 	orrmi.w	r3, r3, #32
 800fd8a:	6023      	strmi	r3, [r4, #0]
 800fd8c:	b11d      	cbz	r5, 800fd96 <_printf_i+0x19e>
 800fd8e:	2310      	movs	r3, #16
 800fd90:	e7ac      	b.n	800fcec <_printf_i+0xf4>
 800fd92:	4827      	ldr	r0, [pc, #156]	@ (800fe30 <_printf_i+0x238>)
 800fd94:	e7e9      	b.n	800fd6a <_printf_i+0x172>
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	f023 0320 	bic.w	r3, r3, #32
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	e7f6      	b.n	800fd8e <_printf_i+0x196>
 800fda0:	4616      	mov	r6, r2
 800fda2:	e7bd      	b.n	800fd20 <_printf_i+0x128>
 800fda4:	6833      	ldr	r3, [r6, #0]
 800fda6:	6825      	ldr	r5, [r4, #0]
 800fda8:	6961      	ldr	r1, [r4, #20]
 800fdaa:	1d18      	adds	r0, r3, #4
 800fdac:	6030      	str	r0, [r6, #0]
 800fdae:	062e      	lsls	r6, r5, #24
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	d501      	bpl.n	800fdb8 <_printf_i+0x1c0>
 800fdb4:	6019      	str	r1, [r3, #0]
 800fdb6:	e002      	b.n	800fdbe <_printf_i+0x1c6>
 800fdb8:	0668      	lsls	r0, r5, #25
 800fdba:	d5fb      	bpl.n	800fdb4 <_printf_i+0x1bc>
 800fdbc:	8019      	strh	r1, [r3, #0]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	6123      	str	r3, [r4, #16]
 800fdc2:	4616      	mov	r6, r2
 800fdc4:	e7bc      	b.n	800fd40 <_printf_i+0x148>
 800fdc6:	6833      	ldr	r3, [r6, #0]
 800fdc8:	1d1a      	adds	r2, r3, #4
 800fdca:	6032      	str	r2, [r6, #0]
 800fdcc:	681e      	ldr	r6, [r3, #0]
 800fdce:	6862      	ldr	r2, [r4, #4]
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7f0 f9fc 	bl	80001d0 <memchr>
 800fdd8:	b108      	cbz	r0, 800fdde <_printf_i+0x1e6>
 800fdda:	1b80      	subs	r0, r0, r6
 800fddc:	6060      	str	r0, [r4, #4]
 800fdde:	6863      	ldr	r3, [r4, #4]
 800fde0:	6123      	str	r3, [r4, #16]
 800fde2:	2300      	movs	r3, #0
 800fde4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fde8:	e7aa      	b.n	800fd40 <_printf_i+0x148>
 800fdea:	6923      	ldr	r3, [r4, #16]
 800fdec:	4632      	mov	r2, r6
 800fdee:	4649      	mov	r1, r9
 800fdf0:	4640      	mov	r0, r8
 800fdf2:	47d0      	blx	sl
 800fdf4:	3001      	adds	r0, #1
 800fdf6:	d0ad      	beq.n	800fd54 <_printf_i+0x15c>
 800fdf8:	6823      	ldr	r3, [r4, #0]
 800fdfa:	079b      	lsls	r3, r3, #30
 800fdfc:	d413      	bmi.n	800fe26 <_printf_i+0x22e>
 800fdfe:	68e0      	ldr	r0, [r4, #12]
 800fe00:	9b03      	ldr	r3, [sp, #12]
 800fe02:	4298      	cmp	r0, r3
 800fe04:	bfb8      	it	lt
 800fe06:	4618      	movlt	r0, r3
 800fe08:	e7a6      	b.n	800fd58 <_printf_i+0x160>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	4632      	mov	r2, r6
 800fe0e:	4649      	mov	r1, r9
 800fe10:	4640      	mov	r0, r8
 800fe12:	47d0      	blx	sl
 800fe14:	3001      	adds	r0, #1
 800fe16:	d09d      	beq.n	800fd54 <_printf_i+0x15c>
 800fe18:	3501      	adds	r5, #1
 800fe1a:	68e3      	ldr	r3, [r4, #12]
 800fe1c:	9903      	ldr	r1, [sp, #12]
 800fe1e:	1a5b      	subs	r3, r3, r1
 800fe20:	42ab      	cmp	r3, r5
 800fe22:	dcf2      	bgt.n	800fe0a <_printf_i+0x212>
 800fe24:	e7eb      	b.n	800fdfe <_printf_i+0x206>
 800fe26:	2500      	movs	r5, #0
 800fe28:	f104 0619 	add.w	r6, r4, #25
 800fe2c:	e7f5      	b.n	800fe1a <_printf_i+0x222>
 800fe2e:	bf00      	nop
 800fe30:	08012586 	.word	0x08012586
 800fe34:	08012597 	.word	0x08012597

0800fe38 <std>:
 800fe38:	2300      	movs	r3, #0
 800fe3a:	b510      	push	{r4, lr}
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	e9c0 3300 	strd	r3, r3, [r0]
 800fe42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe46:	6083      	str	r3, [r0, #8]
 800fe48:	8181      	strh	r1, [r0, #12]
 800fe4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe4c:	81c2      	strh	r2, [r0, #14]
 800fe4e:	6183      	str	r3, [r0, #24]
 800fe50:	4619      	mov	r1, r3
 800fe52:	2208      	movs	r2, #8
 800fe54:	305c      	adds	r0, #92	@ 0x5c
 800fe56:	f000 f8d1 	bl	800fffc <memset>
 800fe5a:	4b0d      	ldr	r3, [pc, #52]	@ (800fe90 <std+0x58>)
 800fe5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe94 <std+0x5c>)
 800fe60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe62:	4b0d      	ldr	r3, [pc, #52]	@ (800fe98 <std+0x60>)
 800fe64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe66:	4b0d      	ldr	r3, [pc, #52]	@ (800fe9c <std+0x64>)
 800fe68:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fea0 <std+0x68>)
 800fe6c:	6224      	str	r4, [r4, #32]
 800fe6e:	429c      	cmp	r4, r3
 800fe70:	d006      	beq.n	800fe80 <std+0x48>
 800fe72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe76:	4294      	cmp	r4, r2
 800fe78:	d002      	beq.n	800fe80 <std+0x48>
 800fe7a:	33d0      	adds	r3, #208	@ 0xd0
 800fe7c:	429c      	cmp	r4, r3
 800fe7e:	d105      	bne.n	800fe8c <std+0x54>
 800fe80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe88:	f000 b944 	b.w	8010114 <__retarget_lock_init_recursive>
 800fe8c:	bd10      	pop	{r4, pc}
 800fe8e:	bf00      	nop
 800fe90:	08011add 	.word	0x08011add
 800fe94:	08011aff 	.word	0x08011aff
 800fe98:	08011b37 	.word	0x08011b37
 800fe9c:	08011b5b 	.word	0x08011b5b
 800fea0:	20005afc 	.word	0x20005afc

0800fea4 <stdio_exit_handler>:
 800fea4:	4a02      	ldr	r2, [pc, #8]	@ (800feb0 <stdio_exit_handler+0xc>)
 800fea6:	4903      	ldr	r1, [pc, #12]	@ (800feb4 <stdio_exit_handler+0x10>)
 800fea8:	4803      	ldr	r0, [pc, #12]	@ (800feb8 <stdio_exit_handler+0x14>)
 800feaa:	f000 b869 	b.w	800ff80 <_fwalk_sglue>
 800feae:	bf00      	nop
 800feb0:	2000012c 	.word	0x2000012c
 800feb4:	08011371 	.word	0x08011371
 800feb8:	2000013c 	.word	0x2000013c

0800febc <cleanup_stdio>:
 800febc:	6841      	ldr	r1, [r0, #4]
 800febe:	4b0c      	ldr	r3, [pc, #48]	@ (800fef0 <cleanup_stdio+0x34>)
 800fec0:	4299      	cmp	r1, r3
 800fec2:	b510      	push	{r4, lr}
 800fec4:	4604      	mov	r4, r0
 800fec6:	d001      	beq.n	800fecc <cleanup_stdio+0x10>
 800fec8:	f001 fa52 	bl	8011370 <_fflush_r>
 800fecc:	68a1      	ldr	r1, [r4, #8]
 800fece:	4b09      	ldr	r3, [pc, #36]	@ (800fef4 <cleanup_stdio+0x38>)
 800fed0:	4299      	cmp	r1, r3
 800fed2:	d002      	beq.n	800feda <cleanup_stdio+0x1e>
 800fed4:	4620      	mov	r0, r4
 800fed6:	f001 fa4b 	bl	8011370 <_fflush_r>
 800feda:	68e1      	ldr	r1, [r4, #12]
 800fedc:	4b06      	ldr	r3, [pc, #24]	@ (800fef8 <cleanup_stdio+0x3c>)
 800fede:	4299      	cmp	r1, r3
 800fee0:	d004      	beq.n	800feec <cleanup_stdio+0x30>
 800fee2:	4620      	mov	r0, r4
 800fee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fee8:	f001 ba42 	b.w	8011370 <_fflush_r>
 800feec:	bd10      	pop	{r4, pc}
 800feee:	bf00      	nop
 800fef0:	20005afc 	.word	0x20005afc
 800fef4:	20005b64 	.word	0x20005b64
 800fef8:	20005bcc 	.word	0x20005bcc

0800fefc <global_stdio_init.part.0>:
 800fefc:	b510      	push	{r4, lr}
 800fefe:	4b0b      	ldr	r3, [pc, #44]	@ (800ff2c <global_stdio_init.part.0+0x30>)
 800ff00:	4c0b      	ldr	r4, [pc, #44]	@ (800ff30 <global_stdio_init.part.0+0x34>)
 800ff02:	4a0c      	ldr	r2, [pc, #48]	@ (800ff34 <global_stdio_init.part.0+0x38>)
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	4620      	mov	r0, r4
 800ff08:	2200      	movs	r2, #0
 800ff0a:	2104      	movs	r1, #4
 800ff0c:	f7ff ff94 	bl	800fe38 <std>
 800ff10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ff14:	2201      	movs	r2, #1
 800ff16:	2109      	movs	r1, #9
 800ff18:	f7ff ff8e 	bl	800fe38 <std>
 800ff1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ff20:	2202      	movs	r2, #2
 800ff22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff26:	2112      	movs	r1, #18
 800ff28:	f7ff bf86 	b.w	800fe38 <std>
 800ff2c:	20005c34 	.word	0x20005c34
 800ff30:	20005afc 	.word	0x20005afc
 800ff34:	0800fea5 	.word	0x0800fea5

0800ff38 <__sfp_lock_acquire>:
 800ff38:	4801      	ldr	r0, [pc, #4]	@ (800ff40 <__sfp_lock_acquire+0x8>)
 800ff3a:	f000 b8ec 	b.w	8010116 <__retarget_lock_acquire_recursive>
 800ff3e:	bf00      	nop
 800ff40:	20005c3d 	.word	0x20005c3d

0800ff44 <__sfp_lock_release>:
 800ff44:	4801      	ldr	r0, [pc, #4]	@ (800ff4c <__sfp_lock_release+0x8>)
 800ff46:	f000 b8e7 	b.w	8010118 <__retarget_lock_release_recursive>
 800ff4a:	bf00      	nop
 800ff4c:	20005c3d 	.word	0x20005c3d

0800ff50 <__sinit>:
 800ff50:	b510      	push	{r4, lr}
 800ff52:	4604      	mov	r4, r0
 800ff54:	f7ff fff0 	bl	800ff38 <__sfp_lock_acquire>
 800ff58:	6a23      	ldr	r3, [r4, #32]
 800ff5a:	b11b      	cbz	r3, 800ff64 <__sinit+0x14>
 800ff5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff60:	f7ff bff0 	b.w	800ff44 <__sfp_lock_release>
 800ff64:	4b04      	ldr	r3, [pc, #16]	@ (800ff78 <__sinit+0x28>)
 800ff66:	6223      	str	r3, [r4, #32]
 800ff68:	4b04      	ldr	r3, [pc, #16]	@ (800ff7c <__sinit+0x2c>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d1f5      	bne.n	800ff5c <__sinit+0xc>
 800ff70:	f7ff ffc4 	bl	800fefc <global_stdio_init.part.0>
 800ff74:	e7f2      	b.n	800ff5c <__sinit+0xc>
 800ff76:	bf00      	nop
 800ff78:	0800febd 	.word	0x0800febd
 800ff7c:	20005c34 	.word	0x20005c34

0800ff80 <_fwalk_sglue>:
 800ff80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff84:	4607      	mov	r7, r0
 800ff86:	4688      	mov	r8, r1
 800ff88:	4614      	mov	r4, r2
 800ff8a:	2600      	movs	r6, #0
 800ff8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff90:	f1b9 0901 	subs.w	r9, r9, #1
 800ff94:	d505      	bpl.n	800ffa2 <_fwalk_sglue+0x22>
 800ff96:	6824      	ldr	r4, [r4, #0]
 800ff98:	2c00      	cmp	r4, #0
 800ff9a:	d1f7      	bne.n	800ff8c <_fwalk_sglue+0xc>
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa2:	89ab      	ldrh	r3, [r5, #12]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d907      	bls.n	800ffb8 <_fwalk_sglue+0x38>
 800ffa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffac:	3301      	adds	r3, #1
 800ffae:	d003      	beq.n	800ffb8 <_fwalk_sglue+0x38>
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	4638      	mov	r0, r7
 800ffb4:	47c0      	blx	r8
 800ffb6:	4306      	orrs	r6, r0
 800ffb8:	3568      	adds	r5, #104	@ 0x68
 800ffba:	e7e9      	b.n	800ff90 <_fwalk_sglue+0x10>

0800ffbc <_vsiprintf_r>:
 800ffbc:	b500      	push	{lr}
 800ffbe:	b09b      	sub	sp, #108	@ 0x6c
 800ffc0:	9100      	str	r1, [sp, #0]
 800ffc2:	9104      	str	r1, [sp, #16]
 800ffc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ffc8:	9105      	str	r1, [sp, #20]
 800ffca:	9102      	str	r1, [sp, #8]
 800ffcc:	4905      	ldr	r1, [pc, #20]	@ (800ffe4 <_vsiprintf_r+0x28>)
 800ffce:	9103      	str	r1, [sp, #12]
 800ffd0:	4669      	mov	r1, sp
 800ffd2:	f000 ffa3 	bl	8010f1c <_svfiprintf_r>
 800ffd6:	9b00      	ldr	r3, [sp, #0]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	701a      	strb	r2, [r3, #0]
 800ffdc:	b01b      	add	sp, #108	@ 0x6c
 800ffde:	f85d fb04 	ldr.w	pc, [sp], #4
 800ffe2:	bf00      	nop
 800ffe4:	ffff0208 	.word	0xffff0208

0800ffe8 <vsiprintf>:
 800ffe8:	4613      	mov	r3, r2
 800ffea:	460a      	mov	r2, r1
 800ffec:	4601      	mov	r1, r0
 800ffee:	4802      	ldr	r0, [pc, #8]	@ (800fff8 <vsiprintf+0x10>)
 800fff0:	6800      	ldr	r0, [r0, #0]
 800fff2:	f7ff bfe3 	b.w	800ffbc <_vsiprintf_r>
 800fff6:	bf00      	nop
 800fff8:	20000138 	.word	0x20000138

0800fffc <memset>:
 800fffc:	4402      	add	r2, r0
 800fffe:	4603      	mov	r3, r0
 8010000:	4293      	cmp	r3, r2
 8010002:	d100      	bne.n	8010006 <memset+0xa>
 8010004:	4770      	bx	lr
 8010006:	f803 1b01 	strb.w	r1, [r3], #1
 801000a:	e7f9      	b.n	8010000 <memset+0x4>

0801000c <_localeconv_r>:
 801000c:	4800      	ldr	r0, [pc, #0]	@ (8010010 <_localeconv_r+0x4>)
 801000e:	4770      	bx	lr
 8010010:	20000278 	.word	0x20000278

08010014 <_reclaim_reent>:
 8010014:	4b29      	ldr	r3, [pc, #164]	@ (80100bc <_reclaim_reent+0xa8>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4283      	cmp	r3, r0
 801001a:	b570      	push	{r4, r5, r6, lr}
 801001c:	4604      	mov	r4, r0
 801001e:	d04b      	beq.n	80100b8 <_reclaim_reent+0xa4>
 8010020:	69c3      	ldr	r3, [r0, #28]
 8010022:	b1ab      	cbz	r3, 8010050 <_reclaim_reent+0x3c>
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	b16b      	cbz	r3, 8010044 <_reclaim_reent+0x30>
 8010028:	2500      	movs	r5, #0
 801002a:	69e3      	ldr	r3, [r4, #28]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	5959      	ldr	r1, [r3, r5]
 8010030:	2900      	cmp	r1, #0
 8010032:	d13b      	bne.n	80100ac <_reclaim_reent+0x98>
 8010034:	3504      	adds	r5, #4
 8010036:	2d80      	cmp	r5, #128	@ 0x80
 8010038:	d1f7      	bne.n	801002a <_reclaim_reent+0x16>
 801003a:	69e3      	ldr	r3, [r4, #28]
 801003c:	4620      	mov	r0, r4
 801003e:	68d9      	ldr	r1, [r3, #12]
 8010040:	f000 fec6 	bl	8010dd0 <_free_r>
 8010044:	69e3      	ldr	r3, [r4, #28]
 8010046:	6819      	ldr	r1, [r3, #0]
 8010048:	b111      	cbz	r1, 8010050 <_reclaim_reent+0x3c>
 801004a:	4620      	mov	r0, r4
 801004c:	f000 fec0 	bl	8010dd0 <_free_r>
 8010050:	6961      	ldr	r1, [r4, #20]
 8010052:	b111      	cbz	r1, 801005a <_reclaim_reent+0x46>
 8010054:	4620      	mov	r0, r4
 8010056:	f000 febb 	bl	8010dd0 <_free_r>
 801005a:	69e1      	ldr	r1, [r4, #28]
 801005c:	b111      	cbz	r1, 8010064 <_reclaim_reent+0x50>
 801005e:	4620      	mov	r0, r4
 8010060:	f000 feb6 	bl	8010dd0 <_free_r>
 8010064:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010066:	b111      	cbz	r1, 801006e <_reclaim_reent+0x5a>
 8010068:	4620      	mov	r0, r4
 801006a:	f000 feb1 	bl	8010dd0 <_free_r>
 801006e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010070:	b111      	cbz	r1, 8010078 <_reclaim_reent+0x64>
 8010072:	4620      	mov	r0, r4
 8010074:	f000 feac 	bl	8010dd0 <_free_r>
 8010078:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801007a:	b111      	cbz	r1, 8010082 <_reclaim_reent+0x6e>
 801007c:	4620      	mov	r0, r4
 801007e:	f000 fea7 	bl	8010dd0 <_free_r>
 8010082:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010084:	b111      	cbz	r1, 801008c <_reclaim_reent+0x78>
 8010086:	4620      	mov	r0, r4
 8010088:	f000 fea2 	bl	8010dd0 <_free_r>
 801008c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801008e:	b111      	cbz	r1, 8010096 <_reclaim_reent+0x82>
 8010090:	4620      	mov	r0, r4
 8010092:	f000 fe9d 	bl	8010dd0 <_free_r>
 8010096:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010098:	b111      	cbz	r1, 80100a0 <_reclaim_reent+0x8c>
 801009a:	4620      	mov	r0, r4
 801009c:	f000 fe98 	bl	8010dd0 <_free_r>
 80100a0:	6a23      	ldr	r3, [r4, #32]
 80100a2:	b14b      	cbz	r3, 80100b8 <_reclaim_reent+0xa4>
 80100a4:	4620      	mov	r0, r4
 80100a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100aa:	4718      	bx	r3
 80100ac:	680e      	ldr	r6, [r1, #0]
 80100ae:	4620      	mov	r0, r4
 80100b0:	f000 fe8e 	bl	8010dd0 <_free_r>
 80100b4:	4631      	mov	r1, r6
 80100b6:	e7bb      	b.n	8010030 <_reclaim_reent+0x1c>
 80100b8:	bd70      	pop	{r4, r5, r6, pc}
 80100ba:	bf00      	nop
 80100bc:	20000138 	.word	0x20000138

080100c0 <__errno>:
 80100c0:	4b01      	ldr	r3, [pc, #4]	@ (80100c8 <__errno+0x8>)
 80100c2:	6818      	ldr	r0, [r3, #0]
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	20000138 	.word	0x20000138

080100cc <__libc_init_array>:
 80100cc:	b570      	push	{r4, r5, r6, lr}
 80100ce:	4d0d      	ldr	r5, [pc, #52]	@ (8010104 <__libc_init_array+0x38>)
 80100d0:	4c0d      	ldr	r4, [pc, #52]	@ (8010108 <__libc_init_array+0x3c>)
 80100d2:	1b64      	subs	r4, r4, r5
 80100d4:	10a4      	asrs	r4, r4, #2
 80100d6:	2600      	movs	r6, #0
 80100d8:	42a6      	cmp	r6, r4
 80100da:	d109      	bne.n	80100f0 <__libc_init_array+0x24>
 80100dc:	4d0b      	ldr	r5, [pc, #44]	@ (801010c <__libc_init_array+0x40>)
 80100de:	4c0c      	ldr	r4, [pc, #48]	@ (8010110 <__libc_init_array+0x44>)
 80100e0:	f002 f8ee 	bl	80122c0 <_init>
 80100e4:	1b64      	subs	r4, r4, r5
 80100e6:	10a4      	asrs	r4, r4, #2
 80100e8:	2600      	movs	r6, #0
 80100ea:	42a6      	cmp	r6, r4
 80100ec:	d105      	bne.n	80100fa <__libc_init_array+0x2e>
 80100ee:	bd70      	pop	{r4, r5, r6, pc}
 80100f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80100f4:	4798      	blx	r3
 80100f6:	3601      	adds	r6, #1
 80100f8:	e7ee      	b.n	80100d8 <__libc_init_array+0xc>
 80100fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80100fe:	4798      	blx	r3
 8010100:	3601      	adds	r6, #1
 8010102:	e7f2      	b.n	80100ea <__libc_init_array+0x1e>
 8010104:	080128f0 	.word	0x080128f0
 8010108:	080128f0 	.word	0x080128f0
 801010c:	080128f0 	.word	0x080128f0
 8010110:	080128f4 	.word	0x080128f4

08010114 <__retarget_lock_init_recursive>:
 8010114:	4770      	bx	lr

08010116 <__retarget_lock_acquire_recursive>:
 8010116:	4770      	bx	lr

08010118 <__retarget_lock_release_recursive>:
 8010118:	4770      	bx	lr

0801011a <memcpy>:
 801011a:	440a      	add	r2, r1
 801011c:	4291      	cmp	r1, r2
 801011e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010122:	d100      	bne.n	8010126 <memcpy+0xc>
 8010124:	4770      	bx	lr
 8010126:	b510      	push	{r4, lr}
 8010128:	f811 4b01 	ldrb.w	r4, [r1], #1
 801012c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010130:	4291      	cmp	r1, r2
 8010132:	d1f9      	bne.n	8010128 <memcpy+0xe>
 8010134:	bd10      	pop	{r4, pc}

08010136 <quorem>:
 8010136:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801013a:	6903      	ldr	r3, [r0, #16]
 801013c:	690c      	ldr	r4, [r1, #16]
 801013e:	42a3      	cmp	r3, r4
 8010140:	4607      	mov	r7, r0
 8010142:	db7e      	blt.n	8010242 <quorem+0x10c>
 8010144:	3c01      	subs	r4, #1
 8010146:	f101 0814 	add.w	r8, r1, #20
 801014a:	00a3      	lsls	r3, r4, #2
 801014c:	f100 0514 	add.w	r5, r0, #20
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010156:	9301      	str	r3, [sp, #4]
 8010158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801015c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010160:	3301      	adds	r3, #1
 8010162:	429a      	cmp	r2, r3
 8010164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010168:	fbb2 f6f3 	udiv	r6, r2, r3
 801016c:	d32e      	bcc.n	80101cc <quorem+0x96>
 801016e:	f04f 0a00 	mov.w	sl, #0
 8010172:	46c4      	mov	ip, r8
 8010174:	46ae      	mov	lr, r5
 8010176:	46d3      	mov	fp, sl
 8010178:	f85c 3b04 	ldr.w	r3, [ip], #4
 801017c:	b298      	uxth	r0, r3
 801017e:	fb06 a000 	mla	r0, r6, r0, sl
 8010182:	0c02      	lsrs	r2, r0, #16
 8010184:	0c1b      	lsrs	r3, r3, #16
 8010186:	fb06 2303 	mla	r3, r6, r3, r2
 801018a:	f8de 2000 	ldr.w	r2, [lr]
 801018e:	b280      	uxth	r0, r0
 8010190:	b292      	uxth	r2, r2
 8010192:	1a12      	subs	r2, r2, r0
 8010194:	445a      	add	r2, fp
 8010196:	f8de 0000 	ldr.w	r0, [lr]
 801019a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801019e:	b29b      	uxth	r3, r3
 80101a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80101a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80101a8:	b292      	uxth	r2, r2
 80101aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80101ae:	45e1      	cmp	r9, ip
 80101b0:	f84e 2b04 	str.w	r2, [lr], #4
 80101b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80101b8:	d2de      	bcs.n	8010178 <quorem+0x42>
 80101ba:	9b00      	ldr	r3, [sp, #0]
 80101bc:	58eb      	ldr	r3, [r5, r3]
 80101be:	b92b      	cbnz	r3, 80101cc <quorem+0x96>
 80101c0:	9b01      	ldr	r3, [sp, #4]
 80101c2:	3b04      	subs	r3, #4
 80101c4:	429d      	cmp	r5, r3
 80101c6:	461a      	mov	r2, r3
 80101c8:	d32f      	bcc.n	801022a <quorem+0xf4>
 80101ca:	613c      	str	r4, [r7, #16]
 80101cc:	4638      	mov	r0, r7
 80101ce:	f001 fb7d 	bl	80118cc <__mcmp>
 80101d2:	2800      	cmp	r0, #0
 80101d4:	db25      	blt.n	8010222 <quorem+0xec>
 80101d6:	4629      	mov	r1, r5
 80101d8:	2000      	movs	r0, #0
 80101da:	f858 2b04 	ldr.w	r2, [r8], #4
 80101de:	f8d1 c000 	ldr.w	ip, [r1]
 80101e2:	fa1f fe82 	uxth.w	lr, r2
 80101e6:	fa1f f38c 	uxth.w	r3, ip
 80101ea:	eba3 030e 	sub.w	r3, r3, lr
 80101ee:	4403      	add	r3, r0
 80101f0:	0c12      	lsrs	r2, r2, #16
 80101f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80101f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010200:	45c1      	cmp	r9, r8
 8010202:	f841 3b04 	str.w	r3, [r1], #4
 8010206:	ea4f 4022 	mov.w	r0, r2, asr #16
 801020a:	d2e6      	bcs.n	80101da <quorem+0xa4>
 801020c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010214:	b922      	cbnz	r2, 8010220 <quorem+0xea>
 8010216:	3b04      	subs	r3, #4
 8010218:	429d      	cmp	r5, r3
 801021a:	461a      	mov	r2, r3
 801021c:	d30b      	bcc.n	8010236 <quorem+0x100>
 801021e:	613c      	str	r4, [r7, #16]
 8010220:	3601      	adds	r6, #1
 8010222:	4630      	mov	r0, r6
 8010224:	b003      	add	sp, #12
 8010226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022a:	6812      	ldr	r2, [r2, #0]
 801022c:	3b04      	subs	r3, #4
 801022e:	2a00      	cmp	r2, #0
 8010230:	d1cb      	bne.n	80101ca <quorem+0x94>
 8010232:	3c01      	subs	r4, #1
 8010234:	e7c6      	b.n	80101c4 <quorem+0x8e>
 8010236:	6812      	ldr	r2, [r2, #0]
 8010238:	3b04      	subs	r3, #4
 801023a:	2a00      	cmp	r2, #0
 801023c:	d1ef      	bne.n	801021e <quorem+0xe8>
 801023e:	3c01      	subs	r4, #1
 8010240:	e7ea      	b.n	8010218 <quorem+0xe2>
 8010242:	2000      	movs	r0, #0
 8010244:	e7ee      	b.n	8010224 <quorem+0xee>
	...

08010248 <_dtoa_r>:
 8010248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	69c7      	ldr	r7, [r0, #28]
 801024e:	b099      	sub	sp, #100	@ 0x64
 8010250:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010254:	ec55 4b10 	vmov	r4, r5, d0
 8010258:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801025a:	9109      	str	r1, [sp, #36]	@ 0x24
 801025c:	4683      	mov	fp, r0
 801025e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010260:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010262:	b97f      	cbnz	r7, 8010284 <_dtoa_r+0x3c>
 8010264:	2010      	movs	r0, #16
 8010266:	f000 ff55 	bl	8011114 <malloc>
 801026a:	4602      	mov	r2, r0
 801026c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010270:	b920      	cbnz	r0, 801027c <_dtoa_r+0x34>
 8010272:	4ba7      	ldr	r3, [pc, #668]	@ (8010510 <_dtoa_r+0x2c8>)
 8010274:	21ef      	movs	r1, #239	@ 0xef
 8010276:	48a7      	ldr	r0, [pc, #668]	@ (8010514 <_dtoa_r+0x2cc>)
 8010278:	f001 fd12 	bl	8011ca0 <__assert_func>
 801027c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010280:	6007      	str	r7, [r0, #0]
 8010282:	60c7      	str	r7, [r0, #12]
 8010284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010288:	6819      	ldr	r1, [r3, #0]
 801028a:	b159      	cbz	r1, 80102a4 <_dtoa_r+0x5c>
 801028c:	685a      	ldr	r2, [r3, #4]
 801028e:	604a      	str	r2, [r1, #4]
 8010290:	2301      	movs	r3, #1
 8010292:	4093      	lsls	r3, r2
 8010294:	608b      	str	r3, [r1, #8]
 8010296:	4658      	mov	r0, fp
 8010298:	f001 f8de 	bl	8011458 <_Bfree>
 801029c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80102a0:	2200      	movs	r2, #0
 80102a2:	601a      	str	r2, [r3, #0]
 80102a4:	1e2b      	subs	r3, r5, #0
 80102a6:	bfb9      	ittee	lt
 80102a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80102ac:	9303      	strlt	r3, [sp, #12]
 80102ae:	2300      	movge	r3, #0
 80102b0:	6033      	strge	r3, [r6, #0]
 80102b2:	9f03      	ldr	r7, [sp, #12]
 80102b4:	4b98      	ldr	r3, [pc, #608]	@ (8010518 <_dtoa_r+0x2d0>)
 80102b6:	bfbc      	itt	lt
 80102b8:	2201      	movlt	r2, #1
 80102ba:	6032      	strlt	r2, [r6, #0]
 80102bc:	43bb      	bics	r3, r7
 80102be:	d112      	bne.n	80102e6 <_dtoa_r+0x9e>
 80102c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80102c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80102c6:	6013      	str	r3, [r2, #0]
 80102c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102cc:	4323      	orrs	r3, r4
 80102ce:	f000 854d 	beq.w	8010d6c <_dtoa_r+0xb24>
 80102d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801052c <_dtoa_r+0x2e4>
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 854f 	beq.w	8010d7c <_dtoa_r+0xb34>
 80102de:	f10a 0303 	add.w	r3, sl, #3
 80102e2:	f000 bd49 	b.w	8010d78 <_dtoa_r+0xb30>
 80102e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102ea:	2200      	movs	r2, #0
 80102ec:	ec51 0b17 	vmov	r0, r1, d7
 80102f0:	2300      	movs	r3, #0
 80102f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80102f6:	f7f0 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80102fa:	4680      	mov	r8, r0
 80102fc:	b158      	cbz	r0, 8010316 <_dtoa_r+0xce>
 80102fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010300:	2301      	movs	r3, #1
 8010302:	6013      	str	r3, [r2, #0]
 8010304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010306:	b113      	cbz	r3, 801030e <_dtoa_r+0xc6>
 8010308:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801030a:	4b84      	ldr	r3, [pc, #528]	@ (801051c <_dtoa_r+0x2d4>)
 801030c:	6013      	str	r3, [r2, #0]
 801030e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010530 <_dtoa_r+0x2e8>
 8010312:	f000 bd33 	b.w	8010d7c <_dtoa_r+0xb34>
 8010316:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801031a:	aa16      	add	r2, sp, #88	@ 0x58
 801031c:	a917      	add	r1, sp, #92	@ 0x5c
 801031e:	4658      	mov	r0, fp
 8010320:	f001 fb84 	bl	8011a2c <__d2b>
 8010324:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010328:	4681      	mov	r9, r0
 801032a:	2e00      	cmp	r6, #0
 801032c:	d077      	beq.n	801041e <_dtoa_r+0x1d6>
 801032e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010330:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801033c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010340:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010344:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010348:	4619      	mov	r1, r3
 801034a:	2200      	movs	r2, #0
 801034c:	4b74      	ldr	r3, [pc, #464]	@ (8010520 <_dtoa_r+0x2d8>)
 801034e:	f7ef ff9b 	bl	8000288 <__aeabi_dsub>
 8010352:	a369      	add	r3, pc, #420	@ (adr r3, 80104f8 <_dtoa_r+0x2b0>)
 8010354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010358:	f7f0 f94e 	bl	80005f8 <__aeabi_dmul>
 801035c:	a368      	add	r3, pc, #416	@ (adr r3, 8010500 <_dtoa_r+0x2b8>)
 801035e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010362:	f7ef ff93 	bl	800028c <__adddf3>
 8010366:	4604      	mov	r4, r0
 8010368:	4630      	mov	r0, r6
 801036a:	460d      	mov	r5, r1
 801036c:	f7f0 f8da 	bl	8000524 <__aeabi_i2d>
 8010370:	a365      	add	r3, pc, #404	@ (adr r3, 8010508 <_dtoa_r+0x2c0>)
 8010372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010376:	f7f0 f93f 	bl	80005f8 <__aeabi_dmul>
 801037a:	4602      	mov	r2, r0
 801037c:	460b      	mov	r3, r1
 801037e:	4620      	mov	r0, r4
 8010380:	4629      	mov	r1, r5
 8010382:	f7ef ff83 	bl	800028c <__adddf3>
 8010386:	4604      	mov	r4, r0
 8010388:	460d      	mov	r5, r1
 801038a:	f7f0 fbe5 	bl	8000b58 <__aeabi_d2iz>
 801038e:	2200      	movs	r2, #0
 8010390:	4607      	mov	r7, r0
 8010392:	2300      	movs	r3, #0
 8010394:	4620      	mov	r0, r4
 8010396:	4629      	mov	r1, r5
 8010398:	f7f0 fba0 	bl	8000adc <__aeabi_dcmplt>
 801039c:	b140      	cbz	r0, 80103b0 <_dtoa_r+0x168>
 801039e:	4638      	mov	r0, r7
 80103a0:	f7f0 f8c0 	bl	8000524 <__aeabi_i2d>
 80103a4:	4622      	mov	r2, r4
 80103a6:	462b      	mov	r3, r5
 80103a8:	f7f0 fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80103ac:	b900      	cbnz	r0, 80103b0 <_dtoa_r+0x168>
 80103ae:	3f01      	subs	r7, #1
 80103b0:	2f16      	cmp	r7, #22
 80103b2:	d851      	bhi.n	8010458 <_dtoa_r+0x210>
 80103b4:	4b5b      	ldr	r3, [pc, #364]	@ (8010524 <_dtoa_r+0x2dc>)
 80103b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103c2:	f7f0 fb8b 	bl	8000adc <__aeabi_dcmplt>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d048      	beq.n	801045c <_dtoa_r+0x214>
 80103ca:	3f01      	subs	r7, #1
 80103cc:	2300      	movs	r3, #0
 80103ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80103d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80103d2:	1b9b      	subs	r3, r3, r6
 80103d4:	1e5a      	subs	r2, r3, #1
 80103d6:	bf44      	itt	mi
 80103d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80103dc:	2300      	movmi	r3, #0
 80103de:	9208      	str	r2, [sp, #32]
 80103e0:	bf54      	ite	pl
 80103e2:	f04f 0800 	movpl.w	r8, #0
 80103e6:	9308      	strmi	r3, [sp, #32]
 80103e8:	2f00      	cmp	r7, #0
 80103ea:	db39      	blt.n	8010460 <_dtoa_r+0x218>
 80103ec:	9b08      	ldr	r3, [sp, #32]
 80103ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80103f0:	443b      	add	r3, r7
 80103f2:	9308      	str	r3, [sp, #32]
 80103f4:	2300      	movs	r3, #0
 80103f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80103f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103fa:	2b09      	cmp	r3, #9
 80103fc:	d864      	bhi.n	80104c8 <_dtoa_r+0x280>
 80103fe:	2b05      	cmp	r3, #5
 8010400:	bfc4      	itt	gt
 8010402:	3b04      	subgt	r3, #4
 8010404:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010408:	f1a3 0302 	sub.w	r3, r3, #2
 801040c:	bfcc      	ite	gt
 801040e:	2400      	movgt	r4, #0
 8010410:	2401      	movle	r4, #1
 8010412:	2b03      	cmp	r3, #3
 8010414:	d863      	bhi.n	80104de <_dtoa_r+0x296>
 8010416:	e8df f003 	tbb	[pc, r3]
 801041a:	372a      	.short	0x372a
 801041c:	5535      	.short	0x5535
 801041e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010422:	441e      	add	r6, r3
 8010424:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010428:	2b20      	cmp	r3, #32
 801042a:	bfc1      	itttt	gt
 801042c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010430:	409f      	lslgt	r7, r3
 8010432:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010436:	fa24 f303 	lsrgt.w	r3, r4, r3
 801043a:	bfd6      	itet	le
 801043c:	f1c3 0320 	rsble	r3, r3, #32
 8010440:	ea47 0003 	orrgt.w	r0, r7, r3
 8010444:	fa04 f003 	lslle.w	r0, r4, r3
 8010448:	f7f0 f85c 	bl	8000504 <__aeabi_ui2d>
 801044c:	2201      	movs	r2, #1
 801044e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010452:	3e01      	subs	r6, #1
 8010454:	9214      	str	r2, [sp, #80]	@ 0x50
 8010456:	e777      	b.n	8010348 <_dtoa_r+0x100>
 8010458:	2301      	movs	r3, #1
 801045a:	e7b8      	b.n	80103ce <_dtoa_r+0x186>
 801045c:	9012      	str	r0, [sp, #72]	@ 0x48
 801045e:	e7b7      	b.n	80103d0 <_dtoa_r+0x188>
 8010460:	427b      	negs	r3, r7
 8010462:	930a      	str	r3, [sp, #40]	@ 0x28
 8010464:	2300      	movs	r3, #0
 8010466:	eba8 0807 	sub.w	r8, r8, r7
 801046a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801046c:	e7c4      	b.n	80103f8 <_dtoa_r+0x1b0>
 801046e:	2300      	movs	r3, #0
 8010470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010474:	2b00      	cmp	r3, #0
 8010476:	dc35      	bgt.n	80104e4 <_dtoa_r+0x29c>
 8010478:	2301      	movs	r3, #1
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	9307      	str	r3, [sp, #28]
 801047e:	461a      	mov	r2, r3
 8010480:	920e      	str	r2, [sp, #56]	@ 0x38
 8010482:	e00b      	b.n	801049c <_dtoa_r+0x254>
 8010484:	2301      	movs	r3, #1
 8010486:	e7f3      	b.n	8010470 <_dtoa_r+0x228>
 8010488:	2300      	movs	r3, #0
 801048a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801048c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801048e:	18fb      	adds	r3, r7, r3
 8010490:	9300      	str	r3, [sp, #0]
 8010492:	3301      	adds	r3, #1
 8010494:	2b01      	cmp	r3, #1
 8010496:	9307      	str	r3, [sp, #28]
 8010498:	bfb8      	it	lt
 801049a:	2301      	movlt	r3, #1
 801049c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80104a0:	2100      	movs	r1, #0
 80104a2:	2204      	movs	r2, #4
 80104a4:	f102 0514 	add.w	r5, r2, #20
 80104a8:	429d      	cmp	r5, r3
 80104aa:	d91f      	bls.n	80104ec <_dtoa_r+0x2a4>
 80104ac:	6041      	str	r1, [r0, #4]
 80104ae:	4658      	mov	r0, fp
 80104b0:	f000 ff92 	bl	80113d8 <_Balloc>
 80104b4:	4682      	mov	sl, r0
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d13c      	bne.n	8010534 <_dtoa_r+0x2ec>
 80104ba:	4b1b      	ldr	r3, [pc, #108]	@ (8010528 <_dtoa_r+0x2e0>)
 80104bc:	4602      	mov	r2, r0
 80104be:	f240 11af 	movw	r1, #431	@ 0x1af
 80104c2:	e6d8      	b.n	8010276 <_dtoa_r+0x2e>
 80104c4:	2301      	movs	r3, #1
 80104c6:	e7e0      	b.n	801048a <_dtoa_r+0x242>
 80104c8:	2401      	movs	r4, #1
 80104ca:	2300      	movs	r3, #0
 80104cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80104ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80104d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	9307      	str	r3, [sp, #28]
 80104d8:	2200      	movs	r2, #0
 80104da:	2312      	movs	r3, #18
 80104dc:	e7d0      	b.n	8010480 <_dtoa_r+0x238>
 80104de:	2301      	movs	r3, #1
 80104e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104e2:	e7f5      	b.n	80104d0 <_dtoa_r+0x288>
 80104e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	9307      	str	r3, [sp, #28]
 80104ea:	e7d7      	b.n	801049c <_dtoa_r+0x254>
 80104ec:	3101      	adds	r1, #1
 80104ee:	0052      	lsls	r2, r2, #1
 80104f0:	e7d8      	b.n	80104a4 <_dtoa_r+0x25c>
 80104f2:	bf00      	nop
 80104f4:	f3af 8000 	nop.w
 80104f8:	636f4361 	.word	0x636f4361
 80104fc:	3fd287a7 	.word	0x3fd287a7
 8010500:	8b60c8b3 	.word	0x8b60c8b3
 8010504:	3fc68a28 	.word	0x3fc68a28
 8010508:	509f79fb 	.word	0x509f79fb
 801050c:	3fd34413 	.word	0x3fd34413
 8010510:	080125b5 	.word	0x080125b5
 8010514:	080125cc 	.word	0x080125cc
 8010518:	7ff00000 	.word	0x7ff00000
 801051c:	08012585 	.word	0x08012585
 8010520:	3ff80000 	.word	0x3ff80000
 8010524:	080126d8 	.word	0x080126d8
 8010528:	08012624 	.word	0x08012624
 801052c:	080125b1 	.word	0x080125b1
 8010530:	08012584 	.word	0x08012584
 8010534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010538:	6018      	str	r0, [r3, #0]
 801053a:	9b07      	ldr	r3, [sp, #28]
 801053c:	2b0e      	cmp	r3, #14
 801053e:	f200 80a4 	bhi.w	801068a <_dtoa_r+0x442>
 8010542:	2c00      	cmp	r4, #0
 8010544:	f000 80a1 	beq.w	801068a <_dtoa_r+0x442>
 8010548:	2f00      	cmp	r7, #0
 801054a:	dd33      	ble.n	80105b4 <_dtoa_r+0x36c>
 801054c:	4bad      	ldr	r3, [pc, #692]	@ (8010804 <_dtoa_r+0x5bc>)
 801054e:	f007 020f 	and.w	r2, r7, #15
 8010552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010556:	ed93 7b00 	vldr	d7, [r3]
 801055a:	05f8      	lsls	r0, r7, #23
 801055c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010560:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010564:	d516      	bpl.n	8010594 <_dtoa_r+0x34c>
 8010566:	4ba8      	ldr	r3, [pc, #672]	@ (8010808 <_dtoa_r+0x5c0>)
 8010568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801056c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010570:	f7f0 f96c 	bl	800084c <__aeabi_ddiv>
 8010574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010578:	f004 040f 	and.w	r4, r4, #15
 801057c:	2603      	movs	r6, #3
 801057e:	4da2      	ldr	r5, [pc, #648]	@ (8010808 <_dtoa_r+0x5c0>)
 8010580:	b954      	cbnz	r4, 8010598 <_dtoa_r+0x350>
 8010582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801058a:	f7f0 f95f 	bl	800084c <__aeabi_ddiv>
 801058e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010592:	e028      	b.n	80105e6 <_dtoa_r+0x39e>
 8010594:	2602      	movs	r6, #2
 8010596:	e7f2      	b.n	801057e <_dtoa_r+0x336>
 8010598:	07e1      	lsls	r1, r4, #31
 801059a:	d508      	bpl.n	80105ae <_dtoa_r+0x366>
 801059c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105a4:	f7f0 f828 	bl	80005f8 <__aeabi_dmul>
 80105a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105ac:	3601      	adds	r6, #1
 80105ae:	1064      	asrs	r4, r4, #1
 80105b0:	3508      	adds	r5, #8
 80105b2:	e7e5      	b.n	8010580 <_dtoa_r+0x338>
 80105b4:	f000 80d2 	beq.w	801075c <_dtoa_r+0x514>
 80105b8:	427c      	negs	r4, r7
 80105ba:	4b92      	ldr	r3, [pc, #584]	@ (8010804 <_dtoa_r+0x5bc>)
 80105bc:	4d92      	ldr	r5, [pc, #584]	@ (8010808 <_dtoa_r+0x5c0>)
 80105be:	f004 020f 	and.w	r2, r4, #15
 80105c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105ce:	f7f0 f813 	bl	80005f8 <__aeabi_dmul>
 80105d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105d6:	1124      	asrs	r4, r4, #4
 80105d8:	2300      	movs	r3, #0
 80105da:	2602      	movs	r6, #2
 80105dc:	2c00      	cmp	r4, #0
 80105de:	f040 80b2 	bne.w	8010746 <_dtoa_r+0x4fe>
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d1d3      	bne.n	801058e <_dtoa_r+0x346>
 80105e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80105e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	f000 80b7 	beq.w	8010760 <_dtoa_r+0x518>
 80105f2:	4b86      	ldr	r3, [pc, #536]	@ (801080c <_dtoa_r+0x5c4>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	4620      	mov	r0, r4
 80105f8:	4629      	mov	r1, r5
 80105fa:	f7f0 fa6f 	bl	8000adc <__aeabi_dcmplt>
 80105fe:	2800      	cmp	r0, #0
 8010600:	f000 80ae 	beq.w	8010760 <_dtoa_r+0x518>
 8010604:	9b07      	ldr	r3, [sp, #28]
 8010606:	2b00      	cmp	r3, #0
 8010608:	f000 80aa 	beq.w	8010760 <_dtoa_r+0x518>
 801060c:	9b00      	ldr	r3, [sp, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	dd37      	ble.n	8010682 <_dtoa_r+0x43a>
 8010612:	1e7b      	subs	r3, r7, #1
 8010614:	9304      	str	r3, [sp, #16]
 8010616:	4620      	mov	r0, r4
 8010618:	4b7d      	ldr	r3, [pc, #500]	@ (8010810 <_dtoa_r+0x5c8>)
 801061a:	2200      	movs	r2, #0
 801061c:	4629      	mov	r1, r5
 801061e:	f7ef ffeb 	bl	80005f8 <__aeabi_dmul>
 8010622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010626:	9c00      	ldr	r4, [sp, #0]
 8010628:	3601      	adds	r6, #1
 801062a:	4630      	mov	r0, r6
 801062c:	f7ef ff7a 	bl	8000524 <__aeabi_i2d>
 8010630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010634:	f7ef ffe0 	bl	80005f8 <__aeabi_dmul>
 8010638:	4b76      	ldr	r3, [pc, #472]	@ (8010814 <_dtoa_r+0x5cc>)
 801063a:	2200      	movs	r2, #0
 801063c:	f7ef fe26 	bl	800028c <__adddf3>
 8010640:	4605      	mov	r5, r0
 8010642:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010646:	2c00      	cmp	r4, #0
 8010648:	f040 808d 	bne.w	8010766 <_dtoa_r+0x51e>
 801064c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010650:	4b71      	ldr	r3, [pc, #452]	@ (8010818 <_dtoa_r+0x5d0>)
 8010652:	2200      	movs	r2, #0
 8010654:	f7ef fe18 	bl	8000288 <__aeabi_dsub>
 8010658:	4602      	mov	r2, r0
 801065a:	460b      	mov	r3, r1
 801065c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010660:	462a      	mov	r2, r5
 8010662:	4633      	mov	r3, r6
 8010664:	f7f0 fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8010668:	2800      	cmp	r0, #0
 801066a:	f040 828b 	bne.w	8010b84 <_dtoa_r+0x93c>
 801066e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010672:	462a      	mov	r2, r5
 8010674:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010678:	f7f0 fa30 	bl	8000adc <__aeabi_dcmplt>
 801067c:	2800      	cmp	r0, #0
 801067e:	f040 8128 	bne.w	80108d2 <_dtoa_r+0x68a>
 8010682:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010686:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801068a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801068c:	2b00      	cmp	r3, #0
 801068e:	f2c0 815a 	blt.w	8010946 <_dtoa_r+0x6fe>
 8010692:	2f0e      	cmp	r7, #14
 8010694:	f300 8157 	bgt.w	8010946 <_dtoa_r+0x6fe>
 8010698:	4b5a      	ldr	r3, [pc, #360]	@ (8010804 <_dtoa_r+0x5bc>)
 801069a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801069e:	ed93 7b00 	vldr	d7, [r3]
 80106a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	ed8d 7b00 	vstr	d7, [sp]
 80106aa:	da03      	bge.n	80106b4 <_dtoa_r+0x46c>
 80106ac:	9b07      	ldr	r3, [sp, #28]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f340 8101 	ble.w	80108b6 <_dtoa_r+0x66e>
 80106b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80106b8:	4656      	mov	r6, sl
 80106ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106be:	4620      	mov	r0, r4
 80106c0:	4629      	mov	r1, r5
 80106c2:	f7f0 f8c3 	bl	800084c <__aeabi_ddiv>
 80106c6:	f7f0 fa47 	bl	8000b58 <__aeabi_d2iz>
 80106ca:	4680      	mov	r8, r0
 80106cc:	f7ef ff2a 	bl	8000524 <__aeabi_i2d>
 80106d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106d4:	f7ef ff90 	bl	80005f8 <__aeabi_dmul>
 80106d8:	4602      	mov	r2, r0
 80106da:	460b      	mov	r3, r1
 80106dc:	4620      	mov	r0, r4
 80106de:	4629      	mov	r1, r5
 80106e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80106e4:	f7ef fdd0 	bl	8000288 <__aeabi_dsub>
 80106e8:	f806 4b01 	strb.w	r4, [r6], #1
 80106ec:	9d07      	ldr	r5, [sp, #28]
 80106ee:	eba6 040a 	sub.w	r4, r6, sl
 80106f2:	42a5      	cmp	r5, r4
 80106f4:	4602      	mov	r2, r0
 80106f6:	460b      	mov	r3, r1
 80106f8:	f040 8117 	bne.w	801092a <_dtoa_r+0x6e2>
 80106fc:	f7ef fdc6 	bl	800028c <__adddf3>
 8010700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010704:	4604      	mov	r4, r0
 8010706:	460d      	mov	r5, r1
 8010708:	f7f0 fa06 	bl	8000b18 <__aeabi_dcmpgt>
 801070c:	2800      	cmp	r0, #0
 801070e:	f040 80f9 	bne.w	8010904 <_dtoa_r+0x6bc>
 8010712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010716:	4620      	mov	r0, r4
 8010718:	4629      	mov	r1, r5
 801071a:	f7f0 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 801071e:	b118      	cbz	r0, 8010728 <_dtoa_r+0x4e0>
 8010720:	f018 0f01 	tst.w	r8, #1
 8010724:	f040 80ee 	bne.w	8010904 <_dtoa_r+0x6bc>
 8010728:	4649      	mov	r1, r9
 801072a:	4658      	mov	r0, fp
 801072c:	f000 fe94 	bl	8011458 <_Bfree>
 8010730:	2300      	movs	r3, #0
 8010732:	7033      	strb	r3, [r6, #0]
 8010734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010736:	3701      	adds	r7, #1
 8010738:	601f      	str	r7, [r3, #0]
 801073a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801073c:	2b00      	cmp	r3, #0
 801073e:	f000 831d 	beq.w	8010d7c <_dtoa_r+0xb34>
 8010742:	601e      	str	r6, [r3, #0]
 8010744:	e31a      	b.n	8010d7c <_dtoa_r+0xb34>
 8010746:	07e2      	lsls	r2, r4, #31
 8010748:	d505      	bpl.n	8010756 <_dtoa_r+0x50e>
 801074a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801074e:	f7ef ff53 	bl	80005f8 <__aeabi_dmul>
 8010752:	3601      	adds	r6, #1
 8010754:	2301      	movs	r3, #1
 8010756:	1064      	asrs	r4, r4, #1
 8010758:	3508      	adds	r5, #8
 801075a:	e73f      	b.n	80105dc <_dtoa_r+0x394>
 801075c:	2602      	movs	r6, #2
 801075e:	e742      	b.n	80105e6 <_dtoa_r+0x39e>
 8010760:	9c07      	ldr	r4, [sp, #28]
 8010762:	9704      	str	r7, [sp, #16]
 8010764:	e761      	b.n	801062a <_dtoa_r+0x3e2>
 8010766:	4b27      	ldr	r3, [pc, #156]	@ (8010804 <_dtoa_r+0x5bc>)
 8010768:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801076a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801076e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010772:	4454      	add	r4, sl
 8010774:	2900      	cmp	r1, #0
 8010776:	d053      	beq.n	8010820 <_dtoa_r+0x5d8>
 8010778:	4928      	ldr	r1, [pc, #160]	@ (801081c <_dtoa_r+0x5d4>)
 801077a:	2000      	movs	r0, #0
 801077c:	f7f0 f866 	bl	800084c <__aeabi_ddiv>
 8010780:	4633      	mov	r3, r6
 8010782:	462a      	mov	r2, r5
 8010784:	f7ef fd80 	bl	8000288 <__aeabi_dsub>
 8010788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801078c:	4656      	mov	r6, sl
 801078e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010792:	f7f0 f9e1 	bl	8000b58 <__aeabi_d2iz>
 8010796:	4605      	mov	r5, r0
 8010798:	f7ef fec4 	bl	8000524 <__aeabi_i2d>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107a4:	f7ef fd70 	bl	8000288 <__aeabi_dsub>
 80107a8:	3530      	adds	r5, #48	@ 0x30
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107b2:	f806 5b01 	strb.w	r5, [r6], #1
 80107b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107ba:	f7f0 f98f 	bl	8000adc <__aeabi_dcmplt>
 80107be:	2800      	cmp	r0, #0
 80107c0:	d171      	bne.n	80108a6 <_dtoa_r+0x65e>
 80107c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107c6:	4911      	ldr	r1, [pc, #68]	@ (801080c <_dtoa_r+0x5c4>)
 80107c8:	2000      	movs	r0, #0
 80107ca:	f7ef fd5d 	bl	8000288 <__aeabi_dsub>
 80107ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107d2:	f7f0 f983 	bl	8000adc <__aeabi_dcmplt>
 80107d6:	2800      	cmp	r0, #0
 80107d8:	f040 8095 	bne.w	8010906 <_dtoa_r+0x6be>
 80107dc:	42a6      	cmp	r6, r4
 80107de:	f43f af50 	beq.w	8010682 <_dtoa_r+0x43a>
 80107e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010810 <_dtoa_r+0x5c8>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	f7ef ff05 	bl	80005f8 <__aeabi_dmul>
 80107ee:	4b08      	ldr	r3, [pc, #32]	@ (8010810 <_dtoa_r+0x5c8>)
 80107f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107f4:	2200      	movs	r2, #0
 80107f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107fa:	f7ef fefd 	bl	80005f8 <__aeabi_dmul>
 80107fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010802:	e7c4      	b.n	801078e <_dtoa_r+0x546>
 8010804:	080126d8 	.word	0x080126d8
 8010808:	080126b0 	.word	0x080126b0
 801080c:	3ff00000 	.word	0x3ff00000
 8010810:	40240000 	.word	0x40240000
 8010814:	401c0000 	.word	0x401c0000
 8010818:	40140000 	.word	0x40140000
 801081c:	3fe00000 	.word	0x3fe00000
 8010820:	4631      	mov	r1, r6
 8010822:	4628      	mov	r0, r5
 8010824:	f7ef fee8 	bl	80005f8 <__aeabi_dmul>
 8010828:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801082c:	9415      	str	r4, [sp, #84]	@ 0x54
 801082e:	4656      	mov	r6, sl
 8010830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010834:	f7f0 f990 	bl	8000b58 <__aeabi_d2iz>
 8010838:	4605      	mov	r5, r0
 801083a:	f7ef fe73 	bl	8000524 <__aeabi_i2d>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010846:	f7ef fd1f 	bl	8000288 <__aeabi_dsub>
 801084a:	3530      	adds	r5, #48	@ 0x30
 801084c:	f806 5b01 	strb.w	r5, [r6], #1
 8010850:	4602      	mov	r2, r0
 8010852:	460b      	mov	r3, r1
 8010854:	42a6      	cmp	r6, r4
 8010856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801085a:	f04f 0200 	mov.w	r2, #0
 801085e:	d124      	bne.n	80108aa <_dtoa_r+0x662>
 8010860:	4bac      	ldr	r3, [pc, #688]	@ (8010b14 <_dtoa_r+0x8cc>)
 8010862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010866:	f7ef fd11 	bl	800028c <__adddf3>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010872:	f7f0 f951 	bl	8000b18 <__aeabi_dcmpgt>
 8010876:	2800      	cmp	r0, #0
 8010878:	d145      	bne.n	8010906 <_dtoa_r+0x6be>
 801087a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801087e:	49a5      	ldr	r1, [pc, #660]	@ (8010b14 <_dtoa_r+0x8cc>)
 8010880:	2000      	movs	r0, #0
 8010882:	f7ef fd01 	bl	8000288 <__aeabi_dsub>
 8010886:	4602      	mov	r2, r0
 8010888:	460b      	mov	r3, r1
 801088a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801088e:	f7f0 f925 	bl	8000adc <__aeabi_dcmplt>
 8010892:	2800      	cmp	r0, #0
 8010894:	f43f aef5 	beq.w	8010682 <_dtoa_r+0x43a>
 8010898:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801089a:	1e73      	subs	r3, r6, #1
 801089c:	9315      	str	r3, [sp, #84]	@ 0x54
 801089e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80108a2:	2b30      	cmp	r3, #48	@ 0x30
 80108a4:	d0f8      	beq.n	8010898 <_dtoa_r+0x650>
 80108a6:	9f04      	ldr	r7, [sp, #16]
 80108a8:	e73e      	b.n	8010728 <_dtoa_r+0x4e0>
 80108aa:	4b9b      	ldr	r3, [pc, #620]	@ (8010b18 <_dtoa_r+0x8d0>)
 80108ac:	f7ef fea4 	bl	80005f8 <__aeabi_dmul>
 80108b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108b4:	e7bc      	b.n	8010830 <_dtoa_r+0x5e8>
 80108b6:	d10c      	bne.n	80108d2 <_dtoa_r+0x68a>
 80108b8:	4b98      	ldr	r3, [pc, #608]	@ (8010b1c <_dtoa_r+0x8d4>)
 80108ba:	2200      	movs	r2, #0
 80108bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108c0:	f7ef fe9a 	bl	80005f8 <__aeabi_dmul>
 80108c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108c8:	f7f0 f91c 	bl	8000b04 <__aeabi_dcmpge>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	f000 8157 	beq.w	8010b80 <_dtoa_r+0x938>
 80108d2:	2400      	movs	r4, #0
 80108d4:	4625      	mov	r5, r4
 80108d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108d8:	43db      	mvns	r3, r3
 80108da:	9304      	str	r3, [sp, #16]
 80108dc:	4656      	mov	r6, sl
 80108de:	2700      	movs	r7, #0
 80108e0:	4621      	mov	r1, r4
 80108e2:	4658      	mov	r0, fp
 80108e4:	f000 fdb8 	bl	8011458 <_Bfree>
 80108e8:	2d00      	cmp	r5, #0
 80108ea:	d0dc      	beq.n	80108a6 <_dtoa_r+0x65e>
 80108ec:	b12f      	cbz	r7, 80108fa <_dtoa_r+0x6b2>
 80108ee:	42af      	cmp	r7, r5
 80108f0:	d003      	beq.n	80108fa <_dtoa_r+0x6b2>
 80108f2:	4639      	mov	r1, r7
 80108f4:	4658      	mov	r0, fp
 80108f6:	f000 fdaf 	bl	8011458 <_Bfree>
 80108fa:	4629      	mov	r1, r5
 80108fc:	4658      	mov	r0, fp
 80108fe:	f000 fdab 	bl	8011458 <_Bfree>
 8010902:	e7d0      	b.n	80108a6 <_dtoa_r+0x65e>
 8010904:	9704      	str	r7, [sp, #16]
 8010906:	4633      	mov	r3, r6
 8010908:	461e      	mov	r6, r3
 801090a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801090e:	2a39      	cmp	r2, #57	@ 0x39
 8010910:	d107      	bne.n	8010922 <_dtoa_r+0x6da>
 8010912:	459a      	cmp	sl, r3
 8010914:	d1f8      	bne.n	8010908 <_dtoa_r+0x6c0>
 8010916:	9a04      	ldr	r2, [sp, #16]
 8010918:	3201      	adds	r2, #1
 801091a:	9204      	str	r2, [sp, #16]
 801091c:	2230      	movs	r2, #48	@ 0x30
 801091e:	f88a 2000 	strb.w	r2, [sl]
 8010922:	781a      	ldrb	r2, [r3, #0]
 8010924:	3201      	adds	r2, #1
 8010926:	701a      	strb	r2, [r3, #0]
 8010928:	e7bd      	b.n	80108a6 <_dtoa_r+0x65e>
 801092a:	4b7b      	ldr	r3, [pc, #492]	@ (8010b18 <_dtoa_r+0x8d0>)
 801092c:	2200      	movs	r2, #0
 801092e:	f7ef fe63 	bl	80005f8 <__aeabi_dmul>
 8010932:	2200      	movs	r2, #0
 8010934:	2300      	movs	r3, #0
 8010936:	4604      	mov	r4, r0
 8010938:	460d      	mov	r5, r1
 801093a:	f7f0 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 801093e:	2800      	cmp	r0, #0
 8010940:	f43f aebb 	beq.w	80106ba <_dtoa_r+0x472>
 8010944:	e6f0      	b.n	8010728 <_dtoa_r+0x4e0>
 8010946:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010948:	2a00      	cmp	r2, #0
 801094a:	f000 80db 	beq.w	8010b04 <_dtoa_r+0x8bc>
 801094e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010950:	2a01      	cmp	r2, #1
 8010952:	f300 80bf 	bgt.w	8010ad4 <_dtoa_r+0x88c>
 8010956:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010958:	2a00      	cmp	r2, #0
 801095a:	f000 80b7 	beq.w	8010acc <_dtoa_r+0x884>
 801095e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010962:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010964:	4646      	mov	r6, r8
 8010966:	9a08      	ldr	r2, [sp, #32]
 8010968:	2101      	movs	r1, #1
 801096a:	441a      	add	r2, r3
 801096c:	4658      	mov	r0, fp
 801096e:	4498      	add	r8, r3
 8010970:	9208      	str	r2, [sp, #32]
 8010972:	f000 fe25 	bl	80115c0 <__i2b>
 8010976:	4605      	mov	r5, r0
 8010978:	b15e      	cbz	r6, 8010992 <_dtoa_r+0x74a>
 801097a:	9b08      	ldr	r3, [sp, #32]
 801097c:	2b00      	cmp	r3, #0
 801097e:	dd08      	ble.n	8010992 <_dtoa_r+0x74a>
 8010980:	42b3      	cmp	r3, r6
 8010982:	9a08      	ldr	r2, [sp, #32]
 8010984:	bfa8      	it	ge
 8010986:	4633      	movge	r3, r6
 8010988:	eba8 0803 	sub.w	r8, r8, r3
 801098c:	1af6      	subs	r6, r6, r3
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	9308      	str	r3, [sp, #32]
 8010992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010994:	b1f3      	cbz	r3, 80109d4 <_dtoa_r+0x78c>
 8010996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 80b7 	beq.w	8010b0c <_dtoa_r+0x8c4>
 801099e:	b18c      	cbz	r4, 80109c4 <_dtoa_r+0x77c>
 80109a0:	4629      	mov	r1, r5
 80109a2:	4622      	mov	r2, r4
 80109a4:	4658      	mov	r0, fp
 80109a6:	f000 fecb 	bl	8011740 <__pow5mult>
 80109aa:	464a      	mov	r2, r9
 80109ac:	4601      	mov	r1, r0
 80109ae:	4605      	mov	r5, r0
 80109b0:	4658      	mov	r0, fp
 80109b2:	f000 fe1b 	bl	80115ec <__multiply>
 80109b6:	4649      	mov	r1, r9
 80109b8:	9004      	str	r0, [sp, #16]
 80109ba:	4658      	mov	r0, fp
 80109bc:	f000 fd4c 	bl	8011458 <_Bfree>
 80109c0:	9b04      	ldr	r3, [sp, #16]
 80109c2:	4699      	mov	r9, r3
 80109c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109c6:	1b1a      	subs	r2, r3, r4
 80109c8:	d004      	beq.n	80109d4 <_dtoa_r+0x78c>
 80109ca:	4649      	mov	r1, r9
 80109cc:	4658      	mov	r0, fp
 80109ce:	f000 feb7 	bl	8011740 <__pow5mult>
 80109d2:	4681      	mov	r9, r0
 80109d4:	2101      	movs	r1, #1
 80109d6:	4658      	mov	r0, fp
 80109d8:	f000 fdf2 	bl	80115c0 <__i2b>
 80109dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109de:	4604      	mov	r4, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	f000 81cf 	beq.w	8010d84 <_dtoa_r+0xb3c>
 80109e6:	461a      	mov	r2, r3
 80109e8:	4601      	mov	r1, r0
 80109ea:	4658      	mov	r0, fp
 80109ec:	f000 fea8 	bl	8011740 <__pow5mult>
 80109f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	4604      	mov	r4, r0
 80109f6:	f300 8095 	bgt.w	8010b24 <_dtoa_r+0x8dc>
 80109fa:	9b02      	ldr	r3, [sp, #8]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f040 8087 	bne.w	8010b10 <_dtoa_r+0x8c8>
 8010a02:	9b03      	ldr	r3, [sp, #12]
 8010a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	f040 8089 	bne.w	8010b20 <_dtoa_r+0x8d8>
 8010a0e:	9b03      	ldr	r3, [sp, #12]
 8010a10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010a14:	0d1b      	lsrs	r3, r3, #20
 8010a16:	051b      	lsls	r3, r3, #20
 8010a18:	b12b      	cbz	r3, 8010a26 <_dtoa_r+0x7de>
 8010a1a:	9b08      	ldr	r3, [sp, #32]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	9308      	str	r3, [sp, #32]
 8010a20:	f108 0801 	add.w	r8, r8, #1
 8010a24:	2301      	movs	r3, #1
 8010a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 81b0 	beq.w	8010d90 <_dtoa_r+0xb48>
 8010a30:	6923      	ldr	r3, [r4, #16]
 8010a32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a36:	6918      	ldr	r0, [r3, #16]
 8010a38:	f000 fd76 	bl	8011528 <__hi0bits>
 8010a3c:	f1c0 0020 	rsb	r0, r0, #32
 8010a40:	9b08      	ldr	r3, [sp, #32]
 8010a42:	4418      	add	r0, r3
 8010a44:	f010 001f 	ands.w	r0, r0, #31
 8010a48:	d077      	beq.n	8010b3a <_dtoa_r+0x8f2>
 8010a4a:	f1c0 0320 	rsb	r3, r0, #32
 8010a4e:	2b04      	cmp	r3, #4
 8010a50:	dd6b      	ble.n	8010b2a <_dtoa_r+0x8e2>
 8010a52:	9b08      	ldr	r3, [sp, #32]
 8010a54:	f1c0 001c 	rsb	r0, r0, #28
 8010a58:	4403      	add	r3, r0
 8010a5a:	4480      	add	r8, r0
 8010a5c:	4406      	add	r6, r0
 8010a5e:	9308      	str	r3, [sp, #32]
 8010a60:	f1b8 0f00 	cmp.w	r8, #0
 8010a64:	dd05      	ble.n	8010a72 <_dtoa_r+0x82a>
 8010a66:	4649      	mov	r1, r9
 8010a68:	4642      	mov	r2, r8
 8010a6a:	4658      	mov	r0, fp
 8010a6c:	f000 fec2 	bl	80117f4 <__lshift>
 8010a70:	4681      	mov	r9, r0
 8010a72:	9b08      	ldr	r3, [sp, #32]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	dd05      	ble.n	8010a84 <_dtoa_r+0x83c>
 8010a78:	4621      	mov	r1, r4
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	4658      	mov	r0, fp
 8010a7e:	f000 feb9 	bl	80117f4 <__lshift>
 8010a82:	4604      	mov	r4, r0
 8010a84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d059      	beq.n	8010b3e <_dtoa_r+0x8f6>
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	4648      	mov	r0, r9
 8010a8e:	f000 ff1d 	bl	80118cc <__mcmp>
 8010a92:	2800      	cmp	r0, #0
 8010a94:	da53      	bge.n	8010b3e <_dtoa_r+0x8f6>
 8010a96:	1e7b      	subs	r3, r7, #1
 8010a98:	9304      	str	r3, [sp, #16]
 8010a9a:	4649      	mov	r1, r9
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	220a      	movs	r2, #10
 8010aa0:	4658      	mov	r0, fp
 8010aa2:	f000 fcfb 	bl	801149c <__multadd>
 8010aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010aa8:	4681      	mov	r9, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 8172 	beq.w	8010d94 <_dtoa_r+0xb4c>
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	220a      	movs	r2, #10
 8010ab6:	4658      	mov	r0, fp
 8010ab8:	f000 fcf0 	bl	801149c <__multadd>
 8010abc:	9b00      	ldr	r3, [sp, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	dc67      	bgt.n	8010b94 <_dtoa_r+0x94c>
 8010ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	dc41      	bgt.n	8010b4e <_dtoa_r+0x906>
 8010aca:	e063      	b.n	8010b94 <_dtoa_r+0x94c>
 8010acc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010ace:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010ad2:	e746      	b.n	8010962 <_dtoa_r+0x71a>
 8010ad4:	9b07      	ldr	r3, [sp, #28]
 8010ad6:	1e5c      	subs	r4, r3, #1
 8010ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ada:	42a3      	cmp	r3, r4
 8010adc:	bfbf      	itttt	lt
 8010ade:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010ae0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010ae2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010ae4:	1ae3      	sublt	r3, r4, r3
 8010ae6:	bfb4      	ite	lt
 8010ae8:	18d2      	addlt	r2, r2, r3
 8010aea:	1b1c      	subge	r4, r3, r4
 8010aec:	9b07      	ldr	r3, [sp, #28]
 8010aee:	bfbc      	itt	lt
 8010af0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010af2:	2400      	movlt	r4, #0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	bfb5      	itete	lt
 8010af8:	eba8 0603 	sublt.w	r6, r8, r3
 8010afc:	9b07      	ldrge	r3, [sp, #28]
 8010afe:	2300      	movlt	r3, #0
 8010b00:	4646      	movge	r6, r8
 8010b02:	e730      	b.n	8010966 <_dtoa_r+0x71e>
 8010b04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010b08:	4646      	mov	r6, r8
 8010b0a:	e735      	b.n	8010978 <_dtoa_r+0x730>
 8010b0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b0e:	e75c      	b.n	80109ca <_dtoa_r+0x782>
 8010b10:	2300      	movs	r3, #0
 8010b12:	e788      	b.n	8010a26 <_dtoa_r+0x7de>
 8010b14:	3fe00000 	.word	0x3fe00000
 8010b18:	40240000 	.word	0x40240000
 8010b1c:	40140000 	.word	0x40140000
 8010b20:	9b02      	ldr	r3, [sp, #8]
 8010b22:	e780      	b.n	8010a26 <_dtoa_r+0x7de>
 8010b24:	2300      	movs	r3, #0
 8010b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b28:	e782      	b.n	8010a30 <_dtoa_r+0x7e8>
 8010b2a:	d099      	beq.n	8010a60 <_dtoa_r+0x818>
 8010b2c:	9a08      	ldr	r2, [sp, #32]
 8010b2e:	331c      	adds	r3, #28
 8010b30:	441a      	add	r2, r3
 8010b32:	4498      	add	r8, r3
 8010b34:	441e      	add	r6, r3
 8010b36:	9208      	str	r2, [sp, #32]
 8010b38:	e792      	b.n	8010a60 <_dtoa_r+0x818>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	e7f6      	b.n	8010b2c <_dtoa_r+0x8e4>
 8010b3e:	9b07      	ldr	r3, [sp, #28]
 8010b40:	9704      	str	r7, [sp, #16]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	dc20      	bgt.n	8010b88 <_dtoa_r+0x940>
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	dd1e      	ble.n	8010b8c <_dtoa_r+0x944>
 8010b4e:	9b00      	ldr	r3, [sp, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f47f aec0 	bne.w	80108d6 <_dtoa_r+0x68e>
 8010b56:	4621      	mov	r1, r4
 8010b58:	2205      	movs	r2, #5
 8010b5a:	4658      	mov	r0, fp
 8010b5c:	f000 fc9e 	bl	801149c <__multadd>
 8010b60:	4601      	mov	r1, r0
 8010b62:	4604      	mov	r4, r0
 8010b64:	4648      	mov	r0, r9
 8010b66:	f000 feb1 	bl	80118cc <__mcmp>
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	f77f aeb3 	ble.w	80108d6 <_dtoa_r+0x68e>
 8010b70:	4656      	mov	r6, sl
 8010b72:	2331      	movs	r3, #49	@ 0x31
 8010b74:	f806 3b01 	strb.w	r3, [r6], #1
 8010b78:	9b04      	ldr	r3, [sp, #16]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	9304      	str	r3, [sp, #16]
 8010b7e:	e6ae      	b.n	80108de <_dtoa_r+0x696>
 8010b80:	9c07      	ldr	r4, [sp, #28]
 8010b82:	9704      	str	r7, [sp, #16]
 8010b84:	4625      	mov	r5, r4
 8010b86:	e7f3      	b.n	8010b70 <_dtoa_r+0x928>
 8010b88:	9b07      	ldr	r3, [sp, #28]
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 8104 	beq.w	8010d9c <_dtoa_r+0xb54>
 8010b94:	2e00      	cmp	r6, #0
 8010b96:	dd05      	ble.n	8010ba4 <_dtoa_r+0x95c>
 8010b98:	4629      	mov	r1, r5
 8010b9a:	4632      	mov	r2, r6
 8010b9c:	4658      	mov	r0, fp
 8010b9e:	f000 fe29 	bl	80117f4 <__lshift>
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d05a      	beq.n	8010c60 <_dtoa_r+0xa18>
 8010baa:	6869      	ldr	r1, [r5, #4]
 8010bac:	4658      	mov	r0, fp
 8010bae:	f000 fc13 	bl	80113d8 <_Balloc>
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	b928      	cbnz	r0, 8010bc2 <_dtoa_r+0x97a>
 8010bb6:	4b84      	ldr	r3, [pc, #528]	@ (8010dc8 <_dtoa_r+0xb80>)
 8010bb8:	4602      	mov	r2, r0
 8010bba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010bbe:	f7ff bb5a 	b.w	8010276 <_dtoa_r+0x2e>
 8010bc2:	692a      	ldr	r2, [r5, #16]
 8010bc4:	3202      	adds	r2, #2
 8010bc6:	0092      	lsls	r2, r2, #2
 8010bc8:	f105 010c 	add.w	r1, r5, #12
 8010bcc:	300c      	adds	r0, #12
 8010bce:	f7ff faa4 	bl	801011a <memcpy>
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	4631      	mov	r1, r6
 8010bd6:	4658      	mov	r0, fp
 8010bd8:	f000 fe0c 	bl	80117f4 <__lshift>
 8010bdc:	f10a 0301 	add.w	r3, sl, #1
 8010be0:	9307      	str	r3, [sp, #28]
 8010be2:	9b00      	ldr	r3, [sp, #0]
 8010be4:	4453      	add	r3, sl
 8010be6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010be8:	9b02      	ldr	r3, [sp, #8]
 8010bea:	f003 0301 	and.w	r3, r3, #1
 8010bee:	462f      	mov	r7, r5
 8010bf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bf2:	4605      	mov	r5, r0
 8010bf4:	9b07      	ldr	r3, [sp, #28]
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	4648      	mov	r0, r9
 8010bfc:	9300      	str	r3, [sp, #0]
 8010bfe:	f7ff fa9a 	bl	8010136 <quorem>
 8010c02:	4639      	mov	r1, r7
 8010c04:	9002      	str	r0, [sp, #8]
 8010c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c0a:	4648      	mov	r0, r9
 8010c0c:	f000 fe5e 	bl	80118cc <__mcmp>
 8010c10:	462a      	mov	r2, r5
 8010c12:	9008      	str	r0, [sp, #32]
 8010c14:	4621      	mov	r1, r4
 8010c16:	4658      	mov	r0, fp
 8010c18:	f000 fe74 	bl	8011904 <__mdiff>
 8010c1c:	68c2      	ldr	r2, [r0, #12]
 8010c1e:	4606      	mov	r6, r0
 8010c20:	bb02      	cbnz	r2, 8010c64 <_dtoa_r+0xa1c>
 8010c22:	4601      	mov	r1, r0
 8010c24:	4648      	mov	r0, r9
 8010c26:	f000 fe51 	bl	80118cc <__mcmp>
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	4658      	mov	r0, fp
 8010c30:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c32:	f000 fc11 	bl	8011458 <_Bfree>
 8010c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c3a:	9e07      	ldr	r6, [sp, #28]
 8010c3c:	ea43 0102 	orr.w	r1, r3, r2
 8010c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c42:	4319      	orrs	r1, r3
 8010c44:	d110      	bne.n	8010c68 <_dtoa_r+0xa20>
 8010c46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c4a:	d029      	beq.n	8010ca0 <_dtoa_r+0xa58>
 8010c4c:	9b08      	ldr	r3, [sp, #32]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	dd02      	ble.n	8010c58 <_dtoa_r+0xa10>
 8010c52:	9b02      	ldr	r3, [sp, #8]
 8010c54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010c58:	9b00      	ldr	r3, [sp, #0]
 8010c5a:	f883 8000 	strb.w	r8, [r3]
 8010c5e:	e63f      	b.n	80108e0 <_dtoa_r+0x698>
 8010c60:	4628      	mov	r0, r5
 8010c62:	e7bb      	b.n	8010bdc <_dtoa_r+0x994>
 8010c64:	2201      	movs	r2, #1
 8010c66:	e7e1      	b.n	8010c2c <_dtoa_r+0x9e4>
 8010c68:	9b08      	ldr	r3, [sp, #32]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	db04      	blt.n	8010c78 <_dtoa_r+0xa30>
 8010c6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c70:	430b      	orrs	r3, r1
 8010c72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010c74:	430b      	orrs	r3, r1
 8010c76:	d120      	bne.n	8010cba <_dtoa_r+0xa72>
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	dded      	ble.n	8010c58 <_dtoa_r+0xa10>
 8010c7c:	4649      	mov	r1, r9
 8010c7e:	2201      	movs	r2, #1
 8010c80:	4658      	mov	r0, fp
 8010c82:	f000 fdb7 	bl	80117f4 <__lshift>
 8010c86:	4621      	mov	r1, r4
 8010c88:	4681      	mov	r9, r0
 8010c8a:	f000 fe1f 	bl	80118cc <__mcmp>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	dc03      	bgt.n	8010c9a <_dtoa_r+0xa52>
 8010c92:	d1e1      	bne.n	8010c58 <_dtoa_r+0xa10>
 8010c94:	f018 0f01 	tst.w	r8, #1
 8010c98:	d0de      	beq.n	8010c58 <_dtoa_r+0xa10>
 8010c9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c9e:	d1d8      	bne.n	8010c52 <_dtoa_r+0xa0a>
 8010ca0:	9a00      	ldr	r2, [sp, #0]
 8010ca2:	2339      	movs	r3, #57	@ 0x39
 8010ca4:	7013      	strb	r3, [r2, #0]
 8010ca6:	4633      	mov	r3, r6
 8010ca8:	461e      	mov	r6, r3
 8010caa:	3b01      	subs	r3, #1
 8010cac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010cb0:	2a39      	cmp	r2, #57	@ 0x39
 8010cb2:	d052      	beq.n	8010d5a <_dtoa_r+0xb12>
 8010cb4:	3201      	adds	r2, #1
 8010cb6:	701a      	strb	r2, [r3, #0]
 8010cb8:	e612      	b.n	80108e0 <_dtoa_r+0x698>
 8010cba:	2a00      	cmp	r2, #0
 8010cbc:	dd07      	ble.n	8010cce <_dtoa_r+0xa86>
 8010cbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010cc2:	d0ed      	beq.n	8010ca0 <_dtoa_r+0xa58>
 8010cc4:	9a00      	ldr	r2, [sp, #0]
 8010cc6:	f108 0301 	add.w	r3, r8, #1
 8010cca:	7013      	strb	r3, [r2, #0]
 8010ccc:	e608      	b.n	80108e0 <_dtoa_r+0x698>
 8010cce:	9b07      	ldr	r3, [sp, #28]
 8010cd0:	9a07      	ldr	r2, [sp, #28]
 8010cd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010cd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d028      	beq.n	8010d2e <_dtoa_r+0xae6>
 8010cdc:	4649      	mov	r1, r9
 8010cde:	2300      	movs	r3, #0
 8010ce0:	220a      	movs	r2, #10
 8010ce2:	4658      	mov	r0, fp
 8010ce4:	f000 fbda 	bl	801149c <__multadd>
 8010ce8:	42af      	cmp	r7, r5
 8010cea:	4681      	mov	r9, r0
 8010cec:	f04f 0300 	mov.w	r3, #0
 8010cf0:	f04f 020a 	mov.w	r2, #10
 8010cf4:	4639      	mov	r1, r7
 8010cf6:	4658      	mov	r0, fp
 8010cf8:	d107      	bne.n	8010d0a <_dtoa_r+0xac2>
 8010cfa:	f000 fbcf 	bl	801149c <__multadd>
 8010cfe:	4607      	mov	r7, r0
 8010d00:	4605      	mov	r5, r0
 8010d02:	9b07      	ldr	r3, [sp, #28]
 8010d04:	3301      	adds	r3, #1
 8010d06:	9307      	str	r3, [sp, #28]
 8010d08:	e774      	b.n	8010bf4 <_dtoa_r+0x9ac>
 8010d0a:	f000 fbc7 	bl	801149c <__multadd>
 8010d0e:	4629      	mov	r1, r5
 8010d10:	4607      	mov	r7, r0
 8010d12:	2300      	movs	r3, #0
 8010d14:	220a      	movs	r2, #10
 8010d16:	4658      	mov	r0, fp
 8010d18:	f000 fbc0 	bl	801149c <__multadd>
 8010d1c:	4605      	mov	r5, r0
 8010d1e:	e7f0      	b.n	8010d02 <_dtoa_r+0xaba>
 8010d20:	9b00      	ldr	r3, [sp, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	bfcc      	ite	gt
 8010d26:	461e      	movgt	r6, r3
 8010d28:	2601      	movle	r6, #1
 8010d2a:	4456      	add	r6, sl
 8010d2c:	2700      	movs	r7, #0
 8010d2e:	4649      	mov	r1, r9
 8010d30:	2201      	movs	r2, #1
 8010d32:	4658      	mov	r0, fp
 8010d34:	f000 fd5e 	bl	80117f4 <__lshift>
 8010d38:	4621      	mov	r1, r4
 8010d3a:	4681      	mov	r9, r0
 8010d3c:	f000 fdc6 	bl	80118cc <__mcmp>
 8010d40:	2800      	cmp	r0, #0
 8010d42:	dcb0      	bgt.n	8010ca6 <_dtoa_r+0xa5e>
 8010d44:	d102      	bne.n	8010d4c <_dtoa_r+0xb04>
 8010d46:	f018 0f01 	tst.w	r8, #1
 8010d4a:	d1ac      	bne.n	8010ca6 <_dtoa_r+0xa5e>
 8010d4c:	4633      	mov	r3, r6
 8010d4e:	461e      	mov	r6, r3
 8010d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d54:	2a30      	cmp	r2, #48	@ 0x30
 8010d56:	d0fa      	beq.n	8010d4e <_dtoa_r+0xb06>
 8010d58:	e5c2      	b.n	80108e0 <_dtoa_r+0x698>
 8010d5a:	459a      	cmp	sl, r3
 8010d5c:	d1a4      	bne.n	8010ca8 <_dtoa_r+0xa60>
 8010d5e:	9b04      	ldr	r3, [sp, #16]
 8010d60:	3301      	adds	r3, #1
 8010d62:	9304      	str	r3, [sp, #16]
 8010d64:	2331      	movs	r3, #49	@ 0x31
 8010d66:	f88a 3000 	strb.w	r3, [sl]
 8010d6a:	e5b9      	b.n	80108e0 <_dtoa_r+0x698>
 8010d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010dcc <_dtoa_r+0xb84>
 8010d72:	b11b      	cbz	r3, 8010d7c <_dtoa_r+0xb34>
 8010d74:	f10a 0308 	add.w	r3, sl, #8
 8010d78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d7a:	6013      	str	r3, [r2, #0]
 8010d7c:	4650      	mov	r0, sl
 8010d7e:	b019      	add	sp, #100	@ 0x64
 8010d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	f77f ae37 	ble.w	80109fa <_dtoa_r+0x7b2>
 8010d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d90:	2001      	movs	r0, #1
 8010d92:	e655      	b.n	8010a40 <_dtoa_r+0x7f8>
 8010d94:	9b00      	ldr	r3, [sp, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f77f aed6 	ble.w	8010b48 <_dtoa_r+0x900>
 8010d9c:	4656      	mov	r6, sl
 8010d9e:	4621      	mov	r1, r4
 8010da0:	4648      	mov	r0, r9
 8010da2:	f7ff f9c8 	bl	8010136 <quorem>
 8010da6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010daa:	f806 8b01 	strb.w	r8, [r6], #1
 8010dae:	9b00      	ldr	r3, [sp, #0]
 8010db0:	eba6 020a 	sub.w	r2, r6, sl
 8010db4:	4293      	cmp	r3, r2
 8010db6:	ddb3      	ble.n	8010d20 <_dtoa_r+0xad8>
 8010db8:	4649      	mov	r1, r9
 8010dba:	2300      	movs	r3, #0
 8010dbc:	220a      	movs	r2, #10
 8010dbe:	4658      	mov	r0, fp
 8010dc0:	f000 fb6c 	bl	801149c <__multadd>
 8010dc4:	4681      	mov	r9, r0
 8010dc6:	e7ea      	b.n	8010d9e <_dtoa_r+0xb56>
 8010dc8:	08012624 	.word	0x08012624
 8010dcc:	080125a8 	.word	0x080125a8

08010dd0 <_free_r>:
 8010dd0:	b538      	push	{r3, r4, r5, lr}
 8010dd2:	4605      	mov	r5, r0
 8010dd4:	2900      	cmp	r1, #0
 8010dd6:	d041      	beq.n	8010e5c <_free_r+0x8c>
 8010dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ddc:	1f0c      	subs	r4, r1, #4
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	bfb8      	it	lt
 8010de2:	18e4      	addlt	r4, r4, r3
 8010de4:	f000 faec 	bl	80113c0 <__malloc_lock>
 8010de8:	4a1d      	ldr	r2, [pc, #116]	@ (8010e60 <_free_r+0x90>)
 8010dea:	6813      	ldr	r3, [r2, #0]
 8010dec:	b933      	cbnz	r3, 8010dfc <_free_r+0x2c>
 8010dee:	6063      	str	r3, [r4, #4]
 8010df0:	6014      	str	r4, [r2, #0]
 8010df2:	4628      	mov	r0, r5
 8010df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010df8:	f000 bae8 	b.w	80113cc <__malloc_unlock>
 8010dfc:	42a3      	cmp	r3, r4
 8010dfe:	d908      	bls.n	8010e12 <_free_r+0x42>
 8010e00:	6820      	ldr	r0, [r4, #0]
 8010e02:	1821      	adds	r1, r4, r0
 8010e04:	428b      	cmp	r3, r1
 8010e06:	bf01      	itttt	eq
 8010e08:	6819      	ldreq	r1, [r3, #0]
 8010e0a:	685b      	ldreq	r3, [r3, #4]
 8010e0c:	1809      	addeq	r1, r1, r0
 8010e0e:	6021      	streq	r1, [r4, #0]
 8010e10:	e7ed      	b.n	8010dee <_free_r+0x1e>
 8010e12:	461a      	mov	r2, r3
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	b10b      	cbz	r3, 8010e1c <_free_r+0x4c>
 8010e18:	42a3      	cmp	r3, r4
 8010e1a:	d9fa      	bls.n	8010e12 <_free_r+0x42>
 8010e1c:	6811      	ldr	r1, [r2, #0]
 8010e1e:	1850      	adds	r0, r2, r1
 8010e20:	42a0      	cmp	r0, r4
 8010e22:	d10b      	bne.n	8010e3c <_free_r+0x6c>
 8010e24:	6820      	ldr	r0, [r4, #0]
 8010e26:	4401      	add	r1, r0
 8010e28:	1850      	adds	r0, r2, r1
 8010e2a:	4283      	cmp	r3, r0
 8010e2c:	6011      	str	r1, [r2, #0]
 8010e2e:	d1e0      	bne.n	8010df2 <_free_r+0x22>
 8010e30:	6818      	ldr	r0, [r3, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	6053      	str	r3, [r2, #4]
 8010e36:	4408      	add	r0, r1
 8010e38:	6010      	str	r0, [r2, #0]
 8010e3a:	e7da      	b.n	8010df2 <_free_r+0x22>
 8010e3c:	d902      	bls.n	8010e44 <_free_r+0x74>
 8010e3e:	230c      	movs	r3, #12
 8010e40:	602b      	str	r3, [r5, #0]
 8010e42:	e7d6      	b.n	8010df2 <_free_r+0x22>
 8010e44:	6820      	ldr	r0, [r4, #0]
 8010e46:	1821      	adds	r1, r4, r0
 8010e48:	428b      	cmp	r3, r1
 8010e4a:	bf04      	itt	eq
 8010e4c:	6819      	ldreq	r1, [r3, #0]
 8010e4e:	685b      	ldreq	r3, [r3, #4]
 8010e50:	6063      	str	r3, [r4, #4]
 8010e52:	bf04      	itt	eq
 8010e54:	1809      	addeq	r1, r1, r0
 8010e56:	6021      	streq	r1, [r4, #0]
 8010e58:	6054      	str	r4, [r2, #4]
 8010e5a:	e7ca      	b.n	8010df2 <_free_r+0x22>
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	bf00      	nop
 8010e60:	20005c44 	.word	0x20005c44

08010e64 <__ssputs_r>:
 8010e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e68:	688e      	ldr	r6, [r1, #8]
 8010e6a:	461f      	mov	r7, r3
 8010e6c:	42be      	cmp	r6, r7
 8010e6e:	680b      	ldr	r3, [r1, #0]
 8010e70:	4682      	mov	sl, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	4690      	mov	r8, r2
 8010e76:	d82d      	bhi.n	8010ed4 <__ssputs_r+0x70>
 8010e78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010e80:	d026      	beq.n	8010ed0 <__ssputs_r+0x6c>
 8010e82:	6965      	ldr	r5, [r4, #20]
 8010e84:	6909      	ldr	r1, [r1, #16]
 8010e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e8a:	eba3 0901 	sub.w	r9, r3, r1
 8010e8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e92:	1c7b      	adds	r3, r7, #1
 8010e94:	444b      	add	r3, r9
 8010e96:	106d      	asrs	r5, r5, #1
 8010e98:	429d      	cmp	r5, r3
 8010e9a:	bf38      	it	cc
 8010e9c:	461d      	movcc	r5, r3
 8010e9e:	0553      	lsls	r3, r2, #21
 8010ea0:	d527      	bpl.n	8010ef2 <__ssputs_r+0x8e>
 8010ea2:	4629      	mov	r1, r5
 8010ea4:	f000 f960 	bl	8011168 <_malloc_r>
 8010ea8:	4606      	mov	r6, r0
 8010eaa:	b360      	cbz	r0, 8010f06 <__ssputs_r+0xa2>
 8010eac:	6921      	ldr	r1, [r4, #16]
 8010eae:	464a      	mov	r2, r9
 8010eb0:	f7ff f933 	bl	801011a <memcpy>
 8010eb4:	89a3      	ldrh	r3, [r4, #12]
 8010eb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ebe:	81a3      	strh	r3, [r4, #12]
 8010ec0:	6126      	str	r6, [r4, #16]
 8010ec2:	6165      	str	r5, [r4, #20]
 8010ec4:	444e      	add	r6, r9
 8010ec6:	eba5 0509 	sub.w	r5, r5, r9
 8010eca:	6026      	str	r6, [r4, #0]
 8010ecc:	60a5      	str	r5, [r4, #8]
 8010ece:	463e      	mov	r6, r7
 8010ed0:	42be      	cmp	r6, r7
 8010ed2:	d900      	bls.n	8010ed6 <__ssputs_r+0x72>
 8010ed4:	463e      	mov	r6, r7
 8010ed6:	6820      	ldr	r0, [r4, #0]
 8010ed8:	4632      	mov	r2, r6
 8010eda:	4641      	mov	r1, r8
 8010edc:	f000 fe6f 	bl	8011bbe <memmove>
 8010ee0:	68a3      	ldr	r3, [r4, #8]
 8010ee2:	1b9b      	subs	r3, r3, r6
 8010ee4:	60a3      	str	r3, [r4, #8]
 8010ee6:	6823      	ldr	r3, [r4, #0]
 8010ee8:	4433      	add	r3, r6
 8010eea:	6023      	str	r3, [r4, #0]
 8010eec:	2000      	movs	r0, #0
 8010eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef2:	462a      	mov	r2, r5
 8010ef4:	f000 fe35 	bl	8011b62 <_realloc_r>
 8010ef8:	4606      	mov	r6, r0
 8010efa:	2800      	cmp	r0, #0
 8010efc:	d1e0      	bne.n	8010ec0 <__ssputs_r+0x5c>
 8010efe:	6921      	ldr	r1, [r4, #16]
 8010f00:	4650      	mov	r0, sl
 8010f02:	f7ff ff65 	bl	8010dd0 <_free_r>
 8010f06:	230c      	movs	r3, #12
 8010f08:	f8ca 3000 	str.w	r3, [sl]
 8010f0c:	89a3      	ldrh	r3, [r4, #12]
 8010f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f12:	81a3      	strh	r3, [r4, #12]
 8010f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f18:	e7e9      	b.n	8010eee <__ssputs_r+0x8a>
	...

08010f1c <_svfiprintf_r>:
 8010f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f20:	4698      	mov	r8, r3
 8010f22:	898b      	ldrh	r3, [r1, #12]
 8010f24:	061b      	lsls	r3, r3, #24
 8010f26:	b09d      	sub	sp, #116	@ 0x74
 8010f28:	4607      	mov	r7, r0
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	4614      	mov	r4, r2
 8010f2e:	d510      	bpl.n	8010f52 <_svfiprintf_r+0x36>
 8010f30:	690b      	ldr	r3, [r1, #16]
 8010f32:	b973      	cbnz	r3, 8010f52 <_svfiprintf_r+0x36>
 8010f34:	2140      	movs	r1, #64	@ 0x40
 8010f36:	f000 f917 	bl	8011168 <_malloc_r>
 8010f3a:	6028      	str	r0, [r5, #0]
 8010f3c:	6128      	str	r0, [r5, #16]
 8010f3e:	b930      	cbnz	r0, 8010f4e <_svfiprintf_r+0x32>
 8010f40:	230c      	movs	r3, #12
 8010f42:	603b      	str	r3, [r7, #0]
 8010f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f48:	b01d      	add	sp, #116	@ 0x74
 8010f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4e:	2340      	movs	r3, #64	@ 0x40
 8010f50:	616b      	str	r3, [r5, #20]
 8010f52:	2300      	movs	r3, #0
 8010f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f56:	2320      	movs	r3, #32
 8010f58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f60:	2330      	movs	r3, #48	@ 0x30
 8010f62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011100 <_svfiprintf_r+0x1e4>
 8010f66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f6a:	f04f 0901 	mov.w	r9, #1
 8010f6e:	4623      	mov	r3, r4
 8010f70:	469a      	mov	sl, r3
 8010f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f76:	b10a      	cbz	r2, 8010f7c <_svfiprintf_r+0x60>
 8010f78:	2a25      	cmp	r2, #37	@ 0x25
 8010f7a:	d1f9      	bne.n	8010f70 <_svfiprintf_r+0x54>
 8010f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010f80:	d00b      	beq.n	8010f9a <_svfiprintf_r+0x7e>
 8010f82:	465b      	mov	r3, fp
 8010f84:	4622      	mov	r2, r4
 8010f86:	4629      	mov	r1, r5
 8010f88:	4638      	mov	r0, r7
 8010f8a:	f7ff ff6b 	bl	8010e64 <__ssputs_r>
 8010f8e:	3001      	adds	r0, #1
 8010f90:	f000 80a7 	beq.w	80110e2 <_svfiprintf_r+0x1c6>
 8010f94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f96:	445a      	add	r2, fp
 8010f98:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f000 809f 	beq.w	80110e2 <_svfiprintf_r+0x1c6>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fae:	f10a 0a01 	add.w	sl, sl, #1
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	9307      	str	r3, [sp, #28]
 8010fb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010fba:	931a      	str	r3, [sp, #104]	@ 0x68
 8010fbc:	4654      	mov	r4, sl
 8010fbe:	2205      	movs	r2, #5
 8010fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc4:	484e      	ldr	r0, [pc, #312]	@ (8011100 <_svfiprintf_r+0x1e4>)
 8010fc6:	f7ef f903 	bl	80001d0 <memchr>
 8010fca:	9a04      	ldr	r2, [sp, #16]
 8010fcc:	b9d8      	cbnz	r0, 8011006 <_svfiprintf_r+0xea>
 8010fce:	06d0      	lsls	r0, r2, #27
 8010fd0:	bf44      	itt	mi
 8010fd2:	2320      	movmi	r3, #32
 8010fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fd8:	0711      	lsls	r1, r2, #28
 8010fda:	bf44      	itt	mi
 8010fdc:	232b      	movmi	r3, #43	@ 0x2b
 8010fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fe8:	d015      	beq.n	8011016 <_svfiprintf_r+0xfa>
 8010fea:	9a07      	ldr	r2, [sp, #28]
 8010fec:	4654      	mov	r4, sl
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f04f 0c0a 	mov.w	ip, #10
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ffa:	3b30      	subs	r3, #48	@ 0x30
 8010ffc:	2b09      	cmp	r3, #9
 8010ffe:	d94b      	bls.n	8011098 <_svfiprintf_r+0x17c>
 8011000:	b1b0      	cbz	r0, 8011030 <_svfiprintf_r+0x114>
 8011002:	9207      	str	r2, [sp, #28]
 8011004:	e014      	b.n	8011030 <_svfiprintf_r+0x114>
 8011006:	eba0 0308 	sub.w	r3, r0, r8
 801100a:	fa09 f303 	lsl.w	r3, r9, r3
 801100e:	4313      	orrs	r3, r2
 8011010:	9304      	str	r3, [sp, #16]
 8011012:	46a2      	mov	sl, r4
 8011014:	e7d2      	b.n	8010fbc <_svfiprintf_r+0xa0>
 8011016:	9b03      	ldr	r3, [sp, #12]
 8011018:	1d19      	adds	r1, r3, #4
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	9103      	str	r1, [sp, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	bfbb      	ittet	lt
 8011022:	425b      	neglt	r3, r3
 8011024:	f042 0202 	orrlt.w	r2, r2, #2
 8011028:	9307      	strge	r3, [sp, #28]
 801102a:	9307      	strlt	r3, [sp, #28]
 801102c:	bfb8      	it	lt
 801102e:	9204      	strlt	r2, [sp, #16]
 8011030:	7823      	ldrb	r3, [r4, #0]
 8011032:	2b2e      	cmp	r3, #46	@ 0x2e
 8011034:	d10a      	bne.n	801104c <_svfiprintf_r+0x130>
 8011036:	7863      	ldrb	r3, [r4, #1]
 8011038:	2b2a      	cmp	r3, #42	@ 0x2a
 801103a:	d132      	bne.n	80110a2 <_svfiprintf_r+0x186>
 801103c:	9b03      	ldr	r3, [sp, #12]
 801103e:	1d1a      	adds	r2, r3, #4
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	9203      	str	r2, [sp, #12]
 8011044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011048:	3402      	adds	r4, #2
 801104a:	9305      	str	r3, [sp, #20]
 801104c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011110 <_svfiprintf_r+0x1f4>
 8011050:	7821      	ldrb	r1, [r4, #0]
 8011052:	2203      	movs	r2, #3
 8011054:	4650      	mov	r0, sl
 8011056:	f7ef f8bb 	bl	80001d0 <memchr>
 801105a:	b138      	cbz	r0, 801106c <_svfiprintf_r+0x150>
 801105c:	9b04      	ldr	r3, [sp, #16]
 801105e:	eba0 000a 	sub.w	r0, r0, sl
 8011062:	2240      	movs	r2, #64	@ 0x40
 8011064:	4082      	lsls	r2, r0
 8011066:	4313      	orrs	r3, r2
 8011068:	3401      	adds	r4, #1
 801106a:	9304      	str	r3, [sp, #16]
 801106c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011070:	4824      	ldr	r0, [pc, #144]	@ (8011104 <_svfiprintf_r+0x1e8>)
 8011072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011076:	2206      	movs	r2, #6
 8011078:	f7ef f8aa 	bl	80001d0 <memchr>
 801107c:	2800      	cmp	r0, #0
 801107e:	d036      	beq.n	80110ee <_svfiprintf_r+0x1d2>
 8011080:	4b21      	ldr	r3, [pc, #132]	@ (8011108 <_svfiprintf_r+0x1ec>)
 8011082:	bb1b      	cbnz	r3, 80110cc <_svfiprintf_r+0x1b0>
 8011084:	9b03      	ldr	r3, [sp, #12]
 8011086:	3307      	adds	r3, #7
 8011088:	f023 0307 	bic.w	r3, r3, #7
 801108c:	3308      	adds	r3, #8
 801108e:	9303      	str	r3, [sp, #12]
 8011090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011092:	4433      	add	r3, r6
 8011094:	9309      	str	r3, [sp, #36]	@ 0x24
 8011096:	e76a      	b.n	8010f6e <_svfiprintf_r+0x52>
 8011098:	fb0c 3202 	mla	r2, ip, r2, r3
 801109c:	460c      	mov	r4, r1
 801109e:	2001      	movs	r0, #1
 80110a0:	e7a8      	b.n	8010ff4 <_svfiprintf_r+0xd8>
 80110a2:	2300      	movs	r3, #0
 80110a4:	3401      	adds	r4, #1
 80110a6:	9305      	str	r3, [sp, #20]
 80110a8:	4619      	mov	r1, r3
 80110aa:	f04f 0c0a 	mov.w	ip, #10
 80110ae:	4620      	mov	r0, r4
 80110b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110b4:	3a30      	subs	r2, #48	@ 0x30
 80110b6:	2a09      	cmp	r2, #9
 80110b8:	d903      	bls.n	80110c2 <_svfiprintf_r+0x1a6>
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d0c6      	beq.n	801104c <_svfiprintf_r+0x130>
 80110be:	9105      	str	r1, [sp, #20]
 80110c0:	e7c4      	b.n	801104c <_svfiprintf_r+0x130>
 80110c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80110c6:	4604      	mov	r4, r0
 80110c8:	2301      	movs	r3, #1
 80110ca:	e7f0      	b.n	80110ae <_svfiprintf_r+0x192>
 80110cc:	ab03      	add	r3, sp, #12
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	462a      	mov	r2, r5
 80110d2:	4b0e      	ldr	r3, [pc, #56]	@ (801110c <_svfiprintf_r+0x1f0>)
 80110d4:	a904      	add	r1, sp, #16
 80110d6:	4638      	mov	r0, r7
 80110d8:	f7fe faf6 	bl	800f6c8 <_printf_float>
 80110dc:	1c42      	adds	r2, r0, #1
 80110de:	4606      	mov	r6, r0
 80110e0:	d1d6      	bne.n	8011090 <_svfiprintf_r+0x174>
 80110e2:	89ab      	ldrh	r3, [r5, #12]
 80110e4:	065b      	lsls	r3, r3, #25
 80110e6:	f53f af2d 	bmi.w	8010f44 <_svfiprintf_r+0x28>
 80110ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110ec:	e72c      	b.n	8010f48 <_svfiprintf_r+0x2c>
 80110ee:	ab03      	add	r3, sp, #12
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	462a      	mov	r2, r5
 80110f4:	4b05      	ldr	r3, [pc, #20]	@ (801110c <_svfiprintf_r+0x1f0>)
 80110f6:	a904      	add	r1, sp, #16
 80110f8:	4638      	mov	r0, r7
 80110fa:	f7fe fd7d 	bl	800fbf8 <_printf_i>
 80110fe:	e7ed      	b.n	80110dc <_svfiprintf_r+0x1c0>
 8011100:	08012635 	.word	0x08012635
 8011104:	0801263f 	.word	0x0801263f
 8011108:	0800f6c9 	.word	0x0800f6c9
 801110c:	08010e65 	.word	0x08010e65
 8011110:	0801263b 	.word	0x0801263b

08011114 <malloc>:
 8011114:	4b02      	ldr	r3, [pc, #8]	@ (8011120 <malloc+0xc>)
 8011116:	4601      	mov	r1, r0
 8011118:	6818      	ldr	r0, [r3, #0]
 801111a:	f000 b825 	b.w	8011168 <_malloc_r>
 801111e:	bf00      	nop
 8011120:	20000138 	.word	0x20000138

08011124 <sbrk_aligned>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	4e0f      	ldr	r6, [pc, #60]	@ (8011164 <sbrk_aligned+0x40>)
 8011128:	460c      	mov	r4, r1
 801112a:	6831      	ldr	r1, [r6, #0]
 801112c:	4605      	mov	r5, r0
 801112e:	b911      	cbnz	r1, 8011136 <sbrk_aligned+0x12>
 8011130:	f000 fd94 	bl	8011c5c <_sbrk_r>
 8011134:	6030      	str	r0, [r6, #0]
 8011136:	4621      	mov	r1, r4
 8011138:	4628      	mov	r0, r5
 801113a:	f000 fd8f 	bl	8011c5c <_sbrk_r>
 801113e:	1c43      	adds	r3, r0, #1
 8011140:	d103      	bne.n	801114a <sbrk_aligned+0x26>
 8011142:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011146:	4620      	mov	r0, r4
 8011148:	bd70      	pop	{r4, r5, r6, pc}
 801114a:	1cc4      	adds	r4, r0, #3
 801114c:	f024 0403 	bic.w	r4, r4, #3
 8011150:	42a0      	cmp	r0, r4
 8011152:	d0f8      	beq.n	8011146 <sbrk_aligned+0x22>
 8011154:	1a21      	subs	r1, r4, r0
 8011156:	4628      	mov	r0, r5
 8011158:	f000 fd80 	bl	8011c5c <_sbrk_r>
 801115c:	3001      	adds	r0, #1
 801115e:	d1f2      	bne.n	8011146 <sbrk_aligned+0x22>
 8011160:	e7ef      	b.n	8011142 <sbrk_aligned+0x1e>
 8011162:	bf00      	nop
 8011164:	20005c40 	.word	0x20005c40

08011168 <_malloc_r>:
 8011168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801116c:	1ccd      	adds	r5, r1, #3
 801116e:	f025 0503 	bic.w	r5, r5, #3
 8011172:	3508      	adds	r5, #8
 8011174:	2d0c      	cmp	r5, #12
 8011176:	bf38      	it	cc
 8011178:	250c      	movcc	r5, #12
 801117a:	2d00      	cmp	r5, #0
 801117c:	4606      	mov	r6, r0
 801117e:	db01      	blt.n	8011184 <_malloc_r+0x1c>
 8011180:	42a9      	cmp	r1, r5
 8011182:	d904      	bls.n	801118e <_malloc_r+0x26>
 8011184:	230c      	movs	r3, #12
 8011186:	6033      	str	r3, [r6, #0]
 8011188:	2000      	movs	r0, #0
 801118a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801118e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011264 <_malloc_r+0xfc>
 8011192:	f000 f915 	bl	80113c0 <__malloc_lock>
 8011196:	f8d8 3000 	ldr.w	r3, [r8]
 801119a:	461c      	mov	r4, r3
 801119c:	bb44      	cbnz	r4, 80111f0 <_malloc_r+0x88>
 801119e:	4629      	mov	r1, r5
 80111a0:	4630      	mov	r0, r6
 80111a2:	f7ff ffbf 	bl	8011124 <sbrk_aligned>
 80111a6:	1c43      	adds	r3, r0, #1
 80111a8:	4604      	mov	r4, r0
 80111aa:	d158      	bne.n	801125e <_malloc_r+0xf6>
 80111ac:	f8d8 4000 	ldr.w	r4, [r8]
 80111b0:	4627      	mov	r7, r4
 80111b2:	2f00      	cmp	r7, #0
 80111b4:	d143      	bne.n	801123e <_malloc_r+0xd6>
 80111b6:	2c00      	cmp	r4, #0
 80111b8:	d04b      	beq.n	8011252 <_malloc_r+0xea>
 80111ba:	6823      	ldr	r3, [r4, #0]
 80111bc:	4639      	mov	r1, r7
 80111be:	4630      	mov	r0, r6
 80111c0:	eb04 0903 	add.w	r9, r4, r3
 80111c4:	f000 fd4a 	bl	8011c5c <_sbrk_r>
 80111c8:	4581      	cmp	r9, r0
 80111ca:	d142      	bne.n	8011252 <_malloc_r+0xea>
 80111cc:	6821      	ldr	r1, [r4, #0]
 80111ce:	1a6d      	subs	r5, r5, r1
 80111d0:	4629      	mov	r1, r5
 80111d2:	4630      	mov	r0, r6
 80111d4:	f7ff ffa6 	bl	8011124 <sbrk_aligned>
 80111d8:	3001      	adds	r0, #1
 80111da:	d03a      	beq.n	8011252 <_malloc_r+0xea>
 80111dc:	6823      	ldr	r3, [r4, #0]
 80111de:	442b      	add	r3, r5
 80111e0:	6023      	str	r3, [r4, #0]
 80111e2:	f8d8 3000 	ldr.w	r3, [r8]
 80111e6:	685a      	ldr	r2, [r3, #4]
 80111e8:	bb62      	cbnz	r2, 8011244 <_malloc_r+0xdc>
 80111ea:	f8c8 7000 	str.w	r7, [r8]
 80111ee:	e00f      	b.n	8011210 <_malloc_r+0xa8>
 80111f0:	6822      	ldr	r2, [r4, #0]
 80111f2:	1b52      	subs	r2, r2, r5
 80111f4:	d420      	bmi.n	8011238 <_malloc_r+0xd0>
 80111f6:	2a0b      	cmp	r2, #11
 80111f8:	d917      	bls.n	801122a <_malloc_r+0xc2>
 80111fa:	1961      	adds	r1, r4, r5
 80111fc:	42a3      	cmp	r3, r4
 80111fe:	6025      	str	r5, [r4, #0]
 8011200:	bf18      	it	ne
 8011202:	6059      	strne	r1, [r3, #4]
 8011204:	6863      	ldr	r3, [r4, #4]
 8011206:	bf08      	it	eq
 8011208:	f8c8 1000 	streq.w	r1, [r8]
 801120c:	5162      	str	r2, [r4, r5]
 801120e:	604b      	str	r3, [r1, #4]
 8011210:	4630      	mov	r0, r6
 8011212:	f000 f8db 	bl	80113cc <__malloc_unlock>
 8011216:	f104 000b 	add.w	r0, r4, #11
 801121a:	1d23      	adds	r3, r4, #4
 801121c:	f020 0007 	bic.w	r0, r0, #7
 8011220:	1ac2      	subs	r2, r0, r3
 8011222:	bf1c      	itt	ne
 8011224:	1a1b      	subne	r3, r3, r0
 8011226:	50a3      	strne	r3, [r4, r2]
 8011228:	e7af      	b.n	801118a <_malloc_r+0x22>
 801122a:	6862      	ldr	r2, [r4, #4]
 801122c:	42a3      	cmp	r3, r4
 801122e:	bf0c      	ite	eq
 8011230:	f8c8 2000 	streq.w	r2, [r8]
 8011234:	605a      	strne	r2, [r3, #4]
 8011236:	e7eb      	b.n	8011210 <_malloc_r+0xa8>
 8011238:	4623      	mov	r3, r4
 801123a:	6864      	ldr	r4, [r4, #4]
 801123c:	e7ae      	b.n	801119c <_malloc_r+0x34>
 801123e:	463c      	mov	r4, r7
 8011240:	687f      	ldr	r7, [r7, #4]
 8011242:	e7b6      	b.n	80111b2 <_malloc_r+0x4a>
 8011244:	461a      	mov	r2, r3
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	42a3      	cmp	r3, r4
 801124a:	d1fb      	bne.n	8011244 <_malloc_r+0xdc>
 801124c:	2300      	movs	r3, #0
 801124e:	6053      	str	r3, [r2, #4]
 8011250:	e7de      	b.n	8011210 <_malloc_r+0xa8>
 8011252:	230c      	movs	r3, #12
 8011254:	6033      	str	r3, [r6, #0]
 8011256:	4630      	mov	r0, r6
 8011258:	f000 f8b8 	bl	80113cc <__malloc_unlock>
 801125c:	e794      	b.n	8011188 <_malloc_r+0x20>
 801125e:	6005      	str	r5, [r0, #0]
 8011260:	e7d6      	b.n	8011210 <_malloc_r+0xa8>
 8011262:	bf00      	nop
 8011264:	20005c44 	.word	0x20005c44

08011268 <__sflush_r>:
 8011268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011270:	0716      	lsls	r6, r2, #28
 8011272:	4605      	mov	r5, r0
 8011274:	460c      	mov	r4, r1
 8011276:	d454      	bmi.n	8011322 <__sflush_r+0xba>
 8011278:	684b      	ldr	r3, [r1, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	dc02      	bgt.n	8011284 <__sflush_r+0x1c>
 801127e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011280:	2b00      	cmp	r3, #0
 8011282:	dd48      	ble.n	8011316 <__sflush_r+0xae>
 8011284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011286:	2e00      	cmp	r6, #0
 8011288:	d045      	beq.n	8011316 <__sflush_r+0xae>
 801128a:	2300      	movs	r3, #0
 801128c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011290:	682f      	ldr	r7, [r5, #0]
 8011292:	6a21      	ldr	r1, [r4, #32]
 8011294:	602b      	str	r3, [r5, #0]
 8011296:	d030      	beq.n	80112fa <__sflush_r+0x92>
 8011298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801129a:	89a3      	ldrh	r3, [r4, #12]
 801129c:	0759      	lsls	r1, r3, #29
 801129e:	d505      	bpl.n	80112ac <__sflush_r+0x44>
 80112a0:	6863      	ldr	r3, [r4, #4]
 80112a2:	1ad2      	subs	r2, r2, r3
 80112a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112a6:	b10b      	cbz	r3, 80112ac <__sflush_r+0x44>
 80112a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112aa:	1ad2      	subs	r2, r2, r3
 80112ac:	2300      	movs	r3, #0
 80112ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112b0:	6a21      	ldr	r1, [r4, #32]
 80112b2:	4628      	mov	r0, r5
 80112b4:	47b0      	blx	r6
 80112b6:	1c43      	adds	r3, r0, #1
 80112b8:	89a3      	ldrh	r3, [r4, #12]
 80112ba:	d106      	bne.n	80112ca <__sflush_r+0x62>
 80112bc:	6829      	ldr	r1, [r5, #0]
 80112be:	291d      	cmp	r1, #29
 80112c0:	d82b      	bhi.n	801131a <__sflush_r+0xb2>
 80112c2:	4a2a      	ldr	r2, [pc, #168]	@ (801136c <__sflush_r+0x104>)
 80112c4:	410a      	asrs	r2, r1
 80112c6:	07d6      	lsls	r6, r2, #31
 80112c8:	d427      	bmi.n	801131a <__sflush_r+0xb2>
 80112ca:	2200      	movs	r2, #0
 80112cc:	6062      	str	r2, [r4, #4]
 80112ce:	04d9      	lsls	r1, r3, #19
 80112d0:	6922      	ldr	r2, [r4, #16]
 80112d2:	6022      	str	r2, [r4, #0]
 80112d4:	d504      	bpl.n	80112e0 <__sflush_r+0x78>
 80112d6:	1c42      	adds	r2, r0, #1
 80112d8:	d101      	bne.n	80112de <__sflush_r+0x76>
 80112da:	682b      	ldr	r3, [r5, #0]
 80112dc:	b903      	cbnz	r3, 80112e0 <__sflush_r+0x78>
 80112de:	6560      	str	r0, [r4, #84]	@ 0x54
 80112e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112e2:	602f      	str	r7, [r5, #0]
 80112e4:	b1b9      	cbz	r1, 8011316 <__sflush_r+0xae>
 80112e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112ea:	4299      	cmp	r1, r3
 80112ec:	d002      	beq.n	80112f4 <__sflush_r+0x8c>
 80112ee:	4628      	mov	r0, r5
 80112f0:	f7ff fd6e 	bl	8010dd0 <_free_r>
 80112f4:	2300      	movs	r3, #0
 80112f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80112f8:	e00d      	b.n	8011316 <__sflush_r+0xae>
 80112fa:	2301      	movs	r3, #1
 80112fc:	4628      	mov	r0, r5
 80112fe:	47b0      	blx	r6
 8011300:	4602      	mov	r2, r0
 8011302:	1c50      	adds	r0, r2, #1
 8011304:	d1c9      	bne.n	801129a <__sflush_r+0x32>
 8011306:	682b      	ldr	r3, [r5, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d0c6      	beq.n	801129a <__sflush_r+0x32>
 801130c:	2b1d      	cmp	r3, #29
 801130e:	d001      	beq.n	8011314 <__sflush_r+0xac>
 8011310:	2b16      	cmp	r3, #22
 8011312:	d11e      	bne.n	8011352 <__sflush_r+0xea>
 8011314:	602f      	str	r7, [r5, #0]
 8011316:	2000      	movs	r0, #0
 8011318:	e022      	b.n	8011360 <__sflush_r+0xf8>
 801131a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801131e:	b21b      	sxth	r3, r3
 8011320:	e01b      	b.n	801135a <__sflush_r+0xf2>
 8011322:	690f      	ldr	r7, [r1, #16]
 8011324:	2f00      	cmp	r7, #0
 8011326:	d0f6      	beq.n	8011316 <__sflush_r+0xae>
 8011328:	0793      	lsls	r3, r2, #30
 801132a:	680e      	ldr	r6, [r1, #0]
 801132c:	bf08      	it	eq
 801132e:	694b      	ldreq	r3, [r1, #20]
 8011330:	600f      	str	r7, [r1, #0]
 8011332:	bf18      	it	ne
 8011334:	2300      	movne	r3, #0
 8011336:	eba6 0807 	sub.w	r8, r6, r7
 801133a:	608b      	str	r3, [r1, #8]
 801133c:	f1b8 0f00 	cmp.w	r8, #0
 8011340:	dde9      	ble.n	8011316 <__sflush_r+0xae>
 8011342:	6a21      	ldr	r1, [r4, #32]
 8011344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011346:	4643      	mov	r3, r8
 8011348:	463a      	mov	r2, r7
 801134a:	4628      	mov	r0, r5
 801134c:	47b0      	blx	r6
 801134e:	2800      	cmp	r0, #0
 8011350:	dc08      	bgt.n	8011364 <__sflush_r+0xfc>
 8011352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801135a:	81a3      	strh	r3, [r4, #12]
 801135c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011364:	4407      	add	r7, r0
 8011366:	eba8 0800 	sub.w	r8, r8, r0
 801136a:	e7e7      	b.n	801133c <__sflush_r+0xd4>
 801136c:	dfbffffe 	.word	0xdfbffffe

08011370 <_fflush_r>:
 8011370:	b538      	push	{r3, r4, r5, lr}
 8011372:	690b      	ldr	r3, [r1, #16]
 8011374:	4605      	mov	r5, r0
 8011376:	460c      	mov	r4, r1
 8011378:	b913      	cbnz	r3, 8011380 <_fflush_r+0x10>
 801137a:	2500      	movs	r5, #0
 801137c:	4628      	mov	r0, r5
 801137e:	bd38      	pop	{r3, r4, r5, pc}
 8011380:	b118      	cbz	r0, 801138a <_fflush_r+0x1a>
 8011382:	6a03      	ldr	r3, [r0, #32]
 8011384:	b90b      	cbnz	r3, 801138a <_fflush_r+0x1a>
 8011386:	f7fe fde3 	bl	800ff50 <__sinit>
 801138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d0f3      	beq.n	801137a <_fflush_r+0xa>
 8011392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011394:	07d0      	lsls	r0, r2, #31
 8011396:	d404      	bmi.n	80113a2 <_fflush_r+0x32>
 8011398:	0599      	lsls	r1, r3, #22
 801139a:	d402      	bmi.n	80113a2 <_fflush_r+0x32>
 801139c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801139e:	f7fe feba 	bl	8010116 <__retarget_lock_acquire_recursive>
 80113a2:	4628      	mov	r0, r5
 80113a4:	4621      	mov	r1, r4
 80113a6:	f7ff ff5f 	bl	8011268 <__sflush_r>
 80113aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113ac:	07da      	lsls	r2, r3, #31
 80113ae:	4605      	mov	r5, r0
 80113b0:	d4e4      	bmi.n	801137c <_fflush_r+0xc>
 80113b2:	89a3      	ldrh	r3, [r4, #12]
 80113b4:	059b      	lsls	r3, r3, #22
 80113b6:	d4e1      	bmi.n	801137c <_fflush_r+0xc>
 80113b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113ba:	f7fe fead 	bl	8010118 <__retarget_lock_release_recursive>
 80113be:	e7dd      	b.n	801137c <_fflush_r+0xc>

080113c0 <__malloc_lock>:
 80113c0:	4801      	ldr	r0, [pc, #4]	@ (80113c8 <__malloc_lock+0x8>)
 80113c2:	f7fe bea8 	b.w	8010116 <__retarget_lock_acquire_recursive>
 80113c6:	bf00      	nop
 80113c8:	20005c3c 	.word	0x20005c3c

080113cc <__malloc_unlock>:
 80113cc:	4801      	ldr	r0, [pc, #4]	@ (80113d4 <__malloc_unlock+0x8>)
 80113ce:	f7fe bea3 	b.w	8010118 <__retarget_lock_release_recursive>
 80113d2:	bf00      	nop
 80113d4:	20005c3c 	.word	0x20005c3c

080113d8 <_Balloc>:
 80113d8:	b570      	push	{r4, r5, r6, lr}
 80113da:	69c6      	ldr	r6, [r0, #28]
 80113dc:	4604      	mov	r4, r0
 80113de:	460d      	mov	r5, r1
 80113e0:	b976      	cbnz	r6, 8011400 <_Balloc+0x28>
 80113e2:	2010      	movs	r0, #16
 80113e4:	f7ff fe96 	bl	8011114 <malloc>
 80113e8:	4602      	mov	r2, r0
 80113ea:	61e0      	str	r0, [r4, #28]
 80113ec:	b920      	cbnz	r0, 80113f8 <_Balloc+0x20>
 80113ee:	4b18      	ldr	r3, [pc, #96]	@ (8011450 <_Balloc+0x78>)
 80113f0:	4818      	ldr	r0, [pc, #96]	@ (8011454 <_Balloc+0x7c>)
 80113f2:	216b      	movs	r1, #107	@ 0x6b
 80113f4:	f000 fc54 	bl	8011ca0 <__assert_func>
 80113f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113fc:	6006      	str	r6, [r0, #0]
 80113fe:	60c6      	str	r6, [r0, #12]
 8011400:	69e6      	ldr	r6, [r4, #28]
 8011402:	68f3      	ldr	r3, [r6, #12]
 8011404:	b183      	cbz	r3, 8011428 <_Balloc+0x50>
 8011406:	69e3      	ldr	r3, [r4, #28]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801140e:	b9b8      	cbnz	r0, 8011440 <_Balloc+0x68>
 8011410:	2101      	movs	r1, #1
 8011412:	fa01 f605 	lsl.w	r6, r1, r5
 8011416:	1d72      	adds	r2, r6, #5
 8011418:	0092      	lsls	r2, r2, #2
 801141a:	4620      	mov	r0, r4
 801141c:	f000 fc5e 	bl	8011cdc <_calloc_r>
 8011420:	b160      	cbz	r0, 801143c <_Balloc+0x64>
 8011422:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011426:	e00e      	b.n	8011446 <_Balloc+0x6e>
 8011428:	2221      	movs	r2, #33	@ 0x21
 801142a:	2104      	movs	r1, #4
 801142c:	4620      	mov	r0, r4
 801142e:	f000 fc55 	bl	8011cdc <_calloc_r>
 8011432:	69e3      	ldr	r3, [r4, #28]
 8011434:	60f0      	str	r0, [r6, #12]
 8011436:	68db      	ldr	r3, [r3, #12]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1e4      	bne.n	8011406 <_Balloc+0x2e>
 801143c:	2000      	movs	r0, #0
 801143e:	bd70      	pop	{r4, r5, r6, pc}
 8011440:	6802      	ldr	r2, [r0, #0]
 8011442:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011446:	2300      	movs	r3, #0
 8011448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801144c:	e7f7      	b.n	801143e <_Balloc+0x66>
 801144e:	bf00      	nop
 8011450:	080125b5 	.word	0x080125b5
 8011454:	08012646 	.word	0x08012646

08011458 <_Bfree>:
 8011458:	b570      	push	{r4, r5, r6, lr}
 801145a:	69c6      	ldr	r6, [r0, #28]
 801145c:	4605      	mov	r5, r0
 801145e:	460c      	mov	r4, r1
 8011460:	b976      	cbnz	r6, 8011480 <_Bfree+0x28>
 8011462:	2010      	movs	r0, #16
 8011464:	f7ff fe56 	bl	8011114 <malloc>
 8011468:	4602      	mov	r2, r0
 801146a:	61e8      	str	r0, [r5, #28]
 801146c:	b920      	cbnz	r0, 8011478 <_Bfree+0x20>
 801146e:	4b09      	ldr	r3, [pc, #36]	@ (8011494 <_Bfree+0x3c>)
 8011470:	4809      	ldr	r0, [pc, #36]	@ (8011498 <_Bfree+0x40>)
 8011472:	218f      	movs	r1, #143	@ 0x8f
 8011474:	f000 fc14 	bl	8011ca0 <__assert_func>
 8011478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801147c:	6006      	str	r6, [r0, #0]
 801147e:	60c6      	str	r6, [r0, #12]
 8011480:	b13c      	cbz	r4, 8011492 <_Bfree+0x3a>
 8011482:	69eb      	ldr	r3, [r5, #28]
 8011484:	6862      	ldr	r2, [r4, #4]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801148c:	6021      	str	r1, [r4, #0]
 801148e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011492:	bd70      	pop	{r4, r5, r6, pc}
 8011494:	080125b5 	.word	0x080125b5
 8011498:	08012646 	.word	0x08012646

0801149c <__multadd>:
 801149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a0:	690d      	ldr	r5, [r1, #16]
 80114a2:	4607      	mov	r7, r0
 80114a4:	460c      	mov	r4, r1
 80114a6:	461e      	mov	r6, r3
 80114a8:	f101 0c14 	add.w	ip, r1, #20
 80114ac:	2000      	movs	r0, #0
 80114ae:	f8dc 3000 	ldr.w	r3, [ip]
 80114b2:	b299      	uxth	r1, r3
 80114b4:	fb02 6101 	mla	r1, r2, r1, r6
 80114b8:	0c1e      	lsrs	r6, r3, #16
 80114ba:	0c0b      	lsrs	r3, r1, #16
 80114bc:	fb02 3306 	mla	r3, r2, r6, r3
 80114c0:	b289      	uxth	r1, r1
 80114c2:	3001      	adds	r0, #1
 80114c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80114c8:	4285      	cmp	r5, r0
 80114ca:	f84c 1b04 	str.w	r1, [ip], #4
 80114ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80114d2:	dcec      	bgt.n	80114ae <__multadd+0x12>
 80114d4:	b30e      	cbz	r6, 801151a <__multadd+0x7e>
 80114d6:	68a3      	ldr	r3, [r4, #8]
 80114d8:	42ab      	cmp	r3, r5
 80114da:	dc19      	bgt.n	8011510 <__multadd+0x74>
 80114dc:	6861      	ldr	r1, [r4, #4]
 80114de:	4638      	mov	r0, r7
 80114e0:	3101      	adds	r1, #1
 80114e2:	f7ff ff79 	bl	80113d8 <_Balloc>
 80114e6:	4680      	mov	r8, r0
 80114e8:	b928      	cbnz	r0, 80114f6 <__multadd+0x5a>
 80114ea:	4602      	mov	r2, r0
 80114ec:	4b0c      	ldr	r3, [pc, #48]	@ (8011520 <__multadd+0x84>)
 80114ee:	480d      	ldr	r0, [pc, #52]	@ (8011524 <__multadd+0x88>)
 80114f0:	21ba      	movs	r1, #186	@ 0xba
 80114f2:	f000 fbd5 	bl	8011ca0 <__assert_func>
 80114f6:	6922      	ldr	r2, [r4, #16]
 80114f8:	3202      	adds	r2, #2
 80114fa:	f104 010c 	add.w	r1, r4, #12
 80114fe:	0092      	lsls	r2, r2, #2
 8011500:	300c      	adds	r0, #12
 8011502:	f7fe fe0a 	bl	801011a <memcpy>
 8011506:	4621      	mov	r1, r4
 8011508:	4638      	mov	r0, r7
 801150a:	f7ff ffa5 	bl	8011458 <_Bfree>
 801150e:	4644      	mov	r4, r8
 8011510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011514:	3501      	adds	r5, #1
 8011516:	615e      	str	r6, [r3, #20]
 8011518:	6125      	str	r5, [r4, #16]
 801151a:	4620      	mov	r0, r4
 801151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011520:	08012624 	.word	0x08012624
 8011524:	08012646 	.word	0x08012646

08011528 <__hi0bits>:
 8011528:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801152c:	4603      	mov	r3, r0
 801152e:	bf36      	itet	cc
 8011530:	0403      	lslcc	r3, r0, #16
 8011532:	2000      	movcs	r0, #0
 8011534:	2010      	movcc	r0, #16
 8011536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801153a:	bf3c      	itt	cc
 801153c:	021b      	lslcc	r3, r3, #8
 801153e:	3008      	addcc	r0, #8
 8011540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011544:	bf3c      	itt	cc
 8011546:	011b      	lslcc	r3, r3, #4
 8011548:	3004      	addcc	r0, #4
 801154a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801154e:	bf3c      	itt	cc
 8011550:	009b      	lslcc	r3, r3, #2
 8011552:	3002      	addcc	r0, #2
 8011554:	2b00      	cmp	r3, #0
 8011556:	db05      	blt.n	8011564 <__hi0bits+0x3c>
 8011558:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801155c:	f100 0001 	add.w	r0, r0, #1
 8011560:	bf08      	it	eq
 8011562:	2020      	moveq	r0, #32
 8011564:	4770      	bx	lr

08011566 <__lo0bits>:
 8011566:	6803      	ldr	r3, [r0, #0]
 8011568:	4602      	mov	r2, r0
 801156a:	f013 0007 	ands.w	r0, r3, #7
 801156e:	d00b      	beq.n	8011588 <__lo0bits+0x22>
 8011570:	07d9      	lsls	r1, r3, #31
 8011572:	d421      	bmi.n	80115b8 <__lo0bits+0x52>
 8011574:	0798      	lsls	r0, r3, #30
 8011576:	bf49      	itett	mi
 8011578:	085b      	lsrmi	r3, r3, #1
 801157a:	089b      	lsrpl	r3, r3, #2
 801157c:	2001      	movmi	r0, #1
 801157e:	6013      	strmi	r3, [r2, #0]
 8011580:	bf5c      	itt	pl
 8011582:	6013      	strpl	r3, [r2, #0]
 8011584:	2002      	movpl	r0, #2
 8011586:	4770      	bx	lr
 8011588:	b299      	uxth	r1, r3
 801158a:	b909      	cbnz	r1, 8011590 <__lo0bits+0x2a>
 801158c:	0c1b      	lsrs	r3, r3, #16
 801158e:	2010      	movs	r0, #16
 8011590:	b2d9      	uxtb	r1, r3
 8011592:	b909      	cbnz	r1, 8011598 <__lo0bits+0x32>
 8011594:	3008      	adds	r0, #8
 8011596:	0a1b      	lsrs	r3, r3, #8
 8011598:	0719      	lsls	r1, r3, #28
 801159a:	bf04      	itt	eq
 801159c:	091b      	lsreq	r3, r3, #4
 801159e:	3004      	addeq	r0, #4
 80115a0:	0799      	lsls	r1, r3, #30
 80115a2:	bf04      	itt	eq
 80115a4:	089b      	lsreq	r3, r3, #2
 80115a6:	3002      	addeq	r0, #2
 80115a8:	07d9      	lsls	r1, r3, #31
 80115aa:	d403      	bmi.n	80115b4 <__lo0bits+0x4e>
 80115ac:	085b      	lsrs	r3, r3, #1
 80115ae:	f100 0001 	add.w	r0, r0, #1
 80115b2:	d003      	beq.n	80115bc <__lo0bits+0x56>
 80115b4:	6013      	str	r3, [r2, #0]
 80115b6:	4770      	bx	lr
 80115b8:	2000      	movs	r0, #0
 80115ba:	4770      	bx	lr
 80115bc:	2020      	movs	r0, #32
 80115be:	4770      	bx	lr

080115c0 <__i2b>:
 80115c0:	b510      	push	{r4, lr}
 80115c2:	460c      	mov	r4, r1
 80115c4:	2101      	movs	r1, #1
 80115c6:	f7ff ff07 	bl	80113d8 <_Balloc>
 80115ca:	4602      	mov	r2, r0
 80115cc:	b928      	cbnz	r0, 80115da <__i2b+0x1a>
 80115ce:	4b05      	ldr	r3, [pc, #20]	@ (80115e4 <__i2b+0x24>)
 80115d0:	4805      	ldr	r0, [pc, #20]	@ (80115e8 <__i2b+0x28>)
 80115d2:	f240 1145 	movw	r1, #325	@ 0x145
 80115d6:	f000 fb63 	bl	8011ca0 <__assert_func>
 80115da:	2301      	movs	r3, #1
 80115dc:	6144      	str	r4, [r0, #20]
 80115de:	6103      	str	r3, [r0, #16]
 80115e0:	bd10      	pop	{r4, pc}
 80115e2:	bf00      	nop
 80115e4:	08012624 	.word	0x08012624
 80115e8:	08012646 	.word	0x08012646

080115ec <__multiply>:
 80115ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f0:	4614      	mov	r4, r2
 80115f2:	690a      	ldr	r2, [r1, #16]
 80115f4:	6923      	ldr	r3, [r4, #16]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	bfa8      	it	ge
 80115fa:	4623      	movge	r3, r4
 80115fc:	460f      	mov	r7, r1
 80115fe:	bfa4      	itt	ge
 8011600:	460c      	movge	r4, r1
 8011602:	461f      	movge	r7, r3
 8011604:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011608:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801160c:	68a3      	ldr	r3, [r4, #8]
 801160e:	6861      	ldr	r1, [r4, #4]
 8011610:	eb0a 0609 	add.w	r6, sl, r9
 8011614:	42b3      	cmp	r3, r6
 8011616:	b085      	sub	sp, #20
 8011618:	bfb8      	it	lt
 801161a:	3101      	addlt	r1, #1
 801161c:	f7ff fedc 	bl	80113d8 <_Balloc>
 8011620:	b930      	cbnz	r0, 8011630 <__multiply+0x44>
 8011622:	4602      	mov	r2, r0
 8011624:	4b44      	ldr	r3, [pc, #272]	@ (8011738 <__multiply+0x14c>)
 8011626:	4845      	ldr	r0, [pc, #276]	@ (801173c <__multiply+0x150>)
 8011628:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801162c:	f000 fb38 	bl	8011ca0 <__assert_func>
 8011630:	f100 0514 	add.w	r5, r0, #20
 8011634:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011638:	462b      	mov	r3, r5
 801163a:	2200      	movs	r2, #0
 801163c:	4543      	cmp	r3, r8
 801163e:	d321      	bcc.n	8011684 <__multiply+0x98>
 8011640:	f107 0114 	add.w	r1, r7, #20
 8011644:	f104 0214 	add.w	r2, r4, #20
 8011648:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801164c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011650:	9302      	str	r3, [sp, #8]
 8011652:	1b13      	subs	r3, r2, r4
 8011654:	3b15      	subs	r3, #21
 8011656:	f023 0303 	bic.w	r3, r3, #3
 801165a:	3304      	adds	r3, #4
 801165c:	f104 0715 	add.w	r7, r4, #21
 8011660:	42ba      	cmp	r2, r7
 8011662:	bf38      	it	cc
 8011664:	2304      	movcc	r3, #4
 8011666:	9301      	str	r3, [sp, #4]
 8011668:	9b02      	ldr	r3, [sp, #8]
 801166a:	9103      	str	r1, [sp, #12]
 801166c:	428b      	cmp	r3, r1
 801166e:	d80c      	bhi.n	801168a <__multiply+0x9e>
 8011670:	2e00      	cmp	r6, #0
 8011672:	dd03      	ble.n	801167c <__multiply+0x90>
 8011674:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011678:	2b00      	cmp	r3, #0
 801167a:	d05b      	beq.n	8011734 <__multiply+0x148>
 801167c:	6106      	str	r6, [r0, #16]
 801167e:	b005      	add	sp, #20
 8011680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011684:	f843 2b04 	str.w	r2, [r3], #4
 8011688:	e7d8      	b.n	801163c <__multiply+0x50>
 801168a:	f8b1 a000 	ldrh.w	sl, [r1]
 801168e:	f1ba 0f00 	cmp.w	sl, #0
 8011692:	d024      	beq.n	80116de <__multiply+0xf2>
 8011694:	f104 0e14 	add.w	lr, r4, #20
 8011698:	46a9      	mov	r9, r5
 801169a:	f04f 0c00 	mov.w	ip, #0
 801169e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80116a2:	f8d9 3000 	ldr.w	r3, [r9]
 80116a6:	fa1f fb87 	uxth.w	fp, r7
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80116b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80116b4:	f8d9 7000 	ldr.w	r7, [r9]
 80116b8:	4463      	add	r3, ip
 80116ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80116be:	fb0a c70b 	mla	r7, sl, fp, ip
 80116c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80116cc:	4572      	cmp	r2, lr
 80116ce:	f849 3b04 	str.w	r3, [r9], #4
 80116d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80116d6:	d8e2      	bhi.n	801169e <__multiply+0xb2>
 80116d8:	9b01      	ldr	r3, [sp, #4]
 80116da:	f845 c003 	str.w	ip, [r5, r3]
 80116de:	9b03      	ldr	r3, [sp, #12]
 80116e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80116e4:	3104      	adds	r1, #4
 80116e6:	f1b9 0f00 	cmp.w	r9, #0
 80116ea:	d021      	beq.n	8011730 <__multiply+0x144>
 80116ec:	682b      	ldr	r3, [r5, #0]
 80116ee:	f104 0c14 	add.w	ip, r4, #20
 80116f2:	46ae      	mov	lr, r5
 80116f4:	f04f 0a00 	mov.w	sl, #0
 80116f8:	f8bc b000 	ldrh.w	fp, [ip]
 80116fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011700:	fb09 770b 	mla	r7, r9, fp, r7
 8011704:	4457      	add	r7, sl
 8011706:	b29b      	uxth	r3, r3
 8011708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801170c:	f84e 3b04 	str.w	r3, [lr], #4
 8011710:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011714:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011718:	f8be 3000 	ldrh.w	r3, [lr]
 801171c:	fb09 330a 	mla	r3, r9, sl, r3
 8011720:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011724:	4562      	cmp	r2, ip
 8011726:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801172a:	d8e5      	bhi.n	80116f8 <__multiply+0x10c>
 801172c:	9f01      	ldr	r7, [sp, #4]
 801172e:	51eb      	str	r3, [r5, r7]
 8011730:	3504      	adds	r5, #4
 8011732:	e799      	b.n	8011668 <__multiply+0x7c>
 8011734:	3e01      	subs	r6, #1
 8011736:	e79b      	b.n	8011670 <__multiply+0x84>
 8011738:	08012624 	.word	0x08012624
 801173c:	08012646 	.word	0x08012646

08011740 <__pow5mult>:
 8011740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011744:	4615      	mov	r5, r2
 8011746:	f012 0203 	ands.w	r2, r2, #3
 801174a:	4607      	mov	r7, r0
 801174c:	460e      	mov	r6, r1
 801174e:	d007      	beq.n	8011760 <__pow5mult+0x20>
 8011750:	4c25      	ldr	r4, [pc, #148]	@ (80117e8 <__pow5mult+0xa8>)
 8011752:	3a01      	subs	r2, #1
 8011754:	2300      	movs	r3, #0
 8011756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801175a:	f7ff fe9f 	bl	801149c <__multadd>
 801175e:	4606      	mov	r6, r0
 8011760:	10ad      	asrs	r5, r5, #2
 8011762:	d03d      	beq.n	80117e0 <__pow5mult+0xa0>
 8011764:	69fc      	ldr	r4, [r7, #28]
 8011766:	b97c      	cbnz	r4, 8011788 <__pow5mult+0x48>
 8011768:	2010      	movs	r0, #16
 801176a:	f7ff fcd3 	bl	8011114 <malloc>
 801176e:	4602      	mov	r2, r0
 8011770:	61f8      	str	r0, [r7, #28]
 8011772:	b928      	cbnz	r0, 8011780 <__pow5mult+0x40>
 8011774:	4b1d      	ldr	r3, [pc, #116]	@ (80117ec <__pow5mult+0xac>)
 8011776:	481e      	ldr	r0, [pc, #120]	@ (80117f0 <__pow5mult+0xb0>)
 8011778:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801177c:	f000 fa90 	bl	8011ca0 <__assert_func>
 8011780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011784:	6004      	str	r4, [r0, #0]
 8011786:	60c4      	str	r4, [r0, #12]
 8011788:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801178c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011790:	b94c      	cbnz	r4, 80117a6 <__pow5mult+0x66>
 8011792:	f240 2171 	movw	r1, #625	@ 0x271
 8011796:	4638      	mov	r0, r7
 8011798:	f7ff ff12 	bl	80115c0 <__i2b>
 801179c:	2300      	movs	r3, #0
 801179e:	f8c8 0008 	str.w	r0, [r8, #8]
 80117a2:	4604      	mov	r4, r0
 80117a4:	6003      	str	r3, [r0, #0]
 80117a6:	f04f 0900 	mov.w	r9, #0
 80117aa:	07eb      	lsls	r3, r5, #31
 80117ac:	d50a      	bpl.n	80117c4 <__pow5mult+0x84>
 80117ae:	4631      	mov	r1, r6
 80117b0:	4622      	mov	r2, r4
 80117b2:	4638      	mov	r0, r7
 80117b4:	f7ff ff1a 	bl	80115ec <__multiply>
 80117b8:	4631      	mov	r1, r6
 80117ba:	4680      	mov	r8, r0
 80117bc:	4638      	mov	r0, r7
 80117be:	f7ff fe4b 	bl	8011458 <_Bfree>
 80117c2:	4646      	mov	r6, r8
 80117c4:	106d      	asrs	r5, r5, #1
 80117c6:	d00b      	beq.n	80117e0 <__pow5mult+0xa0>
 80117c8:	6820      	ldr	r0, [r4, #0]
 80117ca:	b938      	cbnz	r0, 80117dc <__pow5mult+0x9c>
 80117cc:	4622      	mov	r2, r4
 80117ce:	4621      	mov	r1, r4
 80117d0:	4638      	mov	r0, r7
 80117d2:	f7ff ff0b 	bl	80115ec <__multiply>
 80117d6:	6020      	str	r0, [r4, #0]
 80117d8:	f8c0 9000 	str.w	r9, [r0]
 80117dc:	4604      	mov	r4, r0
 80117de:	e7e4      	b.n	80117aa <__pow5mult+0x6a>
 80117e0:	4630      	mov	r0, r6
 80117e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117e6:	bf00      	nop
 80117e8:	080126a0 	.word	0x080126a0
 80117ec:	080125b5 	.word	0x080125b5
 80117f0:	08012646 	.word	0x08012646

080117f4 <__lshift>:
 80117f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f8:	460c      	mov	r4, r1
 80117fa:	6849      	ldr	r1, [r1, #4]
 80117fc:	6923      	ldr	r3, [r4, #16]
 80117fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011802:	68a3      	ldr	r3, [r4, #8]
 8011804:	4607      	mov	r7, r0
 8011806:	4691      	mov	r9, r2
 8011808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801180c:	f108 0601 	add.w	r6, r8, #1
 8011810:	42b3      	cmp	r3, r6
 8011812:	db0b      	blt.n	801182c <__lshift+0x38>
 8011814:	4638      	mov	r0, r7
 8011816:	f7ff fddf 	bl	80113d8 <_Balloc>
 801181a:	4605      	mov	r5, r0
 801181c:	b948      	cbnz	r0, 8011832 <__lshift+0x3e>
 801181e:	4602      	mov	r2, r0
 8011820:	4b28      	ldr	r3, [pc, #160]	@ (80118c4 <__lshift+0xd0>)
 8011822:	4829      	ldr	r0, [pc, #164]	@ (80118c8 <__lshift+0xd4>)
 8011824:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011828:	f000 fa3a 	bl	8011ca0 <__assert_func>
 801182c:	3101      	adds	r1, #1
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	e7ee      	b.n	8011810 <__lshift+0x1c>
 8011832:	2300      	movs	r3, #0
 8011834:	f100 0114 	add.w	r1, r0, #20
 8011838:	f100 0210 	add.w	r2, r0, #16
 801183c:	4618      	mov	r0, r3
 801183e:	4553      	cmp	r3, sl
 8011840:	db33      	blt.n	80118aa <__lshift+0xb6>
 8011842:	6920      	ldr	r0, [r4, #16]
 8011844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011848:	f104 0314 	add.w	r3, r4, #20
 801184c:	f019 091f 	ands.w	r9, r9, #31
 8011850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011854:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011858:	d02b      	beq.n	80118b2 <__lshift+0xbe>
 801185a:	f1c9 0e20 	rsb	lr, r9, #32
 801185e:	468a      	mov	sl, r1
 8011860:	2200      	movs	r2, #0
 8011862:	6818      	ldr	r0, [r3, #0]
 8011864:	fa00 f009 	lsl.w	r0, r0, r9
 8011868:	4310      	orrs	r0, r2
 801186a:	f84a 0b04 	str.w	r0, [sl], #4
 801186e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011872:	459c      	cmp	ip, r3
 8011874:	fa22 f20e 	lsr.w	r2, r2, lr
 8011878:	d8f3      	bhi.n	8011862 <__lshift+0x6e>
 801187a:	ebac 0304 	sub.w	r3, ip, r4
 801187e:	3b15      	subs	r3, #21
 8011880:	f023 0303 	bic.w	r3, r3, #3
 8011884:	3304      	adds	r3, #4
 8011886:	f104 0015 	add.w	r0, r4, #21
 801188a:	4584      	cmp	ip, r0
 801188c:	bf38      	it	cc
 801188e:	2304      	movcc	r3, #4
 8011890:	50ca      	str	r2, [r1, r3]
 8011892:	b10a      	cbz	r2, 8011898 <__lshift+0xa4>
 8011894:	f108 0602 	add.w	r6, r8, #2
 8011898:	3e01      	subs	r6, #1
 801189a:	4638      	mov	r0, r7
 801189c:	612e      	str	r6, [r5, #16]
 801189e:	4621      	mov	r1, r4
 80118a0:	f7ff fdda 	bl	8011458 <_Bfree>
 80118a4:	4628      	mov	r0, r5
 80118a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80118ae:	3301      	adds	r3, #1
 80118b0:	e7c5      	b.n	801183e <__lshift+0x4a>
 80118b2:	3904      	subs	r1, #4
 80118b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80118b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80118bc:	459c      	cmp	ip, r3
 80118be:	d8f9      	bhi.n	80118b4 <__lshift+0xc0>
 80118c0:	e7ea      	b.n	8011898 <__lshift+0xa4>
 80118c2:	bf00      	nop
 80118c4:	08012624 	.word	0x08012624
 80118c8:	08012646 	.word	0x08012646

080118cc <__mcmp>:
 80118cc:	690a      	ldr	r2, [r1, #16]
 80118ce:	4603      	mov	r3, r0
 80118d0:	6900      	ldr	r0, [r0, #16]
 80118d2:	1a80      	subs	r0, r0, r2
 80118d4:	b530      	push	{r4, r5, lr}
 80118d6:	d10e      	bne.n	80118f6 <__mcmp+0x2a>
 80118d8:	3314      	adds	r3, #20
 80118da:	3114      	adds	r1, #20
 80118dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80118e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80118e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80118e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80118ec:	4295      	cmp	r5, r2
 80118ee:	d003      	beq.n	80118f8 <__mcmp+0x2c>
 80118f0:	d205      	bcs.n	80118fe <__mcmp+0x32>
 80118f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80118f6:	bd30      	pop	{r4, r5, pc}
 80118f8:	42a3      	cmp	r3, r4
 80118fa:	d3f3      	bcc.n	80118e4 <__mcmp+0x18>
 80118fc:	e7fb      	b.n	80118f6 <__mcmp+0x2a>
 80118fe:	2001      	movs	r0, #1
 8011900:	e7f9      	b.n	80118f6 <__mcmp+0x2a>
	...

08011904 <__mdiff>:
 8011904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011908:	4689      	mov	r9, r1
 801190a:	4606      	mov	r6, r0
 801190c:	4611      	mov	r1, r2
 801190e:	4648      	mov	r0, r9
 8011910:	4614      	mov	r4, r2
 8011912:	f7ff ffdb 	bl	80118cc <__mcmp>
 8011916:	1e05      	subs	r5, r0, #0
 8011918:	d112      	bne.n	8011940 <__mdiff+0x3c>
 801191a:	4629      	mov	r1, r5
 801191c:	4630      	mov	r0, r6
 801191e:	f7ff fd5b 	bl	80113d8 <_Balloc>
 8011922:	4602      	mov	r2, r0
 8011924:	b928      	cbnz	r0, 8011932 <__mdiff+0x2e>
 8011926:	4b3f      	ldr	r3, [pc, #252]	@ (8011a24 <__mdiff+0x120>)
 8011928:	f240 2137 	movw	r1, #567	@ 0x237
 801192c:	483e      	ldr	r0, [pc, #248]	@ (8011a28 <__mdiff+0x124>)
 801192e:	f000 f9b7 	bl	8011ca0 <__assert_func>
 8011932:	2301      	movs	r3, #1
 8011934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011938:	4610      	mov	r0, r2
 801193a:	b003      	add	sp, #12
 801193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011940:	bfbc      	itt	lt
 8011942:	464b      	movlt	r3, r9
 8011944:	46a1      	movlt	r9, r4
 8011946:	4630      	mov	r0, r6
 8011948:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801194c:	bfba      	itte	lt
 801194e:	461c      	movlt	r4, r3
 8011950:	2501      	movlt	r5, #1
 8011952:	2500      	movge	r5, #0
 8011954:	f7ff fd40 	bl	80113d8 <_Balloc>
 8011958:	4602      	mov	r2, r0
 801195a:	b918      	cbnz	r0, 8011964 <__mdiff+0x60>
 801195c:	4b31      	ldr	r3, [pc, #196]	@ (8011a24 <__mdiff+0x120>)
 801195e:	f240 2145 	movw	r1, #581	@ 0x245
 8011962:	e7e3      	b.n	801192c <__mdiff+0x28>
 8011964:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011968:	6926      	ldr	r6, [r4, #16]
 801196a:	60c5      	str	r5, [r0, #12]
 801196c:	f109 0310 	add.w	r3, r9, #16
 8011970:	f109 0514 	add.w	r5, r9, #20
 8011974:	f104 0e14 	add.w	lr, r4, #20
 8011978:	f100 0b14 	add.w	fp, r0, #20
 801197c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011980:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011984:	9301      	str	r3, [sp, #4]
 8011986:	46d9      	mov	r9, fp
 8011988:	f04f 0c00 	mov.w	ip, #0
 801198c:	9b01      	ldr	r3, [sp, #4]
 801198e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011992:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011996:	9301      	str	r3, [sp, #4]
 8011998:	fa1f f38a 	uxth.w	r3, sl
 801199c:	4619      	mov	r1, r3
 801199e:	b283      	uxth	r3, r0
 80119a0:	1acb      	subs	r3, r1, r3
 80119a2:	0c00      	lsrs	r0, r0, #16
 80119a4:	4463      	add	r3, ip
 80119a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80119aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80119b4:	4576      	cmp	r6, lr
 80119b6:	f849 3b04 	str.w	r3, [r9], #4
 80119ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80119be:	d8e5      	bhi.n	801198c <__mdiff+0x88>
 80119c0:	1b33      	subs	r3, r6, r4
 80119c2:	3b15      	subs	r3, #21
 80119c4:	f023 0303 	bic.w	r3, r3, #3
 80119c8:	3415      	adds	r4, #21
 80119ca:	3304      	adds	r3, #4
 80119cc:	42a6      	cmp	r6, r4
 80119ce:	bf38      	it	cc
 80119d0:	2304      	movcc	r3, #4
 80119d2:	441d      	add	r5, r3
 80119d4:	445b      	add	r3, fp
 80119d6:	461e      	mov	r6, r3
 80119d8:	462c      	mov	r4, r5
 80119da:	4544      	cmp	r4, r8
 80119dc:	d30e      	bcc.n	80119fc <__mdiff+0xf8>
 80119de:	f108 0103 	add.w	r1, r8, #3
 80119e2:	1b49      	subs	r1, r1, r5
 80119e4:	f021 0103 	bic.w	r1, r1, #3
 80119e8:	3d03      	subs	r5, #3
 80119ea:	45a8      	cmp	r8, r5
 80119ec:	bf38      	it	cc
 80119ee:	2100      	movcc	r1, #0
 80119f0:	440b      	add	r3, r1
 80119f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80119f6:	b191      	cbz	r1, 8011a1e <__mdiff+0x11a>
 80119f8:	6117      	str	r7, [r2, #16]
 80119fa:	e79d      	b.n	8011938 <__mdiff+0x34>
 80119fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011a00:	46e6      	mov	lr, ip
 8011a02:	0c08      	lsrs	r0, r1, #16
 8011a04:	fa1c fc81 	uxtah	ip, ip, r1
 8011a08:	4471      	add	r1, lr
 8011a0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011a0e:	b289      	uxth	r1, r1
 8011a10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011a14:	f846 1b04 	str.w	r1, [r6], #4
 8011a18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011a1c:	e7dd      	b.n	80119da <__mdiff+0xd6>
 8011a1e:	3f01      	subs	r7, #1
 8011a20:	e7e7      	b.n	80119f2 <__mdiff+0xee>
 8011a22:	bf00      	nop
 8011a24:	08012624 	.word	0x08012624
 8011a28:	08012646 	.word	0x08012646

08011a2c <__d2b>:
 8011a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a30:	460f      	mov	r7, r1
 8011a32:	2101      	movs	r1, #1
 8011a34:	ec59 8b10 	vmov	r8, r9, d0
 8011a38:	4616      	mov	r6, r2
 8011a3a:	f7ff fccd 	bl	80113d8 <_Balloc>
 8011a3e:	4604      	mov	r4, r0
 8011a40:	b930      	cbnz	r0, 8011a50 <__d2b+0x24>
 8011a42:	4602      	mov	r2, r0
 8011a44:	4b23      	ldr	r3, [pc, #140]	@ (8011ad4 <__d2b+0xa8>)
 8011a46:	4824      	ldr	r0, [pc, #144]	@ (8011ad8 <__d2b+0xac>)
 8011a48:	f240 310f 	movw	r1, #783	@ 0x30f
 8011a4c:	f000 f928 	bl	8011ca0 <__assert_func>
 8011a50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011a54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a58:	b10d      	cbz	r5, 8011a5e <__d2b+0x32>
 8011a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a5e:	9301      	str	r3, [sp, #4]
 8011a60:	f1b8 0300 	subs.w	r3, r8, #0
 8011a64:	d023      	beq.n	8011aae <__d2b+0x82>
 8011a66:	4668      	mov	r0, sp
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	f7ff fd7c 	bl	8011566 <__lo0bits>
 8011a6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011a72:	b1d0      	cbz	r0, 8011aaa <__d2b+0x7e>
 8011a74:	f1c0 0320 	rsb	r3, r0, #32
 8011a78:	fa02 f303 	lsl.w	r3, r2, r3
 8011a7c:	430b      	orrs	r3, r1
 8011a7e:	40c2      	lsrs	r2, r0
 8011a80:	6163      	str	r3, [r4, #20]
 8011a82:	9201      	str	r2, [sp, #4]
 8011a84:	9b01      	ldr	r3, [sp, #4]
 8011a86:	61a3      	str	r3, [r4, #24]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	bf0c      	ite	eq
 8011a8c:	2201      	moveq	r2, #1
 8011a8e:	2202      	movne	r2, #2
 8011a90:	6122      	str	r2, [r4, #16]
 8011a92:	b1a5      	cbz	r5, 8011abe <__d2b+0x92>
 8011a94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011a98:	4405      	add	r5, r0
 8011a9a:	603d      	str	r5, [r7, #0]
 8011a9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011aa0:	6030      	str	r0, [r6, #0]
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	b003      	add	sp, #12
 8011aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011aaa:	6161      	str	r1, [r4, #20]
 8011aac:	e7ea      	b.n	8011a84 <__d2b+0x58>
 8011aae:	a801      	add	r0, sp, #4
 8011ab0:	f7ff fd59 	bl	8011566 <__lo0bits>
 8011ab4:	9b01      	ldr	r3, [sp, #4]
 8011ab6:	6163      	str	r3, [r4, #20]
 8011ab8:	3020      	adds	r0, #32
 8011aba:	2201      	movs	r2, #1
 8011abc:	e7e8      	b.n	8011a90 <__d2b+0x64>
 8011abe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ac2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011ac6:	6038      	str	r0, [r7, #0]
 8011ac8:	6918      	ldr	r0, [r3, #16]
 8011aca:	f7ff fd2d 	bl	8011528 <__hi0bits>
 8011ace:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ad2:	e7e5      	b.n	8011aa0 <__d2b+0x74>
 8011ad4:	08012624 	.word	0x08012624
 8011ad8:	08012646 	.word	0x08012646

08011adc <__sread>:
 8011adc:	b510      	push	{r4, lr}
 8011ade:	460c      	mov	r4, r1
 8011ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ae4:	f000 f8a8 	bl	8011c38 <_read_r>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	bfab      	itete	ge
 8011aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011aee:	89a3      	ldrhlt	r3, [r4, #12]
 8011af0:	181b      	addge	r3, r3, r0
 8011af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011af6:	bfac      	ite	ge
 8011af8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011afa:	81a3      	strhlt	r3, [r4, #12]
 8011afc:	bd10      	pop	{r4, pc}

08011afe <__swrite>:
 8011afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b02:	461f      	mov	r7, r3
 8011b04:	898b      	ldrh	r3, [r1, #12]
 8011b06:	05db      	lsls	r3, r3, #23
 8011b08:	4605      	mov	r5, r0
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	4616      	mov	r6, r2
 8011b0e:	d505      	bpl.n	8011b1c <__swrite+0x1e>
 8011b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b14:	2302      	movs	r3, #2
 8011b16:	2200      	movs	r2, #0
 8011b18:	f000 f87c 	bl	8011c14 <_lseek_r>
 8011b1c:	89a3      	ldrh	r3, [r4, #12]
 8011b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b26:	81a3      	strh	r3, [r4, #12]
 8011b28:	4632      	mov	r2, r6
 8011b2a:	463b      	mov	r3, r7
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b32:	f000 b8a3 	b.w	8011c7c <_write_r>

08011b36 <__sseek>:
 8011b36:	b510      	push	{r4, lr}
 8011b38:	460c      	mov	r4, r1
 8011b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b3e:	f000 f869 	bl	8011c14 <_lseek_r>
 8011b42:	1c43      	adds	r3, r0, #1
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	bf15      	itete	ne
 8011b48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011b52:	81a3      	strheq	r3, [r4, #12]
 8011b54:	bf18      	it	ne
 8011b56:	81a3      	strhne	r3, [r4, #12]
 8011b58:	bd10      	pop	{r4, pc}

08011b5a <__sclose>:
 8011b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b5e:	f000 b849 	b.w	8011bf4 <_close_r>

08011b62 <_realloc_r>:
 8011b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b66:	4680      	mov	r8, r0
 8011b68:	4615      	mov	r5, r2
 8011b6a:	460c      	mov	r4, r1
 8011b6c:	b921      	cbnz	r1, 8011b78 <_realloc_r+0x16>
 8011b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b72:	4611      	mov	r1, r2
 8011b74:	f7ff baf8 	b.w	8011168 <_malloc_r>
 8011b78:	b92a      	cbnz	r2, 8011b86 <_realloc_r+0x24>
 8011b7a:	f7ff f929 	bl	8010dd0 <_free_r>
 8011b7e:	2400      	movs	r4, #0
 8011b80:	4620      	mov	r0, r4
 8011b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b86:	f000 f8cf 	bl	8011d28 <_malloc_usable_size_r>
 8011b8a:	4285      	cmp	r5, r0
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	d802      	bhi.n	8011b96 <_realloc_r+0x34>
 8011b90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011b94:	d8f4      	bhi.n	8011b80 <_realloc_r+0x1e>
 8011b96:	4629      	mov	r1, r5
 8011b98:	4640      	mov	r0, r8
 8011b9a:	f7ff fae5 	bl	8011168 <_malloc_r>
 8011b9e:	4607      	mov	r7, r0
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d0ec      	beq.n	8011b7e <_realloc_r+0x1c>
 8011ba4:	42b5      	cmp	r5, r6
 8011ba6:	462a      	mov	r2, r5
 8011ba8:	4621      	mov	r1, r4
 8011baa:	bf28      	it	cs
 8011bac:	4632      	movcs	r2, r6
 8011bae:	f7fe fab4 	bl	801011a <memcpy>
 8011bb2:	4621      	mov	r1, r4
 8011bb4:	4640      	mov	r0, r8
 8011bb6:	f7ff f90b 	bl	8010dd0 <_free_r>
 8011bba:	463c      	mov	r4, r7
 8011bbc:	e7e0      	b.n	8011b80 <_realloc_r+0x1e>

08011bbe <memmove>:
 8011bbe:	4288      	cmp	r0, r1
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	eb01 0402 	add.w	r4, r1, r2
 8011bc6:	d902      	bls.n	8011bce <memmove+0x10>
 8011bc8:	4284      	cmp	r4, r0
 8011bca:	4623      	mov	r3, r4
 8011bcc:	d807      	bhi.n	8011bde <memmove+0x20>
 8011bce:	1e43      	subs	r3, r0, #1
 8011bd0:	42a1      	cmp	r1, r4
 8011bd2:	d008      	beq.n	8011be6 <memmove+0x28>
 8011bd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bdc:	e7f8      	b.n	8011bd0 <memmove+0x12>
 8011bde:	4402      	add	r2, r0
 8011be0:	4601      	mov	r1, r0
 8011be2:	428a      	cmp	r2, r1
 8011be4:	d100      	bne.n	8011be8 <memmove+0x2a>
 8011be6:	bd10      	pop	{r4, pc}
 8011be8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bf0:	e7f7      	b.n	8011be2 <memmove+0x24>
	...

08011bf4 <_close_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	4d06      	ldr	r5, [pc, #24]	@ (8011c10 <_close_r+0x1c>)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	602b      	str	r3, [r5, #0]
 8011c00:	f7f4 fd02 	bl	8006608 <_close>
 8011c04:	1c43      	adds	r3, r0, #1
 8011c06:	d102      	bne.n	8011c0e <_close_r+0x1a>
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	b103      	cbz	r3, 8011c0e <_close_r+0x1a>
 8011c0c:	6023      	str	r3, [r4, #0]
 8011c0e:	bd38      	pop	{r3, r4, r5, pc}
 8011c10:	20005c38 	.word	0x20005c38

08011c14 <_lseek_r>:
 8011c14:	b538      	push	{r3, r4, r5, lr}
 8011c16:	4d07      	ldr	r5, [pc, #28]	@ (8011c34 <_lseek_r+0x20>)
 8011c18:	4604      	mov	r4, r0
 8011c1a:	4608      	mov	r0, r1
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	2200      	movs	r2, #0
 8011c20:	602a      	str	r2, [r5, #0]
 8011c22:	461a      	mov	r2, r3
 8011c24:	f7f4 fd17 	bl	8006656 <_lseek>
 8011c28:	1c43      	adds	r3, r0, #1
 8011c2a:	d102      	bne.n	8011c32 <_lseek_r+0x1e>
 8011c2c:	682b      	ldr	r3, [r5, #0]
 8011c2e:	b103      	cbz	r3, 8011c32 <_lseek_r+0x1e>
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	bd38      	pop	{r3, r4, r5, pc}
 8011c34:	20005c38 	.word	0x20005c38

08011c38 <_read_r>:
 8011c38:	b538      	push	{r3, r4, r5, lr}
 8011c3a:	4d07      	ldr	r5, [pc, #28]	@ (8011c58 <_read_r+0x20>)
 8011c3c:	4604      	mov	r4, r0
 8011c3e:	4608      	mov	r0, r1
 8011c40:	4611      	mov	r1, r2
 8011c42:	2200      	movs	r2, #0
 8011c44:	602a      	str	r2, [r5, #0]
 8011c46:	461a      	mov	r2, r3
 8011c48:	f7f4 fca5 	bl	8006596 <_read>
 8011c4c:	1c43      	adds	r3, r0, #1
 8011c4e:	d102      	bne.n	8011c56 <_read_r+0x1e>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	b103      	cbz	r3, 8011c56 <_read_r+0x1e>
 8011c54:	6023      	str	r3, [r4, #0]
 8011c56:	bd38      	pop	{r3, r4, r5, pc}
 8011c58:	20005c38 	.word	0x20005c38

08011c5c <_sbrk_r>:
 8011c5c:	b538      	push	{r3, r4, r5, lr}
 8011c5e:	4d06      	ldr	r5, [pc, #24]	@ (8011c78 <_sbrk_r+0x1c>)
 8011c60:	2300      	movs	r3, #0
 8011c62:	4604      	mov	r4, r0
 8011c64:	4608      	mov	r0, r1
 8011c66:	602b      	str	r3, [r5, #0]
 8011c68:	f7f4 fd02 	bl	8006670 <_sbrk>
 8011c6c:	1c43      	adds	r3, r0, #1
 8011c6e:	d102      	bne.n	8011c76 <_sbrk_r+0x1a>
 8011c70:	682b      	ldr	r3, [r5, #0]
 8011c72:	b103      	cbz	r3, 8011c76 <_sbrk_r+0x1a>
 8011c74:	6023      	str	r3, [r4, #0]
 8011c76:	bd38      	pop	{r3, r4, r5, pc}
 8011c78:	20005c38 	.word	0x20005c38

08011c7c <_write_r>:
 8011c7c:	b538      	push	{r3, r4, r5, lr}
 8011c7e:	4d07      	ldr	r5, [pc, #28]	@ (8011c9c <_write_r+0x20>)
 8011c80:	4604      	mov	r4, r0
 8011c82:	4608      	mov	r0, r1
 8011c84:	4611      	mov	r1, r2
 8011c86:	2200      	movs	r2, #0
 8011c88:	602a      	str	r2, [r5, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	f7f4 fca0 	bl	80065d0 <_write>
 8011c90:	1c43      	adds	r3, r0, #1
 8011c92:	d102      	bne.n	8011c9a <_write_r+0x1e>
 8011c94:	682b      	ldr	r3, [r5, #0]
 8011c96:	b103      	cbz	r3, 8011c9a <_write_r+0x1e>
 8011c98:	6023      	str	r3, [r4, #0]
 8011c9a:	bd38      	pop	{r3, r4, r5, pc}
 8011c9c:	20005c38 	.word	0x20005c38

08011ca0 <__assert_func>:
 8011ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ca2:	4614      	mov	r4, r2
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	4b09      	ldr	r3, [pc, #36]	@ (8011ccc <__assert_func+0x2c>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4605      	mov	r5, r0
 8011cac:	68d8      	ldr	r0, [r3, #12]
 8011cae:	b954      	cbnz	r4, 8011cc6 <__assert_func+0x26>
 8011cb0:	4b07      	ldr	r3, [pc, #28]	@ (8011cd0 <__assert_func+0x30>)
 8011cb2:	461c      	mov	r4, r3
 8011cb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cb8:	9100      	str	r1, [sp, #0]
 8011cba:	462b      	mov	r3, r5
 8011cbc:	4905      	ldr	r1, [pc, #20]	@ (8011cd4 <__assert_func+0x34>)
 8011cbe:	f000 f83b 	bl	8011d38 <fiprintf>
 8011cc2:	f000 f858 	bl	8011d76 <abort>
 8011cc6:	4b04      	ldr	r3, [pc, #16]	@ (8011cd8 <__assert_func+0x38>)
 8011cc8:	e7f4      	b.n	8011cb4 <__assert_func+0x14>
 8011cca:	bf00      	nop
 8011ccc:	20000138 	.word	0x20000138
 8011cd0:	080128e6 	.word	0x080128e6
 8011cd4:	080128b8 	.word	0x080128b8
 8011cd8:	080128ab 	.word	0x080128ab

08011cdc <_calloc_r>:
 8011cdc:	b570      	push	{r4, r5, r6, lr}
 8011cde:	fba1 5402 	umull	r5, r4, r1, r2
 8011ce2:	b93c      	cbnz	r4, 8011cf4 <_calloc_r+0x18>
 8011ce4:	4629      	mov	r1, r5
 8011ce6:	f7ff fa3f 	bl	8011168 <_malloc_r>
 8011cea:	4606      	mov	r6, r0
 8011cec:	b928      	cbnz	r0, 8011cfa <_calloc_r+0x1e>
 8011cee:	2600      	movs	r6, #0
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	bd70      	pop	{r4, r5, r6, pc}
 8011cf4:	220c      	movs	r2, #12
 8011cf6:	6002      	str	r2, [r0, #0]
 8011cf8:	e7f9      	b.n	8011cee <_calloc_r+0x12>
 8011cfa:	462a      	mov	r2, r5
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	f7fe f97d 	bl	800fffc <memset>
 8011d02:	e7f5      	b.n	8011cf0 <_calloc_r+0x14>

08011d04 <__ascii_mbtowc>:
 8011d04:	b082      	sub	sp, #8
 8011d06:	b901      	cbnz	r1, 8011d0a <__ascii_mbtowc+0x6>
 8011d08:	a901      	add	r1, sp, #4
 8011d0a:	b142      	cbz	r2, 8011d1e <__ascii_mbtowc+0x1a>
 8011d0c:	b14b      	cbz	r3, 8011d22 <__ascii_mbtowc+0x1e>
 8011d0e:	7813      	ldrb	r3, [r2, #0]
 8011d10:	600b      	str	r3, [r1, #0]
 8011d12:	7812      	ldrb	r2, [r2, #0]
 8011d14:	1e10      	subs	r0, r2, #0
 8011d16:	bf18      	it	ne
 8011d18:	2001      	movne	r0, #1
 8011d1a:	b002      	add	sp, #8
 8011d1c:	4770      	bx	lr
 8011d1e:	4610      	mov	r0, r2
 8011d20:	e7fb      	b.n	8011d1a <__ascii_mbtowc+0x16>
 8011d22:	f06f 0001 	mvn.w	r0, #1
 8011d26:	e7f8      	b.n	8011d1a <__ascii_mbtowc+0x16>

08011d28 <_malloc_usable_size_r>:
 8011d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d2c:	1f18      	subs	r0, r3, #4
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	bfbc      	itt	lt
 8011d32:	580b      	ldrlt	r3, [r1, r0]
 8011d34:	18c0      	addlt	r0, r0, r3
 8011d36:	4770      	bx	lr

08011d38 <fiprintf>:
 8011d38:	b40e      	push	{r1, r2, r3}
 8011d3a:	b503      	push	{r0, r1, lr}
 8011d3c:	4601      	mov	r1, r0
 8011d3e:	ab03      	add	r3, sp, #12
 8011d40:	4805      	ldr	r0, [pc, #20]	@ (8011d58 <fiprintf+0x20>)
 8011d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d46:	6800      	ldr	r0, [r0, #0]
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	f000 f845 	bl	8011dd8 <_vfiprintf_r>
 8011d4e:	b002      	add	sp, #8
 8011d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d54:	b003      	add	sp, #12
 8011d56:	4770      	bx	lr
 8011d58:	20000138 	.word	0x20000138

08011d5c <__ascii_wctomb>:
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	4608      	mov	r0, r1
 8011d60:	b141      	cbz	r1, 8011d74 <__ascii_wctomb+0x18>
 8011d62:	2aff      	cmp	r2, #255	@ 0xff
 8011d64:	d904      	bls.n	8011d70 <__ascii_wctomb+0x14>
 8011d66:	228a      	movs	r2, #138	@ 0x8a
 8011d68:	601a      	str	r2, [r3, #0]
 8011d6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d6e:	4770      	bx	lr
 8011d70:	700a      	strb	r2, [r1, #0]
 8011d72:	2001      	movs	r0, #1
 8011d74:	4770      	bx	lr

08011d76 <abort>:
 8011d76:	b508      	push	{r3, lr}
 8011d78:	2006      	movs	r0, #6
 8011d7a:	f000 fa85 	bl	8012288 <raise>
 8011d7e:	2001      	movs	r0, #1
 8011d80:	f7f4 fbfe 	bl	8006580 <_exit>

08011d84 <__sfputc_r>:
 8011d84:	6893      	ldr	r3, [r2, #8]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	b410      	push	{r4}
 8011d8c:	6093      	str	r3, [r2, #8]
 8011d8e:	da08      	bge.n	8011da2 <__sfputc_r+0x1e>
 8011d90:	6994      	ldr	r4, [r2, #24]
 8011d92:	42a3      	cmp	r3, r4
 8011d94:	db01      	blt.n	8011d9a <__sfputc_r+0x16>
 8011d96:	290a      	cmp	r1, #10
 8011d98:	d103      	bne.n	8011da2 <__sfputc_r+0x1e>
 8011d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d9e:	f000 b933 	b.w	8012008 <__swbuf_r>
 8011da2:	6813      	ldr	r3, [r2, #0]
 8011da4:	1c58      	adds	r0, r3, #1
 8011da6:	6010      	str	r0, [r2, #0]
 8011da8:	7019      	strb	r1, [r3, #0]
 8011daa:	4608      	mov	r0, r1
 8011dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011db0:	4770      	bx	lr

08011db2 <__sfputs_r>:
 8011db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011db4:	4606      	mov	r6, r0
 8011db6:	460f      	mov	r7, r1
 8011db8:	4614      	mov	r4, r2
 8011dba:	18d5      	adds	r5, r2, r3
 8011dbc:	42ac      	cmp	r4, r5
 8011dbe:	d101      	bne.n	8011dc4 <__sfputs_r+0x12>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	e007      	b.n	8011dd4 <__sfputs_r+0x22>
 8011dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc8:	463a      	mov	r2, r7
 8011dca:	4630      	mov	r0, r6
 8011dcc:	f7ff ffda 	bl	8011d84 <__sfputc_r>
 8011dd0:	1c43      	adds	r3, r0, #1
 8011dd2:	d1f3      	bne.n	8011dbc <__sfputs_r+0xa>
 8011dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011dd8 <_vfiprintf_r>:
 8011dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ddc:	460d      	mov	r5, r1
 8011dde:	b09d      	sub	sp, #116	@ 0x74
 8011de0:	4614      	mov	r4, r2
 8011de2:	4698      	mov	r8, r3
 8011de4:	4606      	mov	r6, r0
 8011de6:	b118      	cbz	r0, 8011df0 <_vfiprintf_r+0x18>
 8011de8:	6a03      	ldr	r3, [r0, #32]
 8011dea:	b90b      	cbnz	r3, 8011df0 <_vfiprintf_r+0x18>
 8011dec:	f7fe f8b0 	bl	800ff50 <__sinit>
 8011df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011df2:	07d9      	lsls	r1, r3, #31
 8011df4:	d405      	bmi.n	8011e02 <_vfiprintf_r+0x2a>
 8011df6:	89ab      	ldrh	r3, [r5, #12]
 8011df8:	059a      	lsls	r2, r3, #22
 8011dfa:	d402      	bmi.n	8011e02 <_vfiprintf_r+0x2a>
 8011dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dfe:	f7fe f98a 	bl	8010116 <__retarget_lock_acquire_recursive>
 8011e02:	89ab      	ldrh	r3, [r5, #12]
 8011e04:	071b      	lsls	r3, r3, #28
 8011e06:	d501      	bpl.n	8011e0c <_vfiprintf_r+0x34>
 8011e08:	692b      	ldr	r3, [r5, #16]
 8011e0a:	b99b      	cbnz	r3, 8011e34 <_vfiprintf_r+0x5c>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f000 f938 	bl	8012084 <__swsetup_r>
 8011e14:	b170      	cbz	r0, 8011e34 <_vfiprintf_r+0x5c>
 8011e16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e18:	07dc      	lsls	r4, r3, #31
 8011e1a:	d504      	bpl.n	8011e26 <_vfiprintf_r+0x4e>
 8011e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e20:	b01d      	add	sp, #116	@ 0x74
 8011e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e26:	89ab      	ldrh	r3, [r5, #12]
 8011e28:	0598      	lsls	r0, r3, #22
 8011e2a:	d4f7      	bmi.n	8011e1c <_vfiprintf_r+0x44>
 8011e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e2e:	f7fe f973 	bl	8010118 <__retarget_lock_release_recursive>
 8011e32:	e7f3      	b.n	8011e1c <_vfiprintf_r+0x44>
 8011e34:	2300      	movs	r3, #0
 8011e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e38:	2320      	movs	r3, #32
 8011e3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e42:	2330      	movs	r3, #48	@ 0x30
 8011e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011ff4 <_vfiprintf_r+0x21c>
 8011e48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e4c:	f04f 0901 	mov.w	r9, #1
 8011e50:	4623      	mov	r3, r4
 8011e52:	469a      	mov	sl, r3
 8011e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e58:	b10a      	cbz	r2, 8011e5e <_vfiprintf_r+0x86>
 8011e5a:	2a25      	cmp	r2, #37	@ 0x25
 8011e5c:	d1f9      	bne.n	8011e52 <_vfiprintf_r+0x7a>
 8011e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8011e62:	d00b      	beq.n	8011e7c <_vfiprintf_r+0xa4>
 8011e64:	465b      	mov	r3, fp
 8011e66:	4622      	mov	r2, r4
 8011e68:	4629      	mov	r1, r5
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	f7ff ffa1 	bl	8011db2 <__sfputs_r>
 8011e70:	3001      	adds	r0, #1
 8011e72:	f000 80a7 	beq.w	8011fc4 <_vfiprintf_r+0x1ec>
 8011e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e78:	445a      	add	r2, fp
 8011e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	f000 809f 	beq.w	8011fc4 <_vfiprintf_r+0x1ec>
 8011e86:	2300      	movs	r3, #0
 8011e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e90:	f10a 0a01 	add.w	sl, sl, #1
 8011e94:	9304      	str	r3, [sp, #16]
 8011e96:	9307      	str	r3, [sp, #28]
 8011e98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e9e:	4654      	mov	r4, sl
 8011ea0:	2205      	movs	r2, #5
 8011ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ea6:	4853      	ldr	r0, [pc, #332]	@ (8011ff4 <_vfiprintf_r+0x21c>)
 8011ea8:	f7ee f992 	bl	80001d0 <memchr>
 8011eac:	9a04      	ldr	r2, [sp, #16]
 8011eae:	b9d8      	cbnz	r0, 8011ee8 <_vfiprintf_r+0x110>
 8011eb0:	06d1      	lsls	r1, r2, #27
 8011eb2:	bf44      	itt	mi
 8011eb4:	2320      	movmi	r3, #32
 8011eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011eba:	0713      	lsls	r3, r2, #28
 8011ebc:	bf44      	itt	mi
 8011ebe:	232b      	movmi	r3, #43	@ 0x2b
 8011ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eca:	d015      	beq.n	8011ef8 <_vfiprintf_r+0x120>
 8011ecc:	9a07      	ldr	r2, [sp, #28]
 8011ece:	4654      	mov	r4, sl
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	f04f 0c0a 	mov.w	ip, #10
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011edc:	3b30      	subs	r3, #48	@ 0x30
 8011ede:	2b09      	cmp	r3, #9
 8011ee0:	d94b      	bls.n	8011f7a <_vfiprintf_r+0x1a2>
 8011ee2:	b1b0      	cbz	r0, 8011f12 <_vfiprintf_r+0x13a>
 8011ee4:	9207      	str	r2, [sp, #28]
 8011ee6:	e014      	b.n	8011f12 <_vfiprintf_r+0x13a>
 8011ee8:	eba0 0308 	sub.w	r3, r0, r8
 8011eec:	fa09 f303 	lsl.w	r3, r9, r3
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	9304      	str	r3, [sp, #16]
 8011ef4:	46a2      	mov	sl, r4
 8011ef6:	e7d2      	b.n	8011e9e <_vfiprintf_r+0xc6>
 8011ef8:	9b03      	ldr	r3, [sp, #12]
 8011efa:	1d19      	adds	r1, r3, #4
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	9103      	str	r1, [sp, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	bfbb      	ittet	lt
 8011f04:	425b      	neglt	r3, r3
 8011f06:	f042 0202 	orrlt.w	r2, r2, #2
 8011f0a:	9307      	strge	r3, [sp, #28]
 8011f0c:	9307      	strlt	r3, [sp, #28]
 8011f0e:	bfb8      	it	lt
 8011f10:	9204      	strlt	r2, [sp, #16]
 8011f12:	7823      	ldrb	r3, [r4, #0]
 8011f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f16:	d10a      	bne.n	8011f2e <_vfiprintf_r+0x156>
 8011f18:	7863      	ldrb	r3, [r4, #1]
 8011f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f1c:	d132      	bne.n	8011f84 <_vfiprintf_r+0x1ac>
 8011f1e:	9b03      	ldr	r3, [sp, #12]
 8011f20:	1d1a      	adds	r2, r3, #4
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	9203      	str	r2, [sp, #12]
 8011f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f2a:	3402      	adds	r4, #2
 8011f2c:	9305      	str	r3, [sp, #20]
 8011f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012004 <_vfiprintf_r+0x22c>
 8011f32:	7821      	ldrb	r1, [r4, #0]
 8011f34:	2203      	movs	r2, #3
 8011f36:	4650      	mov	r0, sl
 8011f38:	f7ee f94a 	bl	80001d0 <memchr>
 8011f3c:	b138      	cbz	r0, 8011f4e <_vfiprintf_r+0x176>
 8011f3e:	9b04      	ldr	r3, [sp, #16]
 8011f40:	eba0 000a 	sub.w	r0, r0, sl
 8011f44:	2240      	movs	r2, #64	@ 0x40
 8011f46:	4082      	lsls	r2, r0
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	3401      	adds	r4, #1
 8011f4c:	9304      	str	r3, [sp, #16]
 8011f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f52:	4829      	ldr	r0, [pc, #164]	@ (8011ff8 <_vfiprintf_r+0x220>)
 8011f54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f58:	2206      	movs	r2, #6
 8011f5a:	f7ee f939 	bl	80001d0 <memchr>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d03f      	beq.n	8011fe2 <_vfiprintf_r+0x20a>
 8011f62:	4b26      	ldr	r3, [pc, #152]	@ (8011ffc <_vfiprintf_r+0x224>)
 8011f64:	bb1b      	cbnz	r3, 8011fae <_vfiprintf_r+0x1d6>
 8011f66:	9b03      	ldr	r3, [sp, #12]
 8011f68:	3307      	adds	r3, #7
 8011f6a:	f023 0307 	bic.w	r3, r3, #7
 8011f6e:	3308      	adds	r3, #8
 8011f70:	9303      	str	r3, [sp, #12]
 8011f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f74:	443b      	add	r3, r7
 8011f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f78:	e76a      	b.n	8011e50 <_vfiprintf_r+0x78>
 8011f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f7e:	460c      	mov	r4, r1
 8011f80:	2001      	movs	r0, #1
 8011f82:	e7a8      	b.n	8011ed6 <_vfiprintf_r+0xfe>
 8011f84:	2300      	movs	r3, #0
 8011f86:	3401      	adds	r4, #1
 8011f88:	9305      	str	r3, [sp, #20]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	f04f 0c0a 	mov.w	ip, #10
 8011f90:	4620      	mov	r0, r4
 8011f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f96:	3a30      	subs	r2, #48	@ 0x30
 8011f98:	2a09      	cmp	r2, #9
 8011f9a:	d903      	bls.n	8011fa4 <_vfiprintf_r+0x1cc>
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d0c6      	beq.n	8011f2e <_vfiprintf_r+0x156>
 8011fa0:	9105      	str	r1, [sp, #20]
 8011fa2:	e7c4      	b.n	8011f2e <_vfiprintf_r+0x156>
 8011fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fa8:	4604      	mov	r4, r0
 8011faa:	2301      	movs	r3, #1
 8011fac:	e7f0      	b.n	8011f90 <_vfiprintf_r+0x1b8>
 8011fae:	ab03      	add	r3, sp, #12
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	462a      	mov	r2, r5
 8011fb4:	4b12      	ldr	r3, [pc, #72]	@ (8012000 <_vfiprintf_r+0x228>)
 8011fb6:	a904      	add	r1, sp, #16
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f7fd fb85 	bl	800f6c8 <_printf_float>
 8011fbe:	4607      	mov	r7, r0
 8011fc0:	1c78      	adds	r0, r7, #1
 8011fc2:	d1d6      	bne.n	8011f72 <_vfiprintf_r+0x19a>
 8011fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fc6:	07d9      	lsls	r1, r3, #31
 8011fc8:	d405      	bmi.n	8011fd6 <_vfiprintf_r+0x1fe>
 8011fca:	89ab      	ldrh	r3, [r5, #12]
 8011fcc:	059a      	lsls	r2, r3, #22
 8011fce:	d402      	bmi.n	8011fd6 <_vfiprintf_r+0x1fe>
 8011fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fd2:	f7fe f8a1 	bl	8010118 <__retarget_lock_release_recursive>
 8011fd6:	89ab      	ldrh	r3, [r5, #12]
 8011fd8:	065b      	lsls	r3, r3, #25
 8011fda:	f53f af1f 	bmi.w	8011e1c <_vfiprintf_r+0x44>
 8011fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011fe0:	e71e      	b.n	8011e20 <_vfiprintf_r+0x48>
 8011fe2:	ab03      	add	r3, sp, #12
 8011fe4:	9300      	str	r3, [sp, #0]
 8011fe6:	462a      	mov	r2, r5
 8011fe8:	4b05      	ldr	r3, [pc, #20]	@ (8012000 <_vfiprintf_r+0x228>)
 8011fea:	a904      	add	r1, sp, #16
 8011fec:	4630      	mov	r0, r6
 8011fee:	f7fd fe03 	bl	800fbf8 <_printf_i>
 8011ff2:	e7e4      	b.n	8011fbe <_vfiprintf_r+0x1e6>
 8011ff4:	08012635 	.word	0x08012635
 8011ff8:	0801263f 	.word	0x0801263f
 8011ffc:	0800f6c9 	.word	0x0800f6c9
 8012000:	08011db3 	.word	0x08011db3
 8012004:	0801263b 	.word	0x0801263b

08012008 <__swbuf_r>:
 8012008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801200a:	460e      	mov	r6, r1
 801200c:	4614      	mov	r4, r2
 801200e:	4605      	mov	r5, r0
 8012010:	b118      	cbz	r0, 801201a <__swbuf_r+0x12>
 8012012:	6a03      	ldr	r3, [r0, #32]
 8012014:	b90b      	cbnz	r3, 801201a <__swbuf_r+0x12>
 8012016:	f7fd ff9b 	bl	800ff50 <__sinit>
 801201a:	69a3      	ldr	r3, [r4, #24]
 801201c:	60a3      	str	r3, [r4, #8]
 801201e:	89a3      	ldrh	r3, [r4, #12]
 8012020:	071a      	lsls	r2, r3, #28
 8012022:	d501      	bpl.n	8012028 <__swbuf_r+0x20>
 8012024:	6923      	ldr	r3, [r4, #16]
 8012026:	b943      	cbnz	r3, 801203a <__swbuf_r+0x32>
 8012028:	4621      	mov	r1, r4
 801202a:	4628      	mov	r0, r5
 801202c:	f000 f82a 	bl	8012084 <__swsetup_r>
 8012030:	b118      	cbz	r0, 801203a <__swbuf_r+0x32>
 8012032:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012036:	4638      	mov	r0, r7
 8012038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801203a:	6823      	ldr	r3, [r4, #0]
 801203c:	6922      	ldr	r2, [r4, #16]
 801203e:	1a98      	subs	r0, r3, r2
 8012040:	6963      	ldr	r3, [r4, #20]
 8012042:	b2f6      	uxtb	r6, r6
 8012044:	4283      	cmp	r3, r0
 8012046:	4637      	mov	r7, r6
 8012048:	dc05      	bgt.n	8012056 <__swbuf_r+0x4e>
 801204a:	4621      	mov	r1, r4
 801204c:	4628      	mov	r0, r5
 801204e:	f7ff f98f 	bl	8011370 <_fflush_r>
 8012052:	2800      	cmp	r0, #0
 8012054:	d1ed      	bne.n	8012032 <__swbuf_r+0x2a>
 8012056:	68a3      	ldr	r3, [r4, #8]
 8012058:	3b01      	subs	r3, #1
 801205a:	60a3      	str	r3, [r4, #8]
 801205c:	6823      	ldr	r3, [r4, #0]
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	6022      	str	r2, [r4, #0]
 8012062:	701e      	strb	r6, [r3, #0]
 8012064:	6962      	ldr	r2, [r4, #20]
 8012066:	1c43      	adds	r3, r0, #1
 8012068:	429a      	cmp	r2, r3
 801206a:	d004      	beq.n	8012076 <__swbuf_r+0x6e>
 801206c:	89a3      	ldrh	r3, [r4, #12]
 801206e:	07db      	lsls	r3, r3, #31
 8012070:	d5e1      	bpl.n	8012036 <__swbuf_r+0x2e>
 8012072:	2e0a      	cmp	r6, #10
 8012074:	d1df      	bne.n	8012036 <__swbuf_r+0x2e>
 8012076:	4621      	mov	r1, r4
 8012078:	4628      	mov	r0, r5
 801207a:	f7ff f979 	bl	8011370 <_fflush_r>
 801207e:	2800      	cmp	r0, #0
 8012080:	d0d9      	beq.n	8012036 <__swbuf_r+0x2e>
 8012082:	e7d6      	b.n	8012032 <__swbuf_r+0x2a>

08012084 <__swsetup_r>:
 8012084:	b538      	push	{r3, r4, r5, lr}
 8012086:	4b29      	ldr	r3, [pc, #164]	@ (801212c <__swsetup_r+0xa8>)
 8012088:	4605      	mov	r5, r0
 801208a:	6818      	ldr	r0, [r3, #0]
 801208c:	460c      	mov	r4, r1
 801208e:	b118      	cbz	r0, 8012098 <__swsetup_r+0x14>
 8012090:	6a03      	ldr	r3, [r0, #32]
 8012092:	b90b      	cbnz	r3, 8012098 <__swsetup_r+0x14>
 8012094:	f7fd ff5c 	bl	800ff50 <__sinit>
 8012098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801209c:	0719      	lsls	r1, r3, #28
 801209e:	d422      	bmi.n	80120e6 <__swsetup_r+0x62>
 80120a0:	06da      	lsls	r2, r3, #27
 80120a2:	d407      	bmi.n	80120b4 <__swsetup_r+0x30>
 80120a4:	2209      	movs	r2, #9
 80120a6:	602a      	str	r2, [r5, #0]
 80120a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120ac:	81a3      	strh	r3, [r4, #12]
 80120ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120b2:	e033      	b.n	801211c <__swsetup_r+0x98>
 80120b4:	0758      	lsls	r0, r3, #29
 80120b6:	d512      	bpl.n	80120de <__swsetup_r+0x5a>
 80120b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120ba:	b141      	cbz	r1, 80120ce <__swsetup_r+0x4a>
 80120bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80120c0:	4299      	cmp	r1, r3
 80120c2:	d002      	beq.n	80120ca <__swsetup_r+0x46>
 80120c4:	4628      	mov	r0, r5
 80120c6:	f7fe fe83 	bl	8010dd0 <_free_r>
 80120ca:	2300      	movs	r3, #0
 80120cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80120ce:	89a3      	ldrh	r3, [r4, #12]
 80120d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120d4:	81a3      	strh	r3, [r4, #12]
 80120d6:	2300      	movs	r3, #0
 80120d8:	6063      	str	r3, [r4, #4]
 80120da:	6923      	ldr	r3, [r4, #16]
 80120dc:	6023      	str	r3, [r4, #0]
 80120de:	89a3      	ldrh	r3, [r4, #12]
 80120e0:	f043 0308 	orr.w	r3, r3, #8
 80120e4:	81a3      	strh	r3, [r4, #12]
 80120e6:	6923      	ldr	r3, [r4, #16]
 80120e8:	b94b      	cbnz	r3, 80120fe <__swsetup_r+0x7a>
 80120ea:	89a3      	ldrh	r3, [r4, #12]
 80120ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80120f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120f4:	d003      	beq.n	80120fe <__swsetup_r+0x7a>
 80120f6:	4621      	mov	r1, r4
 80120f8:	4628      	mov	r0, r5
 80120fa:	f000 f83f 	bl	801217c <__smakebuf_r>
 80120fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012102:	f013 0201 	ands.w	r2, r3, #1
 8012106:	d00a      	beq.n	801211e <__swsetup_r+0x9a>
 8012108:	2200      	movs	r2, #0
 801210a:	60a2      	str	r2, [r4, #8]
 801210c:	6962      	ldr	r2, [r4, #20]
 801210e:	4252      	negs	r2, r2
 8012110:	61a2      	str	r2, [r4, #24]
 8012112:	6922      	ldr	r2, [r4, #16]
 8012114:	b942      	cbnz	r2, 8012128 <__swsetup_r+0xa4>
 8012116:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801211a:	d1c5      	bne.n	80120a8 <__swsetup_r+0x24>
 801211c:	bd38      	pop	{r3, r4, r5, pc}
 801211e:	0799      	lsls	r1, r3, #30
 8012120:	bf58      	it	pl
 8012122:	6962      	ldrpl	r2, [r4, #20]
 8012124:	60a2      	str	r2, [r4, #8]
 8012126:	e7f4      	b.n	8012112 <__swsetup_r+0x8e>
 8012128:	2000      	movs	r0, #0
 801212a:	e7f7      	b.n	801211c <__swsetup_r+0x98>
 801212c:	20000138 	.word	0x20000138

08012130 <__swhatbuf_r>:
 8012130:	b570      	push	{r4, r5, r6, lr}
 8012132:	460c      	mov	r4, r1
 8012134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012138:	2900      	cmp	r1, #0
 801213a:	b096      	sub	sp, #88	@ 0x58
 801213c:	4615      	mov	r5, r2
 801213e:	461e      	mov	r6, r3
 8012140:	da0d      	bge.n	801215e <__swhatbuf_r+0x2e>
 8012142:	89a3      	ldrh	r3, [r4, #12]
 8012144:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012148:	f04f 0100 	mov.w	r1, #0
 801214c:	bf14      	ite	ne
 801214e:	2340      	movne	r3, #64	@ 0x40
 8012150:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012154:	2000      	movs	r0, #0
 8012156:	6031      	str	r1, [r6, #0]
 8012158:	602b      	str	r3, [r5, #0]
 801215a:	b016      	add	sp, #88	@ 0x58
 801215c:	bd70      	pop	{r4, r5, r6, pc}
 801215e:	466a      	mov	r2, sp
 8012160:	f000 f848 	bl	80121f4 <_fstat_r>
 8012164:	2800      	cmp	r0, #0
 8012166:	dbec      	blt.n	8012142 <__swhatbuf_r+0x12>
 8012168:	9901      	ldr	r1, [sp, #4]
 801216a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801216e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012172:	4259      	negs	r1, r3
 8012174:	4159      	adcs	r1, r3
 8012176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801217a:	e7eb      	b.n	8012154 <__swhatbuf_r+0x24>

0801217c <__smakebuf_r>:
 801217c:	898b      	ldrh	r3, [r1, #12]
 801217e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012180:	079d      	lsls	r5, r3, #30
 8012182:	4606      	mov	r6, r0
 8012184:	460c      	mov	r4, r1
 8012186:	d507      	bpl.n	8012198 <__smakebuf_r+0x1c>
 8012188:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801218c:	6023      	str	r3, [r4, #0]
 801218e:	6123      	str	r3, [r4, #16]
 8012190:	2301      	movs	r3, #1
 8012192:	6163      	str	r3, [r4, #20]
 8012194:	b003      	add	sp, #12
 8012196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012198:	ab01      	add	r3, sp, #4
 801219a:	466a      	mov	r2, sp
 801219c:	f7ff ffc8 	bl	8012130 <__swhatbuf_r>
 80121a0:	9f00      	ldr	r7, [sp, #0]
 80121a2:	4605      	mov	r5, r0
 80121a4:	4639      	mov	r1, r7
 80121a6:	4630      	mov	r0, r6
 80121a8:	f7fe ffde 	bl	8011168 <_malloc_r>
 80121ac:	b948      	cbnz	r0, 80121c2 <__smakebuf_r+0x46>
 80121ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121b2:	059a      	lsls	r2, r3, #22
 80121b4:	d4ee      	bmi.n	8012194 <__smakebuf_r+0x18>
 80121b6:	f023 0303 	bic.w	r3, r3, #3
 80121ba:	f043 0302 	orr.w	r3, r3, #2
 80121be:	81a3      	strh	r3, [r4, #12]
 80121c0:	e7e2      	b.n	8012188 <__smakebuf_r+0xc>
 80121c2:	89a3      	ldrh	r3, [r4, #12]
 80121c4:	6020      	str	r0, [r4, #0]
 80121c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121ca:	81a3      	strh	r3, [r4, #12]
 80121cc:	9b01      	ldr	r3, [sp, #4]
 80121ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80121d2:	b15b      	cbz	r3, 80121ec <__smakebuf_r+0x70>
 80121d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121d8:	4630      	mov	r0, r6
 80121da:	f000 f81d 	bl	8012218 <_isatty_r>
 80121de:	b128      	cbz	r0, 80121ec <__smakebuf_r+0x70>
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	f023 0303 	bic.w	r3, r3, #3
 80121e6:	f043 0301 	orr.w	r3, r3, #1
 80121ea:	81a3      	strh	r3, [r4, #12]
 80121ec:	89a3      	ldrh	r3, [r4, #12]
 80121ee:	431d      	orrs	r5, r3
 80121f0:	81a5      	strh	r5, [r4, #12]
 80121f2:	e7cf      	b.n	8012194 <__smakebuf_r+0x18>

080121f4 <_fstat_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	4d07      	ldr	r5, [pc, #28]	@ (8012214 <_fstat_r+0x20>)
 80121f8:	2300      	movs	r3, #0
 80121fa:	4604      	mov	r4, r0
 80121fc:	4608      	mov	r0, r1
 80121fe:	4611      	mov	r1, r2
 8012200:	602b      	str	r3, [r5, #0]
 8012202:	f7f4 fa0d 	bl	8006620 <_fstat>
 8012206:	1c43      	adds	r3, r0, #1
 8012208:	d102      	bne.n	8012210 <_fstat_r+0x1c>
 801220a:	682b      	ldr	r3, [r5, #0]
 801220c:	b103      	cbz	r3, 8012210 <_fstat_r+0x1c>
 801220e:	6023      	str	r3, [r4, #0]
 8012210:	bd38      	pop	{r3, r4, r5, pc}
 8012212:	bf00      	nop
 8012214:	20005c38 	.word	0x20005c38

08012218 <_isatty_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	4d06      	ldr	r5, [pc, #24]	@ (8012234 <_isatty_r+0x1c>)
 801221c:	2300      	movs	r3, #0
 801221e:	4604      	mov	r4, r0
 8012220:	4608      	mov	r0, r1
 8012222:	602b      	str	r3, [r5, #0]
 8012224:	f7f4 fa0c 	bl	8006640 <_isatty>
 8012228:	1c43      	adds	r3, r0, #1
 801222a:	d102      	bne.n	8012232 <_isatty_r+0x1a>
 801222c:	682b      	ldr	r3, [r5, #0]
 801222e:	b103      	cbz	r3, 8012232 <_isatty_r+0x1a>
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	bd38      	pop	{r3, r4, r5, pc}
 8012234:	20005c38 	.word	0x20005c38

08012238 <_raise_r>:
 8012238:	291f      	cmp	r1, #31
 801223a:	b538      	push	{r3, r4, r5, lr}
 801223c:	4605      	mov	r5, r0
 801223e:	460c      	mov	r4, r1
 8012240:	d904      	bls.n	801224c <_raise_r+0x14>
 8012242:	2316      	movs	r3, #22
 8012244:	6003      	str	r3, [r0, #0]
 8012246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801224a:	bd38      	pop	{r3, r4, r5, pc}
 801224c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801224e:	b112      	cbz	r2, 8012256 <_raise_r+0x1e>
 8012250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012254:	b94b      	cbnz	r3, 801226a <_raise_r+0x32>
 8012256:	4628      	mov	r0, r5
 8012258:	f000 f830 	bl	80122bc <_getpid_r>
 801225c:	4622      	mov	r2, r4
 801225e:	4601      	mov	r1, r0
 8012260:	4628      	mov	r0, r5
 8012262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012266:	f000 b817 	b.w	8012298 <_kill_r>
 801226a:	2b01      	cmp	r3, #1
 801226c:	d00a      	beq.n	8012284 <_raise_r+0x4c>
 801226e:	1c59      	adds	r1, r3, #1
 8012270:	d103      	bne.n	801227a <_raise_r+0x42>
 8012272:	2316      	movs	r3, #22
 8012274:	6003      	str	r3, [r0, #0]
 8012276:	2001      	movs	r0, #1
 8012278:	e7e7      	b.n	801224a <_raise_r+0x12>
 801227a:	2100      	movs	r1, #0
 801227c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012280:	4620      	mov	r0, r4
 8012282:	4798      	blx	r3
 8012284:	2000      	movs	r0, #0
 8012286:	e7e0      	b.n	801224a <_raise_r+0x12>

08012288 <raise>:
 8012288:	4b02      	ldr	r3, [pc, #8]	@ (8012294 <raise+0xc>)
 801228a:	4601      	mov	r1, r0
 801228c:	6818      	ldr	r0, [r3, #0]
 801228e:	f7ff bfd3 	b.w	8012238 <_raise_r>
 8012292:	bf00      	nop
 8012294:	20000138 	.word	0x20000138

08012298 <_kill_r>:
 8012298:	b538      	push	{r3, r4, r5, lr}
 801229a:	4d07      	ldr	r5, [pc, #28]	@ (80122b8 <_kill_r+0x20>)
 801229c:	2300      	movs	r3, #0
 801229e:	4604      	mov	r4, r0
 80122a0:	4608      	mov	r0, r1
 80122a2:	4611      	mov	r1, r2
 80122a4:	602b      	str	r3, [r5, #0]
 80122a6:	f7f4 f95b 	bl	8006560 <_kill>
 80122aa:	1c43      	adds	r3, r0, #1
 80122ac:	d102      	bne.n	80122b4 <_kill_r+0x1c>
 80122ae:	682b      	ldr	r3, [r5, #0]
 80122b0:	b103      	cbz	r3, 80122b4 <_kill_r+0x1c>
 80122b2:	6023      	str	r3, [r4, #0]
 80122b4:	bd38      	pop	{r3, r4, r5, pc}
 80122b6:	bf00      	nop
 80122b8:	20005c38 	.word	0x20005c38

080122bc <_getpid_r>:
 80122bc:	f7f4 b948 	b.w	8006550 <_getpid>

080122c0 <_init>:
 80122c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122c2:	bf00      	nop
 80122c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122c6:	bc08      	pop	{r3}
 80122c8:	469e      	mov	lr, r3
 80122ca:	4770      	bx	lr

080122cc <_fini>:
 80122cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ce:	bf00      	nop
 80122d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122d2:	bc08      	pop	{r3}
 80122d4:	469e      	mov	lr, r3
 80122d6:	4770      	bx	lr
