
RMTemplateMay12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011108  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08011298  08011298  00012298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011890  08011890  000132e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011890  08011890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011898  08011898  000132e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011898  08011898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801189c  0801189c  0001289c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  080118a0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132e0  2**0
                  CONTENTS
 10 .bss          0000581c  200002e0  200002e0  000132e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005afc  20005afc  000132e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000263e3  00000000  00000000  00013310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005751  00000000  00000000  000396f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fc8  00000000  00000000  0003ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018cd  00000000  00000000  00040e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027283  00000000  00000000  000426dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026e15  00000000  00000000  00069960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3699  00000000  00000000  00090775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00173e0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000095d8  00000000  00000000  00173e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0017d42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011280 	.word	0x08011280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	08011280 	.word	0x08011280

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000ea2:	e003      	b.n	8000eac <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea8:	f000 f80a 	bl	8000ec0 <BMI088_delay_us>
    while(ms--)
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	80fa      	strh	r2, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f6      	bne.n	8000ea4 <BMI088_delay_ms+0xc>
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	22a8      	movs	r2, #168	@ 0xa8
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d0f8      	beq.n	8000ef4 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d206      	bcs.n	8000f18 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4413      	add	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	e007      	b.n	8000f28 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad2      	subs	r2, r2, r3
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4413      	add	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d200      	bcs.n	8000f36 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000f34:	e7de      	b.n	8000ef4 <BMI088_delay_us+0x34>
            {
                break;
 8000f36:	bf00      	nop
            }
        }
    }


}
 8000f38:	bf00      	nop
 8000f3a:	3724      	adds	r7, #36	@ 0x24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <BMI088_ACCEL_NS_L+0x18>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <BMI088_ACCEL_NS_L+0x1c>)
 8000f52:	8811      	ldrh	r1, [r2, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 f98a 	bl	8007270 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <BMI088_ACCEL_NS_H+0x18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <BMI088_ACCEL_NS_H+0x1c>)
 8000f72:	8811      	ldrh	r1, [r2, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 f97a 	bl	8007270 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <BMI088_GYRO_NS_L+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <BMI088_GYRO_NS_L+0x1c>)
 8000f92:	8811      	ldrh	r1, [r2, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 f96a 	bl	8007270 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <BMI088_GYRO_NS_H+0x18>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <BMI088_GYRO_NS_H+0x1c>)
 8000fb2:	8811      	ldrh	r1, [r2, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 f95a 	bl	8007270 <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000000c 	.word	0x2000000c

08000fc8 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000fd2:	f107 020f 	add.w	r2, r7, #15
 8000fd6:	1df9      	adds	r1, r7, #7
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <BMI088_read_write_byte+0x28>)
 8000fe2:	f007 fea3 	bl	8008d2c <HAL_SPI_TransmitReceive>
    return rx_data;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000a4c 	.word	0x20000a4c

08000ff4 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001002:	f7ff ffa1 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001006:	2080      	movs	r0, #128	@ 0x80
 8001008:	f7ff ffde 	bl	8000fc8 <BMI088_read_write_byte>
 800100c:	2055      	movs	r0, #85	@ 0x55
 800100e:	f7ff ffdb 	bl	8000fc8 <BMI088_read_write_byte>
 8001012:	2055      	movs	r0, #85	@ 0x55
 8001014:	f7ff ffd8 	bl	8000fc8 <BMI088_read_write_byte>
 8001018:	4603      	mov	r3, r0
 800101a:	71bb      	strb	r3, [r7, #6]
 800101c:	f7ff ffa4 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001020:	2096      	movs	r0, #150	@ 0x96
 8001022:	f7ff ff4d 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001026:	f7ff ff8f 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800102a:	2080      	movs	r0, #128	@ 0x80
 800102c:	f7ff ffcc 	bl	8000fc8 <BMI088_read_write_byte>
 8001030:	2055      	movs	r0, #85	@ 0x55
 8001032:	f7ff ffc9 	bl	8000fc8 <BMI088_read_write_byte>
 8001036:	2055      	movs	r0, #85	@ 0x55
 8001038:	f7ff ffc6 	bl	8000fc8 <BMI088_read_write_byte>
 800103c:	4603      	mov	r3, r0
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	f7ff ff92 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001044:	2096      	movs	r0, #150	@ 0x96
 8001046:	f7ff ff3b 	bl	8000ec0 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 800104a:	f7ff ff7d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800104e:	21b6      	movs	r1, #182	@ 0xb6
 8001050:	207e      	movs	r0, #126	@ 0x7e
 8001052:	f000 fa21 	bl	8001498 <BMI088_write_single_reg>
 8001056:	f7ff ff87 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800105a:	2050      	movs	r0, #80	@ 0x50
 800105c:	f7ff ff1c 	bl	8000e98 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001060:	f7ff ff72 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001064:	2080      	movs	r0, #128	@ 0x80
 8001066:	f7ff ffaf 	bl	8000fc8 <BMI088_read_write_byte>
 800106a:	2055      	movs	r0, #85	@ 0x55
 800106c:	f7ff ffac 	bl	8000fc8 <BMI088_read_write_byte>
 8001070:	2055      	movs	r0, #85	@ 0x55
 8001072:	f7ff ffa9 	bl	8000fc8 <BMI088_read_write_byte>
 8001076:	4603      	mov	r3, r0
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	f7ff ff75 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800107e:	2096      	movs	r0, #150	@ 0x96
 8001080:	f7ff ff1e 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001084:	f7ff ff60 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001088:	2080      	movs	r0, #128	@ 0x80
 800108a:	f7ff ff9d 	bl	8000fc8 <BMI088_read_write_byte>
 800108e:	2055      	movs	r0, #85	@ 0x55
 8001090:	f7ff ff9a 	bl	8000fc8 <BMI088_read_write_byte>
 8001094:	2055      	movs	r0, #85	@ 0x55
 8001096:	f7ff ff97 	bl	8000fc8 <BMI088_read_write_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	f7ff ff63 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010a2:	2096      	movs	r0, #150	@ 0x96
 80010a4:	f7ff ff0c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	2b1e      	cmp	r3, #30
 80010ac:	d001      	beq.n	80010b2 <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80010ae:	23ff      	movs	r3, #255	@ 0xff
 80010b0:	e052      	b.n	8001158 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e04b      	b.n	8001150 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 80010b8:	f7ff ff46 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	4928      	ldr	r1, [pc, #160]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	7818      	ldrb	r0, [r3, #0]
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4924      	ldr	r1, [pc, #144]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	3301      	adds	r3, #1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	f000 f9dc 	bl	8001498 <BMI088_write_single_reg>
 80010e0:	f7ff ff42 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010e4:	2096      	movs	r0, #150	@ 0x96
 80010e6:	f7ff feeb 	bl	8000ec0 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80010ea:	f7ff ff2d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	491b      	ldr	r1, [pc, #108]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff60 	bl	8000fc8 <BMI088_read_write_byte>
 8001108:	2055      	movs	r0, #85	@ 0x55
 800110a:	f7ff ff5d 	bl	8000fc8 <BMI088_read_write_byte>
 800110e:	2055      	movs	r0, #85	@ 0x55
 8001110:	f7ff ff5a 	bl	8000fc8 <BMI088_read_write_byte>
 8001114:	4603      	mov	r3, r0
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	f7ff ff26 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800111c:	2096      	movs	r0, #150	@ 0x96
 800111e:	f7ff fecf 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	490e      	ldr	r1, [pc, #56]	@ (8001160 <BMI088_accel_init+0x16c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	440b      	add	r3, r1
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	429a      	cmp	r2, r3
 8001136:	d008      	beq.n	800114a <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	4909      	ldr	r1, [pc, #36]	@ (8001160 <BMI088_accel_init+0x16c>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	3302      	adds	r3, #2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	e006      	b.n	8001158 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d9b0      	bls.n	80010b8 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000018 	.word	0x20000018

08001164 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001172:	f7ff ff09 	bl	8000f88 <BMI088_GYRO_NS_L>
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	4619      	mov	r1, r3
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f9a0 	bl	80014c0 <BMI088_read_single_reg>
 8001180:	f7ff ff12 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001184:	2096      	movs	r0, #150	@ 0x96
 8001186:	f7ff fe9b 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800118a:	f7ff fefd 	bl	8000f88 <BMI088_GYRO_NS_L>
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	4619      	mov	r1, r3
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f994 	bl	80014c0 <BMI088_read_single_reg>
 8001198:	f7ff ff06 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800119c:	2096      	movs	r0, #150	@ 0x96
 800119e:	f7ff fe8f 	bl	8000ec0 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80011a2:	f7ff fef1 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011a6:	21b6      	movs	r1, #182	@ 0xb6
 80011a8:	2014      	movs	r0, #20
 80011aa:	f000 f975 	bl	8001498 <BMI088_write_single_reg>
 80011ae:	f7ff fefb 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80011b2:	2050      	movs	r0, #80	@ 0x50
 80011b4:	f7ff fe70 	bl	8000e98 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011b8:	f7ff fee6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011bc:	1dbb      	adds	r3, r7, #6
 80011be:	4619      	mov	r1, r3
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f97d 	bl	80014c0 <BMI088_read_single_reg>
 80011c6:	f7ff feef 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011ca:	2096      	movs	r0, #150	@ 0x96
 80011cc:	f7ff fe78 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011d0:	f7ff feda 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	4619      	mov	r1, r3
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f971 	bl	80014c0 <BMI088_read_single_reg>
 80011de:	f7ff fee3 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011e2:	2096      	movs	r0, #150	@ 0x96
 80011e4:	f7ff fe6c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	d001      	beq.n	80011f2 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80011ee:	23ff      	movs	r3, #255	@ 0xff
 80011f0:	e049      	b.n	8001286 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e042      	b.n	800127e <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80011f8:	f7ff fec6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4924      	ldr	r1, [pc, #144]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	440b      	add	r3, r1
 8001208:	7818      	ldrb	r0, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	4920      	ldr	r1, [pc, #128]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	440b      	add	r3, r1
 8001216:	3301      	adds	r3, #1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	f000 f93c 	bl	8001498 <BMI088_write_single_reg>
 8001220:	f7ff fec2 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001224:	2096      	movs	r0, #150	@ 0x96
 8001226:	f7ff fe4b 	bl	8000ec0 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 800122a:	f7ff fead 	bl	8000f88 <BMI088_GYRO_NS_L>
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	4917      	ldr	r1, [pc, #92]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	440b      	add	r3, r1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	1dba      	adds	r2, r7, #6
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f93d 	bl	80014c0 <BMI088_read_single_reg>
 8001246:	f7ff feaf 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800124a:	2096      	movs	r0, #150	@ 0x96
 800124c:	f7ff fe38 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	490f      	ldr	r1, [pc, #60]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	440b      	add	r3, r1
 800125c:	3301      	adds	r3, #1
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	429a      	cmp	r2, r3
 8001264:	d008      	beq.n	8001278 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	440b      	add	r3, r1
 8001272:	3302      	adds	r3, #2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	e006      	b.n	8001286 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	3301      	adds	r3, #1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d9b9      	bls.n	80011f8 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000002c 	.word	0x2000002c

08001294 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8001298:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <IMU_get_temp+0x1c>)
 800129a:	4906      	ldr	r1, [pc, #24]	@ (80012b4 <IMU_get_temp+0x20>)
 800129c:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <IMU_get_temp+0x24>)
 800129e:	f000 f80d 	bl	80012bc <BMI088_read>
	return temp;
 80012a2:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <IMU_get_temp+0x1c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	ee07 3a90 	vmov	s15, r3
}
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000314 	.word	0x20000314
 80012b4:	20000308 	.word	0x20000308
 80012b8:	200002fc 	.word	0x200002fc

080012bc <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80012c8:	4a70      	ldr	r2, [pc, #448]	@ (800148c <BMI088_read+0x1d0>)
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d2:	6018      	str	r0, [r3, #0]
 80012d4:	3304      	adds	r3, #4
 80012d6:	8019      	strh	r1, [r3, #0]
 80012d8:	3302      	adds	r3, #2
 80012da:	0c0a      	lsrs	r2, r1, #16
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80012e2:	f7ff fe31 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80012e6:	2092      	movs	r0, #146	@ 0x92
 80012e8:	f7ff fe6e 	bl	8000fc8 <BMI088_read_write_byte>
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2206      	movs	r2, #6
 80012f2:	4619      	mov	r1, r3
 80012f4:	2012      	movs	r0, #18
 80012f6:	f000 f8fb 	bl	80014f0 <BMI088_read_muli_reg>
 80012fa:	f7ff fe35 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80012fe:	7d7b      	ldrb	r3, [r7, #21]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800130c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001318:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <BMI088_read+0x1d4>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7dbb      	ldrb	r3, [r7, #22]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001336:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001342:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <BMI088_read+0x1d4>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3304      	adds	r3, #4
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001354:	7e7b      	ldrb	r3, [r7, #25]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7e3b      	ldrb	r3, [r7, #24]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001362:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136e:	4b48      	ldr	r3, [pc, #288]	@ (8001490 <BMI088_read+0x1d4>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3308      	adds	r3, #8
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8001380:	f7ff fe02 	bl	8000f88 <BMI088_GYRO_NS_L>
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2208      	movs	r2, #8
 800138a:	4619      	mov	r1, r3
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f8af 	bl	80014f0 <BMI088_read_muli_reg>
 8001392:	f7ff fe09 	bl	8000fa8 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8001396:	7d3b      	ldrb	r3, [r7, #20]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d140      	bne.n	800141e <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	7dbb      	ldrb	r3, [r7, #22]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b6:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <BMI088_read+0x1d8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80013c6:	7e7b      	ldrb	r3, [r7, #25]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	7e3b      	ldrb	r3, [r7, #24]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <BMI088_read+0x1d8>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3304      	adds	r3, #4
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80013f2:	7efb      	ldrb	r3, [r7, #27]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7ebb      	ldrb	r3, [r7, #26]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001400:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <BMI088_read+0x1d8>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3308      	adds	r3, #8
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 800141e:	f7ff fd93 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001422:	20a2      	movs	r0, #162	@ 0xa2
 8001424:	f7ff fdd0 	bl	8000fc8 <BMI088_read_write_byte>
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2202      	movs	r2, #2
 800142e:	4619      	mov	r1, r3
 8001430:	2022      	movs	r0, #34	@ 0x22
 8001432:	f000 f85d 	bl	80014f0 <BMI088_read_muli_reg>
 8001436:	f7ff fd97 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	b21a      	sxth	r2, r3
 8001440:	7d7b      	ldrb	r3, [r7, #21]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800144c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001454:	db04      	blt.n	8001460 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8001456:	8bfb      	ldrh	r3, [r7, #30]
 8001458:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800145c:	b29b      	uxth	r3, r3
 800145e:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001460:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001478:	ee77 7a87 	vadd.f32	s15, s15, s14
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edc3 7a00 	vstr	s15, [r3]
}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08011298 	.word	0x08011298
 8001490:	20000010 	.word	0x20000010
 8001494:	20000014 	.word	0x20000014

08001498 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fd8c 	bl	8000fc8 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd88 	bl	8000fc8 <BMI088_read_write_byte>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fd77 	bl	8000fc8 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80014da:	2055      	movs	r0, #85	@ 0x55
 80014dc:	f7ff fd74 	bl	8000fc8 <BMI088_read_write_byte>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	701a      	strb	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fd5d 	bl	8000fc8 <BMI088_read_write_byte>

    while (len != 0)
 800150e:	e00c      	b.n	800152a <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001510:	2055      	movs	r0, #85	@ 0x55
 8001512:	f7ff fd59 	bl	8000fc8 <BMI088_read_write_byte>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	701a      	strb	r2, [r3, #0]
        buf++;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	603b      	str	r3, [r7, #0]
        len--;
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	3b01      	subs	r3, #1
 8001528:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ef      	bne.n	8001510 <BMI088_read_muli_reg+0x20>
    }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_CAN_RxFifo0MsgPendingCallback>:
DJI_MotorDeclaration_t DJI_MotorDeclaration[2] = {{{-1, -1, -1, -1}, {-1, -1, -1, -1}, {-1, -1, -1}}, {{-1, -1, -1, -1}, {-1, -1, -1, -1}, {-1, -1, -1}}};
motorControlBuffer_t motorControlBuffer[2] = {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}};
motorFeedback_t motorFeedback[2][11];
PID_data_t PID_data[2][11];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	f107 0210 	add.w	r2, r7, #16
 800154c:	2100      	movs	r1, #0
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f004 fc66 	bl	8005e20 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800155a:	2b0a      	cmp	r3, #10
 800155c:	d874      	bhi.n	8001648 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
        	uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        	if (hcan == &hcan1) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3b      	ldr	r2, [pc, #236]	@ (8001658 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d131      	bne.n	80015d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
        		//memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
        		//memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
        		get_motor_feedback(&motorFeedback[0][i], rx_data);
 8001570:	7a3b      	ldrb	r3, [r7, #8]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7a7b      	ldrb	r3, [r7, #9]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21a      	sxth	r2, r3
 800157e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001582:	b291      	uxth	r1, r2
 8001584:	4a35      	ldr	r2, [pc, #212]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001586:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800158a:	7abb      	ldrb	r3, [r7, #10]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b219      	sxth	r1, r3
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	b21a      	sxth	r2, r3
 8001594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001598:	430a      	orrs	r2, r1
 800159a:	b211      	sxth	r1, r2
 800159c:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	460a      	mov	r2, r1
 80015a4:	805a      	strh	r2, [r3, #2]
 80015a6:	7b3b      	ldrb	r3, [r7, #12]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b219      	sxth	r1, r3
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015b4:	430a      	orrs	r2, r1
 80015b6:	b211      	sxth	r1, r2
 80015b8:	4a28      	ldr	r2, [pc, #160]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	460a      	mov	r2, r1
 80015c0:	809a      	strh	r2, [r3, #4]
 80015c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015c6:	7bb9      	ldrb	r1, [r7, #14]
 80015c8:	4a24      	ldr	r2, [pc, #144]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	460a      	mov	r2, r1
 80015d0:	719a      	strb	r2, [r3, #6]
        	} else if (hcan == &hcan2) {
        		//memcpy(&motorFeedback[1][i], &rx_data[0], 8);
        		get_motor_feedback(&motorFeedback[1][i], rx_data);
        		//usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
        	}
        	break;
 80015d2:	e03b      	b.n	800164c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
        	} else if (hcan == &hcan2) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a22      	ldr	r2, [pc, #136]	@ (8001660 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d137      	bne.n	800164c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
        		get_motor_feedback(&motorFeedback[1][i], rx_data);
 80015dc:	7a3b      	ldrb	r3, [r7, #8]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7a7b      	ldrb	r3, [r7, #9]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015ee:	b291      	uxth	r1, r2
 80015f0:	4a1a      	ldr	r2, [pc, #104]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80015f2:	330b      	adds	r3, #11
 80015f4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80015f8:	7abb      	ldrb	r3, [r7, #10]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b219      	sxth	r1, r3
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	b21a      	sxth	r2, r3
 8001602:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001606:	430a      	orrs	r2, r1
 8001608:	b211      	sxth	r1, r2
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800160c:	330b      	adds	r3, #11
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	460a      	mov	r2, r1
 8001614:	805a      	strh	r2, [r3, #2]
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b219      	sxth	r1, r3
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	b21a      	sxth	r2, r3
 8001620:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001624:	430a      	orrs	r2, r1
 8001626:	b211      	sxth	r1, r2
 8001628:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800162a:	330b      	adds	r3, #11
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	460a      	mov	r2, r1
 8001632:	809a      	strh	r2, [r3, #4]
 8001634:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001638:	7bb9      	ldrb	r1, [r7, #14]
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800163c:	330b      	adds	r3, #11
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4413      	add	r3, r2
 8001642:	460a      	mov	r2, r1
 8001644:	719a      	strb	r2, [r3, #6]
        	break;
 8001646:	e001      	b.n	800164c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
        }
        default: {
            break;
 8001648:	bf00      	nop
 800164a:	e000      	b.n	800164e <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
        	break;
 800164c:	bf00      	nop
        }
    }
}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	@ 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200009a8 	.word	0x200009a8
 800165c:	20000368 	.word	0x20000368
 8001660:	200009d0 	.word	0x200009d0

08001664 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	4603      	mov	r3, r0
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001682:	88bb      	ldrh	r3, [r7, #4]
 8001684:	4a27      	ldr	r2, [pc, #156]	@ (8001724 <CAN_DriveMotor+0xc0>)
 8001686:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8001688:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <CAN_DriveMotor+0xc0>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 800168e:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <CAN_DriveMotor+0xc0>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <CAN_DriveMotor+0xc0>)
 8001696:	2208      	movs	r2, #8
 8001698:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 800169a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800169e:	121b      	asrs	r3, r3, #8
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016a6:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016ae:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 80016b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016b4:	121b      	asrs	r3, r3, #8
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016bc:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 80016be:	883b      	ldrh	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016c4:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 80016c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016ca:	121b      	asrs	r3, r3, #8
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016d2:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 80016d4:	8c3b      	ldrh	r3, [r7, #32]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016da:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 80016dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80016e0:	121b      	asrs	r3, r3, #8
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016e8:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 80016ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016f0:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <CAN_DriveMotor+0xc4>)
 80016fe:	4909      	ldr	r1, [pc, #36]	@ (8001724 <CAN_DriveMotor+0xc0>)
 8001700:	480a      	ldr	r0, [pc, #40]	@ (800172c <CAN_DriveMotor+0xc8>)
 8001702:	f004 fabd 	bl	8005c80 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8001706:	e009      	b.n	800171c <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d106      	bne.n	800171c <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <CAN_DriveMotor+0xc4>)
 8001714:	4903      	ldr	r1, [pc, #12]	@ (8001724 <CAN_DriveMotor+0xc0>)
 8001716:	4806      	ldr	r0, [pc, #24]	@ (8001730 <CAN_DriveMotor+0xcc>)
 8001718:	f004 fab2 	bl	8005c80 <HAL_CAN_AddTxMessage>
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}
 8001724:	20000318 	.word	0x20000318
 8001728:	20000330 	.word	0x20000330
 800172c:	200009a8 	.word	0x200009a8
 8001730:	200009d0 	.word	0x200009d0

08001734 <CAN_defineMotor>:

void CAN_defineMotor(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	460b      	mov	r3, r1
 8001740:	71bb      	strb	r3, [r7, #6]
 8001742:	4613      	mov	r3, r2
 8001744:	717b      	strb	r3, [r7, #5]
	switch(motorType) {
 8001746:	79bb      	ldrb	r3, [r7, #6]
 8001748:	2b02      	cmp	r3, #2
 800174a:	dc02      	bgt.n	8001752 <CAN_defineMotor+0x1e>
 800174c:	2b00      	cmp	r3, #0
 800174e:	dc03      	bgt.n	8001758 <CAN_defineMotor+0x24>
 8001750:	e082      	b.n	8001858 <CAN_defineMotor+0x124>
 8001752:	2b03      	cmp	r3, #3
 8001754:	d03a      	beq.n	80017cc <CAN_defineMotor+0x98>
 8001756:	e07f      	b.n	8001858 <CAN_defineMotor+0x124>
		case (1) :
		case (2) : {
			switch(motorID) {
 8001758:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800175c:	2b04      	cmp	r3, #4
 800175e:	dc02      	bgt.n	8001766 <CAN_defineMotor+0x32>
 8001760:	2b00      	cmp	r3, #0
 8001762:	dc04      	bgt.n	800176e <CAN_defineMotor+0x3a>
 8001764:	e02a      	b.n	80017bc <CAN_defineMotor+0x88>
 8001766:	3b05      	subs	r3, #5
 8001768:	2b03      	cmp	r3, #3
 800176a:	d827      	bhi.n	80017bc <CAN_defineMotor+0x88>
 800176c:	e012      	b.n	8001794 <CAN_defineMotor+0x60>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group1[motorID - 1], motorType);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	1e5a      	subs	r2, r3, #1
 8001772:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001776:	1e59      	subs	r1, r3, #1
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	440b      	add	r3, r1
 8001784:	4a39      	ldr	r2, [pc, #228]	@ (800186c <CAN_defineMotor+0x138>)
 8001786:	4413      	add	r3, r2
 8001788:	79ba      	ldrb	r2, [r7, #6]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f875 	bl	800187c <CAN_setMotorDefinition>
					break;
 8001792:	e01a      	b.n	80017ca <CAN_defineMotor+0x96>
				}
				case (5):
				case (6):
				case (7):
				case (8): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800179c:	1e59      	subs	r1, r3, #1
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	4a30      	ldr	r2, [pc, #192]	@ (800186c <CAN_defineMotor+0x138>)
 80017ac:	4413      	add	r3, r2
 80017ae:	3304      	adds	r3, #4
 80017b0:	79ba      	ldrb	r2, [r7, #6]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f861 	bl	800187c <CAN_setMotorDefinition>
					break;
 80017ba:	e006      	b.n	80017ca <CAN_defineMotor+0x96>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 80017bc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017c0:	4619      	mov	r1, r3
 80017c2:	482b      	ldr	r0, [pc, #172]	@ (8001870 <CAN_defineMotor+0x13c>)
 80017c4:	f000 fe48 	bl	8002458 <usart_printf>
					break;
 80017c8:	bf00      	nop
				}
			}
			break;
 80017ca:	e04b      	b.n	8001864 <CAN_defineMotor+0x130>
		}
		case (3): {
			switch(motorID) {
 80017cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d032      	beq.n	800183a <CAN_defineMotor+0x106>
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	dc37      	bgt.n	8001848 <CAN_defineMotor+0x114>
 80017d8:	2b04      	cmp	r3, #4
 80017da:	dc02      	bgt.n	80017e2 <CAN_defineMotor+0xae>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	dc04      	bgt.n	80017ea <CAN_defineMotor+0xb6>
 80017e0:	e032      	b.n	8001848 <CAN_defineMotor+0x114>
 80017e2:	3b05      	subs	r3, #5
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d82f      	bhi.n	8001848 <CAN_defineMotor+0x114>
 80017e8:	e013      	b.n	8001812 <CAN_defineMotor+0xde>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	1e5a      	subs	r2, r3, #1
 80017ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017f2:	1e59      	subs	r1, r3, #1
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	440b      	add	r3, r1
 8001800:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <CAN_defineMotor+0x138>)
 8001802:	4413      	add	r3, r2
 8001804:	3304      	adds	r3, #4
 8001806:	79ba      	ldrb	r2, [r7, #6]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f836 	bl	800187c <CAN_setMotorDefinition>
					break;
 8001810:	e021      	b.n	8001856 <CAN_defineMotor+0x122>
				}
				case (5):
				case (6):
				case (7): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group3[motorID - 5], motorType);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800181a:	1f59      	subs	r1, r3, #5
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	440b      	add	r3, r1
 8001828:	3308      	adds	r3, #8
 800182a:	4a10      	ldr	r2, [pc, #64]	@ (800186c <CAN_defineMotor+0x138>)
 800182c:	4413      	add	r3, r2
 800182e:	79ba      	ldrb	r2, [r7, #6]
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f822 	bl	800187c <CAN_setMotorDefinition>
					break;
 8001838:	e00d      	b.n	8001856 <CAN_defineMotor+0x122>
				}
				case (8): {               // call the user a dumbass for spawning an ID 8 on 0x2FF
					usart_printf("WARNING - motor ID 8 is not available for GM6020s according to DJI's CAN protocols \r\n", motorID);
 800183a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	@ (8001874 <CAN_defineMotor+0x140>)
 8001842:	f000 fe09 	bl	8002458 <usart_printf>
					break;
 8001846:	e006      	b.n	8001856 <CAN_defineMotor+0x122>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001848:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800184c:	4619      	mov	r1, r3
 800184e:	4808      	ldr	r0, [pc, #32]	@ (8001870 <CAN_defineMotor+0x13c>)
 8001850:	f000 fe02 	bl	8002458 <usart_printf>
					break;
 8001854:	bf00      	nop
				}
			}
			break;
 8001856:	e005      	b.n	8001864 <CAN_defineMotor+0x130>
		}
		default: {
			usart_printf("WARNING - motor type %d does not match any registered motors \r\n", motorType);
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	4619      	mov	r1, r3
 800185c:	4806      	ldr	r0, [pc, #24]	@ (8001878 <CAN_defineMotor+0x144>)
 800185e:	f000 fdfb 	bl	8002458 <usart_printf>
			break;
 8001862:	bf00      	nop
		}
	}
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000040 	.word	0x20000040
 8001870:	080112a0 	.word	0x080112a0
 8001874:	080112e0 	.word	0x080112e0
 8001878:	08011338 	.word	0x08011338

0800187c <CAN_setMotorDefinition>:

void CAN_setMotorDefinition(int8_t *Declaration, MotorType_ID motorType) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
	if (*Declaration == -1) {    // ok
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f993 3000 	ldrsb.w	r3, [r3]
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001892:	d104      	bne.n	800189e <CAN_setMotorDefinition+0x22>
		*Declaration = motorType;
 8001894:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	701a      	strb	r2, [r3, #0]
	} else {                           // repeat definition, do nothing
		usart_printf("WARNING - motor ID has already been set \r\n");
	}
}
 800189c:	e002      	b.n	80018a4 <CAN_setMotorDefinition+0x28>
		usart_printf("WARNING - motor ID has already been set \r\n");
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <CAN_setMotorDefinition+0x30>)
 80018a0:	f000 fdda 	bl	8002458 <usart_printf>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08011378 	.word	0x08011378

080018b0 <CAN_setMotorCtrlVal>:

		}
	}
}

void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	4603      	mov	r3, r0
 80018c4:	71bb      	strb	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	717b      	strb	r3, [r7, #5]
 80018ca:	4613      	mov	r3, r2
 80018cc:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	f000 8145 	beq.w	8001b60 <CAN_setMotorCtrlVal+0x2b0>
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	f300 81e7 	bgt.w	8001caa <CAN_setMotorCtrlVal+0x3fa>
 80018dc:	2b02      	cmp	r3, #2
 80018de:	dc02      	bgt.n	80018e6 <CAN_setMotorCtrlVal+0x36>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dc04      	bgt.n	80018ee <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 80018e4:	e1e1      	b.n	8001caa <CAN_setMotorCtrlVal+0x3fa>
	switch(motorType) {
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	f000 8097 	beq.w	8001a1a <CAN_setMotorCtrlVal+0x16a>
}
 80018ec:	e1dd      	b.n	8001caa <CAN_setMotorCtrlVal+0x3fa>
			switch(motorID) {
 80018ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	dc02      	bgt.n	80018fc <CAN_setMotorCtrlVal+0x4c>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	dc05      	bgt.n	8001906 <CAN_setMotorCtrlVal+0x56>
					break;
 80018fa:	e08c      	b.n	8001a16 <CAN_setMotorCtrlVal+0x166>
 80018fc:	3b05      	subs	r3, #5
 80018fe:	2b03      	cmp	r3, #3
 8001900:	f200 8089 	bhi.w	8001a16 <CAN_setMotorCtrlVal+0x166>
 8001904:	e042      	b.n	800198c <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	1e5a      	subs	r2, r3, #1
 800190a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800190e:	1e59      	subs	r1, r3, #1
 8001910:	48bf      	ldr	r0, [pc, #764]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	887a      	ldrh	r2, [r7, #2]
 800191e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	49ba      	ldr	r1, [pc, #744]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	49b5      	ldr	r1, [pc, #724]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3302      	adds	r3, #2
 8001948:	f9b3 5000 	ldrsh.w	r5, [r3]
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	1e5a      	subs	r2, r3, #1
 8001950:	49af      	ldr	r1, [pc, #700]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	3304      	adds	r3, #4
 800195e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	48aa      	ldr	r0, [pc, #680]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4403      	add	r3, r0
 8001972:	3306      	adds	r3, #6
 8001974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001978:	79f8      	ldrb	r0, [r7, #7]
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	9100      	str	r1, [sp, #0]
 800197e:	462b      	mov	r3, r5
 8001980:	4622      	mov	r2, r4
 8001982:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001986:	f7ff fe6d 	bl	8001664 <CAN_DriveMotor>
					break;
 800198a:	e045      	b.n	8001a18 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	1e5a      	subs	r2, r3, #1
 8001990:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001994:	1f59      	subs	r1, r3, #5
 8001996:	489e      	ldr	r0, [pc, #632]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3304      	adds	r3, #4
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	4998      	ldr	r1, [pc, #608]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3308      	adds	r3, #8
 80019bc:	f9b3 4000 	ldrsh.w	r4, [r3]
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	1e5a      	subs	r2, r3, #1
 80019c4:	4992      	ldr	r1, [pc, #584]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	330a      	adds	r3, #10
 80019d2:	f9b3 5000 	ldrsh.w	r5, [r3]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	1e5a      	subs	r2, r3, #1
 80019da:	498d      	ldr	r1, [pc, #564]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	330c      	adds	r3, #12
 80019e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	4887      	ldr	r0, [pc, #540]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4403      	add	r3, r0
 80019fc:	330e      	adds	r3, #14
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	79f8      	ldrb	r0, [r7, #7]
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	9100      	str	r1, [sp, #0]
 8001a08:	462b      	mov	r3, r5
 8001a0a:	4622      	mov	r2, r4
 8001a0c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001a10:	f7ff fe28 	bl	8001664 <CAN_DriveMotor>
					break;
 8001a14:	e000      	b.n	8001a18 <CAN_setMotorCtrlVal+0x168>
					break;
 8001a16:	bf00      	nop
			break;
 8001a18:	e147      	b.n	8001caa <CAN_setMotorCtrlVal+0x3fa>
			switch(motorID) {
 8001a1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	f000 809a 	beq.w	8001b58 <CAN_setMotorCtrlVal+0x2a8>
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	f300 8099 	bgt.w	8001b5c <CAN_setMotorCtrlVal+0x2ac>
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	dc02      	bgt.n	8001a34 <CAN_setMotorCtrlVal+0x184>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	dc05      	bgt.n	8001a3e <CAN_setMotorCtrlVal+0x18e>
					break;
 8001a32:	e093      	b.n	8001b5c <CAN_setMotorCtrlVal+0x2ac>
 8001a34:	3b05      	subs	r3, #5
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	f200 8090 	bhi.w	8001b5c <CAN_setMotorCtrlVal+0x2ac>
 8001a3c:	e044      	b.n	8001ac8 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a46:	1e59      	subs	r1, r3, #1
 8001a48:	4871      	ldr	r0, [pc, #452]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3304      	adds	r3, #4
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	1e5a      	subs	r2, r3, #1
 8001a60:	496b      	ldr	r1, [pc, #428]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	1e5a      	subs	r2, r3, #1
 8001a76:	4966      	ldr	r1, [pc, #408]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	330a      	adds	r3, #10
 8001a84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	4960      	ldr	r1, [pc, #384]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	330c      	adds	r3, #12
 8001a9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	485b      	ldr	r0, [pc, #364]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4403      	add	r3, r0
 8001aae:	330e      	adds	r3, #14
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	79f8      	ldrb	r0, [r7, #7]
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	9100      	str	r1, [sp, #0]
 8001aba:	462b      	mov	r3, r5
 8001abc:	4622      	mov	r2, r4
 8001abe:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001ac2:	f7ff fdcf 	bl	8001664 <CAN_DriveMotor>
					break;
 8001ac6:	e04a      	b.n	8001b5e <CAN_setMotorCtrlVal+0x2ae>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	1e5a      	subs	r2, r3, #1
 8001acc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ad0:	1f59      	subs	r1, r3, #5
 8001ad2:	484f      	ldr	r0, [pc, #316]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	3308      	adds	r3, #8
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	4949      	ldr	r1, [pc, #292]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	3310      	adds	r3, #16
 8001af8:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	4943      	ldr	r1, [pc, #268]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3312      	adds	r3, #18
 8001b0e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	493e      	ldr	r1, [pc, #248]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3314      	adds	r3, #20
 8001b24:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	4838      	ldr	r0, [pc, #224]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4403      	add	r3, r0
 8001b38:	3316      	adds	r3, #22
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	79f8      	ldrb	r0, [r7, #7]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	9100      	str	r1, [sp, #0]
 8001b44:	462b      	mov	r3, r5
 8001b46:	4622      	mov	r2, r4
 8001b48:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001b4c:	f7ff fd8a 	bl	8001664 <CAN_DriveMotor>
					usart_printf("trig \r\n");
 8001b50:	4830      	ldr	r0, [pc, #192]	@ (8001c14 <CAN_setMotorCtrlVal+0x364>)
 8001b52:	f000 fc81 	bl	8002458 <usart_printf>
					break;
 8001b56:	e002      	b.n	8001b5e <CAN_setMotorCtrlVal+0x2ae>
					break;
 8001b58:	bf00      	nop
 8001b5a:	e0a6      	b.n	8001caa <CAN_setMotorCtrlVal+0x3fa>
					break;
 8001b5c:	bf00      	nop
			break;
 8001b5e:	e0a4      	b.n	8001caa <CAN_setMotorCtrlVal+0x3fa>
			switch(motorID) {
 8001b60:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	f000 809c 	beq.w	8001ca2 <CAN_setMotorCtrlVal+0x3f2>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	f300 809b 	bgt.w	8001ca6 <CAN_setMotorCtrlVal+0x3f6>
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	dc02      	bgt.n	8001b7a <CAN_setMotorCtrlVal+0x2ca>
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dc05      	bgt.n	8001b84 <CAN_setMotorCtrlVal+0x2d4>
					break;
 8001b78:	e095      	b.n	8001ca6 <CAN_setMotorCtrlVal+0x3f6>
 8001b7a:	3b05      	subs	r3, #5
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	f200 8092 	bhi.w	8001ca6 <CAN_setMotorCtrlVal+0x3f6>
 8001b82:	e049      	b.n	8001c18 <CAN_setMotorCtrlVal+0x368>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b8c:	1e59      	subs	r1, r3, #1
 8001b8e:	4820      	ldr	r0, [pc, #128]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	887a      	ldrh	r2, [r7, #2]
 8001b9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	491a      	ldr	r1, [pc, #104]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	1e5a      	subs	r2, r3, #1
 8001bbc:	4914      	ldr	r1, [pc, #80]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	330a      	adds	r3, #10
 8001bca:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	490f      	ldr	r1, [pc, #60]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	330c      	adds	r3, #12
 8001be0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <CAN_setMotorCtrlVal+0x360>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4403      	add	r3, r0
 8001bf4:	330e      	adds	r3, #14
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	79f8      	ldrb	r0, [r7, #7]
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	9100      	str	r1, [sp, #0]
 8001c00:	462b      	mov	r3, r5
 8001c02:	4622      	mov	r2, r4
 8001c04:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001c08:	f7ff fd2c 	bl	8001664 <CAN_DriveMotor>
					break;
 8001c0c:	e04c      	b.n	8001ca8 <CAN_setMotorCtrlVal+0x3f8>
 8001c0e:	bf00      	nop
 8001c10:	20000338 	.word	0x20000338
 8001c14:	080113a4 	.word	0x080113a4
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c20:	1f59      	subs	r1, r3, #5
 8001c22:	4824      	ldr	r0, [pc, #144]	@ (8001cb4 <CAN_setMotorCtrlVal+0x404>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3308      	adds	r3, #8
 8001c30:	887a      	ldrh	r2, [r7, #2]
 8001c32:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	1e5a      	subs	r2, r3, #1
 8001c3a:	491e      	ldr	r1, [pc, #120]	@ (8001cb4 <CAN_setMotorCtrlVal+0x404>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3310      	adds	r3, #16
 8001c48:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	4918      	ldr	r1, [pc, #96]	@ (8001cb4 <CAN_setMotorCtrlVal+0x404>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3312      	adds	r3, #18
 8001c5e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	1e5a      	subs	r2, r3, #1
 8001c66:	4913      	ldr	r1, [pc, #76]	@ (8001cb4 <CAN_setMotorCtrlVal+0x404>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	3314      	adds	r3, #20
 8001c74:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	480d      	ldr	r0, [pc, #52]	@ (8001cb4 <CAN_setMotorCtrlVal+0x404>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4403      	add	r3, r0
 8001c88:	3316      	adds	r3, #22
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	79f8      	ldrb	r0, [r7, #7]
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	9100      	str	r1, [sp, #0]
 8001c94:	462b      	mov	r3, r5
 8001c96:	4622      	mov	r2, r4
 8001c98:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001c9c:	f7ff fce2 	bl	8001664 <CAN_DriveMotor>
					break;
 8001ca0:	e002      	b.n	8001ca8 <CAN_setMotorCtrlVal+0x3f8>
					break;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <CAN_setMotorCtrlVal+0x3f8>
					break;
 8001ca6:	bf00      	nop
			break;
 8001ca8:	bf00      	nop
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000338 	.word	0x20000338

08001cb8 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b08b      	sub	sp, #44	@ 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	eef0 6a40 	vmov.f32	s13, s0
 8001cca:	eeb0 7a60 	vmov.f32	s14, s1
 8001cce:	eef0 7a41 	vmov.f32	s15, s2
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	75fb      	strb	r3, [r7, #23]
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	75bb      	strb	r3, [r7, #22]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	757b      	strb	r3, [r7, #21]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	827b      	strh	r3, [r7, #18]
 8001ce2:	edc7 6a01 	vstr	s13, [r7, #4]
 8001ce6:	ed87 7a02 	vstr	s14, [r7, #8]
 8001cea:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001cf8:	7dbb      	ldrb	r3, [r7, #22]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	dc02      	bgt.n	8001d04 <calcRPM_PID+0x4c>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	dc04      	bgt.n	8001d0c <calcRPM_PID+0x54>
 8001d02:	e00d      	b.n	8001d20 <calcRPM_PID+0x68>
 8001d04:	3b03      	subs	r3, #3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d80a      	bhi.n	8001d20 <calcRPM_PID+0x68>
 8001d0a:	e004      	b.n	8001d16 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001d0c:	7d7b      	ldrb	r3, [r7, #21]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d14:	e009      	b.n	8001d2a <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001d16:	7d7b      	ldrb	r3, [r7, #21]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d1e:	e004      	b.n	8001d2a <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8001d20:	7d7b      	ldrb	r3, [r7, #21]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d28:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001d2a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001d2e:	7ffa      	ldrb	r2, [r7, #31]
 8001d30:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d34:	4c70      	ldr	r4, [pc, #448]	@ (8001ef8 <calcRPM_PID+0x240>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	4403      	add	r3, r0
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4423      	add	r3, r4
 8001d46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d4a:	7ffa      	ldrb	r2, [r7, #31]
 8001d4c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d50:	1ac9      	subs	r1, r1, r3
 8001d52:	4c6a      	ldr	r4, [pc, #424]	@ (8001efc <calcRPM_PID+0x244>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4403      	add	r3, r0
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4423      	add	r3, r4
 8001d64:	3304      	adds	r3, #4
 8001d66:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001d68:	7ffa      	ldrb	r2, [r7, #31]
 8001d6a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001d6e:	4863      	ldr	r0, [pc, #396]	@ (8001efc <calcRPM_PID+0x244>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4403      	add	r3, r0
 8001d80:	3308      	adds	r3, #8
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	7ffa      	ldrb	r2, [r7, #31]
 8001d86:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d8a:	4c5c      	ldr	r4, [pc, #368]	@ (8001efc <calcRPM_PID+0x244>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	4403      	add	r3, r0
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4423      	add	r3, r4
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	7ffa      	ldrb	r2, [r7, #31]
 8001da2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001da6:	4419      	add	r1, r3
 8001da8:	4c54      	ldr	r4, [pc, #336]	@ (8001efc <calcRPM_PID+0x244>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	4403      	add	r3, r0
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4423      	add	r3, r4
 8001dba:	3308      	adds	r3, #8
 8001dbc:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8001dbe:	7ffa      	ldrb	r2, [r7, #31]
 8001dc0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001dc4:	484d      	ldr	r0, [pc, #308]	@ (8001efc <calcRPM_PID+0x244>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	4403      	add	r3, r0
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	7ffa      	ldrb	r2, [r7, #31]
 8001dda:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001dde:	4c46      	ldr	r4, [pc, #280]	@ (8001ef8 <calcRPM_PID+0x240>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	4403      	add	r3, r0
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4423      	add	r3, r4
 8001df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001df4:	7ffa      	ldrb	r2, [r7, #31]
 8001df6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001dfa:	1ac9      	subs	r1, r1, r3
 8001dfc:	4c3f      	ldr	r4, [pc, #252]	@ (8001efc <calcRPM_PID+0x244>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	4403      	add	r3, r0
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	4423      	add	r3, r4
 8001e0e:	330c      	adds	r3, #12
 8001e10:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8001e12:	7ffa      	ldrb	r2, [r7, #31]
 8001e14:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e18:	4837      	ldr	r0, [pc, #220]	@ (8001ef8 <calcRPM_PID+0x240>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4403      	add	r3, r0
 8001e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e2e:	7ffa      	ldrb	r2, [r7, #31]
 8001e30:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e34:	461c      	mov	r4, r3
 8001e36:	4831      	ldr	r0, [pc, #196]	@ (8001efc <calcRPM_PID+0x244>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	440b      	add	r3, r1
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4403      	add	r3, r0
 8001e48:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e4e:	7ffa      	ldrb	r2, [r7, #31]
 8001e50:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e54:	4829      	ldr	r0, [pc, #164]	@ (8001efc <calcRPM_PID+0x244>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	4403      	add	r3, r0
 8001e66:	3304      	adds	r3, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e76:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e7a:	7ffa      	ldrb	r2, [r7, #31]
 8001e7c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e80:	481e      	ldr	r0, [pc, #120]	@ (8001efc <calcRPM_PID+0x244>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4403      	add	r3, r0
 8001e92:	3308      	adds	r3, #8
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea6:	edd7 6a03 	vldr	s13, [r7, #12]
 8001eaa:	7ffa      	ldrb	r2, [r7, #31]
 8001eac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001eb0:	4812      	ldr	r0, [pc, #72]	@ (8001efc <calcRPM_PID+0x244>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4403      	add	r3, r0
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eda:	ee17 3a90 	vmov	r3, s15
 8001ede:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001ee0:	7dbb      	ldrb	r3, [r7, #22]
 8001ee2:	6a39      	ldr	r1, [r7, #32]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f997 	bl	8002218 <applyCtrlLimit>
 8001eea:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	372c      	adds	r7, #44	@ 0x2c
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000368 	.word	0x20000368
 8001efc:	20000418 	.word	0x20000418

08001f00 <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b08b      	sub	sp, #44	@ 0x2c
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	eef0 6a40 	vmov.f32	s13, s0
 8001f12:	eeb0 7a60 	vmov.f32	s14, s1
 8001f16:	eef0 7a41 	vmov.f32	s15, s2
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	75fb      	strb	r3, [r7, #23]
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75bb      	strb	r3, [r7, #22]
 8001f22:	460b      	mov	r3, r1
 8001f24:	757b      	strb	r3, [r7, #21]
 8001f26:	4613      	mov	r3, r2
 8001f28:	827b      	strh	r3, [r7, #18]
 8001f2a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f2e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f32:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8001f48:	7dbb      	ldrb	r3, [r7, #22]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	dc02      	bgt.n	8001f54 <calcPosition_PID+0x54>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	dc04      	bgt.n	8001f5c <calcPosition_PID+0x5c>
 8001f52:	e00d      	b.n	8001f70 <calcPosition_PID+0x70>
 8001f54:	3b03      	subs	r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d80a      	bhi.n	8001f70 <calcPosition_PID+0x70>
 8001f5a:	e004      	b.n	8001f66 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001f5c:	7d7b      	ldrb	r3, [r7, #21]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001f64:	e009      	b.n	8001f7a <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001f66:	7d7b      	ldrb	r3, [r7, #21]
 8001f68:	3303      	adds	r3, #3
 8001f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001f6e:	e004      	b.n	8001f7a <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 8001f70:	7d7b      	ldrb	r3, [r7, #21]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001f78:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 8001f7a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001f7e:	7ffa      	ldrb	r2, [r7, #31]
 8001f80:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001f84:	4ca2      	ldr	r4, [pc, #648]	@ (8002210 <calcPosition_PID+0x310>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	4403      	add	r3, r0
 8001f92:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001f96:	1acb      	subs	r3, r1, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db10      	blt.n	8001fbe <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 8001f9c:	8a79      	ldrh	r1, [r7, #18]
 8001f9e:	7ffa      	ldrb	r2, [r7, #31]
 8001fa0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001fa4:	4c9a      	ldr	r4, [pc, #616]	@ (8002210 <calcPosition_PID+0x310>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	4403      	add	r3, r0
 8001fb2:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001fb6:	1acb      	subs	r3, r1, r3
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	83bb      	strh	r3, [r7, #28]
 8001fbc:	e012      	b.n	8001fe4 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 8001fbe:	8a79      	ldrh	r1, [r7, #18]
 8001fc0:	7ffa      	ldrb	r2, [r7, #31]
 8001fc2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001fc6:	4c92      	ldr	r4, [pc, #584]	@ (8002210 <calcPosition_PID+0x310>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4403      	add	r3, r0
 8001fd4:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001fd8:	1acb      	subs	r3, r1, r3
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8001fe4:	7ffa      	ldrb	r2, [r7, #31]
 8001fe6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001fea:	4889      	ldr	r0, [pc, #548]	@ (8002210 <calcPosition_PID+0x310>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	db10      	blt.n	800202a <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8002008:	7ffa      	ldrb	r2, [r7, #31]
 800200a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800200e:	4880      	ldr	r0, [pc, #512]	@ (8002210 <calcPosition_PID+0x310>)
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	440b      	add	r3, r1
 800201c:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002020:	8a7b      	ldrh	r3, [r7, #18]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	b29b      	uxth	r3, r3
 8002026:	837b      	strh	r3, [r7, #26]
 8002028:	e012      	b.n	8002050 <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 800202a:	7ffa      	ldrb	r2, [r7, #31]
 800202c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002030:	4877      	ldr	r0, [pc, #476]	@ (8002210 <calcPosition_PID+0x310>)
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	440b      	add	r3, r1
 800203e:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002042:	8a7b      	ldrh	r3, [r7, #18]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	b29b      	uxth	r3, r3
 8002048:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800204c:	b29b      	uxth	r3, r3
 800204e:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 8002050:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002054:	7ffa      	ldrb	r2, [r7, #31]
 8002056:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800205a:	4c6d      	ldr	r4, [pc, #436]	@ (8002210 <calcPosition_PID+0x310>)
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	4403      	add	r3, r0
 8002068:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 800206c:	7ffa      	ldrb	r2, [r7, #31]
 800206e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002072:	1ac9      	subs	r1, r1, r3
 8002074:	4c67      	ldr	r4, [pc, #412]	@ (8002214 <calcPosition_PID+0x314>)
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	4403      	add	r3, r0
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4423      	add	r3, r4
 8002086:	3304      	adds	r3, #4
 8002088:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 800208a:	7ffa      	ldrb	r2, [r7, #31]
 800208c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002090:	4860      	ldr	r0, [pc, #384]	@ (8002214 <calcPosition_PID+0x314>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	440b      	add	r3, r1
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	4403      	add	r3, r0
 80020a2:	3308      	adds	r3, #8
 80020a4:	6819      	ldr	r1, [r3, #0]
 80020a6:	7ffa      	ldrb	r2, [r7, #31]
 80020a8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020ac:	4c59      	ldr	r4, [pc, #356]	@ (8002214 <calcPosition_PID+0x314>)
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	4403      	add	r3, r0
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4423      	add	r3, r4
 80020be:	3304      	adds	r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	7ffa      	ldrb	r2, [r7, #31]
 80020c4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020c8:	4419      	add	r1, r3
 80020ca:	4c52      	ldr	r4, [pc, #328]	@ (8002214 <calcPosition_PID+0x314>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	4403      	add	r3, r0
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4423      	add	r3, r4
 80020dc:	3308      	adds	r3, #8
 80020de:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 80020e0:	7ffa      	ldrb	r2, [r7, #31]
 80020e2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80020e6:	484b      	ldr	r0, [pc, #300]	@ (8002214 <calcPosition_PID+0x314>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	4403      	add	r3, r0
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	7ffa      	ldrb	r2, [r7, #31]
 80020fc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002100:	4c43      	ldr	r4, [pc, #268]	@ (8002210 <calcPosition_PID+0x310>)
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	4403      	add	r3, r0
 800210e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002112:	7ffa      	ldrb	r2, [r7, #31]
 8002114:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002118:	1ac9      	subs	r1, r1, r3
 800211a:	4c3e      	ldr	r4, [pc, #248]	@ (8002214 <calcPosition_PID+0x314>)
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	4403      	add	r3, r0
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4423      	add	r3, r4
 800212c:	330c      	adds	r3, #12
 800212e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8002130:	7ffa      	ldrb	r2, [r7, #31]
 8002132:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002136:	4836      	ldr	r0, [pc, #216]	@ (8002210 <calcPosition_PID+0x310>)
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	440b      	add	r3, r1
 8002144:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002148:	7ffa      	ldrb	r2, [r7, #31]
 800214a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800214e:	461c      	mov	r4, r3
 8002150:	4830      	ldr	r0, [pc, #192]	@ (8002214 <calcPosition_PID+0x314>)
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	440b      	add	r3, r1
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4403      	add	r3, r0
 8002162:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8002164:	ed97 7a01 	vldr	s14, [r7, #4]
 8002168:	7ffa      	ldrb	r2, [r7, #31]
 800216a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800216e:	4829      	ldr	r0, [pc, #164]	@ (8002214 <calcPosition_PID+0x314>)
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	440b      	add	r3, r1
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4403      	add	r3, r0
 8002180:	3304      	adds	r3, #4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002190:	edd7 6a02 	vldr	s13, [r7, #8]
 8002194:	7ffa      	ldrb	r2, [r7, #31]
 8002196:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800219a:	481e      	ldr	r0, [pc, #120]	@ (8002214 <calcPosition_PID+0x314>)
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	4403      	add	r3, r0
 80021ac:	3308      	adds	r3, #8
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	ee07 3a90 	vmov	s15, r3
 80021b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c0:	edd7 6a03 	vldr	s13, [r7, #12]
 80021c4:	7ffa      	ldrb	r2, [r7, #31]
 80021c6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021ca:	4812      	ldr	r0, [pc, #72]	@ (8002214 <calcPosition_PID+0x314>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4403      	add	r3, r0
 80021dc:	330c      	adds	r3, #12
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f4:	ee17 3a90 	vmov	r3, s15
 80021f8:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 80021fa:	7dbb      	ldrb	r3, [r7, #22]
 80021fc:	6a39      	ldr	r1, [r7, #32]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f80a 	bl	8002218 <applyCtrlLimit>
 8002204:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8002206:	6a3b      	ldr	r3, [r7, #32]
}
 8002208:	4618      	mov	r0, r3
 800220a:	372c      	adds	r7, #44	@ 0x2c
 800220c:	46bd      	mov	sp, r7
 800220e:	bd90      	pop	{r4, r7, pc}
 8002210:	20000368 	.word	0x20000368
 8002214:	20000418 	.word	0x20000418

08002218 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d009      	beq.n	800223e <applyCtrlLimit+0x26>
 800222a:	2b04      	cmp	r3, #4
 800222c:	dc29      	bgt.n	8002282 <applyCtrlLimit+0x6a>
 800222e:	2b02      	cmp	r3, #2
 8002230:	dc02      	bgt.n	8002238 <applyCtrlLimit+0x20>
 8002232:	2b00      	cmp	r3, #0
 8002234:	dc03      	bgt.n	800223e <applyCtrlLimit+0x26>
 8002236:	e024      	b.n	8002282 <applyCtrlLimit+0x6a>
 8002238:	2b03      	cmp	r3, #3
 800223a:	d00f      	beq.n	800225c <applyCtrlLimit+0x44>
 800223c:	e021      	b.n	8002282 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002244:	dd03      	ble.n	800224e <applyCtrlLimit+0x36>
				val = 16384;
 8002246:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800224a:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 800224c:	e016      	b.n	800227c <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8002254:	da12      	bge.n	800227c <applyCtrlLimit+0x64>
				val = -16384;
 8002256:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <applyCtrlLimit+0x78>)
 8002258:	603b      	str	r3, [r7, #0]
			break;
 800225a:	e00f      	b.n	800227c <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002262:	4293      	cmp	r3, r2
 8002264:	dd03      	ble.n	800226e <applyCtrlLimit+0x56>
				val = 25000;
 8002266:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 800226a:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 800226c:	e008      	b.n	8002280 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4a08      	ldr	r2, [pc, #32]	@ (8002294 <applyCtrlLimit+0x7c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	da04      	bge.n	8002280 <applyCtrlLimit+0x68>
				val = -25000;
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <applyCtrlLimit+0x7c>)
 8002278:	603b      	str	r3, [r7, #0]
			break;
 800227a:	e001      	b.n	8002280 <applyCtrlLimit+0x68>
			break;
 800227c:	bf00      	nop
 800227e:	e000      	b.n	8002282 <applyCtrlLimit+0x6a>
			break;
 8002280:	bf00      	nop
		}
	}
	return val;
 8002282:	683b      	ldr	r3, [r7, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	ffffc000 	.word	0xffffc000
 8002294:	ffff9e58 	.word	0xffff9e58

08002298 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	eef0 6a40 	vmov.f32	s13, s0
 80022aa:	eeb0 7a60 	vmov.f32	s14, s1
 80022ae:	eef0 7a41 	vmov.f32	s15, s2
 80022b2:	4623      	mov	r3, r4
 80022b4:	75fb      	strb	r3, [r7, #23]
 80022b6:	4603      	mov	r3, r0
 80022b8:	75bb      	strb	r3, [r7, #22]
 80022ba:	460b      	mov	r3, r1
 80022bc:	757b      	strb	r3, [r7, #21]
 80022be:	4613      	mov	r3, r2
 80022c0:	827b      	strh	r3, [r7, #18]
 80022c2:	edc7 6a01 	vstr	s13, [r7, #4]
 80022c6:	ed87 7a02 	vstr	s14, [r7, #8]
 80022ca:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 80022ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80022d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80022d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022de:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80022e2:	7db9      	ldrb	r1, [r7, #22]
 80022e4:	7df8      	ldrb	r0, [r7, #23]
 80022e6:	eeb0 0a66 	vmov.f32	s0, s13
 80022ea:	eef0 0a47 	vmov.f32	s1, s14
 80022ee:	eeb0 1a67 	vmov.f32	s2, s15
 80022f2:	f7ff fce1 	bl	8001cb8 <calcRPM_PID>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80022fe:	7db9      	ldrb	r1, [r7, #22]
 8002300:	7df8      	ldrb	r0, [r7, #23]
 8002302:	f7ff fad5 	bl	80018b0 <CAN_setMotorCtrlVal>
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd90      	pop	{r4, r7, pc}

0800230e <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 800230e:	b590      	push	{r4, r7, lr}
 8002310:	b087      	sub	sp, #28
 8002312:	af00      	add	r7, sp, #0
 8002314:	4604      	mov	r4, r0
 8002316:	4608      	mov	r0, r1
 8002318:	4611      	mov	r1, r2
 800231a:	461a      	mov	r2, r3
 800231c:	eef0 6a40 	vmov.f32	s13, s0
 8002320:	eeb0 7a60 	vmov.f32	s14, s1
 8002324:	eef0 7a41 	vmov.f32	s15, s2
 8002328:	4623      	mov	r3, r4
 800232a:	75fb      	strb	r3, [r7, #23]
 800232c:	4603      	mov	r3, r0
 800232e:	75bb      	strb	r3, [r7, #22]
 8002330:	460b      	mov	r3, r1
 8002332:	757b      	strb	r3, [r7, #21]
 8002334:	4613      	mov	r3, r2
 8002336:	827b      	strh	r3, [r7, #18]
 8002338:	edc7 6a01 	vstr	s13, [r7, #4]
 800233c:	ed87 7a02 	vstr	s14, [r7, #8]
 8002340:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 8002344:	edd7 6a01 	vldr	s13, [r7, #4]
 8002348:	ed97 7a02 	vldr	s14, [r7, #8]
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002354:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002358:	7db9      	ldrb	r1, [r7, #22]
 800235a:	7df8      	ldrb	r0, [r7, #23]
 800235c:	eeb0 0a66 	vmov.f32	s0, s13
 8002360:	eef0 0a47 	vmov.f32	s1, s14
 8002364:	eeb0 1a67 	vmov.f32	s2, s15
 8002368:	f7ff fdca 	bl	8001f00 <calcPosition_PID>
 800236c:	4603      	mov	r3, r0
 800236e:	b21b      	sxth	r3, r3
 8002370:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002374:	7db9      	ldrb	r1, [r7, #22]
 8002376:	7df8      	ldrb	r0, [r7, #23]
 8002378:	f7ff fa9a 	bl	80018b0 <CAN_setMotorCtrlVal>
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd90      	pop	{r4, r7, pc}

08002384 <getMotorRPM>:
		}
	}
	return -1;
}

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	460b      	mov	r3, r1
 8002390:	71bb      	strb	r3, [r7, #6]
 8002392:	4613      	mov	r3, r2
 8002394:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002396:	79bb      	ldrb	r3, [r7, #6]
 8002398:	2b02      	cmp	r3, #2
 800239a:	dc02      	bgt.n	80023a2 <getMotorRPM+0x1e>
 800239c:	2b00      	cmp	r3, #0
 800239e:	dc04      	bgt.n	80023aa <getMotorRPM+0x26>
 80023a0:	e038      	b.n	8002414 <getMotorRPM+0x90>
 80023a2:	3b03      	subs	r3, #3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d835      	bhi.n	8002414 <getMotorRPM+0x90>
 80023a8:	e018      	b.n	80023dc <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 80023aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	dd2d      	ble.n	800240e <getMotorRPM+0x8a>
 80023b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	dc29      	bgt.n	800240e <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023c2:	1e59      	subs	r1, r3, #1
 80023c4:	4817      	ldr	r0, [pc, #92]	@ (8002424 <getMotorRPM+0xa0>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4403      	add	r3, r0
 80023d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023da:	e01d      	b.n	8002418 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 80023dc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dd16      	ble.n	8002412 <getMotorRPM+0x8e>
 80023e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023e8:	2b07      	cmp	r3, #7
 80023ea:	dc12      	bgt.n	8002412 <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023f4:	1cd9      	adds	r1, r3, #3
 80023f6:	480b      	ldr	r0, [pc, #44]	@ (8002424 <getMotorRPM+0xa0>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	440b      	add	r3, r1
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4403      	add	r3, r0
 8002408:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800240c:	e004      	b.n	8002418 <getMotorRPM+0x94>
			break;
 800240e:	bf00      	nop
 8002410:	e000      	b.n	8002414 <getMotorRPM+0x90>
			}
			break;
 8002412:	bf00      	nop
		}
	}
	return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000368 	.word	0x20000368

08002428 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 800242c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002430:	4905      	ldr	r1, [pc, #20]	@ (8002448 <usart_Init+0x20>)
 8002432:	4806      	ldr	r0, [pc, #24]	@ (800244c <usart_Init+0x24>)
 8002434:	f007 ff7a 	bl	800a32c <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8002438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800243c:	4904      	ldr	r1, [pc, #16]	@ (8002450 <usart_Init+0x28>)
 800243e:	4805      	ldr	r0, [pc, #20]	@ (8002454 <usart_Init+0x2c>)
 8002440:	f007 ff74 	bl	800a32c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000578 	.word	0x20000578
 800244c:	20000c6c 	.word	0x20000c6c
 8002450:	20000678 	.word	0x20000678
 8002454:	20000cfc 	.word	0x20000cfc

08002458 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8002458:	b40f      	push	{r0, r1, r2, r3}
 800245a:	b580      	push	{r7, lr}
 800245c:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4a0c      	ldr	r2, [pc, #48]	@ (8002494 <usart_printf+0x3c>)
 8002464:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8002466:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <usart_printf+0x3c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	480a      	ldr	r0, [pc, #40]	@ (8002498 <usart_printf+0x40>)
 800246e:	f00c fd9b 	bl	800efa8 <vsiprintf>
 8002472:	4603      	mov	r3, r0
 8002474:	b29a      	uxth	r2, r3
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <usart_printf+0x44>)
 8002478:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800247a:	4b08      	ldr	r3, [pc, #32]	@ (800249c <usart_printf+0x44>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	4905      	ldr	r1, [pc, #20]	@ (8002498 <usart_printf+0x40>)
 8002482:	4807      	ldr	r0, [pc, #28]	@ (80024a0 <usart_printf+0x48>)
 8002484:	f007 fee2 	bl	800a24c <HAL_UART_Transmit_DMA>
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002490:	b004      	add	sp, #16
 8002492:	4770      	bx	lr
 8002494:	20000840 	.word	0x20000840
 8002498:	20000844 	.word	0x20000844
 800249c:	20000944 	.word	0x20000944
 80024a0:	20000c6c 	.word	0x20000c6c

080024a4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
	if (huart == &huart6) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a7f      	ldr	r2, [pc, #508]	@ (80026b0 <HAL_UARTEx_RxEventCallback+0x20c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	f040 80f7 	bne.w	80026a8 <HAL_UARTEx_RxEventCallback+0x204>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80024ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024be:	497d      	ldr	r1, [pc, #500]	@ (80026b4 <HAL_UARTEx_RxEventCallback+0x210>)
 80024c0:	487b      	ldr	r0, [pc, #492]	@ (80026b0 <HAL_UARTEx_RxEventCallback+0x20c>)
 80024c2:	f007 ff33 	bl	800a32c <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[6] << 8) | RxBuff_2[5];
 80024c6:	4b7b      	ldr	r3, [pc, #492]	@ (80026b4 <HAL_UARTEx_RxEventCallback+0x210>)
 80024c8:	799b      	ldrb	r3, [r3, #6]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	4b79      	ldr	r3, [pc, #484]	@ (80026b4 <HAL_UARTEx_RxEventCallback+0x210>)
 80024d0:	795b      	ldrb	r3, [r3, #5]
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	81fb      	strh	r3, [r7, #14]
		switch (RxBuff16) {
 80024da:	89fb      	ldrh	r3, [r7, #14]
 80024dc:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 80024e0:	f280 80e1 	bge.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 80024e4:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 80024e8:	f300 80d7 	bgt.w	800269a <HAL_UARTEx_RxEventCallback+0x1f6>
 80024ec:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 80024f0:	f300 80d9 	bgt.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 80024f4:	f240 3202 	movw	r2, #770	@ 0x302
 80024f8:	4293      	cmp	r3, r2
 80024fa:	f280 80c6 	bge.w	800268a <HAL_UARTEx_RxEventCallback+0x1e6>
 80024fe:	f240 3201 	movw	r2, #769	@ 0x301
 8002502:	4293      	cmp	r3, r2
 8002504:	f000 80bb 	beq.w	800267e <HAL_UARTEx_RxEventCallback+0x1da>
 8002508:	f240 3201 	movw	r2, #769	@ 0x301
 800250c:	4293      	cmp	r3, r2
 800250e:	f300 80ca 	bgt.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 8002512:	f240 220e 	movw	r2, #526	@ 0x20e
 8002516:	4293      	cmp	r3, r2
 8002518:	f300 80c5 	bgt.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 800251c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002520:	dc1f      	bgt.n	8002562 <HAL_UARTEx_RxEventCallback+0xbe>
 8002522:	f240 1205 	movw	r2, #261	@ 0x105
 8002526:	4293      	cmp	r3, r2
 8002528:	d05b      	beq.n	80025e2 <HAL_UARTEx_RxEventCallback+0x13e>
 800252a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800252e:	f280 80ba 	bge.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 8002532:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002536:	d04e      	beq.n	80025d6 <HAL_UARTEx_RxEventCallback+0x132>
 8002538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800253c:	f300 80b3 	bgt.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 8002540:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002544:	f300 80af 	bgt.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 8002548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800254c:	dc3e      	bgt.n	80025cc <HAL_UARTEx_RxEventCallback+0x128>
 800254e:	2b03      	cmp	r3, #3
 8002550:	d036      	beq.n	80025c0 <HAL_UARTEx_RxEventCallback+0x11c>
 8002552:	2b03      	cmp	r3, #3
 8002554:	f300 80a7 	bgt.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 8002558:	2b01      	cmp	r3, #1
 800255a:	d027      	beq.n	80025ac <HAL_UARTEx_RxEventCallback+0x108>
 800255c:	2b02      	cmp	r3, #2
 800255e:	d02b      	beq.n	80025b8 <HAL_UARTEx_RxEventCallback+0x114>
		    	//memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
		    }

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8002560:	e0a1      	b.n	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
		switch (RxBuff16) {
 8002562:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002566:	2b0d      	cmp	r3, #13
 8002568:	f200 809d 	bhi.w	80026a6 <HAL_UARTEx_RxEventCallback+0x202>
 800256c:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <HAL_UARTEx_RxEventCallback+0xd0>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	080025ef 	.word	0x080025ef
 8002578:	080025fb 	.word	0x080025fb
 800257c:	08002607 	.word	0x08002607
 8002580:	08002613 	.word	0x08002613
 8002584:	0800261f 	.word	0x0800261f
 8002588:	0800261f 	.word	0x0800261f
 800258c:	08002627 	.word	0x08002627
 8002590:	08002633 	.word	0x08002633
 8002594:	0800263f 	.word	0x0800263f
 8002598:	08002649 	.word	0x08002649
 800259c:	08002655 	.word	0x08002655
 80025a0:	08002661 	.word	0x08002661
 80025a4:	0800266d 	.word	0x0800266d
 80025a8:	08002677 	.word	0x08002677
		    	memcpy(&game_status, (RxBuff_2 + frame_header_offset), game_status_len);
 80025ac:	4b42      	ldr	r3, [pc, #264]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025ae:	220b      	movs	r2, #11
 80025b0:	4619      	mov	r1, r3
 80025b2:	4842      	ldr	r0, [pc, #264]	@ (80026bc <HAL_UARTEx_RxEventCallback+0x218>)
 80025b4:	f00c fd91 	bl	800f0da <memcpy>
		    	memcpy(&game_result, (RxBuff_2 + frame_header_offset), game_result_len);
 80025b8:	4b3f      	ldr	r3, [pc, #252]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	4b40      	ldr	r3, [pc, #256]	@ (80026c0 <HAL_UARTEx_RxEventCallback+0x21c>)
 80025be:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 80025c0:	4b3d      	ldr	r3, [pc, #244]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025c2:	220d      	movs	r2, #13
 80025c4:	4619      	mov	r1, r3
 80025c6:	483f      	ldr	r0, [pc, #252]	@ (80026c4 <HAL_UARTEx_RxEventCallback+0x220>)
 80025c8:	f00c fd87 	bl	800f0da <memcpy>
		    	memcpy(&ext_supply_projectile_action, (RxBuff_2 + frame_header_offset), ext_supply_projectile_action_len);
 80025cc:	4b3a      	ldr	r3, [pc, #232]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b3d      	ldr	r3, [pc, #244]	@ (80026c8 <HAL_UARTEx_RxEventCallback+0x224>)
 80025d4:	601a      	str	r2, [r3, #0]
		    	memcpy(&referee_warning, (RxBuff_2 + frame_header_offset), referee_warning_len);
 80025d6:	4a38      	ldr	r2, [pc, #224]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025d8:	4b3c      	ldr	r3, [pc, #240]	@ (80026cc <HAL_UARTEx_RxEventCallback+0x228>)
 80025da:	8811      	ldrh	r1, [r2, #0]
 80025dc:	7892      	ldrb	r2, [r2, #2]
 80025de:	8019      	strh	r1, [r3, #0]
 80025e0:	709a      	strb	r2, [r3, #2]
		    	memcpy(&dart_info, (RxBuff_2 + frame_header_offset), dart_info_len);
 80025e2:	4b35      	ldr	r3, [pc, #212]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025e4:	2203      	movs	r2, #3
 80025e6:	4619      	mov	r1, r3
 80025e8:	4839      	ldr	r0, [pc, #228]	@ (80026d0 <HAL_UARTEx_RxEventCallback+0x22c>)
 80025ea:	f00c fd76 	bl	800f0da <memcpy>
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 80025ee:	4b32      	ldr	r3, [pc, #200]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025f0:	220d      	movs	r2, #13
 80025f2:	4619      	mov	r1, r3
 80025f4:	4833      	ldr	r0, [pc, #204]	@ (80026c4 <HAL_UARTEx_RxEventCallback+0x220>)
 80025f6:	f00c fd70 	bl	800f0da <memcpy>
		    	memcpy(&power_heat_data, (RxBuff_2 + frame_header_offset), power_heat_data_len);
 80025fa:	4b2f      	ldr	r3, [pc, #188]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 80025fc:	2210      	movs	r2, #16
 80025fe:	4619      	mov	r1, r3
 8002600:	4834      	ldr	r0, [pc, #208]	@ (80026d4 <HAL_UARTEx_RxEventCallback+0x230>)
 8002602:	f00c fd6a 	bl	800f0da <memcpy>
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
 8002606:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002608:	2210      	movs	r2, #16
 800260a:	4619      	mov	r1, r3
 800260c:	4832      	ldr	r0, [pc, #200]	@ (80026d8 <HAL_UARTEx_RxEventCallback+0x234>)
 800260e:	f00c fd64 	bl	800f0da <memcpy>
		    	memcpy(&buffs, (RxBuff_2 + frame_header_offset), buff_len);
 8002612:	4b29      	ldr	r3, [pc, #164]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002614:	2206      	movs	r2, #6
 8002616:	4619      	mov	r1, r3
 8002618:	4830      	ldr	r0, [pc, #192]	@ (80026dc <HAL_UARTEx_RxEventCallback+0x238>)
 800261a:	f00c fd5e 	bl	800f0da <memcpy>
		    	memcpy(&damage_data, (RxBuff_2 + frame_header_offset), damage_data_len);
 800261e:	4b26      	ldr	r3, [pc, #152]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <HAL_UARTEx_RxEventCallback+0x23c>)
 8002624:	701a      	strb	r2, [r3, #0]
		    	memcpy(&shoot_data, (RxBuff_2 + frame_header_offset), shoot_data_len);
 8002626:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002628:	2207      	movs	r2, #7
 800262a:	4619      	mov	r1, r3
 800262c:	482d      	ldr	r0, [pc, #180]	@ (80026e4 <HAL_UARTEx_RxEventCallback+0x240>)
 800262e:	f00c fd54 	bl	800f0da <memcpy>
		    	memcpy(&projectile_allowance, (RxBuff_2 + frame_header_offset), projectile_allowance_len);
 8002632:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002634:	2206      	movs	r2, #6
 8002636:	4619      	mov	r1, r3
 8002638:	482b      	ldr	r0, [pc, #172]	@ (80026e8 <HAL_UARTEx_RxEventCallback+0x244>)
 800263a:	f00c fd4e 	bl	800f0da <memcpy>
		    	memcpy(&rfid_status, (RxBuff_2 + frame_header_offset), rfid_status_len);
 800263e:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	4b29      	ldr	r3, [pc, #164]	@ (80026ec <HAL_UARTEx_RxEventCallback+0x248>)
 8002646:	601a      	str	r2, [r3, #0]
		    	memcpy(&dart_client_cmd, (RxBuff_2 + frame_header_offset), dart_client_cmd_len);
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 800264a:	2206      	movs	r2, #6
 800264c:	4619      	mov	r1, r3
 800264e:	4828      	ldr	r0, [pc, #160]	@ (80026f0 <HAL_UARTEx_RxEventCallback+0x24c>)
 8002650:	f00c fd43 	bl	800f0da <memcpy>
		    	memcpy(&robot_positions, (RxBuff_2 + frame_header_offset), ground_robot_position_len);
 8002654:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002656:	2228      	movs	r2, #40	@ 0x28
 8002658:	4619      	mov	r1, r3
 800265a:	4826      	ldr	r0, [pc, #152]	@ (80026f4 <HAL_UARTEx_RxEventCallback+0x250>)
 800265c:	f00c fd3d 	bl	800f0da <memcpy>
		    	memcpy(&radar_mark_data, (RxBuff_2 + frame_header_offset), radar_mark_data_len);
 8002660:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002662:	4b25      	ldr	r3, [pc, #148]	@ (80026f8 <HAL_UARTEx_RxEventCallback+0x254>)
 8002664:	6810      	ldr	r0, [r2, #0]
 8002666:	6018      	str	r0, [r3, #0]
 8002668:	8892      	ldrh	r2, [r2, #4]
 800266a:	809a      	strh	r2, [r3, #4]
		    	memcpy(&sentry_info, (RxBuff_2 + frame_header_offset), sentry_info_len);
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <HAL_UARTEx_RxEventCallback+0x258>)
 8002674:	601a      	str	r2, [r3, #0]
		    	memcpy(&radar_info, (RxBuff_2 + frame_header_offset), radar_info_len);
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <HAL_UARTEx_RxEventCallback+0x25c>)
 800267c:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_interaction_data_len);
 800267e:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002680:	2280      	movs	r2, #128	@ 0x80
 8002682:	4619      	mov	r1, r3
 8002684:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <HAL_UARTEx_RxEventCallback+0x234>)
 8002686:	f00c fd28 	bl	800f0da <memcpy>
		    	memcpy(&pc_control, (RxBuff_2 + frame_header_offset), pc_control_len);
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 800268c:	220c      	movs	r2, #12
 800268e:	4619      	mov	r1, r3
 8002690:	481c      	ldr	r0, [pc, #112]	@ (8002704 <HAL_UARTEx_RxEventCallback+0x260>)
 8002692:	f00c fd22 	bl	800f0da <memcpy>
		    	usart_decode_keyboard();
 8002696:	f000 f837 	bl	8002708 <usart_decode_keyboard>
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), map_data_len);
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <HAL_UARTEx_RxEventCallback+0x214>)
 800269c:	2267      	movs	r2, #103	@ 0x67
 800269e:	4619      	mov	r1, r3
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <HAL_UARTEx_RxEventCallback+0x234>)
 80026a2:	f00c fd1a 	bl	800f0da <memcpy>
		        break;
 80026a6:	bf00      	nop
		    }
		}
	}
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000cfc 	.word	0x20000cfc
 80026b4:	20000678 	.word	0x20000678
 80026b8:	2000067f 	.word	0x2000067f
 80026bc:	20000778 	.word	0x20000778
 80026c0:	20000788 	.word	0x20000788
 80026c4:	20000798 	.word	0x20000798
 80026c8:	2000078c 	.word	0x2000078c
 80026cc:	20000790 	.word	0x20000790
 80026d0:	20000794 	.word	0x20000794
 80026d4:	200007a8 	.word	0x200007a8
 80026d8:	200007b8 	.word	0x200007b8
 80026dc:	200007c4 	.word	0x200007c4
 80026e0:	200007cc 	.word	0x200007cc
 80026e4:	200007d0 	.word	0x200007d0
 80026e8:	200007d8 	.word	0x200007d8
 80026ec:	200007e0 	.word	0x200007e0
 80026f0:	200007e4 	.word	0x200007e4
 80026f4:	200007ec 	.word	0x200007ec
 80026f8:	20000814 	.word	0x20000814
 80026fc:	2000081c 	.word	0x2000081c
 8002700:	20000820 	.word	0x20000820
 8002704:	20000824 	.word	0x20000824

08002708 <usart_decode_keyboard>:

void usart_decode_keyboard(void) {
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
	if(pc_control.keyboard_values_1 > 127){
 800270c:	4b85      	ldr	r3, [pc, #532]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800270e:	7a1b      	ldrb	r3, [r3, #8]
 8002710:	b25b      	sxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	da09      	bge.n	800272a <usart_decode_keyboard+0x22>
		pc_control.e = 1;
 8002716:	4b83      	ldr	r3, [pc, #524]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002718:	2201      	movs	r2, #1
 800271a:	74da      	strb	r2, [r3, #19]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 128;
 800271c:	4b81      	ldr	r3, [pc, #516]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800271e:	7a1b      	ldrb	r3, [r3, #8]
 8002720:	3b80      	subs	r3, #128	@ 0x80
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b7f      	ldr	r3, [pc, #508]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002726:	721a      	strb	r2, [r3, #8]
 8002728:	e002      	b.n	8002730 <usart_decode_keyboard+0x28>
	}else{
		pc_control.e = 0;
 800272a:	4b7e      	ldr	r3, [pc, #504]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800272c:	2200      	movs	r2, #0
 800272e:	74da      	strb	r2, [r3, #19]
	}
	if(pc_control.keyboard_values_1>63){
 8002730:	4b7c      	ldr	r3, [pc, #496]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002732:	7a1b      	ldrb	r3, [r3, #8]
 8002734:	2b3f      	cmp	r3, #63	@ 0x3f
 8002736:	d909      	bls.n	800274c <usart_decode_keyboard+0x44>
		pc_control.q = 1;
 8002738:	4b7a      	ldr	r3, [pc, #488]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800273a:	2201      	movs	r2, #1
 800273c:	749a      	strb	r2, [r3, #18]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 64;
 800273e:	4b79      	ldr	r3, [pc, #484]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002740:	7a1b      	ldrb	r3, [r3, #8]
 8002742:	3b40      	subs	r3, #64	@ 0x40
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4b77      	ldr	r3, [pc, #476]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002748:	721a      	strb	r2, [r3, #8]
 800274a:	e002      	b.n	8002752 <usart_decode_keyboard+0x4a>
	}else{
		pc_control.q = 0;
 800274c:	4b75      	ldr	r3, [pc, #468]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800274e:	2200      	movs	r2, #0
 8002750:	749a      	strb	r2, [r3, #18]
	}
	if(pc_control.keyboard_values_1>31){
 8002752:	4b74      	ldr	r3, [pc, #464]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002754:	7a1b      	ldrb	r3, [r3, #8]
 8002756:	2b1f      	cmp	r3, #31
 8002758:	d909      	bls.n	800276e <usart_decode_keyboard+0x66>
		pc_control.ctrl = 1;
 800275a:	4b72      	ldr	r3, [pc, #456]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800275c:	2201      	movs	r2, #1
 800275e:	745a      	strb	r2, [r3, #17]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 32;
 8002760:	4b70      	ldr	r3, [pc, #448]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002762:	7a1b      	ldrb	r3, [r3, #8]
 8002764:	3b20      	subs	r3, #32
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b6e      	ldr	r3, [pc, #440]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800276a:	721a      	strb	r2, [r3, #8]
 800276c:	e002      	b.n	8002774 <usart_decode_keyboard+0x6c>
	}else{
		pc_control.ctrl = 0;
 800276e:	4b6d      	ldr	r3, [pc, #436]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002770:	2200      	movs	r2, #0
 8002772:	745a      	strb	r2, [r3, #17]
	}
	if(pc_control.keyboard_values_1>15){
 8002774:	4b6b      	ldr	r3, [pc, #428]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002776:	7a1b      	ldrb	r3, [r3, #8]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d909      	bls.n	8002790 <usart_decode_keyboard+0x88>
		pc_control.shift = 1;
 800277c:	4b69      	ldr	r3, [pc, #420]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800277e:	2201      	movs	r2, #1
 8002780:	741a      	strb	r2, [r3, #16]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 16;
 8002782:	4b68      	ldr	r3, [pc, #416]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002784:	7a1b      	ldrb	r3, [r3, #8]
 8002786:	3b10      	subs	r3, #16
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800278c:	721a      	strb	r2, [r3, #8]
 800278e:	e002      	b.n	8002796 <usart_decode_keyboard+0x8e>
	}else{
		pc_control.shift = 0;
 8002790:	4b64      	ldr	r3, [pc, #400]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002792:	2200      	movs	r2, #0
 8002794:	741a      	strb	r2, [r3, #16]
	}
	if(pc_control.keyboard_values_1>7){
 8002796:	4b63      	ldr	r3, [pc, #396]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002798:	7a1b      	ldrb	r3, [r3, #8]
 800279a:	2b07      	cmp	r3, #7
 800279c:	d909      	bls.n	80027b2 <usart_decode_keyboard+0xaa>
		pc_control.d = 1;
 800279e:	4b61      	ldr	r3, [pc, #388]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	73da      	strb	r2, [r3, #15]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 8;
 80027a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027a6:	7a1b      	ldrb	r3, [r3, #8]
 80027a8:	3b08      	subs	r3, #8
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027ae:	721a      	strb	r2, [r3, #8]
 80027b0:	e002      	b.n	80027b8 <usart_decode_keyboard+0xb0>
	}else{
		pc_control.d = 0;
 80027b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	73da      	strb	r2, [r3, #15]
	}
	if(pc_control.keyboard_values_1>3){
 80027b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027ba:	7a1b      	ldrb	r3, [r3, #8]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d909      	bls.n	80027d4 <usart_decode_keyboard+0xcc>
		pc_control.a = 1;
 80027c0:	4b58      	ldr	r3, [pc, #352]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	739a      	strb	r2, [r3, #14]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 4;
 80027c6:	4b57      	ldr	r3, [pc, #348]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027c8:	7a1b      	ldrb	r3, [r3, #8]
 80027ca:	3b04      	subs	r3, #4
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b55      	ldr	r3, [pc, #340]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027d0:	721a      	strb	r2, [r3, #8]
 80027d2:	e002      	b.n	80027da <usart_decode_keyboard+0xd2>
	}else{
		pc_control.a = 0;
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	739a      	strb	r2, [r3, #14]
	}
	if(pc_control.keyboard_values_1>1){
 80027da:	4b52      	ldr	r3, [pc, #328]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027dc:	7a1b      	ldrb	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d909      	bls.n	80027f6 <usart_decode_keyboard+0xee>
		pc_control.s = 1;
 80027e2:	4b50      	ldr	r3, [pc, #320]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	735a      	strb	r2, [r3, #13]
		pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 2;
 80027e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027ea:	7a1b      	ldrb	r3, [r3, #8]
 80027ec:	3b02      	subs	r3, #2
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027f2:	721a      	strb	r2, [r3, #8]
 80027f4:	e002      	b.n	80027fc <usart_decode_keyboard+0xf4>
	}else{
		pc_control.s = 0;
 80027f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	735a      	strb	r2, [r3, #13]
	}
	if(pc_control.keyboard_values_1 > 0){
 80027fc:	4b49      	ldr	r3, [pc, #292]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80027fe:	7a1b      	ldrb	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <usart_decode_keyboard+0x104>
		pc_control.w = 1;
 8002804:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002806:	2201      	movs	r2, #1
 8002808:	731a      	strb	r2, [r3, #12]
 800280a:	e002      	b.n	8002812 <usart_decode_keyboard+0x10a>
	}else{
		pc_control.w = 0;
 800280c:	4b45      	ldr	r3, [pc, #276]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800280e:	2200      	movs	r2, #0
 8002810:	731a      	strb	r2, [r3, #12]
	}
	if(pc_control.keyboard_values_2 > 127){
 8002812:	4b44      	ldr	r3, [pc, #272]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002814:	7a5b      	ldrb	r3, [r3, #9]
 8002816:	b25b      	sxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	da09      	bge.n	8002830 <usart_decode_keyboard+0x128>
		pc_control.b = 1;
 800281c:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800281e:	2201      	movs	r2, #1
 8002820:	76da      	strb	r2, [r3, #27]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 128;
 8002822:	4b40      	ldr	r3, [pc, #256]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002824:	7a5b      	ldrb	r3, [r3, #9]
 8002826:	3b80      	subs	r3, #128	@ 0x80
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b3e      	ldr	r3, [pc, #248]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800282c:	725a      	strb	r2, [r3, #9]
 800282e:	e002      	b.n	8002836 <usart_decode_keyboard+0x12e>
	}else{
		pc_control.b = 0;
 8002830:	4b3c      	ldr	r3, [pc, #240]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002832:	2200      	movs	r2, #0
 8002834:	76da      	strb	r2, [r3, #27]
	}
	if(pc_control.keyboard_values_2>63){
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002838:	7a5b      	ldrb	r3, [r3, #9]
 800283a:	2b3f      	cmp	r3, #63	@ 0x3f
 800283c:	d909      	bls.n	8002852 <usart_decode_keyboard+0x14a>
		pc_control.v = 1;
 800283e:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002840:	2201      	movs	r2, #1
 8002842:	769a      	strb	r2, [r3, #26]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 64;
 8002844:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002846:	7a5b      	ldrb	r3, [r3, #9]
 8002848:	3b40      	subs	r3, #64	@ 0x40
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800284e:	725a      	strb	r2, [r3, #9]
 8002850:	e002      	b.n	8002858 <usart_decode_keyboard+0x150>
	}else{
		pc_control.v = 0;
 8002852:	4b34      	ldr	r3, [pc, #208]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002854:	2200      	movs	r2, #0
 8002856:	769a      	strb	r2, [r3, #26]
	}
	if(pc_control.keyboard_values_2>31){
 8002858:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800285a:	7a5b      	ldrb	r3, [r3, #9]
 800285c:	2b1f      	cmp	r3, #31
 800285e:	d909      	bls.n	8002874 <usart_decode_keyboard+0x16c>
		pc_control.c = 1;
 8002860:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002862:	2201      	movs	r2, #1
 8002864:	765a      	strb	r2, [r3, #25]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 32;
 8002866:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002868:	7a5b      	ldrb	r3, [r3, #9]
 800286a:	3b20      	subs	r3, #32
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002870:	725a      	strb	r2, [r3, #9]
 8002872:	e002      	b.n	800287a <usart_decode_keyboard+0x172>
	}else{
		pc_control.c = 0;
 8002874:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002876:	2200      	movs	r2, #0
 8002878:	765a      	strb	r2, [r3, #25]
	}
	if(pc_control.keyboard_values_2>15){
 800287a:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800287c:	7a5b      	ldrb	r3, [r3, #9]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	d909      	bls.n	8002896 <usart_decode_keyboard+0x18e>
		pc_control.x = 1;
 8002882:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002884:	2201      	movs	r2, #1
 8002886:	761a      	strb	r2, [r3, #24]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 16;
 8002888:	4b26      	ldr	r3, [pc, #152]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800288a:	7a5b      	ldrb	r3, [r3, #9]
 800288c:	3b10      	subs	r3, #16
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002892:	725a      	strb	r2, [r3, #9]
 8002894:	e002      	b.n	800289c <usart_decode_keyboard+0x194>
	}else{
		pc_control.x = 0;
 8002896:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002898:	2200      	movs	r2, #0
 800289a:	761a      	strb	r2, [r3, #24]
	}
	if(pc_control.keyboard_values_2>7){
 800289c:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800289e:	7a5b      	ldrb	r3, [r3, #9]
 80028a0:	2b07      	cmp	r3, #7
 80028a2:	d909      	bls.n	80028b8 <usart_decode_keyboard+0x1b0>
		pc_control.z = 1;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	75da      	strb	r2, [r3, #23]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 8;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028ac:	7a5b      	ldrb	r3, [r3, #9]
 80028ae:	3b08      	subs	r3, #8
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028b4:	725a      	strb	r2, [r3, #9]
 80028b6:	e002      	b.n	80028be <usart_decode_keyboard+0x1b6>
	}else{
		pc_control.z = 0;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	75da      	strb	r2, [r3, #23]
	}
	if(pc_control.keyboard_values_2>3){
 80028be:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028c0:	7a5b      	ldrb	r3, [r3, #9]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d909      	bls.n	80028da <usart_decode_keyboard+0x1d2>
		pc_control.g = 1;
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	759a      	strb	r2, [r3, #22]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 4;
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028ce:	7a5b      	ldrb	r3, [r3, #9]
 80028d0:	3b04      	subs	r3, #4
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028d6:	725a      	strb	r2, [r3, #9]
 80028d8:	e002      	b.n	80028e0 <usart_decode_keyboard+0x1d8>
	}else{
		pc_control.g = 0;
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	759a      	strb	r2, [r3, #22]
	}
	if(pc_control.keyboard_values_2>1){
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028e2:	7a5b      	ldrb	r3, [r3, #9]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d909      	bls.n	80028fc <usart_decode_keyboard+0x1f4>
		pc_control.f = 1;
 80028e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	755a      	strb	r2, [r3, #21]
		pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 2;
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028f0:	7a5b      	ldrb	r3, [r3, #9]
 80028f2:	3b02      	subs	r3, #2
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028f8:	725a      	strb	r2, [r3, #9]
 80028fa:	e002      	b.n	8002902 <usart_decode_keyboard+0x1fa>
	}else{
		pc_control.f = 0;
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <usart_decode_keyboard+0x21c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	755a      	strb	r2, [r3, #21]
	}
	if(pc_control.keyboard_values_2 > 0){
 8002902:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002904:	7a5b      	ldrb	r3, [r3, #9]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <usart_decode_keyboard+0x20a>
		pc_control.r = 1;
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <usart_decode_keyboard+0x21c>)
 800290c:	2201      	movs	r2, #1
 800290e:	751a      	strb	r2, [r3, #20]
	}else{
		pc_control.r = 0;
	}
}
 8002910:	e002      	b.n	8002918 <usart_decode_keyboard+0x210>
		pc_control.r = 0;
 8002912:	4b04      	ldr	r3, [pc, #16]	@ (8002924 <usart_decode_keyboard+0x21c>)
 8002914:	2200      	movs	r2, #0
 8002916:	751a      	strb	r2, [r3, #20]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000824 	.word	0x20000824

08002928 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8002952:	463b      	mov	r3, r7
 8002954:	4619      	mov	r1, r3
 8002956:	480f      	ldr	r0, [pc, #60]	@ (8002994 <can_filter_init+0x6c>)
 8002958:	f003 f86e 	bl	8005a38 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800295c:	480d      	ldr	r0, [pc, #52]	@ (8002994 <can_filter_init+0x6c>)
 800295e:	f003 f94b 	bl	8005bf8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002962:	2102      	movs	r1, #2
 8002964:	480b      	ldr	r0, [pc, #44]	@ (8002994 <can_filter_init+0x6c>)
 8002966:	f003 fb7d 	bl	8006064 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 800296a:	230e      	movs	r3, #14
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 800296e:	230e      	movs	r3, #14
 8002970:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8002972:	463b      	mov	r3, r7
 8002974:	4619      	mov	r1, r3
 8002976:	4808      	ldr	r0, [pc, #32]	@ (8002998 <can_filter_init+0x70>)
 8002978:	f003 f85e 	bl	8005a38 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 800297c:	4806      	ldr	r0, [pc, #24]	@ (8002998 <can_filter_init+0x70>)
 800297e:	f003 f93b 	bl	8005bf8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002982:	2102      	movs	r1, #2
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <can_filter_init+0x70>)
 8002986:	f003 fb6d 	bl	8006064 <HAL_CAN_ActivateNotification>
}
 800298a:	bf00      	nop
 800298c:	3728      	adds	r7, #40	@ 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200009a8 	.word	0x200009a8
 8002998:	200009d0 	.word	0x200009d0

0800299c <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80029a6:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <imu_pwm_set+0x1c>)
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40014400 	.word	0x40014400

080029bc <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80029ca:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <RC_init+0xac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	4b25      	ldr	r3, [pc, #148]	@ (8002a68 <RC_init+0xac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029d8:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80029da:	4b23      	ldr	r3, [pc, #140]	@ (8002a68 <RC_init+0xac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <RC_init+0xac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0210 	orr.w	r2, r2, #16
 80029e8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 80029ea:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <RC_init+0xb0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <RC_init+0xb0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80029fa:	e007      	b.n	8002a0c <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <RC_init+0xb0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <RC_init+0xb0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002a0c:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <RC_init+0xb0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <RC_init+0xb0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a14      	ldr	r2, [pc, #80]	@ (8002a70 <RC_init+0xb4>)
 8002a20:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <RC_init+0xb0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <RC_init+0xb0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <RC_init+0xb0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <RC_init+0xb0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <RC_init+0xb0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a48:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <RC_init+0xb0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <RC_init+0xb0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000cb4 	.word	0x20000cb4
 8002a6c:	20000e04 	.word	0x20000e04
 8002a70:	40004804 	.word	0x40004804

08002a74 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8002a7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a80:	f008 feb4 	bl	800b7ec <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8002a84:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002b28 <imu_temp_control_task+0xb4>
 8002a88:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002b2c <imu_temp_control_task+0xb8>
 8002a8c:	4a28      	ldr	r2, [pc, #160]	@ (8002b30 <imu_temp_control_task+0xbc>)
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4828      	ldr	r0, [pc, #160]	@ (8002b34 <imu_temp_control_task+0xc0>)
 8002a92:	f001 fa3f 	bl	8003f14 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a96:	4b28      	ldr	r3, [pc, #160]	@ (8002b38 <imu_temp_control_task+0xc4>)
 8002a98:	2210      	movs	r2, #16
 8002a9a:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a9c:	4826      	ldr	r0, [pc, #152]	@ (8002b38 <imu_temp_control_task+0xc4>)
 8002a9e:	f006 f8bc 	bl	8008c1a <HAL_SPI_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8002aa8:	f001 fa2e 	bl	8003f08 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8002aac:	2000      	movs	r0, #0
 8002aae:	f009 ffbb 	bl	800ca28 <pcTaskGetName>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f00a f84b 	bl	800cb50 <xTaskGetHandle>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <imu_temp_control_task+0xc8>)
 8002abe:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b40 <imu_temp_control_task+0xcc>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8002ac6:	bf00      	nop
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002acc:	2001      	movs	r0, #1
 8002ace:	f00a fc6b 	bl	800d3a8 <ulTaskNotifyTake>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d1f7      	bne.n	8002ac8 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8002ad8:	f7fe fbdc 	bl	8001294 <IMU_get_temp>
 8002adc:	eef0 7a40 	vmov.f32	s15, s0
 8002ae0:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002b44 <imu_temp_control_task+0xd0>
 8002ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae8:	4812      	ldr	r0, [pc, #72]	@ (8002b34 <imu_temp_control_task+0xc0>)
 8002aea:	f001 fa6a 	bl	8003fc2 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <imu_temp_control_task+0xc0>)
 8002af0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002af4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d503      	bpl.n	8002b06 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <imu_temp_control_task+0xc0>)
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <imu_temp_control_task+0xc0>)
 8002b08:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b10:	ee17 3a90 	vmov	r3, s15
 8002b14:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8002b16:	89fb      	ldrh	r3, [r7, #14]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff3f 	bl	800299c <imu_pwm_set>
        osDelay(5);
 8002b1e:	2005      	movs	r0, #5
 8002b20:	f008 fe64 	bl	800b7ec <osDelay>
    {
 8002b24:	e7cf      	b.n	8002ac6 <imu_temp_control_task+0x52>
 8002b26:	bf00      	nop
 8002b28:	45898000 	.word	0x45898000
 8002b2c:	458ca000 	.word	0x458ca000
 8002b30:	08011450 	.word	0x08011450
 8002b34:	20000950 	.word	0x20000950
 8002b38:	20000a4c 	.word	0x20000a4c
 8002b3c:	20000948 	.word	0x20000948
 8002b40:	2000094c 	.word	0x2000094c
 8002b44:	42200000 	.word	0x42200000

08002b48 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_GPIO_EXTI_Callback+0x54>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d11b      	bne.n	8002b94 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8002b5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b66:	f00a fb91 	bl	800d28c <xTaskGetSchedulerState>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d011      	beq.n	8002b94 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00a fc62 	bl	800d440 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <HAL_GPIO_EXTI_Callback+0x60>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_GPIO_EXTI_Callback+0x4c>
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_GPIO_EXTI_Callback+0x64>)
 8002b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2000000e 	.word	0x2000000e
 8002ba0:	2000094c 	.word	0x2000094c
 8002ba4:	20000948 	.word	0x20000948
 8002ba8:	20000998 	.word	0x20000998
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 8002bbe:	f000 f8bd 	bl	8002d3c <ist8310_GPIO_init>
    ist8310_com_init();
 8002bc2:	f000 f8c2 	bl	8002d4a <ist8310_com_init>

    ist8310_RST_L();
 8002bc6:	f000 f97b 	bl	8002ec0 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 8002bca:	4b30      	ldr	r3, [pc, #192]	@ (8002c8c <ist8310_init+0xdc>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f916 	bl	8002e00 <ist8310_delay_ms>
    ist8310_RST_H();
 8002bd4:	f000 f968 	bl	8002ea8 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c8c <ist8310_init+0xdc>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f90f 	bl	8002e00 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8002be2:	2000      	movs	r0, #0
 8002be4:	f000 f8b8 	bl	8002d58 <ist8310_IIC_read_single_reg>
 8002be8:	4603      	mov	r3, r0
 8002bea:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 8002bec:	79bb      	ldrb	r3, [r7, #6]
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d001      	beq.n	8002bf6 <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 8002bf2:	2340      	movs	r3, #64	@ 0x40
 8002bf4:	e045      	b.n	8002c82 <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	e03e      	b.n	8002c7a <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	4924      	ldr	r1, [pc, #144]	@ (8002c90 <ist8310_init+0xe0>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	7818      	ldrb	r0, [r3, #0]
 8002c0a:	79fa      	ldrb	r2, [r7, #7]
 8002c0c:	4920      	ldr	r1, [pc, #128]	@ (8002c90 <ist8310_init+0xe0>)
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	3301      	adds	r3, #1
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f000 f8b8 	bl	8002d90 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8002c20:	4b1c      	ldr	r3, [pc, #112]	@ (8002c94 <ist8310_init+0xe4>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f8f9 	bl	8002e1c <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	4918      	ldr	r1, [pc, #96]	@ (8002c90 <ist8310_init+0xe0>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f88d 	bl	8002d58 <ist8310_IIC_read_single_reg>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <ist8310_init+0xe4>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f8e8 	bl	8002e1c <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8002c4c:	79fa      	ldrb	r2, [r7, #7]
 8002c4e:	4910      	ldr	r1, [pc, #64]	@ (8002c90 <ist8310_init+0xe0>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	3301      	adds	r3, #1
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	79ba      	ldrb	r2, [r7, #6]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d008      	beq.n	8002c74 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 8002c62:	79fa      	ldrb	r2, [r7, #7]
 8002c64:	490a      	ldr	r1, [pc, #40]	@ (8002c90 <ist8310_init+0xe0>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3302      	adds	r3, #2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	e006      	b.n	8002c82 <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	3301      	adds	r3, #1
 8002c78:	71fb      	strb	r3, [r7, #7]
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d9bd      	bls.n	8002bfc <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08011468 	.word	0x08011468
 8002c90:	0801145c 	.word	0x0801145c
 8002c94:	08011469 	.word	0x08011469

08002c98 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	2206      	movs	r2, #6
 8002caa:	4619      	mov	r1, r3
 8002cac:	2003      	movs	r0, #3
 8002cae:	f000 f88b 	bl	8002dc8 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8002cb2:	7a7b      	ldrb	r3, [r7, #9]
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	b21a      	sxth	r2, r3
 8002cb8:	7a3b      	ldrb	r3, [r7, #8]
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8002cc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ccc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002d38 <ist8310_read_mag+0xa0>
 8002cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8002cda:	7afb      	ldrb	r3, [r7, #11]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	b21a      	sxth	r2, r3
 8002ce0:	7abb      	ldrb	r3, [r7, #10]
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8002ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002d38 <ist8310_read_mag+0xa0>
 8002cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d00:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8002d04:	7b7b      	ldrb	r3, [r7, #13]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	7b3b      	ldrb	r3, [r7, #12]
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8002d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3308      	adds	r3, #8
 8002d22:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002d38 <ist8310_read_mag+0xa0>
 8002d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	3e99999a 	.word	0x3e99999a

08002d3c <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0

}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af04      	add	r7, sp, #16
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	9302      	str	r3, [sp, #8]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	f107 030f 	add.w	r3, r7, #15
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	211c      	movs	r1, #28
 8002d7c:	4803      	ldr	r0, [pc, #12]	@ (8002d8c <ist8310_IIC_read_single_reg+0x34>)
 8002d7e:	f004 fce7 	bl	8007750 <HAL_I2C_Mem_Read>
    return res;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200009f8 	.word	0x200009f8

08002d90 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af04      	add	r7, sp, #16
 8002d96:	4603      	mov	r3, r0
 8002d98:	460a      	mov	r2, r1
 8002d9a:	71fb      	strb	r3, [r7, #7]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	230a      	movs	r3, #10
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	2301      	movs	r3, #1
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	1dbb      	adds	r3, r7, #6
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2301      	movs	r3, #1
 8002db2:	211c      	movs	r1, #28
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <ist8310_IIC_write_single_reg+0x34>)
 8002db6:	f004 fbd1 	bl	800755c <HAL_I2C_Mem_Write>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200009f8 	.word	0x200009f8

08002dc8 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af04      	add	r7, sp, #16
 8002dce:	4603      	mov	r3, r0
 8002dd0:	6039      	str	r1, [r7, #0]
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	79bb      	ldrb	r3, [r7, #6]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	210a      	movs	r1, #10
 8002de2:	9102      	str	r1, [sp, #8]
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2301      	movs	r3, #1
 8002dec:	211c      	movs	r1, #28
 8002dee:	4803      	ldr	r0, [pc, #12]	@ (8002dfc <ist8310_IIC_read_muli_reg+0x34>)
 8002df0:	f004 fcae 	bl	8007750 <HAL_I2C_Mem_Read>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200009f8 	.word	0x200009f8

08002e00 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 fcf3 	bl	80057f8 <HAL_Delay>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	@ 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <ist8310_delay_us+0x88>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8002e4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <ist8310_delay_us+0x88>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8002e52:	4b14      	ldr	r3, [pc, #80]	@ (8002ea4 <ist8310_delay_us+0x88>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d0f8      	beq.n	8002e52 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d206      	bcs.n	8002e76 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e007      	b.n	8002e86 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad2      	subs	r2, r2, r3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d200      	bcs.n	8002e94 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 8002e92:	e7de      	b.n	8002e52 <ist8310_delay_us+0x36>
            {
                break;
 8002e94:	bf00      	nop
            }
        }
    }
}
 8002e96:	bf00      	nop
 8002e98:	3724      	adds	r7, #36	@ 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8002eac:	2201      	movs	r2, #1
 8002eae:	2140      	movs	r1, #64	@ 0x40
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <ist8310_RST_H+0x14>)
 8002eb2:	f004 f9dd 	bl	8007270 <HAL_GPIO_WritePin>
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021800 	.word	0x40021800

08002ec0 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2140      	movs	r1, #64	@ 0x40
 8002ec8:	4802      	ldr	r0, [pc, #8]	@ (8002ed4 <ist8310_RST_L+0x14>)
 8002eca:	f004 f9d1 	bl	8007270 <HAL_GPIO_WritePin>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40021800 	.word	0x40021800

08002ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002edc:	f002 fc1a 	bl	8005714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ee0:	f000 f876 	bl	8002fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ee4:	f000 fd00 	bl	80038e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ee8:	f000 fca8 	bl	800383c <MX_DMA_Init>
  MX_CAN1_Init();
 8002eec:	f000 f8dc 	bl	80030a8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002ef0:	f000 f910 	bl	8003114 <MX_CAN2_Init>
  MX_SPI1_Init();
 8002ef4:	f000 f972 	bl	80031dc <MX_SPI1_Init>
  MX_TIM4_Init();
 8002ef8:	f000 fa4e 	bl	8003398 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002efc:	f000 fc1e 	bl	800373c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002f00:	f000 fc72 	bl	80037e8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002f04:	f000 f9a0 	bl	8003248 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002f08:	f000 fb2e 	bl	8003568 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8002f0c:	f000 fc40 	bl	8003790 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002f10:	f000 fbc6 	bl	80036a0 <MX_TIM10_Init>
  MX_I2C3_Init();
 8002f14:	f000 f934 	bl	8003180 <MX_I2C3_Init>
  MX_TIM5_Init();
 8002f18:	f000 fab6 	bl	8003488 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8002f1c:	f7ff fd04 	bl	8002928 <can_filter_init>
  remote_control_init();
 8002f20:	f001 fad8 	bl	80044d4 <remote_control_init>
  usart_Init();
 8002f24:	f7ff fa80 	bl	8002428 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8002f28:	f001 fae2 	bl	80044f0 <get_remote_control_point>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <main+0xb4>)
 8002f30:	6013      	str	r3, [r2, #0]
  PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002f32:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <main+0xb8>)
 8002f34:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <main+0xbc>)
 8002f36:	4918      	ldr	r1, [pc, #96]	@ (8002f98 <main+0xc0>)
 8002f38:	4818      	ldr	r0, [pc, #96]	@ (8002f9c <main+0xc4>)
 8002f3a:	f001 f98b 	bl	8004254 <PWMInit>
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f3e:	f008 fb79 	bl	800b634 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8002f42:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <main+0xc8>)
 8002f44:	2100      	movs	r1, #0
 8002f46:	4817      	ldr	r0, [pc, #92]	@ (8002fa4 <main+0xcc>)
 8002f48:	f008 fbbe 	bl	800b6c8 <osThreadNew>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4a16      	ldr	r2, [pc, #88]	@ (8002fa8 <main+0xd0>)
 8002f50:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <main+0xd4>)
 8002f54:	2100      	movs	r1, #0
 8002f56:	4816      	ldr	r0, [pc, #88]	@ (8002fb0 <main+0xd8>)
 8002f58:	f008 fbb6 	bl	800b6c8 <osThreadNew>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a15      	ldr	r2, [pc, #84]	@ (8002fb4 <main+0xdc>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8002f62:	4a15      	ldr	r2, [pc, #84]	@ (8002fb8 <main+0xe0>)
 8002f64:	2100      	movs	r1, #0
 8002f66:	4815      	ldr	r0, [pc, #84]	@ (8002fbc <main+0xe4>)
 8002f68:	f008 fbae 	bl	800b6c8 <osThreadNew>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <main+0xe8>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8002f72:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <main+0xec>)
 8002f74:	2100      	movs	r1, #0
 8002f76:	4814      	ldr	r0, [pc, #80]	@ (8002fc8 <main+0xf0>)
 8002f78:	f008 fba6 	bl	800b6c8 <osThreadNew>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <main+0xf4>)
 8002f80:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002f82:	f008 fb7b 	bl	800b67c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <main+0xae>
 8002f8a:	bf00      	nop
 8002f8c:	20000f34 	.word	0x20000f34
 8002f90:	20000b7c 	.word	0x20000b7c
 8002f94:	20000b34 	.word	0x20000b34
 8002f98:	20000aec 	.word	0x20000aec
 8002f9c:	20000aa4 	.word	0x20000aa4
 8002fa0:	0801146c 	.word	0x0801146c
 8002fa4:	08003add 	.word	0x08003add
 8002fa8:	20000f24 	.word	0x20000f24
 8002fac:	08011490 	.word	0x08011490
 8002fb0:	08003b61 	.word	0x08003b61
 8002fb4:	20000f28 	.word	0x20000f28
 8002fb8:	080114b4 	.word	0x080114b4
 8002fbc:	08002a75 	.word	0x08002a75
 8002fc0:	20000f2c 	.word	0x20000f2c
 8002fc4:	080114d8 	.word	0x080114d8
 8002fc8:	08003ef9 	.word	0x08003ef9
 8002fcc:	20000f30 	.word	0x20000f30

08002fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b094      	sub	sp, #80	@ 0x50
 8002fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd6:	f107 0320 	add.w	r3, r7, #32
 8002fda:	2230      	movs	r2, #48	@ 0x30
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00b ffec 	bl	800efbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	4b29      	ldr	r3, [pc, #164]	@ (80030a0 <SystemClock_Config+0xd0>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	4a28      	ldr	r2, [pc, #160]	@ (80030a0 <SystemClock_Config+0xd0>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	@ 0x40
 8003004:	4b26      	ldr	r3, [pc, #152]	@ (80030a0 <SystemClock_Config+0xd0>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	2300      	movs	r3, #0
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <SystemClock_Config+0xd4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <SystemClock_Config+0xd4>)
 800301a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <SystemClock_Config+0xd4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800302c:	2301      	movs	r3, #1
 800302e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003036:	2302      	movs	r3, #2
 8003038:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800303a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003040:	2306      	movs	r3, #6
 8003042:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003044:	23a8      	movs	r3, #168	@ 0xa8
 8003046:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003048:	2302      	movs	r3, #2
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800304c:	2304      	movs	r3, #4
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003050:	f107 0320 	add.w	r3, r7, #32
 8003054:	4618      	mov	r0, r3
 8003056:	f005 f961 	bl	800831c <HAL_RCC_OscConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003060:	f000 ff52 	bl	8003f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003064:	230f      	movs	r3, #15
 8003066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003068:	2302      	movs	r3, #2
 800306a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003070:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	2105      	movs	r1, #5
 8003082:	4618      	mov	r0, r3
 8003084:	f005 fbc2 	bl	800880c <HAL_RCC_ClockConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800308e:	f000 ff3b 	bl	8003f08 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003092:	f005 fca1 	bl	80089d8 <HAL_RCC_EnableCSS>
}
 8003096:	bf00      	nop
 8003098:	3750      	adds	r7, #80	@ 0x50
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40007000 	.word	0x40007000

080030a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80030ac:	4b17      	ldr	r3, [pc, #92]	@ (800310c <MX_CAN1_Init+0x64>)
 80030ae:	4a18      	ldr	r2, [pc, #96]	@ (8003110 <MX_CAN1_Init+0x68>)
 80030b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80030b2:	4b16      	ldr	r3, [pc, #88]	@ (800310c <MX_CAN1_Init+0x64>)
 80030b4:	2203      	movs	r2, #3
 80030b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80030b8:	4b14      	ldr	r3, [pc, #80]	@ (800310c <MX_CAN1_Init+0x64>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80030be:	4b13      	ldr	r3, [pc, #76]	@ (800310c <MX_CAN1_Init+0x64>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <MX_CAN1_Init+0x64>)
 80030c6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80030ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80030cc:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <MX_CAN1_Init+0x64>)
 80030ce:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80030d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80030d4:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <MX_CAN1_Init+0x64>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80030da:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <MX_CAN1_Init+0x64>)
 80030dc:	2200      	movs	r2, #0
 80030de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <MX_CAN1_Init+0x64>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80030e6:	4b09      	ldr	r3, [pc, #36]	@ (800310c <MX_CAN1_Init+0x64>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <MX_CAN1_Init+0x64>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80030f2:	4b06      	ldr	r3, [pc, #24]	@ (800310c <MX_CAN1_Init+0x64>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80030f8:	4804      	ldr	r0, [pc, #16]	@ (800310c <MX_CAN1_Init+0x64>)
 80030fa:	f002 fba1 	bl	8005840 <HAL_CAN_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003104:	f000 ff00 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200009a8 	.word	0x200009a8
 8003110:	40006400 	.word	0x40006400

08003114 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003118:	4b17      	ldr	r3, [pc, #92]	@ (8003178 <MX_CAN2_Init+0x64>)
 800311a:	4a18      	ldr	r2, [pc, #96]	@ (800317c <MX_CAN2_Init+0x68>)
 800311c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800311e:	4b16      	ldr	r3, [pc, #88]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003120:	2203      	movs	r2, #3
 8003122:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003124:	4b14      	ldr	r3, [pc, #80]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800312a:	4b13      	ldr	r3, [pc, #76]	@ (8003178 <MX_CAN2_Init+0x64>)
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003130:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003132:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003136:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003138:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <MX_CAN2_Init+0x64>)
 800313a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800313e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003140:	4b0d      	ldr	r3, [pc, #52]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003142:	2200      	movs	r2, #0
 8003144:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003146:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003148:	2200      	movs	r2, #0
 800314a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800314c:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <MX_CAN2_Init+0x64>)
 800314e:	2200      	movs	r2, #0
 8003150:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003154:	2200      	movs	r2, #0
 8003156:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003158:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <MX_CAN2_Init+0x64>)
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003164:	4804      	ldr	r0, [pc, #16]	@ (8003178 <MX_CAN2_Init+0x64>)
 8003166:	f002 fb6b 	bl	8005840 <HAL_CAN_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003170:	f000 feca 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200009d0 	.word	0x200009d0
 800317c:	40006800 	.word	0x40006800

08003180 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <MX_I2C3_Init+0x50>)
 8003186:	4a13      	ldr	r2, [pc, #76]	@ (80031d4 <MX_I2C3_Init+0x54>)
 8003188:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800318a:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <MX_I2C3_Init+0x50>)
 800318c:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <MX_I2C3_Init+0x58>)
 800318e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003190:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <MX_I2C3_Init+0x50>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003196:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <MX_I2C3_Init+0x50>)
 8003198:	2200      	movs	r2, #0
 800319a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <MX_I2C3_Init+0x50>)
 800319e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <MX_I2C3_Init+0x50>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <MX_I2C3_Init+0x50>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031b0:	4b07      	ldr	r3, [pc, #28]	@ (80031d0 <MX_I2C3_Init+0x50>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <MX_I2C3_Init+0x50>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80031bc:	4804      	ldr	r0, [pc, #16]	@ (80031d0 <MX_I2C3_Init+0x50>)
 80031be:	f004 f889 	bl	80072d4 <HAL_I2C_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80031c8:	f000 fe9e 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	200009f8 	.word	0x200009f8
 80031d4:	40005c00 	.word	0x40005c00
 80031d8:	00061a80 	.word	0x00061a80

080031dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031e0:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <MX_SPI1_Init+0x64>)
 80031e2:	4a18      	ldr	r2, [pc, #96]	@ (8003244 <MX_SPI1_Init+0x68>)
 80031e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031e6:	4b16      	ldr	r3, [pc, #88]	@ (8003240 <MX_SPI1_Init+0x64>)
 80031e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031ee:	4b14      	ldr	r3, [pc, #80]	@ (8003240 <MX_SPI1_Init+0x64>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031f4:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <MX_SPI1_Init+0x64>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80031fa:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <MX_SPI1_Init+0x64>)
 80031fc:	2202      	movs	r2, #2
 80031fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003200:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <MX_SPI1_Init+0x64>)
 8003202:	2201      	movs	r2, #1
 8003204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003206:	4b0e      	ldr	r3, [pc, #56]	@ (8003240 <MX_SPI1_Init+0x64>)
 8003208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800320e:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <MX_SPI1_Init+0x64>)
 8003210:	2238      	movs	r2, #56	@ 0x38
 8003212:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <MX_SPI1_Init+0x64>)
 8003216:	2200      	movs	r2, #0
 8003218:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <MX_SPI1_Init+0x64>)
 800321c:	2200      	movs	r2, #0
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003220:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <MX_SPI1_Init+0x64>)
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <MX_SPI1_Init+0x64>)
 8003228:	220a      	movs	r2, #10
 800322a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <MX_SPI1_Init+0x64>)
 800322e:	f005 fcf4 	bl	8008c1a <HAL_SPI_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003238:	f000 fe66 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000a4c 	.word	0x20000a4c
 8003244:	40013000 	.word	0x40013000

08003248 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b092      	sub	sp, #72	@ 0x48
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800324e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	615a      	str	r2, [r3, #20]
 800326a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	2220      	movs	r2, #32
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f00b fea2 	bl	800efbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003278:	4b45      	ldr	r3, [pc, #276]	@ (8003390 <MX_TIM1_Init+0x148>)
 800327a:	4a46      	ldr	r2, [pc, #280]	@ (8003394 <MX_TIM1_Init+0x14c>)
 800327c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800327e:	4b44      	ldr	r3, [pc, #272]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003280:	2253      	movs	r2, #83	@ 0x53
 8003282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003284:	4b42      	ldr	r3, [pc, #264]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800328a:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <MX_TIM1_Init+0x148>)
 800328c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	4b3f      	ldr	r3, [pc, #252]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003298:	4b3d      	ldr	r3, [pc, #244]	@ (8003390 <MX_TIM1_Init+0x148>)
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329e:	4b3c      	ldr	r3, [pc, #240]	@ (8003390 <MX_TIM1_Init+0x148>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032a4:	483a      	ldr	r0, [pc, #232]	@ (8003390 <MX_TIM1_Init+0x148>)
 80032a6:	f006 f885 	bl	80093b4 <HAL_TIM_PWM_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80032b0:	f000 fe2a 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032c0:	4619      	mov	r1, r3
 80032c2:	4833      	ldr	r0, [pc, #204]	@ (8003390 <MX_TIM1_Init+0x148>)
 80032c4:	f006 fea4 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80032ce:	f000 fe1b 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d2:	2360      	movs	r3, #96	@ 0x60
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032da:	2300      	movs	r3, #0
 80032dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032de:	2300      	movs	r3, #0
 80032e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f2:	2200      	movs	r2, #0
 80032f4:	4619      	mov	r1, r3
 80032f6:	4826      	ldr	r0, [pc, #152]	@ (8003390 <MX_TIM1_Init+0x148>)
 80032f8:	f006 f9e4 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003302:	f000 fe01 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800330a:	2204      	movs	r2, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4820      	ldr	r0, [pc, #128]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003310:	f006 f9d8 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800331a:	f000 fdf5 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800331e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003322:	2208      	movs	r2, #8
 8003324:	4619      	mov	r1, r3
 8003326:	481a      	ldr	r0, [pc, #104]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003328:	f006 f9cc 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003332:	f000 fde9 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800333a:	220c      	movs	r2, #12
 800333c:	4619      	mov	r1, r3
 800333e:	4814      	ldr	r0, [pc, #80]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003340:	f006 f9c0 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800334a:	f000 fddd 	bl	8003f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003366:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4807      	ldr	r0, [pc, #28]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003372:	f006 fec9 	bl	800a108 <HAL_TIMEx_ConfigBreakDeadTime>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800337c:	f000 fdc4 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003380:	4803      	ldr	r0, [pc, #12]	@ (8003390 <MX_TIM1_Init+0x148>)
 8003382:	f001 fd33 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8003386:	bf00      	nop
 8003388:	3748      	adds	r7, #72	@ 0x48
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000aa4 	.word	0x20000aa4
 8003394:	40010000 	.word	0x40010000

08003398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	@ 0x38
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800339e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ac:	f107 0320 	add.w	r3, r7, #32
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
 80033c4:	615a      	str	r2, [r3, #20]
 80033c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003480 <MX_TIM4_Init+0xe8>)
 80033ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003484 <MX_TIM4_Init+0xec>)
 80033cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80033ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003480 <MX_TIM4_Init+0xe8>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <MX_TIM4_Init+0xe8>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 80033da:	4b29      	ldr	r3, [pc, #164]	@ (8003480 <MX_TIM4_Init+0xe8>)
 80033dc:	f245 2207 	movw	r2, #20999	@ 0x5207
 80033e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e2:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <MX_TIM4_Init+0xe8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033e8:	4b25      	ldr	r3, [pc, #148]	@ (8003480 <MX_TIM4_Init+0xe8>)
 80033ea:	2280      	movs	r2, #128	@ 0x80
 80033ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033ee:	4824      	ldr	r0, [pc, #144]	@ (8003480 <MX_TIM4_Init+0xe8>)
 80033f0:	f005 ff28 	bl	8009244 <HAL_TIM_Base_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80033fa:	f000 fd85 	bl	8003f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003404:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003408:	4619      	mov	r1, r3
 800340a:	481d      	ldr	r0, [pc, #116]	@ (8003480 <MX_TIM4_Init+0xe8>)
 800340c:	f006 fa1c 	bl	8009848 <HAL_TIM_ConfigClockSource>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003416:	f000 fd77 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800341a:	4819      	ldr	r0, [pc, #100]	@ (8003480 <MX_TIM4_Init+0xe8>)
 800341c:	f005 ffca 	bl	80093b4 <HAL_TIM_PWM_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003426:	f000 fd6f 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003432:	f107 0320 	add.w	r3, r7, #32
 8003436:	4619      	mov	r1, r3
 8003438:	4811      	ldr	r0, [pc, #68]	@ (8003480 <MX_TIM4_Init+0xe8>)
 800343a:	f006 fde9 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003444:	f000 fd60 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003448:	2360      	movs	r3, #96	@ 0x60
 800344a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 800344c:	f642 1303 	movw	r3, #10499	@ 0x2903
 8003450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	2208      	movs	r2, #8
 800345e:	4619      	mov	r1, r3
 8003460:	4807      	ldr	r0, [pc, #28]	@ (8003480 <MX_TIM4_Init+0xe8>)
 8003462:	f006 f92f 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800346c:	f000 fd4c 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003470:	4803      	ldr	r0, [pc, #12]	@ (8003480 <MX_TIM4_Init+0xe8>)
 8003472:	f001 fcbb 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8003476:	bf00      	nop
 8003478:	3738      	adds	r7, #56	@ 0x38
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000aec 	.word	0x20000aec
 8003484:	40000800 	.word	0x40000800

08003488 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	@ 0x28
 800348c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800348e:	f107 0320 	add.w	r3, r7, #32
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	615a      	str	r2, [r3, #20]
 80034a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80034aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003564 <MX_TIM5_Init+0xdc>)
 80034ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 80034b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034b2:	222a      	movs	r2, #42	@ 0x2a
 80034b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80034bc:	4b28      	ldr	r3, [pc, #160]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034be:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80034c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c4:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ca:	4b25      	ldr	r3, [pc, #148]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80034d0:	4823      	ldr	r0, [pc, #140]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034d2:	f005 ff6f 	bl	80093b4 <HAL_TIM_PWM_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80034dc:	f000 fd14 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e0:	2300      	movs	r3, #0
 80034e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034e8:	f107 0320 	add.w	r3, r7, #32
 80034ec:	4619      	mov	r1, r3
 80034ee:	481c      	ldr	r0, [pc, #112]	@ (8003560 <MX_TIM5_Init+0xd8>)
 80034f0:	f006 fd8e 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80034fa:	f000 fd05 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034fe:	2360      	movs	r3, #96	@ 0x60
 8003500:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2200      	movs	r2, #0
 8003512:	4619      	mov	r1, r3
 8003514:	4812      	ldr	r0, [pc, #72]	@ (8003560 <MX_TIM5_Init+0xd8>)
 8003516:	f006 f8d5 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003520:	f000 fcf2 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	2204      	movs	r2, #4
 8003528:	4619      	mov	r1, r3
 800352a:	480d      	ldr	r0, [pc, #52]	@ (8003560 <MX_TIM5_Init+0xd8>)
 800352c:	f006 f8ca 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003536:	f000 fce7 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	2208      	movs	r2, #8
 800353e:	4619      	mov	r1, r3
 8003540:	4807      	ldr	r0, [pc, #28]	@ (8003560 <MX_TIM5_Init+0xd8>)
 8003542:	f006 f8bf 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 800354c:	f000 fcdc 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003550:	4803      	ldr	r0, [pc, #12]	@ (8003560 <MX_TIM5_Init+0xd8>)
 8003552:	f001 fc4b 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8003556:	bf00      	nop
 8003558:	3728      	adds	r7, #40	@ 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000b34 	.word	0x20000b34
 8003564:	40000c00 	.word	0x40000c00

08003568 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	@ 0x48
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	615a      	str	r2, [r3, #20]
 800358a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	2220      	movs	r2, #32
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f00b fd12 	bl	800efbc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003598:	4b3f      	ldr	r3, [pc, #252]	@ (8003698 <MX_TIM8_Init+0x130>)
 800359a:	4a40      	ldr	r2, [pc, #256]	@ (800369c <MX_TIM8_Init+0x134>)
 800359c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 800359e:	4b3e      	ldr	r3, [pc, #248]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035a0:	2253      	movs	r2, #83	@ 0x53
 80035a2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80035aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035ac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80035b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b2:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80035b8:	4b37      	ldr	r3, [pc, #220]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035be:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035c0:	2280      	movs	r2, #128	@ 0x80
 80035c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80035c4:	4834      	ldr	r0, [pc, #208]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035c6:	f005 fef5 	bl	80093b4 <HAL_TIM_PWM_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80035d0:	f000 fc9a 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d4:	2300      	movs	r3, #0
 80035d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d8:	2300      	movs	r3, #0
 80035da:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80035dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80035e0:	4619      	mov	r1, r3
 80035e2:	482d      	ldr	r0, [pc, #180]	@ (8003698 <MX_TIM8_Init+0x130>)
 80035e4:	f006 fd14 	bl	800a010 <HAL_TIMEx_MasterConfigSynchronization>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80035ee:	f000 fc8b 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035f2:	2360      	movs	r3, #96	@ 0x60
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035fa:	2300      	movs	r3, #0
 80035fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035fe:	2300      	movs	r3, #0
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003602:	2300      	movs	r3, #0
 8003604:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003606:	2300      	movs	r3, #0
 8003608:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003612:	2200      	movs	r2, #0
 8003614:	4619      	mov	r1, r3
 8003616:	4820      	ldr	r0, [pc, #128]	@ (8003698 <MX_TIM8_Init+0x130>)
 8003618:	f006 f854 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003622:	f000 fc71 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800362a:	2204      	movs	r2, #4
 800362c:	4619      	mov	r1, r3
 800362e:	481a      	ldr	r0, [pc, #104]	@ (8003698 <MX_TIM8_Init+0x130>)
 8003630:	f006 f848 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800363a:	f000 fc65 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800363e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003642:	2208      	movs	r2, #8
 8003644:	4619      	mov	r1, r3
 8003646:	4814      	ldr	r0, [pc, #80]	@ (8003698 <MX_TIM8_Init+0x130>)
 8003648:	f006 f83c 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8003652:	f000 fc59 	bl	8003f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800366a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800366e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4807      	ldr	r0, [pc, #28]	@ (8003698 <MX_TIM8_Init+0x130>)
 800367a:	f006 fd45 	bl	800a108 <HAL_TIMEx_ConfigBreakDeadTime>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8003684:	f000 fc40 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003688:	4803      	ldr	r0, [pc, #12]	@ (8003698 <MX_TIM8_Init+0x130>)
 800368a:	f001 fbaf 	bl	8004dec <HAL_TIM_MspPostInit>

}
 800368e:	bf00      	nop
 8003690:	3748      	adds	r7, #72	@ 0x48
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000b7c 	.word	0x20000b7c
 800369c:	40010400 	.word	0x40010400

080036a0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	611a      	str	r2, [r3, #16]
 80036b4:	615a      	str	r2, [r3, #20]
 80036b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80036b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003738 <MX_TIM10_Init+0x98>)
 80036bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80036be:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80036ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036cc:	f241 3287 	movw	r2, #4999	@ 0x1387
 80036d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d2:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036d8:	4b16      	ldr	r3, [pc, #88]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80036de:	4815      	ldr	r0, [pc, #84]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036e0:	f005 fdb0 	bl	8009244 <HAL_TIM_Base_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80036ea:	f000 fc0d 	bl	8003f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80036ee:	4811      	ldr	r0, [pc, #68]	@ (8003734 <MX_TIM10_Init+0x94>)
 80036f0:	f005 fe60 	bl	80093b4 <HAL_TIM_PWM_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80036fa:	f000 fc05 	bl	8003f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036fe:	2360      	movs	r3, #96	@ 0x60
 8003700:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800370e:	1d3b      	adds	r3, r7, #4
 8003710:	2200      	movs	r2, #0
 8003712:	4619      	mov	r1, r3
 8003714:	4807      	ldr	r0, [pc, #28]	@ (8003734 <MX_TIM10_Init+0x94>)
 8003716:	f005 ffd5 	bl	80096c4 <HAL_TIM_PWM_ConfigChannel>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003720:	f000 fbf2 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003724:	4803      	ldr	r0, [pc, #12]	@ (8003734 <MX_TIM10_Init+0x94>)
 8003726:	f001 fb61 	bl	8004dec <HAL_TIM_MspPostInit>

}
 800372a:	bf00      	nop
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000bc4 	.word	0x20000bc4
 8003738:	40014400 	.word	0x40014400

0800373c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003740:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <MX_USART1_UART_Init+0x50>)
 8003744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003746:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 8003748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800374c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800374e:	4b0e      	ldr	r3, [pc, #56]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003754:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800375a:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003760:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 8003762:	220c      	movs	r2, #12
 8003764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003766:	4b08      	ldr	r3, [pc, #32]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003772:	4805      	ldr	r0, [pc, #20]	@ (8003788 <MX_USART1_UART_Init+0x4c>)
 8003774:	f006 fd1a 	bl	800a1ac <HAL_UART_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800377e:	f000 fbc3 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000c6c 	.word	0x20000c6c
 800378c:	40011000 	.word	0x40011000

08003790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 8003796:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <MX_USART3_UART_Init+0x50>)
 8003798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 800379c:	4a11      	ldr	r2, [pc, #68]	@ (80037e4 <MX_USART3_UART_Init+0x54>)
 800379e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037a0:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 80037ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037b4:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 80037b6:	220c      	movs	r2, #12
 80037b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ba:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037c6:	4805      	ldr	r0, [pc, #20]	@ (80037dc <MX_USART3_UART_Init+0x4c>)
 80037c8:	f006 fcf0 	bl	800a1ac <HAL_UART_Init>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80037d2:	f000 fb99 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000cb4 	.word	0x20000cb4
 80037e0:	40004800 	.word	0x40004800
 80037e4:	000186a0 	.word	0x000186a0

080037e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 80037ee:	4a12      	ldr	r2, [pc, #72]	@ (8003838 <MX_USART6_UART_Init+0x50>)
 80037f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 80037f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80037fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003800:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003806:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 8003808:	2200      	movs	r2, #0
 800380a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800380c:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 800380e:	220c      	movs	r2, #12
 8003810:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 8003814:	2200      	movs	r2, #0
 8003816:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003818:	4b06      	ldr	r3, [pc, #24]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 800381a:	2200      	movs	r2, #0
 800381c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800381e:	4805      	ldr	r0, [pc, #20]	@ (8003834 <MX_USART6_UART_Init+0x4c>)
 8003820:	f006 fcc4 	bl	800a1ac <HAL_UART_Init>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800382a:	f000 fb6d 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000cfc 	.word	0x20000cfc
 8003838:	40011400 	.word	0x40011400

0800383c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	4b27      	ldr	r3, [pc, #156]	@ (80038e4 <MX_DMA_Init+0xa8>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	4a26      	ldr	r2, [pc, #152]	@ (80038e4 <MX_DMA_Init+0xa8>)
 800384c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003850:	6313      	str	r3, [r2, #48]	@ 0x30
 8003852:	4b24      	ldr	r3, [pc, #144]	@ (80038e4 <MX_DMA_Init+0xa8>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <MX_DMA_Init+0xa8>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <MX_DMA_Init+0xa8>)
 8003868:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800386c:	6313      	str	r3, [r2, #48]	@ 0x30
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <MX_DMA_Init+0xa8>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2105      	movs	r1, #5
 800387e:	200c      	movs	r0, #12
 8003880:	f002 ff21 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003884:	200c      	movs	r0, #12
 8003886:	f002 ff3a 	bl	80066fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2105      	movs	r1, #5
 800388e:	202f      	movs	r0, #47	@ 0x2f
 8003890:	f002 ff19 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003894:	202f      	movs	r0, #47	@ 0x2f
 8003896:	f002 ff32 	bl	80066fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2105      	movs	r1, #5
 800389e:	2039      	movs	r0, #57	@ 0x39
 80038a0:	f002 ff11 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80038a4:	2039      	movs	r0, #57	@ 0x39
 80038a6:	f002 ff2a 	bl	80066fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2105      	movs	r1, #5
 80038ae:	203a      	movs	r0, #58	@ 0x3a
 80038b0:	f002 ff09 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80038b4:	203a      	movs	r0, #58	@ 0x3a
 80038b6:	f002 ff22 	bl	80066fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2105      	movs	r1, #5
 80038be:	2045      	movs	r0, #69	@ 0x45
 80038c0:	f002 ff01 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80038c4:	2045      	movs	r0, #69	@ 0x45
 80038c6:	f002 ff1a 	bl	80066fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2105      	movs	r1, #5
 80038ce:	2046      	movs	r0, #70	@ 0x46
 80038d0:	f002 fef9 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80038d4:	2046      	movs	r0, #70	@ 0x46
 80038d6:	f002 ff12 	bl	80066fe <HAL_NVIC_EnableIRQ>

}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800

080038e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	@ 0x38
 80038ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	4b71      	ldr	r3, [pc, #452]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	4a70      	ldr	r2, [pc, #448]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	6313      	str	r3, [r2, #48]	@ 0x30
 800390e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	4a69      	ldr	r2, [pc, #420]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003928:	6313      	str	r3, [r2, #48]	@ 0x30
 800392a:	4b67      	ldr	r3, [pc, #412]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	4b63      	ldr	r3, [pc, #396]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	4a62      	ldr	r2, [pc, #392]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6313      	str	r3, [r2, #48]	@ 0x30
 8003946:	4b60      	ldr	r3, [pc, #384]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	6313      	str	r3, [r2, #48]	@ 0x30
 8003962:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	4b55      	ldr	r3, [pc, #340]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	4a54      	ldr	r2, [pc, #336]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003978:	f043 0304 	orr.w	r3, r3, #4
 800397c:	6313      	str	r3, [r2, #48]	@ 0x30
 800397e:	4b52      	ldr	r3, [pc, #328]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003998:	6313      	str	r3, [r2, #48]	@ 0x30
 800399a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	4a46      	ldr	r2, [pc, #280]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b6:	4b44      	ldr	r3, [pc, #272]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	4b40      	ldr	r3, [pc, #256]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4b39      	ldr	r3, [pc, #228]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	4a38      	ldr	r2, [pc, #224]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039e8:	f043 0310 	orr.w	r3, r3, #16
 80039ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ee:	4b36      	ldr	r3, [pc, #216]	@ (8003ac8 <MX_GPIO_Init+0x1e0>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2140      	movs	r1, #64	@ 0x40
 80039fe:	4833      	ldr	r0, [pc, #204]	@ (8003acc <MX_GPIO_Init+0x1e4>)
 8003a00:	f003 fc36 	bl	8007270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2110      	movs	r1, #16
 8003a08:	4831      	ldr	r0, [pc, #196]	@ (8003ad0 <MX_GPIO_Init+0x1e8>)
 8003a0a:	f003 fc31 	bl	8007270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2101      	movs	r1, #1
 8003a12:	4830      	ldr	r0, [pc, #192]	@ (8003ad4 <MX_GPIO_Init+0x1ec>)
 8003a14:	f003 fc2c 	bl	8007270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a18:	2340      	movs	r3, #64	@ 0x40
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4827      	ldr	r0, [pc, #156]	@ (8003acc <MX_GPIO_Init+0x1e4>)
 8003a30:	f003 fa82 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a34:	2308      	movs	r3, #8
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a46:	4619      	mov	r1, r3
 8003a48:	4820      	ldr	r0, [pc, #128]	@ (8003acc <MX_GPIO_Init+0x1e4>)
 8003a4a:	f003 fa75 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a4e:	2310      	movs	r3, #16
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a52:	2301      	movs	r3, #1
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a62:	4619      	mov	r1, r3
 8003a64:	481a      	ldr	r0, [pc, #104]	@ (8003ad0 <MX_GPIO_Init+0x1e8>)
 8003a66:	f003 fa67 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8003a6a:	2330      	movs	r3, #48	@ 0x30
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4816      	ldr	r0, [pc, #88]	@ (8003ad8 <MX_GPIO_Init+0x1f0>)
 8003a80:	f003 fa5a 	bl	8006f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a84:	2301      	movs	r3, #1
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a90:	2300      	movs	r3, #0
 8003a92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a98:	4619      	mov	r1, r3
 8003a9a:	480e      	ldr	r0, [pc, #56]	@ (8003ad4 <MX_GPIO_Init+0x1ec>)
 8003a9c:	f003 fa4c 	bl	8006f38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2105      	movs	r1, #5
 8003aa4:	2009      	movs	r0, #9
 8003aa6:	f002 fe0e 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003aaa:	2009      	movs	r0, #9
 8003aac:	f002 fe27 	bl	80066fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2105      	movs	r1, #5
 8003ab4:	200a      	movs	r0, #10
 8003ab6:	f002 fe06 	bl	80066c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003aba:	200a      	movs	r0, #10
 8003abc:	f002 fe1f 	bl	80066fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ac0:	bf00      	nop
 8003ac2:	3738      	adds	r7, #56	@ 0x38
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40021800 	.word	0x40021800
 8003ad0:	40020000 	.word	0x40020000
 8003ad4:	40020400 	.word	0x40020400
 8003ad8:	40020800 	.word	0x40020800

08003adc <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	// LED_PWM_Start();
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003aea:	481a      	ldr	r0, [pc, #104]	@ (8003b54 <TaskMain+0x78>)
 8003aec:	f003 fbc0 	bl	8007270 <HAL_GPIO_WritePin>
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8003af0:	f7fd fa80 	bl	8000ff4 <BMI088_accel_init>
		//usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8003af4:	f7fd fb36 	bl	8001164 <BMI088_gyro_init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <TaskMain+0x28>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 8003afe:	4816      	ldr	r0, [pc, #88]	@ (8003b58 <TaskMain+0x7c>)
 8003b00:	f7fe fcaa 	bl	8002458 <usart_printf>
	}
	if (ist8310_init()) {
 8003b04:	f7ff f854 	bl	8002bb0 <ist8310_init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <TaskMain+0x38>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 8003b0e:	4813      	ldr	r0, [pc, #76]	@ (8003b5c <TaskMain+0x80>)
 8003b10:	f7fe fca2 	bl	8002458 <usart_printf>
	}
	CAN_defineMotor(Bus2, M3508, 1);
 8003b14:	2201      	movs	r2, #1
 8003b16:	2101      	movs	r1, #1
 8003b18:	2002      	movs	r0, #2
 8003b1a:	f7fd fe0b 	bl	8001734 <CAN_defineMotor>
	CAN_defineMotor(Bus2, M2006, 2);
 8003b1e:	2202      	movs	r2, #2
 8003b20:	2102      	movs	r1, #2
 8003b22:	2002      	movs	r0, #2
 8003b24:	f7fd fe06 	bl	8001734 <CAN_defineMotor>
	CAN_defineMotor(Bus2, GM6020, 1);
 8003b28:	2201      	movs	r2, #1
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	2002      	movs	r0, #2
 8003b2e:	f7fd fe01 	bl	8001734 <CAN_defineMotor>

	osDelay(150);
 8003b32:	2096      	movs	r0, #150	@ 0x96
 8003b34:	f007 fe5a 	bl	800b7ec <osDelay>
	// __HAL_TIM_PRESCALER(&htim4, 0);
	osDelay(150);
 8003b38:	2096      	movs	r0, #150	@ 0x96
 8003b3a:	f007 fe57 	bl	800b7ec <osDelay>
	for(;;) {
		//HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
		//set_motor_voltage(5, 4000);
		// LED_SetBrightness(blue, 0.3);
		//usart_printf("%d \r\n", getRotorPosition(1, 1, 1));
		osDelay(500);
 8003b3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b42:	f007 fe53 	bl	800b7ec <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		//HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
		// LED_SetBrightness(blue, 1);
		//set_motor_voltage(5, -4000);
		osDelay(500);
 8003b46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b4a:	f007 fe4f 	bl	800b7ec <osDelay>
		osDelay(500);
 8003b4e:	bf00      	nop
 8003b50:	e7f5      	b.n	8003b3e <TaskMain+0x62>
 8003b52:	bf00      	nop
 8003b54:	40021c00 	.word	0x40021c00
 8003b58:	080113e0 	.word	0x080113e0
 8003b5c:	0801140c 	.word	0x0801140c

08003b60 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	@ 0x30
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
    int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 8003b72:	f107 030c 	add.w	r3, r7, #12
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
    int16_t rcYaw = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    // int16_t rcPitch = 0;   	                    // range: 2204 ~ 4726
    int8_t jammed = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t indexerStopped = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t indexerTargetReached = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    //int16_t targetRPM[4] = {0,0,0,0};
  /* Infinite loop */
    for(;;) {
	    for (int i = 0; i < 4; i++) {
 8003b92:	2300      	movs	r3, #0
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b96:	e01b      	b.n	8003bd0 <TaskChassis+0x70>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8003b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fe5d 	bl	800485c <getRCchannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bac:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8003ed0 <TaskChassis+0x370>
 8003bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bb8:	ee17 3a90 	vmov	r3, s15
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	3330      	adds	r3, #48	@ 0x30
 8003bc4:	443b      	add	r3, r7
 8003bc6:	f823 2c1c 	strh.w	r2, [r3, #-28]
	    for (int i = 0; i < 4; i++) {
 8003bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bcc:	3301      	adds	r3, #1
 8003bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	dde0      	ble.n	8003b98 <TaskChassis+0x38>
	    }
	    rcYaw = getRCchannel(4) * 0.85f;
 8003bd6:	2004      	movs	r0, #4
 8003bd8:	f000 fe40 	bl	800485c <getRCchannel>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be6:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003ed4 <TaskChassis+0x374>
 8003bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bf2:	ee17 3a90 	vmov	r3, s15
 8003bf6:	84fb      	strh	r3, [r7, #38]	@ 0x26

	    //CAN_DriveMotor(1, CAN_DJI_GROUP3_Current_ID, 2000, 0, 0, 0);
	    //CAN_setMotorCurrent(1, M3508, 7, 2000);
	    //rcPitch = getRotorPosition(1, 1, 2);

	    int16_t turretPitch = (getRCchannel(1)*0.63f)+2640;
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f000 fe2f 	bl	800485c <getRCchannel>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	ee07 3a90 	vmov	s15, r3
 8003c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c08:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8003ed8 <TaskChassis+0x378>
 8003c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c10:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8003edc <TaskChassis+0x37c>
 8003c14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	84bb      	strh	r3, [r7, #36]	@ 0x24

	    setMotorPosition(Bus1, GM6020, 5, turretPitch, pitchPresetVoltagePosition);
 8003c22:	4baf      	ldr	r3, [pc, #700]	@ (8003ee0 <TaskChassis+0x380>)
 8003c24:	edd3 6a00 	vldr	s13, [r3]
 8003c28:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003c34:	eeb0 0a66 	vmov.f32	s0, s13
 8003c38:	eef0 0a47 	vmov.f32	s1, s14
 8003c3c:	eeb0 1a67 	vmov.f32	s2, s15
 8003c40:	2205      	movs	r2, #5
 8003c42:	2103      	movs	r1, #3
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7fe fb62 	bl	800230e <setMotorPosition>

	    // setMotorRPM(Bus2, GM6020, 5, chassisTargetRPM[0], chassisPreset);

	    //CAN_DriveMotor(Bus1, 0x2FF, 2000, 0, 0, 0);
	    osDelay(2);
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	f007 fdce 	bl	800b7ec <osDelay>

	    //setMotorRPM(Bus2, M3508, 8, 50, shooterPreset);
	    setMotorRPM(Bus2, GM6020, 1, rcYaw, yawPresetVoltageRPM);
 8003c50:	4ba4      	ldr	r3, [pc, #656]	@ (8003ee4 <TaskChassis+0x384>)
 8003c52:	edd3 6a00 	vldr	s13, [r3]
 8003c56:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003c62:	eeb0 0a66 	vmov.f32	s0, s13
 8003c66:	eef0 0a47 	vmov.f32	s1, s14
 8003c6a:	eeb0 1a67 	vmov.f32	s2, s15
 8003c6e:	2201      	movs	r2, #1
 8003c70:	2103      	movs	r1, #3
 8003c72:	2002      	movs	r0, #2
 8003c74:	f7fe fb10 	bl	8002298 <setMotorRPM>

	    int16_t rcPitch = getRCchannel(1) * 1.91f + 3462;        // range: 4968 ~ 7490       110.85deg
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f000 fdef 	bl	800485c <getRCchannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c88:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8003ee8 <TaskChassis+0x388>
 8003c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c90:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8003eec <TaskChassis+0x38c>
 8003c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c9c:	ee17 3a90 	vmov	r3, s15
 8003ca0:	847b      	strh	r3, [r7, #34]	@ 0x22
	    //usart_printf("ch1: %d\r\n", getRotorPosition(2,3,5));
	    //setMotorPosition(Bus2, GM6020, 5, 3462, pitchPresetVoltagePosition);

	    //usart_printf("%d \r\n", rcPitch);
	    chassisTargetRPM[0] = rcRPM[3] + rcRPM[0] + rcRPM[2];
 8003ca2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	b21b      	sxth	r3, r3
 8003cbe:	81bb      	strh	r3, [r7, #12]
	    chassisTargetRPM[1] = rcRPM[3] + rcRPM[0] - rcRPM[2];
 8003cc0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b21b      	sxth	r3, r3
 8003cdc:	81fb      	strh	r3, [r7, #14]
	    chassisTargetRPM[2] = -rcRPM[3] + rcRPM[0] - rcRPM[2];
 8003cde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	b21b      	sxth	r3, r3
 8003cfa:	823b      	strh	r3, [r7, #16]
	    chassisTargetRPM[3] = -rcRPM[3] + rcRPM[0] + rcRPM[2];
 8003cfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	827b      	strh	r3, [r7, #18]

	    //usart_printf("ch1: %d\r\n", chassisTargetRPM[0]);

	    // setM3508RPM(7, CountryRoadsNotes() /*CountryRoadsNotes()*/, customPreset);

	    setMotorRPM(Bus2, M3508, 1, chassisTargetRPM[0], chassisPreset);
 8003d1a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d1e:	4b74      	ldr	r3, [pc, #464]	@ (8003ef0 <TaskChassis+0x390>)
 8003d20:	edd3 6a00 	vldr	s13, [r3]
 8003d24:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d28:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d2c:	eeb0 0a66 	vmov.f32	s0, s13
 8003d30:	eef0 0a47 	vmov.f32	s1, s14
 8003d34:	eeb0 1a67 	vmov.f32	s2, s15
 8003d38:	4613      	mov	r3, r2
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	2002      	movs	r0, #2
 8003d40:	f7fe faaa 	bl	8002298 <setMotorRPM>
	    setMotorRPM(Bus2, M3508, 2, chassisTargetRPM[1], chassisPreset);
 8003d44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003d48:	4b69      	ldr	r3, [pc, #420]	@ (8003ef0 <TaskChassis+0x390>)
 8003d4a:	edd3 6a00 	vldr	s13, [r3]
 8003d4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d52:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d56:	eeb0 0a66 	vmov.f32	s0, s13
 8003d5a:	eef0 0a47 	vmov.f32	s1, s14
 8003d5e:	eeb0 1a67 	vmov.f32	s2, s15
 8003d62:	4613      	mov	r3, r2
 8003d64:	2202      	movs	r2, #2
 8003d66:	2101      	movs	r1, #1
 8003d68:	2002      	movs	r0, #2
 8003d6a:	f7fe fa95 	bl	8002298 <setMotorRPM>
	    setMotorRPM(Bus2, M3508, 3, chassisTargetRPM[2], chassisPreset);
 8003d6e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d72:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef0 <TaskChassis+0x390>)
 8003d74:	edd3 6a00 	vldr	s13, [r3]
 8003d78:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d80:	eeb0 0a66 	vmov.f32	s0, s13
 8003d84:	eef0 0a47 	vmov.f32	s1, s14
 8003d88:	eeb0 1a67 	vmov.f32	s2, s15
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	2203      	movs	r2, #3
 8003d90:	2101      	movs	r1, #1
 8003d92:	2002      	movs	r0, #2
 8003d94:	f7fe fa80 	bl	8002298 <setMotorRPM>
	    setMotorRPM(Bus2, M3508, 4, chassisTargetRPM[3], chassisPreset);
 8003d98:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d9c:	4b54      	ldr	r3, [pc, #336]	@ (8003ef0 <TaskChassis+0x390>)
 8003d9e:	edd3 6a00 	vldr	s13, [r3]
 8003da2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003da6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003daa:	eeb0 0a66 	vmov.f32	s0, s13
 8003dae:	eef0 0a47 	vmov.f32	s1, s14
 8003db2:	eeb0 1a67 	vmov.f32	s2, s15
 8003db6:	4613      	mov	r3, r2
 8003db8:	2204      	movs	r2, #4
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f7fe fa6b 	bl	8002298 <setMotorRPM>
	    // ^^^^^^^^^ chassis code

	    uint32_t notes = CountryRoadsNotes();
 8003dc2:	f000 fd73 	bl	80048ac <CountryRoadsNotes>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	61fb      	str	r3, [r7, #28]
	    setMotorRPM(Bus2, M3508, 7, notes, flywheel);
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	b21a      	sxth	r2, r3
 8003dce:	4b49      	ldr	r3, [pc, #292]	@ (8003ef4 <TaskChassis+0x394>)
 8003dd0:	edd3 6a00 	vldr	s13, [r3]
 8003dd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ddc:	eeb0 0a66 	vmov.f32	s0, s13
 8003de0:	eef0 0a47 	vmov.f32	s1, s14
 8003de4:	eeb0 1a67 	vmov.f32	s2, s15
 8003de8:	4613      	mov	r3, r2
 8003dea:	2207      	movs	r2, #7
 8003dec:	2101      	movs	r1, #1
 8003dee:	2002      	movs	r0, #2
 8003df0:	f7fe fa52 	bl	8002298 <setMotorRPM>
	    setMotorRPM(Bus2, M3508, 8, -1*notes, flywheel);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	425b      	negs	r3, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	b21a      	sxth	r2, r3
 8003dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef4 <TaskChassis+0x394>)
 8003e00:	edd3 6a00 	vldr	s13, [r3]
 8003e04:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e08:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e0c:	eeb0 0a66 	vmov.f32	s0, s13
 8003e10:	eef0 0a47 	vmov.f32	s1, s14
 8003e14:	eeb0 1a67 	vmov.f32	s2, s15
 8003e18:	4613      	mov	r3, r2
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	2002      	movs	r0, #2
 8003e20:	f7fe fa3a 	bl	8002298 <setMotorRPM>

	    //setGM6020voltageRPM(5, getRCchannel(4) * 0.45, yawPresetVoltageRPM);
	    //setGM6020voltagePosition(9, 6229, pitchPresetVoltagePosition);
		if (getRCswitch(0) == 2) {                                         // IMPORTANT: top to bottom: 1 -> 3 -> 2
 8003e24:	2000      	movs	r0, #0
 8003e26:	f000 fd2d 	bl	8004884 <getRCswitch>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d136      	bne.n	8003e9e <TaskChassis+0x33e>
			//setM2006RPM(6, -5400, indexerPreset);                             // THIS IS FUCKING STUPID
			//setM3508RPM(7, 8000, shooterPreset);
			//setM3508RPM(8, -8000, shooterPreset);
			if (jammed > 0 && indexerStopped == 0) {
 8003e30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	dd0b      	ble.n	8003e50 <TaskChassis+0x2f0>
 8003e38:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d107      	bne.n	8003e50 <TaskChassis+0x2f0>
				//setM2006RPM(6, 15000, indexerPreset);
				jammed--;
 8003e40:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003e4e:	e039      	b.n	8003ec4 <TaskChassis+0x364>
			} else {
				indexerStopped = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				//setM2006RPM(6, -5400, indexerPreset);
				if (indexerTargetReached == 0 && getMotorRPM(1, 2, 6) <= -10) {
 8003e56:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10c      	bne.n	8003e78 <TaskChassis+0x318>
 8003e5e:	2206      	movs	r2, #6
 8003e60:	2102      	movs	r1, #2
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7fe fa8e 	bl	8002384 <getMotorRPM>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f113 0f09 	cmn.w	r3, #9
 8003e6e:	da03      	bge.n	8003e78 <TaskChassis+0x318>
					indexerTargetReached = 1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003e76:	e025      	b.n	8003ec4 <TaskChassis+0x364>
				} else if (getMotorRPM(1, 2, 6) > -1 && indexerTargetReached == 1) {         // jammed
 8003e78:	2206      	movs	r2, #6
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	f7fe fa81 	bl	8002384 <getMotorRPM>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db1d      	blt.n	8003ec4 <TaskChassis+0x364>
 8003e88:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d119      	bne.n	8003ec4 <TaskChassis+0x364>
					jammed = 12;
 8003e90:	230c      	movs	r3, #12
 8003e92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					indexerTargetReached = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003e9c:	e012      	b.n	8003ec4 <TaskChassis+0x364>
				}
			}
		} else if (getRCswitch(0) == 3) {
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f000 fcf0 	bl	8004884 <getRCswitch>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d106      	bne.n	8003eb8 <TaskChassis+0x358>
			//setM2006RPM(6, 0, indexerPreset);
			//setM3508RPM(7, 8000, shooterPreset);
			//setM3508RPM(8, -8000, shooterPreset);
			indexerStopped = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			indexerTargetReached = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003eb6:	e005      	b.n	8003ec4 <TaskChassis+0x364>
		} else {       // = 1
			//setM2006RPM(6, 0, indexerPreset);
			//setM3508RPM(7, 0, shooterPreset);
			//setM3508RPM(8, 0, shooterPreset);
			indexerStopped = 1;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
			indexerTargetReached = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		}
		PWMTimerStarter();
 8003ec4:	f000 f9fa 	bl	80042bc <PWMTimerStarter>
        osDelay(5);
 8003ec8:	2005      	movs	r0, #5
 8003eca:	f007 fc8f 	bl	800b7ec <osDelay>
    for(;;) {
 8003ece:	e660      	b.n	8003b92 <TaskChassis+0x32>
 8003ed0:	415a51ec 	.word	0x415a51ec
 8003ed4:	3f59999a 	.word	0x3f59999a
 8003ed8:	3f2147ae 	.word	0x3f2147ae
 8003edc:	45250000 	.word	0x45250000
 8003ee0:	20000070 	.word	0x20000070
 8003ee4:	20000064 	.word	0x20000064
 8003ee8:	3ff47ae1 	.word	0x3ff47ae1
 8003eec:	45586000 	.word	0x45586000
 8003ef0:	20000058 	.word	0x20000058
 8003ef4:	2000007c 	.word	0x2000007c

08003ef8 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(5);
 8003f00:	2005      	movs	r0, #5
 8003f02:	f007 fc73 	bl	800b7ec <osDelay>
 8003f06:	e7fb      	b.n	8003f00 <TaskTurret+0x8>

08003f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0c:	b672      	cpsid	i
}
 8003f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <Error_Handler+0x8>

08003f14 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6178      	str	r0, [r7, #20]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	60fa      	str	r2, [r7, #12]
 8003f20:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f24:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f28:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d042      	beq.n	8003fb6 <PID_init+0xa2>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03f      	beq.n	8003fb6 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	7cfa      	ldrb	r2, [r7, #19]
 8003f3a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3304      	adds	r3, #4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3308      	adds	r3, #8
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	621a      	str	r2, [r3, #32]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003fb4:	e000      	b.n	8003fb8 <PID_init+0xa4>
        return;
 8003fb6:	bf00      	nop
}
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fce:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <PID_calc+0x1c>
    {
        return 0.0f;
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e130      	b.n	8004240 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8003ffa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8095 	bne.w	8004140 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	ed93 7a01 	vldr	s14, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	edd3 6a02 	vldr	s13, [r3, #8]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800403e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	ed93 7a03 	vldr	s14, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	edd3 7a05 	vldr	s15, [r3, #20]
 8004094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409c:	dd04      	ble.n	80040a8 <PID_calc+0xe6>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040a6:	e014      	b.n	80040d2 <PID_calc+0x110>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80040b4:	eef1 7a67 	vneg.f32	s15, s15
 80040b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	d507      	bpl.n	80040d2 <PID_calc+0x110>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80040c8:	eef1 7a67 	vneg.f32	s15, s15
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80040de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80040fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004106:	dd04      	ble.n	8004112 <PID_calc+0x150>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	621a      	str	r2, [r3, #32]
 8004110:	e094      	b.n	800423c <PID_calc+0x27a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	ed93 7a08 	vldr	s14, [r3, #32]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	edd3 7a04 	vldr	s15, [r3, #16]
 800411e:	eef1 7a67 	vneg.f32	s15, s15
 8004122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412a:	f140 8087 	bpl.w	800423c <PID_calc+0x27a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	edd3 7a04 	vldr	s15, [r3, #16]
 8004134:	eef1 7a67 	vneg.f32	s15, s15
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	edc3 7a08 	vstr	s15, [r3, #32]
 800413e:	e07d      	b.n	800423c <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d179      	bne.n	800423c <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	ed93 7a01 	vldr	s14, [r3, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800415a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800415e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	ed93 7a02 	vldr	s14, [r3, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800419a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800419e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80041a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80041da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80041e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80041fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004206:	dd04      	ble.n	8004212 <PID_calc+0x250>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]
 8004210:	e014      	b.n	800423c <PID_calc+0x27a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	ed93 7a08 	vldr	s14, [r3, #32]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	edd3 7a04 	vldr	s15, [r3, #16]
 800421e:	eef1 7a67 	vneg.f32	s15, s15
 8004222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422a:	d507      	bpl.n	800423c <PID_calc+0x27a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004232:	eef1 7a67 	vneg.f32	s15, s15
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
}
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eeb0 0a67 	vmov.f32	s0, s15
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8004262:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <PWMInit+0x58>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8004268:	4a11      	ldr	r2, [pc, #68]	@ (80042b0 <PWMInit+0x5c>)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 800426e:	4a11      	ldr	r2, [pc, #68]	@ (80042b4 <PWMInit+0x60>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8004274:	4a10      	ldr	r2, [pc, #64]	@ (80042b8 <PWMInit+0x64>)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 800427a:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <PWMInit+0x58>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f005 f830 	bl	80092e4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8004284:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <PWMInit+0x5c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f005 f82b 	bl	80092e4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 800428e:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <PWMInit+0x60>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f005 f826 	bl	80092e4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8004298:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <PWMInit+0x64>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f005 f821 	bl	80092e4 <HAL_TIM_Base_Start>
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000f38 	.word	0x20000f38
 80042b0:	20000f3c 	.word	0x20000f3c
 80042b4:	20000f40 	.word	0x20000f40
 80042b8:	20000f44 	.word	0x20000f44

080042bc <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	e0f1      	b.n	80044ac <PWMTimerStarter+0x1f0>
		switch (i) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b0a      	cmp	r3, #10
 80042cc:	f200 80eb 	bhi.w	80044a6 <PWMTimerStarter+0x1ea>
 80042d0:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <PWMTimerStarter+0x1c>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	08004305 	.word	0x08004305
 80042dc:	0800432b 	.word	0x0800432b
 80042e0:	08004351 	.word	0x08004351
 80042e4:	08004377 	.word	0x08004377
 80042e8:	0800439d 	.word	0x0800439d
 80042ec:	080043c3 	.word	0x080043c3
 80042f0:	080043e9 	.word	0x080043e9
 80042f4:	0800440f 	.word	0x0800440f
 80042f8:	08004435 	.word	0x08004435
 80042fc:	0800445b 	.word	0x0800445b
 8004300:	08004481 	.word	0x08004481
		case 0:
			if (whichPWMisOn[0] == 1) {
 8004304:	4b6e      	ldr	r3, [pc, #440]	@ (80044c0 <PWMTimerStarter+0x204>)
 8004306:	f993 3000 	ldrsb.w	r3, [r3]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d106      	bne.n	800431c <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800430e:	4b6d      	ldr	r3, [pc, #436]	@ (80044c4 <PWMTimerStarter+0x208>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f005 f89d 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 800431a:	e0c4      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 800431c:	4b69      	ldr	r3, [pc, #420]	@ (80044c4 <PWMTimerStarter+0x208>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f005 f95e 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 8004328:	e0bd      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 800432a:	4b65      	ldr	r3, [pc, #404]	@ (80044c0 <PWMTimerStarter+0x204>)
 800432c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8004334:	4b63      	ldr	r3, [pc, #396]	@ (80044c4 <PWMTimerStarter+0x208>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2104      	movs	r1, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f005 f88a 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8004340:	e0b1      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8004342:	4b60      	ldr	r3, [pc, #384]	@ (80044c4 <PWMTimerStarter+0x208>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2104      	movs	r1, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f005 f94b 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 800434e:	e0aa      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8004350:	4b5b      	ldr	r3, [pc, #364]	@ (80044c0 <PWMTimerStarter+0x204>)
 8004352:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d106      	bne.n	8004368 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 800435a:	4b5a      	ldr	r3, [pc, #360]	@ (80044c4 <PWMTimerStarter+0x208>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2108      	movs	r1, #8
 8004360:	4618      	mov	r0, r3
 8004362:	f005 f877 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8004366:	e09e      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8004368:	4b56      	ldr	r3, [pc, #344]	@ (80044c4 <PWMTimerStarter+0x208>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2108      	movs	r1, #8
 800436e:	4618      	mov	r0, r3
 8004370:	f005 f938 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 8004374:	e097      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8004376:	4b52      	ldr	r3, [pc, #328]	@ (80044c0 <PWMTimerStarter+0x204>)
 8004378:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8004380:	4b50      	ldr	r3, [pc, #320]	@ (80044c4 <PWMTimerStarter+0x208>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	210c      	movs	r1, #12
 8004386:	4618      	mov	r0, r3
 8004388:	f005 f864 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 800438c:	e08b      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 800438e:	4b4d      	ldr	r3, [pc, #308]	@ (80044c4 <PWMTimerStarter+0x208>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	210c      	movs	r1, #12
 8004394:	4618      	mov	r0, r3
 8004396:	f005 f925 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 800439a:	e084      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 800439c:	4b48      	ldr	r3, [pc, #288]	@ (80044c0 <PWMTimerStarter+0x204>)
 800439e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d106      	bne.n	80043b4 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 80043a6:	4b48      	ldr	r3, [pc, #288]	@ (80044c8 <PWMTimerStarter+0x20c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f005 f851 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 80043b2:	e078      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 80043b4:	4b44      	ldr	r3, [pc, #272]	@ (80044c8 <PWMTimerStarter+0x20c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f005 f912 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 80043c0:	e071      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 80043c2:	4b3f      	ldr	r3, [pc, #252]	@ (80044c0 <PWMTimerStarter+0x204>)
 80043c4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d106      	bne.n	80043da <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 80043cc:	4b3e      	ldr	r3, [pc, #248]	@ (80044c8 <PWMTimerStarter+0x20c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2104      	movs	r1, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f005 f83e 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 80043d8:	e065      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 80043da:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <PWMTimerStarter+0x20c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2104      	movs	r1, #4
 80043e0:	4618      	mov	r0, r3
 80043e2:	f005 f8ff 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 80043e6:	e05e      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 80043e8:	4b35      	ldr	r3, [pc, #212]	@ (80044c0 <PWMTimerStarter+0x204>)
 80043ea:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d106      	bne.n	8004400 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 80043f2:	4b35      	ldr	r3, [pc, #212]	@ (80044c8 <PWMTimerStarter+0x20c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2108      	movs	r1, #8
 80043f8:	4618      	mov	r0, r3
 80043fa:	f005 f82b 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 80043fe:	e052      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8004400:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <PWMTimerStarter+0x20c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2108      	movs	r1, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f005 f8ec 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 800440c:	e04b      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 800440e:	4b2c      	ldr	r3, [pc, #176]	@ (80044c0 <PWMTimerStarter+0x204>)
 8004410:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8004418:	4b2c      	ldr	r3, [pc, #176]	@ (80044cc <PWMTimerStarter+0x210>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f005 f818 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8004424:	e03f      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8004426:	4b29      	ldr	r3, [pc, #164]	@ (80044cc <PWMTimerStarter+0x210>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f005 f8d9 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 8004432:	e038      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8004434:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <PWMTimerStarter+0x204>)
 8004436:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d106      	bne.n	800444c <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800443e:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <PWMTimerStarter+0x210>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2104      	movs	r1, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f005 f805 	bl	8009454 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800444a:	e02c      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 800444c:	4b1f      	ldr	r3, [pc, #124]	@ (80044cc <PWMTimerStarter+0x210>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2104      	movs	r1, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f005 f8c6 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 8004458:	e025      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 800445a:	4b19      	ldr	r3, [pc, #100]	@ (80044c0 <PWMTimerStarter+0x204>)
 800445c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d106      	bne.n	8004472 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8004464:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <PWMTimerStarter+0x210>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2108      	movs	r1, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f004 fff2 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8004470:	e019      	b.n	80044a6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8004472:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <PWMTimerStarter+0x210>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2108      	movs	r1, #8
 8004478:	4618      	mov	r0, r3
 800447a:	f005 f8b3 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 800447e:	e012      	b.n	80044a6 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8004480:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <PWMTimerStarter+0x204>)
 8004482:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d106      	bne.n	8004498 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 800448a:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <PWMTimerStarter+0x214>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2108      	movs	r1, #8
 8004490:	4618      	mov	r0, r3
 8004492:	f004 ffdf 	bl	8009454 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8004496:	e005      	b.n	80044a4 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8004498:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <PWMTimerStarter+0x214>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2108      	movs	r1, #8
 800449e:	4618      	mov	r0, r3
 80044a0:	f005 f8a0 	bl	80095e4 <HAL_TIM_PWM_Stop>
			break;
 80044a4:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3301      	adds	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b0a      	cmp	r3, #10
 80044b0:	f77f af0a 	ble.w	80042c8 <PWMTimerStarter+0xc>
		}
	}
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000f48 	.word	0x20000f48
 80044c4:	20000f38 	.word	0x20000f38
 80044c8:	20000f44 	.word	0x20000f44
 80044cc:	20000f40 	.word	0x20000f40
 80044d0:	20000f3c 	.word	0x20000f3c

080044d4 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80044d8:	2224      	movs	r2, #36	@ 0x24
 80044da:	4903      	ldr	r1, [pc, #12]	@ (80044e8 <remote_control_init+0x14>)
 80044dc:	4803      	ldr	r0, [pc, #12]	@ (80044ec <remote_control_init+0x18>)
 80044de:	f7fe fa6d 	bl	80029bc <RC_init>
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000f90 	.word	0x20000f90
 80044ec:	20000f6c 	.word	0x20000f6c

080044f0 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80044f4:	4b02      	ldr	r3, [pc, #8]	@ (8004500 <get_remote_control_point+0x10>)
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000f54 	.word	0x20000f54

08004504 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 800450a:	4b44      	ldr	r3, [pc, #272]	@ (800461c <USART3_IRQHandler+0x118>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8004518:	2300      	movs	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	4b3f      	ldr	r3, [pc, #252]	@ (800461c <USART3_IRQHandler+0x118>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <USART3_IRQHandler+0x118>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	607b      	str	r3, [r7, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 800452e:	e070      	b.n	8004612 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8004530:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <USART3_IRQHandler+0x11c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d06a      	beq.n	8004612 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800453c:	2300      	movs	r3, #0
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4b36      	ldr	r3, [pc, #216]	@ (800461c <USART3_IRQHandler+0x118>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4b34      	ldr	r3, [pc, #208]	@ (800461c <USART3_IRQHandler+0x118>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8004552:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <USART3_IRQHandler+0x120>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d12d      	bne.n	80045bc <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8004560:	4b30      	ldr	r3, [pc, #192]	@ (8004624 <USART3_IRQHandler+0x120>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b2f      	ldr	r3, [pc, #188]	@ (8004624 <USART3_IRQHandler+0x120>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0201 	bic.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8004570:	4b2c      	ldr	r3, [pc, #176]	@ (8004624 <USART3_IRQHandler+0x120>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800457c:	b29a      	uxth	r2, r3
 800457e:	4b2a      	ldr	r3, [pc, #168]	@ (8004628 <USART3_IRQHandler+0x124>)
 8004580:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8004582:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <USART3_IRQHandler+0x120>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2224      	movs	r2, #36	@ 0x24
 8004588:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800458a:	4b26      	ldr	r3, [pc, #152]	@ (8004624 <USART3_IRQHandler+0x120>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <USART3_IRQHandler+0x120>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004598:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800459a:	4b22      	ldr	r3, [pc, #136]	@ (8004624 <USART3_IRQHandler+0x120>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <USART3_IRQHandler+0x120>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 80045aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004628 <USART3_IRQHandler+0x124>)
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	2b12      	cmp	r3, #18
 80045b0:	d12f      	bne.n	8004612 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 80045b2:	491e      	ldr	r1, [pc, #120]	@ (800462c <USART3_IRQHandler+0x128>)
 80045b4:	481e      	ldr	r0, [pc, #120]	@ (8004630 <USART3_IRQHandler+0x12c>)
 80045b6:	f000 f841 	bl	800463c <sbus_to_rc>
}
 80045ba:	e02a      	b.n	8004612 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <USART3_IRQHandler+0x120>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b18      	ldr	r3, [pc, #96]	@ (8004624 <USART3_IRQHandler+0x120>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80045cc:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <USART3_IRQHandler+0x120>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80045d8:	b29a      	uxth	r2, r3
 80045da:	4b13      	ldr	r3, [pc, #76]	@ (8004628 <USART3_IRQHandler+0x124>)
 80045dc:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80045de:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <USART3_IRQHandler+0x120>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2224      	movs	r2, #36	@ 0x24
 80045e4:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80045e6:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <USART3_IRQHandler+0x130>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a12      	ldr	r2, [pc, #72]	@ (8004634 <USART3_IRQHandler+0x130>)
 80045ec:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80045f0:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80045f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <USART3_IRQHandler+0x120>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <USART3_IRQHandler+0x120>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8004602:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <USART3_IRQHandler+0x124>)
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	2b12      	cmp	r3, #18
 8004608:	d103      	bne.n	8004612 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 800460a:	4908      	ldr	r1, [pc, #32]	@ (800462c <USART3_IRQHandler+0x128>)
 800460c:	480a      	ldr	r0, [pc, #40]	@ (8004638 <USART3_IRQHandler+0x134>)
 800460e:	f000 f815 	bl	800463c <sbus_to_rc>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000cb4 	.word	0x20000cb4
 8004620:	40004800 	.word	0x40004800
 8004624:	20000e04 	.word	0x20000e04
 8004628:	20000fb4 	.word	0x20000fb4
 800462c:	20000f54 	.word	0x20000f54
 8004630:	20000f6c 	.word	0x20000f6c
 8004634:	40026028 	.word	0x40026028
 8004638:	20000f90 	.word	0x20000f90

0800463c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8101 	beq.w	8004850 <sbus_to_rc+0x214>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80fd 	beq.w	8004850 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	b21a      	sxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3301      	adds	r3, #1
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	b21b      	sxth	r3, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	b21b      	sxth	r3, r3
 800466e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004672:	b21a      	sxth	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3301      	adds	r3, #1
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	08db      	lsrs	r3, r3, #3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	b21a      	sxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3302      	adds	r3, #2
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	015b      	lsls	r3, r3, #5
 8004690:	b21b      	sxth	r3, r3
 8004692:	4313      	orrs	r3, r2
 8004694:	b21b      	sxth	r3, r3
 8004696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800469a:	b21a      	sxth	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3302      	adds	r3, #2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	099b      	lsrs	r3, r3, #6
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	b21a      	sxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3303      	adds	r3, #3
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	b21b      	sxth	r3, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80046ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046d2:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	b21a      	sxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3305      	adds	r3, #5
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	b21b      	sxth	r3, r3
 80046f2:	4313      	orrs	r3, r2
 80046f4:	b21b      	sxth	r3, r3
 80046f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046fa:	b21a      	sxth	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3305      	adds	r3, #5
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	b2da      	uxtb	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3305      	adds	r3, #5
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	b2db      	uxtb	r3, r3
 8004722:	109b      	asrs	r3, r3, #2
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	b2da      	uxtb	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3306      	adds	r3, #6
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	b21a      	sxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3307      	adds	r3, #7
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	b21b      	sxth	r3, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	b21a      	sxth	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3308      	adds	r3, #8
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	b21a      	sxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3309      	adds	r3, #9
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	b21b      	sxth	r3, r3
 8004764:	4313      	orrs	r3, r2
 8004766:	b21a      	sxth	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	330a      	adds	r3, #10
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	b21a      	sxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	330b      	adds	r3, #11
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	b21b      	sxth	r3, r3
 8004782:	4313      	orrs	r3, r2
 8004784:	b21a      	sxth	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	330c      	adds	r3, #12
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	330d      	adds	r3, #13
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	330e      	adds	r3, #14
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	b21a      	sxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	330f      	adds	r3, #15
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	b21b      	sxth	r3, r3
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b21b      	sxth	r3, r3
 80047bc:	b29a      	uxth	r2, r3
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3310      	adds	r3, #16
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3311      	adds	r3, #17
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	b21b      	sxth	r3, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	b21a      	sxth	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047e6:	b21b      	sxth	r3, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b21a      	sxth	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047fc:	b21b      	sxth	r3, r3
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004804:	b29b      	uxth	r3, r3
 8004806:	b21a      	sxth	r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004812:	b21b      	sxth	r3, r3
 8004814:	b29b      	uxth	r3, r3
 8004816:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800481a:	b29b      	uxth	r3, r3
 800481c:	b21a      	sxth	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004828:	b21b      	sxth	r3, r3
 800482a:	b29b      	uxth	r3, r3
 800482c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004830:	b29b      	uxth	r3, r3
 8004832:	b21a      	sxth	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800483e:	b21b      	sxth	r3, r3
 8004840:	b29b      	uxth	r3, r3
 8004842:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004846:	b29b      	uxth	r3, r3
 8004848:	b21a      	sxth	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	811a      	strh	r2, [r3, #8]
 800484e:	e000      	b.n	8004852 <sbus_to_rc+0x216>
        return;
 8004850:	bf00      	nop
}
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <getRCchannel+0x24>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800486e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004872:	b21b      	sxth	r3, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	20000088 	.word	0x20000088

08004884 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <getRCswitch+0x24>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	4413      	add	r3, r2
 8004898:	7a9b      	ldrb	r3, [r3, #10]
 800489a:	b25b      	sxtb	r3, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	20000088 	.word	0x20000088

080048ac <CountryRoadsNotes>:
	songProgress = 0;
	timeTracker = 0;
	noteTracker = 0;
}

uint32_t CountryRoadsNotes() {
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
	if (timeTracker > countryRoadsRests[noteTracker]) {
 80048b0:	4b16      	ldr	r3, [pc, #88]	@ (800490c <CountryRoadsNotes+0x60>)
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b16      	ldr	r3, [pc, #88]	@ (8004910 <CountryRoadsNotes+0x64>)
 80048b8:	5c9b      	ldrb	r3, [r3, r2]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <CountryRoadsNotes+0x68>)
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d208      	bcs.n	80048d6 <CountryRoadsNotes+0x2a>
		noteTracker++;
 80048c4:	4b11      	ldr	r3, [pc, #68]	@ (800490c <CountryRoadsNotes+0x60>)
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	4b0f      	ldr	r3, [pc, #60]	@ (800490c <CountryRoadsNotes+0x60>)
 80048ce:	801a      	strh	r2, [r3, #0]
		timeTracker = 0;
 80048d0:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <CountryRoadsNotes+0x68>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	801a      	strh	r2, [r3, #0]
	}

	if (noteTracker > 36) {
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <CountryRoadsNotes+0x60>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	2b24      	cmp	r3, #36	@ 0x24
 80048dc:	d902      	bls.n	80048e4 <CountryRoadsNotes+0x38>
		noteTracker = 0;
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <CountryRoadsNotes+0x60>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	801a      	strh	r2, [r3, #0]
	}
	// usart_printf();
	// PWMOutput(Buzzer, 1, frequenciesAtA4[NeverGoingToGiveYouUpNotes[noteTracker]]);

	timeTracker++;
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <CountryRoadsNotes+0x68>)
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <CountryRoadsNotes+0x68>)
 80048ee:	801a      	strh	r2, [r3, #0]

	return  frequencyMotor[countryRoadsNotes[noteTracker]];
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <CountryRoadsNotes+0x60>)
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <CountryRoadsNotes+0x6c>)
 80048f8:	5c9b      	ldrb	r3, [r3, r2]
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b07      	ldr	r3, [pc, #28]	@ (800491c <CountryRoadsNotes+0x70>)
 80048fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	20000fb8 	.word	0x20000fb8
 8004910:	200000e0 	.word	0x200000e0
 8004914:	20000fb6 	.word	0x20000fb6
 8004918:	200000b8 	.word	0x200000b8
 800491c:	2000008c 	.word	0x2000008c

08004920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <HAL_MspInit+0x54>)
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	4a11      	ldr	r2, [pc, #68]	@ (8004974 <HAL_MspInit+0x54>)
 8004930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004934:	6453      	str	r3, [r2, #68]	@ 0x44
 8004936:	4b0f      	ldr	r3, [pc, #60]	@ (8004974 <HAL_MspInit+0x54>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	2300      	movs	r3, #0
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <HAL_MspInit+0x54>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	4a0a      	ldr	r2, [pc, #40]	@ (8004974 <HAL_MspInit+0x54>)
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004950:	6413      	str	r3, [r2, #64]	@ 0x40
 8004952:	4b08      	ldr	r3, [pc, #32]	@ (8004974 <HAL_MspInit+0x54>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	210f      	movs	r1, #15
 8004962:	f06f 0001 	mvn.w	r0, #1
 8004966:	f001 feae 	bl	80066c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800

08004978 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08c      	sub	sp, #48	@ 0x30
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004980:	f107 031c 	add.w	r3, r7, #28
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
 800498e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac0 <HAL_CAN_MspInit+0x148>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d13d      	bne.n	8004a16 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800499a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac4 <HAL_CAN_MspInit+0x14c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	4a48      	ldr	r2, [pc, #288]	@ (8004ac4 <HAL_CAN_MspInit+0x14c>)
 80049a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80049a4:	4b47      	ldr	r3, [pc, #284]	@ (8004ac4 <HAL_CAN_MspInit+0x14c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10d      	bne.n	80049c8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	4b45      	ldr	r3, [pc, #276]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	4a44      	ldr	r2, [pc, #272]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 80049b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80049bc:	4b42      	ldr	r3, [pc, #264]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 80049d2:	f043 0308 	orr.w	r3, r3, #8
 80049d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80049d8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049e4:	2303      	movs	r3, #3
 80049e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e8:	2302      	movs	r3, #2
 80049ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f0:	2303      	movs	r3, #3
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80049f4:	2309      	movs	r3, #9
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049f8:	f107 031c 	add.w	r3, r7, #28
 80049fc:	4619      	mov	r1, r3
 80049fe:	4833      	ldr	r0, [pc, #204]	@ (8004acc <HAL_CAN_MspInit+0x154>)
 8004a00:	f002 fa9a 	bl	8006f38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004a04:	2200      	movs	r2, #0
 8004a06:	2105      	movs	r1, #5
 8004a08:	2014      	movs	r0, #20
 8004a0a:	f001 fe5c 	bl	80066c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004a0e:	2014      	movs	r0, #20
 8004a10:	f001 fe75 	bl	80066fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004a14:	e04f      	b.n	8004ab6 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad0 <HAL_CAN_MspInit+0x158>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d14a      	bne.n	8004ab6 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
 8004a24:	4b28      	ldr	r3, [pc, #160]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	4a27      	ldr	r2, [pc, #156]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a30:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004a3c:	4b21      	ldr	r3, [pc, #132]	@ (8004ac4 <HAL_CAN_MspInit+0x14c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	4a20      	ldr	r2, [pc, #128]	@ (8004ac4 <HAL_CAN_MspInit+0x14c>)
 8004a44:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004a46:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac4 <HAL_CAN_MspInit+0x14c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10d      	bne.n	8004a6a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <HAL_CAN_MspInit+0x150>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004a86:	2360      	movs	r3, #96	@ 0x60
 8004a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a92:	2303      	movs	r3, #3
 8004a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004a96:	2309      	movs	r3, #9
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9a:	f107 031c 	add.w	r3, r7, #28
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	480c      	ldr	r0, [pc, #48]	@ (8004ad4 <HAL_CAN_MspInit+0x15c>)
 8004aa2:	f002 fa49 	bl	8006f38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2105      	movs	r1, #5
 8004aaa:	2040      	movs	r0, #64	@ 0x40
 8004aac:	f001 fe0b 	bl	80066c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004ab0:	2040      	movs	r0, #64	@ 0x40
 8004ab2:	f001 fe24 	bl	80066fe <HAL_NVIC_EnableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	3730      	adds	r7, #48	@ 0x30
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40006400 	.word	0x40006400
 8004ac4:	20000fbc 	.word	0x20000fbc
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	40020c00 	.word	0x40020c00
 8004ad0:	40006800 	.word	0x40006800
 8004ad4:	40020400 	.word	0x40020400

08004ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	@ 0x28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a29      	ldr	r2, [pc, #164]	@ (8004b9c <HAL_I2C_MspInit+0xc4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d14b      	bne.n	8004b92 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	4b28      	ldr	r3, [pc, #160]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	4a27      	ldr	r2, [pc, #156]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0a:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	4a20      	ldr	r2, [pc, #128]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b38:	2312      	movs	r3, #18
 8004b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b40:	2303      	movs	r3, #3
 8004b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b44:	2304      	movs	r3, #4
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4815      	ldr	r0, [pc, #84]	@ (8004ba4 <HAL_I2C_MspInit+0xcc>)
 8004b50:	f002 f9f2 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b5a:	2312      	movs	r3, #18
 8004b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b62:	2303      	movs	r3, #3
 8004b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b66:	2304      	movs	r3, #4
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b6a:	f107 0314 	add.w	r3, r7, #20
 8004b6e:	4619      	mov	r1, r3
 8004b70:	480d      	ldr	r0, [pc, #52]	@ (8004ba8 <HAL_I2C_MspInit+0xd0>)
 8004b72:	f002 f9e1 	bl	8006f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b86:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_I2C_MspInit+0xc8>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004b92:	bf00      	nop
 8004b94:	3728      	adds	r7, #40	@ 0x28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40005c00 	.word	0x40005c00
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40020800 	.word	0x40020800
 8004ba8:	40020000 	.word	0x40020000

08004bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a28      	ldr	r2, [pc, #160]	@ (8004c6c <HAL_SPI_MspInit+0xc0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d149      	bne.n	8004c62 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd6:	4a26      	ldr	r2, [pc, #152]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bde:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b20      	ldr	r3, [pc, #128]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b19      	ldr	r3, [pc, #100]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	4a18      	ldr	r2, [pc, #96]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c16:	4b16      	ldr	r3, [pc, #88]	@ (8004c70 <HAL_SPI_MspInit+0xc4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004c22:	2318      	movs	r3, #24
 8004c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c26:	2302      	movs	r3, #2
 8004c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c32:	2305      	movs	r3, #5
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c36:	f107 0314 	add.w	r3, r7, #20
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	480d      	ldr	r0, [pc, #52]	@ (8004c74 <HAL_SPI_MspInit+0xc8>)
 8004c3e:	f002 f97b 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c46:	2302      	movs	r3, #2
 8004c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c52:	2305      	movs	r3, #5
 8004c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4806      	ldr	r0, [pc, #24]	@ (8004c78 <HAL_SPI_MspInit+0xcc>)
 8004c5e:	f002 f96b 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c62:	bf00      	nop
 8004c64:	3728      	adds	r7, #40	@ 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40013000 	.word	0x40013000
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40020400 	.word	0x40020400
 8004c78:	40020000 	.word	0x40020000

08004c7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1f      	ldr	r2, [pc, #124]	@ (8004d08 <HAL_TIM_PWM_MspInit+0x8c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10e      	bne.n	8004cac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	4b1e      	ldr	r3, [pc, #120]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	4a1d      	ldr	r2, [pc, #116]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004caa:	e026      	b.n	8004cfa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	@ (8004d10 <HAL_TIM_PWM_MspInit+0x94>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10e      	bne.n	8004cd4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cc6:	4b11      	ldr	r3, [pc, #68]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	693b      	ldr	r3, [r7, #16]
}
 8004cd2:	e012      	b.n	8004cfa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d14 <HAL_TIM_PWM_MspInit+0x98>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10d      	bne.n	8004cfa <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	4a09      	ldr	r2, [pc, #36]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cee:	4b07      	ldr	r3, [pc, #28]	@ (8004d0c <HAL_TIM_PWM_MspInit+0x90>)
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400

08004d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd8 <HAL_TIM_Base_MspInit+0xc0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d13e      	bne.n	8004da8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <HAL_TIM_Base_MspInit+0xc4>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	4a2a      	ldr	r2, [pc, #168]	@ (8004ddc <HAL_TIM_Base_MspInit+0xc4>)
 8004d34:	f043 0304 	orr.w	r3, r3, #4
 8004d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3a:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <HAL_TIM_Base_MspInit+0xc4>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8004d46:	4b26      	ldr	r3, [pc, #152]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d48:	4a26      	ldr	r2, [pc, #152]	@ (8004de4 <HAL_TIM_Base_MspInit+0xcc>)
 8004d4a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8004d4c:	4b24      	ldr	r3, [pc, #144]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d4e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004d52:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d54:	4b22      	ldr	r3, [pc, #136]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d5a:	4b21      	ldr	r3, [pc, #132]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004d60:	4b1f      	ldr	r3, [pc, #124]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d66:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d68:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d6e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d70:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d76:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8004d78:	4b19      	ldr	r3, [pc, #100]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004d7e:	4b18      	ldr	r3, [pc, #96]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d84:	4b16      	ldr	r3, [pc, #88]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8004d8a:	4815      	ldr	r0, [pc, #84]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d8c:	f001 fcd2 	bl	8006734 <HAL_DMA_Init>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8004d96:	f7ff f8b7 	bl	8003f08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004da0:	4a0f      	ldr	r2, [pc, #60]	@ (8004de0 <HAL_TIM_Base_MspInit+0xc8>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004da6:	e012      	b.n	8004dce <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a0e      	ldr	r2, [pc, #56]	@ (8004de8 <HAL_TIM_Base_MspInit+0xd0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10d      	bne.n	8004dce <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	4b09      	ldr	r3, [pc, #36]	@ (8004ddc <HAL_TIM_Base_MspInit+0xc4>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	4a08      	ldr	r2, [pc, #32]	@ (8004ddc <HAL_TIM_Base_MspInit+0xc4>)
 8004dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dc2:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <HAL_TIM_Base_MspInit+0xc4>)
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	20000c0c 	.word	0x20000c0c
 8004de4:	400260b8 	.word	0x400260b8
 8004de8:	40014400 	.word	0x40014400

08004dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	@ 0x38
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6a      	ldr	r2, [pc, #424]	@ (8004fb4 <HAL_TIM_MspPostInit+0x1c8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d11f      	bne.n	8004e4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
 8004e12:	4b69      	ldr	r3, [pc, #420]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e16:	4a68      	ldr	r2, [pc, #416]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004e18:	f043 0310 	orr.w	r3, r3, #16
 8004e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e1e:	4b66      	ldr	r3, [pc, #408]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8004e2a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e30:	2302      	movs	r3, #2
 8004e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e44:	4619      	mov	r1, r3
 8004e46:	485d      	ldr	r0, [pc, #372]	@ (8004fbc <HAL_TIM_MspPostInit+0x1d0>)
 8004e48:	f002 f876 	bl	8006f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004e4c:	e0ae      	b.n	8004fac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5b      	ldr	r2, [pc, #364]	@ (8004fc0 <HAL_TIM_MspPostInit+0x1d4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d11f      	bne.n	8004e98 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	4b56      	ldr	r3, [pc, #344]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	4a55      	ldr	r2, [pc, #340]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004e62:	f043 0308 	orr.w	r3, r3, #8
 8004e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e68:	4b53      	ldr	r3, [pc, #332]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004e74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e82:	2300      	movs	r3, #0
 8004e84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e86:	2302      	movs	r3, #2
 8004e88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e8e:	4619      	mov	r1, r3
 8004e90:	484c      	ldr	r0, [pc, #304]	@ (8004fc4 <HAL_TIM_MspPostInit+0x1d8>)
 8004e92:	f002 f851 	bl	8006f38 <HAL_GPIO_Init>
}
 8004e96:	e089      	b.n	8004fac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc8 <HAL_TIM_MspPostInit+0x1dc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d11f      	bne.n	8004ee2 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	4b44      	ldr	r3, [pc, #272]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	4a43      	ldr	r2, [pc, #268]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8004ebe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ed8:	4619      	mov	r1, r3
 8004eda:	483c      	ldr	r0, [pc, #240]	@ (8004fcc <HAL_TIM_MspPostInit+0x1e0>)
 8004edc:	f002 f82c 	bl	8006f38 <HAL_GPIO_Init>
}
 8004ee0:	e064      	b.n	8004fac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8004fd0 <HAL_TIM_MspPostInit+0x1e4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d13c      	bne.n	8004f66 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	4b31      	ldr	r3, [pc, #196]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef4:	4a30      	ldr	r2, [pc, #192]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004efc:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f10:	4a29      	ldr	r2, [pc, #164]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004f12:	f043 0304 	orr.w	r3, r3, #4
 8004f16:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f18:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004f24:	23c0      	movs	r3, #192	@ 0xc0
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f30:	2300      	movs	r3, #0
 8004f32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f34:	2303      	movs	r3, #3
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4825      	ldr	r0, [pc, #148]	@ (8004fd4 <HAL_TIM_MspPostInit+0x1e8>)
 8004f40:	f001 fffa 	bl	8006f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f44:	2340      	movs	r3, #64	@ 0x40
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f50:	2300      	movs	r3, #0
 8004f52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f54:	2303      	movs	r3, #3
 8004f56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	481e      	ldr	r0, [pc, #120]	@ (8004fd8 <HAL_TIM_MspPostInit+0x1ec>)
 8004f60:	f001 ffea 	bl	8006f38 <HAL_GPIO_Init>
}
 8004f64:	e022      	b.n	8004fac <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <HAL_TIM_MspPostInit+0x1f0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d11d      	bne.n	8004fac <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	4a0f      	ldr	r2, [pc, #60]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004f7a:	f043 0320 	orr.w	r3, r3, #32
 8004f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f80:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <HAL_TIM_MspPostInit+0x1cc>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f8c:	2340      	movs	r3, #64	@ 0x40
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f90:	2302      	movs	r3, #2
 8004f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f94:	2301      	movs	r3, #1
 8004f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	480e      	ldr	r0, [pc, #56]	@ (8004fe0 <HAL_TIM_MspPostInit+0x1f4>)
 8004fa8:	f001 ffc6 	bl	8006f38 <HAL_GPIO_Init>
}
 8004fac:	bf00      	nop
 8004fae:	3738      	adds	r7, #56	@ 0x38
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40020c00 	.word	0x40020c00
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40021c00 	.word	0x40021c00
 8004fd0:	40010400 	.word	0x40010400
 8004fd4:	40022000 	.word	0x40022000
 8004fd8:	40020800 	.word	0x40020800
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40021400 	.word	0x40021400

08004fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08e      	sub	sp, #56	@ 0x38
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a90      	ldr	r2, [pc, #576]	@ (8005244 <HAL_UART_MspInit+0x260>)
 8005002:	4293      	cmp	r3, r2
 8005004:	f040 80b2 	bne.w	800516c <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005008:	2300      	movs	r3, #0
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	4b8e      	ldr	r3, [pc, #568]	@ (8005248 <HAL_UART_MspInit+0x264>)
 800500e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005010:	4a8d      	ldr	r2, [pc, #564]	@ (8005248 <HAL_UART_MspInit+0x264>)
 8005012:	f043 0310 	orr.w	r3, r3, #16
 8005016:	6453      	str	r3, [r2, #68]	@ 0x44
 8005018:	4b8b      	ldr	r3, [pc, #556]	@ (8005248 <HAL_UART_MspInit+0x264>)
 800501a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	4b87      	ldr	r3, [pc, #540]	@ (8005248 <HAL_UART_MspInit+0x264>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	4a86      	ldr	r2, [pc, #536]	@ (8005248 <HAL_UART_MspInit+0x264>)
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	6313      	str	r3, [r2, #48]	@ 0x30
 8005034:	4b84      	ldr	r3, [pc, #528]	@ (8005248 <HAL_UART_MspInit+0x264>)
 8005036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005040:	2300      	movs	r3, #0
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	4b80      	ldr	r3, [pc, #512]	@ (8005248 <HAL_UART_MspInit+0x264>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005048:	4a7f      	ldr	r2, [pc, #508]	@ (8005248 <HAL_UART_MspInit+0x264>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005050:	4b7d      	ldr	r3, [pc, #500]	@ (8005248 <HAL_UART_MspInit+0x264>)
 8005052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800505c:	2380      	movs	r3, #128	@ 0x80
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005060:	2302      	movs	r3, #2
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005068:	2303      	movs	r3, #3
 800506a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800506c:	2307      	movs	r3, #7
 800506e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005074:	4619      	mov	r1, r3
 8005076:	4875      	ldr	r0, [pc, #468]	@ (800524c <HAL_UART_MspInit+0x268>)
 8005078:	f001 ff5e 	bl	8006f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800507c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005082:	2302      	movs	r3, #2
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2300      	movs	r3, #0
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508a:	2303      	movs	r3, #3
 800508c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800508e:	2307      	movs	r3, #7
 8005090:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005096:	4619      	mov	r1, r3
 8005098:	486d      	ldr	r0, [pc, #436]	@ (8005250 <HAL_UART_MspInit+0x26c>)
 800509a:	f001 ff4d 	bl	8006f38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800509e:	4b6d      	ldr	r3, [pc, #436]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005258 <HAL_UART_MspInit+0x274>)
 80050a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80050a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80050aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ac:	4b69      	ldr	r3, [pc, #420]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050ae:	2240      	movs	r2, #64	@ 0x40
 80050b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b2:	4b68      	ldr	r3, [pc, #416]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050b8:	4b66      	ldr	r3, [pc, #408]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050c0:	4b64      	ldr	r3, [pc, #400]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050c6:	4b63      	ldr	r3, [pc, #396]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80050cc:	4b61      	ldr	r3, [pc, #388]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80050d2:	4b60      	ldr	r3, [pc, #384]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80050d8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050da:	4b5e      	ldr	r3, [pc, #376]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050dc:	2200      	movs	r2, #0
 80050de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80050e0:	485c      	ldr	r0, [pc, #368]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050e2:	f001 fb27 	bl	8006734 <HAL_DMA_Init>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80050ec:	f7fe ff0c 	bl	8003f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a58      	ldr	r2, [pc, #352]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80050f6:	4a57      	ldr	r2, [pc, #348]	@ (8005254 <HAL_UART_MspInit+0x270>)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80050fc:	4b57      	ldr	r3, [pc, #348]	@ (800525c <HAL_UART_MspInit+0x278>)
 80050fe:	4a58      	ldr	r2, [pc, #352]	@ (8005260 <HAL_UART_MspInit+0x27c>)
 8005100:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005102:	4b56      	ldr	r3, [pc, #344]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005104:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005108:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800510a:	4b54      	ldr	r3, [pc, #336]	@ (800525c <HAL_UART_MspInit+0x278>)
 800510c:	2200      	movs	r2, #0
 800510e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005110:	4b52      	ldr	r3, [pc, #328]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005112:	2200      	movs	r2, #0
 8005114:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005116:	4b51      	ldr	r3, [pc, #324]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005118:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800511c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800511e:	4b4f      	ldr	r3, [pc, #316]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005124:	4b4d      	ldr	r3, [pc, #308]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005126:	2200      	movs	r2, #0
 8005128:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800512a:	4b4c      	ldr	r3, [pc, #304]	@ (800525c <HAL_UART_MspInit+0x278>)
 800512c:	2200      	movs	r2, #0
 800512e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005130:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005132:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005136:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005138:	4b48      	ldr	r3, [pc, #288]	@ (800525c <HAL_UART_MspInit+0x278>)
 800513a:	2200      	movs	r2, #0
 800513c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800513e:	4847      	ldr	r0, [pc, #284]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005140:	f001 faf8 	bl	8006734 <HAL_DMA_Init>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800514a:	f7fe fedd 	bl	8003f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a42      	ldr	r2, [pc, #264]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005152:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005154:	4a41      	ldr	r2, [pc, #260]	@ (800525c <HAL_UART_MspInit+0x278>)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800515a:	2200      	movs	r2, #0
 800515c:	2105      	movs	r1, #5
 800515e:	2025      	movs	r0, #37	@ 0x25
 8005160:	f001 fab1 	bl	80066c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005164:	2025      	movs	r0, #37	@ 0x25
 8005166:	f001 faca 	bl	80066fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800516a:	e11c      	b.n	80053a6 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <HAL_UART_MspInit+0x280>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d17e      	bne.n	8005274 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	4b33      	ldr	r3, [pc, #204]	@ (8005248 <HAL_UART_MspInit+0x264>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	4a32      	ldr	r2, [pc, #200]	@ (8005248 <HAL_UART_MspInit+0x264>)
 8005180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005184:	6413      	str	r3, [r2, #64]	@ 0x40
 8005186:	4b30      	ldr	r3, [pc, #192]	@ (8005248 <HAL_UART_MspInit+0x264>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	4b2c      	ldr	r3, [pc, #176]	@ (8005248 <HAL_UART_MspInit+0x264>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	4a2b      	ldr	r2, [pc, #172]	@ (8005248 <HAL_UART_MspInit+0x264>)
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80051a2:	4b29      	ldr	r3, [pc, #164]	@ (8005248 <HAL_UART_MspInit+0x264>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80051ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b4:	2302      	movs	r3, #2
 80051b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051bc:	2303      	movs	r3, #3
 80051be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051c0:	2307      	movs	r3, #7
 80051c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051c8:	4619      	mov	r1, r3
 80051ca:	4827      	ldr	r0, [pc, #156]	@ (8005268 <HAL_UART_MspInit+0x284>)
 80051cc:	f001 feb4 	bl	8006f38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80051d0:	4b26      	ldr	r3, [pc, #152]	@ (800526c <HAL_UART_MspInit+0x288>)
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <HAL_UART_MspInit+0x28c>)
 80051d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80051d6:	4b25      	ldr	r3, [pc, #148]	@ (800526c <HAL_UART_MspInit+0x288>)
 80051d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80051dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051de:	4b23      	ldr	r3, [pc, #140]	@ (800526c <HAL_UART_MspInit+0x288>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051e4:	4b21      	ldr	r3, [pc, #132]	@ (800526c <HAL_UART_MspInit+0x288>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051ea:	4b20      	ldr	r3, [pc, #128]	@ (800526c <HAL_UART_MspInit+0x288>)
 80051ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051f2:	4b1e      	ldr	r3, [pc, #120]	@ (800526c <HAL_UART_MspInit+0x288>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051f8:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <HAL_UART_MspInit+0x288>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80051fe:	4b1b      	ldr	r3, [pc, #108]	@ (800526c <HAL_UART_MspInit+0x288>)
 8005200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005204:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005206:	4b19      	ldr	r3, [pc, #100]	@ (800526c <HAL_UART_MspInit+0x288>)
 8005208:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800520c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800520e:	4b17      	ldr	r3, [pc, #92]	@ (800526c <HAL_UART_MspInit+0x288>)
 8005210:	2200      	movs	r2, #0
 8005212:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005214:	4815      	ldr	r0, [pc, #84]	@ (800526c <HAL_UART_MspInit+0x288>)
 8005216:	f001 fa8d 	bl	8006734 <HAL_DMA_Init>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8005220:	f7fe fe72 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a11      	ldr	r2, [pc, #68]	@ (800526c <HAL_UART_MspInit+0x288>)
 8005228:	63da      	str	r2, [r3, #60]	@ 0x3c
 800522a:	4a10      	ldr	r2, [pc, #64]	@ (800526c <HAL_UART_MspInit+0x288>)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005230:	2200      	movs	r2, #0
 8005232:	2105      	movs	r1, #5
 8005234:	2027      	movs	r0, #39	@ 0x27
 8005236:	f001 fa46 	bl	80066c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800523a:	2027      	movs	r0, #39	@ 0x27
 800523c:	f001 fa5f 	bl	80066fe <HAL_NVIC_EnableIRQ>
}
 8005240:	e0b1      	b.n	80053a6 <HAL_UART_MspInit+0x3c2>
 8005242:	bf00      	nop
 8005244:	40011000 	.word	0x40011000
 8005248:	40023800 	.word	0x40023800
 800524c:	40020400 	.word	0x40020400
 8005250:	40020000 	.word	0x40020000
 8005254:	20000d44 	.word	0x20000d44
 8005258:	400264b8 	.word	0x400264b8
 800525c:	20000da4 	.word	0x20000da4
 8005260:	40026440 	.word	0x40026440
 8005264:	40004800 	.word	0x40004800
 8005268:	40020800 	.word	0x40020800
 800526c:	20000e04 	.word	0x20000e04
 8005270:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a4d      	ldr	r2, [pc, #308]	@ (80053b0 <HAL_UART_MspInit+0x3cc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	f040 8093 	bne.w	80053a6 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	4b4b      	ldr	r3, [pc, #300]	@ (80053b4 <HAL_UART_MspInit+0x3d0>)
 8005286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005288:	4a4a      	ldr	r2, [pc, #296]	@ (80053b4 <HAL_UART_MspInit+0x3d0>)
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005290:	4b48      	ldr	r3, [pc, #288]	@ (80053b4 <HAL_UART_MspInit+0x3d0>)
 8005292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800529c:	2300      	movs	r3, #0
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	4b44      	ldr	r3, [pc, #272]	@ (80053b4 <HAL_UART_MspInit+0x3d0>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a4:	4a43      	ldr	r2, [pc, #268]	@ (80053b4 <HAL_UART_MspInit+0x3d0>)
 80052a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80052ac:	4b41      	ldr	r3, [pc, #260]	@ (80053b4 <HAL_UART_MspInit+0x3d0>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80052b8:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c6:	2303      	movs	r3, #3
 80052c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80052ca:	2308      	movs	r3, #8
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80052ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052d2:	4619      	mov	r1, r3
 80052d4:	4838      	ldr	r0, [pc, #224]	@ (80053b8 <HAL_UART_MspInit+0x3d4>)
 80052d6:	f001 fe2f 	bl	8006f38 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80052da:	4b38      	ldr	r3, [pc, #224]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 80052dc:	4a38      	ldr	r2, [pc, #224]	@ (80053c0 <HAL_UART_MspInit+0x3dc>)
 80052de:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80052e0:	4b36      	ldr	r3, [pc, #216]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 80052e2:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80052e6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052e8:	4b34      	ldr	r3, [pc, #208]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052ee:	4b33      	ldr	r3, [pc, #204]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052f4:	4b31      	ldr	r3, [pc, #196]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 80052f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052fa:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052fc:	4b2f      	ldr	r3, [pc, #188]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 80052fe:	2200      	movs	r2, #0
 8005300:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005302:	4b2e      	ldr	r3, [pc, #184]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8005308:	4b2c      	ldr	r3, [pc, #176]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 800530a:	2200      	movs	r2, #0
 800530c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800530e:	4b2b      	ldr	r3, [pc, #172]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 8005310:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005314:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005316:	4b29      	ldr	r3, [pc, #164]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 8005318:	2200      	movs	r2, #0
 800531a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800531c:	4827      	ldr	r0, [pc, #156]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 800531e:	f001 fa09 	bl	8006734 <HAL_DMA_Init>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_UART_MspInit+0x348>
      Error_Handler();
 8005328:	f7fe fdee 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a23      	ldr	r2, [pc, #140]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 8005330:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005332:	4a22      	ldr	r2, [pc, #136]	@ (80053bc <HAL_UART_MspInit+0x3d8>)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005338:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 800533a:	4a23      	ldr	r2, [pc, #140]	@ (80053c8 <HAL_UART_MspInit+0x3e4>)
 800533c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800533e:	4b21      	ldr	r3, [pc, #132]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 8005340:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005344:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005346:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 8005348:	2240      	movs	r2, #64	@ 0x40
 800534a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800534c:	4b1d      	ldr	r3, [pc, #116]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 800534e:	2200      	movs	r2, #0
 8005350:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005352:	4b1c      	ldr	r3, [pc, #112]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 8005354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005358:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800535a:	4b1a      	ldr	r3, [pc, #104]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 800535c:	2200      	movs	r2, #0
 800535e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005360:	4b18      	ldr	r3, [pc, #96]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8005366:	4b17      	ldr	r3, [pc, #92]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 8005368:	2200      	movs	r2, #0
 800536a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800536c:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 800536e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005372:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005374:	4b13      	ldr	r3, [pc, #76]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 8005376:	2200      	movs	r2, #0
 8005378:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800537a:	4812      	ldr	r0, [pc, #72]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 800537c:	f001 f9da 	bl	8006734 <HAL_DMA_Init>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8005386:	f7fe fdbf 	bl	8003f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a0d      	ldr	r2, [pc, #52]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 800538e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005390:	4a0c      	ldr	r2, [pc, #48]	@ (80053c4 <HAL_UART_MspInit+0x3e0>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005396:	2200      	movs	r2, #0
 8005398:	2105      	movs	r1, #5
 800539a:	2047      	movs	r0, #71	@ 0x47
 800539c:	f001 f993 	bl	80066c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80053a0:	2047      	movs	r0, #71	@ 0x47
 80053a2:	f001 f9ac 	bl	80066fe <HAL_NVIC_EnableIRQ>
}
 80053a6:	bf00      	nop
 80053a8:	3738      	adds	r7, #56	@ 0x38
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40011400 	.word	0x40011400
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40021800 	.word	0x40021800
 80053bc:	20000e64 	.word	0x20000e64
 80053c0:	40026428 	.word	0x40026428
 80053c4:	20000ec4 	.word	0x20000ec4
 80053c8:	400264a0 	.word	0x400264a0

080053cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80053d0:	f003 fc08 	bl	8008be4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <NMI_Handler+0x8>

080053d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <HardFault_Handler+0x4>

080053e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <MemManage_Handler+0x4>

080053e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <BusFault_Handler+0x4>

080053f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <UsageFault_Handler+0x4>

080053f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800540a:	f000 f9d5 	bl	80057b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800540e:	f007 ff3d 	bl	800d28c <xTaskGetSchedulerState>
 8005412:	4603      	mov	r3, r0
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005418:	f008 fe16 	bl	800e048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800541c:	bf00      	nop
 800541e:	bd80      	pop	{r7, pc}

08005420 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005424:	2008      	movs	r0, #8
 8005426:	f001 ff3d 	bl	80072a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 800542a:	4802      	ldr	r0, [pc, #8]	@ (8005434 <EXTI3_IRQHandler+0x14>)
 800542c:	f7fd fc34 	bl	8002c98 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8005430:	bf00      	nop
 8005432:	bd80      	pop	{r7, pc}
 8005434:	2000099c 	.word	0x2000099c

08005438 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 800543c:	2010      	movs	r0, #16
 800543e:	f001 ff31 	bl	80072a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800544c:	4802      	ldr	r0, [pc, #8]	@ (8005458 <DMA1_Stream1_IRQHandler+0x10>)
 800544e:	f001 fb09 	bl	8006a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000e04 	.word	0x20000e04

0800545c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005460:	4802      	ldr	r0, [pc, #8]	@ (800546c <CAN1_RX0_IRQHandler+0x10>)
 8005462:	f000 fe25 	bl	80060b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200009a8 	.word	0x200009a8

08005470 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005474:	4802      	ldr	r0, [pc, #8]	@ (8005480 <USART1_IRQHandler+0x10>)
 8005476:	f004 ffb7 	bl	800a3e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000c6c 	.word	0x20000c6c

08005484 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8005488:	4802      	ldr	r0, [pc, #8]	@ (8005494 <DMA1_Stream7_IRQHandler+0x10>)
 800548a:	f001 faeb 	bl	8006a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000c0c 	.word	0x20000c0c

08005498 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800549c:	4802      	ldr	r0, [pc, #8]	@ (80054a8 <DMA2_Stream1_IRQHandler+0x10>)
 800549e:	f001 fae1 	bl	8006a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000e64 	.word	0x20000e64

080054ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80054b0:	4802      	ldr	r0, [pc, #8]	@ (80054bc <DMA2_Stream2_IRQHandler+0x10>)
 80054b2:	f001 fad7 	bl	8006a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000da4 	.word	0x20000da4

080054c0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80054c4:	4802      	ldr	r0, [pc, #8]	@ (80054d0 <CAN2_RX0_IRQHandler+0x10>)
 80054c6:	f000 fdf3 	bl	80060b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200009d0 	.word	0x200009d0

080054d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80054d8:	4802      	ldr	r0, [pc, #8]	@ (80054e4 <DMA2_Stream6_IRQHandler+0x10>)
 80054da:	f001 fac3 	bl	8006a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000ec4 	.word	0x20000ec4

080054e8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80054ec:	4802      	ldr	r0, [pc, #8]	@ (80054f8 <DMA2_Stream7_IRQHandler+0x10>)
 80054ee:	f001 fab9 	bl	8006a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000d44 	.word	0x20000d44

080054fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005500:	4802      	ldr	r0, [pc, #8]	@ (800550c <USART6_IRQHandler+0x10>)
 8005502:	f004 ff71 	bl	800a3e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000cfc 	.word	0x20000cfc

08005510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return 1;
 8005514:	2301      	movs	r3, #1
}
 8005516:	4618      	mov	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <_kill>:

int _kill(int pid, int sig)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800552a:	f009 fda9 	bl	800f080 <__errno>
 800552e:	4603      	mov	r3, r0
 8005530:	2216      	movs	r2, #22
 8005532:	601a      	str	r2, [r3, #0]
  return -1;
 8005534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <_exit>:

void _exit (int status)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ffe7 	bl	8005520 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <_exit+0x12>

08005556 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e00a      	b.n	800557e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005568:	f3af 8000 	nop.w
 800556c:	4601      	mov	r1, r0
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	60ba      	str	r2, [r7, #8]
 8005574:	b2ca      	uxtb	r2, r1
 8005576:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3301      	adds	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	dbf0      	blt.n	8005568 <_read+0x12>
  }

  return len;
 8005586:	687b      	ldr	r3, [r7, #4]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e009      	b.n	80055b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	60ba      	str	r2, [r7, #8]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3301      	adds	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	dbf1      	blt.n	80055a2 <_write+0x12>
  }
  return len;
 80055be:	687b      	ldr	r3, [r7, #4]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_close>:

int _close(int file)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80055f0:	605a      	str	r2, [r3, #4]
  return 0;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_isatty>:

int _isatty(int file)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005608:	2301      	movs	r3, #1
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005638:	4a14      	ldr	r2, [pc, #80]	@ (800568c <_sbrk+0x5c>)
 800563a:	4b15      	ldr	r3, [pc, #84]	@ (8005690 <_sbrk+0x60>)
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005644:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <_sbrk+0x64>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800564c:	4b11      	ldr	r3, [pc, #68]	@ (8005694 <_sbrk+0x64>)
 800564e:	4a12      	ldr	r2, [pc, #72]	@ (8005698 <_sbrk+0x68>)
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005652:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <_sbrk+0x64>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4413      	add	r3, r2
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d207      	bcs.n	8005670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005660:	f009 fd0e 	bl	800f080 <__errno>
 8005664:	4603      	mov	r3, r0
 8005666:	220c      	movs	r2, #12
 8005668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800566e:	e009      	b.n	8005684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005670:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <_sbrk+0x64>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005676:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <_sbrk+0x64>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	4a05      	ldr	r2, [pc, #20]	@ (8005694 <_sbrk+0x64>)
 8005680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005682:	68fb      	ldr	r3, [r7, #12]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20020000 	.word	0x20020000
 8005690:	00000400 	.word	0x00000400
 8005694:	20000fc0 	.word	0x20000fc0
 8005698:	20005b00 	.word	0x20005b00

0800569c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056a0:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <SystemInit+0x20>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	4a05      	ldr	r2, [pc, #20]	@ (80056bc <SystemInit+0x20>)
 80056a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000ed00 	.word	0xe000ed00

080056c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80056c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056c4:	480d      	ldr	r0, [pc, #52]	@ (80056fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80056c6:	490e      	ldr	r1, [pc, #56]	@ (8005700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056cc:	e002      	b.n	80056d4 <LoopCopyDataInit>

080056ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056d2:	3304      	adds	r3, #4

080056d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056d8:	d3f9      	bcc.n	80056ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056da:	4a0b      	ldr	r2, [pc, #44]	@ (8005708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056dc:	4c0b      	ldr	r4, [pc, #44]	@ (800570c <LoopFillZerobss+0x26>)
  movs r3, #0
 80056de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056e0:	e001      	b.n	80056e6 <LoopFillZerobss>

080056e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056e4:	3204      	adds	r2, #4

080056e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056e8:	d3fb      	bcc.n	80056e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056ea:	f7ff ffd7 	bl	800569c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ee:	f009 fccd 	bl	800f08c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056f2:	f7fd fbf1 	bl	8002ed8 <main>
  bx  lr    
 80056f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80056f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005700:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8005704:	080118a0 	.word	0x080118a0
  ldr r2, =_sbss
 8005708:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 800570c:	20005afc 	.word	0x20005afc

08005710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005710:	e7fe      	b.n	8005710 <ADC_IRQHandler>
	...

08005714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005718:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <HAL_Init+0x40>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a0d      	ldr	r2, [pc, #52]	@ (8005754 <HAL_Init+0x40>)
 800571e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005724:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <HAL_Init+0x40>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a0a      	ldr	r2, [pc, #40]	@ (8005754 <HAL_Init+0x40>)
 800572a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800572e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005730:	4b08      	ldr	r3, [pc, #32]	@ (8005754 <HAL_Init+0x40>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a07      	ldr	r2, [pc, #28]	@ (8005754 <HAL_Init+0x40>)
 8005736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800573a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800573c:	2003      	movs	r0, #3
 800573e:	f000 ffb7 	bl	80066b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005742:	200f      	movs	r0, #15
 8005744:	f000 f808 	bl	8005758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005748:	f7ff f8ea 	bl	8004920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40023c00 	.word	0x40023c00

08005758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005760:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <HAL_InitTick+0x54>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <HAL_InitTick+0x58>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	4619      	mov	r1, r3
 800576a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800576e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	4618      	mov	r0, r3
 8005778:	f000 ffcf 	bl	800671a <HAL_SYSTICK_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e00e      	b.n	80057a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b0f      	cmp	r3, #15
 800578a:	d80a      	bhi.n	80057a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800578c:	2200      	movs	r2, #0
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005794:	f000 ff97 	bl	80066c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005798:	4a06      	ldr	r2, [pc, #24]	@ (80057b4 <HAL_InitTick+0x5c>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e000      	b.n	80057a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	20000108 	.word	0x20000108
 80057b0:	20000110 	.word	0x20000110
 80057b4:	2000010c 	.word	0x2000010c

080057b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057bc:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <HAL_IncTick+0x20>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <HAL_IncTick+0x24>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4413      	add	r3, r2
 80057c8:	4a04      	ldr	r2, [pc, #16]	@ (80057dc <HAL_IncTick+0x24>)
 80057ca:	6013      	str	r3, [r2, #0]
}
 80057cc:	bf00      	nop
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000110 	.word	0x20000110
 80057dc:	20000fc4 	.word	0x20000fc4

080057e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return uwTick;
 80057e4:	4b03      	ldr	r3, [pc, #12]	@ (80057f4 <HAL_GetTick+0x14>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000fc4 	.word	0x20000fc4

080057f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005800:	f7ff ffee 	bl	80057e0 <HAL_GetTick>
 8005804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005810:	d005      	beq.n	800581e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005812:	4b0a      	ldr	r3, [pc, #40]	@ (800583c <HAL_Delay+0x44>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800581e:	bf00      	nop
 8005820:	f7ff ffde 	bl	80057e0 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	429a      	cmp	r2, r3
 800582e:	d8f7      	bhi.n	8005820 <HAL_Delay+0x28>
  {
  }
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000110 	.word	0x20000110

08005840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e0ed      	b.n	8005a2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff f88a 	bl	8004978 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005874:	f7ff ffb4 	bl	80057e0 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800587a:	e012      	b.n	80058a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800587c:	f7ff ffb0 	bl	80057e0 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b0a      	cmp	r3, #10
 8005888:	d90b      	bls.n	80058a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2205      	movs	r2, #5
 800589a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0c5      	b.n	8005a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0e5      	beq.n	800587c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0202 	bic.w	r2, r2, #2
 80058be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058c0:	f7ff ff8e 	bl	80057e0 <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058c6:	e012      	b.n	80058ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80058c8:	f7ff ff8a 	bl	80057e0 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b0a      	cmp	r3, #10
 80058d4:	d90b      	bls.n	80058ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2205      	movs	r2, #5
 80058e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e09f      	b.n	8005a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e5      	bne.n	80058c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7e1b      	ldrb	r3, [r3, #24]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d108      	bne.n	8005916 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e007      	b.n	8005926 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	7e5b      	ldrb	r3, [r3, #25]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d108      	bne.n	8005940 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e007      	b.n	8005950 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7e9b      	ldrb	r3, [r3, #26]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d108      	bne.n	800596a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0220 	orr.w	r2, r2, #32
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e007      	b.n	800597a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0220 	bic.w	r2, r2, #32
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	7edb      	ldrb	r3, [r3, #27]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d108      	bne.n	8005994 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0210 	bic.w	r2, r2, #16
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	e007      	b.n	80059a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0210 	orr.w	r2, r2, #16
 80059a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	7f1b      	ldrb	r3, [r3, #28]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d108      	bne.n	80059be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0208 	orr.w	r2, r2, #8
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e007      	b.n	80059ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0208 	bic.w	r2, r2, #8
 80059cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	7f5b      	ldrb	r3, [r3, #29]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d108      	bne.n	80059e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0204 	orr.w	r2, r2, #4
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e007      	b.n	80059f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0204 	bic.w	r2, r2, #4
 80059f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	ea42 0103 	orr.w	r1, r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	1e5a      	subs	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d003      	beq.n	8005a5e <HAL_CAN_ConfigFilter+0x26>
 8005a56:	7cfb      	ldrb	r3, [r7, #19]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	f040 80be 	bne.w	8005bda <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005a5e:	4b65      	ldr	r3, [pc, #404]	@ (8005bf4 <HAL_CAN_ConfigFilter+0x1bc>)
 8005a60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a68:	f043 0201 	orr.w	r2, r3, #1
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a78:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d123      	bne.n	8005b08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	401a      	ands	r2, r3
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005ae2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	3248      	adds	r2, #72	@ 0x48
 8005ae8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005afc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	3348      	adds	r3, #72	@ 0x48
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	440b      	add	r3, r1
 8005b06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d122      	bne.n	8005b56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005b30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	3248      	adds	r2, #72	@ 0x48
 8005b36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b4c:	6979      	ldr	r1, [r7, #20]
 8005b4e:	3348      	adds	r3, #72	@ 0x48
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	440b      	add	r3, r1
 8005b54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	43db      	mvns	r3, r3
 8005b68:	401a      	ands	r2, r3
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005b70:	e007      	b.n	8005b82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	43db      	mvns	r3, r3
 8005b94:	401a      	ands	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005b9c:	e007      	b.n	8005bae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d107      	bne.n	8005bc6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005bcc:	f023 0201 	bic.w	r2, r3, #1
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e006      	b.n	8005be8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40006400 	.word	0x40006400

08005bf8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d12e      	bne.n	8005c6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c24:	f7ff fddc 	bl	80057e0 <HAL_GetTick>
 8005c28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c2a:	e012      	b.n	8005c52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005c2c:	f7ff fdd8 	bl	80057e0 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b0a      	cmp	r3, #10
 8005c38:	d90b      	bls.n	8005c52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2205      	movs	r2, #5
 8005c4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e012      	b.n	8005c78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e006      	b.n	8005c78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b089      	sub	sp, #36	@ 0x24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d003      	beq.n	8005cac <HAL_CAN_AddTxMessage+0x2c>
 8005ca4:	7ffb      	ldrb	r3, [r7, #31]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	f040 80ad 	bne.w	8005e06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8095 	beq.w	8005df6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	0e1b      	lsrs	r3, r3, #24
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10d      	bne.n	8005d04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	6809      	ldr	r1, [r1, #0]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3318      	adds	r3, #24
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	440b      	add	r3, r1
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e00f      	b.n	8005d24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d14:	68f9      	ldr	r1, [r7, #12]
 8005d16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005d18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	440b      	add	r3, r1
 8005d22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6819      	ldr	r1, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	3318      	adds	r3, #24
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	440b      	add	r3, r1
 8005d34:	3304      	adds	r3, #4
 8005d36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	7d1b      	ldrb	r3, [r3, #20]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d111      	bne.n	8005d64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3318      	adds	r3, #24
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	6811      	ldr	r1, [r2, #0]
 8005d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3318      	adds	r3, #24
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	440b      	add	r3, r1
 8005d60:	3304      	adds	r3, #4
 8005d62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3307      	adds	r3, #7
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	061a      	lsls	r2, r3, #24
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3306      	adds	r3, #6
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	041b      	lsls	r3, r3, #16
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3305      	adds	r3, #5
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	3204      	adds	r2, #4
 8005d84:	7812      	ldrb	r2, [r2, #0]
 8005d86:	4610      	mov	r0, r2
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	6811      	ldr	r1, [r2, #0]
 8005d8c:	ea43 0200 	orr.w	r2, r3, r0
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	440b      	add	r3, r1
 8005d96:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005d9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3303      	adds	r3, #3
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	061a      	lsls	r2, r3, #24
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3302      	adds	r3, #2
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3301      	adds	r3, #1
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	4313      	orrs	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	6811      	ldr	r1, [r2, #0]
 8005dc2:	ea43 0200 	orr.w	r2, r3, r0
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	440b      	add	r3, r1
 8005dcc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005dd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	3318      	adds	r3, #24
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	4413      	add	r3, r2
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	6811      	ldr	r1, [r2, #0]
 8005de4:	f043 0201 	orr.w	r2, r3, #1
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3318      	adds	r3, #24
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	440b      	add	r3, r1
 8005df0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e00e      	b.n	8005e14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e006      	b.n	8005e14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3724      	adds	r7, #36	@ 0x24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d003      	beq.n	8005e44 <HAL_CAN_GetRxMessage+0x24>
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	f040 8103 	bne.w	800604a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d116      	bne.n	8005e86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0f7      	b.n	8006058 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d107      	bne.n	8005e86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e0e8      	b.n	8006058 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	331b      	adds	r3, #27
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	4413      	add	r3, r2
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0204 	and.w	r2, r3, #4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	331b      	adds	r3, #27
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	0d5b      	lsrs	r3, r3, #21
 8005eb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	e00b      	b.n	8005ed6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	331b      	adds	r3, #27
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	4413      	add	r3, r2
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	331b      	adds	r3, #27
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	4413      	add	r3, r2
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0202 	and.w	r2, r3, #2
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	331b      	adds	r3, #27
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2208      	movs	r2, #8
 8005f08:	611a      	str	r2, [r3, #16]
 8005f0a:	e00b      	b.n	8005f24 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	331b      	adds	r3, #27
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	4413      	add	r3, r2
 8005f18:	3304      	adds	r3, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 020f 	and.w	r2, r3, #15
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	331b      	adds	r3, #27
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	4413      	add	r3, r2
 8005f30:	3304      	adds	r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	331b      	adds	r3, #27
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	4413      	add	r3, r2
 8005f48:	3304      	adds	r3, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	0a1a      	lsrs	r2, r3, #8
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	0c1a      	lsrs	r2, r3, #16
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	3302      	adds	r3, #2
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	0e1a      	lsrs	r2, r3, #24
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	3303      	adds	r3, #3
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	0a1a      	lsrs	r2, r3, #8
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	3305      	adds	r3, #5
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	0c1a      	lsrs	r2, r3, #16
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3306      	adds	r3, #6
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	4413      	add	r3, r2
 800600e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	0e1a      	lsrs	r2, r3, #24
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	3307      	adds	r3, #7
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d108      	bne.n	8006036 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0220 	orr.w	r2, r2, #32
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	e007      	b.n	8006046 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0220 	orr.w	r2, r2, #32
 8006044:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	e006      	b.n	8006058 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006074:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d002      	beq.n	8006082 <HAL_CAN_ActivateNotification+0x1e>
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d109      	bne.n	8006096 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6959      	ldr	r1, [r3, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	e006      	b.n	80060a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	@ 0x28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d07c      	beq.n	80061f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d023      	beq.n	8006148 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f983 	bl	800641e <HAL_CAN_TxMailbox0CompleteCallback>
 8006118:	e016      	b.n	8006148 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
 800612c:	e00c      	b.n	8006148 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006140:	e002      	b.n	8006148 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f989 	bl	800645a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d024      	beq.n	800619c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800615a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f963 	bl	8006432 <HAL_CAN_TxMailbox1CompleteCallback>
 800616c:	e016      	b.n	800619c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006174:	2b00      	cmp	r3, #0
 8006176:	d004      	beq.n	8006182 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800617e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006180:	e00c      	b.n	800619c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24
 8006194:	e002      	b.n	800619c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f969 	bl	800646e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d024      	beq.n	80061f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80061ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f943 	bl	8006446 <HAL_CAN_TxMailbox2CompleteCallback>
 80061c0:	e016      	b.n	80061f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80061cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d4:	e00c      	b.n	80061f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e8:	e002      	b.n	80061f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f949 	bl	8006482 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2210      	movs	r2, #16
 8006212:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d006      	beq.n	8006236 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2208      	movs	r2, #8
 800622e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f930 	bl	8006496 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb f974 	bl	800153c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00c      	beq.n	8006278 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800626e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2210      	movs	r2, #16
 8006276:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d006      	beq.n	800629a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2208      	movs	r2, #8
 8006292:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f912 	bl	80064be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f8f9 	bl	80064aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d006      	beq.n	80062da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2210      	movs	r2, #16
 80062d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f8fc 	bl	80064d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2208      	movs	r2, #8
 80062f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f8f5 	bl	80064e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d07b      	beq.n	80063fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d072      	beq.n	80063f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	f043 0302 	orr.w	r3, r3, #2
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	f043 0304 	orr.w	r3, r3, #4
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800636a:	2b00      	cmp	r3, #0
 800636c:	d043      	beq.n	80063f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006374:	2b00      	cmp	r3, #0
 8006376:	d03e      	beq.n	80063f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800637e:	2b60      	cmp	r3, #96	@ 0x60
 8006380:	d02b      	beq.n	80063da <HAL_CAN_IRQHandler+0x32a>
 8006382:	2b60      	cmp	r3, #96	@ 0x60
 8006384:	d82e      	bhi.n	80063e4 <HAL_CAN_IRQHandler+0x334>
 8006386:	2b50      	cmp	r3, #80	@ 0x50
 8006388:	d022      	beq.n	80063d0 <HAL_CAN_IRQHandler+0x320>
 800638a:	2b50      	cmp	r3, #80	@ 0x50
 800638c:	d82a      	bhi.n	80063e4 <HAL_CAN_IRQHandler+0x334>
 800638e:	2b40      	cmp	r3, #64	@ 0x40
 8006390:	d019      	beq.n	80063c6 <HAL_CAN_IRQHandler+0x316>
 8006392:	2b40      	cmp	r3, #64	@ 0x40
 8006394:	d826      	bhi.n	80063e4 <HAL_CAN_IRQHandler+0x334>
 8006396:	2b30      	cmp	r3, #48	@ 0x30
 8006398:	d010      	beq.n	80063bc <HAL_CAN_IRQHandler+0x30c>
 800639a:	2b30      	cmp	r3, #48	@ 0x30
 800639c:	d822      	bhi.n	80063e4 <HAL_CAN_IRQHandler+0x334>
 800639e:	2b10      	cmp	r3, #16
 80063a0:	d002      	beq.n	80063a8 <HAL_CAN_IRQHandler+0x2f8>
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d005      	beq.n	80063b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80063a6:	e01d      	b.n	80063e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	f043 0308 	orr.w	r3, r3, #8
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80063b0:	e019      	b.n	80063e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	f043 0310 	orr.w	r3, r3, #16
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80063ba:	e014      	b.n	80063e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	f043 0320 	orr.w	r3, r3, #32
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80063c4:	e00f      	b.n	80063e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80063ce:	e00a      	b.n	80063e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80063d8:	e005      	b.n	80063e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80063e2:	e000      	b.n	80063e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80063e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80063f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2204      	movs	r2, #4
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f872 	bl	80064fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006416:	bf00      	nop
 8006418:	3728      	adds	r7, #40	@ 0x28
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
	...

08006510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006520:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <__NVIC_SetPriorityGrouping+0x44>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800652c:	4013      	ands	r3, r2
 800652e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800653c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006542:	4a04      	ldr	r2, [pc, #16]	@ (8006554 <__NVIC_SetPriorityGrouping+0x44>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	60d3      	str	r3, [r2, #12]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	e000ed00 	.word	0xe000ed00

08006558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800655c:	4b04      	ldr	r3, [pc, #16]	@ (8006570 <__NVIC_GetPriorityGrouping+0x18>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	f003 0307 	and.w	r3, r3, #7
}
 8006566:	4618      	mov	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	e000ed00 	.word	0xe000ed00

08006574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	2b00      	cmp	r3, #0
 8006584:	db0b      	blt.n	800659e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	f003 021f 	and.w	r2, r3, #31
 800658c:	4907      	ldr	r1, [pc, #28]	@ (80065ac <__NVIC_EnableIRQ+0x38>)
 800658e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	2001      	movs	r0, #1
 8006596:	fa00 f202 	lsl.w	r2, r0, r2
 800659a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e000e100 	.word	0xe000e100

080065b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	db0a      	blt.n	80065da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	490c      	ldr	r1, [pc, #48]	@ (80065fc <__NVIC_SetPriority+0x4c>)
 80065ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ce:	0112      	lsls	r2, r2, #4
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	440b      	add	r3, r1
 80065d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065d8:	e00a      	b.n	80065f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	4908      	ldr	r1, [pc, #32]	@ (8006600 <__NVIC_SetPriority+0x50>)
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	3b04      	subs	r3, #4
 80065e8:	0112      	lsls	r2, r2, #4
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	440b      	add	r3, r1
 80065ee:	761a      	strb	r2, [r3, #24]
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	e000e100 	.word	0xe000e100
 8006600:	e000ed00 	.word	0xe000ed00

08006604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006604:	b480      	push	{r7}
 8006606:	b089      	sub	sp, #36	@ 0x24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f1c3 0307 	rsb	r3, r3, #7
 800661e:	2b04      	cmp	r3, #4
 8006620:	bf28      	it	cs
 8006622:	2304      	movcs	r3, #4
 8006624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3304      	adds	r3, #4
 800662a:	2b06      	cmp	r3, #6
 800662c:	d902      	bls.n	8006634 <NVIC_EncodePriority+0x30>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	3b03      	subs	r3, #3
 8006632:	e000      	b.n	8006636 <NVIC_EncodePriority+0x32>
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006638:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	fa02 f303 	lsl.w	r3, r2, r3
 8006642:	43da      	mvns	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	401a      	ands	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800664c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	43d9      	mvns	r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800665c:	4313      	orrs	r3, r2
         );
}
 800665e:	4618      	mov	r0, r3
 8006660:	3724      	adds	r7, #36	@ 0x24
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3b01      	subs	r3, #1
 8006678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800667c:	d301      	bcc.n	8006682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800667e:	2301      	movs	r3, #1
 8006680:	e00f      	b.n	80066a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006682:	4a0a      	ldr	r2, [pc, #40]	@ (80066ac <SysTick_Config+0x40>)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3b01      	subs	r3, #1
 8006688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800668a:	210f      	movs	r1, #15
 800668c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006690:	f7ff ff8e 	bl	80065b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006694:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <SysTick_Config+0x40>)
 8006696:	2200      	movs	r2, #0
 8006698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800669a:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <SysTick_Config+0x40>)
 800669c:	2207      	movs	r2, #7
 800669e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	e000e010 	.word	0xe000e010

080066b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff29 	bl	8006510 <__NVIC_SetPriorityGrouping>
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b086      	sub	sp, #24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	4603      	mov	r3, r0
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066d8:	f7ff ff3e 	bl	8006558 <__NVIC_GetPriorityGrouping>
 80066dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	6978      	ldr	r0, [r7, #20]
 80066e4:	f7ff ff8e 	bl	8006604 <NVIC_EncodePriority>
 80066e8:	4602      	mov	r2, r0
 80066ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff ff5d 	bl	80065b0 <__NVIC_SetPriority>
}
 80066f6:	bf00      	nop
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	4603      	mov	r3, r0
 8006706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ff31 	bl	8006574 <__NVIC_EnableIRQ>
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff ffa2 	bl	800666c <SysTick_Config>
 8006728:	4603      	mov	r3, r0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006740:	f7ff f84e 	bl	80057e0 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e099      	b.n	8006884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0201 	bic.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006770:	e00f      	b.n	8006792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006772:	f7ff f835 	bl	80057e0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b05      	cmp	r3, #5
 800677e:	d908      	bls.n	8006792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2203      	movs	r2, #3
 800678a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e078      	b.n	8006884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e8      	bne.n	8006772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4b38      	ldr	r3, [pc, #224]	@ (800688c <HAL_DMA_Init+0x158>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685a      	ldr	r2, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d107      	bne.n	80067fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	4313      	orrs	r3, r2
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006822:	2b04      	cmp	r3, #4
 8006824:	d117      	bne.n	8006856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00e      	beq.n	8006856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fb01 	bl	8006e40 <DMA_CheckFifoParam>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2240      	movs	r2, #64	@ 0x40
 8006848:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006852:	2301      	movs	r3, #1
 8006854:	e016      	b.n	8006884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fab8 	bl	8006dd4 <DMA_CalcBaseAndBitshift>
 8006864:	4603      	mov	r3, r0
 8006866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686c:	223f      	movs	r2, #63	@ 0x3f
 800686e:	409a      	lsls	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	f010803f 	.word	0xf010803f

08006890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_DMA_Start_IT+0x26>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e040      	b.n	8006938 <HAL_DMA_Start_IT+0xa8>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d12f      	bne.n	800692a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fa4a 	bl	8006d78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e8:	223f      	movs	r2, #63	@ 0x3f
 80068ea:	409a      	lsls	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0216 	orr.w	r2, r2, #22
 80068fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	e005      	b.n	8006936 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006932:	2302      	movs	r3, #2
 8006934:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800694c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800694e:	f7fe ff47 	bl	80057e0 <HAL_GetTick>
 8006952:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d008      	beq.n	8006972 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2280      	movs	r2, #128	@ 0x80
 8006964:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e052      	b.n	8006a18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0216 	bic.w	r2, r2, #22
 8006980:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695a      	ldr	r2, [r3, #20]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006990:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <HAL_DMA_Abort+0x62>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0208 	bic.w	r2, r2, #8
 80069b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0201 	bic.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069c2:	e013      	b.n	80069ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069c4:	f7fe ff0c 	bl	80057e0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b05      	cmp	r3, #5
 80069d0:	d90c      	bls.n	80069ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2203      	movs	r2, #3
 80069dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e015      	b.n	8006a18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e4      	bne.n	80069c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fe:	223f      	movs	r2, #63	@ 0x3f
 8006a00:	409a      	lsls	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d004      	beq.n	8006a3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2280      	movs	r2, #128	@ 0x80
 8006a38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00c      	b.n	8006a58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2205      	movs	r2, #5
 8006a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a70:	4b8e      	ldr	r3, [pc, #568]	@ (8006cac <HAL_DMA_IRQHandler+0x248>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a8e      	ldr	r2, [pc, #568]	@ (8006cb0 <HAL_DMA_IRQHandler+0x24c>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	0a9b      	lsrs	r3, r3, #10
 8006a7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8e:	2208      	movs	r2, #8
 8006a90:	409a      	lsls	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01a      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d013      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0204 	bic.w	r2, r2, #4
 8006ab6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abc:	2208      	movs	r2, #8
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	f043 0201 	orr.w	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d012      	beq.n	8006b06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af2:	2201      	movs	r2, #1
 8006af4:	409a      	lsls	r2, r3
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f043 0202 	orr.w	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d012      	beq.n	8006b3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b28:	2204      	movs	r2, #4
 8006b2a:	409a      	lsls	r2, r3
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b34:	f043 0204 	orr.w	r2, r3, #4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b40:	2210      	movs	r2, #16
 8006b42:	409a      	lsls	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d043      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d03c      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b5e:	2210      	movs	r2, #16
 8006b60:	409a      	lsls	r2, r3
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d018      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d108      	bne.n	8006b94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d024      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
 8006b92:	e01f      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01b      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
 8006ba4:	e016      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0208 	bic.w	r2, r2, #8
 8006bc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd8:	2220      	movs	r2, #32
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 808f 	beq.w	8006d04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8087 	beq.w	8006d04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	409a      	lsls	r2, r3
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d136      	bne.n	8006c7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0216 	bic.w	r2, r2, #22
 8006c1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695a      	ldr	r2, [r3, #20]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <HAL_DMA_IRQHandler+0x1da>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0208 	bic.w	r2, r2, #8
 8006c4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c52:	223f      	movs	r2, #63	@ 0x3f
 8006c54:	409a      	lsls	r2, r3
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d07e      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
        }
        return;
 8006c7a:	e079      	b.n	8006d70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01d      	beq.n	8006cc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10d      	bne.n	8006cb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d031      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
 8006ca8:	e02c      	b.n	8006d04 <HAL_DMA_IRQHandler+0x2a0>
 8006caa:	bf00      	nop
 8006cac:	20000108 	.word	0x20000108
 8006cb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d023      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
 8006cc4:	e01e      	b.n	8006d04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0210 	bic.w	r2, r2, #16
 8006ce2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d032      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d022      	beq.n	8006d5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2205      	movs	r2, #5
 8006d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d307      	bcc.n	8006d4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f2      	bne.n	8006d30 <HAL_DMA_IRQHandler+0x2cc>
 8006d4a:	e000      	b.n	8006d4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006d4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
 8006d6e:	e000      	b.n	8006d72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006d70:	bf00      	nop
    }
  }
}
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d108      	bne.n	8006db8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006db6:	e007      	b.n	8006dc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	3b10      	subs	r3, #16
 8006de4:	4a14      	ldr	r2, [pc, #80]	@ (8006e38 <DMA_CalcBaseAndBitshift+0x64>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	091b      	lsrs	r3, r3, #4
 8006dec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006dee:	4a13      	ldr	r2, [pc, #76]	@ (8006e3c <DMA_CalcBaseAndBitshift+0x68>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d909      	bls.n	8006e16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	1d1a      	adds	r2, r3, #4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e14:	e007      	b.n	8006e26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	aaaaaaab 	.word	0xaaaaaaab
 8006e3c:	08011514 	.word	0x08011514

08006e40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d11f      	bne.n	8006e9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d856      	bhi.n	8006f0e <DMA_CheckFifoParam+0xce>
 8006e60:	a201      	add	r2, pc, #4	@ (adr r2, 8006e68 <DMA_CheckFifoParam+0x28>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e8b 	.word	0x08006e8b
 8006e70:	08006e79 	.word	0x08006e79
 8006e74:	08006f0f 	.word	0x08006f0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d046      	beq.n	8006f12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e88:	e043      	b.n	8006f12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e92:	d140      	bne.n	8006f16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e98:	e03d      	b.n	8006f16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea2:	d121      	bne.n	8006ee8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d837      	bhi.n	8006f1a <DMA_CheckFifoParam+0xda>
 8006eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb0 <DMA_CheckFifoParam+0x70>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006ec1 	.word	0x08006ec1
 8006eb4:	08006ec7 	.word	0x08006ec7
 8006eb8:	08006ec1 	.word	0x08006ec1
 8006ebc:	08006ed9 	.word	0x08006ed9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec4:	e030      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d025      	beq.n	8006f1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ed6:	e022      	b.n	8006f1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006edc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ee0:	d11f      	bne.n	8006f22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006ee6:	e01c      	b.n	8006f22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d903      	bls.n	8006ef6 <DMA_CheckFifoParam+0xb6>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d003      	beq.n	8006efc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ef4:	e018      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8006efa:	e015      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00e      	beq.n	8006f26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0c:	e00b      	b.n	8006f26 <DMA_CheckFifoParam+0xe6>
      break;
 8006f0e:	bf00      	nop
 8006f10:	e00a      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      break;
 8006f12:	bf00      	nop
 8006f14:	e008      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      break;
 8006f16:	bf00      	nop
 8006f18:	e006      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      break;
 8006f1a:	bf00      	nop
 8006f1c:	e004      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      break;
 8006f1e:	bf00      	nop
 8006f20:	e002      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      break;   
 8006f22:	bf00      	nop
 8006f24:	e000      	b.n	8006f28 <DMA_CheckFifoParam+0xe8>
      break;
 8006f26:	bf00      	nop
    }
  } 
  
  return status; 
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop

08006f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	@ 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	e16b      	b.n	800722c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f54:	2201      	movs	r2, #1
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4013      	ands	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	f040 815a 	bne.w	8007226 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d005      	beq.n	8006f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d130      	bne.n	8006fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	2203      	movs	r2, #3
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	fa02 f303 	lsl.w	r3, r2, r3
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	f003 0201 	and.w	r2, r3, #1
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d017      	beq.n	8007028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	2203      	movs	r2, #3
 8007004:	fa02 f303 	lsl.w	r3, r2, r3
 8007008:	43db      	mvns	r3, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	4013      	ands	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4313      	orrs	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d123      	bne.n	800707c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	08da      	lsrs	r2, r3, #3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3208      	adds	r2, #8
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	220f      	movs	r2, #15
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	4013      	ands	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	4313      	orrs	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	08da      	lsrs	r2, r3, #3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3208      	adds	r2, #8
 8007076:	69b9      	ldr	r1, [r7, #24]
 8007078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	2203      	movs	r2, #3
 8007088:	fa02 f303 	lsl.w	r3, r2, r3
 800708c:	43db      	mvns	r3, r3
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	4013      	ands	r3, r2
 8007092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 0203 	and.w	r2, r3, #3
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 80b4 	beq.w	8007226 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	4b60      	ldr	r3, [pc, #384]	@ (8007244 <HAL_GPIO_Init+0x30c>)
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	4a5f      	ldr	r2, [pc, #380]	@ (8007244 <HAL_GPIO_Init+0x30c>)
 80070c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80070ce:	4b5d      	ldr	r3, [pc, #372]	@ (8007244 <HAL_GPIO_Init+0x30c>)
 80070d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070da:	4a5b      	ldr	r2, [pc, #364]	@ (8007248 <HAL_GPIO_Init+0x310>)
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	089b      	lsrs	r3, r3, #2
 80070e0:	3302      	adds	r3, #2
 80070e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	220f      	movs	r2, #15
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a52      	ldr	r2, [pc, #328]	@ (800724c <HAL_GPIO_Init+0x314>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02b      	beq.n	800715e <HAL_GPIO_Init+0x226>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a51      	ldr	r2, [pc, #324]	@ (8007250 <HAL_GPIO_Init+0x318>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d025      	beq.n	800715a <HAL_GPIO_Init+0x222>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a50      	ldr	r2, [pc, #320]	@ (8007254 <HAL_GPIO_Init+0x31c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01f      	beq.n	8007156 <HAL_GPIO_Init+0x21e>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a4f      	ldr	r2, [pc, #316]	@ (8007258 <HAL_GPIO_Init+0x320>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d019      	beq.n	8007152 <HAL_GPIO_Init+0x21a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a4e      	ldr	r2, [pc, #312]	@ (800725c <HAL_GPIO_Init+0x324>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_GPIO_Init+0x216>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a4d      	ldr	r2, [pc, #308]	@ (8007260 <HAL_GPIO_Init+0x328>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00d      	beq.n	800714a <HAL_GPIO_Init+0x212>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a4c      	ldr	r2, [pc, #304]	@ (8007264 <HAL_GPIO_Init+0x32c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <HAL_GPIO_Init+0x20e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a4b      	ldr	r2, [pc, #300]	@ (8007268 <HAL_GPIO_Init+0x330>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d101      	bne.n	8007142 <HAL_GPIO_Init+0x20a>
 800713e:	2307      	movs	r3, #7
 8007140:	e00e      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007142:	2308      	movs	r3, #8
 8007144:	e00c      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007146:	2306      	movs	r3, #6
 8007148:	e00a      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800714a:	2305      	movs	r3, #5
 800714c:	e008      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800714e:	2304      	movs	r3, #4
 8007150:	e006      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007152:	2303      	movs	r3, #3
 8007154:	e004      	b.n	8007160 <HAL_GPIO_Init+0x228>
 8007156:	2302      	movs	r3, #2
 8007158:	e002      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <HAL_GPIO_Init+0x228>
 800715e:	2300      	movs	r3, #0
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	f002 0203 	and.w	r2, r2, #3
 8007166:	0092      	lsls	r2, r2, #2
 8007168:	4093      	lsls	r3, r2
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4313      	orrs	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007170:	4935      	ldr	r1, [pc, #212]	@ (8007248 <HAL_GPIO_Init+0x310>)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	089b      	lsrs	r3, r3, #2
 8007176:	3302      	adds	r3, #2
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800717e:	4b3b      	ldr	r3, [pc, #236]	@ (800726c <HAL_GPIO_Init+0x334>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	43db      	mvns	r3, r3
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	4013      	ands	r3, r2
 800718c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80071a2:	4a32      	ldr	r2, [pc, #200]	@ (800726c <HAL_GPIO_Init+0x334>)
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80071a8:	4b30      	ldr	r3, [pc, #192]	@ (800726c <HAL_GPIO_Init+0x334>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	43db      	mvns	r3, r3
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	4013      	ands	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d003      	beq.n	80071cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80071cc:	4a27      	ldr	r2, [pc, #156]	@ (800726c <HAL_GPIO_Init+0x334>)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071d2:	4b26      	ldr	r3, [pc, #152]	@ (800726c <HAL_GPIO_Init+0x334>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80071f6:	4a1d      	ldr	r2, [pc, #116]	@ (800726c <HAL_GPIO_Init+0x334>)
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071fc:	4b1b      	ldr	r3, [pc, #108]	@ (800726c <HAL_GPIO_Init+0x334>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	43db      	mvns	r3, r3
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	4013      	ands	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007220:	4a12      	ldr	r2, [pc, #72]	@ (800726c <HAL_GPIO_Init+0x334>)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	3301      	adds	r3, #1
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2b0f      	cmp	r3, #15
 8007230:	f67f ae90 	bls.w	8006f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	3724      	adds	r7, #36	@ 0x24
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40023800 	.word	0x40023800
 8007248:	40013800 	.word	0x40013800
 800724c:	40020000 	.word	0x40020000
 8007250:	40020400 	.word	0x40020400
 8007254:	40020800 	.word	0x40020800
 8007258:	40020c00 	.word	0x40020c00
 800725c:	40021000 	.word	0x40021000
 8007260:	40021400 	.word	0x40021400
 8007264:	40021800 	.word	0x40021800
 8007268:	40021c00 	.word	0x40021c00
 800726c:	40013c00 	.word	0x40013c00

08007270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	807b      	strh	r3, [r7, #2]
 800727c:	4613      	mov	r3, r2
 800727e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007280:	787b      	ldrb	r3, [r7, #1]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007286:	887a      	ldrh	r2, [r7, #2]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800728c:	e003      	b.n	8007296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800728e:	887b      	ldrh	r3, [r7, #2]
 8007290:	041a      	lsls	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	619a      	str	r2, [r3, #24]
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80072ae:	4b08      	ldr	r3, [pc, #32]	@ (80072d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d006      	beq.n	80072c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80072ba:	4a05      	ldr	r2, [pc, #20]	@ (80072d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fb fc40 	bl	8002b48 <HAL_GPIO_EXTI_Callback>
  }
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40013c00 	.word	0x40013c00

080072d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e12b      	b.n	800753e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fd fbec 	bl	8004ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	@ 0x24
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007326:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007336:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007338:	f001 fc2c 	bl	8008b94 <HAL_RCC_GetPCLK1Freq>
 800733c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4a81      	ldr	r2, [pc, #516]	@ (8007548 <HAL_I2C_Init+0x274>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d807      	bhi.n	8007358 <HAL_I2C_Init+0x84>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4a80      	ldr	r2, [pc, #512]	@ (800754c <HAL_I2C_Init+0x278>)
 800734c:	4293      	cmp	r3, r2
 800734e:	bf94      	ite	ls
 8007350:	2301      	movls	r3, #1
 8007352:	2300      	movhi	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e006      	b.n	8007366 <HAL_I2C_Init+0x92>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4a7d      	ldr	r2, [pc, #500]	@ (8007550 <HAL_I2C_Init+0x27c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	bf94      	ite	ls
 8007360:	2301      	movls	r3, #1
 8007362:	2300      	movhi	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e0e7      	b.n	800753e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a78      	ldr	r2, [pc, #480]	@ (8007554 <HAL_I2C_Init+0x280>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	0c9b      	lsrs	r3, r3, #18
 8007378:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	4a6a      	ldr	r2, [pc, #424]	@ (8007548 <HAL_I2C_Init+0x274>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d802      	bhi.n	80073a8 <HAL_I2C_Init+0xd4>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	3301      	adds	r3, #1
 80073a6:	e009      	b.n	80073bc <HAL_I2C_Init+0xe8>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	4a69      	ldr	r2, [pc, #420]	@ (8007558 <HAL_I2C_Init+0x284>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	099b      	lsrs	r3, r3, #6
 80073ba:	3301      	adds	r3, #1
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	430b      	orrs	r3, r1
 80073c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80073ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	495c      	ldr	r1, [pc, #368]	@ (8007548 <HAL_I2C_Init+0x274>)
 80073d8:	428b      	cmp	r3, r1
 80073da:	d819      	bhi.n	8007410 <HAL_I2C_Init+0x13c>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	1e59      	subs	r1, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80073f0:	400b      	ands	r3, r1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <HAL_I2C_Init+0x138>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1e59      	subs	r1, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	fbb1 f3f3 	udiv	r3, r1, r3
 8007404:	3301      	adds	r3, #1
 8007406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800740a:	e051      	b.n	80074b0 <HAL_I2C_Init+0x1dc>
 800740c:	2304      	movs	r3, #4
 800740e:	e04f      	b.n	80074b0 <HAL_I2C_Init+0x1dc>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d111      	bne.n	800743c <HAL_I2C_Init+0x168>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1e58      	subs	r0, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6859      	ldr	r1, [r3, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	440b      	add	r3, r1
 8007426:	fbb0 f3f3 	udiv	r3, r0, r3
 800742a:	3301      	adds	r3, #1
 800742c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf0c      	ite	eq
 8007434:	2301      	moveq	r3, #1
 8007436:	2300      	movne	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	e012      	b.n	8007462 <HAL_I2C_Init+0x18e>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1e58      	subs	r0, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6859      	ldr	r1, [r3, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	0099      	lsls	r1, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007452:	3301      	adds	r3, #1
 8007454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007458:	2b00      	cmp	r3, #0
 800745a:	bf0c      	ite	eq
 800745c:	2301      	moveq	r3, #1
 800745e:	2300      	movne	r3, #0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_I2C_Init+0x196>
 8007466:	2301      	movs	r3, #1
 8007468:	e022      	b.n	80074b0 <HAL_I2C_Init+0x1dc>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10e      	bne.n	8007490 <HAL_I2C_Init+0x1bc>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	1e58      	subs	r0, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	440b      	add	r3, r1
 8007480:	fbb0 f3f3 	udiv	r3, r0, r3
 8007484:	3301      	adds	r3, #1
 8007486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800748e:	e00f      	b.n	80074b0 <HAL_I2C_Init+0x1dc>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	1e58      	subs	r0, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6859      	ldr	r1, [r3, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	0099      	lsls	r1, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80074a6:	3301      	adds	r3, #1
 80074a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	6809      	ldr	r1, [r1, #0]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69da      	ldr	r2, [r3, #28]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80074de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6911      	ldr	r1, [r2, #16]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68d2      	ldr	r2, [r2, #12]
 80074ea:	4311      	orrs	r1, r2
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6812      	ldr	r2, [r2, #0]
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	000186a0 	.word	0x000186a0
 800754c:	001e847f 	.word	0x001e847f
 8007550:	003d08ff 	.word	0x003d08ff
 8007554:	431bde83 	.word	0x431bde83
 8007558:	10624dd3 	.word	0x10624dd3

0800755c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	4608      	mov	r0, r1
 8007566:	4611      	mov	r1, r2
 8007568:	461a      	mov	r2, r3
 800756a:	4603      	mov	r3, r0
 800756c:	817b      	strh	r3, [r7, #10]
 800756e:	460b      	mov	r3, r1
 8007570:	813b      	strh	r3, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007576:	f7fe f933 	bl	80057e0 <HAL_GetTick>
 800757a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b20      	cmp	r3, #32
 8007586:	f040 80d9 	bne.w	800773c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2319      	movs	r3, #25
 8007590:	2201      	movs	r2, #1
 8007592:	496d      	ldr	r1, [pc, #436]	@ (8007748 <HAL_I2C_Mem_Write+0x1ec>)
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fc8b 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
 80075a2:	e0cc      	b.n	800773e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_I2C_Mem_Write+0x56>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e0c5      	b.n	800773e <HAL_I2C_Mem_Write+0x1e2>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d007      	beq.n	80075d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0201 	orr.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2221      	movs	r2, #33	@ 0x21
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2240      	movs	r2, #64	@ 0x40
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a3a      	ldr	r2, [r7, #32]
 8007602:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a4d      	ldr	r2, [pc, #308]	@ (800774c <HAL_I2C_Mem_Write+0x1f0>)
 8007618:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800761a:	88f8      	ldrh	r0, [r7, #6]
 800761c:	893a      	ldrh	r2, [r7, #8]
 800761e:	8979      	ldrh	r1, [r7, #10]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4603      	mov	r3, r0
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fac2 	bl	8007bb4 <I2C_RequestMemoryWrite>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d052      	beq.n	80076dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e081      	b.n	800773e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fd50 	bl	80080e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00d      	beq.n	8007666 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764e:	2b04      	cmp	r3, #4
 8007650:	d107      	bne.n	8007662 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e06b      	b.n	800773e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d11b      	bne.n	80076dc <HAL_I2C_Mem_Write+0x180>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d017      	beq.n	80076dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1aa      	bne.n	800763a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fd43 	bl	8008174 <I2C_WaitOnBTFFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00d      	beq.n	8007710 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d107      	bne.n	800770c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800770a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e016      	b.n	800773e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800771e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e000      	b.n	800773e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800773c:	2302      	movs	r3, #2
  }
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	00100002 	.word	0x00100002
 800774c:	ffff0000 	.word	0xffff0000

08007750 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	@ 0x30
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	4608      	mov	r0, r1
 800775a:	4611      	mov	r1, r2
 800775c:	461a      	mov	r2, r3
 800775e:	4603      	mov	r3, r0
 8007760:	817b      	strh	r3, [r7, #10]
 8007762:	460b      	mov	r3, r1
 8007764:	813b      	strh	r3, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800776a:	f7fe f839 	bl	80057e0 <HAL_GetTick>
 800776e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b20      	cmp	r3, #32
 800777a:	f040 8214 	bne.w	8007ba6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	2319      	movs	r3, #25
 8007784:	2201      	movs	r2, #1
 8007786:	497b      	ldr	r1, [pc, #492]	@ (8007974 <HAL_I2C_Mem_Read+0x224>)
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 fb91 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007794:	2302      	movs	r3, #2
 8007796:	e207      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d101      	bne.n	80077a6 <HAL_I2C_Mem_Read+0x56>
 80077a2:	2302      	movs	r3, #2
 80077a4:	e200      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d007      	beq.n	80077cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2222      	movs	r2, #34	@ 0x22
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2240      	movs	r2, #64	@ 0x40
 80077e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80077fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4a5b      	ldr	r2, [pc, #364]	@ (8007978 <HAL_I2C_Mem_Read+0x228>)
 800780c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800780e:	88f8      	ldrh	r0, [r7, #6]
 8007810:	893a      	ldrh	r2, [r7, #8]
 8007812:	8979      	ldrh	r1, [r7, #10]
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	4603      	mov	r3, r0
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fa5e 	bl	8007ce0 <I2C_RequestMemoryRead>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e1bc      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d113      	bne.n	800785e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007836:	2300      	movs	r3, #0
 8007838:	623b      	str	r3, [r7, #32]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	623b      	str	r3, [r7, #32]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	623b      	str	r3, [r7, #32]
 800784a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e190      	b.n	8007b80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007862:	2b01      	cmp	r3, #1
 8007864:	d11b      	bne.n	800789e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	e170      	b.n	8007b80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d11b      	bne.n	80078de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c6:	2300      	movs	r3, #0
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	e150      	b.n	8007b80 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078f4:	e144      	b.n	8007b80 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	f200 80f1 	bhi.w	8007ae2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007904:	2b01      	cmp	r3, #1
 8007906:	d123      	bne.n	8007950 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fc79 	bl	8008204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e145      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691a      	ldr	r2, [r3, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007938:	3b01      	subs	r3, #1
 800793a:	b29a      	uxth	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800794e:	e117      	b.n	8007b80 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007954:	2b02      	cmp	r3, #2
 8007956:	d14e      	bne.n	80079f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795e:	2200      	movs	r2, #0
 8007960:	4906      	ldr	r1, [pc, #24]	@ (800797c <HAL_I2C_Mem_Read+0x22c>)
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 faa4 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e11a      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
 8007972:	bf00      	nop
 8007974:	00100002 	.word	0x00100002
 8007978:	ffff0000 	.word	0xffff0000
 800797c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800798e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80079f4:	e0c4      	b.n	8007b80 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	2200      	movs	r2, #0
 80079fe:	496c      	ldr	r1, [pc, #432]	@ (8007bb0 <HAL_I2C_Mem_Read+0x460>)
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fa55 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0cb      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a58:	2200      	movs	r2, #0
 8007a5a:	4955      	ldr	r1, [pc, #340]	@ (8007bb0 <HAL_I2C_Mem_Read+0x460>)
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fa27 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e09d      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ae0:	e04e      	b.n	8007b80 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 fb8c 	bl	8008204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e058      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691a      	ldr	r2, [r3, #16]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d124      	bne.n	8007b80 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d107      	bne.n	8007b4e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f47f aeb6 	bne.w	80078f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e000      	b.n	8007ba8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007ba6:	2302      	movs	r3, #2
  }
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3728      	adds	r7, #40	@ 0x28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	00010004 	.word	0x00010004

08007bb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	817b      	strh	r3, [r7, #10]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	813b      	strh	r3, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f960 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00d      	beq.n	8007c12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c04:	d103      	bne.n	8007c0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e05f      	b.n	8007cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c12:	897b      	ldrh	r3, [r7, #10]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	492d      	ldr	r1, [pc, #180]	@ (8007cdc <I2C_RequestMemoryWrite+0x128>)
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f9bb 	bl	8007fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e04c      	b.n	8007cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c50:	6a39      	ldr	r1, [r7, #32]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fa46 	bl	80080e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d107      	bne.n	8007c76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e02b      	b.n	8007cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d105      	bne.n	8007c8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c80:	893b      	ldrh	r3, [r7, #8]
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	611a      	str	r2, [r3, #16]
 8007c8a:	e021      	b.n	8007cd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c8c:	893b      	ldrh	r3, [r7, #8]
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c9c:	6a39      	ldr	r1, [r7, #32]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fa20 	bl	80080e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d107      	bne.n	8007cc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e005      	b.n	8007cd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cc6:	893b      	ldrh	r3, [r7, #8]
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	00010002 	.word	0x00010002

08007ce0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	4608      	mov	r0, r1
 8007cea:	4611      	mov	r1, r2
 8007cec:	461a      	mov	r2, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	817b      	strh	r3, [r7, #10]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	813b      	strh	r3, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 f8c2 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00d      	beq.n	8007d4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d40:	d103      	bne.n	8007d4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e0aa      	b.n	8007ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d4e:	897b      	ldrh	r3, [r7, #10]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	461a      	mov	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d60:	6a3a      	ldr	r2, [r7, #32]
 8007d62:	4952      	ldr	r1, [pc, #328]	@ (8007eac <I2C_RequestMemoryRead+0x1cc>)
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f91d 	bl	8007fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e097      	b.n	8007ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8c:	6a39      	ldr	r1, [r7, #32]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f9a8 	bl	80080e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00d      	beq.n	8007db6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d107      	bne.n	8007db2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e076      	b.n	8007ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d105      	bne.n	8007dc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dbc:	893b      	ldrh	r3, [r7, #8]
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	611a      	str	r2, [r3, #16]
 8007dc6:	e021      	b.n	8007e0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007dc8:	893b      	ldrh	r3, [r7, #8]
 8007dca:	0a1b      	lsrs	r3, r3, #8
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd8:	6a39      	ldr	r1, [r7, #32]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f982 	bl	80080e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d107      	bne.n	8007dfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e050      	b.n	8007ea4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e02:	893b      	ldrh	r3, [r7, #8]
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e0e:	6a39      	ldr	r1, [r7, #32]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f967 	bl	80080e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00d      	beq.n	8007e38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d107      	bne.n	8007e34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e035      	b.n	8007ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f82b 	bl	8007eb0 <I2C_WaitOnFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00d      	beq.n	8007e7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e6e:	d103      	bne.n	8007e78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e013      	b.n	8007ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e7c:	897b      	ldrh	r3, [r7, #10]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	6a3a      	ldr	r2, [r7, #32]
 8007e90:	4906      	ldr	r1, [pc, #24]	@ (8007eac <I2C_RequestMemoryRead+0x1cc>)
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 f886 	bl	8007fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	00010002 	.word	0x00010002

08007eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ec0:	e048      	b.n	8007f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec8:	d044      	beq.n	8007f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eca:	f7fd fc89 	bl	80057e0 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d139      	bne.n	8007f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	0c1b      	lsrs	r3, r3, #16
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d10d      	bne.n	8007f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	43da      	mvns	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bf0c      	ite	eq
 8007efc:	2301      	moveq	r3, #1
 8007efe:	2300      	movne	r3, #0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	461a      	mov	r2, r3
 8007f04:	e00c      	b.n	8007f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	43da      	mvns	r2, r3
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4013      	ands	r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	bf0c      	ite	eq
 8007f18:	2301      	moveq	r3, #1
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	461a      	mov	r2, r3
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d116      	bne.n	8007f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f40:	f043 0220 	orr.w	r2, r3, #32
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e023      	b.n	8007f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d10d      	bne.n	8007f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	43da      	mvns	r2, r3
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	461a      	mov	r2, r3
 8007f78:	e00c      	b.n	8007f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	43da      	mvns	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4013      	ands	r3, r2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2301      	moveq	r3, #1
 8007f8e:	2300      	movne	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d093      	beq.n	8007ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fb2:	e071      	b.n	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc2:	d123      	bne.n	800800c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff8:	f043 0204 	orr.w	r2, r3, #4
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e067      	b.n	80080dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008012:	d041      	beq.n	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008014:	f7fd fbe4 	bl	80057e0 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d302      	bcc.n	800802a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d136      	bne.n	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	0c1b      	lsrs	r3, r3, #16
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	d10c      	bne.n	800804e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	43da      	mvns	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4013      	ands	r3, r2
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	bf14      	ite	ne
 8008046:	2301      	movne	r3, #1
 8008048:	2300      	moveq	r3, #0
 800804a:	b2db      	uxtb	r3, r3
 800804c:	e00b      	b.n	8008066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	43da      	mvns	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4013      	ands	r3, r2
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	bf14      	ite	ne
 8008060:	2301      	movne	r3, #1
 8008062:	2300      	moveq	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008084:	f043 0220 	orr.w	r2, r3, #32
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e021      	b.n	80080dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d10c      	bne.n	80080bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	43da      	mvns	r2, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf14      	ite	ne
 80080b4:	2301      	movne	r3, #1
 80080b6:	2300      	moveq	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	e00b      	b.n	80080d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	43da      	mvns	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4013      	ands	r3, r2
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bf14      	ite	ne
 80080ce:	2301      	movne	r3, #1
 80080d0:	2300      	moveq	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f47f af6d 	bne.w	8007fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080f0:	e034      	b.n	800815c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 f8e3 	bl	80082be <I2C_IsAcknowledgeFailed>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e034      	b.n	800816c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008108:	d028      	beq.n	800815c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800810a:	f7fd fb69 	bl	80057e0 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	429a      	cmp	r2, r3
 8008118:	d302      	bcc.n	8008120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d11d      	bne.n	800815c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812a:	2b80      	cmp	r3, #128	@ 0x80
 800812c:	d016      	beq.n	800815c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008148:	f043 0220 	orr.w	r2, r3, #32
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e007      	b.n	800816c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008166:	2b80      	cmp	r3, #128	@ 0x80
 8008168:	d1c3      	bne.n	80080f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008180:	e034      	b.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f89b 	bl	80082be <I2C_IsAcknowledgeFailed>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e034      	b.n	80081fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008198:	d028      	beq.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819a:	f7fd fb21 	bl	80057e0 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d302      	bcc.n	80081b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d11d      	bne.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0304 	and.w	r3, r3, #4
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d016      	beq.n	80081ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2220      	movs	r2, #32
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d8:	f043 0220 	orr.w	r2, r3, #32
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e007      	b.n	80081fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d1c3      	bne.n	8008182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008210:	e049      	b.n	80082a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b10      	cmp	r3, #16
 800821e:	d119      	bne.n	8008254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0210 	mvn.w	r2, #16
 8008228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e030      	b.n	80082b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008254:	f7fd fac4 	bl	80057e0 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	429a      	cmp	r2, r3
 8008262:	d302      	bcc.n	800826a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d11d      	bne.n	80082a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008274:	2b40      	cmp	r3, #64	@ 0x40
 8008276:	d016      	beq.n	80082a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008292:	f043 0220 	orr.w	r2, r3, #32
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e007      	b.n	80082b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b0:	2b40      	cmp	r3, #64	@ 0x40
 80082b2:	d1ae      	bne.n	8008212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082d4:	d11b      	bne.n	800830e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80082de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fa:	f043 0204 	orr.w	r2, r3, #4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e267      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d075      	beq.n	8008426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800833a:	4b88      	ldr	r3, [pc, #544]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 030c 	and.w	r3, r3, #12
 8008342:	2b04      	cmp	r3, #4
 8008344:	d00c      	beq.n	8008360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008346:	4b85      	ldr	r3, [pc, #532]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800834e:	2b08      	cmp	r3, #8
 8008350:	d112      	bne.n	8008378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008352:	4b82      	ldr	r3, [pc, #520]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800835a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800835e:	d10b      	bne.n	8008378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008360:	4b7e      	ldr	r3, [pc, #504]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d05b      	beq.n	8008424 <HAL_RCC_OscConfig+0x108>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d157      	bne.n	8008424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e242      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008380:	d106      	bne.n	8008390 <HAL_RCC_OscConfig+0x74>
 8008382:	4b76      	ldr	r3, [pc, #472]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a75      	ldr	r2, [pc, #468]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	e01d      	b.n	80083cc <HAL_RCC_OscConfig+0xb0>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008398:	d10c      	bne.n	80083b4 <HAL_RCC_OscConfig+0x98>
 800839a:	4b70      	ldr	r3, [pc, #448]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a6f      	ldr	r2, [pc, #444]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	4b6d      	ldr	r3, [pc, #436]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a6c      	ldr	r2, [pc, #432]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e00b      	b.n	80083cc <HAL_RCC_OscConfig+0xb0>
 80083b4:	4b69      	ldr	r3, [pc, #420]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a68      	ldr	r2, [pc, #416]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	4b66      	ldr	r3, [pc, #408]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a65      	ldr	r2, [pc, #404]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d013      	beq.n	80083fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083d4:	f7fd fa04 	bl	80057e0 <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083dc:	f7fd fa00 	bl	80057e0 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b64      	cmp	r3, #100	@ 0x64
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e207      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ee:	4b5b      	ldr	r3, [pc, #364]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f0      	beq.n	80083dc <HAL_RCC_OscConfig+0xc0>
 80083fa:	e014      	b.n	8008426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fc:	f7fd f9f0 	bl	80057e0 <HAL_GetTick>
 8008400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008404:	f7fd f9ec 	bl	80057e0 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b64      	cmp	r3, #100	@ 0x64
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e1f3      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008416:	4b51      	ldr	r3, [pc, #324]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f0      	bne.n	8008404 <HAL_RCC_OscConfig+0xe8>
 8008422:	e000      	b.n	8008426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d063      	beq.n	80084fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008432:	4b4a      	ldr	r3, [pc, #296]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 030c 	and.w	r3, r3, #12
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800843e:	4b47      	ldr	r3, [pc, #284]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008446:	2b08      	cmp	r3, #8
 8008448:	d11c      	bne.n	8008484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800844a:	4b44      	ldr	r3, [pc, #272]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d116      	bne.n	8008484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008456:	4b41      	ldr	r3, [pc, #260]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d005      	beq.n	800846e <HAL_RCC_OscConfig+0x152>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d001      	beq.n	800846e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e1c7      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800846e:	4b3b      	ldr	r3, [pc, #236]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	4937      	ldr	r1, [pc, #220]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 800847e:	4313      	orrs	r3, r2
 8008480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008482:	e03a      	b.n	80084fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d020      	beq.n	80084ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800848c:	4b34      	ldr	r3, [pc, #208]	@ (8008560 <HAL_RCC_OscConfig+0x244>)
 800848e:	2201      	movs	r2, #1
 8008490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008492:	f7fd f9a5 	bl	80057e0 <HAL_GetTick>
 8008496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800849a:	f7fd f9a1 	bl	80057e0 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e1a8      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084ac:	4b2b      	ldr	r3, [pc, #172]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0f0      	beq.n	800849a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084b8:	4b28      	ldr	r3, [pc, #160]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	4925      	ldr	r1, [pc, #148]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	600b      	str	r3, [r1, #0]
 80084cc:	e015      	b.n	80084fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084ce:	4b24      	ldr	r3, [pc, #144]	@ (8008560 <HAL_RCC_OscConfig+0x244>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d4:	f7fd f984 	bl	80057e0 <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084da:	e008      	b.n	80084ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084dc:	f7fd f980 	bl	80057e0 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e187      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ee:	4b1b      	ldr	r3, [pc, #108]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1f0      	bne.n	80084dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d036      	beq.n	8008574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d016      	beq.n	800853c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800850e:	4b15      	ldr	r3, [pc, #84]	@ (8008564 <HAL_RCC_OscConfig+0x248>)
 8008510:	2201      	movs	r2, #1
 8008512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008514:	f7fd f964 	bl	80057e0 <HAL_GetTick>
 8008518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800851c:	f7fd f960 	bl	80057e0 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e167      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800852e:	4b0b      	ldr	r3, [pc, #44]	@ (800855c <HAL_RCC_OscConfig+0x240>)
 8008530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f0      	beq.n	800851c <HAL_RCC_OscConfig+0x200>
 800853a:	e01b      	b.n	8008574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800853c:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <HAL_RCC_OscConfig+0x248>)
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008542:	f7fd f94d 	bl	80057e0 <HAL_GetTick>
 8008546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008548:	e00e      	b.n	8008568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800854a:	f7fd f949 	bl	80057e0 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	2b02      	cmp	r3, #2
 8008556:	d907      	bls.n	8008568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e150      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
 800855c:	40023800 	.word	0x40023800
 8008560:	42470000 	.word	0x42470000
 8008564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008568:	4b88      	ldr	r3, [pc, #544]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 800856a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1ea      	bne.n	800854a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 8097 	beq.w	80086b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008582:	2300      	movs	r3, #0
 8008584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008586:	4b81      	ldr	r3, [pc, #516]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10f      	bne.n	80085b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	4b7d      	ldr	r3, [pc, #500]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859a:	4a7c      	ldr	r2, [pc, #496]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 800859c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80085a2:	4b7a      	ldr	r3, [pc, #488]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 80085a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085ae:	2301      	movs	r3, #1
 80085b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b2:	4b77      	ldr	r3, [pc, #476]	@ (8008790 <HAL_RCC_OscConfig+0x474>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d118      	bne.n	80085f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085be:	4b74      	ldr	r3, [pc, #464]	@ (8008790 <HAL_RCC_OscConfig+0x474>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a73      	ldr	r2, [pc, #460]	@ (8008790 <HAL_RCC_OscConfig+0x474>)
 80085c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085ca:	f7fd f909 	bl	80057e0 <HAL_GetTick>
 80085ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085d0:	e008      	b.n	80085e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085d2:	f7fd f905 	bl	80057e0 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d901      	bls.n	80085e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e10c      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085e4:	4b6a      	ldr	r3, [pc, #424]	@ (8008790 <HAL_RCC_OscConfig+0x474>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0f0      	beq.n	80085d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d106      	bne.n	8008606 <HAL_RCC_OscConfig+0x2ea>
 80085f8:	4b64      	ldr	r3, [pc, #400]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 80085fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fc:	4a63      	ldr	r2, [pc, #396]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 80085fe:	f043 0301 	orr.w	r3, r3, #1
 8008602:	6713      	str	r3, [r2, #112]	@ 0x70
 8008604:	e01c      	b.n	8008640 <HAL_RCC_OscConfig+0x324>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b05      	cmp	r3, #5
 800860c:	d10c      	bne.n	8008628 <HAL_RCC_OscConfig+0x30c>
 800860e:	4b5f      	ldr	r3, [pc, #380]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008612:	4a5e      	ldr	r2, [pc, #376]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008614:	f043 0304 	orr.w	r3, r3, #4
 8008618:	6713      	str	r3, [r2, #112]	@ 0x70
 800861a:	4b5c      	ldr	r3, [pc, #368]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 800861c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800861e:	4a5b      	ldr	r2, [pc, #364]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	6713      	str	r3, [r2, #112]	@ 0x70
 8008626:	e00b      	b.n	8008640 <HAL_RCC_OscConfig+0x324>
 8008628:	4b58      	ldr	r3, [pc, #352]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 800862a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800862c:	4a57      	ldr	r2, [pc, #348]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 800862e:	f023 0301 	bic.w	r3, r3, #1
 8008632:	6713      	str	r3, [r2, #112]	@ 0x70
 8008634:	4b55      	ldr	r3, [pc, #340]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008638:	4a54      	ldr	r2, [pc, #336]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 800863a:	f023 0304 	bic.w	r3, r3, #4
 800863e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d015      	beq.n	8008674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008648:	f7fd f8ca 	bl	80057e0 <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800864e:	e00a      	b.n	8008666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008650:	f7fd f8c6 	bl	80057e0 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800865e:	4293      	cmp	r3, r2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e0cb      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008666:	4b49      	ldr	r3, [pc, #292]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0ee      	beq.n	8008650 <HAL_RCC_OscConfig+0x334>
 8008672:	e014      	b.n	800869e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008674:	f7fd f8b4 	bl	80057e0 <HAL_GetTick>
 8008678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800867a:	e00a      	b.n	8008692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800867c:	f7fd f8b0 	bl	80057e0 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800868a:	4293      	cmp	r3, r2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e0b5      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008692:	4b3e      	ldr	r3, [pc, #248]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1ee      	bne.n	800867c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800869e:	7dfb      	ldrb	r3, [r7, #23]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d105      	bne.n	80086b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086a4:	4b39      	ldr	r3, [pc, #228]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 80086a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a8:	4a38      	ldr	r2, [pc, #224]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 80086aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 80a1 	beq.w	80087fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086ba:	4b34      	ldr	r3, [pc, #208]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f003 030c 	and.w	r3, r3, #12
 80086c2:	2b08      	cmp	r3, #8
 80086c4:	d05c      	beq.n	8008780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d141      	bne.n	8008752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ce:	4b31      	ldr	r3, [pc, #196]	@ (8008794 <HAL_RCC_OscConfig+0x478>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d4:	f7fd f884 	bl	80057e0 <HAL_GetTick>
 80086d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086da:	e008      	b.n	80086ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086dc:	f7fd f880 	bl	80057e0 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e087      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ee:	4b27      	ldr	r3, [pc, #156]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1f0      	bne.n	80086dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	69da      	ldr	r2, [r3, #28]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008708:	019b      	lsls	r3, r3, #6
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	3b01      	subs	r3, #1
 8008714:	041b      	lsls	r3, r3, #16
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	491b      	ldr	r1, [pc, #108]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008720:	4313      	orrs	r3, r2
 8008722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008724:	4b1b      	ldr	r3, [pc, #108]	@ (8008794 <HAL_RCC_OscConfig+0x478>)
 8008726:	2201      	movs	r2, #1
 8008728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800872a:	f7fd f859 	bl	80057e0 <HAL_GetTick>
 800872e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008730:	e008      	b.n	8008744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008732:	f7fd f855 	bl	80057e0 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e05c      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008744:	4b11      	ldr	r3, [pc, #68]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0f0      	beq.n	8008732 <HAL_RCC_OscConfig+0x416>
 8008750:	e054      	b.n	80087fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008752:	4b10      	ldr	r3, [pc, #64]	@ (8008794 <HAL_RCC_OscConfig+0x478>)
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008758:	f7fd f842 	bl	80057e0 <HAL_GetTick>
 800875c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800875e:	e008      	b.n	8008772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008760:	f7fd f83e 	bl	80057e0 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b02      	cmp	r3, #2
 800876c:	d901      	bls.n	8008772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e045      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008772:	4b06      	ldr	r3, [pc, #24]	@ (800878c <HAL_RCC_OscConfig+0x470>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1f0      	bne.n	8008760 <HAL_RCC_OscConfig+0x444>
 800877e:	e03d      	b.n	80087fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d107      	bne.n	8008798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e038      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
 800878c:	40023800 	.word	0x40023800
 8008790:	40007000 	.word	0x40007000
 8008794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008798:	4b1b      	ldr	r3, [pc, #108]	@ (8008808 <HAL_RCC_OscConfig+0x4ec>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d028      	beq.n	80087f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d121      	bne.n	80087f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087be:	429a      	cmp	r2, r3
 80087c0:	d11a      	bne.n	80087f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80087c8:	4013      	ands	r3, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80087ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d111      	bne.n	80087f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087de:	085b      	lsrs	r3, r3, #1
 80087e0:	3b01      	subs	r3, #1
 80087e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d107      	bne.n	80087f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d001      	beq.n	80087fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	40023800 	.word	0x40023800

0800880c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0cc      	b.n	80089ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008820:	4b68      	ldr	r3, [pc, #416]	@ (80089c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d90c      	bls.n	8008848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800882e:	4b65      	ldr	r3, [pc, #404]	@ (80089c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008836:	4b63      	ldr	r3, [pc, #396]	@ (80089c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d001      	beq.n	8008848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e0b8      	b.n	80089ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008860:	4b59      	ldr	r3, [pc, #356]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	4a58      	ldr	r2, [pc, #352]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008866:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800886a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008878:	4b53      	ldr	r3, [pc, #332]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	4a52      	ldr	r2, [pc, #328]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 800887e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008884:	4b50      	ldr	r3, [pc, #320]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	494d      	ldr	r1, [pc, #308]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008892:	4313      	orrs	r3, r2
 8008894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d044      	beq.n	800892c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d107      	bne.n	80088ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088aa:	4b47      	ldr	r3, [pc, #284]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d119      	bne.n	80088ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e07f      	b.n	80089ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d003      	beq.n	80088ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d107      	bne.n	80088da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ca:	4b3f      	ldr	r3, [pc, #252]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e06f      	b.n	80089ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088da:	4b3b      	ldr	r3, [pc, #236]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e067      	b.n	80089ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088ea:	4b37      	ldr	r3, [pc, #220]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f023 0203 	bic.w	r2, r3, #3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	4934      	ldr	r1, [pc, #208]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088fc:	f7fc ff70 	bl	80057e0 <HAL_GetTick>
 8008900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008902:	e00a      	b.n	800891a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008904:	f7fc ff6c 	bl	80057e0 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008912:	4293      	cmp	r3, r2
 8008914:	d901      	bls.n	800891a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e04f      	b.n	80089ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800891a:	4b2b      	ldr	r3, [pc, #172]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 020c 	and.w	r2, r3, #12
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	429a      	cmp	r2, r3
 800892a:	d1eb      	bne.n	8008904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800892c:	4b25      	ldr	r3, [pc, #148]	@ (80089c4 <HAL_RCC_ClockConfig+0x1b8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	429a      	cmp	r2, r3
 8008938:	d20c      	bcs.n	8008954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800893a:	4b22      	ldr	r3, [pc, #136]	@ (80089c4 <HAL_RCC_ClockConfig+0x1b8>)
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008942:	4b20      	ldr	r3, [pc, #128]	@ (80089c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d001      	beq.n	8008954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e032      	b.n	80089ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008960:	4b19      	ldr	r3, [pc, #100]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	4916      	ldr	r1, [pc, #88]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 800896e:	4313      	orrs	r3, r2
 8008970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b00      	cmp	r3, #0
 800897c:	d009      	beq.n	8008992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800897e:	4b12      	ldr	r3, [pc, #72]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	490e      	ldr	r1, [pc, #56]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 800898e:	4313      	orrs	r3, r2
 8008990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008992:	f000 f82d 	bl	80089f0 <HAL_RCC_GetSysClockFreq>
 8008996:	4602      	mov	r2, r0
 8008998:	4b0b      	ldr	r3, [pc, #44]	@ (80089c8 <HAL_RCC_ClockConfig+0x1bc>)
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	091b      	lsrs	r3, r3, #4
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	490a      	ldr	r1, [pc, #40]	@ (80089cc <HAL_RCC_ClockConfig+0x1c0>)
 80089a4:	5ccb      	ldrb	r3, [r1, r3]
 80089a6:	fa22 f303 	lsr.w	r3, r2, r3
 80089aa:	4a09      	ldr	r2, [pc, #36]	@ (80089d0 <HAL_RCC_ClockConfig+0x1c4>)
 80089ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089ae:	4b09      	ldr	r3, [pc, #36]	@ (80089d4 <HAL_RCC_ClockConfig+0x1c8>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fc fed0 	bl	8005758 <HAL_InitTick>

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	40023c00 	.word	0x40023c00
 80089c8:	40023800 	.word	0x40023800
 80089cc:	080114fc 	.word	0x080114fc
 80089d0:	20000108 	.word	0x20000108
 80089d4:	2000010c 	.word	0x2000010c

080089d8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80089dc:	4b03      	ldr	r3, [pc, #12]	@ (80089ec <HAL_RCC_EnableCSS+0x14>)
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
}
 80089e2:	bf00      	nop
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	4247004c 	.word	0x4247004c

080089f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089f4:	b090      	sub	sp, #64	@ 0x40
 80089f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fc:	2300      	movs	r3, #0
 80089fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a00:	2300      	movs	r3, #0
 8008a02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a08:	4b59      	ldr	r3, [pc, #356]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 030c 	and.w	r3, r3, #12
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d00d      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x40>
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	f200 80a1 	bhi.w	8008b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <HAL_RCC_GetSysClockFreq+0x34>
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d003      	beq.n	8008a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8008a22:	e09b      	b.n	8008b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a24:	4b53      	ldr	r3, [pc, #332]	@ (8008b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a26:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008a28:	e09b      	b.n	8008b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a2a:	4b53      	ldr	r3, [pc, #332]	@ (8008b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008a2e:	e098      	b.n	8008b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a30:	4b4f      	ldr	r3, [pc, #316]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d028      	beq.n	8008a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a46:	4b4a      	ldr	r3, [pc, #296]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	099b      	lsrs	r3, r3, #6
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	623b      	str	r3, [r7, #32]
 8008a50:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4b47      	ldr	r3, [pc, #284]	@ (8008b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a5c:	fb03 f201 	mul.w	r2, r3, r1
 8008a60:	2300      	movs	r3, #0
 8008a62:	fb00 f303 	mul.w	r3, r0, r3
 8008a66:	4413      	add	r3, r2
 8008a68:	4a43      	ldr	r2, [pc, #268]	@ (8008b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8008a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a70:	460a      	mov	r2, r1
 8008a72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a76:	4413      	add	r3, r2
 8008a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	61fa      	str	r2, [r7, #28]
 8008a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008a8a:	f7f8 f88d 	bl	8000ba8 <__aeabi_uldivmod>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4613      	mov	r3, r2
 8008a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a96:	e053      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a98:	4b35      	ldr	r3, [pc, #212]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	099b      	lsrs	r3, r3, #6
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	617a      	str	r2, [r7, #20]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008aaa:	f04f 0b00 	mov.w	fp, #0
 8008aae:	4652      	mov	r2, sl
 8008ab0:	465b      	mov	r3, fp
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f04f 0100 	mov.w	r1, #0
 8008aba:	0159      	lsls	r1, r3, #5
 8008abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ac0:	0150      	lsls	r0, r2, #5
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8008aca:	eb63 090b 	sbc.w	r9, r3, fp
 8008ace:	f04f 0200 	mov.w	r2, #0
 8008ad2:	f04f 0300 	mov.w	r3, #0
 8008ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8008ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8008aea:	f04f 0200 	mov.w	r2, #0
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	00eb      	lsls	r3, r5, #3
 8008af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008af8:	00e2      	lsls	r2, r4, #3
 8008afa:	4614      	mov	r4, r2
 8008afc:	461d      	mov	r5, r3
 8008afe:	eb14 030a 	adds.w	r3, r4, sl
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	eb45 030b 	adc.w	r3, r5, fp
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b16:	4629      	mov	r1, r5
 8008b18:	028b      	lsls	r3, r1, #10
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b20:	4621      	mov	r1, r4
 8008b22:	028a      	lsls	r2, r1, #10
 8008b24:	4610      	mov	r0, r2
 8008b26:	4619      	mov	r1, r3
 8008b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	60bb      	str	r3, [r7, #8]
 8008b2e:	60fa      	str	r2, [r7, #12]
 8008b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b34:	f7f8 f838 	bl	8000ba8 <__aeabi_uldivmod>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b40:	4b0b      	ldr	r3, [pc, #44]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	0c1b      	lsrs	r3, r3, #16
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008b50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008b5a:	e002      	b.n	8008b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b5c:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8008b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3740      	adds	r7, #64	@ 0x40
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b6e:	bf00      	nop
 8008b70:	40023800 	.word	0x40023800
 8008b74:	00f42400 	.word	0x00f42400
 8008b78:	00b71b00 	.word	0x00b71b00

08008b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b80:	4b03      	ldr	r3, [pc, #12]	@ (8008b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b82:	681b      	ldr	r3, [r3, #0]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20000108 	.word	0x20000108

08008b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b98:	f7ff fff0 	bl	8008b7c <HAL_RCC_GetHCLKFreq>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	4b05      	ldr	r3, [pc, #20]	@ (8008bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	0a9b      	lsrs	r3, r3, #10
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	4903      	ldr	r1, [pc, #12]	@ (8008bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008baa:	5ccb      	ldrb	r3, [r1, r3]
 8008bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	0801150c 	.word	0x0801150c

08008bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bc0:	f7ff ffdc 	bl	8008b7c <HAL_RCC_GetHCLKFreq>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4b05      	ldr	r3, [pc, #20]	@ (8008bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	0b5b      	lsrs	r3, r3, #13
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	4903      	ldr	r1, [pc, #12]	@ (8008be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bd2:	5ccb      	ldrb	r3, [r1, r3]
 8008bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40023800 	.word	0x40023800
 8008be0:	0801150c 	.word	0x0801150c

08008be4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008be8:	4b06      	ldr	r3, [pc, #24]	@ (8008c04 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bf0:	2b80      	cmp	r3, #128	@ 0x80
 8008bf2:	d104      	bne.n	8008bfe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008bf4:	f000 f80a 	bl	8008c0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008bf8:	4b03      	ldr	r3, [pc, #12]	@ (8008c08 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008bfa:	2280      	movs	r2, #128	@ 0x80
 8008bfc:	701a      	strb	r2, [r3, #0]
  }
}
 8008bfe:	bf00      	nop
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	40023800 	.word	0x40023800
 8008c08:	4002380e 	.word	0x4002380e

08008c0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e07b      	b.n	8008d24 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d108      	bne.n	8008c46 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c3c:	d009      	beq.n	8008c52 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	61da      	str	r2, [r3, #28]
 8008c44:	e005      	b.n	8008c52 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7fb ff9d 	bl	8004bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd6:	ea42 0103 	orr.w	r1, r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cde:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	0c1b      	lsrs	r3, r3, #16
 8008cf0:	f003 0104 	and.w	r1, r3, #4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf8:	f003 0210 	and.w	r2, r3, #16
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	69da      	ldr	r2, [r3, #28]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08c      	sub	sp, #48	@ 0x30
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d101      	bne.n	8008d52 <HAL_SPI_TransmitReceive+0x26>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e198      	b.n	8009084 <HAL_SPI_TransmitReceive+0x358>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d5a:	f7fc fd41 	bl	80057e0 <HAL_GetTick>
 8008d5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d70:	887b      	ldrh	r3, [r7, #2]
 8008d72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d00f      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x70>
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d82:	d107      	bne.n	8008d94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d103      	bne.n	8008d94 <HAL_SPI_TransmitReceive+0x68>
 8008d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d003      	beq.n	8008d9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d94:	2302      	movs	r3, #2
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008d9a:	e16d      	b.n	8009078 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x82>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x82>
 8008da8:	887b      	ldrh	r3, [r7, #2]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d103      	bne.n	8008db6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008db4:	e160      	b.n	8009078 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d003      	beq.n	8008dca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2205      	movs	r2, #5
 8008dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	887a      	ldrh	r2, [r7, #2]
 8008dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	887a      	ldrh	r2, [r7, #2]
 8008de0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	887a      	ldrh	r2, [r7, #2]
 8008dec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	887a      	ldrh	r2, [r7, #2]
 8008df2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e0a:	2b40      	cmp	r3, #64	@ 0x40
 8008e0c:	d007      	beq.n	8008e1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e26:	d17c      	bne.n	8008f22 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <HAL_SPI_TransmitReceive+0x10a>
 8008e30:	8b7b      	ldrh	r3, [r7, #26]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d16a      	bne.n	8008f0c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3a:	881a      	ldrh	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e46:	1c9a      	adds	r2, r3, #2
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e5a:	e057      	b.n	8008f0c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d11b      	bne.n	8008ea2 <HAL_SPI_TransmitReceive+0x176>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d016      	beq.n	8008ea2 <HAL_SPI_TransmitReceive+0x176>
 8008e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d113      	bne.n	8008ea2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7e:	881a      	ldrh	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8a:	1c9a      	adds	r2, r3, #2
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d119      	bne.n	8008ee4 <HAL_SPI_TransmitReceive+0x1b8>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d014      	beq.n	8008ee4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec4:	b292      	uxth	r2, r2
 8008ec6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	1c9a      	adds	r2, r3, #2
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ee4:	f7fc fc7c 	bl	80057e0 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d80b      	bhi.n	8008f0c <HAL_SPI_TransmitReceive+0x1e0>
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008efa:	d007      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008f0a:	e0b5      	b.n	8009078 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1a2      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x130>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d19d      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x130>
 8008f20:	e080      	b.n	8009024 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <HAL_SPI_TransmitReceive+0x204>
 8008f2a:	8b7b      	ldrh	r3, [r7, #26]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d16f      	bne.n	8009010 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	7812      	ldrb	r2, [r2, #0]
 8008f3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f56:	e05b      	b.n	8009010 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d11c      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x274>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d017      	beq.n	8008fa0 <HAL_SPI_TransmitReceive+0x274>
 8008f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d114      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	330c      	adds	r3, #12
 8008f80:	7812      	ldrb	r2, [r2, #0]
 8008f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d119      	bne.n	8008fe2 <HAL_SPI_TransmitReceive+0x2b6>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d014      	beq.n	8008fe2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	b2d2      	uxtb	r2, r2
 8008fc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fe2:	f7fc fbfd 	bl	80057e0 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d803      	bhi.n	8008ffa <HAL_SPI_TransmitReceive+0x2ce>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ff8:	d102      	bne.n	8009000 <HAL_SPI_TransmitReceive+0x2d4>
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d107      	bne.n	8009010 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800900e:	e033      	b.n	8009078 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009014:	b29b      	uxth	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d19e      	bne.n	8008f58 <HAL_SPI_TransmitReceive+0x22c>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d199      	bne.n	8008f58 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f8b7 	bl	800919c <SPI_EndRxTxTransaction>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d006      	beq.n	8009042 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2220      	movs	r2, #32
 800903e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8009040:	e01a      	b.n	8009078 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10a      	bne.n	8009060 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800906e:	e003      	b.n	8009078 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009080:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009084:	4618      	mov	r0, r3
 8009086:	3730      	adds	r7, #48	@ 0x30
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	4613      	mov	r3, r2
 800909a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800909c:	f7fc fba0 	bl	80057e0 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	4413      	add	r3, r2
 80090aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090ac:	f7fc fb98 	bl	80057e0 <HAL_GetTick>
 80090b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090b2:	4b39      	ldr	r3, [pc, #228]	@ (8009198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	015b      	lsls	r3, r3, #5
 80090b8:	0d1b      	lsrs	r3, r3, #20
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	fb02 f303 	mul.w	r3, r2, r3
 80090c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090c2:	e054      	b.n	800916e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090ca:	d050      	beq.n	800916e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090cc:	f7fc fb88 	bl	80057e0 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d902      	bls.n	80090e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d13d      	bne.n	800915e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80090f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090fa:	d111      	bne.n	8009120 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009104:	d004      	beq.n	8009110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800910e:	d107      	bne.n	8009120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800911e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009128:	d10f      	bne.n	800914a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e017      	b.n	800918e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	3b01      	subs	r3, #1
 800916c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4013      	ands	r3, r2
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	429a      	cmp	r2, r3
 800917c:	bf0c      	ite	eq
 800917e:	2301      	moveq	r3, #1
 8009180:	2300      	movne	r3, #0
 8009182:	b2db      	uxtb	r3, r3
 8009184:	461a      	mov	r2, r3
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	429a      	cmp	r2, r3
 800918a:	d19b      	bne.n	80090c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3720      	adds	r7, #32
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20000108 	.word	0x20000108

0800919c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2201      	movs	r2, #1
 80091b0:	2102      	movs	r1, #2
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f7ff ff6a 	bl	800908c <SPI_WaitFlagStateUntilTimeout>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d007      	beq.n	80091ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c2:	f043 0220 	orr.w	r2, r3, #32
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e032      	b.n	8009234 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091ce:	4b1b      	ldr	r3, [pc, #108]	@ (800923c <SPI_EndRxTxTransaction+0xa0>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009240 <SPI_EndRxTxTransaction+0xa4>)
 80091d4:	fba2 2303 	umull	r2, r3, r2, r3
 80091d8:	0d5b      	lsrs	r3, r3, #21
 80091da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80091de:	fb02 f303 	mul.w	r3, r2, r3
 80091e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091ec:	d112      	bne.n	8009214 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2200      	movs	r2, #0
 80091f6:	2180      	movs	r1, #128	@ 0x80
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff ff47 	bl	800908c <SPI_WaitFlagStateUntilTimeout>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d016      	beq.n	8009232 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009208:	f043 0220 	orr.w	r2, r3, #32
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e00f      	b.n	8009234 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	3b01      	subs	r3, #1
 800921e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800922a:	2b80      	cmp	r3, #128	@ 0x80
 800922c:	d0f2      	beq.n	8009214 <SPI_EndRxTxTransaction+0x78>
 800922e:	e000      	b.n	8009232 <SPI_EndRxTxTransaction+0x96>
        break;
 8009230:	bf00      	nop
  }

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20000108 	.word	0x20000108
 8009240:	165e9f81 	.word	0x165e9f81

08009244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e041      	b.n	80092da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7fb fd54 	bl	8004d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f000 fba8 	bl	80099d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d001      	beq.n	80092fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e046      	b.n	800938a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a23      	ldr	r2, [pc, #140]	@ (8009398 <HAL_TIM_Base_Start+0xb4>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d022      	beq.n	8009354 <HAL_TIM_Base_Start+0x70>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009316:	d01d      	beq.n	8009354 <HAL_TIM_Base_Start+0x70>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a1f      	ldr	r2, [pc, #124]	@ (800939c <HAL_TIM_Base_Start+0xb8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d018      	beq.n	8009354 <HAL_TIM_Base_Start+0x70>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a1e      	ldr	r2, [pc, #120]	@ (80093a0 <HAL_TIM_Base_Start+0xbc>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d013      	beq.n	8009354 <HAL_TIM_Base_Start+0x70>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1c      	ldr	r2, [pc, #112]	@ (80093a4 <HAL_TIM_Base_Start+0xc0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d00e      	beq.n	8009354 <HAL_TIM_Base_Start+0x70>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a1b      	ldr	r2, [pc, #108]	@ (80093a8 <HAL_TIM_Base_Start+0xc4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d009      	beq.n	8009354 <HAL_TIM_Base_Start+0x70>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a19      	ldr	r2, [pc, #100]	@ (80093ac <HAL_TIM_Base_Start+0xc8>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d004      	beq.n	8009354 <HAL_TIM_Base_Start+0x70>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a18      	ldr	r2, [pc, #96]	@ (80093b0 <HAL_TIM_Base_Start+0xcc>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d111      	bne.n	8009378 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 0307 	and.w	r3, r3, #7
 800935e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b06      	cmp	r3, #6
 8009364:	d010      	beq.n	8009388 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 0201 	orr.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009376:	e007      	b.n	8009388 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0201 	orr.w	r2, r2, #1
 8009386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40010000 	.word	0x40010000
 800939c:	40000400 	.word	0x40000400
 80093a0:	40000800 	.word	0x40000800
 80093a4:	40000c00 	.word	0x40000c00
 80093a8:	40010400 	.word	0x40010400
 80093ac:	40014000 	.word	0x40014000
 80093b0:	40001800 	.word	0x40001800

080093b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e041      	b.n	800944a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d106      	bne.n	80093e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f7fb fc4e 	bl	8004c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f000 faf0 	bl	80099d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d109      	bne.n	8009478 <HAL_TIM_PWM_Start+0x24>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b01      	cmp	r3, #1
 800946e:	bf14      	ite	ne
 8009470:	2301      	movne	r3, #1
 8009472:	2300      	moveq	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	e022      	b.n	80094be <HAL_TIM_PWM_Start+0x6a>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b04      	cmp	r3, #4
 800947c:	d109      	bne.n	8009492 <HAL_TIM_PWM_Start+0x3e>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b01      	cmp	r3, #1
 8009488:	bf14      	ite	ne
 800948a:	2301      	movne	r3, #1
 800948c:	2300      	moveq	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	e015      	b.n	80094be <HAL_TIM_PWM_Start+0x6a>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b08      	cmp	r3, #8
 8009496:	d109      	bne.n	80094ac <HAL_TIM_PWM_Start+0x58>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	bf14      	ite	ne
 80094a4:	2301      	movne	r3, #1
 80094a6:	2300      	moveq	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	e008      	b.n	80094be <HAL_TIM_PWM_Start+0x6a>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	bf14      	ite	ne
 80094b8:	2301      	movne	r3, #1
 80094ba:	2300      	moveq	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e07c      	b.n	80095c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d104      	bne.n	80094d6 <HAL_TIM_PWM_Start+0x82>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094d4:	e013      	b.n	80094fe <HAL_TIM_PWM_Start+0xaa>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d104      	bne.n	80094e6 <HAL_TIM_PWM_Start+0x92>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094e4:	e00b      	b.n	80094fe <HAL_TIM_PWM_Start+0xaa>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d104      	bne.n	80094f6 <HAL_TIM_PWM_Start+0xa2>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094f4:	e003      	b.n	80094fe <HAL_TIM_PWM_Start+0xaa>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2202      	movs	r2, #2
 80094fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2201      	movs	r2, #1
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 fd5c 	bl	8009fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a2d      	ldr	r2, [pc, #180]	@ (80095c8 <HAL_TIM_PWM_Start+0x174>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d004      	beq.n	8009520 <HAL_TIM_PWM_Start+0xcc>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a2c      	ldr	r2, [pc, #176]	@ (80095cc <HAL_TIM_PWM_Start+0x178>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d101      	bne.n	8009524 <HAL_TIM_PWM_Start+0xd0>
 8009520:	2301      	movs	r3, #1
 8009522:	e000      	b.n	8009526 <HAL_TIM_PWM_Start+0xd2>
 8009524:	2300      	movs	r3, #0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009538:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a22      	ldr	r2, [pc, #136]	@ (80095c8 <HAL_TIM_PWM_Start+0x174>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d022      	beq.n	800958a <HAL_TIM_PWM_Start+0x136>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800954c:	d01d      	beq.n	800958a <HAL_TIM_PWM_Start+0x136>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a1f      	ldr	r2, [pc, #124]	@ (80095d0 <HAL_TIM_PWM_Start+0x17c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d018      	beq.n	800958a <HAL_TIM_PWM_Start+0x136>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a1d      	ldr	r2, [pc, #116]	@ (80095d4 <HAL_TIM_PWM_Start+0x180>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d013      	beq.n	800958a <HAL_TIM_PWM_Start+0x136>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a1c      	ldr	r2, [pc, #112]	@ (80095d8 <HAL_TIM_PWM_Start+0x184>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d00e      	beq.n	800958a <HAL_TIM_PWM_Start+0x136>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a16      	ldr	r2, [pc, #88]	@ (80095cc <HAL_TIM_PWM_Start+0x178>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d009      	beq.n	800958a <HAL_TIM_PWM_Start+0x136>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a18      	ldr	r2, [pc, #96]	@ (80095dc <HAL_TIM_PWM_Start+0x188>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d004      	beq.n	800958a <HAL_TIM_PWM_Start+0x136>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a16      	ldr	r2, [pc, #88]	@ (80095e0 <HAL_TIM_PWM_Start+0x18c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d111      	bne.n	80095ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b06      	cmp	r3, #6
 800959a:	d010      	beq.n	80095be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ac:	e007      	b.n	80095be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0201 	orr.w	r2, r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40010000 	.word	0x40010000
 80095cc:	40010400 	.word	0x40010400
 80095d0:	40000400 	.word	0x40000400
 80095d4:	40000800 	.word	0x40000800
 80095d8:	40000c00 	.word	0x40000c00
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40001800 	.word	0x40001800

080095e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fce4 	bl	8009fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a2e      	ldr	r2, [pc, #184]	@ (80096bc <HAL_TIM_PWM_Stop+0xd8>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d004      	beq.n	8009610 <HAL_TIM_PWM_Stop+0x2c>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a2d      	ldr	r2, [pc, #180]	@ (80096c0 <HAL_TIM_PWM_Stop+0xdc>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d101      	bne.n	8009614 <HAL_TIM_PWM_Stop+0x30>
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <HAL_TIM_PWM_Stop+0x32>
 8009614:	2300      	movs	r3, #0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d017      	beq.n	800964a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6a1a      	ldr	r2, [r3, #32]
 8009620:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009624:	4013      	ands	r3, r2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10f      	bne.n	800964a <HAL_TIM_PWM_Stop+0x66>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6a1a      	ldr	r2, [r3, #32]
 8009630:	f240 4344 	movw	r3, #1092	@ 0x444
 8009634:	4013      	ands	r3, r2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d107      	bne.n	800964a <HAL_TIM_PWM_Stop+0x66>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009648:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6a1a      	ldr	r2, [r3, #32]
 8009650:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009654:	4013      	ands	r3, r2
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10f      	bne.n	800967a <HAL_TIM_PWM_Stop+0x96>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6a1a      	ldr	r2, [r3, #32]
 8009660:	f240 4344 	movw	r3, #1092	@ 0x444
 8009664:	4013      	ands	r3, r2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d107      	bne.n	800967a <HAL_TIM_PWM_Stop+0x96>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 0201 	bic.w	r2, r2, #1
 8009678:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <HAL_TIM_PWM_Stop+0xa6>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009688:	e013      	b.n	80096b2 <HAL_TIM_PWM_Stop+0xce>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b04      	cmp	r3, #4
 800968e:	d104      	bne.n	800969a <HAL_TIM_PWM_Stop+0xb6>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009698:	e00b      	b.n	80096b2 <HAL_TIM_PWM_Stop+0xce>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b08      	cmp	r3, #8
 800969e:	d104      	bne.n	80096aa <HAL_TIM_PWM_Stop+0xc6>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096a8:	e003      	b.n	80096b2 <HAL_TIM_PWM_Stop+0xce>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	40010000 	.word	0x40010000
 80096c0:	40010400 	.word	0x40010400

080096c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d101      	bne.n	80096e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096de:	2302      	movs	r3, #2
 80096e0:	e0ae      	b.n	8009840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b0c      	cmp	r3, #12
 80096ee:	f200 809f 	bhi.w	8009830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096f2:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	0800972d 	.word	0x0800972d
 80096fc:	08009831 	.word	0x08009831
 8009700:	08009831 	.word	0x08009831
 8009704:	08009831 	.word	0x08009831
 8009708:	0800976d 	.word	0x0800976d
 800970c:	08009831 	.word	0x08009831
 8009710:	08009831 	.word	0x08009831
 8009714:	08009831 	.word	0x08009831
 8009718:	080097af 	.word	0x080097af
 800971c:	08009831 	.word	0x08009831
 8009720:	08009831 	.word	0x08009831
 8009724:	08009831 	.word	0x08009831
 8009728:	080097ef 	.word	0x080097ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f9fc 	bl	8009b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0208 	orr.w	r2, r2, #8
 8009746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0204 	bic.w	r2, r2, #4
 8009756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6999      	ldr	r1, [r3, #24]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	619a      	str	r2, [r3, #24]
      break;
 800976a:	e064      	b.n	8009836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68b9      	ldr	r1, [r7, #8]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fa4c 	bl	8009c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	699a      	ldr	r2, [r3, #24]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6999      	ldr	r1, [r3, #24]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	021a      	lsls	r2, r3, #8
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	619a      	str	r2, [r3, #24]
      break;
 80097ac:	e043      	b.n	8009836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f000 faa1 	bl	8009cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69da      	ldr	r2, [r3, #28]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f042 0208 	orr.w	r2, r2, #8
 80097c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69da      	ldr	r2, [r3, #28]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 0204 	bic.w	r2, r2, #4
 80097d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69d9      	ldr	r1, [r3, #28]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	691a      	ldr	r2, [r3, #16]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	61da      	str	r2, [r3, #28]
      break;
 80097ec:	e023      	b.n	8009836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 faf5 	bl	8009de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69da      	ldr	r2, [r3, #28]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	69da      	ldr	r2, [r3, #28]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69d9      	ldr	r1, [r3, #28]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	021a      	lsls	r2, r3, #8
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	61da      	str	r2, [r3, #28]
      break;
 800982e:	e002      	b.n	8009836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
      break;
 8009834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800983e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_TIM_ConfigClockSource+0x1c>
 8009860:	2302      	movs	r3, #2
 8009862:	e0b4      	b.n	80099ce <HAL_TIM_ConfigClockSource+0x186>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800988a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800989c:	d03e      	beq.n	800991c <HAL_TIM_ConfigClockSource+0xd4>
 800989e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098a2:	f200 8087 	bhi.w	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098aa:	f000 8086 	beq.w	80099ba <HAL_TIM_ConfigClockSource+0x172>
 80098ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098b2:	d87f      	bhi.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098b4:	2b70      	cmp	r3, #112	@ 0x70
 80098b6:	d01a      	beq.n	80098ee <HAL_TIM_ConfigClockSource+0xa6>
 80098b8:	2b70      	cmp	r3, #112	@ 0x70
 80098ba:	d87b      	bhi.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098bc:	2b60      	cmp	r3, #96	@ 0x60
 80098be:	d050      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x11a>
 80098c0:	2b60      	cmp	r3, #96	@ 0x60
 80098c2:	d877      	bhi.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098c4:	2b50      	cmp	r3, #80	@ 0x50
 80098c6:	d03c      	beq.n	8009942 <HAL_TIM_ConfigClockSource+0xfa>
 80098c8:	2b50      	cmp	r3, #80	@ 0x50
 80098ca:	d873      	bhi.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098cc:	2b40      	cmp	r3, #64	@ 0x40
 80098ce:	d058      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x13a>
 80098d0:	2b40      	cmp	r3, #64	@ 0x40
 80098d2:	d86f      	bhi.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098d4:	2b30      	cmp	r3, #48	@ 0x30
 80098d6:	d064      	beq.n	80099a2 <HAL_TIM_ConfigClockSource+0x15a>
 80098d8:	2b30      	cmp	r3, #48	@ 0x30
 80098da:	d86b      	bhi.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098dc:	2b20      	cmp	r3, #32
 80098de:	d060      	beq.n	80099a2 <HAL_TIM_ConfigClockSource+0x15a>
 80098e0:	2b20      	cmp	r3, #32
 80098e2:	d867      	bhi.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d05c      	beq.n	80099a2 <HAL_TIM_ConfigClockSource+0x15a>
 80098e8:	2b10      	cmp	r3, #16
 80098ea:	d05a      	beq.n	80099a2 <HAL_TIM_ConfigClockSource+0x15a>
 80098ec:	e062      	b.n	80099b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098fe:	f000 fb41 	bl	8009f84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	609a      	str	r2, [r3, #8]
      break;
 800991a:	e04f      	b.n	80099bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800992c:	f000 fb2a 	bl	8009f84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800993e:	609a      	str	r2, [r3, #8]
      break;
 8009940:	e03c      	b.n	80099bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800994e:	461a      	mov	r2, r3
 8009950:	f000 fa9e 	bl	8009e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2150      	movs	r1, #80	@ 0x50
 800995a:	4618      	mov	r0, r3
 800995c:	f000 faf7 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 8009960:	e02c      	b.n	80099bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800996e:	461a      	mov	r2, r3
 8009970:	f000 fabd 	bl	8009eee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2160      	movs	r1, #96	@ 0x60
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fae7 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 8009980:	e01c      	b.n	80099bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800998e:	461a      	mov	r2, r3
 8009990:	f000 fa7e 	bl	8009e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2140      	movs	r1, #64	@ 0x40
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fad7 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 80099a0:	e00c      	b.n	80099bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4619      	mov	r1, r3
 80099ac:	4610      	mov	r0, r2
 80099ae:	f000 face 	bl	8009f4e <TIM_ITRx_SetConfig>
      break;
 80099b2:	e003      	b.n	80099bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
      break;
 80099b8:	e000      	b.n	80099bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80099ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a46      	ldr	r2, [pc, #280]	@ (8009b04 <TIM_Base_SetConfig+0x12c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d013      	beq.n	8009a18 <TIM_Base_SetConfig+0x40>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f6:	d00f      	beq.n	8009a18 <TIM_Base_SetConfig+0x40>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a43      	ldr	r2, [pc, #268]	@ (8009b08 <TIM_Base_SetConfig+0x130>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00b      	beq.n	8009a18 <TIM_Base_SetConfig+0x40>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a42      	ldr	r2, [pc, #264]	@ (8009b0c <TIM_Base_SetConfig+0x134>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d007      	beq.n	8009a18 <TIM_Base_SetConfig+0x40>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a41      	ldr	r2, [pc, #260]	@ (8009b10 <TIM_Base_SetConfig+0x138>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d003      	beq.n	8009a18 <TIM_Base_SetConfig+0x40>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a40      	ldr	r2, [pc, #256]	@ (8009b14 <TIM_Base_SetConfig+0x13c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d108      	bne.n	8009a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a35      	ldr	r2, [pc, #212]	@ (8009b04 <TIM_Base_SetConfig+0x12c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d02b      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a38:	d027      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a32      	ldr	r2, [pc, #200]	@ (8009b08 <TIM_Base_SetConfig+0x130>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d023      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a31      	ldr	r2, [pc, #196]	@ (8009b0c <TIM_Base_SetConfig+0x134>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d01f      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a30      	ldr	r2, [pc, #192]	@ (8009b10 <TIM_Base_SetConfig+0x138>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d01b      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a2f      	ldr	r2, [pc, #188]	@ (8009b14 <TIM_Base_SetConfig+0x13c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d017      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8009b18 <TIM_Base_SetConfig+0x140>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d013      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a2d      	ldr	r2, [pc, #180]	@ (8009b1c <TIM_Base_SetConfig+0x144>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d00f      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8009b20 <TIM_Base_SetConfig+0x148>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00b      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2b      	ldr	r2, [pc, #172]	@ (8009b24 <TIM_Base_SetConfig+0x14c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d007      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8009b28 <TIM_Base_SetConfig+0x150>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d003      	beq.n	8009a8a <TIM_Base_SetConfig+0xb2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a29      	ldr	r2, [pc, #164]	@ (8009b2c <TIM_Base_SetConfig+0x154>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d108      	bne.n	8009a9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a10      	ldr	r2, [pc, #64]	@ (8009b04 <TIM_Base_SetConfig+0x12c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d003      	beq.n	8009ad0 <TIM_Base_SetConfig+0xf8>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a12      	ldr	r2, [pc, #72]	@ (8009b14 <TIM_Base_SetConfig+0x13c>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d103      	bne.n	8009ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	691a      	ldr	r2, [r3, #16]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d105      	bne.n	8009af6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	f023 0201 	bic.w	r2, r3, #1
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	611a      	str	r2, [r3, #16]
  }
}
 8009af6:	bf00      	nop
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40000400 	.word	0x40000400
 8009b0c:	40000800 	.word	0x40000800
 8009b10:	40000c00 	.word	0x40000c00
 8009b14:	40010400 	.word	0x40010400
 8009b18:	40014000 	.word	0x40014000
 8009b1c:	40014400 	.word	0x40014400
 8009b20:	40014800 	.word	0x40014800
 8009b24:	40001800 	.word	0x40001800
 8009b28:	40001c00 	.word	0x40001c00
 8009b2c:	40002000 	.word	0x40002000

08009b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	f023 0201 	bic.w	r2, r3, #1
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f023 0302 	bic.w	r3, r3, #2
 8009b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a20      	ldr	r2, [pc, #128]	@ (8009c08 <TIM_OC1_SetConfig+0xd8>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d003      	beq.n	8009b94 <TIM_OC1_SetConfig+0x64>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c0c <TIM_OC1_SetConfig+0xdc>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d10c      	bne.n	8009bae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f023 0308 	bic.w	r3, r3, #8
 8009b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f023 0304 	bic.w	r3, r3, #4
 8009bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a15      	ldr	r2, [pc, #84]	@ (8009c08 <TIM_OC1_SetConfig+0xd8>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d003      	beq.n	8009bbe <TIM_OC1_SetConfig+0x8e>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a14      	ldr	r2, [pc, #80]	@ (8009c0c <TIM_OC1_SetConfig+0xdc>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d111      	bne.n	8009be2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	695b      	ldr	r3, [r3, #20]
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	621a      	str	r2, [r3, #32]
}
 8009bfc:	bf00      	nop
 8009bfe:	371c      	adds	r7, #28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	40010000 	.word	0x40010000
 8009c0c:	40010400 	.word	0x40010400

08009c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	f023 0210 	bic.w	r2, r3, #16
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f023 0320 	bic.w	r3, r3, #32
 8009c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a22      	ldr	r2, [pc, #136]	@ (8009cf4 <TIM_OC2_SetConfig+0xe4>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <TIM_OC2_SetConfig+0x68>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a21      	ldr	r2, [pc, #132]	@ (8009cf8 <TIM_OC2_SetConfig+0xe8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d10d      	bne.n	8009c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a17      	ldr	r2, [pc, #92]	@ (8009cf4 <TIM_OC2_SetConfig+0xe4>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d003      	beq.n	8009ca4 <TIM_OC2_SetConfig+0x94>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a16      	ldr	r2, [pc, #88]	@ (8009cf8 <TIM_OC2_SetConfig+0xe8>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d113      	bne.n	8009ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	621a      	str	r2, [r3, #32]
}
 8009ce6:	bf00      	nop
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40010400 	.word	0x40010400

08009cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0303 	bic.w	r3, r3, #3
 8009d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	021b      	lsls	r3, r3, #8
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a21      	ldr	r2, [pc, #132]	@ (8009ddc <TIM_OC3_SetConfig+0xe0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d003      	beq.n	8009d62 <TIM_OC3_SetConfig+0x66>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a20      	ldr	r2, [pc, #128]	@ (8009de0 <TIM_OC3_SetConfig+0xe4>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d10d      	bne.n	8009d7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	021b      	lsls	r3, r3, #8
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a16      	ldr	r2, [pc, #88]	@ (8009ddc <TIM_OC3_SetConfig+0xe0>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d003      	beq.n	8009d8e <TIM_OC3_SetConfig+0x92>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a15      	ldr	r2, [pc, #84]	@ (8009de0 <TIM_OC3_SetConfig+0xe4>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d113      	bne.n	8009db6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	621a      	str	r2, [r3, #32]
}
 8009dd0:	bf00      	nop
 8009dd2:	371c      	adds	r7, #28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	40010000 	.word	0x40010000
 8009de0:	40010400 	.word	0x40010400

08009de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	031b      	lsls	r3, r3, #12
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a12      	ldr	r2, [pc, #72]	@ (8009e88 <TIM_OC4_SetConfig+0xa4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d003      	beq.n	8009e4c <TIM_OC4_SetConfig+0x68>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a11      	ldr	r2, [pc, #68]	@ (8009e8c <TIM_OC4_SetConfig+0xa8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d109      	bne.n	8009e60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	019b      	lsls	r3, r3, #6
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	621a      	str	r2, [r3, #32]
}
 8009e7a:	bf00      	nop
 8009e7c:	371c      	adds	r7, #28
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	40010000 	.word	0x40010000
 8009e8c:	40010400 	.word	0x40010400

08009e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	011b      	lsls	r3, r3, #4
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f023 030a 	bic.w	r3, r3, #10
 8009ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b087      	sub	sp, #28
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a1b      	ldr	r3, [r3, #32]
 8009f04:	f023 0210 	bic.w	r2, r3, #16
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	031b      	lsls	r3, r3, #12
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	621a      	str	r2, [r3, #32]
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	f043 0307 	orr.w	r3, r3, #7
 8009f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	609a      	str	r2, [r3, #8]
}
 8009f78:	bf00      	nop
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	021a      	lsls	r2, r3, #8
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	609a      	str	r2, [r3, #8]
}
 8009fb8:	bf00      	nop
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f003 031f 	and.w	r3, r3, #31
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6a1a      	ldr	r2, [r3, #32]
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	401a      	ands	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a1a      	ldr	r2, [r3, #32]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	f003 031f 	and.w	r3, r3, #31
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	621a      	str	r2, [r3, #32]
}
 800a002:	bf00      	nop
 800a004:	371c      	adds	r7, #28
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
	...

0800a010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a024:	2302      	movs	r3, #2
 800a026:	e05a      	b.n	800a0de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a21      	ldr	r2, [pc, #132]	@ (800a0ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d022      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a074:	d01d      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a1d      	ldr	r2, [pc, #116]	@ (800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d018      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a1b      	ldr	r2, [pc, #108]	@ (800a0f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d013      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a1a      	ldr	r2, [pc, #104]	@ (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d00e      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a18      	ldr	r2, [pc, #96]	@ (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d009      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a17      	ldr	r2, [pc, #92]	@ (800a100 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d004      	beq.n	800a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a15      	ldr	r2, [pc, #84]	@ (800a104 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d10c      	bne.n	800a0cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	40010000 	.word	0x40010000
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	40000c00 	.word	0x40000c00
 800a0fc:	40010400 	.word	0x40010400
 800a100:	40014000 	.word	0x40014000
 800a104:	40001800 	.word	0x40001800

0800a108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a120:	2302      	movs	r3, #2
 800a122:	e03d      	b.n	800a1a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	4313      	orrs	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e042      	b.n	800a244 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fa ff06 	bl	8004fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2224      	movs	r2, #36	@ 0x24
 800a1dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 ff77 	bl	800b0e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	691a      	ldr	r2, [r3, #16]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	695a      	ldr	r2, [r3, #20]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2220      	movs	r2, #32
 800a230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2220      	movs	r2, #32
 800a238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08c      	sub	sp, #48	@ 0x30
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b20      	cmp	r3, #32
 800a264:	d156      	bne.n	800a314 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <HAL_UART_Transmit_DMA+0x26>
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e04f      	b.n	800a316 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	88fa      	ldrh	r2, [r7, #6]
 800a280:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	88fa      	ldrh	r2, [r7, #6]
 800a286:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2221      	movs	r2, #33	@ 0x21
 800a292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29a:	4a21      	ldr	r2, [pc, #132]	@ (800a320 <HAL_UART_Transmit_DMA+0xd4>)
 800a29c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a2:	4a20      	ldr	r2, [pc, #128]	@ (800a324 <HAL_UART_Transmit_DMA+0xd8>)
 800a2a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2aa:	4a1f      	ldr	r2, [pc, #124]	@ (800a328 <HAL_UART_Transmit_DMA+0xdc>)
 800a2ac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a2b6:	f107 0308 	add.w	r3, r7, #8
 800a2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c2:	6819      	ldr	r1, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	f7fc fadf 	bl	8006890 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a2da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3314      	adds	r3, #20
 800a2e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3314      	adds	r3, #20
 800a2fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2fc:	627a      	str	r2, [r7, #36]	@ 0x24
 800a2fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6a39      	ldr	r1, [r7, #32]
 800a302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	61fb      	str	r3, [r7, #28]
   return(result);
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e5      	bne.n	800a2dc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	e000      	b.n	800a316 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a314:	2302      	movs	r3, #2
  }
}
 800a316:	4618      	mov	r0, r3
 800a318:	3730      	adds	r7, #48	@ 0x30
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	0800a971 	.word	0x0800a971
 800a324:	0800aa0b 	.word	0x0800aa0b
 800a328:	0800ab8f 	.word	0x0800ab8f

0800a32c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08c      	sub	sp, #48	@ 0x30
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b20      	cmp	r3, #32
 800a344:	d14a      	bne.n	800a3dc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e043      	b.n	800a3de <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	461a      	mov	r2, r3
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fc5b 	bl	800ac24 <UART_Start_Receive_DMA>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a374:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d12c      	bne.n	800a3d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a380:	2b01      	cmp	r3, #1
 800a382:	d125      	bne.n	800a3d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a384:	2300      	movs	r3, #0
 800a386:	613b      	str	r3, [r7, #16]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	613b      	str	r3, [r7, #16]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	330c      	adds	r3, #12
 800a3a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	e853 3f00 	ldrex	r3, [r3]
 800a3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f043 0310 	orr.w	r3, r3, #16
 800a3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800a3bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3be:	6a39      	ldr	r1, [r7, #32]
 800a3c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3c2:	e841 2300 	strex	r3, r2, [r1]
 800a3c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1e5      	bne.n	800a39a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a3ce:	e002      	b.n	800a3d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a3d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3da:	e000      	b.n	800a3de <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800a3dc:	2302      	movs	r3, #2
  }
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3730      	adds	r7, #48	@ 0x30
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
	...

0800a3e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b0ba      	sub	sp, #232	@ 0xe8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a40e:	2300      	movs	r3, #0
 800a410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a414:	2300      	movs	r3, #0
 800a416:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a41e:	f003 030f 	and.w	r3, r3, #15
 800a422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10f      	bne.n	800a44e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a432:	f003 0320 	and.w	r3, r3, #32
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <HAL_UART_IRQHandler+0x66>
 800a43a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fd8d 	bl	800af66 <UART_Receive_IT>
      return;
 800a44c:	e25b      	b.n	800a906 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a44e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 80de 	beq.w	800a614 <HAL_UART_IRQHandler+0x22c>
 800a458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b00      	cmp	r3, #0
 800a462:	d106      	bne.n	800a472 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a468:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80d1 	beq.w	800a614 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <HAL_UART_IRQHandler+0xae>
 800a47e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a48e:	f043 0201 	orr.w	r2, r3, #1
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a49a:	f003 0304 	and.w	r3, r3, #4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00b      	beq.n	800a4ba <HAL_UART_IRQHandler+0xd2>
 800a4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d005      	beq.n	800a4ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b2:	f043 0202 	orr.w	r2, r3, #2
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00b      	beq.n	800a4de <HAL_UART_IRQHandler+0xf6>
 800a4c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d005      	beq.n	800a4de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4d6:	f043 0204 	orr.w	r2, r3, #4
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4e2:	f003 0308 	and.w	r3, r3, #8
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d011      	beq.n	800a50e <HAL_UART_IRQHandler+0x126>
 800a4ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4ee:	f003 0320 	and.w	r3, r3, #32
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d005      	beq.n	800a50e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a506:	f043 0208 	orr.w	r2, r3, #8
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 81f2 	beq.w	800a8fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a51c:	f003 0320 	and.w	r3, r3, #32
 800a520:	2b00      	cmp	r3, #0
 800a522:	d008      	beq.n	800a536 <HAL_UART_IRQHandler+0x14e>
 800a524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a528:	f003 0320 	and.w	r3, r3, #32
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d002      	beq.n	800a536 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fd18 	bl	800af66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a540:	2b40      	cmp	r3, #64	@ 0x40
 800a542:	bf0c      	ite	eq
 800a544:	2301      	moveq	r3, #1
 800a546:	2300      	movne	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <HAL_UART_IRQHandler+0x17a>
 800a55a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d04f      	beq.n	800a602 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fc20 	bl	800ada8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a572:	2b40      	cmp	r3, #64	@ 0x40
 800a574:	d141      	bne.n	800a5fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3314      	adds	r3, #20
 800a57c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a58c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3314      	adds	r3, #20
 800a59e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a5a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a5a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a5ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a5b2:	e841 2300 	strex	r3, r2, [r1]
 800a5b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1d9      	bne.n	800a576 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d013      	beq.n	800a5f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ce:	4a7e      	ldr	r2, [pc, #504]	@ (800a7c8 <HAL_UART_IRQHandler+0x3e0>)
 800a5d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fc fa22 	bl	8006a20 <HAL_DMA_Abort_IT>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d016      	beq.n	800a610 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f0:	e00e      	b.n	800a610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f9b2 	bl	800a95c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f8:	e00a      	b.n	800a610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f9ae 	bl	800a95c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a600:	e006      	b.n	800a610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f9aa 	bl	800a95c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a60e:	e175      	b.n	800a8fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a610:	bf00      	nop
    return;
 800a612:	e173      	b.n	800a8fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a618:	2b01      	cmp	r3, #1
 800a61a:	f040 814f 	bne.w	800a8bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 8148 	beq.w	800a8bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a630:	f003 0310 	and.w	r3, r3, #16
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8141 	beq.w	800a8bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a63a:	2300      	movs	r3, #0
 800a63c:	60bb      	str	r3, [r7, #8]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60bb      	str	r3, [r7, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	60bb      	str	r3, [r7, #8]
 800a64e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a65a:	2b40      	cmp	r3, #64	@ 0x40
 800a65c:	f040 80b6 	bne.w	800a7cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a66c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 8145 	beq.w	800a900 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a67a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a67e:	429a      	cmp	r2, r3
 800a680:	f080 813e 	bcs.w	800a900 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a68a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a696:	f000 8088 	beq.w	800a7aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	330c      	adds	r3, #12
 800a6a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a6a8:	e853 3f00 	ldrex	r3, [r3]
 800a6ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a6b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	330c      	adds	r3, #12
 800a6c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a6c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a6ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1d9      	bne.n	800a69a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3314      	adds	r3, #20
 800a6ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6f8:	f023 0301 	bic.w	r3, r3, #1
 800a6fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3314      	adds	r3, #20
 800a706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a70a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a70e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a712:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a71c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e1      	bne.n	800a6e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3314      	adds	r3, #20
 800a728:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3314      	adds	r3, #20
 800a742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a748:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a74c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e3      	bne.n	800a722 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	330c      	adds	r3, #12
 800a76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a772:	e853 3f00 	ldrex	r3, [r3]
 800a776:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a77a:	f023 0310 	bic.w	r3, r3, #16
 800a77e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	330c      	adds	r3, #12
 800a788:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a78c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a78e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a790:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a792:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a794:	e841 2300 	strex	r3, r2, [r1]
 800a798:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a79a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e3      	bne.n	800a768 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fc f8cb 	bl	8006940 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7f7 fe6f 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a7c6:	e09b      	b.n	800a900 <HAL_UART_IRQHandler+0x518>
 800a7c8:	0800ae6f 	.word	0x0800ae6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 808e 	beq.w	800a904 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a7e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8089 	beq.w	800a904 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	330c      	adds	r3, #12
 800a7f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a808:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	330c      	adds	r3, #12
 800a812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a816:	647a      	str	r2, [r7, #68]	@ 0x44
 800a818:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a81c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e3      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3314      	adds	r3, #20
 800a830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	623b      	str	r3, [r7, #32]
   return(result);
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	f023 0301 	bic.w	r3, r3, #1
 800a840:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3314      	adds	r3, #20
 800a84a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a84e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e3      	bne.n	800a82a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	330c      	adds	r3, #12
 800a876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	e853 3f00 	ldrex	r3, [r3]
 800a87e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0310 	bic.w	r3, r3, #16
 800a886:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	330c      	adds	r3, #12
 800a890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a894:	61fa      	str	r2, [r7, #28]
 800a896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	69b9      	ldr	r1, [r7, #24]
 800a89a:	69fa      	ldr	r2, [r7, #28]
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e3      	bne.n	800a870 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7f7 fdf5 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8ba:	e023      	b.n	800a904 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d009      	beq.n	800a8dc <HAL_UART_IRQHandler+0x4f4>
 800a8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fade 	bl	800ae96 <UART_Transmit_IT>
    return;
 800a8da:	e014      	b.n	800a906 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00e      	beq.n	800a906 <HAL_UART_IRQHandler+0x51e>
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d008      	beq.n	800a906 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fb1e 	bl	800af36 <UART_EndTransmit_IT>
    return;
 800a8fa:	e004      	b.n	800a906 <HAL_UART_IRQHandler+0x51e>
    return;
 800a8fc:	bf00      	nop
 800a8fe:	e002      	b.n	800a906 <HAL_UART_IRQHandler+0x51e>
      return;
 800a900:	bf00      	nop
 800a902:	e000      	b.n	800a906 <HAL_UART_IRQHandler+0x51e>
      return;
 800a904:	bf00      	nop
  }
}
 800a906:	37e8      	adds	r7, #232	@ 0xe8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b090      	sub	sp, #64	@ 0x40
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d137      	bne.n	800a9fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98e:	2200      	movs	r2, #0
 800a990:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3314      	adds	r3, #20
 800a998:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	623b      	str	r3, [r7, #32]
   return(result);
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3314      	adds	r3, #20
 800a9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e5      	bne.n	800a992 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	330c      	adds	r3, #12
 800a9cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	330c      	adds	r3, #12
 800a9e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9e6:	61fa      	str	r2, [r7, #28]
 800a9e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ea:	69b9      	ldr	r1, [r7, #24]
 800a9ec:	69fa      	ldr	r2, [r7, #28]
 800a9ee:	e841 2300 	strex	r3, r2, [r1]
 800a9f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1e5      	bne.n	800a9c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9fa:	e002      	b.n	800aa02 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a9fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a9fe:	f7ff ff85 	bl	800a90c <HAL_UART_TxCpltCallback>
}
 800aa02:	bf00      	nop
 800aa04:	3740      	adds	r7, #64	@ 0x40
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa16:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f7ff ff81 	bl	800a920 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b09c      	sub	sp, #112	@ 0x70
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d172      	bne.n	800ab28 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa44:	2200      	movs	r2, #0
 800aa46:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa52:	e853 3f00 	ldrex	r3, [r3]
 800aa56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330c      	adds	r3, #12
 800aa66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa68:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa70:	e841 2300 	strex	r3, r2, [r1]
 800aa74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e5      	bne.n	800aa48 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3314      	adds	r3, #20
 800aa82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa86:	e853 3f00 	ldrex	r3, [r3]
 800aa8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8e:	f023 0301 	bic.w	r3, r3, #1
 800aa92:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3314      	adds	r3, #20
 800aa9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa9c:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa9e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaa4:	e841 2300 	strex	r3, r2, [r1]
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1e5      	bne.n	800aa7c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3314      	adds	r3, #20
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	e853 3f00 	ldrex	r3, [r3]
 800aabe:	623b      	str	r3, [r7, #32]
   return(result);
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aac6:	663b      	str	r3, [r7, #96]	@ 0x60
 800aac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3314      	adds	r3, #20
 800aace:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aad0:	633a      	str	r2, [r7, #48]	@ 0x30
 800aad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aad8:	e841 2300 	strex	r3, r2, [r1]
 800aadc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e5      	bne.n	800aab0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae6:	2220      	movs	r2, #32
 800aae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d119      	bne.n	800ab28 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	330c      	adds	r3, #12
 800aafa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	e853 3f00 	ldrex	r3, [r3]
 800ab02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f023 0310 	bic.w	r3, r3, #16
 800ab0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	330c      	adds	r3, #12
 800ab12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab14:	61fa      	str	r2, [r7, #28]
 800ab16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab18:	69b9      	ldr	r1, [r7, #24]
 800ab1a:	69fa      	ldr	r2, [r7, #28]
 800ab1c:	e841 2300 	strex	r3, r2, [r1]
 800ab20:	617b      	str	r3, [r7, #20]
   return(result);
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1e5      	bne.n	800aaf4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d106      	bne.n	800ab44 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab3e:	f7f7 fcb1 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab42:	e002      	b.n	800ab4a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ab44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab46:	f7ff fef5 	bl	800a934 <HAL_UART_RxCpltCallback>
}
 800ab4a:	bf00      	nop
 800ab4c:	3770      	adds	r7, #112	@ 0x70
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2201      	movs	r2, #1
 800ab64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d108      	bne.n	800ab80 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab72:	085b      	lsrs	r3, r3, #1
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	4619      	mov	r1, r3
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f7f7 fc93 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab7e:	e002      	b.n	800ab86 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fee1 	bl	800a948 <HAL_UART_RxHalfCpltCallback>
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abaa:	2b80      	cmp	r3, #128	@ 0x80
 800abac:	bf0c      	ite	eq
 800abae:	2301      	moveq	r3, #1
 800abb0:	2300      	movne	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b21      	cmp	r3, #33	@ 0x21
 800abc0:	d108      	bne.n	800abd4 <UART_DMAError+0x46>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2200      	movs	r2, #0
 800abcc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800abce:	68b8      	ldr	r0, [r7, #8]
 800abd0:	f000 f8c2 	bl	800ad58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abde:	2b40      	cmp	r3, #64	@ 0x40
 800abe0:	bf0c      	ite	eq
 800abe2:	2301      	moveq	r3, #1
 800abe4:	2300      	movne	r3, #0
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b22      	cmp	r3, #34	@ 0x22
 800abf4:	d108      	bne.n	800ac08 <UART_DMAError+0x7a>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2200      	movs	r2, #0
 800ac00:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ac02:	68b8      	ldr	r0, [r7, #8]
 800ac04:	f000 f8d0 	bl	800ada8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac0c:	f043 0210 	orr.w	r2, r3, #16
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac14:	68b8      	ldr	r0, [r7, #8]
 800ac16:	f7ff fea1 	bl	800a95c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
	...

0800ac24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b098      	sub	sp, #96	@ 0x60
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	88fa      	ldrh	r2, [r7, #6]
 800ac3c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2222      	movs	r2, #34	@ 0x22
 800ac48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac50:	4a3e      	ldr	r2, [pc, #248]	@ (800ad4c <UART_Start_Receive_DMA+0x128>)
 800ac52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac58:	4a3d      	ldr	r2, [pc, #244]	@ (800ad50 <UART_Start_Receive_DMA+0x12c>)
 800ac5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac60:	4a3c      	ldr	r2, [pc, #240]	@ (800ad54 <UART_Start_Receive_DMA+0x130>)
 800ac62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac68:	2200      	movs	r2, #0
 800ac6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	88fb      	ldrh	r3, [r7, #6]
 800ac84:	f7fb fe04 	bl	8006890 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ac88:	2300      	movs	r3, #0
 800ac8a:	613b      	str	r3, [r7, #16]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	613b      	str	r3, [r7, #16]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	613b      	str	r3, [r7, #16]
 800ac9c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d019      	beq.n	800acda <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	330c      	adds	r3, #12
 800acac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	330c      	adds	r3, #12
 800acc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acc6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800acc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800accc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800acd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e5      	bne.n	800aca6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3314      	adds	r3, #20
 800ace0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acec:	f043 0301 	orr.w	r3, r3, #1
 800acf0:	657b      	str	r3, [r7, #84]	@ 0x54
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3314      	adds	r3, #20
 800acf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acfa:	63ba      	str	r2, [r7, #56]	@ 0x38
 800acfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ad00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e5      	bne.n	800acda <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3314      	adds	r3, #20
 800ad14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad24:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3314      	adds	r3, #20
 800ad2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ad2e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	6a39      	ldr	r1, [r7, #32]
 800ad34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e5      	bne.n	800ad0e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3760      	adds	r7, #96	@ 0x60
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	0800aa27 	.word	0x0800aa27
 800ad50:	0800ab53 	.word	0x0800ab53
 800ad54:	0800ab8f 	.word	0x0800ab8f

0800ad58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b089      	sub	sp, #36	@ 0x24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	330c      	adds	r3, #12
 800ad66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	e853 3f00 	ldrex	r3, [r3]
 800ad6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad76:	61fb      	str	r3, [r7, #28]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	69fa      	ldr	r2, [r7, #28]
 800ad80:	61ba      	str	r2, [r7, #24]
 800ad82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6979      	ldr	r1, [r7, #20]
 800ad86:	69ba      	ldr	r2, [r7, #24]
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e5      	bne.n	800ad60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ad9c:	bf00      	nop
 800ad9e:	3724      	adds	r7, #36	@ 0x24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b095      	sub	sp, #84	@ 0x54
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	330c      	adds	r3, #12
 800adb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	330c      	adds	r3, #12
 800adce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800add0:	643a      	str	r2, [r7, #64]	@ 0x40
 800add2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800add6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e5      	bne.n	800adb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3314      	adds	r3, #20
 800adea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	f023 0301 	bic.w	r3, r3, #1
 800adfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3314      	adds	r3, #20
 800ae02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae0c:	e841 2300 	strex	r3, r2, [r1]
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e5      	bne.n	800ade4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d119      	bne.n	800ae54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	330c      	adds	r3, #12
 800ae26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	e853 3f00 	ldrex	r3, [r3]
 800ae2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f023 0310 	bic.w	r3, r3, #16
 800ae36:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae40:	61ba      	str	r2, [r7, #24]
 800ae42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae44:	6979      	ldr	r1, [r7, #20]
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	e841 2300 	strex	r3, r2, [r1]
 800ae4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e5      	bne.n	800ae20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2220      	movs	r2, #32
 800ae58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ae62:	bf00      	nop
 800ae64:	3754      	adds	r7, #84	@ 0x54
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7ff fd67 	bl	800a95c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8e:	bf00      	nop
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae96:	b480      	push	{r7}
 800ae98:	b085      	sub	sp, #20
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b21      	cmp	r3, #33	@ 0x21
 800aea8:	d13e      	bne.n	800af28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeb2:	d114      	bne.n	800aede <UART_Transmit_IT+0x48>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d110      	bne.n	800aede <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a1b      	ldr	r3, [r3, #32]
 800aec0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aed0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	1c9a      	adds	r2, r3, #2
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	621a      	str	r2, [r3, #32]
 800aedc:	e008      	b.n	800aef0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	1c59      	adds	r1, r3, #1
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	6211      	str	r1, [r2, #32]
 800aee8:	781a      	ldrb	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	3b01      	subs	r3, #1
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	4619      	mov	r1, r3
 800aefe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10f      	bne.n	800af24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800af12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68da      	ldr	r2, [r3, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	e000      	b.n	800af2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af28:	2302      	movs	r3, #2
  }
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68da      	ldr	r2, [r3, #12]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff fcd8 	bl	800a90c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b08c      	sub	sp, #48	@ 0x30
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b22      	cmp	r3, #34	@ 0x22
 800af78:	f040 80ae 	bne.w	800b0d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af84:	d117      	bne.n	800afb6 <UART_Receive_IT+0x50>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d113      	bne.n	800afb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af96:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afae:	1c9a      	adds	r2, r3, #2
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	629a      	str	r2, [r3, #40]	@ 0x28
 800afb4:	e026      	b.n	800b004 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800afbc:	2300      	movs	r3, #0
 800afbe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afc8:	d007      	beq.n	800afda <UART_Receive_IT+0x74>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10a      	bne.n	800afe8 <UART_Receive_IT+0x82>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d106      	bne.n	800afe8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	e008      	b.n	800affa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b008:	b29b      	uxth	r3, r3
 800b00a:	3b01      	subs	r3, #1
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	4619      	mov	r1, r3
 800b012:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b014:	2b00      	cmp	r3, #0
 800b016:	d15d      	bne.n	800b0d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 0220 	bic.w	r2, r2, #32
 800b026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	695a      	ldr	r2, [r3, #20]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f022 0201 	bic.w	r2, r2, #1
 800b046:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2220      	movs	r2, #32
 800b04c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d135      	bne.n	800b0ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	330c      	adds	r3, #12
 800b06a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	e853 3f00 	ldrex	r3, [r3]
 800b072:	613b      	str	r3, [r7, #16]
   return(result);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f023 0310 	bic.w	r3, r3, #16
 800b07a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	330c      	adds	r3, #12
 800b082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b084:	623a      	str	r2, [r7, #32]
 800b086:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b088:	69f9      	ldr	r1, [r7, #28]
 800b08a:	6a3a      	ldr	r2, [r7, #32]
 800b08c:	e841 2300 	strex	r3, r2, [r1]
 800b090:	61bb      	str	r3, [r7, #24]
   return(result);
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e5      	bne.n	800b064 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0310 	and.w	r3, r3, #16
 800b0a2:	2b10      	cmp	r3, #16
 800b0a4:	d10a      	bne.n	800b0bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7f7 f9ee 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
 800b0c8:	e002      	b.n	800b0d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff fc32 	bl	800a934 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	e002      	b.n	800b0da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e000      	b.n	800b0da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b0d8:	2302      	movs	r3, #2
  }
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3730      	adds	r7, #48	@ 0x30
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0e8:	b0c0      	sub	sp, #256	@ 0x100
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b100:	68d9      	ldr	r1, [r3, #12]
 800b102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	ea40 0301 	orr.w	r3, r0, r1
 800b10c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	431a      	orrs	r2, r3
 800b11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	431a      	orrs	r2, r3
 800b124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b13c:	f021 010c 	bic.w	r1, r1, #12
 800b140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b14a:	430b      	orrs	r3, r1
 800b14c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	695b      	ldr	r3, [r3, #20]
 800b156:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b15e:	6999      	ldr	r1, [r3, #24]
 800b160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	ea40 0301 	orr.w	r3, r0, r1
 800b16a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	4b8f      	ldr	r3, [pc, #572]	@ (800b3b0 <UART_SetConfig+0x2cc>)
 800b174:	429a      	cmp	r2, r3
 800b176:	d005      	beq.n	800b184 <UART_SetConfig+0xa0>
 800b178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	4b8d      	ldr	r3, [pc, #564]	@ (800b3b4 <UART_SetConfig+0x2d0>)
 800b180:	429a      	cmp	r2, r3
 800b182:	d104      	bne.n	800b18e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b184:	f7fd fd1a 	bl	8008bbc <HAL_RCC_GetPCLK2Freq>
 800b188:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b18c:	e003      	b.n	800b196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b18e:	f7fd fd01 	bl	8008b94 <HAL_RCC_GetPCLK1Freq>
 800b192:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b19a:	69db      	ldr	r3, [r3, #28]
 800b19c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1a0:	f040 810c 	bne.w	800b3bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b1b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b1b6:	4622      	mov	r2, r4
 800b1b8:	462b      	mov	r3, r5
 800b1ba:	1891      	adds	r1, r2, r2
 800b1bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b1be:	415b      	adcs	r3, r3
 800b1c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	eb12 0801 	adds.w	r8, r2, r1
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	eb43 0901 	adc.w	r9, r3, r1
 800b1d2:	f04f 0200 	mov.w	r2, #0
 800b1d6:	f04f 0300 	mov.w	r3, #0
 800b1da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1e6:	4690      	mov	r8, r2
 800b1e8:	4699      	mov	r9, r3
 800b1ea:	4623      	mov	r3, r4
 800b1ec:	eb18 0303 	adds.w	r3, r8, r3
 800b1f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b1f4:	462b      	mov	r3, r5
 800b1f6:	eb49 0303 	adc.w	r3, r9, r3
 800b1fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b20a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b20e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b212:	460b      	mov	r3, r1
 800b214:	18db      	adds	r3, r3, r3
 800b216:	653b      	str	r3, [r7, #80]	@ 0x50
 800b218:	4613      	mov	r3, r2
 800b21a:	eb42 0303 	adc.w	r3, r2, r3
 800b21e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b228:	f7f5 fcbe 	bl	8000ba8 <__aeabi_uldivmod>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4b61      	ldr	r3, [pc, #388]	@ (800b3b8 <UART_SetConfig+0x2d4>)
 800b232:	fba3 2302 	umull	r2, r3, r3, r2
 800b236:	095b      	lsrs	r3, r3, #5
 800b238:	011c      	lsls	r4, r3, #4
 800b23a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b23e:	2200      	movs	r2, #0
 800b240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b244:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b24c:	4642      	mov	r2, r8
 800b24e:	464b      	mov	r3, r9
 800b250:	1891      	adds	r1, r2, r2
 800b252:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b254:	415b      	adcs	r3, r3
 800b256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b25c:	4641      	mov	r1, r8
 800b25e:	eb12 0a01 	adds.w	sl, r2, r1
 800b262:	4649      	mov	r1, r9
 800b264:	eb43 0b01 	adc.w	fp, r3, r1
 800b268:	f04f 0200 	mov.w	r2, #0
 800b26c:	f04f 0300 	mov.w	r3, #0
 800b270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b27c:	4692      	mov	sl, r2
 800b27e:	469b      	mov	fp, r3
 800b280:	4643      	mov	r3, r8
 800b282:	eb1a 0303 	adds.w	r3, sl, r3
 800b286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b28a:	464b      	mov	r3, r9
 800b28c:	eb4b 0303 	adc.w	r3, fp, r3
 800b290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b2a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	18db      	adds	r3, r3, r3
 800b2ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	eb42 0303 	adc.w	r3, r2, r3
 800b2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b2ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b2be:	f7f5 fc73 	bl	8000ba8 <__aeabi_uldivmod>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4b3b      	ldr	r3, [pc, #236]	@ (800b3b8 <UART_SetConfig+0x2d4>)
 800b2ca:	fba3 2301 	umull	r2, r3, r3, r1
 800b2ce:	095b      	lsrs	r3, r3, #5
 800b2d0:	2264      	movs	r2, #100	@ 0x64
 800b2d2:	fb02 f303 	mul.w	r3, r2, r3
 800b2d6:	1acb      	subs	r3, r1, r3
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b2de:	4b36      	ldr	r3, [pc, #216]	@ (800b3b8 <UART_SetConfig+0x2d4>)
 800b2e0:	fba3 2302 	umull	r2, r3, r3, r2
 800b2e4:	095b      	lsrs	r3, r3, #5
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b2ec:	441c      	add	r4, r3
 800b2ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b2fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b300:	4642      	mov	r2, r8
 800b302:	464b      	mov	r3, r9
 800b304:	1891      	adds	r1, r2, r2
 800b306:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b308:	415b      	adcs	r3, r3
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b30c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b310:	4641      	mov	r1, r8
 800b312:	1851      	adds	r1, r2, r1
 800b314:	6339      	str	r1, [r7, #48]	@ 0x30
 800b316:	4649      	mov	r1, r9
 800b318:	414b      	adcs	r3, r1
 800b31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b31c:	f04f 0200 	mov.w	r2, #0
 800b320:	f04f 0300 	mov.w	r3, #0
 800b324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b328:	4659      	mov	r1, fp
 800b32a:	00cb      	lsls	r3, r1, #3
 800b32c:	4651      	mov	r1, sl
 800b32e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b332:	4651      	mov	r1, sl
 800b334:	00ca      	lsls	r2, r1, #3
 800b336:	4610      	mov	r0, r2
 800b338:	4619      	mov	r1, r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	4642      	mov	r2, r8
 800b33e:	189b      	adds	r3, r3, r2
 800b340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b344:	464b      	mov	r3, r9
 800b346:	460a      	mov	r2, r1
 800b348:	eb42 0303 	adc.w	r3, r2, r3
 800b34c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b35c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b364:	460b      	mov	r3, r1
 800b366:	18db      	adds	r3, r3, r3
 800b368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b36a:	4613      	mov	r3, r2
 800b36c:	eb42 0303 	adc.w	r3, r2, r3
 800b370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b37a:	f7f5 fc15 	bl	8000ba8 <__aeabi_uldivmod>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b8 <UART_SetConfig+0x2d4>)
 800b384:	fba3 1302 	umull	r1, r3, r3, r2
 800b388:	095b      	lsrs	r3, r3, #5
 800b38a:	2164      	movs	r1, #100	@ 0x64
 800b38c:	fb01 f303 	mul.w	r3, r1, r3
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	3332      	adds	r3, #50	@ 0x32
 800b396:	4a08      	ldr	r2, [pc, #32]	@ (800b3b8 <UART_SetConfig+0x2d4>)
 800b398:	fba2 2303 	umull	r2, r3, r2, r3
 800b39c:	095b      	lsrs	r3, r3, #5
 800b39e:	f003 0207 	and.w	r2, r3, #7
 800b3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4422      	add	r2, r4
 800b3aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b3ac:	e106      	b.n	800b5bc <UART_SetConfig+0x4d8>
 800b3ae:	bf00      	nop
 800b3b0:	40011000 	.word	0x40011000
 800b3b4:	40011400 	.word	0x40011400
 800b3b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b3c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b3ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b3ce:	4642      	mov	r2, r8
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	1891      	adds	r1, r2, r2
 800b3d4:	6239      	str	r1, [r7, #32]
 800b3d6:	415b      	adcs	r3, r3
 800b3d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b3de:	4641      	mov	r1, r8
 800b3e0:	1854      	adds	r4, r2, r1
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	eb43 0501 	adc.w	r5, r3, r1
 800b3e8:	f04f 0200 	mov.w	r2, #0
 800b3ec:	f04f 0300 	mov.w	r3, #0
 800b3f0:	00eb      	lsls	r3, r5, #3
 800b3f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b3f6:	00e2      	lsls	r2, r4, #3
 800b3f8:	4614      	mov	r4, r2
 800b3fa:	461d      	mov	r5, r3
 800b3fc:	4643      	mov	r3, r8
 800b3fe:	18e3      	adds	r3, r4, r3
 800b400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b404:	464b      	mov	r3, r9
 800b406:	eb45 0303 	adc.w	r3, r5, r3
 800b40a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b40e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b41a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b41e:	f04f 0200 	mov.w	r2, #0
 800b422:	f04f 0300 	mov.w	r3, #0
 800b426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b42a:	4629      	mov	r1, r5
 800b42c:	008b      	lsls	r3, r1, #2
 800b42e:	4621      	mov	r1, r4
 800b430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b434:	4621      	mov	r1, r4
 800b436:	008a      	lsls	r2, r1, #2
 800b438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b43c:	f7f5 fbb4 	bl	8000ba8 <__aeabi_uldivmod>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4b60      	ldr	r3, [pc, #384]	@ (800b5c8 <UART_SetConfig+0x4e4>)
 800b446:	fba3 2302 	umull	r2, r3, r3, r2
 800b44a:	095b      	lsrs	r3, r3, #5
 800b44c:	011c      	lsls	r4, r3, #4
 800b44e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b452:	2200      	movs	r2, #0
 800b454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b458:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b45c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b460:	4642      	mov	r2, r8
 800b462:	464b      	mov	r3, r9
 800b464:	1891      	adds	r1, r2, r2
 800b466:	61b9      	str	r1, [r7, #24]
 800b468:	415b      	adcs	r3, r3
 800b46a:	61fb      	str	r3, [r7, #28]
 800b46c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b470:	4641      	mov	r1, r8
 800b472:	1851      	adds	r1, r2, r1
 800b474:	6139      	str	r1, [r7, #16]
 800b476:	4649      	mov	r1, r9
 800b478:	414b      	adcs	r3, r1
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	f04f 0300 	mov.w	r3, #0
 800b484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b488:	4659      	mov	r1, fp
 800b48a:	00cb      	lsls	r3, r1, #3
 800b48c:	4651      	mov	r1, sl
 800b48e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b492:	4651      	mov	r1, sl
 800b494:	00ca      	lsls	r2, r1, #3
 800b496:	4610      	mov	r0, r2
 800b498:	4619      	mov	r1, r3
 800b49a:	4603      	mov	r3, r0
 800b49c:	4642      	mov	r2, r8
 800b49e:	189b      	adds	r3, r3, r2
 800b4a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	460a      	mov	r2, r1
 800b4a8:	eb42 0303 	adc.w	r3, r2, r3
 800b4ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b4ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b4bc:	f04f 0200 	mov.w	r2, #0
 800b4c0:	f04f 0300 	mov.w	r3, #0
 800b4c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	008b      	lsls	r3, r1, #2
 800b4cc:	4641      	mov	r1, r8
 800b4ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4d2:	4641      	mov	r1, r8
 800b4d4:	008a      	lsls	r2, r1, #2
 800b4d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b4da:	f7f5 fb65 	bl	8000ba8 <__aeabi_uldivmod>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	4b38      	ldr	r3, [pc, #224]	@ (800b5c8 <UART_SetConfig+0x4e4>)
 800b4e6:	fba3 2301 	umull	r2, r3, r3, r1
 800b4ea:	095b      	lsrs	r3, r3, #5
 800b4ec:	2264      	movs	r2, #100	@ 0x64
 800b4ee:	fb02 f303 	mul.w	r3, r2, r3
 800b4f2:	1acb      	subs	r3, r1, r3
 800b4f4:	011b      	lsls	r3, r3, #4
 800b4f6:	3332      	adds	r3, #50	@ 0x32
 800b4f8:	4a33      	ldr	r2, [pc, #204]	@ (800b5c8 <UART_SetConfig+0x4e4>)
 800b4fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fe:	095b      	lsrs	r3, r3, #5
 800b500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b504:	441c      	add	r4, r3
 800b506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b50a:	2200      	movs	r2, #0
 800b50c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b50e:	677a      	str	r2, [r7, #116]	@ 0x74
 800b510:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b514:	4642      	mov	r2, r8
 800b516:	464b      	mov	r3, r9
 800b518:	1891      	adds	r1, r2, r2
 800b51a:	60b9      	str	r1, [r7, #8]
 800b51c:	415b      	adcs	r3, r3
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b524:	4641      	mov	r1, r8
 800b526:	1851      	adds	r1, r2, r1
 800b528:	6039      	str	r1, [r7, #0]
 800b52a:	4649      	mov	r1, r9
 800b52c:	414b      	adcs	r3, r1
 800b52e:	607b      	str	r3, [r7, #4]
 800b530:	f04f 0200 	mov.w	r2, #0
 800b534:	f04f 0300 	mov.w	r3, #0
 800b538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b53c:	4659      	mov	r1, fp
 800b53e:	00cb      	lsls	r3, r1, #3
 800b540:	4651      	mov	r1, sl
 800b542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b546:	4651      	mov	r1, sl
 800b548:	00ca      	lsls	r2, r1, #3
 800b54a:	4610      	mov	r0, r2
 800b54c:	4619      	mov	r1, r3
 800b54e:	4603      	mov	r3, r0
 800b550:	4642      	mov	r2, r8
 800b552:	189b      	adds	r3, r3, r2
 800b554:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b556:	464b      	mov	r3, r9
 800b558:	460a      	mov	r2, r1
 800b55a:	eb42 0303 	adc.w	r3, r2, r3
 800b55e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	663b      	str	r3, [r7, #96]	@ 0x60
 800b56a:	667a      	str	r2, [r7, #100]	@ 0x64
 800b56c:	f04f 0200 	mov.w	r2, #0
 800b570:	f04f 0300 	mov.w	r3, #0
 800b574:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b578:	4649      	mov	r1, r9
 800b57a:	008b      	lsls	r3, r1, #2
 800b57c:	4641      	mov	r1, r8
 800b57e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b582:	4641      	mov	r1, r8
 800b584:	008a      	lsls	r2, r1, #2
 800b586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b58a:	f7f5 fb0d 	bl	8000ba8 <__aeabi_uldivmod>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c8 <UART_SetConfig+0x4e4>)
 800b594:	fba3 1302 	umull	r1, r3, r3, r2
 800b598:	095b      	lsrs	r3, r3, #5
 800b59a:	2164      	movs	r1, #100	@ 0x64
 800b59c:	fb01 f303 	mul.w	r3, r1, r3
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	011b      	lsls	r3, r3, #4
 800b5a4:	3332      	adds	r3, #50	@ 0x32
 800b5a6:	4a08      	ldr	r2, [pc, #32]	@ (800b5c8 <UART_SetConfig+0x4e4>)
 800b5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ac:	095b      	lsrs	r3, r3, #5
 800b5ae:	f003 020f 	and.w	r2, r3, #15
 800b5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4422      	add	r2, r4
 800b5ba:	609a      	str	r2, [r3, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5c8:	51eb851f 	.word	0x51eb851f

0800b5cc <__NVIC_SetPriority>:
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	db0a      	blt.n	800b5f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	490c      	ldr	r1, [pc, #48]	@ (800b618 <__NVIC_SetPriority+0x4c>)
 800b5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5ea:	0112      	lsls	r2, r2, #4
 800b5ec:	b2d2      	uxtb	r2, r2
 800b5ee:	440b      	add	r3, r1
 800b5f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b5f4:	e00a      	b.n	800b60c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	4908      	ldr	r1, [pc, #32]	@ (800b61c <__NVIC_SetPriority+0x50>)
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	f003 030f 	and.w	r3, r3, #15
 800b602:	3b04      	subs	r3, #4
 800b604:	0112      	lsls	r2, r2, #4
 800b606:	b2d2      	uxtb	r2, r2
 800b608:	440b      	add	r3, r1
 800b60a:	761a      	strb	r2, [r3, #24]
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	e000e100 	.word	0xe000e100
 800b61c:	e000ed00 	.word	0xe000ed00

0800b620 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b624:	2100      	movs	r1, #0
 800b626:	f06f 0004 	mvn.w	r0, #4
 800b62a:	f7ff ffcf 	bl	800b5cc <__NVIC_SetPriority>
#endif
}
 800b62e:	bf00      	nop
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b63a:	f3ef 8305 	mrs	r3, IPSR
 800b63e:	603b      	str	r3, [r7, #0]
  return(result);
 800b640:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b646:	f06f 0305 	mvn.w	r3, #5
 800b64a:	607b      	str	r3, [r7, #4]
 800b64c:	e00c      	b.n	800b668 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b64e:	4b0a      	ldr	r3, [pc, #40]	@ (800b678 <osKernelInitialize+0x44>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b656:	4b08      	ldr	r3, [pc, #32]	@ (800b678 <osKernelInitialize+0x44>)
 800b658:	2201      	movs	r2, #1
 800b65a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	607b      	str	r3, [r7, #4]
 800b660:	e002      	b.n	800b668 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b668:	687b      	ldr	r3, [r7, #4]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	20000fc8 	.word	0x20000fc8

0800b67c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b682:	f3ef 8305 	mrs	r3, IPSR
 800b686:	603b      	str	r3, [r7, #0]
  return(result);
 800b688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b68e:	f06f 0305 	mvn.w	r3, #5
 800b692:	607b      	str	r3, [r7, #4]
 800b694:	e010      	b.n	800b6b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b696:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c4 <osKernelStart+0x48>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d109      	bne.n	800b6b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b69e:	f7ff ffbf 	bl	800b620 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b6a2:	4b08      	ldr	r3, [pc, #32]	@ (800b6c4 <osKernelStart+0x48>)
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b6a8:	f001 f892 	bl	800c7d0 <vTaskStartScheduler>
      stat = osOK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	607b      	str	r3, [r7, #4]
 800b6b0:	e002      	b.n	800b6b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b6b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b6b8:	687b      	ldr	r3, [r7, #4]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20000fc8 	.word	0x20000fc8

0800b6c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08e      	sub	sp, #56	@ 0x38
 800b6cc:	af04      	add	r7, sp, #16
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6d8:	f3ef 8305 	mrs	r3, IPSR
 800b6dc:	617b      	str	r3, [r7, #20]
  return(result);
 800b6de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d17e      	bne.n	800b7e2 <osThreadNew+0x11a>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d07b      	beq.n	800b7e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b6ea:	2380      	movs	r3, #128	@ 0x80
 800b6ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b6ee:	2318      	movs	r3, #24
 800b6f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b6f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d045      	beq.n	800b78e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <osThreadNew+0x48>
        name = attr->name;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d008      	beq.n	800b736 <osThreadNew+0x6e>
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	2b38      	cmp	r3, #56	@ 0x38
 800b728:	d805      	bhi.n	800b736 <osThreadNew+0x6e>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <osThreadNew+0x72>
        return (NULL);
 800b736:	2300      	movs	r3, #0
 800b738:	e054      	b.n	800b7e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	089b      	lsrs	r3, r3, #2
 800b748:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00e      	beq.n	800b770 <osThreadNew+0xa8>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	2ba7      	cmp	r3, #167	@ 0xa7
 800b758:	d90a      	bls.n	800b770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d006      	beq.n	800b770 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <osThreadNew+0xa8>
        mem = 1;
 800b76a:	2301      	movs	r3, #1
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	e010      	b.n	800b792 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10c      	bne.n	800b792 <osThreadNew+0xca>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d108      	bne.n	800b792 <osThreadNew+0xca>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d104      	bne.n	800b792 <osThreadNew+0xca>
          mem = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	61bb      	str	r3, [r7, #24]
 800b78c:	e001      	b.n	800b792 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d110      	bne.n	800b7ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b7a0:	9202      	str	r2, [sp, #8]
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	6a3a      	ldr	r2, [r7, #32]
 800b7ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 fe1a 	bl	800c3e8 <xTaskCreateStatic>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	613b      	str	r3, [r7, #16]
 800b7b8:	e013      	b.n	800b7e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d110      	bne.n	800b7e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	f107 0310 	add.w	r3, r7, #16
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f000 fe68 	bl	800c4a8 <xTaskCreate>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d001      	beq.n	800b7e2 <osThreadNew+0x11a>
            hTask = NULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b7e2:	693b      	ldr	r3, [r7, #16]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3728      	adds	r7, #40	@ 0x28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7f4:	f3ef 8305 	mrs	r3, IPSR
 800b7f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <osDelay+0x1c>
    stat = osErrorISR;
 800b800:	f06f 0305 	mvn.w	r3, #5
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	e007      	b.n	800b818 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b808:	2300      	movs	r3, #0
 800b80a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 ffa6 	bl	800c764 <vTaskDelay>
    }
  }

  return (stat);
 800b818:	68fb      	ldr	r3, [r7, #12]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4a07      	ldr	r2, [pc, #28]	@ (800b850 <vApplicationGetIdleTaskMemory+0x2c>)
 800b834:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	4a06      	ldr	r2, [pc, #24]	@ (800b854 <vApplicationGetIdleTaskMemory+0x30>)
 800b83a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2280      	movs	r2, #128	@ 0x80
 800b840:	601a      	str	r2, [r3, #0]
}
 800b842:	bf00      	nop
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	20000fcc 	.word	0x20000fcc
 800b854:	20001074 	.word	0x20001074

0800b858 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4a07      	ldr	r2, [pc, #28]	@ (800b884 <vApplicationGetTimerTaskMemory+0x2c>)
 800b868:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	4a06      	ldr	r2, [pc, #24]	@ (800b888 <vApplicationGetTimerTaskMemory+0x30>)
 800b86e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b876:	601a      	str	r2, [r3, #0]
}
 800b878:	bf00      	nop
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr
 800b884:	20001274 	.word	0x20001274
 800b888:	2000131c 	.word	0x2000131c

0800b88c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f103 0208 	add.w	r2, r3, #8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f103 0208 	add.w	r2, r3, #8
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f103 0208 	add.w	r2, r3, #8
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	689a      	ldr	r2, [r3, #8]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
}
 800b922:	bf00      	nop
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b944:	d103      	bne.n	800b94e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	e00c      	b.n	800b968 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3308      	adds	r3, #8
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	e002      	b.n	800b95c <vListInsert+0x2e>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	60fb      	str	r3, [r7, #12]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	429a      	cmp	r2, r3
 800b966:	d2f6      	bcs.n	800b956 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	601a      	str	r2, [r3, #0]
}
 800b994:	bf00      	nop
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	6892      	ldr	r2, [r2, #8]
 800b9b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	6852      	ldr	r2, [r2, #4]
 800b9c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d103      	bne.n	800b9d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	1e5a      	subs	r2, r3, #1
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10b      	bne.n	800ba20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba1a:	bf00      	nop
 800ba1c:	bf00      	nop
 800ba1e:	e7fd      	b.n	800ba1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba20:	f002 fa82 	bl	800df28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba2c:	68f9      	ldr	r1, [r7, #12]
 800ba2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ba30:	fb01 f303 	mul.w	r3, r1, r3
 800ba34:	441a      	add	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba50:	3b01      	subs	r3, #1
 800ba52:	68f9      	ldr	r1, [r7, #12]
 800ba54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ba56:	fb01 f303 	mul.w	r3, r1, r3
 800ba5a:	441a      	add	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	22ff      	movs	r2, #255	@ 0xff
 800ba64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	22ff      	movs	r2, #255	@ 0xff
 800ba6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d114      	bne.n	800baa0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d01a      	beq.n	800bab4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3310      	adds	r3, #16
 800ba82:	4618      	mov	r0, r3
 800ba84:	f001 fa3c 	bl	800cf00 <xTaskRemoveFromEventList>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d012      	beq.n	800bab4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bac4 <xQueueGenericReset+0xd0>)
 800ba90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba94:	601a      	str	r2, [r3, #0]
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	e009      	b.n	800bab4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3310      	adds	r3, #16
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff fef1 	bl	800b88c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3324      	adds	r3, #36	@ 0x24
 800baae:	4618      	mov	r0, r3
 800bab0:	f7ff feec 	bl	800b88c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bab4:	f002 fa6a 	bl	800df8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bab8:	2301      	movs	r3, #1
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	e000ed04 	.word	0xe000ed04

0800bac8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08e      	sub	sp, #56	@ 0x38
 800bacc:	af02      	add	r7, sp, #8
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10b      	bne.n	800baf4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800baee:	bf00      	nop
 800baf0:	bf00      	nop
 800baf2:	e7fd      	b.n	800baf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10b      	bne.n	800bb12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bb0c:	bf00      	nop
 800bb0e:	bf00      	nop
 800bb10:	e7fd      	b.n	800bb0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <xQueueGenericCreateStatic+0x56>
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d001      	beq.n	800bb22 <xQueueGenericCreateStatic+0x5a>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <xQueueGenericCreateStatic+0x5c>
 800bb22:	2300      	movs	r3, #0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	623b      	str	r3, [r7, #32]
}
 800bb3a:	bf00      	nop
 800bb3c:	bf00      	nop
 800bb3e:	e7fd      	b.n	800bb3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d102      	bne.n	800bb4c <xQueueGenericCreateStatic+0x84>
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <xQueueGenericCreateStatic+0x88>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e000      	b.n	800bb52 <xQueueGenericCreateStatic+0x8a>
 800bb50:	2300      	movs	r3, #0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	61fb      	str	r3, [r7, #28]
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	e7fd      	b.n	800bb6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb6e:	2350      	movs	r3, #80	@ 0x50
 800bb70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	2b50      	cmp	r3, #80	@ 0x50
 800bb76:	d00b      	beq.n	800bb90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	61bb      	str	r3, [r7, #24]
}
 800bb8a:	bf00      	nop
 800bb8c:	bf00      	nop
 800bb8e:	e7fd      	b.n	800bb8c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00d      	beq.n	800bbb8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bba4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	4613      	mov	r3, r2
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 f805 	bl	800bbc2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3730      	adds	r7, #48	@ 0x30
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	607a      	str	r2, [r7, #4]
 800bbce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d103      	bne.n	800bbde <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	e002      	b.n	800bbe4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	69b8      	ldr	r0, [r7, #24]
 800bbf4:	f7ff fefe 	bl	800b9f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	78fa      	ldrb	r2, [r7, #3]
 800bbfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc00:	bf00      	nop
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08e      	sub	sp, #56	@ 0x38
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc16:	2300      	movs	r3, #0
 800bc18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10b      	bne.n	800bc3c <xQueueGenericSend+0x34>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc36:	bf00      	nop
 800bc38:	bf00      	nop
 800bc3a:	e7fd      	b.n	800bc38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d103      	bne.n	800bc4a <xQueueGenericSend+0x42>
 800bc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <xQueueGenericSend+0x46>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e000      	b.n	800bc50 <xQueueGenericSend+0x48>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10b      	bne.n	800bc6c <xQueueGenericSend+0x64>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
 800bc6a:	e7fd      	b.n	800bc68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	d103      	bne.n	800bc7a <xQueueGenericSend+0x72>
 800bc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d101      	bne.n	800bc7e <xQueueGenericSend+0x76>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e000      	b.n	800bc80 <xQueueGenericSend+0x78>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10b      	bne.n	800bc9c <xQueueGenericSend+0x94>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	623b      	str	r3, [r7, #32]
}
 800bc96:	bf00      	nop
 800bc98:	bf00      	nop
 800bc9a:	e7fd      	b.n	800bc98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc9c:	f001 faf6 	bl	800d28c <xTaskGetSchedulerState>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d102      	bne.n	800bcac <xQueueGenericSend+0xa4>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <xQueueGenericSend+0xa8>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <xQueueGenericSend+0xaa>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10b      	bne.n	800bcce <xQueueGenericSend+0xc6>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	61fb      	str	r3, [r7, #28]
}
 800bcc8:	bf00      	nop
 800bcca:	bf00      	nop
 800bccc:	e7fd      	b.n	800bcca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcce:	f002 f92b 	bl	800df28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d302      	bcc.n	800bce4 <xQueueGenericSend+0xdc>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d129      	bne.n	800bd38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	68b9      	ldr	r1, [r7, #8]
 800bce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcea:	f000 fa0f 	bl	800c10c <prvCopyDataToQueue>
 800bcee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d010      	beq.n	800bd1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	3324      	adds	r3, #36	@ 0x24
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 f8ff 	bl	800cf00 <xTaskRemoveFromEventList>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d013      	beq.n	800bd30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd08:	4b3f      	ldr	r3, [pc, #252]	@ (800be08 <xQueueGenericSend+0x200>)
 800bd0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	e00a      	b.n	800bd30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d007      	beq.n	800bd30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd20:	4b39      	ldr	r3, [pc, #228]	@ (800be08 <xQueueGenericSend+0x200>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd30:	f002 f92c 	bl	800df8c <vPortExitCritical>
				return pdPASS;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e063      	b.n	800be00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d103      	bne.n	800bd46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd3e:	f002 f925 	bl	800df8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e05c      	b.n	800be00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d106      	bne.n	800bd5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd4c:	f107 0314 	add.w	r3, r7, #20
 800bd50:	4618      	mov	r0, r3
 800bd52:	f001 f939 	bl	800cfc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd56:	2301      	movs	r3, #1
 800bd58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd5a:	f002 f917 	bl	800df8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd5e:	f000 fda7 	bl	800c8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd62:	f002 f8e1 	bl	800df28 <vPortEnterCritical>
 800bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd6c:	b25b      	sxtb	r3, r3
 800bd6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd72:	d103      	bne.n	800bd7c <xQueueGenericSend+0x174>
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd82:	b25b      	sxtb	r3, r3
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd88:	d103      	bne.n	800bd92 <xQueueGenericSend+0x18a>
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd92:	f002 f8fb 	bl	800df8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd96:	1d3a      	adds	r2, r7, #4
 800bd98:	f107 0314 	add.w	r3, r7, #20
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 f928 	bl	800cff4 <xTaskCheckForTimeOut>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d124      	bne.n	800bdf4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdac:	f000 faa6 	bl	800c2fc <prvIsQueueFull>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d018      	beq.n	800bde8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb8:	3310      	adds	r3, #16
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f001 f84c 	bl	800ce5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdc6:	f000 fa31 	bl	800c22c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdca:	f000 fd7f 	bl	800c8cc <xTaskResumeAll>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f47f af7c 	bne.w	800bcce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bdd6:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <xQueueGenericSend+0x200>)
 800bdd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	f3bf 8f4f 	dsb	sy
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	e772      	b.n	800bcce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bde8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdea:	f000 fa1f 	bl	800c22c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdee:	f000 fd6d 	bl	800c8cc <xTaskResumeAll>
 800bdf2:	e76c      	b.n	800bcce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bdf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdf6:	f000 fa19 	bl	800c22c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdfa:	f000 fd67 	bl	800c8cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bdfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be00:	4618      	mov	r0, r3
 800be02:	3738      	adds	r7, #56	@ 0x38
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	e000ed04 	.word	0xe000ed04

0800be0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b090      	sub	sp, #64	@ 0x40
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800be1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10b      	bne.n	800be3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be36:	bf00      	nop
 800be38:	bf00      	nop
 800be3a:	e7fd      	b.n	800be38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d103      	bne.n	800be4a <xQueueGenericSendFromISR+0x3e>
 800be42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <xQueueGenericSendFromISR+0x42>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <xQueueGenericSendFromISR+0x44>
 800be4e:	2300      	movs	r3, #0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10b      	bne.n	800be6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800be54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be66:	bf00      	nop
 800be68:	bf00      	nop
 800be6a:	e7fd      	b.n	800be68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d103      	bne.n	800be7a <xQueueGenericSendFromISR+0x6e>
 800be72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be76:	2b01      	cmp	r3, #1
 800be78:	d101      	bne.n	800be7e <xQueueGenericSendFromISR+0x72>
 800be7a:	2301      	movs	r3, #1
 800be7c:	e000      	b.n	800be80 <xQueueGenericSendFromISR+0x74>
 800be7e:	2300      	movs	r3, #0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10b      	bne.n	800be9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	623b      	str	r3, [r7, #32]
}
 800be96:	bf00      	nop
 800be98:	bf00      	nop
 800be9a:	e7fd      	b.n	800be98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be9c:	f002 f924 	bl	800e0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bea0:	f3ef 8211 	mrs	r2, BASEPRI
 800bea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	61fa      	str	r2, [r7, #28]
 800beb6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800beb8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800beba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d302      	bcc.n	800bece <xQueueGenericSendFromISR+0xc2>
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d12f      	bne.n	800bf2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bed4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	68b9      	ldr	r1, [r7, #8]
 800bee2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bee4:	f000 f912 	bl	800c10c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bee8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800beec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bef0:	d112      	bne.n	800bf18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d016      	beq.n	800bf28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800befa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befc:	3324      	adds	r3, #36	@ 0x24
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fffe 	bl	800cf00 <xTaskRemoveFromEventList>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00e      	beq.n	800bf28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00b      	beq.n	800bf28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e007      	b.n	800bf28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	b25a      	sxtb	r2, r3
 800bf22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bf2c:	e001      	b.n	800bf32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3740      	adds	r7, #64	@ 0x40
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08c      	sub	sp, #48	@ 0x30
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf54:	2300      	movs	r3, #0
 800bf56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10b      	bne.n	800bf7a <xQueueReceive+0x32>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	623b      	str	r3, [r7, #32]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d103      	bne.n	800bf88 <xQueueReceive+0x40>
 800bf80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <xQueueReceive+0x44>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e000      	b.n	800bf8e <xQueueReceive+0x46>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10b      	bne.n	800bfaa <xQueueReceive+0x62>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	61fb      	str	r3, [r7, #28]
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop
 800bfa8:	e7fd      	b.n	800bfa6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfaa:	f001 f96f 	bl	800d28c <xTaskGetSchedulerState>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <xQueueReceive+0x72>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <xQueueReceive+0x76>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e000      	b.n	800bfc0 <xQueueReceive+0x78>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10b      	bne.n	800bfdc <xQueueReceive+0x94>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	61bb      	str	r3, [r7, #24]
}
 800bfd6:	bf00      	nop
 800bfd8:	bf00      	nop
 800bfda:	e7fd      	b.n	800bfd8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfdc:	f001 ffa4 	bl	800df28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d01f      	beq.n	800c02c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bff0:	f000 f8f6 	bl	800c1e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff6:	1e5a      	subs	r2, r3, #1
 800bff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00f      	beq.n	800c024 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c006:	3310      	adds	r3, #16
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 ff79 	bl	800cf00 <xTaskRemoveFromEventList>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d007      	beq.n	800c024 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c014:	4b3c      	ldr	r3, [pc, #240]	@ (800c108 <xQueueReceive+0x1c0>)
 800c016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c024:	f001 ffb2 	bl	800df8c <vPortExitCritical>
				return pdPASS;
 800c028:	2301      	movs	r3, #1
 800c02a:	e069      	b.n	800c100 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c032:	f001 ffab 	bl	800df8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c036:	2300      	movs	r3, #0
 800c038:	e062      	b.n	800c100 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d106      	bne.n	800c04e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c040:	f107 0310 	add.w	r3, r7, #16
 800c044:	4618      	mov	r0, r3
 800c046:	f000 ffbf 	bl	800cfc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c04a:	2301      	movs	r3, #1
 800c04c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c04e:	f001 ff9d 	bl	800df8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c052:	f000 fc2d 	bl	800c8b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c056:	f001 ff67 	bl	800df28 <vPortEnterCritical>
 800c05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c060:	b25b      	sxtb	r3, r3
 800c062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c066:	d103      	bne.n	800c070 <xQueueReceive+0x128>
 800c068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c076:	b25b      	sxtb	r3, r3
 800c078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c07c:	d103      	bne.n	800c086 <xQueueReceive+0x13e>
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c086:	f001 ff81 	bl	800df8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c08a:	1d3a      	adds	r2, r7, #4
 800c08c:	f107 0310 	add.w	r3, r7, #16
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f000 ffae 	bl	800cff4 <xTaskCheckForTimeOut>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d123      	bne.n	800c0e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a0:	f000 f916 	bl	800c2d0 <prvIsQueueEmpty>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d017      	beq.n	800c0da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ac:	3324      	adds	r3, #36	@ 0x24
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fed2 	bl	800ce5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0ba:	f000 f8b7 	bl	800c22c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0be:	f000 fc05 	bl	800c8cc <xTaskResumeAll>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d189      	bne.n	800bfdc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c0c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c108 <xQueueReceive+0x1c0>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	e780      	b.n	800bfdc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c0da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0dc:	f000 f8a6 	bl	800c22c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0e0:	f000 fbf4 	bl	800c8cc <xTaskResumeAll>
 800c0e4:	e77a      	b.n	800bfdc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c0e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0e8:	f000 f8a0 	bl	800c22c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0ec:	f000 fbee 	bl	800c8cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0f2:	f000 f8ed 	bl	800c2d0 <prvIsQueueEmpty>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f43f af6f 	beq.w	800bfdc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c100:	4618      	mov	r0, r3
 800c102:	3730      	adds	r7, #48	@ 0x30
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b086      	sub	sp, #24
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c118:	2300      	movs	r3, #0
 800c11a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c120:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10d      	bne.n	800c146 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d14d      	bne.n	800c1ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	4618      	mov	r0, r3
 800c138:	f001 f8c6 	bl	800d2c8 <xTaskPriorityDisinherit>
 800c13c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	609a      	str	r2, [r3, #8]
 800c144:	e043      	b.n	800c1ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d119      	bne.n	800c180 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6858      	ldr	r0, [r3, #4]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c154:	461a      	mov	r2, r3
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	f002 ffbf 	bl	800f0da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c164:	441a      	add	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	429a      	cmp	r2, r3
 800c174:	d32b      	bcc.n	800c1ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	605a      	str	r2, [r3, #4]
 800c17e:	e026      	b.n	800c1ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	68d8      	ldr	r0, [r3, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c188:	461a      	mov	r2, r3
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	f002 ffa5 	bl	800f0da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68da      	ldr	r2, [r3, #12]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c198:	425b      	negs	r3, r3
 800c19a:	441a      	add	r2, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	68da      	ldr	r2, [r3, #12]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d207      	bcs.n	800c1bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1b4:	425b      	negs	r3, r3
 800c1b6:	441a      	add	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d105      	bne.n	800c1ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c1d6:	697b      	ldr	r3, [r7, #20]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d018      	beq.n	800c224 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68da      	ldr	r2, [r3, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fa:	441a      	add	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	68da      	ldr	r2, [r3, #12]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d303      	bcc.n	800c214 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68d9      	ldr	r1, [r3, #12]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c21c:	461a      	mov	r2, r3
 800c21e:	6838      	ldr	r0, [r7, #0]
 800c220:	f002 ff5b 	bl	800f0da <memcpy>
	}
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c234:	f001 fe78 	bl	800df28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c23e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c240:	e011      	b.n	800c266 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c246:	2b00      	cmp	r3, #0
 800c248:	d012      	beq.n	800c270 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3324      	adds	r3, #36	@ 0x24
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fe56 	bl	800cf00 <xTaskRemoveFromEventList>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c25a:	f000 ff2f 	bl	800d0bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c25e:	7bfb      	ldrb	r3, [r7, #15]
 800c260:	3b01      	subs	r3, #1
 800c262:	b2db      	uxtb	r3, r3
 800c264:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	dce9      	bgt.n	800c242 <prvUnlockQueue+0x16>
 800c26e:	e000      	b.n	800c272 <prvUnlockQueue+0x46>
					break;
 800c270:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	22ff      	movs	r2, #255	@ 0xff
 800c276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c27a:	f001 fe87 	bl	800df8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c27e:	f001 fe53 	bl	800df28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c288:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c28a:	e011      	b.n	800c2b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d012      	beq.n	800c2ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3310      	adds	r3, #16
 800c298:	4618      	mov	r0, r3
 800c29a:	f000 fe31 	bl	800cf00 <xTaskRemoveFromEventList>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d001      	beq.n	800c2a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2a4:	f000 ff0a 	bl	800d0bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dce9      	bgt.n	800c28c <prvUnlockQueue+0x60>
 800c2b8:	e000      	b.n	800c2bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c2ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	22ff      	movs	r2, #255	@ 0xff
 800c2c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c2c4:	f001 fe62 	bl	800df8c <vPortExitCritical>
}
 800c2c8:	bf00      	nop
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2d8:	f001 fe26 	bl	800df28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d102      	bne.n	800c2ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	e001      	b.n	800c2ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2ee:	f001 fe4d 	bl	800df8c <vPortExitCritical>

	return xReturn;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c304:	f001 fe10 	bl	800df28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c310:	429a      	cmp	r2, r3
 800c312:	d102      	bne.n	800c31a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c314:	2301      	movs	r3, #1
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e001      	b.n	800c31e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c31e:	f001 fe35 	bl	800df8c <vPortExitCritical>

	return xReturn;
 800c322:	68fb      	ldr	r3, [r7, #12]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c336:	2300      	movs	r3, #0
 800c338:	60fb      	str	r3, [r7, #12]
 800c33a:	e014      	b.n	800c366 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c33c:	4a0f      	ldr	r2, [pc, #60]	@ (800c37c <vQueueAddToRegistry+0x50>)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10b      	bne.n	800c360 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c348:	490c      	ldr	r1, [pc, #48]	@ (800c37c <vQueueAddToRegistry+0x50>)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c352:	4a0a      	ldr	r2, [pc, #40]	@ (800c37c <vQueueAddToRegistry+0x50>)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c35e:	e006      	b.n	800c36e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b07      	cmp	r3, #7
 800c36a:	d9e7      	bls.n	800c33c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c36c:	bf00      	nop
 800c36e:	bf00      	nop
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	2000171c 	.word	0x2000171c

0800c380 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c390:	f001 fdca 	bl	800df28 <vPortEnterCritical>
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c39a:	b25b      	sxtb	r3, r3
 800c39c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3a0:	d103      	bne.n	800c3aa <vQueueWaitForMessageRestricted+0x2a>
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3b0:	b25b      	sxtb	r3, r3
 800c3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3b6:	d103      	bne.n	800c3c0 <vQueueWaitForMessageRestricted+0x40>
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3c0:	f001 fde4 	bl	800df8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	3324      	adds	r3, #36	@ 0x24
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 fd67 	bl	800cea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c3da:	6978      	ldr	r0, [r7, #20]
 800c3dc:	f7ff ff26 	bl	800c22c <prvUnlockQueue>
	}
 800c3e0:	bf00      	nop
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08e      	sub	sp, #56	@ 0x38
 800c3ec:	af04      	add	r7, sp, #16
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10b      	bne.n	800c414 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	623b      	str	r3, [r7, #32]
}
 800c40e:	bf00      	nop
 800c410:	bf00      	nop
 800c412:	e7fd      	b.n	800c410 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10b      	bne.n	800c432 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	61fb      	str	r3, [r7, #28]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c432:	23a8      	movs	r3, #168	@ 0xa8
 800c434:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	2ba8      	cmp	r3, #168	@ 0xa8
 800c43a:	d00b      	beq.n	800c454 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	61bb      	str	r3, [r7, #24]
}
 800c44e:	bf00      	nop
 800c450:	bf00      	nop
 800c452:	e7fd      	b.n	800c450 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c454:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01e      	beq.n	800c49a <xTaskCreateStatic+0xb2>
 800c45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d01b      	beq.n	800c49a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c464:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c46a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46e:	2202      	movs	r2, #2
 800c470:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c474:	2300      	movs	r3, #0
 800c476:	9303      	str	r3, [sp, #12]
 800c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47a:	9302      	str	r3, [sp, #8]
 800c47c:	f107 0314 	add.w	r3, r7, #20
 800c480:	9301      	str	r3, [sp, #4]
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f000 f851 	bl	800c534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c492:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c494:	f000 f8f6 	bl	800c684 <prvAddNewTaskToReadyList>
 800c498:	e001      	b.n	800c49e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c49e:	697b      	ldr	r3, [r7, #20]
	}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3728      	adds	r7, #40	@ 0x28
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08c      	sub	sp, #48	@ 0x30
 800c4ac:	af04      	add	r7, sp, #16
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4b8:	88fb      	ldrh	r3, [r7, #6]
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f001 fe55 	bl	800e16c <pvPortMalloc>
 800c4c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00e      	beq.n	800c4e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4ca:	20a8      	movs	r0, #168	@ 0xa8
 800c4cc:	f001 fe4e 	bl	800e16c <pvPortMalloc>
 800c4d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d003      	beq.n	800c4e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c4de:	e005      	b.n	800c4ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4e0:	6978      	ldr	r0, [r7, #20]
 800c4e2:	f001 ff11 	bl	800e308 <vPortFree>
 800c4e6:	e001      	b.n	800c4ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d017      	beq.n	800c522 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c4fa:	88fa      	ldrh	r2, [r7, #6]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	9303      	str	r3, [sp, #12]
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	9302      	str	r3, [sp, #8]
 800c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 f80f 	bl	800c534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c516:	69f8      	ldr	r0, [r7, #28]
 800c518:	f000 f8b4 	bl	800c684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c51c:	2301      	movs	r3, #1
 800c51e:	61bb      	str	r3, [r7, #24]
 800c520:	e002      	b.n	800c528 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c526:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c528:	69bb      	ldr	r3, [r7, #24]
	}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3720      	adds	r7, #32
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	461a      	mov	r2, r3
 800c54c:	21a5      	movs	r1, #165	@ 0xa5
 800c54e:	f002 fd35 	bl	800efbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c55c:	3b01      	subs	r3, #1
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	f023 0307 	bic.w	r3, r3, #7
 800c56a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00b      	beq.n	800c58e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	617b      	str	r3, [r7, #20]
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	e7fd      	b.n	800c58a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d01f      	beq.n	800c5d4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c594:	2300      	movs	r3, #0
 800c596:	61fb      	str	r3, [r7, #28]
 800c598:	e012      	b.n	800c5c0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	4413      	add	r3, r2
 800c5a0:	7819      	ldrb	r1, [r3, #0]
 800c5a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	3334      	adds	r3, #52	@ 0x34
 800c5aa:	460a      	mov	r2, r1
 800c5ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d006      	beq.n	800c5c8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	61fb      	str	r3, [r7, #28]
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	2b0f      	cmp	r3, #15
 800c5c4:	d9e9      	bls.n	800c59a <prvInitialiseNewTask+0x66>
 800c5c6:	e000      	b.n	800c5ca <prvInitialiseNewTask+0x96>
			{
				break;
 800c5c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c5d2:	e003      	b.n	800c5dc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5de:	2b37      	cmp	r3, #55	@ 0x37
 800c5e0:	d901      	bls.n	800c5e6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5e2:	2337      	movs	r3, #55	@ 0x37
 800c5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff f965 	bl	800b8cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c604:	3318      	adds	r3, #24
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff f960 	bl	800b8cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c610:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c620:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c624:	2200      	movs	r2, #0
 800c626:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c634:	3354      	adds	r3, #84	@ 0x54
 800c636:	224c      	movs	r2, #76	@ 0x4c
 800c638:	2100      	movs	r1, #0
 800c63a:	4618      	mov	r0, r3
 800c63c:	f002 fcbe 	bl	800efbc <memset>
 800c640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c642:	4a0d      	ldr	r2, [pc, #52]	@ (800c678 <prvInitialiseNewTask+0x144>)
 800c644:	659a      	str	r2, [r3, #88]	@ 0x58
 800c646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c648:	4a0c      	ldr	r2, [pc, #48]	@ (800c67c <prvInitialiseNewTask+0x148>)
 800c64a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64e:	4a0c      	ldr	r2, [pc, #48]	@ (800c680 <prvInitialiseNewTask+0x14c>)
 800c650:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	68f9      	ldr	r1, [r7, #12]
 800c656:	69b8      	ldr	r0, [r7, #24]
 800c658:	f001 fb36 	bl	800dcc8 <pxPortInitialiseStack>
 800c65c:	4602      	mov	r2, r0
 800c65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c660:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c66c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c66e:	bf00      	nop
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	200059b0 	.word	0x200059b0
 800c67c:	20005a18 	.word	0x20005a18
 800c680:	20005a80 	.word	0x20005a80

0800c684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c68c:	f001 fc4c 	bl	800df28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c690:	4b2d      	ldr	r3, [pc, #180]	@ (800c748 <prvAddNewTaskToReadyList+0xc4>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3301      	adds	r3, #1
 800c696:	4a2c      	ldr	r2, [pc, #176]	@ (800c748 <prvAddNewTaskToReadyList+0xc4>)
 800c698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c69a:	4b2c      	ldr	r3, [pc, #176]	@ (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d109      	bne.n	800c6b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6a8:	4b27      	ldr	r3, [pc, #156]	@ (800c748 <prvAddNewTaskToReadyList+0xc4>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d110      	bne.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c6b0:	f000 fd28 	bl	800d104 <prvInitialiseTaskLists>
 800c6b4:	e00d      	b.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c6b6:	4b26      	ldr	r3, [pc, #152]	@ (800c750 <prvAddNewTaskToReadyList+0xcc>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d109      	bne.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6be:	4b23      	ldr	r3, [pc, #140]	@ (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d802      	bhi.n	800c6d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c6cc:	4a1f      	ldr	r2, [pc, #124]	@ (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c6d2:	4b20      	ldr	r3, [pc, #128]	@ (800c754 <prvAddNewTaskToReadyList+0xd0>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	4a1e      	ldr	r2, [pc, #120]	@ (800c754 <prvAddNewTaskToReadyList+0xd0>)
 800c6da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c6dc:	4b1d      	ldr	r3, [pc, #116]	@ (800c754 <prvAddNewTaskToReadyList+0xd0>)
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c758 <prvAddNewTaskToReadyList+0xd4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d903      	bls.n	800c6f8 <prvAddNewTaskToReadyList+0x74>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f4:	4a18      	ldr	r2, [pc, #96]	@ (800c758 <prvAddNewTaskToReadyList+0xd4>)
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4a15      	ldr	r2, [pc, #84]	@ (800c75c <prvAddNewTaskToReadyList+0xd8>)
 800c706:	441a      	add	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3304      	adds	r3, #4
 800c70c:	4619      	mov	r1, r3
 800c70e:	4610      	mov	r0, r2
 800c710:	f7ff f8e9 	bl	800b8e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c714:	f001 fc3a 	bl	800df8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c718:	4b0d      	ldr	r3, [pc, #52]	@ (800c750 <prvAddNewTaskToReadyList+0xcc>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00e      	beq.n	800c73e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c720:	4b0a      	ldr	r3, [pc, #40]	@ (800c74c <prvAddNewTaskToReadyList+0xc8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d207      	bcs.n	800c73e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c72e:	4b0c      	ldr	r3, [pc, #48]	@ (800c760 <prvAddNewTaskToReadyList+0xdc>)
 800c730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c73e:	bf00      	nop
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20001c30 	.word	0x20001c30
 800c74c:	2000175c 	.word	0x2000175c
 800c750:	20001c3c 	.word	0x20001c3c
 800c754:	20001c4c 	.word	0x20001c4c
 800c758:	20001c38 	.word	0x20001c38
 800c75c:	20001760 	.word	0x20001760
 800c760:	e000ed04 	.word	0xe000ed04

0800c764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c76c:	2300      	movs	r3, #0
 800c76e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d018      	beq.n	800c7a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c776:	4b14      	ldr	r3, [pc, #80]	@ (800c7c8 <vTaskDelay+0x64>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00b      	beq.n	800c796 <vTaskDelay+0x32>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	60bb      	str	r3, [r7, #8]
}
 800c790:	bf00      	nop
 800c792:	bf00      	nop
 800c794:	e7fd      	b.n	800c792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c796:	f000 f88b 	bl	800c8b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c79a:	2100      	movs	r1, #0
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fee5 	bl	800d56c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c7a2:	f000 f893 	bl	800c8cc <xTaskResumeAll>
 800c7a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d107      	bne.n	800c7be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c7ae:	4b07      	ldr	r3, [pc, #28]	@ (800c7cc <vTaskDelay+0x68>)
 800c7b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7be:	bf00      	nop
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20001c58 	.word	0x20001c58
 800c7cc:	e000ed04 	.word	0xe000ed04

0800c7d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08a      	sub	sp, #40	@ 0x28
 800c7d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c7de:	463a      	mov	r2, r7
 800c7e0:	1d39      	adds	r1, r7, #4
 800c7e2:	f107 0308 	add.w	r3, r7, #8
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff f81c 	bl	800b824 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	9202      	str	r2, [sp, #8]
 800c7f4:	9301      	str	r3, [sp, #4]
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	460a      	mov	r2, r1
 800c7fe:	4924      	ldr	r1, [pc, #144]	@ (800c890 <vTaskStartScheduler+0xc0>)
 800c800:	4824      	ldr	r0, [pc, #144]	@ (800c894 <vTaskStartScheduler+0xc4>)
 800c802:	f7ff fdf1 	bl	800c3e8 <xTaskCreateStatic>
 800c806:	4603      	mov	r3, r0
 800c808:	4a23      	ldr	r2, [pc, #140]	@ (800c898 <vTaskStartScheduler+0xc8>)
 800c80a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c80c:	4b22      	ldr	r3, [pc, #136]	@ (800c898 <vTaskStartScheduler+0xc8>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c814:	2301      	movs	r3, #1
 800c816:	617b      	str	r3, [r7, #20]
 800c818:	e001      	b.n	800c81e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d102      	bne.n	800c82a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c824:	f000 fef6 	bl	800d614 <xTimerCreateTimerTask>
 800c828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d11b      	bne.n	800c868 <vTaskStartScheduler+0x98>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	613b      	str	r3, [r7, #16]
}
 800c842:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c844:	4b15      	ldr	r3, [pc, #84]	@ (800c89c <vTaskStartScheduler+0xcc>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3354      	adds	r3, #84	@ 0x54
 800c84a:	4a15      	ldr	r2, [pc, #84]	@ (800c8a0 <vTaskStartScheduler+0xd0>)
 800c84c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c84e:	4b15      	ldr	r3, [pc, #84]	@ (800c8a4 <vTaskStartScheduler+0xd4>)
 800c850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c856:	4b14      	ldr	r3, [pc, #80]	@ (800c8a8 <vTaskStartScheduler+0xd8>)
 800c858:	2201      	movs	r2, #1
 800c85a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c85c:	4b13      	ldr	r3, [pc, #76]	@ (800c8ac <vTaskStartScheduler+0xdc>)
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c862:	f001 fabd 	bl	800dde0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c866:	e00f      	b.n	800c888 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c86e:	d10b      	bne.n	800c888 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60fb      	str	r3, [r7, #12]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <vTaskStartScheduler+0xb4>
}
 800c888:	bf00      	nop
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	08011438 	.word	0x08011438
 800c894:	0800d0d5 	.word	0x0800d0d5
 800c898:	20001c54 	.word	0x20001c54
 800c89c:	2000175c 	.word	0x2000175c
 800c8a0:	20000124 	.word	0x20000124
 800c8a4:	20001c50 	.word	0x20001c50
 800c8a8:	20001c3c 	.word	0x20001c3c
 800c8ac:	20001c34 	.word	0x20001c34

0800c8b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c8b4:	4b04      	ldr	r3, [pc, #16]	@ (800c8c8 <vTaskSuspendAll+0x18>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	4a03      	ldr	r2, [pc, #12]	@ (800c8c8 <vTaskSuspendAll+0x18>)
 800c8bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c8be:	bf00      	nop
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	20001c58 	.word	0x20001c58

0800c8cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c8da:	4b42      	ldr	r3, [pc, #264]	@ (800c9e4 <xTaskResumeAll+0x118>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10b      	bne.n	800c8fa <xTaskResumeAll+0x2e>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	603b      	str	r3, [r7, #0]
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop
 800c8f8:	e7fd      	b.n	800c8f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c8fa:	f001 fb15 	bl	800df28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c8fe:	4b39      	ldr	r3, [pc, #228]	@ (800c9e4 <xTaskResumeAll+0x118>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3b01      	subs	r3, #1
 800c904:	4a37      	ldr	r2, [pc, #220]	@ (800c9e4 <xTaskResumeAll+0x118>)
 800c906:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c908:	4b36      	ldr	r3, [pc, #216]	@ (800c9e4 <xTaskResumeAll+0x118>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d162      	bne.n	800c9d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c910:	4b35      	ldr	r3, [pc, #212]	@ (800c9e8 <xTaskResumeAll+0x11c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d05e      	beq.n	800c9d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c918:	e02f      	b.n	800c97a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c91a:	4b34      	ldr	r3, [pc, #208]	@ (800c9ec <xTaskResumeAll+0x120>)
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3318      	adds	r3, #24
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff f83a 	bl	800b9a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3304      	adds	r3, #4
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff f835 	bl	800b9a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c93a:	4b2d      	ldr	r3, [pc, #180]	@ (800c9f0 <xTaskResumeAll+0x124>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d903      	bls.n	800c94a <xTaskResumeAll+0x7e>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c946:	4a2a      	ldr	r2, [pc, #168]	@ (800c9f0 <xTaskResumeAll+0x124>)
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c94e:	4613      	mov	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4a27      	ldr	r2, [pc, #156]	@ (800c9f4 <xTaskResumeAll+0x128>)
 800c958:	441a      	add	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3304      	adds	r3, #4
 800c95e:	4619      	mov	r1, r3
 800c960:	4610      	mov	r0, r2
 800c962:	f7fe ffc0 	bl	800b8e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c96a:	4b23      	ldr	r3, [pc, #140]	@ (800c9f8 <xTaskResumeAll+0x12c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c970:	429a      	cmp	r2, r3
 800c972:	d302      	bcc.n	800c97a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c974:	4b21      	ldr	r3, [pc, #132]	@ (800c9fc <xTaskResumeAll+0x130>)
 800c976:	2201      	movs	r2, #1
 800c978:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c97a:	4b1c      	ldr	r3, [pc, #112]	@ (800c9ec <xTaskResumeAll+0x120>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1cb      	bne.n	800c91a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c988:	f000 fc60 	bl	800d24c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c98c:	4b1c      	ldr	r3, [pc, #112]	@ (800ca00 <xTaskResumeAll+0x134>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d010      	beq.n	800c9ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c998:	f000 f940 	bl	800cc1c <xTaskIncrementTick>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c9a2:	4b16      	ldr	r3, [pc, #88]	@ (800c9fc <xTaskResumeAll+0x130>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1f1      	bne.n	800c998 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c9b4:	4b12      	ldr	r3, [pc, #72]	@ (800ca00 <xTaskResumeAll+0x134>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c9ba:	4b10      	ldr	r3, [pc, #64]	@ (800c9fc <xTaskResumeAll+0x130>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca04 <xTaskResumeAll+0x138>)
 800c9c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9cc:	601a      	str	r2, [r3, #0]
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9d6:	f001 fad9 	bl	800df8c <vPortExitCritical>

	return xAlreadyYielded;
 800c9da:	68bb      	ldr	r3, [r7, #8]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	20001c58 	.word	0x20001c58
 800c9e8:	20001c30 	.word	0x20001c30
 800c9ec:	20001bf0 	.word	0x20001bf0
 800c9f0:	20001c38 	.word	0x20001c38
 800c9f4:	20001760 	.word	0x20001760
 800c9f8:	2000175c 	.word	0x2000175c
 800c9fc:	20001c44 	.word	0x20001c44
 800ca00:	20001c40 	.word	0x20001c40
 800ca04:	e000ed04 	.word	0xe000ed04

0800ca08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca0e:	4b05      	ldr	r3, [pc, #20]	@ (800ca24 <xTaskGetTickCount+0x1c>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca14:	687b      	ldr	r3, [r7, #4]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	20001c34 	.word	0x20001c34

0800ca28 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d102      	bne.n	800ca3c <pcTaskGetName+0x14>
 800ca36:	4b0e      	ldr	r3, [pc, #56]	@ (800ca70 <pcTaskGetName+0x48>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	e000      	b.n	800ca3e <pcTaskGetName+0x16>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10b      	bne.n	800ca5e <pcTaskGetName+0x36>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	60bb      	str	r3, [r7, #8]
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	e7fd      	b.n	800ca5a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3334      	adds	r3, #52	@ 0x34
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	2000175c 	.word	0x2000175c

0800ca74 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800ca74:	b480      	push	{r7}
 800ca76:	b08b      	sub	sp, #44	@ 0x2c
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d05b      	beq.n	800cb42 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	61bb      	str	r3, [r7, #24]
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	685a      	ldr	r2, [r3, #4]
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	605a      	str	r2, [r3, #4]
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	3308      	adds	r3, #8
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d104      	bne.n	800caae <prvSearchForNameWithinSingleList+0x3a>
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	605a      	str	r2, [r3, #4]
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	613b      	str	r3, [r7, #16]
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	605a      	str	r2, [r3, #4]
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	3308      	adds	r3, #8
 800cacc:	429a      	cmp	r2, r3
 800cace:	d104      	bne.n	800cada <prvSearchForNameWithinSingleList+0x66>
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	605a      	str	r2, [r3, #4]
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800cae2:	2300      	movs	r3, #0
 800cae4:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cae6:	2300      	movs	r3, #0
 800cae8:	623b      	str	r3, [r7, #32]
 800caea:	e01c      	b.n	800cb26 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	6a3b      	ldr	r3, [r7, #32]
 800caf0:	4413      	add	r3, r2
 800caf2:	3334      	adds	r3, #52	@ 0x34
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	4413      	add	r3, r2
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	7afa      	ldrb	r2, [r7, #11]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d002      	beq.n	800cb0c <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800cb06:	2301      	movs	r3, #1
 800cb08:	61fb      	str	r3, [r7, #28]
 800cb0a:	e006      	b.n	800cb1a <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800cb0c:	7afb      	ldrb	r3, [r7, #11]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d103      	bne.n	800cb1a <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800cb16:	2301      	movs	r3, #1
 800cb18:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	3301      	adds	r3, #1
 800cb24:	623b      	str	r3, [r7, #32]
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	2b0f      	cmp	r3, #15
 800cb2a:	d9df      	bls.n	800caec <prvSearchForNameWithinSingleList+0x78>
 800cb2c:	e000      	b.n	800cb30 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800cb2e:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d104      	bne.n	800cb40 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d1bb      	bne.n	800cab6 <prvSearchForNameWithinSingleList+0x42>
 800cb3e:	e000      	b.n	800cb42 <prvSearchForNameWithinSingleList+0xce>
					break;
 800cb40:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800cb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cb44:	4618      	mov	r0, r3
 800cb46:	372c      	adds	r7, #44	@ 0x2c
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800cb58:	2338      	movs	r3, #56	@ 0x38
 800cb5a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7f3 fb87 	bl	8000270 <strlen>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b0f      	cmp	r3, #15
 800cb66:	d90b      	bls.n	800cb80 <xTaskGetHandle+0x30>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	e7fd      	b.n	800cb7c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800cb80:	f7ff fe96 	bl	800c8b0 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800cb8a:	697a      	ldr	r2, [r7, #20]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4a1c      	ldr	r2, [pc, #112]	@ (800cc08 <xTaskGetHandle+0xb8>)
 800cb96:	4413      	add	r3, r2
 800cb98:	6879      	ldr	r1, [r7, #4]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff ff6a 	bl	800ca74 <prvSearchForNameWithinSingleList>
 800cba0:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d103      	bne.n	800cbb0 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1ea      	bne.n	800cb84 <xTaskGetHandle+0x34>
 800cbae:	e000      	b.n	800cbb2 <xTaskGetHandle+0x62>
					break;
 800cbb0:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d106      	bne.n	800cbc6 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800cbb8:	4b14      	ldr	r3, [pc, #80]	@ (800cc0c <xTaskGetHandle+0xbc>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff ff58 	bl	800ca74 <prvSearchForNameWithinSingleList>
 800cbc4:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d106      	bne.n	800cbda <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800cbcc:	4b10      	ldr	r3, [pc, #64]	@ (800cc10 <xTaskGetHandle+0xc0>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7ff ff4e 	bl	800ca74 <prvSearchForNameWithinSingleList>
 800cbd8:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d104      	bne.n	800cbea <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	480c      	ldr	r0, [pc, #48]	@ (800cc14 <xTaskGetHandle+0xc4>)
 800cbe4:	f7ff ff46 	bl	800ca74 <prvSearchForNameWithinSingleList>
 800cbe8:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d104      	bne.n	800cbfa <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	4809      	ldr	r0, [pc, #36]	@ (800cc18 <xTaskGetHandle+0xc8>)
 800cbf4:	f7ff ff3e 	bl	800ca74 <prvSearchForNameWithinSingleList>
 800cbf8:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800cbfa:	f7ff fe67 	bl	800c8cc <xTaskResumeAll>

		return pxTCB;
 800cbfe:	693b      	ldr	r3, [r7, #16]
	}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3718      	adds	r7, #24
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20001760 	.word	0x20001760
 800cc0c:	20001be8 	.word	0x20001be8
 800cc10:	20001bec 	.word	0x20001bec
 800cc14:	20001c1c 	.word	0x20001c1c
 800cc18:	20001c04 	.word	0x20001c04

0800cc1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc26:	4b4f      	ldr	r3, [pc, #316]	@ (800cd64 <xTaskIncrementTick+0x148>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f040 8090 	bne.w	800cd50 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc30:	4b4d      	ldr	r3, [pc, #308]	@ (800cd68 <xTaskIncrementTick+0x14c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3301      	adds	r3, #1
 800cc36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc38:	4a4b      	ldr	r2, [pc, #300]	@ (800cd68 <xTaskIncrementTick+0x14c>)
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d121      	bne.n	800cc88 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc44:	4b49      	ldr	r3, [pc, #292]	@ (800cd6c <xTaskIncrementTick+0x150>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00b      	beq.n	800cc66 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	603b      	str	r3, [r7, #0]
}
 800cc60:	bf00      	nop
 800cc62:	bf00      	nop
 800cc64:	e7fd      	b.n	800cc62 <xTaskIncrementTick+0x46>
 800cc66:	4b41      	ldr	r3, [pc, #260]	@ (800cd6c <xTaskIncrementTick+0x150>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	4b40      	ldr	r3, [pc, #256]	@ (800cd70 <xTaskIncrementTick+0x154>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a3e      	ldr	r2, [pc, #248]	@ (800cd6c <xTaskIncrementTick+0x150>)
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	4a3e      	ldr	r2, [pc, #248]	@ (800cd70 <xTaskIncrementTick+0x154>)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd74 <xTaskIncrementTick+0x158>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	4a3c      	ldr	r2, [pc, #240]	@ (800cd74 <xTaskIncrementTick+0x158>)
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	f000 fae2 	bl	800d24c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc88:	4b3b      	ldr	r3, [pc, #236]	@ (800cd78 <xTaskIncrementTick+0x15c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d349      	bcc.n	800cd26 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc92:	4b36      	ldr	r3, [pc, #216]	@ (800cd6c <xTaskIncrementTick+0x150>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d104      	bne.n	800cca6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc9c:	4b36      	ldr	r3, [pc, #216]	@ (800cd78 <xTaskIncrementTick+0x15c>)
 800cc9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cca2:	601a      	str	r2, [r3, #0]
					break;
 800cca4:	e03f      	b.n	800cd26 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cca6:	4b31      	ldr	r3, [pc, #196]	@ (800cd6c <xTaskIncrementTick+0x150>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d203      	bcs.n	800ccc6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccbe:	4a2e      	ldr	r2, [pc, #184]	@ (800cd78 <xTaskIncrementTick+0x15c>)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccc4:	e02f      	b.n	800cd26 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	3304      	adds	r3, #4
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe fe68 	bl	800b9a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d004      	beq.n	800cce2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	3318      	adds	r3, #24
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fe fe5f 	bl	800b9a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cce6:	4b25      	ldr	r3, [pc, #148]	@ (800cd7c <xTaskIncrementTick+0x160>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d903      	bls.n	800ccf6 <xTaskIncrementTick+0xda>
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf2:	4a22      	ldr	r2, [pc, #136]	@ (800cd7c <xTaskIncrementTick+0x160>)
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4413      	add	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4a1f      	ldr	r2, [pc, #124]	@ (800cd80 <xTaskIncrementTick+0x164>)
 800cd04:	441a      	add	r2, r3
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	f7fe fdea 	bl	800b8e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd16:	4b1b      	ldr	r3, [pc, #108]	@ (800cd84 <xTaskIncrementTick+0x168>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d3b8      	bcc.n	800cc92 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cd20:	2301      	movs	r3, #1
 800cd22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd24:	e7b5      	b.n	800cc92 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd26:	4b17      	ldr	r3, [pc, #92]	@ (800cd84 <xTaskIncrementTick+0x168>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd2c:	4914      	ldr	r1, [pc, #80]	@ (800cd80 <xTaskIncrementTick+0x164>)
 800cd2e:	4613      	mov	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	440b      	add	r3, r1
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d901      	bls.n	800cd42 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd42:	4b11      	ldr	r3, [pc, #68]	@ (800cd88 <xTaskIncrementTick+0x16c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d007      	beq.n	800cd5a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	e004      	b.n	800cd5a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cd50:	4b0e      	ldr	r3, [pc, #56]	@ (800cd8c <xTaskIncrementTick+0x170>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	4a0d      	ldr	r2, [pc, #52]	@ (800cd8c <xTaskIncrementTick+0x170>)
 800cd58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cd5a:	697b      	ldr	r3, [r7, #20]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3718      	adds	r7, #24
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	20001c58 	.word	0x20001c58
 800cd68:	20001c34 	.word	0x20001c34
 800cd6c:	20001be8 	.word	0x20001be8
 800cd70:	20001bec 	.word	0x20001bec
 800cd74:	20001c48 	.word	0x20001c48
 800cd78:	20001c50 	.word	0x20001c50
 800cd7c:	20001c38 	.word	0x20001c38
 800cd80:	20001760 	.word	0x20001760
 800cd84:	2000175c 	.word	0x2000175c
 800cd88:	20001c44 	.word	0x20001c44
 800cd8c:	20001c40 	.word	0x20001c40

0800cd90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd96:	4b2b      	ldr	r3, [pc, #172]	@ (800ce44 <vTaskSwitchContext+0xb4>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d003      	beq.n	800cda6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd9e:	4b2a      	ldr	r3, [pc, #168]	@ (800ce48 <vTaskSwitchContext+0xb8>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cda4:	e047      	b.n	800ce36 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cda6:	4b28      	ldr	r3, [pc, #160]	@ (800ce48 <vTaskSwitchContext+0xb8>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdac:	4b27      	ldr	r3, [pc, #156]	@ (800ce4c <vTaskSwitchContext+0xbc>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	e011      	b.n	800cdd8 <vTaskSwitchContext+0x48>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10b      	bne.n	800cdd2 <vTaskSwitchContext+0x42>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	607b      	str	r3, [r7, #4]
}
 800cdcc:	bf00      	nop
 800cdce:	bf00      	nop
 800cdd0:	e7fd      	b.n	800cdce <vTaskSwitchContext+0x3e>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	60fb      	str	r3, [r7, #12]
 800cdd8:	491d      	ldr	r1, [pc, #116]	@ (800ce50 <vTaskSwitchContext+0xc0>)
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	4613      	mov	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	4413      	add	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	440b      	add	r3, r1
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d0e3      	beq.n	800cdb4 <vTaskSwitchContext+0x24>
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	4a16      	ldr	r2, [pc, #88]	@ (800ce50 <vTaskSwitchContext+0xc0>)
 800cdf8:	4413      	add	r3, r2
 800cdfa:	60bb      	str	r3, [r7, #8]
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	605a      	str	r2, [r3, #4]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d104      	bne.n	800ce1c <vTaskSwitchContext+0x8c>
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	605a      	str	r2, [r3, #4]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	4a0c      	ldr	r2, [pc, #48]	@ (800ce54 <vTaskSwitchContext+0xc4>)
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	4a09      	ldr	r2, [pc, #36]	@ (800ce4c <vTaskSwitchContext+0xbc>)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce2c:	4b09      	ldr	r3, [pc, #36]	@ (800ce54 <vTaskSwitchContext+0xc4>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3354      	adds	r3, #84	@ 0x54
 800ce32:	4a09      	ldr	r2, [pc, #36]	@ (800ce58 <vTaskSwitchContext+0xc8>)
 800ce34:	6013      	str	r3, [r2, #0]
}
 800ce36:	bf00      	nop
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	20001c58 	.word	0x20001c58
 800ce48:	20001c44 	.word	0x20001c44
 800ce4c:	20001c38 	.word	0x20001c38
 800ce50:	20001760 	.word	0x20001760
 800ce54:	2000175c 	.word	0x2000175c
 800ce58:	20000124 	.word	0x20000124

0800ce5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10b      	bne.n	800ce84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce70:	f383 8811 	msr	BASEPRI, r3
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	60fb      	str	r3, [r7, #12]
}
 800ce7e:	bf00      	nop
 800ce80:	bf00      	nop
 800ce82:	e7fd      	b.n	800ce80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce84:	4b07      	ldr	r3, [pc, #28]	@ (800cea4 <vTaskPlaceOnEventList+0x48>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3318      	adds	r3, #24
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7fe fd4e 	bl	800b92e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce92:	2101      	movs	r1, #1
 800ce94:	6838      	ldr	r0, [r7, #0]
 800ce96:	f000 fb69 	bl	800d56c <prvAddCurrentTaskToDelayedList>
}
 800ce9a:	bf00      	nop
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2000175c 	.word	0x2000175c

0800cea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10b      	bne.n	800ced2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	617b      	str	r3, [r7, #20]
}
 800cecc:	bf00      	nop
 800cece:	bf00      	nop
 800ced0:	e7fd      	b.n	800cece <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ced2:	4b0a      	ldr	r3, [pc, #40]	@ (800cefc <vTaskPlaceOnEventListRestricted+0x54>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3318      	adds	r3, #24
 800ced8:	4619      	mov	r1, r3
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f7fe fd03 	bl	800b8e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cee6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ceea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ceec:	6879      	ldr	r1, [r7, #4]
 800ceee:	68b8      	ldr	r0, [r7, #8]
 800cef0:	f000 fb3c 	bl	800d56c <prvAddCurrentTaskToDelayedList>
	}
 800cef4:	bf00      	nop
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	2000175c 	.word	0x2000175c

0800cf00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10b      	bne.n	800cf2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	60fb      	str	r3, [r7, #12]
}
 800cf28:	bf00      	nop
 800cf2a:	bf00      	nop
 800cf2c:	e7fd      	b.n	800cf2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	3318      	adds	r3, #24
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe fd34 	bl	800b9a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf38:	4b1d      	ldr	r3, [pc, #116]	@ (800cfb0 <xTaskRemoveFromEventList+0xb0>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d11d      	bne.n	800cf7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	3304      	adds	r3, #4
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fe fd2b 	bl	800b9a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf4e:	4b19      	ldr	r3, [pc, #100]	@ (800cfb4 <xTaskRemoveFromEventList+0xb4>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d903      	bls.n	800cf5e <xTaskRemoveFromEventList+0x5e>
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf5a:	4a16      	ldr	r2, [pc, #88]	@ (800cfb4 <xTaskRemoveFromEventList+0xb4>)
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf62:	4613      	mov	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4a13      	ldr	r2, [pc, #76]	@ (800cfb8 <xTaskRemoveFromEventList+0xb8>)
 800cf6c:	441a      	add	r2, r3
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	3304      	adds	r3, #4
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f7fe fcb6 	bl	800b8e6 <vListInsertEnd>
 800cf7a:	e005      	b.n	800cf88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	3318      	adds	r3, #24
 800cf80:	4619      	mov	r1, r3
 800cf82:	480e      	ldr	r0, [pc, #56]	@ (800cfbc <xTaskRemoveFromEventList+0xbc>)
 800cf84:	f7fe fcaf 	bl	800b8e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc0 <xTaskRemoveFromEventList+0xc0>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d905      	bls.n	800cfa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf96:	2301      	movs	r3, #1
 800cf98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf9a:	4b0a      	ldr	r3, [pc, #40]	@ (800cfc4 <xTaskRemoveFromEventList+0xc4>)
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	e001      	b.n	800cfa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cfa6:	697b      	ldr	r3, [r7, #20]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3718      	adds	r7, #24
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	20001c58 	.word	0x20001c58
 800cfb4:	20001c38 	.word	0x20001c38
 800cfb8:	20001760 	.word	0x20001760
 800cfbc:	20001bf0 	.word	0x20001bf0
 800cfc0:	2000175c 	.word	0x2000175c
 800cfc4:	20001c44 	.word	0x20001c44

0800cfc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfd0:	4b06      	ldr	r3, [pc, #24]	@ (800cfec <vTaskInternalSetTimeOutState+0x24>)
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfd8:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <vTaskInternalSetTimeOutState+0x28>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	605a      	str	r2, [r3, #4]
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	20001c48 	.word	0x20001c48
 800cff0:	20001c34 	.word	0x20001c34

0800cff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10b      	bne.n	800d01c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	613b      	str	r3, [r7, #16]
}
 800d016:	bf00      	nop
 800d018:	bf00      	nop
 800d01a:	e7fd      	b.n	800d018 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10b      	bne.n	800d03a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	60fb      	str	r3, [r7, #12]
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop
 800d038:	e7fd      	b.n	800d036 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d03a:	f000 ff75 	bl	800df28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d03e:	4b1d      	ldr	r3, [pc, #116]	@ (800d0b4 <xTaskCheckForTimeOut+0xc0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	69ba      	ldr	r2, [r7, #24]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d056:	d102      	bne.n	800d05e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d058:	2300      	movs	r3, #0
 800d05a:	61fb      	str	r3, [r7, #28]
 800d05c:	e023      	b.n	800d0a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	4b15      	ldr	r3, [pc, #84]	@ (800d0b8 <xTaskCheckForTimeOut+0xc4>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	429a      	cmp	r2, r3
 800d068:	d007      	beq.n	800d07a <xTaskCheckForTimeOut+0x86>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	429a      	cmp	r2, r3
 800d072:	d302      	bcc.n	800d07a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d074:	2301      	movs	r3, #1
 800d076:	61fb      	str	r3, [r7, #28]
 800d078:	e015      	b.n	800d0a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	429a      	cmp	r2, r3
 800d082:	d20b      	bcs.n	800d09c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	1ad2      	subs	r2, r2, r3
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ff99 	bl	800cfc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d096:	2300      	movs	r3, #0
 800d098:	61fb      	str	r3, [r7, #28]
 800d09a:	e004      	b.n	800d0a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0a6:	f000 ff71 	bl	800df8c <vPortExitCritical>

	return xReturn;
 800d0aa:	69fb      	ldr	r3, [r7, #28]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3720      	adds	r7, #32
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	20001c34 	.word	0x20001c34
 800d0b8:	20001c48 	.word	0x20001c48

0800d0bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0bc:	b480      	push	{r7}
 800d0be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0c0:	4b03      	ldr	r3, [pc, #12]	@ (800d0d0 <vTaskMissedYield+0x14>)
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	601a      	str	r2, [r3, #0]
}
 800d0c6:	bf00      	nop
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	20001c44 	.word	0x20001c44

0800d0d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0dc:	f000 f852 	bl	800d184 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0e0:	4b06      	ldr	r3, [pc, #24]	@ (800d0fc <prvIdleTask+0x28>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d9f9      	bls.n	800d0dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0e8:	4b05      	ldr	r3, [pc, #20]	@ (800d100 <prvIdleTask+0x2c>)
 800d0ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0ee:	601a      	str	r2, [r3, #0]
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d0f8:	e7f0      	b.n	800d0dc <prvIdleTask+0x8>
 800d0fa:	bf00      	nop
 800d0fc:	20001760 	.word	0x20001760
 800d100:	e000ed04 	.word	0xe000ed04

0800d104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d10a:	2300      	movs	r3, #0
 800d10c:	607b      	str	r3, [r7, #4]
 800d10e:	e00c      	b.n	800d12a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	4613      	mov	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4a12      	ldr	r2, [pc, #72]	@ (800d164 <prvInitialiseTaskLists+0x60>)
 800d11c:	4413      	add	r3, r2
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fbb4 	bl	800b88c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3301      	adds	r3, #1
 800d128:	607b      	str	r3, [r7, #4]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b37      	cmp	r3, #55	@ 0x37
 800d12e:	d9ef      	bls.n	800d110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d130:	480d      	ldr	r0, [pc, #52]	@ (800d168 <prvInitialiseTaskLists+0x64>)
 800d132:	f7fe fbab 	bl	800b88c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d136:	480d      	ldr	r0, [pc, #52]	@ (800d16c <prvInitialiseTaskLists+0x68>)
 800d138:	f7fe fba8 	bl	800b88c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d13c:	480c      	ldr	r0, [pc, #48]	@ (800d170 <prvInitialiseTaskLists+0x6c>)
 800d13e:	f7fe fba5 	bl	800b88c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d142:	480c      	ldr	r0, [pc, #48]	@ (800d174 <prvInitialiseTaskLists+0x70>)
 800d144:	f7fe fba2 	bl	800b88c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d148:	480b      	ldr	r0, [pc, #44]	@ (800d178 <prvInitialiseTaskLists+0x74>)
 800d14a:	f7fe fb9f 	bl	800b88c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d14e:	4b0b      	ldr	r3, [pc, #44]	@ (800d17c <prvInitialiseTaskLists+0x78>)
 800d150:	4a05      	ldr	r2, [pc, #20]	@ (800d168 <prvInitialiseTaskLists+0x64>)
 800d152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d154:	4b0a      	ldr	r3, [pc, #40]	@ (800d180 <prvInitialiseTaskLists+0x7c>)
 800d156:	4a05      	ldr	r2, [pc, #20]	@ (800d16c <prvInitialiseTaskLists+0x68>)
 800d158:	601a      	str	r2, [r3, #0]
}
 800d15a:	bf00      	nop
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	20001760 	.word	0x20001760
 800d168:	20001bc0 	.word	0x20001bc0
 800d16c:	20001bd4 	.word	0x20001bd4
 800d170:	20001bf0 	.word	0x20001bf0
 800d174:	20001c04 	.word	0x20001c04
 800d178:	20001c1c 	.word	0x20001c1c
 800d17c:	20001be8 	.word	0x20001be8
 800d180:	20001bec 	.word	0x20001bec

0800d184 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d18a:	e019      	b.n	800d1c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d18c:	f000 fecc 	bl	800df28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d190:	4b10      	ldr	r3, [pc, #64]	@ (800d1d4 <prvCheckTasksWaitingTermination+0x50>)
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	3304      	adds	r3, #4
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fbff 	bl	800b9a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d1d8 <prvCheckTasksWaitingTermination+0x54>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	4a0b      	ldr	r2, [pc, #44]	@ (800d1d8 <prvCheckTasksWaitingTermination+0x54>)
 800d1aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1ac:	4b0b      	ldr	r3, [pc, #44]	@ (800d1dc <prvCheckTasksWaitingTermination+0x58>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	4a0a      	ldr	r2, [pc, #40]	@ (800d1dc <prvCheckTasksWaitingTermination+0x58>)
 800d1b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1b6:	f000 fee9 	bl	800df8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f810 	bl	800d1e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1c0:	4b06      	ldr	r3, [pc, #24]	@ (800d1dc <prvCheckTasksWaitingTermination+0x58>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1e1      	bne.n	800d18c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1c8:	bf00      	nop
 800d1ca:	bf00      	nop
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20001c04 	.word	0x20001c04
 800d1d8:	20001c30 	.word	0x20001c30
 800d1dc:	20001c18 	.word	0x20001c18

0800d1e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3354      	adds	r3, #84	@ 0x54
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f001 fef1 	bl	800efd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d108      	bne.n	800d20e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d200:	4618      	mov	r0, r3
 800d202:	f001 f881 	bl	800e308 <vPortFree>
				vPortFree( pxTCB );
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f001 f87e 	bl	800e308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d20c:	e019      	b.n	800d242 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d214:	2b01      	cmp	r3, #1
 800d216:	d103      	bne.n	800d220 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f001 f875 	bl	800e308 <vPortFree>
	}
 800d21e:	e010      	b.n	800d242 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d226:	2b02      	cmp	r3, #2
 800d228:	d00b      	beq.n	800d242 <prvDeleteTCB+0x62>
	__asm volatile
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	60fb      	str	r3, [r7, #12]
}
 800d23c:	bf00      	nop
 800d23e:	bf00      	nop
 800d240:	e7fd      	b.n	800d23e <prvDeleteTCB+0x5e>
	}
 800d242:	bf00      	nop
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d252:	4b0c      	ldr	r3, [pc, #48]	@ (800d284 <prvResetNextTaskUnblockTime+0x38>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d104      	bne.n	800d266 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d25c:	4b0a      	ldr	r3, [pc, #40]	@ (800d288 <prvResetNextTaskUnblockTime+0x3c>)
 800d25e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d262:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d264:	e008      	b.n	800d278 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d266:	4b07      	ldr	r3, [pc, #28]	@ (800d284 <prvResetNextTaskUnblockTime+0x38>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	4a04      	ldr	r2, [pc, #16]	@ (800d288 <prvResetNextTaskUnblockTime+0x3c>)
 800d276:	6013      	str	r3, [r2, #0]
}
 800d278:	bf00      	nop
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	20001be8 	.word	0x20001be8
 800d288:	20001c50 	.word	0x20001c50

0800d28c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d292:	4b0b      	ldr	r3, [pc, #44]	@ (800d2c0 <xTaskGetSchedulerState+0x34>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d102      	bne.n	800d2a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d29a:	2301      	movs	r3, #1
 800d29c:	607b      	str	r3, [r7, #4]
 800d29e:	e008      	b.n	800d2b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2a0:	4b08      	ldr	r3, [pc, #32]	@ (800d2c4 <xTaskGetSchedulerState+0x38>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	607b      	str	r3, [r7, #4]
 800d2ac:	e001      	b.n	800d2b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2b2:	687b      	ldr	r3, [r7, #4]
	}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	20001c3c 	.word	0x20001c3c
 800d2c4:	20001c58 	.word	0x20001c58

0800d2c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d058      	beq.n	800d390 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2de:	4b2f      	ldr	r3, [pc, #188]	@ (800d39c <xTaskPriorityDisinherit+0xd4>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d00b      	beq.n	800d300 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	60fb      	str	r3, [r7, #12]
}
 800d2fa:	bf00      	nop
 800d2fc:	bf00      	nop
 800d2fe:	e7fd      	b.n	800d2fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10b      	bne.n	800d320 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	60bb      	str	r3, [r7, #8]
}
 800d31a:	bf00      	nop
 800d31c:	bf00      	nop
 800d31e:	e7fd      	b.n	800d31c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d324:	1e5a      	subs	r2, r3, #1
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d332:	429a      	cmp	r2, r3
 800d334:	d02c      	beq.n	800d390 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d128      	bne.n	800d390 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	3304      	adds	r3, #4
 800d342:	4618      	mov	r0, r3
 800d344:	f7fe fb2c 	bl	800b9a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d354:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d360:	4b0f      	ldr	r3, [pc, #60]	@ (800d3a0 <xTaskPriorityDisinherit+0xd8>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	429a      	cmp	r2, r3
 800d366:	d903      	bls.n	800d370 <xTaskPriorityDisinherit+0xa8>
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d36c:	4a0c      	ldr	r2, [pc, #48]	@ (800d3a0 <xTaskPriorityDisinherit+0xd8>)
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d374:	4613      	mov	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4a09      	ldr	r2, [pc, #36]	@ (800d3a4 <xTaskPriorityDisinherit+0xdc>)
 800d37e:	441a      	add	r2, r3
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	3304      	adds	r3, #4
 800d384:	4619      	mov	r1, r3
 800d386:	4610      	mov	r0, r2
 800d388:	f7fe faad 	bl	800b8e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d38c:	2301      	movs	r3, #1
 800d38e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d390:	697b      	ldr	r3, [r7, #20]
	}
 800d392:	4618      	mov	r0, r3
 800d394:	3718      	adds	r7, #24
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	2000175c 	.word	0x2000175c
 800d3a0:	20001c38 	.word	0x20001c38
 800d3a4:	20001760 	.word	0x20001760

0800d3a8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d3b2:	f000 fdb9 	bl	800df28 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d3b6:	4b20      	ldr	r3, [pc, #128]	@ (800d438 <ulTaskNotifyTake+0x90>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d113      	bne.n	800d3ea <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d3c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d438 <ulTaskNotifyTake+0x90>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00b      	beq.n	800d3ea <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	6838      	ldr	r0, [r7, #0]
 800d3d6:	f000 f8c9 	bl	800d56c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d3da:	4b18      	ldr	r3, [pc, #96]	@ (800d43c <ulTaskNotifyTake+0x94>)
 800d3dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d3ea:	f000 fdcf 	bl	800df8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d3ee:	f000 fd9b 	bl	800df28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d3f2:	4b11      	ldr	r3, [pc, #68]	@ (800d438 <ulTaskNotifyTake+0x90>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d3fa:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00e      	beq.n	800d420 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d005      	beq.n	800d414 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d408:	4b0b      	ldr	r3, [pc, #44]	@ (800d438 <ulTaskNotifyTake+0x90>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800d412:	e005      	b.n	800d420 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d414:	4b08      	ldr	r3, [pc, #32]	@ (800d438 <ulTaskNotifyTake+0x90>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	3a01      	subs	r2, #1
 800d41c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d420:	4b05      	ldr	r3, [pc, #20]	@ (800d438 <ulTaskNotifyTake+0x90>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2200      	movs	r2, #0
 800d426:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800d42a:	f000 fdaf 	bl	800df8c <vPortExitCritical>

		return ulReturn;
 800d42e:	68fb      	ldr	r3, [r7, #12]
	}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	2000175c 	.word	0x2000175c
 800d43c:	e000ed04 	.word	0xe000ed04

0800d440 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d440:	b580      	push	{r7, lr}
 800d442:	b08a      	sub	sp, #40	@ 0x28
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10b      	bne.n	800d468 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d454:	f383 8811 	msr	BASEPRI, r3
 800d458:	f3bf 8f6f 	isb	sy
 800d45c:	f3bf 8f4f 	dsb	sy
 800d460:	61bb      	str	r3, [r7, #24]
}
 800d462:	bf00      	nop
 800d464:	bf00      	nop
 800d466:	e7fd      	b.n	800d464 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d468:	f000 fe3e 	bl	800e0e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800d470:	f3ef 8211 	mrs	r2, BASEPRI
 800d474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	617a      	str	r2, [r7, #20]
 800d486:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d488:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d48a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d492:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d496:	2202      	movs	r2, #2
 800d498:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d4aa:	7ffb      	ldrb	r3, [r7, #31]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d147      	bne.n	800d540 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00b      	beq.n	800d4d0 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	60fb      	str	r3, [r7, #12]
}
 800d4ca:	bf00      	nop
 800d4cc:	bf00      	nop
 800d4ce:	e7fd      	b.n	800d4cc <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4d0:	4b20      	ldr	r3, [pc, #128]	@ (800d554 <vTaskNotifyGiveFromISR+0x114>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d11d      	bne.n	800d514 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4da:	3304      	adds	r3, #4
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fe fa5f 	bl	800b9a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4e6:	4b1c      	ldr	r3, [pc, #112]	@ (800d558 <vTaskNotifyGiveFromISR+0x118>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d903      	bls.n	800d4f6 <vTaskNotifyGiveFromISR+0xb6>
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f2:	4a19      	ldr	r2, [pc, #100]	@ (800d558 <vTaskNotifyGiveFromISR+0x118>)
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	4413      	add	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4a16      	ldr	r2, [pc, #88]	@ (800d55c <vTaskNotifyGiveFromISR+0x11c>)
 800d504:	441a      	add	r2, r3
 800d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d508:	3304      	adds	r3, #4
 800d50a:	4619      	mov	r1, r3
 800d50c:	4610      	mov	r0, r2
 800d50e:	f7fe f9ea 	bl	800b8e6 <vListInsertEnd>
 800d512:	e005      	b.n	800d520 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d516:	3318      	adds	r3, #24
 800d518:	4619      	mov	r1, r3
 800d51a:	4811      	ldr	r0, [pc, #68]	@ (800d560 <vTaskNotifyGiveFromISR+0x120>)
 800d51c:	f7fe f9e3 	bl	800b8e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d524:	4b0f      	ldr	r3, [pc, #60]	@ (800d564 <vTaskNotifyGiveFromISR+0x124>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d908      	bls.n	800d540 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2201      	movs	r2, #1
 800d538:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d53a:	4b0b      	ldr	r3, [pc, #44]	@ (800d568 <vTaskNotifyGiveFromISR+0x128>)
 800d53c:	2201      	movs	r2, #1
 800d53e:	601a      	str	r2, [r3, #0]
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	f383 8811 	msr	BASEPRI, r3
}
 800d54a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d54c:	bf00      	nop
 800d54e:	3728      	adds	r7, #40	@ 0x28
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	20001c58 	.word	0x20001c58
 800d558:	20001c38 	.word	0x20001c38
 800d55c:	20001760 	.word	0x20001760
 800d560:	20001bf0 	.word	0x20001bf0
 800d564:	2000175c 	.word	0x2000175c
 800d568:	20001c44 	.word	0x20001c44

0800d56c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d576:	4b21      	ldr	r3, [pc, #132]	@ (800d5fc <prvAddCurrentTaskToDelayedList+0x90>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d57c:	4b20      	ldr	r3, [pc, #128]	@ (800d600 <prvAddCurrentTaskToDelayedList+0x94>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3304      	adds	r3, #4
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe fa0c 	bl	800b9a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d58e:	d10a      	bne.n	800d5a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d007      	beq.n	800d5a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d596:	4b1a      	ldr	r3, [pc, #104]	@ (800d600 <prvAddCurrentTaskToDelayedList+0x94>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4619      	mov	r1, r3
 800d59e:	4819      	ldr	r0, [pc, #100]	@ (800d604 <prvAddCurrentTaskToDelayedList+0x98>)
 800d5a0:	f7fe f9a1 	bl	800b8e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5a4:	e026      	b.n	800d5f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5ae:	4b14      	ldr	r3, [pc, #80]	@ (800d600 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d209      	bcs.n	800d5d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5be:	4b12      	ldr	r3, [pc, #72]	@ (800d608 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d600 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	f7fe f9af 	bl	800b92e <vListInsert>
}
 800d5d0:	e010      	b.n	800d5f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d60c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d600 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3304      	adds	r3, #4
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4610      	mov	r0, r2
 800d5e0:	f7fe f9a5 	bl	800b92e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d610 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d202      	bcs.n	800d5f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d5ee:	4a08      	ldr	r2, [pc, #32]	@ (800d610 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	6013      	str	r3, [r2, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	20001c34 	.word	0x20001c34
 800d600:	2000175c 	.word	0x2000175c
 800d604:	20001c1c 	.word	0x20001c1c
 800d608:	20001bec 	.word	0x20001bec
 800d60c:	20001be8 	.word	0x20001be8
 800d610:	20001c50 	.word	0x20001c50

0800d614 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08a      	sub	sp, #40	@ 0x28
 800d618:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d61a:	2300      	movs	r3, #0
 800d61c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d61e:	f000 fb13 	bl	800dc48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d622:	4b1d      	ldr	r3, [pc, #116]	@ (800d698 <xTimerCreateTimerTask+0x84>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d021      	beq.n	800d66e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d62e:	2300      	movs	r3, #0
 800d630:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d632:	1d3a      	adds	r2, r7, #4
 800d634:	f107 0108 	add.w	r1, r7, #8
 800d638:	f107 030c 	add.w	r3, r7, #12
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe f90b 	bl	800b858 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d642:	6879      	ldr	r1, [r7, #4]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	9202      	str	r2, [sp, #8]
 800d64a:	9301      	str	r3, [sp, #4]
 800d64c:	2302      	movs	r3, #2
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	2300      	movs	r3, #0
 800d652:	460a      	mov	r2, r1
 800d654:	4911      	ldr	r1, [pc, #68]	@ (800d69c <xTimerCreateTimerTask+0x88>)
 800d656:	4812      	ldr	r0, [pc, #72]	@ (800d6a0 <xTimerCreateTimerTask+0x8c>)
 800d658:	f7fe fec6 	bl	800c3e8 <xTaskCreateStatic>
 800d65c:	4603      	mov	r3, r0
 800d65e:	4a11      	ldr	r2, [pc, #68]	@ (800d6a4 <xTimerCreateTimerTask+0x90>)
 800d660:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d662:	4b10      	ldr	r3, [pc, #64]	@ (800d6a4 <xTimerCreateTimerTask+0x90>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d001      	beq.n	800d66e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d66a:	2301      	movs	r3, #1
 800d66c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10b      	bne.n	800d68c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	613b      	str	r3, [r7, #16]
}
 800d686:	bf00      	nop
 800d688:	bf00      	nop
 800d68a:	e7fd      	b.n	800d688 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d68c:	697b      	ldr	r3, [r7, #20]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3718      	adds	r7, #24
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20001c8c 	.word	0x20001c8c
 800d69c:	08011440 	.word	0x08011440
 800d6a0:	0800d7e1 	.word	0x0800d7e1
 800d6a4:	20001c90 	.word	0x20001c90

0800d6a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08a      	sub	sp, #40	@ 0x28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d10b      	bne.n	800d6d8 <xTimerGenericCommand+0x30>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	623b      	str	r3, [r7, #32]
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	e7fd      	b.n	800d6d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6d8:	4b19      	ldr	r3, [pc, #100]	@ (800d740 <xTimerGenericCommand+0x98>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d02a      	beq.n	800d736 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b05      	cmp	r3, #5
 800d6f0:	dc18      	bgt.n	800d724 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6f2:	f7ff fdcb 	bl	800d28c <xTaskGetSchedulerState>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d109      	bne.n	800d710 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6fc:	4b10      	ldr	r3, [pc, #64]	@ (800d740 <xTimerGenericCommand+0x98>)
 800d6fe:	6818      	ldr	r0, [r3, #0]
 800d700:	f107 0110 	add.w	r1, r7, #16
 800d704:	2300      	movs	r3, #0
 800d706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d708:	f7fe fa7e 	bl	800bc08 <xQueueGenericSend>
 800d70c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d70e:	e012      	b.n	800d736 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d710:	4b0b      	ldr	r3, [pc, #44]	@ (800d740 <xTimerGenericCommand+0x98>)
 800d712:	6818      	ldr	r0, [r3, #0]
 800d714:	f107 0110 	add.w	r1, r7, #16
 800d718:	2300      	movs	r3, #0
 800d71a:	2200      	movs	r2, #0
 800d71c:	f7fe fa74 	bl	800bc08 <xQueueGenericSend>
 800d720:	6278      	str	r0, [r7, #36]	@ 0x24
 800d722:	e008      	b.n	800d736 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d724:	4b06      	ldr	r3, [pc, #24]	@ (800d740 <xTimerGenericCommand+0x98>)
 800d726:	6818      	ldr	r0, [r3, #0]
 800d728:	f107 0110 	add.w	r1, r7, #16
 800d72c:	2300      	movs	r3, #0
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	f7fe fb6c 	bl	800be0c <xQueueGenericSendFromISR>
 800d734:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3728      	adds	r7, #40	@ 0x28
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	20001c8c 	.word	0x20001c8c

0800d744 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b088      	sub	sp, #32
 800d748:	af02      	add	r7, sp, #8
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d74e:	4b23      	ldr	r3, [pc, #140]	@ (800d7dc <prvProcessExpiredTimer+0x98>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	3304      	adds	r3, #4
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fe f91f 	bl	800b9a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d768:	f003 0304 	and.w	r3, r3, #4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d023      	beq.n	800d7b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	699a      	ldr	r2, [r3, #24]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	18d1      	adds	r1, r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	6978      	ldr	r0, [r7, #20]
 800d77e:	f000 f8d5 	bl	800d92c <prvInsertTimerInActiveList>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d020      	beq.n	800d7ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d788:	2300      	movs	r3, #0
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	2300      	movs	r3, #0
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	2100      	movs	r1, #0
 800d792:	6978      	ldr	r0, [r7, #20]
 800d794:	f7ff ff88 	bl	800d6a8 <xTimerGenericCommand>
 800d798:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d114      	bne.n	800d7ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	60fb      	str	r3, [r7, #12]
}
 800d7b2:	bf00      	nop
 800d7b4:	bf00      	nop
 800d7b6:	e7fd      	b.n	800d7b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7be:	f023 0301 	bic.w	r3, r3, #1
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	6a1b      	ldr	r3, [r3, #32]
 800d7ce:	6978      	ldr	r0, [r7, #20]
 800d7d0:	4798      	blx	r3
}
 800d7d2:	bf00      	nop
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	20001c84 	.word	0x20001c84

0800d7e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7e8:	f107 0308 	add.w	r3, r7, #8
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 f859 	bl	800d8a4 <prvGetNextExpireTime>
 800d7f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f000 f805 	bl	800d808 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7fe:	f000 f8d7 	bl	800d9b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d802:	bf00      	nop
 800d804:	e7f0      	b.n	800d7e8 <prvTimerTask+0x8>
	...

0800d808 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d812:	f7ff f84d 	bl	800c8b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d816:	f107 0308 	add.w	r3, r7, #8
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 f866 	bl	800d8ec <prvSampleTimeNow>
 800d820:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d130      	bne.n	800d88a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10a      	bne.n	800d844 <prvProcessTimerOrBlockTask+0x3c>
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	429a      	cmp	r2, r3
 800d834:	d806      	bhi.n	800d844 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d836:	f7ff f849 	bl	800c8cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d83a:	68f9      	ldr	r1, [r7, #12]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff ff81 	bl	800d744 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d842:	e024      	b.n	800d88e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d008      	beq.n	800d85c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d84a:	4b13      	ldr	r3, [pc, #76]	@ (800d898 <prvProcessTimerOrBlockTask+0x90>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d101      	bne.n	800d858 <prvProcessTimerOrBlockTask+0x50>
 800d854:	2301      	movs	r3, #1
 800d856:	e000      	b.n	800d85a <prvProcessTimerOrBlockTask+0x52>
 800d858:	2300      	movs	r3, #0
 800d85a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d85c:	4b0f      	ldr	r3, [pc, #60]	@ (800d89c <prvProcessTimerOrBlockTask+0x94>)
 800d85e:	6818      	ldr	r0, [r3, #0]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	683a      	ldr	r2, [r7, #0]
 800d868:	4619      	mov	r1, r3
 800d86a:	f7fe fd89 	bl	800c380 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d86e:	f7ff f82d 	bl	800c8cc <xTaskResumeAll>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10a      	bne.n	800d88e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d878:	4b09      	ldr	r3, [pc, #36]	@ (800d8a0 <prvProcessTimerOrBlockTask+0x98>)
 800d87a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	f3bf 8f6f 	isb	sy
}
 800d888:	e001      	b.n	800d88e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d88a:	f7ff f81f 	bl	800c8cc <xTaskResumeAll>
}
 800d88e:	bf00      	nop
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20001c88 	.word	0x20001c88
 800d89c:	20001c8c 	.word	0x20001c8c
 800d8a0:	e000ed04 	.word	0xe000ed04

0800d8a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d8e8 <prvGetNextExpireTime+0x44>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <prvGetNextExpireTime+0x16>
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	e000      	b.n	800d8bc <prvGetNextExpireTime+0x18>
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d105      	bne.n	800d8d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d8c8:	4b07      	ldr	r3, [pc, #28]	@ (800d8e8 <prvGetNextExpireTime+0x44>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	60fb      	str	r3, [r7, #12]
 800d8d2:	e001      	b.n	800d8d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	20001c84 	.word	0x20001c84

0800d8ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8f4:	f7ff f888 	bl	800ca08 <xTaskGetTickCount>
 800d8f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d928 <prvSampleTimeNow+0x3c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	429a      	cmp	r2, r3
 800d902:	d205      	bcs.n	800d910 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d904:	f000 f93a 	bl	800db7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2201      	movs	r2, #1
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	e002      	b.n	800d916 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d916:	4a04      	ldr	r2, [pc, #16]	@ (800d928 <prvSampleTimeNow+0x3c>)
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d91c:	68fb      	ldr	r3, [r7, #12]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	20001c94 	.word	0x20001c94

0800d92c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
 800d938:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d93a:	2300      	movs	r3, #0
 800d93c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d812      	bhi.n	800d978 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	1ad2      	subs	r2, r2, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d302      	bcc.n	800d966 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d960:	2301      	movs	r3, #1
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	e01b      	b.n	800d99e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d966:	4b10      	ldr	r3, [pc, #64]	@ (800d9a8 <prvInsertTimerInActiveList+0x7c>)
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	3304      	adds	r3, #4
 800d96e:	4619      	mov	r1, r3
 800d970:	4610      	mov	r0, r2
 800d972:	f7fd ffdc 	bl	800b92e <vListInsert>
 800d976:	e012      	b.n	800d99e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d206      	bcs.n	800d98e <prvInsertTimerInActiveList+0x62>
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	429a      	cmp	r2, r3
 800d986:	d302      	bcc.n	800d98e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d988:	2301      	movs	r3, #1
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e007      	b.n	800d99e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d98e:	4b07      	ldr	r3, [pc, #28]	@ (800d9ac <prvInsertTimerInActiveList+0x80>)
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	3304      	adds	r3, #4
 800d996:	4619      	mov	r1, r3
 800d998:	4610      	mov	r0, r2
 800d99a:	f7fd ffc8 	bl	800b92e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d99e:	697b      	ldr	r3, [r7, #20]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3718      	adds	r7, #24
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	20001c88 	.word	0x20001c88
 800d9ac:	20001c84 	.word	0x20001c84

0800d9b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08e      	sub	sp, #56	@ 0x38
 800d9b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9b6:	e0ce      	b.n	800db56 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	da19      	bge.n	800d9f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d9be:	1d3b      	adds	r3, r7, #4
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10b      	bne.n	800d9e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ce:	f383 8811 	msr	BASEPRI, r3
 800d9d2:	f3bf 8f6f 	isb	sy
 800d9d6:	f3bf 8f4f 	dsb	sy
 800d9da:	61fb      	str	r3, [r7, #28]
}
 800d9dc:	bf00      	nop
 800d9de:	bf00      	nop
 800d9e0:	e7fd      	b.n	800d9de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9e8:	6850      	ldr	r0, [r2, #4]
 800d9ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9ec:	6892      	ldr	r2, [r2, #8]
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f2c0 80ae 	blt.w	800db56 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da00:	695b      	ldr	r3, [r3, #20]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d004      	beq.n	800da10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da08:	3304      	adds	r3, #4
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd ffc8 	bl	800b9a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da10:	463b      	mov	r3, r7
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff ff6a 	bl	800d8ec <prvSampleTimeNow>
 800da18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2b09      	cmp	r3, #9
 800da1e:	f200 8097 	bhi.w	800db50 <prvProcessReceivedCommands+0x1a0>
 800da22:	a201      	add	r2, pc, #4	@ (adr r2, 800da28 <prvProcessReceivedCommands+0x78>)
 800da24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da28:	0800da51 	.word	0x0800da51
 800da2c:	0800da51 	.word	0x0800da51
 800da30:	0800da51 	.word	0x0800da51
 800da34:	0800dac7 	.word	0x0800dac7
 800da38:	0800dadb 	.word	0x0800dadb
 800da3c:	0800db27 	.word	0x0800db27
 800da40:	0800da51 	.word	0x0800da51
 800da44:	0800da51 	.word	0x0800da51
 800da48:	0800dac7 	.word	0x0800dac7
 800da4c:	0800dadb 	.word	0x0800dadb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da56:	f043 0301 	orr.w	r3, r3, #1
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	18d1      	adds	r1, r2, r3
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da70:	f7ff ff5c 	bl	800d92c <prvInsertTimerInActiveList>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d06c      	beq.n	800db54 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7c:	6a1b      	ldr	r3, [r3, #32]
 800da7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da88:	f003 0304 	and.w	r3, r3, #4
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d061      	beq.n	800db54 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	441a      	add	r2, r3
 800da98:	2300      	movs	r3, #0
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	2300      	movs	r3, #0
 800da9e:	2100      	movs	r1, #0
 800daa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daa2:	f7ff fe01 	bl	800d6a8 <xTimerGenericCommand>
 800daa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800daa8:	6a3b      	ldr	r3, [r7, #32]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d152      	bne.n	800db54 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	61bb      	str	r3, [r7, #24]
}
 800dac0:	bf00      	nop
 800dac2:	bf00      	nop
 800dac4:	e7fd      	b.n	800dac2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dacc:	f023 0301 	bic.w	r3, r3, #1
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dad8:	e03d      	b.n	800db56 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dadc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dae0:	f043 0301 	orr.w	r3, r3, #1
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800daec:	68ba      	ldr	r2, [r7, #8]
 800daee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800daf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf4:	699b      	ldr	r3, [r3, #24]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10b      	bne.n	800db12 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	617b      	str	r3, [r7, #20]
}
 800db0c:	bf00      	nop
 800db0e:	bf00      	nop
 800db10:	e7fd      	b.n	800db0e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db14:	699a      	ldr	r2, [r3, #24]
 800db16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db18:	18d1      	adds	r1, r2, r3
 800db1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db20:	f7ff ff04 	bl	800d92c <prvInsertTimerInActiveList>
					break;
 800db24:	e017      	b.n	800db56 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db2c:	f003 0302 	and.w	r3, r3, #2
 800db30:	2b00      	cmp	r3, #0
 800db32:	d103      	bne.n	800db3c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800db34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db36:	f000 fbe7 	bl	800e308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db3a:	e00c      	b.n	800db56 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db42:	f023 0301 	bic.w	r3, r3, #1
 800db46:	b2da      	uxtb	r2, r3
 800db48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db4e:	e002      	b.n	800db56 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800db50:	bf00      	nop
 800db52:	e000      	b.n	800db56 <prvProcessReceivedCommands+0x1a6>
					break;
 800db54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db56:	4b08      	ldr	r3, [pc, #32]	@ (800db78 <prvProcessReceivedCommands+0x1c8>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	1d39      	adds	r1, r7, #4
 800db5c:	2200      	movs	r2, #0
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fe f9f2 	bl	800bf48 <xQueueReceive>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	f47f af26 	bne.w	800d9b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800db6c:	bf00      	nop
 800db6e:	bf00      	nop
 800db70:	3730      	adds	r7, #48	@ 0x30
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20001c8c 	.word	0x20001c8c

0800db7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b088      	sub	sp, #32
 800db80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db82:	e049      	b.n	800dc18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db84:	4b2e      	ldr	r3, [pc, #184]	@ (800dc40 <prvSwitchTimerLists+0xc4>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db8e:	4b2c      	ldr	r3, [pc, #176]	@ (800dc40 <prvSwitchTimerLists+0xc4>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3304      	adds	r3, #4
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fd feff 	bl	800b9a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6a1b      	ldr	r3, [r3, #32]
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbb0:	f003 0304 	and.w	r3, r3, #4
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d02f      	beq.n	800dc18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	693a      	ldr	r2, [r7, #16]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d90e      	bls.n	800dbe8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbd6:	4b1a      	ldr	r3, [pc, #104]	@ (800dc40 <prvSwitchTimerLists+0xc4>)
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3304      	adds	r3, #4
 800dbde:	4619      	mov	r1, r3
 800dbe0:	4610      	mov	r0, r2
 800dbe2:	f7fd fea4 	bl	800b92e <vListInsert>
 800dbe6:	e017      	b.n	800dc18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	2300      	movs	r3, #0
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f7ff fd58 	bl	800d6a8 <xTimerGenericCommand>
 800dbf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10b      	bne.n	800dc18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc04:	f383 8811 	msr	BASEPRI, r3
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	603b      	str	r3, [r7, #0]
}
 800dc12:	bf00      	nop
 800dc14:	bf00      	nop
 800dc16:	e7fd      	b.n	800dc14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc18:	4b09      	ldr	r3, [pc, #36]	@ (800dc40 <prvSwitchTimerLists+0xc4>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1b0      	bne.n	800db84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc22:	4b07      	ldr	r3, [pc, #28]	@ (800dc40 <prvSwitchTimerLists+0xc4>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc28:	4b06      	ldr	r3, [pc, #24]	@ (800dc44 <prvSwitchTimerLists+0xc8>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a04      	ldr	r2, [pc, #16]	@ (800dc40 <prvSwitchTimerLists+0xc4>)
 800dc2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc30:	4a04      	ldr	r2, [pc, #16]	@ (800dc44 <prvSwitchTimerLists+0xc8>)
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	6013      	str	r3, [r2, #0]
}
 800dc36:	bf00      	nop
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	20001c84 	.word	0x20001c84
 800dc44:	20001c88 	.word	0x20001c88

0800dc48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc4e:	f000 f96b 	bl	800df28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc52:	4b15      	ldr	r3, [pc, #84]	@ (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d120      	bne.n	800dc9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dc5a:	4814      	ldr	r0, [pc, #80]	@ (800dcac <prvCheckForValidListAndQueue+0x64>)
 800dc5c:	f7fd fe16 	bl	800b88c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dc60:	4813      	ldr	r0, [pc, #76]	@ (800dcb0 <prvCheckForValidListAndQueue+0x68>)
 800dc62:	f7fd fe13 	bl	800b88c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dc66:	4b13      	ldr	r3, [pc, #76]	@ (800dcb4 <prvCheckForValidListAndQueue+0x6c>)
 800dc68:	4a10      	ldr	r2, [pc, #64]	@ (800dcac <prvCheckForValidListAndQueue+0x64>)
 800dc6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dc6c:	4b12      	ldr	r3, [pc, #72]	@ (800dcb8 <prvCheckForValidListAndQueue+0x70>)
 800dc6e:	4a10      	ldr	r2, [pc, #64]	@ (800dcb0 <prvCheckForValidListAndQueue+0x68>)
 800dc70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dc72:	2300      	movs	r3, #0
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	4b11      	ldr	r3, [pc, #68]	@ (800dcbc <prvCheckForValidListAndQueue+0x74>)
 800dc78:	4a11      	ldr	r2, [pc, #68]	@ (800dcc0 <prvCheckForValidListAndQueue+0x78>)
 800dc7a:	2110      	movs	r1, #16
 800dc7c:	200a      	movs	r0, #10
 800dc7e:	f7fd ff23 	bl	800bac8 <xQueueGenericCreateStatic>
 800dc82:	4603      	mov	r3, r0
 800dc84:	4a08      	ldr	r2, [pc, #32]	@ (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc88:	4b07      	ldr	r3, [pc, #28]	@ (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d005      	beq.n	800dc9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc90:	4b05      	ldr	r3, [pc, #20]	@ (800dca8 <prvCheckForValidListAndQueue+0x60>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	490b      	ldr	r1, [pc, #44]	@ (800dcc4 <prvCheckForValidListAndQueue+0x7c>)
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fb48 	bl	800c32c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc9c:	f000 f976 	bl	800df8c <vPortExitCritical>
}
 800dca0:	bf00      	nop
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	20001c8c 	.word	0x20001c8c
 800dcac:	20001c5c 	.word	0x20001c5c
 800dcb0:	20001c70 	.word	0x20001c70
 800dcb4:	20001c84 	.word	0x20001c84
 800dcb8:	20001c88 	.word	0x20001c88
 800dcbc:	20001d38 	.word	0x20001d38
 800dcc0:	20001c98 	.word	0x20001c98
 800dcc4:	08011448 	.word	0x08011448

0800dcc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	3b04      	subs	r3, #4
 800dcd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3b04      	subs	r3, #4
 800dce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	f023 0201 	bic.w	r2, r3, #1
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	3b04      	subs	r3, #4
 800dcf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dcf8:	4a0c      	ldr	r2, [pc, #48]	@ (800dd2c <pxPortInitialiseStack+0x64>)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3b14      	subs	r3, #20
 800dd02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3b04      	subs	r3, #4
 800dd0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f06f 0202 	mvn.w	r2, #2
 800dd16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3b20      	subs	r3, #32
 800dd1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3714      	adds	r7, #20
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr
 800dd2c:	0800dd31 	.word	0x0800dd31

0800dd30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd30:	b480      	push	{r7}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd3a:	4b13      	ldr	r3, [pc, #76]	@ (800dd88 <prvTaskExitError+0x58>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd42:	d00b      	beq.n	800dd5c <prvTaskExitError+0x2c>
	__asm volatile
 800dd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	60fb      	str	r3, [r7, #12]
}
 800dd56:	bf00      	nop
 800dd58:	bf00      	nop
 800dd5a:	e7fd      	b.n	800dd58 <prvTaskExitError+0x28>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	60bb      	str	r3, [r7, #8]
}
 800dd6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd70:	bf00      	nop
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d0fc      	beq.n	800dd72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd78:	bf00      	nop
 800dd7a:	bf00      	nop
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	20000114 	.word	0x20000114
 800dd8c:	00000000 	.word	0x00000000

0800dd90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dd90:	4b07      	ldr	r3, [pc, #28]	@ (800ddb0 <pxCurrentTCBConst2>)
 800dd92:	6819      	ldr	r1, [r3, #0]
 800dd94:	6808      	ldr	r0, [r1, #0]
 800dd96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9a:	f380 8809 	msr	PSP, r0
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f04f 0000 	mov.w	r0, #0
 800dda6:	f380 8811 	msr	BASEPRI, r0
 800ddaa:	4770      	bx	lr
 800ddac:	f3af 8000 	nop.w

0800ddb0 <pxCurrentTCBConst2>:
 800ddb0:	2000175c 	.word	0x2000175c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ddb4:	bf00      	nop
 800ddb6:	bf00      	nop

0800ddb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ddb8:	4808      	ldr	r0, [pc, #32]	@ (800dddc <prvPortStartFirstTask+0x24>)
 800ddba:	6800      	ldr	r0, [r0, #0]
 800ddbc:	6800      	ldr	r0, [r0, #0]
 800ddbe:	f380 8808 	msr	MSP, r0
 800ddc2:	f04f 0000 	mov.w	r0, #0
 800ddc6:	f380 8814 	msr	CONTROL, r0
 800ddca:	b662      	cpsie	i
 800ddcc:	b661      	cpsie	f
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	df00      	svc	0
 800ddd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ddda:	bf00      	nop
 800dddc:	e000ed08 	.word	0xe000ed08

0800dde0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dde6:	4b47      	ldr	r3, [pc, #284]	@ (800df04 <xPortStartScheduler+0x124>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a47      	ldr	r2, [pc, #284]	@ (800df08 <xPortStartScheduler+0x128>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d10b      	bne.n	800de08 <xPortStartScheduler+0x28>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	613b      	str	r3, [r7, #16]
}
 800de02:	bf00      	nop
 800de04:	bf00      	nop
 800de06:	e7fd      	b.n	800de04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de08:	4b3e      	ldr	r3, [pc, #248]	@ (800df04 <xPortStartScheduler+0x124>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4a3f      	ldr	r2, [pc, #252]	@ (800df0c <xPortStartScheduler+0x12c>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d10b      	bne.n	800de2a <xPortStartScheduler+0x4a>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	60fb      	str	r3, [r7, #12]
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop
 800de28:	e7fd      	b.n	800de26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de2a:	4b39      	ldr	r3, [pc, #228]	@ (800df10 <xPortStartScheduler+0x130>)
 800de2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	b2db      	uxtb	r3, r3
 800de34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	22ff      	movs	r2, #255	@ 0xff
 800de3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	b2db      	uxtb	r3, r3
 800de42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de44:	78fb      	ldrb	r3, [r7, #3]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	4b31      	ldr	r3, [pc, #196]	@ (800df14 <xPortStartScheduler+0x134>)
 800de50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de52:	4b31      	ldr	r3, [pc, #196]	@ (800df18 <xPortStartScheduler+0x138>)
 800de54:	2207      	movs	r2, #7
 800de56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de58:	e009      	b.n	800de6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800de5a:	4b2f      	ldr	r3, [pc, #188]	@ (800df18 <xPortStartScheduler+0x138>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	3b01      	subs	r3, #1
 800de60:	4a2d      	ldr	r2, [pc, #180]	@ (800df18 <xPortStartScheduler+0x138>)
 800de62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de64:	78fb      	ldrb	r3, [r7, #3]
 800de66:	b2db      	uxtb	r3, r3
 800de68:	005b      	lsls	r3, r3, #1
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de6e:	78fb      	ldrb	r3, [r7, #3]
 800de70:	b2db      	uxtb	r3, r3
 800de72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de76:	2b80      	cmp	r3, #128	@ 0x80
 800de78:	d0ef      	beq.n	800de5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de7a:	4b27      	ldr	r3, [pc, #156]	@ (800df18 <xPortStartScheduler+0x138>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f1c3 0307 	rsb	r3, r3, #7
 800de82:	2b04      	cmp	r3, #4
 800de84:	d00b      	beq.n	800de9e <xPortStartScheduler+0xbe>
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8a:	f383 8811 	msr	BASEPRI, r3
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	60bb      	str	r3, [r7, #8]
}
 800de98:	bf00      	nop
 800de9a:	bf00      	nop
 800de9c:	e7fd      	b.n	800de9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de9e:	4b1e      	ldr	r3, [pc, #120]	@ (800df18 <xPortStartScheduler+0x138>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	021b      	lsls	r3, r3, #8
 800dea4:	4a1c      	ldr	r2, [pc, #112]	@ (800df18 <xPortStartScheduler+0x138>)
 800dea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dea8:	4b1b      	ldr	r3, [pc, #108]	@ (800df18 <xPortStartScheduler+0x138>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800deb0:	4a19      	ldr	r2, [pc, #100]	@ (800df18 <xPortStartScheduler+0x138>)
 800deb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800debc:	4b17      	ldr	r3, [pc, #92]	@ (800df1c <xPortStartScheduler+0x13c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a16      	ldr	r2, [pc, #88]	@ (800df1c <xPortStartScheduler+0x13c>)
 800dec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dec8:	4b14      	ldr	r3, [pc, #80]	@ (800df1c <xPortStartScheduler+0x13c>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a13      	ldr	r2, [pc, #76]	@ (800df1c <xPortStartScheduler+0x13c>)
 800dece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ded2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ded4:	f000 f8da 	bl	800e08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ded8:	4b11      	ldr	r3, [pc, #68]	@ (800df20 <xPortStartScheduler+0x140>)
 800deda:	2200      	movs	r2, #0
 800dedc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dede:	f000 f8f9 	bl	800e0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dee2:	4b10      	ldr	r3, [pc, #64]	@ (800df24 <xPortStartScheduler+0x144>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a0f      	ldr	r2, [pc, #60]	@ (800df24 <xPortStartScheduler+0x144>)
 800dee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800deec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800deee:	f7ff ff63 	bl	800ddb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800def2:	f7fe ff4d 	bl	800cd90 <vTaskSwitchContext>
	prvTaskExitError();
 800def6:	f7ff ff1b 	bl	800dd30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	e000ed00 	.word	0xe000ed00
 800df08:	410fc271 	.word	0x410fc271
 800df0c:	410fc270 	.word	0x410fc270
 800df10:	e000e400 	.word	0xe000e400
 800df14:	20001d88 	.word	0x20001d88
 800df18:	20001d8c 	.word	0x20001d8c
 800df1c:	e000ed20 	.word	0xe000ed20
 800df20:	20000114 	.word	0x20000114
 800df24:	e000ef34 	.word	0xe000ef34

0800df28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	607b      	str	r3, [r7, #4]
}
 800df40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df42:	4b10      	ldr	r3, [pc, #64]	@ (800df84 <vPortEnterCritical+0x5c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	3301      	adds	r3, #1
 800df48:	4a0e      	ldr	r2, [pc, #56]	@ (800df84 <vPortEnterCritical+0x5c>)
 800df4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df4c:	4b0d      	ldr	r3, [pc, #52]	@ (800df84 <vPortEnterCritical+0x5c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d110      	bne.n	800df76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800df54:	4b0c      	ldr	r3, [pc, #48]	@ (800df88 <vPortEnterCritical+0x60>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00b      	beq.n	800df76 <vPortEnterCritical+0x4e>
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	603b      	str	r3, [r7, #0]
}
 800df70:	bf00      	nop
 800df72:	bf00      	nop
 800df74:	e7fd      	b.n	800df72 <vPortEnterCritical+0x4a>
	}
}
 800df76:	bf00      	nop
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	20000114 	.word	0x20000114
 800df88:	e000ed04 	.word	0xe000ed04

0800df8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800df92:	4b12      	ldr	r3, [pc, #72]	@ (800dfdc <vPortExitCritical+0x50>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10b      	bne.n	800dfb2 <vPortExitCritical+0x26>
	__asm volatile
 800df9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df9e:	f383 8811 	msr	BASEPRI, r3
 800dfa2:	f3bf 8f6f 	isb	sy
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	607b      	str	r3, [r7, #4]
}
 800dfac:	bf00      	nop
 800dfae:	bf00      	nop
 800dfb0:	e7fd      	b.n	800dfae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dfb2:	4b0a      	ldr	r3, [pc, #40]	@ (800dfdc <vPortExitCritical+0x50>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	4a08      	ldr	r2, [pc, #32]	@ (800dfdc <vPortExitCritical+0x50>)
 800dfba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dfbc:	4b07      	ldr	r3, [pc, #28]	@ (800dfdc <vPortExitCritical+0x50>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d105      	bne.n	800dfd0 <vPortExitCritical+0x44>
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	f383 8811 	msr	BASEPRI, r3
}
 800dfce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dfd0:	bf00      	nop
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	20000114 	.word	0x20000114

0800dfe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dfe0:	f3ef 8009 	mrs	r0, PSP
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	4b15      	ldr	r3, [pc, #84]	@ (800e040 <pxCurrentTCBConst>)
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	f01e 0f10 	tst.w	lr, #16
 800dff0:	bf08      	it	eq
 800dff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffa:	6010      	str	r0, [r2, #0]
 800dffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e004:	f380 8811 	msr	BASEPRI, r0
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f7fe febe 	bl	800cd90 <vTaskSwitchContext>
 800e014:	f04f 0000 	mov.w	r0, #0
 800e018:	f380 8811 	msr	BASEPRI, r0
 800e01c:	bc09      	pop	{r0, r3}
 800e01e:	6819      	ldr	r1, [r3, #0]
 800e020:	6808      	ldr	r0, [r1, #0]
 800e022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e026:	f01e 0f10 	tst.w	lr, #16
 800e02a:	bf08      	it	eq
 800e02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e030:	f380 8809 	msr	PSP, r0
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	f3af 8000 	nop.w

0800e040 <pxCurrentTCBConst>:
 800e040:	2000175c 	.word	0x2000175c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e044:	bf00      	nop
 800e046:	bf00      	nop

0800e048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	607b      	str	r3, [r7, #4]
}
 800e060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e062:	f7fe fddb 	bl	800cc1c <xTaskIncrementTick>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e06c:	4b06      	ldr	r3, [pc, #24]	@ (800e088 <xPortSysTickHandler+0x40>)
 800e06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	2300      	movs	r3, #0
 800e076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	f383 8811 	msr	BASEPRI, r3
}
 800e07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e08c:	b480      	push	{r7}
 800e08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e090:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c0 <vPortSetupTimerInterrupt+0x34>)
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e096:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c4 <vPortSetupTimerInterrupt+0x38>)
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e09c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c8 <vPortSetupTimerInterrupt+0x3c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a0a      	ldr	r2, [pc, #40]	@ (800e0cc <vPortSetupTimerInterrupt+0x40>)
 800e0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0a6:	099b      	lsrs	r3, r3, #6
 800e0a8:	4a09      	ldr	r2, [pc, #36]	@ (800e0d0 <vPortSetupTimerInterrupt+0x44>)
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0ae:	4b04      	ldr	r3, [pc, #16]	@ (800e0c0 <vPortSetupTimerInterrupt+0x34>)
 800e0b0:	2207      	movs	r2, #7
 800e0b2:	601a      	str	r2, [r3, #0]
}
 800e0b4:	bf00      	nop
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	e000e010 	.word	0xe000e010
 800e0c4:	e000e018 	.word	0xe000e018
 800e0c8:	20000108 	.word	0x20000108
 800e0cc:	10624dd3 	.word	0x10624dd3
 800e0d0:	e000e014 	.word	0xe000e014

0800e0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e0e4 <vPortEnableVFP+0x10>
 800e0d8:	6801      	ldr	r1, [r0, #0]
 800e0da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e0de:	6001      	str	r1, [r0, #0]
 800e0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e0e2:	bf00      	nop
 800e0e4:	e000ed88 	.word	0xe000ed88

0800e0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e0ee:	f3ef 8305 	mrs	r3, IPSR
 800e0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b0f      	cmp	r3, #15
 800e0f8:	d915      	bls.n	800e126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e0fa:	4a18      	ldr	r2, [pc, #96]	@ (800e15c <vPortValidateInterruptPriority+0x74>)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	4413      	add	r3, r2
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e104:	4b16      	ldr	r3, [pc, #88]	@ (800e160 <vPortValidateInterruptPriority+0x78>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	7afa      	ldrb	r2, [r7, #11]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d20b      	bcs.n	800e126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	607b      	str	r3, [r7, #4]
}
 800e120:	bf00      	nop
 800e122:	bf00      	nop
 800e124:	e7fd      	b.n	800e122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e126:	4b0f      	ldr	r3, [pc, #60]	@ (800e164 <vPortValidateInterruptPriority+0x7c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e12e:	4b0e      	ldr	r3, [pc, #56]	@ (800e168 <vPortValidateInterruptPriority+0x80>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	429a      	cmp	r2, r3
 800e134:	d90b      	bls.n	800e14e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	603b      	str	r3, [r7, #0]
}
 800e148:	bf00      	nop
 800e14a:	bf00      	nop
 800e14c:	e7fd      	b.n	800e14a <vPortValidateInterruptPriority+0x62>
	}
 800e14e:	bf00      	nop
 800e150:	3714      	adds	r7, #20
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	e000e3f0 	.word	0xe000e3f0
 800e160:	20001d88 	.word	0x20001d88
 800e164:	e000ed0c 	.word	0xe000ed0c
 800e168:	20001d8c 	.word	0x20001d8c

0800e16c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08a      	sub	sp, #40	@ 0x28
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e174:	2300      	movs	r3, #0
 800e176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e178:	f7fe fb9a 	bl	800c8b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e17c:	4b5c      	ldr	r3, [pc, #368]	@ (800e2f0 <pvPortMalloc+0x184>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e184:	f000 f924 	bl	800e3d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e188:	4b5a      	ldr	r3, [pc, #360]	@ (800e2f4 <pvPortMalloc+0x188>)
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4013      	ands	r3, r2
 800e190:	2b00      	cmp	r3, #0
 800e192:	f040 8095 	bne.w	800e2c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d01e      	beq.n	800e1da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e19c:	2208      	movs	r2, #8
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f003 0307 	and.w	r3, r3, #7
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d015      	beq.n	800e1da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f023 0307 	bic.w	r3, r3, #7
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f003 0307 	and.w	r3, r3, #7
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00b      	beq.n	800e1da <pvPortMalloc+0x6e>
	__asm volatile
 800e1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c6:	f383 8811 	msr	BASEPRI, r3
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	617b      	str	r3, [r7, #20]
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop
 800e1d8:	e7fd      	b.n	800e1d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d06f      	beq.n	800e2c0 <pvPortMalloc+0x154>
 800e1e0:	4b45      	ldr	r3, [pc, #276]	@ (800e2f8 <pvPortMalloc+0x18c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d86a      	bhi.n	800e2c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e1ea:	4b44      	ldr	r3, [pc, #272]	@ (800e2fc <pvPortMalloc+0x190>)
 800e1ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e1ee:	4b43      	ldr	r3, [pc, #268]	@ (800e2fc <pvPortMalloc+0x190>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e1f4:	e004      	b.n	800e200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	429a      	cmp	r2, r3
 800e208:	d903      	bls.n	800e212 <pvPortMalloc+0xa6>
 800e20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1f1      	bne.n	800e1f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e212:	4b37      	ldr	r3, [pc, #220]	@ (800e2f0 <pvPortMalloc+0x184>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e218:	429a      	cmp	r2, r3
 800e21a:	d051      	beq.n	800e2c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e21c:	6a3b      	ldr	r3, [r7, #32]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2208      	movs	r2, #8
 800e222:	4413      	add	r3, r2
 800e224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	1ad2      	subs	r2, r2, r3
 800e236:	2308      	movs	r3, #8
 800e238:	005b      	lsls	r3, r3, #1
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d920      	bls.n	800e280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e23e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4413      	add	r3, r2
 800e244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	f003 0307 	and.w	r3, r3, #7
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00b      	beq.n	800e268 <pvPortMalloc+0xfc>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	613b      	str	r3, [r7, #16]
}
 800e262:	bf00      	nop
 800e264:	bf00      	nop
 800e266:	e7fd      	b.n	800e264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	1ad2      	subs	r2, r2, r3
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e27a:	69b8      	ldr	r0, [r7, #24]
 800e27c:	f000 f90a 	bl	800e494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e280:	4b1d      	ldr	r3, [pc, #116]	@ (800e2f8 <pvPortMalloc+0x18c>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	1ad3      	subs	r3, r2, r3
 800e28a:	4a1b      	ldr	r2, [pc, #108]	@ (800e2f8 <pvPortMalloc+0x18c>)
 800e28c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e28e:	4b1a      	ldr	r3, [pc, #104]	@ (800e2f8 <pvPortMalloc+0x18c>)
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	4b1b      	ldr	r3, [pc, #108]	@ (800e300 <pvPortMalloc+0x194>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d203      	bcs.n	800e2a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e29a:	4b17      	ldr	r3, [pc, #92]	@ (800e2f8 <pvPortMalloc+0x18c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	4a18      	ldr	r2, [pc, #96]	@ (800e300 <pvPortMalloc+0x194>)
 800e2a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a4:	685a      	ldr	r2, [r3, #4]
 800e2a6:	4b13      	ldr	r3, [pc, #76]	@ (800e2f4 <pvPortMalloc+0x188>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	431a      	orrs	r2, r3
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e2b6:	4b13      	ldr	r3, [pc, #76]	@ (800e304 <pvPortMalloc+0x198>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	4a11      	ldr	r2, [pc, #68]	@ (800e304 <pvPortMalloc+0x198>)
 800e2be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e2c0:	f7fe fb04 	bl	800c8cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	f003 0307 	and.w	r3, r3, #7
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00b      	beq.n	800e2e6 <pvPortMalloc+0x17a>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	60fb      	str	r3, [r7, #12]
}
 800e2e0:	bf00      	nop
 800e2e2:	bf00      	nop
 800e2e4:	e7fd      	b.n	800e2e2 <pvPortMalloc+0x176>
	return pvReturn;
 800e2e6:	69fb      	ldr	r3, [r7, #28]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3728      	adds	r7, #40	@ 0x28
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20005998 	.word	0x20005998
 800e2f4:	200059ac 	.word	0x200059ac
 800e2f8:	2000599c 	.word	0x2000599c
 800e2fc:	20005990 	.word	0x20005990
 800e300:	200059a0 	.word	0x200059a0
 800e304:	200059a4 	.word	0x200059a4

0800e308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d04f      	beq.n	800e3ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e31a:	2308      	movs	r3, #8
 800e31c:	425b      	negs	r3, r3
 800e31e:	697a      	ldr	r2, [r7, #20]
 800e320:	4413      	add	r3, r2
 800e322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	4b25      	ldr	r3, [pc, #148]	@ (800e3c4 <vPortFree+0xbc>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4013      	ands	r3, r2
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10b      	bne.n	800e34e <vPortFree+0x46>
	__asm volatile
 800e336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	60fb      	str	r3, [r7, #12]
}
 800e348:	bf00      	nop
 800e34a:	bf00      	nop
 800e34c:	e7fd      	b.n	800e34a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00b      	beq.n	800e36e <vPortFree+0x66>
	__asm volatile
 800e356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	60bb      	str	r3, [r7, #8]
}
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	e7fd      	b.n	800e36a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	4b14      	ldr	r3, [pc, #80]	@ (800e3c4 <vPortFree+0xbc>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4013      	ands	r3, r2
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d01e      	beq.n	800e3ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d11a      	bne.n	800e3ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	4b0e      	ldr	r3, [pc, #56]	@ (800e3c4 <vPortFree+0xbc>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	43db      	mvns	r3, r3
 800e38e:	401a      	ands	r2, r3
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e394:	f7fe fa8c 	bl	800c8b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	685a      	ldr	r2, [r3, #4]
 800e39c:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c8 <vPortFree+0xc0>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	4a09      	ldr	r2, [pc, #36]	@ (800e3c8 <vPortFree+0xc0>)
 800e3a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3a6:	6938      	ldr	r0, [r7, #16]
 800e3a8:	f000 f874 	bl	800e494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3ac:	4b07      	ldr	r3, [pc, #28]	@ (800e3cc <vPortFree+0xc4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	4a06      	ldr	r2, [pc, #24]	@ (800e3cc <vPortFree+0xc4>)
 800e3b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e3b6:	f7fe fa89 	bl	800c8cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e3ba:	bf00      	nop
 800e3bc:	3718      	adds	r7, #24
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200059ac 	.word	0x200059ac
 800e3c8:	2000599c 	.word	0x2000599c
 800e3cc:	200059a8 	.word	0x200059a8

0800e3d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e3d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e3da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e3dc:	4b27      	ldr	r3, [pc, #156]	@ (800e47c <prvHeapInit+0xac>)
 800e3de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f003 0307 	and.w	r3, r3, #7
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00c      	beq.n	800e404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3307      	adds	r3, #7
 800e3ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f023 0307 	bic.w	r3, r3, #7
 800e3f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	4a1f      	ldr	r2, [pc, #124]	@ (800e47c <prvHeapInit+0xac>)
 800e400:	4413      	add	r3, r2
 800e402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e408:	4a1d      	ldr	r2, [pc, #116]	@ (800e480 <prvHeapInit+0xb0>)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e40e:	4b1c      	ldr	r3, [pc, #112]	@ (800e480 <prvHeapInit+0xb0>)
 800e410:	2200      	movs	r2, #0
 800e412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	68ba      	ldr	r2, [r7, #8]
 800e418:	4413      	add	r3, r2
 800e41a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e41c:	2208      	movs	r2, #8
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	1a9b      	subs	r3, r3, r2
 800e422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f023 0307 	bic.w	r3, r3, #7
 800e42a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4a15      	ldr	r2, [pc, #84]	@ (800e484 <prvHeapInit+0xb4>)
 800e430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <prvHeapInit+0xb4>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2200      	movs	r2, #0
 800e438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e43a:	4b12      	ldr	r3, [pc, #72]	@ (800e484 <prvHeapInit+0xb4>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2200      	movs	r2, #0
 800e440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	1ad2      	subs	r2, r2, r3
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e450:	4b0c      	ldr	r3, [pc, #48]	@ (800e484 <prvHeapInit+0xb4>)
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	4a0a      	ldr	r2, [pc, #40]	@ (800e488 <prvHeapInit+0xb8>)
 800e45e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	4a09      	ldr	r2, [pc, #36]	@ (800e48c <prvHeapInit+0xbc>)
 800e466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e468:	4b09      	ldr	r3, [pc, #36]	@ (800e490 <prvHeapInit+0xc0>)
 800e46a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e46e:	601a      	str	r2, [r3, #0]
}
 800e470:	bf00      	nop
 800e472:	3714      	adds	r7, #20
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr
 800e47c:	20001d90 	.word	0x20001d90
 800e480:	20005990 	.word	0x20005990
 800e484:	20005998 	.word	0x20005998
 800e488:	200059a0 	.word	0x200059a0
 800e48c:	2000599c 	.word	0x2000599c
 800e490:	200059ac 	.word	0x200059ac

0800e494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e49c:	4b28      	ldr	r3, [pc, #160]	@ (800e540 <prvInsertBlockIntoFreeList+0xac>)
 800e49e:	60fb      	str	r3, [r7, #12]
 800e4a0:	e002      	b.n	800e4a8 <prvInsertBlockIntoFreeList+0x14>
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	60fb      	str	r3, [r7, #12]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d8f7      	bhi.n	800e4a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	4413      	add	r3, r2
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d108      	bne.n	800e4d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	685a      	ldr	r2, [r3, #4]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	441a      	add	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	441a      	add	r2, r3
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d118      	bne.n	800e51c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	4b15      	ldr	r3, [pc, #84]	@ (800e544 <prvInsertBlockIntoFreeList+0xb0>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d00d      	beq.n	800e512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	441a      	add	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	601a      	str	r2, [r3, #0]
 800e510:	e008      	b.n	800e524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e512:	4b0c      	ldr	r3, [pc, #48]	@ (800e544 <prvInsertBlockIntoFreeList+0xb0>)
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	601a      	str	r2, [r3, #0]
 800e51a:	e003      	b.n	800e524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d002      	beq.n	800e532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e532:	bf00      	nop
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	20005990 	.word	0x20005990
 800e544:	20005998 	.word	0x20005998

0800e548 <__cvt>:
 800e548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e54c:	ec57 6b10 	vmov	r6, r7, d0
 800e550:	2f00      	cmp	r7, #0
 800e552:	460c      	mov	r4, r1
 800e554:	4619      	mov	r1, r3
 800e556:	463b      	mov	r3, r7
 800e558:	bfbb      	ittet	lt
 800e55a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e55e:	461f      	movlt	r7, r3
 800e560:	2300      	movge	r3, #0
 800e562:	232d      	movlt	r3, #45	@ 0x2d
 800e564:	700b      	strb	r3, [r1, #0]
 800e566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e568:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e56c:	4691      	mov	r9, r2
 800e56e:	f023 0820 	bic.w	r8, r3, #32
 800e572:	bfbc      	itt	lt
 800e574:	4632      	movlt	r2, r6
 800e576:	4616      	movlt	r6, r2
 800e578:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e57c:	d005      	beq.n	800e58a <__cvt+0x42>
 800e57e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e582:	d100      	bne.n	800e586 <__cvt+0x3e>
 800e584:	3401      	adds	r4, #1
 800e586:	2102      	movs	r1, #2
 800e588:	e000      	b.n	800e58c <__cvt+0x44>
 800e58a:	2103      	movs	r1, #3
 800e58c:	ab03      	add	r3, sp, #12
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	ab02      	add	r3, sp, #8
 800e592:	9300      	str	r3, [sp, #0]
 800e594:	ec47 6b10 	vmov	d0, r6, r7
 800e598:	4653      	mov	r3, sl
 800e59a:	4622      	mov	r2, r4
 800e59c:	f000 fe34 	bl	800f208 <_dtoa_r>
 800e5a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	d119      	bne.n	800e5dc <__cvt+0x94>
 800e5a8:	f019 0f01 	tst.w	r9, #1
 800e5ac:	d00e      	beq.n	800e5cc <__cvt+0x84>
 800e5ae:	eb00 0904 	add.w	r9, r0, r4
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	f7f2 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5be:	b108      	cbz	r0, 800e5c4 <__cvt+0x7c>
 800e5c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5c4:	2230      	movs	r2, #48	@ 0x30
 800e5c6:	9b03      	ldr	r3, [sp, #12]
 800e5c8:	454b      	cmp	r3, r9
 800e5ca:	d31e      	bcc.n	800e60a <__cvt+0xc2>
 800e5cc:	9b03      	ldr	r3, [sp, #12]
 800e5ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5d0:	1b5b      	subs	r3, r3, r5
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	6013      	str	r3, [r2, #0]
 800e5d6:	b004      	add	sp, #16
 800e5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e5e0:	eb00 0904 	add.w	r9, r0, r4
 800e5e4:	d1e5      	bne.n	800e5b2 <__cvt+0x6a>
 800e5e6:	7803      	ldrb	r3, [r0, #0]
 800e5e8:	2b30      	cmp	r3, #48	@ 0x30
 800e5ea:	d10a      	bne.n	800e602 <__cvt+0xba>
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	4639      	mov	r1, r7
 800e5f4:	f7f2 fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5f8:	b918      	cbnz	r0, 800e602 <__cvt+0xba>
 800e5fa:	f1c4 0401 	rsb	r4, r4, #1
 800e5fe:	f8ca 4000 	str.w	r4, [sl]
 800e602:	f8da 3000 	ldr.w	r3, [sl]
 800e606:	4499      	add	r9, r3
 800e608:	e7d3      	b.n	800e5b2 <__cvt+0x6a>
 800e60a:	1c59      	adds	r1, r3, #1
 800e60c:	9103      	str	r1, [sp, #12]
 800e60e:	701a      	strb	r2, [r3, #0]
 800e610:	e7d9      	b.n	800e5c6 <__cvt+0x7e>

0800e612 <__exponent>:
 800e612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e614:	2900      	cmp	r1, #0
 800e616:	bfba      	itte	lt
 800e618:	4249      	neglt	r1, r1
 800e61a:	232d      	movlt	r3, #45	@ 0x2d
 800e61c:	232b      	movge	r3, #43	@ 0x2b
 800e61e:	2909      	cmp	r1, #9
 800e620:	7002      	strb	r2, [r0, #0]
 800e622:	7043      	strb	r3, [r0, #1]
 800e624:	dd29      	ble.n	800e67a <__exponent+0x68>
 800e626:	f10d 0307 	add.w	r3, sp, #7
 800e62a:	461d      	mov	r5, r3
 800e62c:	270a      	movs	r7, #10
 800e62e:	461a      	mov	r2, r3
 800e630:	fbb1 f6f7 	udiv	r6, r1, r7
 800e634:	fb07 1416 	mls	r4, r7, r6, r1
 800e638:	3430      	adds	r4, #48	@ 0x30
 800e63a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e63e:	460c      	mov	r4, r1
 800e640:	2c63      	cmp	r4, #99	@ 0x63
 800e642:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e646:	4631      	mov	r1, r6
 800e648:	dcf1      	bgt.n	800e62e <__exponent+0x1c>
 800e64a:	3130      	adds	r1, #48	@ 0x30
 800e64c:	1e94      	subs	r4, r2, #2
 800e64e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e652:	1c41      	adds	r1, r0, #1
 800e654:	4623      	mov	r3, r4
 800e656:	42ab      	cmp	r3, r5
 800e658:	d30a      	bcc.n	800e670 <__exponent+0x5e>
 800e65a:	f10d 0309 	add.w	r3, sp, #9
 800e65e:	1a9b      	subs	r3, r3, r2
 800e660:	42ac      	cmp	r4, r5
 800e662:	bf88      	it	hi
 800e664:	2300      	movhi	r3, #0
 800e666:	3302      	adds	r3, #2
 800e668:	4403      	add	r3, r0
 800e66a:	1a18      	subs	r0, r3, r0
 800e66c:	b003      	add	sp, #12
 800e66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e670:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e674:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e678:	e7ed      	b.n	800e656 <__exponent+0x44>
 800e67a:	2330      	movs	r3, #48	@ 0x30
 800e67c:	3130      	adds	r1, #48	@ 0x30
 800e67e:	7083      	strb	r3, [r0, #2]
 800e680:	70c1      	strb	r1, [r0, #3]
 800e682:	1d03      	adds	r3, r0, #4
 800e684:	e7f1      	b.n	800e66a <__exponent+0x58>
	...

0800e688 <_printf_float>:
 800e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	b08d      	sub	sp, #52	@ 0x34
 800e68e:	460c      	mov	r4, r1
 800e690:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e694:	4616      	mov	r6, r2
 800e696:	461f      	mov	r7, r3
 800e698:	4605      	mov	r5, r0
 800e69a:	f000 fc97 	bl	800efcc <_localeconv_r>
 800e69e:	6803      	ldr	r3, [r0, #0]
 800e6a0:	9304      	str	r3, [sp, #16]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7f1 fde4 	bl	8000270 <strlen>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b0:	9005      	str	r0, [sp, #20]
 800e6b2:	3307      	adds	r3, #7
 800e6b4:	f023 0307 	bic.w	r3, r3, #7
 800e6b8:	f103 0208 	add.w	r2, r3, #8
 800e6bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e6c0:	f8d4 b000 	ldr.w	fp, [r4]
 800e6c4:	f8c8 2000 	str.w	r2, [r8]
 800e6c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e6d0:	9307      	str	r3, [sp, #28]
 800e6d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e6da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6de:	4b9c      	ldr	r3, [pc, #624]	@ (800e950 <_printf_float+0x2c8>)
 800e6e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e6e4:	f7f2 fa22 	bl	8000b2c <__aeabi_dcmpun>
 800e6e8:	bb70      	cbnz	r0, 800e748 <_printf_float+0xc0>
 800e6ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6ee:	4b98      	ldr	r3, [pc, #608]	@ (800e950 <_printf_float+0x2c8>)
 800e6f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e6f4:	f7f2 f9fc 	bl	8000af0 <__aeabi_dcmple>
 800e6f8:	bb30      	cbnz	r0, 800e748 <_printf_float+0xc0>
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	4640      	mov	r0, r8
 800e700:	4649      	mov	r1, r9
 800e702:	f7f2 f9eb 	bl	8000adc <__aeabi_dcmplt>
 800e706:	b110      	cbz	r0, 800e70e <_printf_float+0x86>
 800e708:	232d      	movs	r3, #45	@ 0x2d
 800e70a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e70e:	4a91      	ldr	r2, [pc, #580]	@ (800e954 <_printf_float+0x2cc>)
 800e710:	4b91      	ldr	r3, [pc, #580]	@ (800e958 <_printf_float+0x2d0>)
 800e712:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e716:	bf94      	ite	ls
 800e718:	4690      	movls	r8, r2
 800e71a:	4698      	movhi	r8, r3
 800e71c:	2303      	movs	r3, #3
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	f02b 0304 	bic.w	r3, fp, #4
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	f04f 0900 	mov.w	r9, #0
 800e72a:	9700      	str	r7, [sp, #0]
 800e72c:	4633      	mov	r3, r6
 800e72e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e730:	4621      	mov	r1, r4
 800e732:	4628      	mov	r0, r5
 800e734:	f000 f9d2 	bl	800eadc <_printf_common>
 800e738:	3001      	adds	r0, #1
 800e73a:	f040 808d 	bne.w	800e858 <_printf_float+0x1d0>
 800e73e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e742:	b00d      	add	sp, #52	@ 0x34
 800e744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e748:	4642      	mov	r2, r8
 800e74a:	464b      	mov	r3, r9
 800e74c:	4640      	mov	r0, r8
 800e74e:	4649      	mov	r1, r9
 800e750:	f7f2 f9ec 	bl	8000b2c <__aeabi_dcmpun>
 800e754:	b140      	cbz	r0, 800e768 <_printf_float+0xe0>
 800e756:	464b      	mov	r3, r9
 800e758:	2b00      	cmp	r3, #0
 800e75a:	bfbc      	itt	lt
 800e75c:	232d      	movlt	r3, #45	@ 0x2d
 800e75e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e762:	4a7e      	ldr	r2, [pc, #504]	@ (800e95c <_printf_float+0x2d4>)
 800e764:	4b7e      	ldr	r3, [pc, #504]	@ (800e960 <_printf_float+0x2d8>)
 800e766:	e7d4      	b.n	800e712 <_printf_float+0x8a>
 800e768:	6863      	ldr	r3, [r4, #4]
 800e76a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e76e:	9206      	str	r2, [sp, #24]
 800e770:	1c5a      	adds	r2, r3, #1
 800e772:	d13b      	bne.n	800e7ec <_printf_float+0x164>
 800e774:	2306      	movs	r3, #6
 800e776:	6063      	str	r3, [r4, #4]
 800e778:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e77c:	2300      	movs	r3, #0
 800e77e:	6022      	str	r2, [r4, #0]
 800e780:	9303      	str	r3, [sp, #12]
 800e782:	ab0a      	add	r3, sp, #40	@ 0x28
 800e784:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e788:	ab09      	add	r3, sp, #36	@ 0x24
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	6861      	ldr	r1, [r4, #4]
 800e78e:	ec49 8b10 	vmov	d0, r8, r9
 800e792:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e796:	4628      	mov	r0, r5
 800e798:	f7ff fed6 	bl	800e548 <__cvt>
 800e79c:	9b06      	ldr	r3, [sp, #24]
 800e79e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7a0:	2b47      	cmp	r3, #71	@ 0x47
 800e7a2:	4680      	mov	r8, r0
 800e7a4:	d129      	bne.n	800e7fa <_printf_float+0x172>
 800e7a6:	1cc8      	adds	r0, r1, #3
 800e7a8:	db02      	blt.n	800e7b0 <_printf_float+0x128>
 800e7aa:	6863      	ldr	r3, [r4, #4]
 800e7ac:	4299      	cmp	r1, r3
 800e7ae:	dd41      	ble.n	800e834 <_printf_float+0x1ac>
 800e7b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e7b4:	fa5f fa8a 	uxtb.w	sl, sl
 800e7b8:	3901      	subs	r1, #1
 800e7ba:	4652      	mov	r2, sl
 800e7bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e7c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e7c2:	f7ff ff26 	bl	800e612 <__exponent>
 800e7c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7c8:	1813      	adds	r3, r2, r0
 800e7ca:	2a01      	cmp	r2, #1
 800e7cc:	4681      	mov	r9, r0
 800e7ce:	6123      	str	r3, [r4, #16]
 800e7d0:	dc02      	bgt.n	800e7d8 <_printf_float+0x150>
 800e7d2:	6822      	ldr	r2, [r4, #0]
 800e7d4:	07d2      	lsls	r2, r2, #31
 800e7d6:	d501      	bpl.n	800e7dc <_printf_float+0x154>
 800e7d8:	3301      	adds	r3, #1
 800e7da:	6123      	str	r3, [r4, #16]
 800e7dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d0a2      	beq.n	800e72a <_printf_float+0xa2>
 800e7e4:	232d      	movs	r3, #45	@ 0x2d
 800e7e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7ea:	e79e      	b.n	800e72a <_printf_float+0xa2>
 800e7ec:	9a06      	ldr	r2, [sp, #24]
 800e7ee:	2a47      	cmp	r2, #71	@ 0x47
 800e7f0:	d1c2      	bne.n	800e778 <_printf_float+0xf0>
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1c0      	bne.n	800e778 <_printf_float+0xf0>
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e7bd      	b.n	800e776 <_printf_float+0xee>
 800e7fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e7fe:	d9db      	bls.n	800e7b8 <_printf_float+0x130>
 800e800:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e804:	d118      	bne.n	800e838 <_printf_float+0x1b0>
 800e806:	2900      	cmp	r1, #0
 800e808:	6863      	ldr	r3, [r4, #4]
 800e80a:	dd0b      	ble.n	800e824 <_printf_float+0x19c>
 800e80c:	6121      	str	r1, [r4, #16]
 800e80e:	b913      	cbnz	r3, 800e816 <_printf_float+0x18e>
 800e810:	6822      	ldr	r2, [r4, #0]
 800e812:	07d0      	lsls	r0, r2, #31
 800e814:	d502      	bpl.n	800e81c <_printf_float+0x194>
 800e816:	3301      	adds	r3, #1
 800e818:	440b      	add	r3, r1
 800e81a:	6123      	str	r3, [r4, #16]
 800e81c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e81e:	f04f 0900 	mov.w	r9, #0
 800e822:	e7db      	b.n	800e7dc <_printf_float+0x154>
 800e824:	b913      	cbnz	r3, 800e82c <_printf_float+0x1a4>
 800e826:	6822      	ldr	r2, [r4, #0]
 800e828:	07d2      	lsls	r2, r2, #31
 800e82a:	d501      	bpl.n	800e830 <_printf_float+0x1a8>
 800e82c:	3302      	adds	r3, #2
 800e82e:	e7f4      	b.n	800e81a <_printf_float+0x192>
 800e830:	2301      	movs	r3, #1
 800e832:	e7f2      	b.n	800e81a <_printf_float+0x192>
 800e834:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e83a:	4299      	cmp	r1, r3
 800e83c:	db05      	blt.n	800e84a <_printf_float+0x1c2>
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	6121      	str	r1, [r4, #16]
 800e842:	07d8      	lsls	r0, r3, #31
 800e844:	d5ea      	bpl.n	800e81c <_printf_float+0x194>
 800e846:	1c4b      	adds	r3, r1, #1
 800e848:	e7e7      	b.n	800e81a <_printf_float+0x192>
 800e84a:	2900      	cmp	r1, #0
 800e84c:	bfd4      	ite	le
 800e84e:	f1c1 0202 	rsble	r2, r1, #2
 800e852:	2201      	movgt	r2, #1
 800e854:	4413      	add	r3, r2
 800e856:	e7e0      	b.n	800e81a <_printf_float+0x192>
 800e858:	6823      	ldr	r3, [r4, #0]
 800e85a:	055a      	lsls	r2, r3, #21
 800e85c:	d407      	bmi.n	800e86e <_printf_float+0x1e6>
 800e85e:	6923      	ldr	r3, [r4, #16]
 800e860:	4642      	mov	r2, r8
 800e862:	4631      	mov	r1, r6
 800e864:	4628      	mov	r0, r5
 800e866:	47b8      	blx	r7
 800e868:	3001      	adds	r0, #1
 800e86a:	d12b      	bne.n	800e8c4 <_printf_float+0x23c>
 800e86c:	e767      	b.n	800e73e <_printf_float+0xb6>
 800e86e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e872:	f240 80dd 	bls.w	800ea30 <_printf_float+0x3a8>
 800e876:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e87a:	2200      	movs	r2, #0
 800e87c:	2300      	movs	r3, #0
 800e87e:	f7f2 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 800e882:	2800      	cmp	r0, #0
 800e884:	d033      	beq.n	800e8ee <_printf_float+0x266>
 800e886:	4a37      	ldr	r2, [pc, #220]	@ (800e964 <_printf_float+0x2dc>)
 800e888:	2301      	movs	r3, #1
 800e88a:	4631      	mov	r1, r6
 800e88c:	4628      	mov	r0, r5
 800e88e:	47b8      	blx	r7
 800e890:	3001      	adds	r0, #1
 800e892:	f43f af54 	beq.w	800e73e <_printf_float+0xb6>
 800e896:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e89a:	4543      	cmp	r3, r8
 800e89c:	db02      	blt.n	800e8a4 <_printf_float+0x21c>
 800e89e:	6823      	ldr	r3, [r4, #0]
 800e8a0:	07d8      	lsls	r0, r3, #31
 800e8a2:	d50f      	bpl.n	800e8c4 <_printf_float+0x23c>
 800e8a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	47b8      	blx	r7
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	f43f af45 	beq.w	800e73e <_printf_float+0xb6>
 800e8b4:	f04f 0900 	mov.w	r9, #0
 800e8b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e8bc:	f104 0a1a 	add.w	sl, r4, #26
 800e8c0:	45c8      	cmp	r8, r9
 800e8c2:	dc09      	bgt.n	800e8d8 <_printf_float+0x250>
 800e8c4:	6823      	ldr	r3, [r4, #0]
 800e8c6:	079b      	lsls	r3, r3, #30
 800e8c8:	f100 8103 	bmi.w	800ead2 <_printf_float+0x44a>
 800e8cc:	68e0      	ldr	r0, [r4, #12]
 800e8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8d0:	4298      	cmp	r0, r3
 800e8d2:	bfb8      	it	lt
 800e8d4:	4618      	movlt	r0, r3
 800e8d6:	e734      	b.n	800e742 <_printf_float+0xba>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	4652      	mov	r2, sl
 800e8dc:	4631      	mov	r1, r6
 800e8de:	4628      	mov	r0, r5
 800e8e0:	47b8      	blx	r7
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	f43f af2b 	beq.w	800e73e <_printf_float+0xb6>
 800e8e8:	f109 0901 	add.w	r9, r9, #1
 800e8ec:	e7e8      	b.n	800e8c0 <_printf_float+0x238>
 800e8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	dc39      	bgt.n	800e968 <_printf_float+0x2e0>
 800e8f4:	4a1b      	ldr	r2, [pc, #108]	@ (800e964 <_printf_float+0x2dc>)
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	4631      	mov	r1, r6
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	47b8      	blx	r7
 800e8fe:	3001      	adds	r0, #1
 800e900:	f43f af1d 	beq.w	800e73e <_printf_float+0xb6>
 800e904:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e908:	ea59 0303 	orrs.w	r3, r9, r3
 800e90c:	d102      	bne.n	800e914 <_printf_float+0x28c>
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	07d9      	lsls	r1, r3, #31
 800e912:	d5d7      	bpl.n	800e8c4 <_printf_float+0x23c>
 800e914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e918:	4631      	mov	r1, r6
 800e91a:	4628      	mov	r0, r5
 800e91c:	47b8      	blx	r7
 800e91e:	3001      	adds	r0, #1
 800e920:	f43f af0d 	beq.w	800e73e <_printf_float+0xb6>
 800e924:	f04f 0a00 	mov.w	sl, #0
 800e928:	f104 0b1a 	add.w	fp, r4, #26
 800e92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92e:	425b      	negs	r3, r3
 800e930:	4553      	cmp	r3, sl
 800e932:	dc01      	bgt.n	800e938 <_printf_float+0x2b0>
 800e934:	464b      	mov	r3, r9
 800e936:	e793      	b.n	800e860 <_printf_float+0x1d8>
 800e938:	2301      	movs	r3, #1
 800e93a:	465a      	mov	r2, fp
 800e93c:	4631      	mov	r1, r6
 800e93e:	4628      	mov	r0, r5
 800e940:	47b8      	blx	r7
 800e942:	3001      	adds	r0, #1
 800e944:	f43f aefb 	beq.w	800e73e <_printf_float+0xb6>
 800e948:	f10a 0a01 	add.w	sl, sl, #1
 800e94c:	e7ee      	b.n	800e92c <_printf_float+0x2a4>
 800e94e:	bf00      	nop
 800e950:	7fefffff 	.word	0x7fefffff
 800e954:	0801151c 	.word	0x0801151c
 800e958:	08011520 	.word	0x08011520
 800e95c:	08011524 	.word	0x08011524
 800e960:	08011528 	.word	0x08011528
 800e964:	0801152c 	.word	0x0801152c
 800e968:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e96a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e96e:	4553      	cmp	r3, sl
 800e970:	bfa8      	it	ge
 800e972:	4653      	movge	r3, sl
 800e974:	2b00      	cmp	r3, #0
 800e976:	4699      	mov	r9, r3
 800e978:	dc36      	bgt.n	800e9e8 <_printf_float+0x360>
 800e97a:	f04f 0b00 	mov.w	fp, #0
 800e97e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e982:	f104 021a 	add.w	r2, r4, #26
 800e986:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e988:	9306      	str	r3, [sp, #24]
 800e98a:	eba3 0309 	sub.w	r3, r3, r9
 800e98e:	455b      	cmp	r3, fp
 800e990:	dc31      	bgt.n	800e9f6 <_printf_float+0x36e>
 800e992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e994:	459a      	cmp	sl, r3
 800e996:	dc3a      	bgt.n	800ea0e <_printf_float+0x386>
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	07da      	lsls	r2, r3, #31
 800e99c:	d437      	bmi.n	800ea0e <_printf_float+0x386>
 800e99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a0:	ebaa 0903 	sub.w	r9, sl, r3
 800e9a4:	9b06      	ldr	r3, [sp, #24]
 800e9a6:	ebaa 0303 	sub.w	r3, sl, r3
 800e9aa:	4599      	cmp	r9, r3
 800e9ac:	bfa8      	it	ge
 800e9ae:	4699      	movge	r9, r3
 800e9b0:	f1b9 0f00 	cmp.w	r9, #0
 800e9b4:	dc33      	bgt.n	800ea1e <_printf_float+0x396>
 800e9b6:	f04f 0800 	mov.w	r8, #0
 800e9ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9be:	f104 0b1a 	add.w	fp, r4, #26
 800e9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c4:	ebaa 0303 	sub.w	r3, sl, r3
 800e9c8:	eba3 0309 	sub.w	r3, r3, r9
 800e9cc:	4543      	cmp	r3, r8
 800e9ce:	f77f af79 	ble.w	800e8c4 <_printf_float+0x23c>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	465a      	mov	r2, fp
 800e9d6:	4631      	mov	r1, r6
 800e9d8:	4628      	mov	r0, r5
 800e9da:	47b8      	blx	r7
 800e9dc:	3001      	adds	r0, #1
 800e9de:	f43f aeae 	beq.w	800e73e <_printf_float+0xb6>
 800e9e2:	f108 0801 	add.w	r8, r8, #1
 800e9e6:	e7ec      	b.n	800e9c2 <_printf_float+0x33a>
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	47b8      	blx	r7
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	d1c2      	bne.n	800e97a <_printf_float+0x2f2>
 800e9f4:	e6a3      	b.n	800e73e <_printf_float+0xb6>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	4631      	mov	r1, r6
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	9206      	str	r2, [sp, #24]
 800e9fe:	47b8      	blx	r7
 800ea00:	3001      	adds	r0, #1
 800ea02:	f43f ae9c 	beq.w	800e73e <_printf_float+0xb6>
 800ea06:	9a06      	ldr	r2, [sp, #24]
 800ea08:	f10b 0b01 	add.w	fp, fp, #1
 800ea0c:	e7bb      	b.n	800e986 <_printf_float+0x2fe>
 800ea0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea12:	4631      	mov	r1, r6
 800ea14:	4628      	mov	r0, r5
 800ea16:	47b8      	blx	r7
 800ea18:	3001      	adds	r0, #1
 800ea1a:	d1c0      	bne.n	800e99e <_printf_float+0x316>
 800ea1c:	e68f      	b.n	800e73e <_printf_float+0xb6>
 800ea1e:	9a06      	ldr	r2, [sp, #24]
 800ea20:	464b      	mov	r3, r9
 800ea22:	4442      	add	r2, r8
 800ea24:	4631      	mov	r1, r6
 800ea26:	4628      	mov	r0, r5
 800ea28:	47b8      	blx	r7
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	d1c3      	bne.n	800e9b6 <_printf_float+0x32e>
 800ea2e:	e686      	b.n	800e73e <_printf_float+0xb6>
 800ea30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea34:	f1ba 0f01 	cmp.w	sl, #1
 800ea38:	dc01      	bgt.n	800ea3e <_printf_float+0x3b6>
 800ea3a:	07db      	lsls	r3, r3, #31
 800ea3c:	d536      	bpl.n	800eaac <_printf_float+0x424>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4642      	mov	r2, r8
 800ea42:	4631      	mov	r1, r6
 800ea44:	4628      	mov	r0, r5
 800ea46:	47b8      	blx	r7
 800ea48:	3001      	adds	r0, #1
 800ea4a:	f43f ae78 	beq.w	800e73e <_printf_float+0xb6>
 800ea4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea52:	4631      	mov	r1, r6
 800ea54:	4628      	mov	r0, r5
 800ea56:	47b8      	blx	r7
 800ea58:	3001      	adds	r0, #1
 800ea5a:	f43f ae70 	beq.w	800e73e <_printf_float+0xb6>
 800ea5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea62:	2200      	movs	r2, #0
 800ea64:	2300      	movs	r3, #0
 800ea66:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ea6a:	f7f2 f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea6e:	b9c0      	cbnz	r0, 800eaa2 <_printf_float+0x41a>
 800ea70:	4653      	mov	r3, sl
 800ea72:	f108 0201 	add.w	r2, r8, #1
 800ea76:	4631      	mov	r1, r6
 800ea78:	4628      	mov	r0, r5
 800ea7a:	47b8      	blx	r7
 800ea7c:	3001      	adds	r0, #1
 800ea7e:	d10c      	bne.n	800ea9a <_printf_float+0x412>
 800ea80:	e65d      	b.n	800e73e <_printf_float+0xb6>
 800ea82:	2301      	movs	r3, #1
 800ea84:	465a      	mov	r2, fp
 800ea86:	4631      	mov	r1, r6
 800ea88:	4628      	mov	r0, r5
 800ea8a:	47b8      	blx	r7
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	f43f ae56 	beq.w	800e73e <_printf_float+0xb6>
 800ea92:	f108 0801 	add.w	r8, r8, #1
 800ea96:	45d0      	cmp	r8, sl
 800ea98:	dbf3      	blt.n	800ea82 <_printf_float+0x3fa>
 800ea9a:	464b      	mov	r3, r9
 800ea9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eaa0:	e6df      	b.n	800e862 <_printf_float+0x1da>
 800eaa2:	f04f 0800 	mov.w	r8, #0
 800eaa6:	f104 0b1a 	add.w	fp, r4, #26
 800eaaa:	e7f4      	b.n	800ea96 <_printf_float+0x40e>
 800eaac:	2301      	movs	r3, #1
 800eaae:	4642      	mov	r2, r8
 800eab0:	e7e1      	b.n	800ea76 <_printf_float+0x3ee>
 800eab2:	2301      	movs	r3, #1
 800eab4:	464a      	mov	r2, r9
 800eab6:	4631      	mov	r1, r6
 800eab8:	4628      	mov	r0, r5
 800eaba:	47b8      	blx	r7
 800eabc:	3001      	adds	r0, #1
 800eabe:	f43f ae3e 	beq.w	800e73e <_printf_float+0xb6>
 800eac2:	f108 0801 	add.w	r8, r8, #1
 800eac6:	68e3      	ldr	r3, [r4, #12]
 800eac8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eaca:	1a5b      	subs	r3, r3, r1
 800eacc:	4543      	cmp	r3, r8
 800eace:	dcf0      	bgt.n	800eab2 <_printf_float+0x42a>
 800ead0:	e6fc      	b.n	800e8cc <_printf_float+0x244>
 800ead2:	f04f 0800 	mov.w	r8, #0
 800ead6:	f104 0919 	add.w	r9, r4, #25
 800eada:	e7f4      	b.n	800eac6 <_printf_float+0x43e>

0800eadc <_printf_common>:
 800eadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae0:	4616      	mov	r6, r2
 800eae2:	4698      	mov	r8, r3
 800eae4:	688a      	ldr	r2, [r1, #8]
 800eae6:	690b      	ldr	r3, [r1, #16]
 800eae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eaec:	4293      	cmp	r3, r2
 800eaee:	bfb8      	it	lt
 800eaf0:	4613      	movlt	r3, r2
 800eaf2:	6033      	str	r3, [r6, #0]
 800eaf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eaf8:	4607      	mov	r7, r0
 800eafa:	460c      	mov	r4, r1
 800eafc:	b10a      	cbz	r2, 800eb02 <_printf_common+0x26>
 800eafe:	3301      	adds	r3, #1
 800eb00:	6033      	str	r3, [r6, #0]
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	0699      	lsls	r1, r3, #26
 800eb06:	bf42      	ittt	mi
 800eb08:	6833      	ldrmi	r3, [r6, #0]
 800eb0a:	3302      	addmi	r3, #2
 800eb0c:	6033      	strmi	r3, [r6, #0]
 800eb0e:	6825      	ldr	r5, [r4, #0]
 800eb10:	f015 0506 	ands.w	r5, r5, #6
 800eb14:	d106      	bne.n	800eb24 <_printf_common+0x48>
 800eb16:	f104 0a19 	add.w	sl, r4, #25
 800eb1a:	68e3      	ldr	r3, [r4, #12]
 800eb1c:	6832      	ldr	r2, [r6, #0]
 800eb1e:	1a9b      	subs	r3, r3, r2
 800eb20:	42ab      	cmp	r3, r5
 800eb22:	dc26      	bgt.n	800eb72 <_printf_common+0x96>
 800eb24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb28:	6822      	ldr	r2, [r4, #0]
 800eb2a:	3b00      	subs	r3, #0
 800eb2c:	bf18      	it	ne
 800eb2e:	2301      	movne	r3, #1
 800eb30:	0692      	lsls	r2, r2, #26
 800eb32:	d42b      	bmi.n	800eb8c <_printf_common+0xb0>
 800eb34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb38:	4641      	mov	r1, r8
 800eb3a:	4638      	mov	r0, r7
 800eb3c:	47c8      	blx	r9
 800eb3e:	3001      	adds	r0, #1
 800eb40:	d01e      	beq.n	800eb80 <_printf_common+0xa4>
 800eb42:	6823      	ldr	r3, [r4, #0]
 800eb44:	6922      	ldr	r2, [r4, #16]
 800eb46:	f003 0306 	and.w	r3, r3, #6
 800eb4a:	2b04      	cmp	r3, #4
 800eb4c:	bf02      	ittt	eq
 800eb4e:	68e5      	ldreq	r5, [r4, #12]
 800eb50:	6833      	ldreq	r3, [r6, #0]
 800eb52:	1aed      	subeq	r5, r5, r3
 800eb54:	68a3      	ldr	r3, [r4, #8]
 800eb56:	bf0c      	ite	eq
 800eb58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb5c:	2500      	movne	r5, #0
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	bfc4      	itt	gt
 800eb62:	1a9b      	subgt	r3, r3, r2
 800eb64:	18ed      	addgt	r5, r5, r3
 800eb66:	2600      	movs	r6, #0
 800eb68:	341a      	adds	r4, #26
 800eb6a:	42b5      	cmp	r5, r6
 800eb6c:	d11a      	bne.n	800eba4 <_printf_common+0xc8>
 800eb6e:	2000      	movs	r0, #0
 800eb70:	e008      	b.n	800eb84 <_printf_common+0xa8>
 800eb72:	2301      	movs	r3, #1
 800eb74:	4652      	mov	r2, sl
 800eb76:	4641      	mov	r1, r8
 800eb78:	4638      	mov	r0, r7
 800eb7a:	47c8      	blx	r9
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	d103      	bne.n	800eb88 <_printf_common+0xac>
 800eb80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb88:	3501      	adds	r5, #1
 800eb8a:	e7c6      	b.n	800eb1a <_printf_common+0x3e>
 800eb8c:	18e1      	adds	r1, r4, r3
 800eb8e:	1c5a      	adds	r2, r3, #1
 800eb90:	2030      	movs	r0, #48	@ 0x30
 800eb92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb96:	4422      	add	r2, r4
 800eb98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eba0:	3302      	adds	r3, #2
 800eba2:	e7c7      	b.n	800eb34 <_printf_common+0x58>
 800eba4:	2301      	movs	r3, #1
 800eba6:	4622      	mov	r2, r4
 800eba8:	4641      	mov	r1, r8
 800ebaa:	4638      	mov	r0, r7
 800ebac:	47c8      	blx	r9
 800ebae:	3001      	adds	r0, #1
 800ebb0:	d0e6      	beq.n	800eb80 <_printf_common+0xa4>
 800ebb2:	3601      	adds	r6, #1
 800ebb4:	e7d9      	b.n	800eb6a <_printf_common+0x8e>
	...

0800ebb8 <_printf_i>:
 800ebb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebbc:	7e0f      	ldrb	r7, [r1, #24]
 800ebbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ebc0:	2f78      	cmp	r7, #120	@ 0x78
 800ebc2:	4691      	mov	r9, r2
 800ebc4:	4680      	mov	r8, r0
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	469a      	mov	sl, r3
 800ebca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ebce:	d807      	bhi.n	800ebe0 <_printf_i+0x28>
 800ebd0:	2f62      	cmp	r7, #98	@ 0x62
 800ebd2:	d80a      	bhi.n	800ebea <_printf_i+0x32>
 800ebd4:	2f00      	cmp	r7, #0
 800ebd6:	f000 80d2 	beq.w	800ed7e <_printf_i+0x1c6>
 800ebda:	2f58      	cmp	r7, #88	@ 0x58
 800ebdc:	f000 80b9 	beq.w	800ed52 <_printf_i+0x19a>
 800ebe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebe8:	e03a      	b.n	800ec60 <_printf_i+0xa8>
 800ebea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ebee:	2b15      	cmp	r3, #21
 800ebf0:	d8f6      	bhi.n	800ebe0 <_printf_i+0x28>
 800ebf2:	a101      	add	r1, pc, #4	@ (adr r1, 800ebf8 <_printf_i+0x40>)
 800ebf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebf8:	0800ec51 	.word	0x0800ec51
 800ebfc:	0800ec65 	.word	0x0800ec65
 800ec00:	0800ebe1 	.word	0x0800ebe1
 800ec04:	0800ebe1 	.word	0x0800ebe1
 800ec08:	0800ebe1 	.word	0x0800ebe1
 800ec0c:	0800ebe1 	.word	0x0800ebe1
 800ec10:	0800ec65 	.word	0x0800ec65
 800ec14:	0800ebe1 	.word	0x0800ebe1
 800ec18:	0800ebe1 	.word	0x0800ebe1
 800ec1c:	0800ebe1 	.word	0x0800ebe1
 800ec20:	0800ebe1 	.word	0x0800ebe1
 800ec24:	0800ed65 	.word	0x0800ed65
 800ec28:	0800ec8f 	.word	0x0800ec8f
 800ec2c:	0800ed1f 	.word	0x0800ed1f
 800ec30:	0800ebe1 	.word	0x0800ebe1
 800ec34:	0800ebe1 	.word	0x0800ebe1
 800ec38:	0800ed87 	.word	0x0800ed87
 800ec3c:	0800ebe1 	.word	0x0800ebe1
 800ec40:	0800ec8f 	.word	0x0800ec8f
 800ec44:	0800ebe1 	.word	0x0800ebe1
 800ec48:	0800ebe1 	.word	0x0800ebe1
 800ec4c:	0800ed27 	.word	0x0800ed27
 800ec50:	6833      	ldr	r3, [r6, #0]
 800ec52:	1d1a      	adds	r2, r3, #4
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	6032      	str	r2, [r6, #0]
 800ec58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec60:	2301      	movs	r3, #1
 800ec62:	e09d      	b.n	800eda0 <_printf_i+0x1e8>
 800ec64:	6833      	ldr	r3, [r6, #0]
 800ec66:	6820      	ldr	r0, [r4, #0]
 800ec68:	1d19      	adds	r1, r3, #4
 800ec6a:	6031      	str	r1, [r6, #0]
 800ec6c:	0606      	lsls	r6, r0, #24
 800ec6e:	d501      	bpl.n	800ec74 <_printf_i+0xbc>
 800ec70:	681d      	ldr	r5, [r3, #0]
 800ec72:	e003      	b.n	800ec7c <_printf_i+0xc4>
 800ec74:	0645      	lsls	r5, r0, #25
 800ec76:	d5fb      	bpl.n	800ec70 <_printf_i+0xb8>
 800ec78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec7c:	2d00      	cmp	r5, #0
 800ec7e:	da03      	bge.n	800ec88 <_printf_i+0xd0>
 800ec80:	232d      	movs	r3, #45	@ 0x2d
 800ec82:	426d      	negs	r5, r5
 800ec84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec88:	4859      	ldr	r0, [pc, #356]	@ (800edf0 <_printf_i+0x238>)
 800ec8a:	230a      	movs	r3, #10
 800ec8c:	e011      	b.n	800ecb2 <_printf_i+0xfa>
 800ec8e:	6821      	ldr	r1, [r4, #0]
 800ec90:	6833      	ldr	r3, [r6, #0]
 800ec92:	0608      	lsls	r0, r1, #24
 800ec94:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec98:	d402      	bmi.n	800eca0 <_printf_i+0xe8>
 800ec9a:	0649      	lsls	r1, r1, #25
 800ec9c:	bf48      	it	mi
 800ec9e:	b2ad      	uxthmi	r5, r5
 800eca0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eca2:	4853      	ldr	r0, [pc, #332]	@ (800edf0 <_printf_i+0x238>)
 800eca4:	6033      	str	r3, [r6, #0]
 800eca6:	bf14      	ite	ne
 800eca8:	230a      	movne	r3, #10
 800ecaa:	2308      	moveq	r3, #8
 800ecac:	2100      	movs	r1, #0
 800ecae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ecb2:	6866      	ldr	r6, [r4, #4]
 800ecb4:	60a6      	str	r6, [r4, #8]
 800ecb6:	2e00      	cmp	r6, #0
 800ecb8:	bfa2      	ittt	ge
 800ecba:	6821      	ldrge	r1, [r4, #0]
 800ecbc:	f021 0104 	bicge.w	r1, r1, #4
 800ecc0:	6021      	strge	r1, [r4, #0]
 800ecc2:	b90d      	cbnz	r5, 800ecc8 <_printf_i+0x110>
 800ecc4:	2e00      	cmp	r6, #0
 800ecc6:	d04b      	beq.n	800ed60 <_printf_i+0x1a8>
 800ecc8:	4616      	mov	r6, r2
 800ecca:	fbb5 f1f3 	udiv	r1, r5, r3
 800ecce:	fb03 5711 	mls	r7, r3, r1, r5
 800ecd2:	5dc7      	ldrb	r7, [r0, r7]
 800ecd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ecd8:	462f      	mov	r7, r5
 800ecda:	42bb      	cmp	r3, r7
 800ecdc:	460d      	mov	r5, r1
 800ecde:	d9f4      	bls.n	800ecca <_printf_i+0x112>
 800ece0:	2b08      	cmp	r3, #8
 800ece2:	d10b      	bne.n	800ecfc <_printf_i+0x144>
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	07df      	lsls	r7, r3, #31
 800ece8:	d508      	bpl.n	800ecfc <_printf_i+0x144>
 800ecea:	6923      	ldr	r3, [r4, #16]
 800ecec:	6861      	ldr	r1, [r4, #4]
 800ecee:	4299      	cmp	r1, r3
 800ecf0:	bfde      	ittt	le
 800ecf2:	2330      	movle	r3, #48	@ 0x30
 800ecf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ecf8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ecfc:	1b92      	subs	r2, r2, r6
 800ecfe:	6122      	str	r2, [r4, #16]
 800ed00:	f8cd a000 	str.w	sl, [sp]
 800ed04:	464b      	mov	r3, r9
 800ed06:	aa03      	add	r2, sp, #12
 800ed08:	4621      	mov	r1, r4
 800ed0a:	4640      	mov	r0, r8
 800ed0c:	f7ff fee6 	bl	800eadc <_printf_common>
 800ed10:	3001      	adds	r0, #1
 800ed12:	d14a      	bne.n	800edaa <_printf_i+0x1f2>
 800ed14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed18:	b004      	add	sp, #16
 800ed1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	f043 0320 	orr.w	r3, r3, #32
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	4833      	ldr	r0, [pc, #204]	@ (800edf4 <_printf_i+0x23c>)
 800ed28:	2778      	movs	r7, #120	@ 0x78
 800ed2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	6831      	ldr	r1, [r6, #0]
 800ed32:	061f      	lsls	r7, r3, #24
 800ed34:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed38:	d402      	bmi.n	800ed40 <_printf_i+0x188>
 800ed3a:	065f      	lsls	r7, r3, #25
 800ed3c:	bf48      	it	mi
 800ed3e:	b2ad      	uxthmi	r5, r5
 800ed40:	6031      	str	r1, [r6, #0]
 800ed42:	07d9      	lsls	r1, r3, #31
 800ed44:	bf44      	itt	mi
 800ed46:	f043 0320 	orrmi.w	r3, r3, #32
 800ed4a:	6023      	strmi	r3, [r4, #0]
 800ed4c:	b11d      	cbz	r5, 800ed56 <_printf_i+0x19e>
 800ed4e:	2310      	movs	r3, #16
 800ed50:	e7ac      	b.n	800ecac <_printf_i+0xf4>
 800ed52:	4827      	ldr	r0, [pc, #156]	@ (800edf0 <_printf_i+0x238>)
 800ed54:	e7e9      	b.n	800ed2a <_printf_i+0x172>
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	f023 0320 	bic.w	r3, r3, #32
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	e7f6      	b.n	800ed4e <_printf_i+0x196>
 800ed60:	4616      	mov	r6, r2
 800ed62:	e7bd      	b.n	800ece0 <_printf_i+0x128>
 800ed64:	6833      	ldr	r3, [r6, #0]
 800ed66:	6825      	ldr	r5, [r4, #0]
 800ed68:	6961      	ldr	r1, [r4, #20]
 800ed6a:	1d18      	adds	r0, r3, #4
 800ed6c:	6030      	str	r0, [r6, #0]
 800ed6e:	062e      	lsls	r6, r5, #24
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	d501      	bpl.n	800ed78 <_printf_i+0x1c0>
 800ed74:	6019      	str	r1, [r3, #0]
 800ed76:	e002      	b.n	800ed7e <_printf_i+0x1c6>
 800ed78:	0668      	lsls	r0, r5, #25
 800ed7a:	d5fb      	bpl.n	800ed74 <_printf_i+0x1bc>
 800ed7c:	8019      	strh	r1, [r3, #0]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	6123      	str	r3, [r4, #16]
 800ed82:	4616      	mov	r6, r2
 800ed84:	e7bc      	b.n	800ed00 <_printf_i+0x148>
 800ed86:	6833      	ldr	r3, [r6, #0]
 800ed88:	1d1a      	adds	r2, r3, #4
 800ed8a:	6032      	str	r2, [r6, #0]
 800ed8c:	681e      	ldr	r6, [r3, #0]
 800ed8e:	6862      	ldr	r2, [r4, #4]
 800ed90:	2100      	movs	r1, #0
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7f1 fa1c 	bl	80001d0 <memchr>
 800ed98:	b108      	cbz	r0, 800ed9e <_printf_i+0x1e6>
 800ed9a:	1b80      	subs	r0, r0, r6
 800ed9c:	6060      	str	r0, [r4, #4]
 800ed9e:	6863      	ldr	r3, [r4, #4]
 800eda0:	6123      	str	r3, [r4, #16]
 800eda2:	2300      	movs	r3, #0
 800eda4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eda8:	e7aa      	b.n	800ed00 <_printf_i+0x148>
 800edaa:	6923      	ldr	r3, [r4, #16]
 800edac:	4632      	mov	r2, r6
 800edae:	4649      	mov	r1, r9
 800edb0:	4640      	mov	r0, r8
 800edb2:	47d0      	blx	sl
 800edb4:	3001      	adds	r0, #1
 800edb6:	d0ad      	beq.n	800ed14 <_printf_i+0x15c>
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	079b      	lsls	r3, r3, #30
 800edbc:	d413      	bmi.n	800ede6 <_printf_i+0x22e>
 800edbe:	68e0      	ldr	r0, [r4, #12]
 800edc0:	9b03      	ldr	r3, [sp, #12]
 800edc2:	4298      	cmp	r0, r3
 800edc4:	bfb8      	it	lt
 800edc6:	4618      	movlt	r0, r3
 800edc8:	e7a6      	b.n	800ed18 <_printf_i+0x160>
 800edca:	2301      	movs	r3, #1
 800edcc:	4632      	mov	r2, r6
 800edce:	4649      	mov	r1, r9
 800edd0:	4640      	mov	r0, r8
 800edd2:	47d0      	blx	sl
 800edd4:	3001      	adds	r0, #1
 800edd6:	d09d      	beq.n	800ed14 <_printf_i+0x15c>
 800edd8:	3501      	adds	r5, #1
 800edda:	68e3      	ldr	r3, [r4, #12]
 800eddc:	9903      	ldr	r1, [sp, #12]
 800edde:	1a5b      	subs	r3, r3, r1
 800ede0:	42ab      	cmp	r3, r5
 800ede2:	dcf2      	bgt.n	800edca <_printf_i+0x212>
 800ede4:	e7eb      	b.n	800edbe <_printf_i+0x206>
 800ede6:	2500      	movs	r5, #0
 800ede8:	f104 0619 	add.w	r6, r4, #25
 800edec:	e7f5      	b.n	800edda <_printf_i+0x222>
 800edee:	bf00      	nop
 800edf0:	0801152e 	.word	0x0801152e
 800edf4:	0801153f 	.word	0x0801153f

0800edf8 <std>:
 800edf8:	2300      	movs	r3, #0
 800edfa:	b510      	push	{r4, lr}
 800edfc:	4604      	mov	r4, r0
 800edfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ee02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee06:	6083      	str	r3, [r0, #8]
 800ee08:	8181      	strh	r1, [r0, #12]
 800ee0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ee0c:	81c2      	strh	r2, [r0, #14]
 800ee0e:	6183      	str	r3, [r0, #24]
 800ee10:	4619      	mov	r1, r3
 800ee12:	2208      	movs	r2, #8
 800ee14:	305c      	adds	r0, #92	@ 0x5c
 800ee16:	f000 f8d1 	bl	800efbc <memset>
 800ee1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee50 <std+0x58>)
 800ee1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ee1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee54 <std+0x5c>)
 800ee20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ee22:	4b0d      	ldr	r3, [pc, #52]	@ (800ee58 <std+0x60>)
 800ee24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee26:	4b0d      	ldr	r3, [pc, #52]	@ (800ee5c <std+0x64>)
 800ee28:	6323      	str	r3, [r4, #48]	@ 0x30
 800ee2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee60 <std+0x68>)
 800ee2c:	6224      	str	r4, [r4, #32]
 800ee2e:	429c      	cmp	r4, r3
 800ee30:	d006      	beq.n	800ee40 <std+0x48>
 800ee32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee36:	4294      	cmp	r4, r2
 800ee38:	d002      	beq.n	800ee40 <std+0x48>
 800ee3a:	33d0      	adds	r3, #208	@ 0xd0
 800ee3c:	429c      	cmp	r4, r3
 800ee3e:	d105      	bne.n	800ee4c <std+0x54>
 800ee40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee48:	f000 b944 	b.w	800f0d4 <__retarget_lock_init_recursive>
 800ee4c:	bd10      	pop	{r4, pc}
 800ee4e:	bf00      	nop
 800ee50:	08010a9d 	.word	0x08010a9d
 800ee54:	08010abf 	.word	0x08010abf
 800ee58:	08010af7 	.word	0x08010af7
 800ee5c:	08010b1b 	.word	0x08010b1b
 800ee60:	200059b0 	.word	0x200059b0

0800ee64 <stdio_exit_handler>:
 800ee64:	4a02      	ldr	r2, [pc, #8]	@ (800ee70 <stdio_exit_handler+0xc>)
 800ee66:	4903      	ldr	r1, [pc, #12]	@ (800ee74 <stdio_exit_handler+0x10>)
 800ee68:	4803      	ldr	r0, [pc, #12]	@ (800ee78 <stdio_exit_handler+0x14>)
 800ee6a:	f000 b869 	b.w	800ef40 <_fwalk_sglue>
 800ee6e:	bf00      	nop
 800ee70:	20000118 	.word	0x20000118
 800ee74:	08010331 	.word	0x08010331
 800ee78:	20000128 	.word	0x20000128

0800ee7c <cleanup_stdio>:
 800ee7c:	6841      	ldr	r1, [r0, #4]
 800ee7e:	4b0c      	ldr	r3, [pc, #48]	@ (800eeb0 <cleanup_stdio+0x34>)
 800ee80:	4299      	cmp	r1, r3
 800ee82:	b510      	push	{r4, lr}
 800ee84:	4604      	mov	r4, r0
 800ee86:	d001      	beq.n	800ee8c <cleanup_stdio+0x10>
 800ee88:	f001 fa52 	bl	8010330 <_fflush_r>
 800ee8c:	68a1      	ldr	r1, [r4, #8]
 800ee8e:	4b09      	ldr	r3, [pc, #36]	@ (800eeb4 <cleanup_stdio+0x38>)
 800ee90:	4299      	cmp	r1, r3
 800ee92:	d002      	beq.n	800ee9a <cleanup_stdio+0x1e>
 800ee94:	4620      	mov	r0, r4
 800ee96:	f001 fa4b 	bl	8010330 <_fflush_r>
 800ee9a:	68e1      	ldr	r1, [r4, #12]
 800ee9c:	4b06      	ldr	r3, [pc, #24]	@ (800eeb8 <cleanup_stdio+0x3c>)
 800ee9e:	4299      	cmp	r1, r3
 800eea0:	d004      	beq.n	800eeac <cleanup_stdio+0x30>
 800eea2:	4620      	mov	r0, r4
 800eea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eea8:	f001 ba42 	b.w	8010330 <_fflush_r>
 800eeac:	bd10      	pop	{r4, pc}
 800eeae:	bf00      	nop
 800eeb0:	200059b0 	.word	0x200059b0
 800eeb4:	20005a18 	.word	0x20005a18
 800eeb8:	20005a80 	.word	0x20005a80

0800eebc <global_stdio_init.part.0>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	4b0b      	ldr	r3, [pc, #44]	@ (800eeec <global_stdio_init.part.0+0x30>)
 800eec0:	4c0b      	ldr	r4, [pc, #44]	@ (800eef0 <global_stdio_init.part.0+0x34>)
 800eec2:	4a0c      	ldr	r2, [pc, #48]	@ (800eef4 <global_stdio_init.part.0+0x38>)
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	4620      	mov	r0, r4
 800eec8:	2200      	movs	r2, #0
 800eeca:	2104      	movs	r1, #4
 800eecc:	f7ff ff94 	bl	800edf8 <std>
 800eed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eed4:	2201      	movs	r2, #1
 800eed6:	2109      	movs	r1, #9
 800eed8:	f7ff ff8e 	bl	800edf8 <std>
 800eedc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eee0:	2202      	movs	r2, #2
 800eee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eee6:	2112      	movs	r1, #18
 800eee8:	f7ff bf86 	b.w	800edf8 <std>
 800eeec:	20005ae8 	.word	0x20005ae8
 800eef0:	200059b0 	.word	0x200059b0
 800eef4:	0800ee65 	.word	0x0800ee65

0800eef8 <__sfp_lock_acquire>:
 800eef8:	4801      	ldr	r0, [pc, #4]	@ (800ef00 <__sfp_lock_acquire+0x8>)
 800eefa:	f000 b8ec 	b.w	800f0d6 <__retarget_lock_acquire_recursive>
 800eefe:	bf00      	nop
 800ef00:	20005af1 	.word	0x20005af1

0800ef04 <__sfp_lock_release>:
 800ef04:	4801      	ldr	r0, [pc, #4]	@ (800ef0c <__sfp_lock_release+0x8>)
 800ef06:	f000 b8e7 	b.w	800f0d8 <__retarget_lock_release_recursive>
 800ef0a:	bf00      	nop
 800ef0c:	20005af1 	.word	0x20005af1

0800ef10 <__sinit>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	4604      	mov	r4, r0
 800ef14:	f7ff fff0 	bl	800eef8 <__sfp_lock_acquire>
 800ef18:	6a23      	ldr	r3, [r4, #32]
 800ef1a:	b11b      	cbz	r3, 800ef24 <__sinit+0x14>
 800ef1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef20:	f7ff bff0 	b.w	800ef04 <__sfp_lock_release>
 800ef24:	4b04      	ldr	r3, [pc, #16]	@ (800ef38 <__sinit+0x28>)
 800ef26:	6223      	str	r3, [r4, #32]
 800ef28:	4b04      	ldr	r3, [pc, #16]	@ (800ef3c <__sinit+0x2c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1f5      	bne.n	800ef1c <__sinit+0xc>
 800ef30:	f7ff ffc4 	bl	800eebc <global_stdio_init.part.0>
 800ef34:	e7f2      	b.n	800ef1c <__sinit+0xc>
 800ef36:	bf00      	nop
 800ef38:	0800ee7d 	.word	0x0800ee7d
 800ef3c:	20005ae8 	.word	0x20005ae8

0800ef40 <_fwalk_sglue>:
 800ef40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef44:	4607      	mov	r7, r0
 800ef46:	4688      	mov	r8, r1
 800ef48:	4614      	mov	r4, r2
 800ef4a:	2600      	movs	r6, #0
 800ef4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef50:	f1b9 0901 	subs.w	r9, r9, #1
 800ef54:	d505      	bpl.n	800ef62 <_fwalk_sglue+0x22>
 800ef56:	6824      	ldr	r4, [r4, #0]
 800ef58:	2c00      	cmp	r4, #0
 800ef5a:	d1f7      	bne.n	800ef4c <_fwalk_sglue+0xc>
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef62:	89ab      	ldrh	r3, [r5, #12]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d907      	bls.n	800ef78 <_fwalk_sglue+0x38>
 800ef68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	d003      	beq.n	800ef78 <_fwalk_sglue+0x38>
 800ef70:	4629      	mov	r1, r5
 800ef72:	4638      	mov	r0, r7
 800ef74:	47c0      	blx	r8
 800ef76:	4306      	orrs	r6, r0
 800ef78:	3568      	adds	r5, #104	@ 0x68
 800ef7a:	e7e9      	b.n	800ef50 <_fwalk_sglue+0x10>

0800ef7c <_vsiprintf_r>:
 800ef7c:	b500      	push	{lr}
 800ef7e:	b09b      	sub	sp, #108	@ 0x6c
 800ef80:	9100      	str	r1, [sp, #0]
 800ef82:	9104      	str	r1, [sp, #16]
 800ef84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ef88:	9105      	str	r1, [sp, #20]
 800ef8a:	9102      	str	r1, [sp, #8]
 800ef8c:	4905      	ldr	r1, [pc, #20]	@ (800efa4 <_vsiprintf_r+0x28>)
 800ef8e:	9103      	str	r1, [sp, #12]
 800ef90:	4669      	mov	r1, sp
 800ef92:	f000 ffa3 	bl	800fedc <_svfiprintf_r>
 800ef96:	9b00      	ldr	r3, [sp, #0]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	701a      	strb	r2, [r3, #0]
 800ef9c:	b01b      	add	sp, #108	@ 0x6c
 800ef9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800efa2:	bf00      	nop
 800efa4:	ffff0208 	.word	0xffff0208

0800efa8 <vsiprintf>:
 800efa8:	4613      	mov	r3, r2
 800efaa:	460a      	mov	r2, r1
 800efac:	4601      	mov	r1, r0
 800efae:	4802      	ldr	r0, [pc, #8]	@ (800efb8 <vsiprintf+0x10>)
 800efb0:	6800      	ldr	r0, [r0, #0]
 800efb2:	f7ff bfe3 	b.w	800ef7c <_vsiprintf_r>
 800efb6:	bf00      	nop
 800efb8:	20000124 	.word	0x20000124

0800efbc <memset>:
 800efbc:	4402      	add	r2, r0
 800efbe:	4603      	mov	r3, r0
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d100      	bne.n	800efc6 <memset+0xa>
 800efc4:	4770      	bx	lr
 800efc6:	f803 1b01 	strb.w	r1, [r3], #1
 800efca:	e7f9      	b.n	800efc0 <memset+0x4>

0800efcc <_localeconv_r>:
 800efcc:	4800      	ldr	r0, [pc, #0]	@ (800efd0 <_localeconv_r+0x4>)
 800efce:	4770      	bx	lr
 800efd0:	20000264 	.word	0x20000264

0800efd4 <_reclaim_reent>:
 800efd4:	4b29      	ldr	r3, [pc, #164]	@ (800f07c <_reclaim_reent+0xa8>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4283      	cmp	r3, r0
 800efda:	b570      	push	{r4, r5, r6, lr}
 800efdc:	4604      	mov	r4, r0
 800efde:	d04b      	beq.n	800f078 <_reclaim_reent+0xa4>
 800efe0:	69c3      	ldr	r3, [r0, #28]
 800efe2:	b1ab      	cbz	r3, 800f010 <_reclaim_reent+0x3c>
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	b16b      	cbz	r3, 800f004 <_reclaim_reent+0x30>
 800efe8:	2500      	movs	r5, #0
 800efea:	69e3      	ldr	r3, [r4, #28]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	5959      	ldr	r1, [r3, r5]
 800eff0:	2900      	cmp	r1, #0
 800eff2:	d13b      	bne.n	800f06c <_reclaim_reent+0x98>
 800eff4:	3504      	adds	r5, #4
 800eff6:	2d80      	cmp	r5, #128	@ 0x80
 800eff8:	d1f7      	bne.n	800efea <_reclaim_reent+0x16>
 800effa:	69e3      	ldr	r3, [r4, #28]
 800effc:	4620      	mov	r0, r4
 800effe:	68d9      	ldr	r1, [r3, #12]
 800f000:	f000 fec6 	bl	800fd90 <_free_r>
 800f004:	69e3      	ldr	r3, [r4, #28]
 800f006:	6819      	ldr	r1, [r3, #0]
 800f008:	b111      	cbz	r1, 800f010 <_reclaim_reent+0x3c>
 800f00a:	4620      	mov	r0, r4
 800f00c:	f000 fec0 	bl	800fd90 <_free_r>
 800f010:	6961      	ldr	r1, [r4, #20]
 800f012:	b111      	cbz	r1, 800f01a <_reclaim_reent+0x46>
 800f014:	4620      	mov	r0, r4
 800f016:	f000 febb 	bl	800fd90 <_free_r>
 800f01a:	69e1      	ldr	r1, [r4, #28]
 800f01c:	b111      	cbz	r1, 800f024 <_reclaim_reent+0x50>
 800f01e:	4620      	mov	r0, r4
 800f020:	f000 feb6 	bl	800fd90 <_free_r>
 800f024:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f026:	b111      	cbz	r1, 800f02e <_reclaim_reent+0x5a>
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 feb1 	bl	800fd90 <_free_r>
 800f02e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f030:	b111      	cbz	r1, 800f038 <_reclaim_reent+0x64>
 800f032:	4620      	mov	r0, r4
 800f034:	f000 feac 	bl	800fd90 <_free_r>
 800f038:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f03a:	b111      	cbz	r1, 800f042 <_reclaim_reent+0x6e>
 800f03c:	4620      	mov	r0, r4
 800f03e:	f000 fea7 	bl	800fd90 <_free_r>
 800f042:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f044:	b111      	cbz	r1, 800f04c <_reclaim_reent+0x78>
 800f046:	4620      	mov	r0, r4
 800f048:	f000 fea2 	bl	800fd90 <_free_r>
 800f04c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f04e:	b111      	cbz	r1, 800f056 <_reclaim_reent+0x82>
 800f050:	4620      	mov	r0, r4
 800f052:	f000 fe9d 	bl	800fd90 <_free_r>
 800f056:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f058:	b111      	cbz	r1, 800f060 <_reclaim_reent+0x8c>
 800f05a:	4620      	mov	r0, r4
 800f05c:	f000 fe98 	bl	800fd90 <_free_r>
 800f060:	6a23      	ldr	r3, [r4, #32]
 800f062:	b14b      	cbz	r3, 800f078 <_reclaim_reent+0xa4>
 800f064:	4620      	mov	r0, r4
 800f066:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f06a:	4718      	bx	r3
 800f06c:	680e      	ldr	r6, [r1, #0]
 800f06e:	4620      	mov	r0, r4
 800f070:	f000 fe8e 	bl	800fd90 <_free_r>
 800f074:	4631      	mov	r1, r6
 800f076:	e7bb      	b.n	800eff0 <_reclaim_reent+0x1c>
 800f078:	bd70      	pop	{r4, r5, r6, pc}
 800f07a:	bf00      	nop
 800f07c:	20000124 	.word	0x20000124

0800f080 <__errno>:
 800f080:	4b01      	ldr	r3, [pc, #4]	@ (800f088 <__errno+0x8>)
 800f082:	6818      	ldr	r0, [r3, #0]
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop
 800f088:	20000124 	.word	0x20000124

0800f08c <__libc_init_array>:
 800f08c:	b570      	push	{r4, r5, r6, lr}
 800f08e:	4d0d      	ldr	r5, [pc, #52]	@ (800f0c4 <__libc_init_array+0x38>)
 800f090:	4c0d      	ldr	r4, [pc, #52]	@ (800f0c8 <__libc_init_array+0x3c>)
 800f092:	1b64      	subs	r4, r4, r5
 800f094:	10a4      	asrs	r4, r4, #2
 800f096:	2600      	movs	r6, #0
 800f098:	42a6      	cmp	r6, r4
 800f09a:	d109      	bne.n	800f0b0 <__libc_init_array+0x24>
 800f09c:	4d0b      	ldr	r5, [pc, #44]	@ (800f0cc <__libc_init_array+0x40>)
 800f09e:	4c0c      	ldr	r4, [pc, #48]	@ (800f0d0 <__libc_init_array+0x44>)
 800f0a0:	f002 f8ee 	bl	8011280 <_init>
 800f0a4:	1b64      	subs	r4, r4, r5
 800f0a6:	10a4      	asrs	r4, r4, #2
 800f0a8:	2600      	movs	r6, #0
 800f0aa:	42a6      	cmp	r6, r4
 800f0ac:	d105      	bne.n	800f0ba <__libc_init_array+0x2e>
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0b4:	4798      	blx	r3
 800f0b6:	3601      	adds	r6, #1
 800f0b8:	e7ee      	b.n	800f098 <__libc_init_array+0xc>
 800f0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0be:	4798      	blx	r3
 800f0c0:	3601      	adds	r6, #1
 800f0c2:	e7f2      	b.n	800f0aa <__libc_init_array+0x1e>
 800f0c4:	08011898 	.word	0x08011898
 800f0c8:	08011898 	.word	0x08011898
 800f0cc:	08011898 	.word	0x08011898
 800f0d0:	0801189c 	.word	0x0801189c

0800f0d4 <__retarget_lock_init_recursive>:
 800f0d4:	4770      	bx	lr

0800f0d6 <__retarget_lock_acquire_recursive>:
 800f0d6:	4770      	bx	lr

0800f0d8 <__retarget_lock_release_recursive>:
 800f0d8:	4770      	bx	lr

0800f0da <memcpy>:
 800f0da:	440a      	add	r2, r1
 800f0dc:	4291      	cmp	r1, r2
 800f0de:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f0e2:	d100      	bne.n	800f0e6 <memcpy+0xc>
 800f0e4:	4770      	bx	lr
 800f0e6:	b510      	push	{r4, lr}
 800f0e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0f0:	4291      	cmp	r1, r2
 800f0f2:	d1f9      	bne.n	800f0e8 <memcpy+0xe>
 800f0f4:	bd10      	pop	{r4, pc}

0800f0f6 <quorem>:
 800f0f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0fa:	6903      	ldr	r3, [r0, #16]
 800f0fc:	690c      	ldr	r4, [r1, #16]
 800f0fe:	42a3      	cmp	r3, r4
 800f100:	4607      	mov	r7, r0
 800f102:	db7e      	blt.n	800f202 <quorem+0x10c>
 800f104:	3c01      	subs	r4, #1
 800f106:	f101 0814 	add.w	r8, r1, #20
 800f10a:	00a3      	lsls	r3, r4, #2
 800f10c:	f100 0514 	add.w	r5, r0, #20
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f11c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f120:	3301      	adds	r3, #1
 800f122:	429a      	cmp	r2, r3
 800f124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f128:	fbb2 f6f3 	udiv	r6, r2, r3
 800f12c:	d32e      	bcc.n	800f18c <quorem+0x96>
 800f12e:	f04f 0a00 	mov.w	sl, #0
 800f132:	46c4      	mov	ip, r8
 800f134:	46ae      	mov	lr, r5
 800f136:	46d3      	mov	fp, sl
 800f138:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f13c:	b298      	uxth	r0, r3
 800f13e:	fb06 a000 	mla	r0, r6, r0, sl
 800f142:	0c02      	lsrs	r2, r0, #16
 800f144:	0c1b      	lsrs	r3, r3, #16
 800f146:	fb06 2303 	mla	r3, r6, r3, r2
 800f14a:	f8de 2000 	ldr.w	r2, [lr]
 800f14e:	b280      	uxth	r0, r0
 800f150:	b292      	uxth	r2, r2
 800f152:	1a12      	subs	r2, r2, r0
 800f154:	445a      	add	r2, fp
 800f156:	f8de 0000 	ldr.w	r0, [lr]
 800f15a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f15e:	b29b      	uxth	r3, r3
 800f160:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f164:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f168:	b292      	uxth	r2, r2
 800f16a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f16e:	45e1      	cmp	r9, ip
 800f170:	f84e 2b04 	str.w	r2, [lr], #4
 800f174:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f178:	d2de      	bcs.n	800f138 <quorem+0x42>
 800f17a:	9b00      	ldr	r3, [sp, #0]
 800f17c:	58eb      	ldr	r3, [r5, r3]
 800f17e:	b92b      	cbnz	r3, 800f18c <quorem+0x96>
 800f180:	9b01      	ldr	r3, [sp, #4]
 800f182:	3b04      	subs	r3, #4
 800f184:	429d      	cmp	r5, r3
 800f186:	461a      	mov	r2, r3
 800f188:	d32f      	bcc.n	800f1ea <quorem+0xf4>
 800f18a:	613c      	str	r4, [r7, #16]
 800f18c:	4638      	mov	r0, r7
 800f18e:	f001 fb7d 	bl	801088c <__mcmp>
 800f192:	2800      	cmp	r0, #0
 800f194:	db25      	blt.n	800f1e2 <quorem+0xec>
 800f196:	4629      	mov	r1, r5
 800f198:	2000      	movs	r0, #0
 800f19a:	f858 2b04 	ldr.w	r2, [r8], #4
 800f19e:	f8d1 c000 	ldr.w	ip, [r1]
 800f1a2:	fa1f fe82 	uxth.w	lr, r2
 800f1a6:	fa1f f38c 	uxth.w	r3, ip
 800f1aa:	eba3 030e 	sub.w	r3, r3, lr
 800f1ae:	4403      	add	r3, r0
 800f1b0:	0c12      	lsrs	r2, r2, #16
 800f1b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f1b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1c0:	45c1      	cmp	r9, r8
 800f1c2:	f841 3b04 	str.w	r3, [r1], #4
 800f1c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f1ca:	d2e6      	bcs.n	800f19a <quorem+0xa4>
 800f1cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1d4:	b922      	cbnz	r2, 800f1e0 <quorem+0xea>
 800f1d6:	3b04      	subs	r3, #4
 800f1d8:	429d      	cmp	r5, r3
 800f1da:	461a      	mov	r2, r3
 800f1dc:	d30b      	bcc.n	800f1f6 <quorem+0x100>
 800f1de:	613c      	str	r4, [r7, #16]
 800f1e0:	3601      	adds	r6, #1
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	b003      	add	sp, #12
 800f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ea:	6812      	ldr	r2, [r2, #0]
 800f1ec:	3b04      	subs	r3, #4
 800f1ee:	2a00      	cmp	r2, #0
 800f1f0:	d1cb      	bne.n	800f18a <quorem+0x94>
 800f1f2:	3c01      	subs	r4, #1
 800f1f4:	e7c6      	b.n	800f184 <quorem+0x8e>
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	3b04      	subs	r3, #4
 800f1fa:	2a00      	cmp	r2, #0
 800f1fc:	d1ef      	bne.n	800f1de <quorem+0xe8>
 800f1fe:	3c01      	subs	r4, #1
 800f200:	e7ea      	b.n	800f1d8 <quorem+0xe2>
 800f202:	2000      	movs	r0, #0
 800f204:	e7ee      	b.n	800f1e4 <quorem+0xee>
	...

0800f208 <_dtoa_r>:
 800f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	69c7      	ldr	r7, [r0, #28]
 800f20e:	b099      	sub	sp, #100	@ 0x64
 800f210:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f214:	ec55 4b10 	vmov	r4, r5, d0
 800f218:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f21a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f21c:	4683      	mov	fp, r0
 800f21e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f220:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f222:	b97f      	cbnz	r7, 800f244 <_dtoa_r+0x3c>
 800f224:	2010      	movs	r0, #16
 800f226:	f000 ff55 	bl	80100d4 <malloc>
 800f22a:	4602      	mov	r2, r0
 800f22c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f230:	b920      	cbnz	r0, 800f23c <_dtoa_r+0x34>
 800f232:	4ba7      	ldr	r3, [pc, #668]	@ (800f4d0 <_dtoa_r+0x2c8>)
 800f234:	21ef      	movs	r1, #239	@ 0xef
 800f236:	48a7      	ldr	r0, [pc, #668]	@ (800f4d4 <_dtoa_r+0x2cc>)
 800f238:	f001 fd12 	bl	8010c60 <__assert_func>
 800f23c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f240:	6007      	str	r7, [r0, #0]
 800f242:	60c7      	str	r7, [r0, #12]
 800f244:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f248:	6819      	ldr	r1, [r3, #0]
 800f24a:	b159      	cbz	r1, 800f264 <_dtoa_r+0x5c>
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	604a      	str	r2, [r1, #4]
 800f250:	2301      	movs	r3, #1
 800f252:	4093      	lsls	r3, r2
 800f254:	608b      	str	r3, [r1, #8]
 800f256:	4658      	mov	r0, fp
 800f258:	f001 f8de 	bl	8010418 <_Bfree>
 800f25c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f260:	2200      	movs	r2, #0
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	1e2b      	subs	r3, r5, #0
 800f266:	bfb9      	ittee	lt
 800f268:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f26c:	9303      	strlt	r3, [sp, #12]
 800f26e:	2300      	movge	r3, #0
 800f270:	6033      	strge	r3, [r6, #0]
 800f272:	9f03      	ldr	r7, [sp, #12]
 800f274:	4b98      	ldr	r3, [pc, #608]	@ (800f4d8 <_dtoa_r+0x2d0>)
 800f276:	bfbc      	itt	lt
 800f278:	2201      	movlt	r2, #1
 800f27a:	6032      	strlt	r2, [r6, #0]
 800f27c:	43bb      	bics	r3, r7
 800f27e:	d112      	bne.n	800f2a6 <_dtoa_r+0x9e>
 800f280:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f282:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f28c:	4323      	orrs	r3, r4
 800f28e:	f000 854d 	beq.w	800fd2c <_dtoa_r+0xb24>
 800f292:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f294:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f4ec <_dtoa_r+0x2e4>
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 854f 	beq.w	800fd3c <_dtoa_r+0xb34>
 800f29e:	f10a 0303 	add.w	r3, sl, #3
 800f2a2:	f000 bd49 	b.w	800fd38 <_dtoa_r+0xb30>
 800f2a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	ec51 0b17 	vmov	r0, r1, d7
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f2b6:	f7f1 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2ba:	4680      	mov	r8, r0
 800f2bc:	b158      	cbz	r0, 800f2d6 <_dtoa_r+0xce>
 800f2be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	6013      	str	r3, [r2, #0]
 800f2c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f2c6:	b113      	cbz	r3, 800f2ce <_dtoa_r+0xc6>
 800f2c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f2ca:	4b84      	ldr	r3, [pc, #528]	@ (800f4dc <_dtoa_r+0x2d4>)
 800f2cc:	6013      	str	r3, [r2, #0]
 800f2ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f4f0 <_dtoa_r+0x2e8>
 800f2d2:	f000 bd33 	b.w	800fd3c <_dtoa_r+0xb34>
 800f2d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f2da:	aa16      	add	r2, sp, #88	@ 0x58
 800f2dc:	a917      	add	r1, sp, #92	@ 0x5c
 800f2de:	4658      	mov	r0, fp
 800f2e0:	f001 fb84 	bl	80109ec <__d2b>
 800f2e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f2e8:	4681      	mov	r9, r0
 800f2ea:	2e00      	cmp	r6, #0
 800f2ec:	d077      	beq.n	800f3de <_dtoa_r+0x1d6>
 800f2ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f2f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f300:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f304:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f308:	4619      	mov	r1, r3
 800f30a:	2200      	movs	r2, #0
 800f30c:	4b74      	ldr	r3, [pc, #464]	@ (800f4e0 <_dtoa_r+0x2d8>)
 800f30e:	f7f0 ffbb 	bl	8000288 <__aeabi_dsub>
 800f312:	a369      	add	r3, pc, #420	@ (adr r3, 800f4b8 <_dtoa_r+0x2b0>)
 800f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f318:	f7f1 f96e 	bl	80005f8 <__aeabi_dmul>
 800f31c:	a368      	add	r3, pc, #416	@ (adr r3, 800f4c0 <_dtoa_r+0x2b8>)
 800f31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f322:	f7f0 ffb3 	bl	800028c <__adddf3>
 800f326:	4604      	mov	r4, r0
 800f328:	4630      	mov	r0, r6
 800f32a:	460d      	mov	r5, r1
 800f32c:	f7f1 f8fa 	bl	8000524 <__aeabi_i2d>
 800f330:	a365      	add	r3, pc, #404	@ (adr r3, 800f4c8 <_dtoa_r+0x2c0>)
 800f332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f336:	f7f1 f95f 	bl	80005f8 <__aeabi_dmul>
 800f33a:	4602      	mov	r2, r0
 800f33c:	460b      	mov	r3, r1
 800f33e:	4620      	mov	r0, r4
 800f340:	4629      	mov	r1, r5
 800f342:	f7f0 ffa3 	bl	800028c <__adddf3>
 800f346:	4604      	mov	r4, r0
 800f348:	460d      	mov	r5, r1
 800f34a:	f7f1 fc05 	bl	8000b58 <__aeabi_d2iz>
 800f34e:	2200      	movs	r2, #0
 800f350:	4607      	mov	r7, r0
 800f352:	2300      	movs	r3, #0
 800f354:	4620      	mov	r0, r4
 800f356:	4629      	mov	r1, r5
 800f358:	f7f1 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800f35c:	b140      	cbz	r0, 800f370 <_dtoa_r+0x168>
 800f35e:	4638      	mov	r0, r7
 800f360:	f7f1 f8e0 	bl	8000524 <__aeabi_i2d>
 800f364:	4622      	mov	r2, r4
 800f366:	462b      	mov	r3, r5
 800f368:	f7f1 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800f36c:	b900      	cbnz	r0, 800f370 <_dtoa_r+0x168>
 800f36e:	3f01      	subs	r7, #1
 800f370:	2f16      	cmp	r7, #22
 800f372:	d851      	bhi.n	800f418 <_dtoa_r+0x210>
 800f374:	4b5b      	ldr	r3, [pc, #364]	@ (800f4e4 <_dtoa_r+0x2dc>)
 800f376:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f382:	f7f1 fbab 	bl	8000adc <__aeabi_dcmplt>
 800f386:	2800      	cmp	r0, #0
 800f388:	d048      	beq.n	800f41c <_dtoa_r+0x214>
 800f38a:	3f01      	subs	r7, #1
 800f38c:	2300      	movs	r3, #0
 800f38e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f390:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f392:	1b9b      	subs	r3, r3, r6
 800f394:	1e5a      	subs	r2, r3, #1
 800f396:	bf44      	itt	mi
 800f398:	f1c3 0801 	rsbmi	r8, r3, #1
 800f39c:	2300      	movmi	r3, #0
 800f39e:	9208      	str	r2, [sp, #32]
 800f3a0:	bf54      	ite	pl
 800f3a2:	f04f 0800 	movpl.w	r8, #0
 800f3a6:	9308      	strmi	r3, [sp, #32]
 800f3a8:	2f00      	cmp	r7, #0
 800f3aa:	db39      	blt.n	800f420 <_dtoa_r+0x218>
 800f3ac:	9b08      	ldr	r3, [sp, #32]
 800f3ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f3b0:	443b      	add	r3, r7
 800f3b2:	9308      	str	r3, [sp, #32]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3ba:	2b09      	cmp	r3, #9
 800f3bc:	d864      	bhi.n	800f488 <_dtoa_r+0x280>
 800f3be:	2b05      	cmp	r3, #5
 800f3c0:	bfc4      	itt	gt
 800f3c2:	3b04      	subgt	r3, #4
 800f3c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3c8:	f1a3 0302 	sub.w	r3, r3, #2
 800f3cc:	bfcc      	ite	gt
 800f3ce:	2400      	movgt	r4, #0
 800f3d0:	2401      	movle	r4, #1
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d863      	bhi.n	800f49e <_dtoa_r+0x296>
 800f3d6:	e8df f003 	tbb	[pc, r3]
 800f3da:	372a      	.short	0x372a
 800f3dc:	5535      	.short	0x5535
 800f3de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f3e2:	441e      	add	r6, r3
 800f3e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f3e8:	2b20      	cmp	r3, #32
 800f3ea:	bfc1      	itttt	gt
 800f3ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f3f0:	409f      	lslgt	r7, r3
 800f3f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f3f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f3fa:	bfd6      	itet	le
 800f3fc:	f1c3 0320 	rsble	r3, r3, #32
 800f400:	ea47 0003 	orrgt.w	r0, r7, r3
 800f404:	fa04 f003 	lslle.w	r0, r4, r3
 800f408:	f7f1 f87c 	bl	8000504 <__aeabi_ui2d>
 800f40c:	2201      	movs	r2, #1
 800f40e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f412:	3e01      	subs	r6, #1
 800f414:	9214      	str	r2, [sp, #80]	@ 0x50
 800f416:	e777      	b.n	800f308 <_dtoa_r+0x100>
 800f418:	2301      	movs	r3, #1
 800f41a:	e7b8      	b.n	800f38e <_dtoa_r+0x186>
 800f41c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f41e:	e7b7      	b.n	800f390 <_dtoa_r+0x188>
 800f420:	427b      	negs	r3, r7
 800f422:	930a      	str	r3, [sp, #40]	@ 0x28
 800f424:	2300      	movs	r3, #0
 800f426:	eba8 0807 	sub.w	r8, r8, r7
 800f42a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f42c:	e7c4      	b.n	800f3b8 <_dtoa_r+0x1b0>
 800f42e:	2300      	movs	r3, #0
 800f430:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f434:	2b00      	cmp	r3, #0
 800f436:	dc35      	bgt.n	800f4a4 <_dtoa_r+0x29c>
 800f438:	2301      	movs	r3, #1
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	9307      	str	r3, [sp, #28]
 800f43e:	461a      	mov	r2, r3
 800f440:	920e      	str	r2, [sp, #56]	@ 0x38
 800f442:	e00b      	b.n	800f45c <_dtoa_r+0x254>
 800f444:	2301      	movs	r3, #1
 800f446:	e7f3      	b.n	800f430 <_dtoa_r+0x228>
 800f448:	2300      	movs	r3, #0
 800f44a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f44e:	18fb      	adds	r3, r7, r3
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	3301      	adds	r3, #1
 800f454:	2b01      	cmp	r3, #1
 800f456:	9307      	str	r3, [sp, #28]
 800f458:	bfb8      	it	lt
 800f45a:	2301      	movlt	r3, #1
 800f45c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f460:	2100      	movs	r1, #0
 800f462:	2204      	movs	r2, #4
 800f464:	f102 0514 	add.w	r5, r2, #20
 800f468:	429d      	cmp	r5, r3
 800f46a:	d91f      	bls.n	800f4ac <_dtoa_r+0x2a4>
 800f46c:	6041      	str	r1, [r0, #4]
 800f46e:	4658      	mov	r0, fp
 800f470:	f000 ff92 	bl	8010398 <_Balloc>
 800f474:	4682      	mov	sl, r0
 800f476:	2800      	cmp	r0, #0
 800f478:	d13c      	bne.n	800f4f4 <_dtoa_r+0x2ec>
 800f47a:	4b1b      	ldr	r3, [pc, #108]	@ (800f4e8 <_dtoa_r+0x2e0>)
 800f47c:	4602      	mov	r2, r0
 800f47e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f482:	e6d8      	b.n	800f236 <_dtoa_r+0x2e>
 800f484:	2301      	movs	r3, #1
 800f486:	e7e0      	b.n	800f44a <_dtoa_r+0x242>
 800f488:	2401      	movs	r4, #1
 800f48a:	2300      	movs	r3, #0
 800f48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f48e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	9307      	str	r3, [sp, #28]
 800f498:	2200      	movs	r2, #0
 800f49a:	2312      	movs	r3, #18
 800f49c:	e7d0      	b.n	800f440 <_dtoa_r+0x238>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4a2:	e7f5      	b.n	800f490 <_dtoa_r+0x288>
 800f4a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	9307      	str	r3, [sp, #28]
 800f4aa:	e7d7      	b.n	800f45c <_dtoa_r+0x254>
 800f4ac:	3101      	adds	r1, #1
 800f4ae:	0052      	lsls	r2, r2, #1
 800f4b0:	e7d8      	b.n	800f464 <_dtoa_r+0x25c>
 800f4b2:	bf00      	nop
 800f4b4:	f3af 8000 	nop.w
 800f4b8:	636f4361 	.word	0x636f4361
 800f4bc:	3fd287a7 	.word	0x3fd287a7
 800f4c0:	8b60c8b3 	.word	0x8b60c8b3
 800f4c4:	3fc68a28 	.word	0x3fc68a28
 800f4c8:	509f79fb 	.word	0x509f79fb
 800f4cc:	3fd34413 	.word	0x3fd34413
 800f4d0:	0801155d 	.word	0x0801155d
 800f4d4:	08011574 	.word	0x08011574
 800f4d8:	7ff00000 	.word	0x7ff00000
 800f4dc:	0801152d 	.word	0x0801152d
 800f4e0:	3ff80000 	.word	0x3ff80000
 800f4e4:	08011680 	.word	0x08011680
 800f4e8:	080115cc 	.word	0x080115cc
 800f4ec:	08011559 	.word	0x08011559
 800f4f0:	0801152c 	.word	0x0801152c
 800f4f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4f8:	6018      	str	r0, [r3, #0]
 800f4fa:	9b07      	ldr	r3, [sp, #28]
 800f4fc:	2b0e      	cmp	r3, #14
 800f4fe:	f200 80a4 	bhi.w	800f64a <_dtoa_r+0x442>
 800f502:	2c00      	cmp	r4, #0
 800f504:	f000 80a1 	beq.w	800f64a <_dtoa_r+0x442>
 800f508:	2f00      	cmp	r7, #0
 800f50a:	dd33      	ble.n	800f574 <_dtoa_r+0x36c>
 800f50c:	4bad      	ldr	r3, [pc, #692]	@ (800f7c4 <_dtoa_r+0x5bc>)
 800f50e:	f007 020f 	and.w	r2, r7, #15
 800f512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f516:	ed93 7b00 	vldr	d7, [r3]
 800f51a:	05f8      	lsls	r0, r7, #23
 800f51c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f520:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f524:	d516      	bpl.n	800f554 <_dtoa_r+0x34c>
 800f526:	4ba8      	ldr	r3, [pc, #672]	@ (800f7c8 <_dtoa_r+0x5c0>)
 800f528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f52c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f530:	f7f1 f98c 	bl	800084c <__aeabi_ddiv>
 800f534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f538:	f004 040f 	and.w	r4, r4, #15
 800f53c:	2603      	movs	r6, #3
 800f53e:	4da2      	ldr	r5, [pc, #648]	@ (800f7c8 <_dtoa_r+0x5c0>)
 800f540:	b954      	cbnz	r4, 800f558 <_dtoa_r+0x350>
 800f542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f54a:	f7f1 f97f 	bl	800084c <__aeabi_ddiv>
 800f54e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f552:	e028      	b.n	800f5a6 <_dtoa_r+0x39e>
 800f554:	2602      	movs	r6, #2
 800f556:	e7f2      	b.n	800f53e <_dtoa_r+0x336>
 800f558:	07e1      	lsls	r1, r4, #31
 800f55a:	d508      	bpl.n	800f56e <_dtoa_r+0x366>
 800f55c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f560:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f564:	f7f1 f848 	bl	80005f8 <__aeabi_dmul>
 800f568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f56c:	3601      	adds	r6, #1
 800f56e:	1064      	asrs	r4, r4, #1
 800f570:	3508      	adds	r5, #8
 800f572:	e7e5      	b.n	800f540 <_dtoa_r+0x338>
 800f574:	f000 80d2 	beq.w	800f71c <_dtoa_r+0x514>
 800f578:	427c      	negs	r4, r7
 800f57a:	4b92      	ldr	r3, [pc, #584]	@ (800f7c4 <_dtoa_r+0x5bc>)
 800f57c:	4d92      	ldr	r5, [pc, #584]	@ (800f7c8 <_dtoa_r+0x5c0>)
 800f57e:	f004 020f 	and.w	r2, r4, #15
 800f582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f58e:	f7f1 f833 	bl	80005f8 <__aeabi_dmul>
 800f592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f596:	1124      	asrs	r4, r4, #4
 800f598:	2300      	movs	r3, #0
 800f59a:	2602      	movs	r6, #2
 800f59c:	2c00      	cmp	r4, #0
 800f59e:	f040 80b2 	bne.w	800f706 <_dtoa_r+0x4fe>
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1d3      	bne.n	800f54e <_dtoa_r+0x346>
 800f5a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f5a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f000 80b7 	beq.w	800f720 <_dtoa_r+0x518>
 800f5b2:	4b86      	ldr	r3, [pc, #536]	@ (800f7cc <_dtoa_r+0x5c4>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	4629      	mov	r1, r5
 800f5ba:	f7f1 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f000 80ae 	beq.w	800f720 <_dtoa_r+0x518>
 800f5c4:	9b07      	ldr	r3, [sp, #28]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f000 80aa 	beq.w	800f720 <_dtoa_r+0x518>
 800f5cc:	9b00      	ldr	r3, [sp, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	dd37      	ble.n	800f642 <_dtoa_r+0x43a>
 800f5d2:	1e7b      	subs	r3, r7, #1
 800f5d4:	9304      	str	r3, [sp, #16]
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	4b7d      	ldr	r3, [pc, #500]	@ (800f7d0 <_dtoa_r+0x5c8>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	4629      	mov	r1, r5
 800f5de:	f7f1 f80b 	bl	80005f8 <__aeabi_dmul>
 800f5e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5e6:	9c00      	ldr	r4, [sp, #0]
 800f5e8:	3601      	adds	r6, #1
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f7f0 ff9a 	bl	8000524 <__aeabi_i2d>
 800f5f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5f4:	f7f1 f800 	bl	80005f8 <__aeabi_dmul>
 800f5f8:	4b76      	ldr	r3, [pc, #472]	@ (800f7d4 <_dtoa_r+0x5cc>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f7f0 fe46 	bl	800028c <__adddf3>
 800f600:	4605      	mov	r5, r0
 800f602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f606:	2c00      	cmp	r4, #0
 800f608:	f040 808d 	bne.w	800f726 <_dtoa_r+0x51e>
 800f60c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f610:	4b71      	ldr	r3, [pc, #452]	@ (800f7d8 <_dtoa_r+0x5d0>)
 800f612:	2200      	movs	r2, #0
 800f614:	f7f0 fe38 	bl	8000288 <__aeabi_dsub>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f620:	462a      	mov	r2, r5
 800f622:	4633      	mov	r3, r6
 800f624:	f7f1 fa78 	bl	8000b18 <__aeabi_dcmpgt>
 800f628:	2800      	cmp	r0, #0
 800f62a:	f040 828b 	bne.w	800fb44 <_dtoa_r+0x93c>
 800f62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f632:	462a      	mov	r2, r5
 800f634:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f638:	f7f1 fa50 	bl	8000adc <__aeabi_dcmplt>
 800f63c:	2800      	cmp	r0, #0
 800f63e:	f040 8128 	bne.w	800f892 <_dtoa_r+0x68a>
 800f642:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f646:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f64a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f2c0 815a 	blt.w	800f906 <_dtoa_r+0x6fe>
 800f652:	2f0e      	cmp	r7, #14
 800f654:	f300 8157 	bgt.w	800f906 <_dtoa_r+0x6fe>
 800f658:	4b5a      	ldr	r3, [pc, #360]	@ (800f7c4 <_dtoa_r+0x5bc>)
 800f65a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f65e:	ed93 7b00 	vldr	d7, [r3]
 800f662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f664:	2b00      	cmp	r3, #0
 800f666:	ed8d 7b00 	vstr	d7, [sp]
 800f66a:	da03      	bge.n	800f674 <_dtoa_r+0x46c>
 800f66c:	9b07      	ldr	r3, [sp, #28]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f340 8101 	ble.w	800f876 <_dtoa_r+0x66e>
 800f674:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f678:	4656      	mov	r6, sl
 800f67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f67e:	4620      	mov	r0, r4
 800f680:	4629      	mov	r1, r5
 800f682:	f7f1 f8e3 	bl	800084c <__aeabi_ddiv>
 800f686:	f7f1 fa67 	bl	8000b58 <__aeabi_d2iz>
 800f68a:	4680      	mov	r8, r0
 800f68c:	f7f0 ff4a 	bl	8000524 <__aeabi_i2d>
 800f690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f694:	f7f0 ffb0 	bl	80005f8 <__aeabi_dmul>
 800f698:	4602      	mov	r2, r0
 800f69a:	460b      	mov	r3, r1
 800f69c:	4620      	mov	r0, r4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f6a4:	f7f0 fdf0 	bl	8000288 <__aeabi_dsub>
 800f6a8:	f806 4b01 	strb.w	r4, [r6], #1
 800f6ac:	9d07      	ldr	r5, [sp, #28]
 800f6ae:	eba6 040a 	sub.w	r4, r6, sl
 800f6b2:	42a5      	cmp	r5, r4
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	460b      	mov	r3, r1
 800f6b8:	f040 8117 	bne.w	800f8ea <_dtoa_r+0x6e2>
 800f6bc:	f7f0 fde6 	bl	800028c <__adddf3>
 800f6c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	460d      	mov	r5, r1
 800f6c8:	f7f1 fa26 	bl	8000b18 <__aeabi_dcmpgt>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	f040 80f9 	bne.w	800f8c4 <_dtoa_r+0x6bc>
 800f6d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	4629      	mov	r1, r5
 800f6da:	f7f1 f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6de:	b118      	cbz	r0, 800f6e8 <_dtoa_r+0x4e0>
 800f6e0:	f018 0f01 	tst.w	r8, #1
 800f6e4:	f040 80ee 	bne.w	800f8c4 <_dtoa_r+0x6bc>
 800f6e8:	4649      	mov	r1, r9
 800f6ea:	4658      	mov	r0, fp
 800f6ec:	f000 fe94 	bl	8010418 <_Bfree>
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	7033      	strb	r3, [r6, #0]
 800f6f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6f6:	3701      	adds	r7, #1
 800f6f8:	601f      	str	r7, [r3, #0]
 800f6fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f000 831d 	beq.w	800fd3c <_dtoa_r+0xb34>
 800f702:	601e      	str	r6, [r3, #0]
 800f704:	e31a      	b.n	800fd3c <_dtoa_r+0xb34>
 800f706:	07e2      	lsls	r2, r4, #31
 800f708:	d505      	bpl.n	800f716 <_dtoa_r+0x50e>
 800f70a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f70e:	f7f0 ff73 	bl	80005f8 <__aeabi_dmul>
 800f712:	3601      	adds	r6, #1
 800f714:	2301      	movs	r3, #1
 800f716:	1064      	asrs	r4, r4, #1
 800f718:	3508      	adds	r5, #8
 800f71a:	e73f      	b.n	800f59c <_dtoa_r+0x394>
 800f71c:	2602      	movs	r6, #2
 800f71e:	e742      	b.n	800f5a6 <_dtoa_r+0x39e>
 800f720:	9c07      	ldr	r4, [sp, #28]
 800f722:	9704      	str	r7, [sp, #16]
 800f724:	e761      	b.n	800f5ea <_dtoa_r+0x3e2>
 800f726:	4b27      	ldr	r3, [pc, #156]	@ (800f7c4 <_dtoa_r+0x5bc>)
 800f728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f72a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f72e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f732:	4454      	add	r4, sl
 800f734:	2900      	cmp	r1, #0
 800f736:	d053      	beq.n	800f7e0 <_dtoa_r+0x5d8>
 800f738:	4928      	ldr	r1, [pc, #160]	@ (800f7dc <_dtoa_r+0x5d4>)
 800f73a:	2000      	movs	r0, #0
 800f73c:	f7f1 f886 	bl	800084c <__aeabi_ddiv>
 800f740:	4633      	mov	r3, r6
 800f742:	462a      	mov	r2, r5
 800f744:	f7f0 fda0 	bl	8000288 <__aeabi_dsub>
 800f748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f74c:	4656      	mov	r6, sl
 800f74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f752:	f7f1 fa01 	bl	8000b58 <__aeabi_d2iz>
 800f756:	4605      	mov	r5, r0
 800f758:	f7f0 fee4 	bl	8000524 <__aeabi_i2d>
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f764:	f7f0 fd90 	bl	8000288 <__aeabi_dsub>
 800f768:	3530      	adds	r5, #48	@ 0x30
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f772:	f806 5b01 	strb.w	r5, [r6], #1
 800f776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f77a:	f7f1 f9af 	bl	8000adc <__aeabi_dcmplt>
 800f77e:	2800      	cmp	r0, #0
 800f780:	d171      	bne.n	800f866 <_dtoa_r+0x65e>
 800f782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f786:	4911      	ldr	r1, [pc, #68]	@ (800f7cc <_dtoa_r+0x5c4>)
 800f788:	2000      	movs	r0, #0
 800f78a:	f7f0 fd7d 	bl	8000288 <__aeabi_dsub>
 800f78e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f792:	f7f1 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800f796:	2800      	cmp	r0, #0
 800f798:	f040 8095 	bne.w	800f8c6 <_dtoa_r+0x6be>
 800f79c:	42a6      	cmp	r6, r4
 800f79e:	f43f af50 	beq.w	800f642 <_dtoa_r+0x43a>
 800f7a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f7a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f7d0 <_dtoa_r+0x5c8>)
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f7f0 ff25 	bl	80005f8 <__aeabi_dmul>
 800f7ae:	4b08      	ldr	r3, [pc, #32]	@ (800f7d0 <_dtoa_r+0x5c8>)
 800f7b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7ba:	f7f0 ff1d 	bl	80005f8 <__aeabi_dmul>
 800f7be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7c2:	e7c4      	b.n	800f74e <_dtoa_r+0x546>
 800f7c4:	08011680 	.word	0x08011680
 800f7c8:	08011658 	.word	0x08011658
 800f7cc:	3ff00000 	.word	0x3ff00000
 800f7d0:	40240000 	.word	0x40240000
 800f7d4:	401c0000 	.word	0x401c0000
 800f7d8:	40140000 	.word	0x40140000
 800f7dc:	3fe00000 	.word	0x3fe00000
 800f7e0:	4631      	mov	r1, r6
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	f7f0 ff08 	bl	80005f8 <__aeabi_dmul>
 800f7e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f7ec:	9415      	str	r4, [sp, #84]	@ 0x54
 800f7ee:	4656      	mov	r6, sl
 800f7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7f4:	f7f1 f9b0 	bl	8000b58 <__aeabi_d2iz>
 800f7f8:	4605      	mov	r5, r0
 800f7fa:	f7f0 fe93 	bl	8000524 <__aeabi_i2d>
 800f7fe:	4602      	mov	r2, r0
 800f800:	460b      	mov	r3, r1
 800f802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f806:	f7f0 fd3f 	bl	8000288 <__aeabi_dsub>
 800f80a:	3530      	adds	r5, #48	@ 0x30
 800f80c:	f806 5b01 	strb.w	r5, [r6], #1
 800f810:	4602      	mov	r2, r0
 800f812:	460b      	mov	r3, r1
 800f814:	42a6      	cmp	r6, r4
 800f816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f81a:	f04f 0200 	mov.w	r2, #0
 800f81e:	d124      	bne.n	800f86a <_dtoa_r+0x662>
 800f820:	4bac      	ldr	r3, [pc, #688]	@ (800fad4 <_dtoa_r+0x8cc>)
 800f822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f826:	f7f0 fd31 	bl	800028c <__adddf3>
 800f82a:	4602      	mov	r2, r0
 800f82c:	460b      	mov	r3, r1
 800f82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f832:	f7f1 f971 	bl	8000b18 <__aeabi_dcmpgt>
 800f836:	2800      	cmp	r0, #0
 800f838:	d145      	bne.n	800f8c6 <_dtoa_r+0x6be>
 800f83a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f83e:	49a5      	ldr	r1, [pc, #660]	@ (800fad4 <_dtoa_r+0x8cc>)
 800f840:	2000      	movs	r0, #0
 800f842:	f7f0 fd21 	bl	8000288 <__aeabi_dsub>
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f84e:	f7f1 f945 	bl	8000adc <__aeabi_dcmplt>
 800f852:	2800      	cmp	r0, #0
 800f854:	f43f aef5 	beq.w	800f642 <_dtoa_r+0x43a>
 800f858:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f85a:	1e73      	subs	r3, r6, #1
 800f85c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f85e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f862:	2b30      	cmp	r3, #48	@ 0x30
 800f864:	d0f8      	beq.n	800f858 <_dtoa_r+0x650>
 800f866:	9f04      	ldr	r7, [sp, #16]
 800f868:	e73e      	b.n	800f6e8 <_dtoa_r+0x4e0>
 800f86a:	4b9b      	ldr	r3, [pc, #620]	@ (800fad8 <_dtoa_r+0x8d0>)
 800f86c:	f7f0 fec4 	bl	80005f8 <__aeabi_dmul>
 800f870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f874:	e7bc      	b.n	800f7f0 <_dtoa_r+0x5e8>
 800f876:	d10c      	bne.n	800f892 <_dtoa_r+0x68a>
 800f878:	4b98      	ldr	r3, [pc, #608]	@ (800fadc <_dtoa_r+0x8d4>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f880:	f7f0 feba 	bl	80005f8 <__aeabi_dmul>
 800f884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f888:	f7f1 f93c 	bl	8000b04 <__aeabi_dcmpge>
 800f88c:	2800      	cmp	r0, #0
 800f88e:	f000 8157 	beq.w	800fb40 <_dtoa_r+0x938>
 800f892:	2400      	movs	r4, #0
 800f894:	4625      	mov	r5, r4
 800f896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f898:	43db      	mvns	r3, r3
 800f89a:	9304      	str	r3, [sp, #16]
 800f89c:	4656      	mov	r6, sl
 800f89e:	2700      	movs	r7, #0
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4658      	mov	r0, fp
 800f8a4:	f000 fdb8 	bl	8010418 <_Bfree>
 800f8a8:	2d00      	cmp	r5, #0
 800f8aa:	d0dc      	beq.n	800f866 <_dtoa_r+0x65e>
 800f8ac:	b12f      	cbz	r7, 800f8ba <_dtoa_r+0x6b2>
 800f8ae:	42af      	cmp	r7, r5
 800f8b0:	d003      	beq.n	800f8ba <_dtoa_r+0x6b2>
 800f8b2:	4639      	mov	r1, r7
 800f8b4:	4658      	mov	r0, fp
 800f8b6:	f000 fdaf 	bl	8010418 <_Bfree>
 800f8ba:	4629      	mov	r1, r5
 800f8bc:	4658      	mov	r0, fp
 800f8be:	f000 fdab 	bl	8010418 <_Bfree>
 800f8c2:	e7d0      	b.n	800f866 <_dtoa_r+0x65e>
 800f8c4:	9704      	str	r7, [sp, #16]
 800f8c6:	4633      	mov	r3, r6
 800f8c8:	461e      	mov	r6, r3
 800f8ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8ce:	2a39      	cmp	r2, #57	@ 0x39
 800f8d0:	d107      	bne.n	800f8e2 <_dtoa_r+0x6da>
 800f8d2:	459a      	cmp	sl, r3
 800f8d4:	d1f8      	bne.n	800f8c8 <_dtoa_r+0x6c0>
 800f8d6:	9a04      	ldr	r2, [sp, #16]
 800f8d8:	3201      	adds	r2, #1
 800f8da:	9204      	str	r2, [sp, #16]
 800f8dc:	2230      	movs	r2, #48	@ 0x30
 800f8de:	f88a 2000 	strb.w	r2, [sl]
 800f8e2:	781a      	ldrb	r2, [r3, #0]
 800f8e4:	3201      	adds	r2, #1
 800f8e6:	701a      	strb	r2, [r3, #0]
 800f8e8:	e7bd      	b.n	800f866 <_dtoa_r+0x65e>
 800f8ea:	4b7b      	ldr	r3, [pc, #492]	@ (800fad8 <_dtoa_r+0x8d0>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f7f0 fe83 	bl	80005f8 <__aeabi_dmul>
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	460d      	mov	r5, r1
 800f8fa:	f7f1 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8fe:	2800      	cmp	r0, #0
 800f900:	f43f aebb 	beq.w	800f67a <_dtoa_r+0x472>
 800f904:	e6f0      	b.n	800f6e8 <_dtoa_r+0x4e0>
 800f906:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f908:	2a00      	cmp	r2, #0
 800f90a:	f000 80db 	beq.w	800fac4 <_dtoa_r+0x8bc>
 800f90e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f910:	2a01      	cmp	r2, #1
 800f912:	f300 80bf 	bgt.w	800fa94 <_dtoa_r+0x88c>
 800f916:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f918:	2a00      	cmp	r2, #0
 800f91a:	f000 80b7 	beq.w	800fa8c <_dtoa_r+0x884>
 800f91e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f922:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f924:	4646      	mov	r6, r8
 800f926:	9a08      	ldr	r2, [sp, #32]
 800f928:	2101      	movs	r1, #1
 800f92a:	441a      	add	r2, r3
 800f92c:	4658      	mov	r0, fp
 800f92e:	4498      	add	r8, r3
 800f930:	9208      	str	r2, [sp, #32]
 800f932:	f000 fe25 	bl	8010580 <__i2b>
 800f936:	4605      	mov	r5, r0
 800f938:	b15e      	cbz	r6, 800f952 <_dtoa_r+0x74a>
 800f93a:	9b08      	ldr	r3, [sp, #32]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	dd08      	ble.n	800f952 <_dtoa_r+0x74a>
 800f940:	42b3      	cmp	r3, r6
 800f942:	9a08      	ldr	r2, [sp, #32]
 800f944:	bfa8      	it	ge
 800f946:	4633      	movge	r3, r6
 800f948:	eba8 0803 	sub.w	r8, r8, r3
 800f94c:	1af6      	subs	r6, r6, r3
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	9308      	str	r3, [sp, #32]
 800f952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f954:	b1f3      	cbz	r3, 800f994 <_dtoa_r+0x78c>
 800f956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 80b7 	beq.w	800facc <_dtoa_r+0x8c4>
 800f95e:	b18c      	cbz	r4, 800f984 <_dtoa_r+0x77c>
 800f960:	4629      	mov	r1, r5
 800f962:	4622      	mov	r2, r4
 800f964:	4658      	mov	r0, fp
 800f966:	f000 fecb 	bl	8010700 <__pow5mult>
 800f96a:	464a      	mov	r2, r9
 800f96c:	4601      	mov	r1, r0
 800f96e:	4605      	mov	r5, r0
 800f970:	4658      	mov	r0, fp
 800f972:	f000 fe1b 	bl	80105ac <__multiply>
 800f976:	4649      	mov	r1, r9
 800f978:	9004      	str	r0, [sp, #16]
 800f97a:	4658      	mov	r0, fp
 800f97c:	f000 fd4c 	bl	8010418 <_Bfree>
 800f980:	9b04      	ldr	r3, [sp, #16]
 800f982:	4699      	mov	r9, r3
 800f984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f986:	1b1a      	subs	r2, r3, r4
 800f988:	d004      	beq.n	800f994 <_dtoa_r+0x78c>
 800f98a:	4649      	mov	r1, r9
 800f98c:	4658      	mov	r0, fp
 800f98e:	f000 feb7 	bl	8010700 <__pow5mult>
 800f992:	4681      	mov	r9, r0
 800f994:	2101      	movs	r1, #1
 800f996:	4658      	mov	r0, fp
 800f998:	f000 fdf2 	bl	8010580 <__i2b>
 800f99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f99e:	4604      	mov	r4, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f000 81cf 	beq.w	800fd44 <_dtoa_r+0xb3c>
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	4601      	mov	r1, r0
 800f9aa:	4658      	mov	r0, fp
 800f9ac:	f000 fea8 	bl	8010700 <__pow5mult>
 800f9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	4604      	mov	r4, r0
 800f9b6:	f300 8095 	bgt.w	800fae4 <_dtoa_r+0x8dc>
 800f9ba:	9b02      	ldr	r3, [sp, #8]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f040 8087 	bne.w	800fad0 <_dtoa_r+0x8c8>
 800f9c2:	9b03      	ldr	r3, [sp, #12]
 800f9c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f040 8089 	bne.w	800fae0 <_dtoa_r+0x8d8>
 800f9ce:	9b03      	ldr	r3, [sp, #12]
 800f9d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f9d4:	0d1b      	lsrs	r3, r3, #20
 800f9d6:	051b      	lsls	r3, r3, #20
 800f9d8:	b12b      	cbz	r3, 800f9e6 <_dtoa_r+0x7de>
 800f9da:	9b08      	ldr	r3, [sp, #32]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	9308      	str	r3, [sp, #32]
 800f9e0:	f108 0801 	add.w	r8, r8, #1
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 81b0 	beq.w	800fd50 <_dtoa_r+0xb48>
 800f9f0:	6923      	ldr	r3, [r4, #16]
 800f9f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f9f6:	6918      	ldr	r0, [r3, #16]
 800f9f8:	f000 fd76 	bl	80104e8 <__hi0bits>
 800f9fc:	f1c0 0020 	rsb	r0, r0, #32
 800fa00:	9b08      	ldr	r3, [sp, #32]
 800fa02:	4418      	add	r0, r3
 800fa04:	f010 001f 	ands.w	r0, r0, #31
 800fa08:	d077      	beq.n	800fafa <_dtoa_r+0x8f2>
 800fa0a:	f1c0 0320 	rsb	r3, r0, #32
 800fa0e:	2b04      	cmp	r3, #4
 800fa10:	dd6b      	ble.n	800faea <_dtoa_r+0x8e2>
 800fa12:	9b08      	ldr	r3, [sp, #32]
 800fa14:	f1c0 001c 	rsb	r0, r0, #28
 800fa18:	4403      	add	r3, r0
 800fa1a:	4480      	add	r8, r0
 800fa1c:	4406      	add	r6, r0
 800fa1e:	9308      	str	r3, [sp, #32]
 800fa20:	f1b8 0f00 	cmp.w	r8, #0
 800fa24:	dd05      	ble.n	800fa32 <_dtoa_r+0x82a>
 800fa26:	4649      	mov	r1, r9
 800fa28:	4642      	mov	r2, r8
 800fa2a:	4658      	mov	r0, fp
 800fa2c:	f000 fec2 	bl	80107b4 <__lshift>
 800fa30:	4681      	mov	r9, r0
 800fa32:	9b08      	ldr	r3, [sp, #32]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	dd05      	ble.n	800fa44 <_dtoa_r+0x83c>
 800fa38:	4621      	mov	r1, r4
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	4658      	mov	r0, fp
 800fa3e:	f000 feb9 	bl	80107b4 <__lshift>
 800fa42:	4604      	mov	r4, r0
 800fa44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d059      	beq.n	800fafe <_dtoa_r+0x8f6>
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4648      	mov	r0, r9
 800fa4e:	f000 ff1d 	bl	801088c <__mcmp>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	da53      	bge.n	800fafe <_dtoa_r+0x8f6>
 800fa56:	1e7b      	subs	r3, r7, #1
 800fa58:	9304      	str	r3, [sp, #16]
 800fa5a:	4649      	mov	r1, r9
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	220a      	movs	r2, #10
 800fa60:	4658      	mov	r0, fp
 800fa62:	f000 fcfb 	bl	801045c <__multadd>
 800fa66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa68:	4681      	mov	r9, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f000 8172 	beq.w	800fd54 <_dtoa_r+0xb4c>
 800fa70:	2300      	movs	r3, #0
 800fa72:	4629      	mov	r1, r5
 800fa74:	220a      	movs	r2, #10
 800fa76:	4658      	mov	r0, fp
 800fa78:	f000 fcf0 	bl	801045c <__multadd>
 800fa7c:	9b00      	ldr	r3, [sp, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	4605      	mov	r5, r0
 800fa82:	dc67      	bgt.n	800fb54 <_dtoa_r+0x94c>
 800fa84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	dc41      	bgt.n	800fb0e <_dtoa_r+0x906>
 800fa8a:	e063      	b.n	800fb54 <_dtoa_r+0x94c>
 800fa8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fa8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fa92:	e746      	b.n	800f922 <_dtoa_r+0x71a>
 800fa94:	9b07      	ldr	r3, [sp, #28]
 800fa96:	1e5c      	subs	r4, r3, #1
 800fa98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa9a:	42a3      	cmp	r3, r4
 800fa9c:	bfbf      	itttt	lt
 800fa9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800faa0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800faa2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800faa4:	1ae3      	sublt	r3, r4, r3
 800faa6:	bfb4      	ite	lt
 800faa8:	18d2      	addlt	r2, r2, r3
 800faaa:	1b1c      	subge	r4, r3, r4
 800faac:	9b07      	ldr	r3, [sp, #28]
 800faae:	bfbc      	itt	lt
 800fab0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fab2:	2400      	movlt	r4, #0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	bfb5      	itete	lt
 800fab8:	eba8 0603 	sublt.w	r6, r8, r3
 800fabc:	9b07      	ldrge	r3, [sp, #28]
 800fabe:	2300      	movlt	r3, #0
 800fac0:	4646      	movge	r6, r8
 800fac2:	e730      	b.n	800f926 <_dtoa_r+0x71e>
 800fac4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fac6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fac8:	4646      	mov	r6, r8
 800faca:	e735      	b.n	800f938 <_dtoa_r+0x730>
 800facc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800face:	e75c      	b.n	800f98a <_dtoa_r+0x782>
 800fad0:	2300      	movs	r3, #0
 800fad2:	e788      	b.n	800f9e6 <_dtoa_r+0x7de>
 800fad4:	3fe00000 	.word	0x3fe00000
 800fad8:	40240000 	.word	0x40240000
 800fadc:	40140000 	.word	0x40140000
 800fae0:	9b02      	ldr	r3, [sp, #8]
 800fae2:	e780      	b.n	800f9e6 <_dtoa_r+0x7de>
 800fae4:	2300      	movs	r3, #0
 800fae6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fae8:	e782      	b.n	800f9f0 <_dtoa_r+0x7e8>
 800faea:	d099      	beq.n	800fa20 <_dtoa_r+0x818>
 800faec:	9a08      	ldr	r2, [sp, #32]
 800faee:	331c      	adds	r3, #28
 800faf0:	441a      	add	r2, r3
 800faf2:	4498      	add	r8, r3
 800faf4:	441e      	add	r6, r3
 800faf6:	9208      	str	r2, [sp, #32]
 800faf8:	e792      	b.n	800fa20 <_dtoa_r+0x818>
 800fafa:	4603      	mov	r3, r0
 800fafc:	e7f6      	b.n	800faec <_dtoa_r+0x8e4>
 800fafe:	9b07      	ldr	r3, [sp, #28]
 800fb00:	9704      	str	r7, [sp, #16]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	dc20      	bgt.n	800fb48 <_dtoa_r+0x940>
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	dd1e      	ble.n	800fb4c <_dtoa_r+0x944>
 800fb0e:	9b00      	ldr	r3, [sp, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f47f aec0 	bne.w	800f896 <_dtoa_r+0x68e>
 800fb16:	4621      	mov	r1, r4
 800fb18:	2205      	movs	r2, #5
 800fb1a:	4658      	mov	r0, fp
 800fb1c:	f000 fc9e 	bl	801045c <__multadd>
 800fb20:	4601      	mov	r1, r0
 800fb22:	4604      	mov	r4, r0
 800fb24:	4648      	mov	r0, r9
 800fb26:	f000 feb1 	bl	801088c <__mcmp>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	f77f aeb3 	ble.w	800f896 <_dtoa_r+0x68e>
 800fb30:	4656      	mov	r6, sl
 800fb32:	2331      	movs	r3, #49	@ 0x31
 800fb34:	f806 3b01 	strb.w	r3, [r6], #1
 800fb38:	9b04      	ldr	r3, [sp, #16]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	9304      	str	r3, [sp, #16]
 800fb3e:	e6ae      	b.n	800f89e <_dtoa_r+0x696>
 800fb40:	9c07      	ldr	r4, [sp, #28]
 800fb42:	9704      	str	r7, [sp, #16]
 800fb44:	4625      	mov	r5, r4
 800fb46:	e7f3      	b.n	800fb30 <_dtoa_r+0x928>
 800fb48:	9b07      	ldr	r3, [sp, #28]
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f000 8104 	beq.w	800fd5c <_dtoa_r+0xb54>
 800fb54:	2e00      	cmp	r6, #0
 800fb56:	dd05      	ble.n	800fb64 <_dtoa_r+0x95c>
 800fb58:	4629      	mov	r1, r5
 800fb5a:	4632      	mov	r2, r6
 800fb5c:	4658      	mov	r0, fp
 800fb5e:	f000 fe29 	bl	80107b4 <__lshift>
 800fb62:	4605      	mov	r5, r0
 800fb64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d05a      	beq.n	800fc20 <_dtoa_r+0xa18>
 800fb6a:	6869      	ldr	r1, [r5, #4]
 800fb6c:	4658      	mov	r0, fp
 800fb6e:	f000 fc13 	bl	8010398 <_Balloc>
 800fb72:	4606      	mov	r6, r0
 800fb74:	b928      	cbnz	r0, 800fb82 <_dtoa_r+0x97a>
 800fb76:	4b84      	ldr	r3, [pc, #528]	@ (800fd88 <_dtoa_r+0xb80>)
 800fb78:	4602      	mov	r2, r0
 800fb7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fb7e:	f7ff bb5a 	b.w	800f236 <_dtoa_r+0x2e>
 800fb82:	692a      	ldr	r2, [r5, #16]
 800fb84:	3202      	adds	r2, #2
 800fb86:	0092      	lsls	r2, r2, #2
 800fb88:	f105 010c 	add.w	r1, r5, #12
 800fb8c:	300c      	adds	r0, #12
 800fb8e:	f7ff faa4 	bl	800f0da <memcpy>
 800fb92:	2201      	movs	r2, #1
 800fb94:	4631      	mov	r1, r6
 800fb96:	4658      	mov	r0, fp
 800fb98:	f000 fe0c 	bl	80107b4 <__lshift>
 800fb9c:	f10a 0301 	add.w	r3, sl, #1
 800fba0:	9307      	str	r3, [sp, #28]
 800fba2:	9b00      	ldr	r3, [sp, #0]
 800fba4:	4453      	add	r3, sl
 800fba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fba8:	9b02      	ldr	r3, [sp, #8]
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	462f      	mov	r7, r5
 800fbb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	9b07      	ldr	r3, [sp, #28]
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	4648      	mov	r0, r9
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	f7ff fa9a 	bl	800f0f6 <quorem>
 800fbc2:	4639      	mov	r1, r7
 800fbc4:	9002      	str	r0, [sp, #8]
 800fbc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fbca:	4648      	mov	r0, r9
 800fbcc:	f000 fe5e 	bl	801088c <__mcmp>
 800fbd0:	462a      	mov	r2, r5
 800fbd2:	9008      	str	r0, [sp, #32]
 800fbd4:	4621      	mov	r1, r4
 800fbd6:	4658      	mov	r0, fp
 800fbd8:	f000 fe74 	bl	80108c4 <__mdiff>
 800fbdc:	68c2      	ldr	r2, [r0, #12]
 800fbde:	4606      	mov	r6, r0
 800fbe0:	bb02      	cbnz	r2, 800fc24 <_dtoa_r+0xa1c>
 800fbe2:	4601      	mov	r1, r0
 800fbe4:	4648      	mov	r0, r9
 800fbe6:	f000 fe51 	bl	801088c <__mcmp>
 800fbea:	4602      	mov	r2, r0
 800fbec:	4631      	mov	r1, r6
 800fbee:	4658      	mov	r0, fp
 800fbf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800fbf2:	f000 fc11 	bl	8010418 <_Bfree>
 800fbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbfa:	9e07      	ldr	r6, [sp, #28]
 800fbfc:	ea43 0102 	orr.w	r1, r3, r2
 800fc00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc02:	4319      	orrs	r1, r3
 800fc04:	d110      	bne.n	800fc28 <_dtoa_r+0xa20>
 800fc06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc0a:	d029      	beq.n	800fc60 <_dtoa_r+0xa58>
 800fc0c:	9b08      	ldr	r3, [sp, #32]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	dd02      	ble.n	800fc18 <_dtoa_r+0xa10>
 800fc12:	9b02      	ldr	r3, [sp, #8]
 800fc14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fc18:	9b00      	ldr	r3, [sp, #0]
 800fc1a:	f883 8000 	strb.w	r8, [r3]
 800fc1e:	e63f      	b.n	800f8a0 <_dtoa_r+0x698>
 800fc20:	4628      	mov	r0, r5
 800fc22:	e7bb      	b.n	800fb9c <_dtoa_r+0x994>
 800fc24:	2201      	movs	r2, #1
 800fc26:	e7e1      	b.n	800fbec <_dtoa_r+0x9e4>
 800fc28:	9b08      	ldr	r3, [sp, #32]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	db04      	blt.n	800fc38 <_dtoa_r+0xa30>
 800fc2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc30:	430b      	orrs	r3, r1
 800fc32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc34:	430b      	orrs	r3, r1
 800fc36:	d120      	bne.n	800fc7a <_dtoa_r+0xa72>
 800fc38:	2a00      	cmp	r2, #0
 800fc3a:	dded      	ble.n	800fc18 <_dtoa_r+0xa10>
 800fc3c:	4649      	mov	r1, r9
 800fc3e:	2201      	movs	r2, #1
 800fc40:	4658      	mov	r0, fp
 800fc42:	f000 fdb7 	bl	80107b4 <__lshift>
 800fc46:	4621      	mov	r1, r4
 800fc48:	4681      	mov	r9, r0
 800fc4a:	f000 fe1f 	bl	801088c <__mcmp>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	dc03      	bgt.n	800fc5a <_dtoa_r+0xa52>
 800fc52:	d1e1      	bne.n	800fc18 <_dtoa_r+0xa10>
 800fc54:	f018 0f01 	tst.w	r8, #1
 800fc58:	d0de      	beq.n	800fc18 <_dtoa_r+0xa10>
 800fc5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc5e:	d1d8      	bne.n	800fc12 <_dtoa_r+0xa0a>
 800fc60:	9a00      	ldr	r2, [sp, #0]
 800fc62:	2339      	movs	r3, #57	@ 0x39
 800fc64:	7013      	strb	r3, [r2, #0]
 800fc66:	4633      	mov	r3, r6
 800fc68:	461e      	mov	r6, r3
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fc70:	2a39      	cmp	r2, #57	@ 0x39
 800fc72:	d052      	beq.n	800fd1a <_dtoa_r+0xb12>
 800fc74:	3201      	adds	r2, #1
 800fc76:	701a      	strb	r2, [r3, #0]
 800fc78:	e612      	b.n	800f8a0 <_dtoa_r+0x698>
 800fc7a:	2a00      	cmp	r2, #0
 800fc7c:	dd07      	ble.n	800fc8e <_dtoa_r+0xa86>
 800fc7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc82:	d0ed      	beq.n	800fc60 <_dtoa_r+0xa58>
 800fc84:	9a00      	ldr	r2, [sp, #0]
 800fc86:	f108 0301 	add.w	r3, r8, #1
 800fc8a:	7013      	strb	r3, [r2, #0]
 800fc8c:	e608      	b.n	800f8a0 <_dtoa_r+0x698>
 800fc8e:	9b07      	ldr	r3, [sp, #28]
 800fc90:	9a07      	ldr	r2, [sp, #28]
 800fc92:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fc96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d028      	beq.n	800fcee <_dtoa_r+0xae6>
 800fc9c:	4649      	mov	r1, r9
 800fc9e:	2300      	movs	r3, #0
 800fca0:	220a      	movs	r2, #10
 800fca2:	4658      	mov	r0, fp
 800fca4:	f000 fbda 	bl	801045c <__multadd>
 800fca8:	42af      	cmp	r7, r5
 800fcaa:	4681      	mov	r9, r0
 800fcac:	f04f 0300 	mov.w	r3, #0
 800fcb0:	f04f 020a 	mov.w	r2, #10
 800fcb4:	4639      	mov	r1, r7
 800fcb6:	4658      	mov	r0, fp
 800fcb8:	d107      	bne.n	800fcca <_dtoa_r+0xac2>
 800fcba:	f000 fbcf 	bl	801045c <__multadd>
 800fcbe:	4607      	mov	r7, r0
 800fcc0:	4605      	mov	r5, r0
 800fcc2:	9b07      	ldr	r3, [sp, #28]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	9307      	str	r3, [sp, #28]
 800fcc8:	e774      	b.n	800fbb4 <_dtoa_r+0x9ac>
 800fcca:	f000 fbc7 	bl	801045c <__multadd>
 800fcce:	4629      	mov	r1, r5
 800fcd0:	4607      	mov	r7, r0
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	220a      	movs	r2, #10
 800fcd6:	4658      	mov	r0, fp
 800fcd8:	f000 fbc0 	bl	801045c <__multadd>
 800fcdc:	4605      	mov	r5, r0
 800fcde:	e7f0      	b.n	800fcc2 <_dtoa_r+0xaba>
 800fce0:	9b00      	ldr	r3, [sp, #0]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	bfcc      	ite	gt
 800fce6:	461e      	movgt	r6, r3
 800fce8:	2601      	movle	r6, #1
 800fcea:	4456      	add	r6, sl
 800fcec:	2700      	movs	r7, #0
 800fcee:	4649      	mov	r1, r9
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	4658      	mov	r0, fp
 800fcf4:	f000 fd5e 	bl	80107b4 <__lshift>
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	4681      	mov	r9, r0
 800fcfc:	f000 fdc6 	bl	801088c <__mcmp>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	dcb0      	bgt.n	800fc66 <_dtoa_r+0xa5e>
 800fd04:	d102      	bne.n	800fd0c <_dtoa_r+0xb04>
 800fd06:	f018 0f01 	tst.w	r8, #1
 800fd0a:	d1ac      	bne.n	800fc66 <_dtoa_r+0xa5e>
 800fd0c:	4633      	mov	r3, r6
 800fd0e:	461e      	mov	r6, r3
 800fd10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd14:	2a30      	cmp	r2, #48	@ 0x30
 800fd16:	d0fa      	beq.n	800fd0e <_dtoa_r+0xb06>
 800fd18:	e5c2      	b.n	800f8a0 <_dtoa_r+0x698>
 800fd1a:	459a      	cmp	sl, r3
 800fd1c:	d1a4      	bne.n	800fc68 <_dtoa_r+0xa60>
 800fd1e:	9b04      	ldr	r3, [sp, #16]
 800fd20:	3301      	adds	r3, #1
 800fd22:	9304      	str	r3, [sp, #16]
 800fd24:	2331      	movs	r3, #49	@ 0x31
 800fd26:	f88a 3000 	strb.w	r3, [sl]
 800fd2a:	e5b9      	b.n	800f8a0 <_dtoa_r+0x698>
 800fd2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fd8c <_dtoa_r+0xb84>
 800fd32:	b11b      	cbz	r3, 800fd3c <_dtoa_r+0xb34>
 800fd34:	f10a 0308 	add.w	r3, sl, #8
 800fd38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd3a:	6013      	str	r3, [r2, #0]
 800fd3c:	4650      	mov	r0, sl
 800fd3e:	b019      	add	sp, #100	@ 0x64
 800fd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	f77f ae37 	ble.w	800f9ba <_dtoa_r+0x7b2>
 800fd4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd50:	2001      	movs	r0, #1
 800fd52:	e655      	b.n	800fa00 <_dtoa_r+0x7f8>
 800fd54:	9b00      	ldr	r3, [sp, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f77f aed6 	ble.w	800fb08 <_dtoa_r+0x900>
 800fd5c:	4656      	mov	r6, sl
 800fd5e:	4621      	mov	r1, r4
 800fd60:	4648      	mov	r0, r9
 800fd62:	f7ff f9c8 	bl	800f0f6 <quorem>
 800fd66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fd6a:	f806 8b01 	strb.w	r8, [r6], #1
 800fd6e:	9b00      	ldr	r3, [sp, #0]
 800fd70:	eba6 020a 	sub.w	r2, r6, sl
 800fd74:	4293      	cmp	r3, r2
 800fd76:	ddb3      	ble.n	800fce0 <_dtoa_r+0xad8>
 800fd78:	4649      	mov	r1, r9
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	220a      	movs	r2, #10
 800fd7e:	4658      	mov	r0, fp
 800fd80:	f000 fb6c 	bl	801045c <__multadd>
 800fd84:	4681      	mov	r9, r0
 800fd86:	e7ea      	b.n	800fd5e <_dtoa_r+0xb56>
 800fd88:	080115cc 	.word	0x080115cc
 800fd8c:	08011550 	.word	0x08011550

0800fd90 <_free_r>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	4605      	mov	r5, r0
 800fd94:	2900      	cmp	r1, #0
 800fd96:	d041      	beq.n	800fe1c <_free_r+0x8c>
 800fd98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd9c:	1f0c      	subs	r4, r1, #4
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	bfb8      	it	lt
 800fda2:	18e4      	addlt	r4, r4, r3
 800fda4:	f000 faec 	bl	8010380 <__malloc_lock>
 800fda8:	4a1d      	ldr	r2, [pc, #116]	@ (800fe20 <_free_r+0x90>)
 800fdaa:	6813      	ldr	r3, [r2, #0]
 800fdac:	b933      	cbnz	r3, 800fdbc <_free_r+0x2c>
 800fdae:	6063      	str	r3, [r4, #4]
 800fdb0:	6014      	str	r4, [r2, #0]
 800fdb2:	4628      	mov	r0, r5
 800fdb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdb8:	f000 bae8 	b.w	801038c <__malloc_unlock>
 800fdbc:	42a3      	cmp	r3, r4
 800fdbe:	d908      	bls.n	800fdd2 <_free_r+0x42>
 800fdc0:	6820      	ldr	r0, [r4, #0]
 800fdc2:	1821      	adds	r1, r4, r0
 800fdc4:	428b      	cmp	r3, r1
 800fdc6:	bf01      	itttt	eq
 800fdc8:	6819      	ldreq	r1, [r3, #0]
 800fdca:	685b      	ldreq	r3, [r3, #4]
 800fdcc:	1809      	addeq	r1, r1, r0
 800fdce:	6021      	streq	r1, [r4, #0]
 800fdd0:	e7ed      	b.n	800fdae <_free_r+0x1e>
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	b10b      	cbz	r3, 800fddc <_free_r+0x4c>
 800fdd8:	42a3      	cmp	r3, r4
 800fdda:	d9fa      	bls.n	800fdd2 <_free_r+0x42>
 800fddc:	6811      	ldr	r1, [r2, #0]
 800fdde:	1850      	adds	r0, r2, r1
 800fde0:	42a0      	cmp	r0, r4
 800fde2:	d10b      	bne.n	800fdfc <_free_r+0x6c>
 800fde4:	6820      	ldr	r0, [r4, #0]
 800fde6:	4401      	add	r1, r0
 800fde8:	1850      	adds	r0, r2, r1
 800fdea:	4283      	cmp	r3, r0
 800fdec:	6011      	str	r1, [r2, #0]
 800fdee:	d1e0      	bne.n	800fdb2 <_free_r+0x22>
 800fdf0:	6818      	ldr	r0, [r3, #0]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	6053      	str	r3, [r2, #4]
 800fdf6:	4408      	add	r0, r1
 800fdf8:	6010      	str	r0, [r2, #0]
 800fdfa:	e7da      	b.n	800fdb2 <_free_r+0x22>
 800fdfc:	d902      	bls.n	800fe04 <_free_r+0x74>
 800fdfe:	230c      	movs	r3, #12
 800fe00:	602b      	str	r3, [r5, #0]
 800fe02:	e7d6      	b.n	800fdb2 <_free_r+0x22>
 800fe04:	6820      	ldr	r0, [r4, #0]
 800fe06:	1821      	adds	r1, r4, r0
 800fe08:	428b      	cmp	r3, r1
 800fe0a:	bf04      	itt	eq
 800fe0c:	6819      	ldreq	r1, [r3, #0]
 800fe0e:	685b      	ldreq	r3, [r3, #4]
 800fe10:	6063      	str	r3, [r4, #4]
 800fe12:	bf04      	itt	eq
 800fe14:	1809      	addeq	r1, r1, r0
 800fe16:	6021      	streq	r1, [r4, #0]
 800fe18:	6054      	str	r4, [r2, #4]
 800fe1a:	e7ca      	b.n	800fdb2 <_free_r+0x22>
 800fe1c:	bd38      	pop	{r3, r4, r5, pc}
 800fe1e:	bf00      	nop
 800fe20:	20005af8 	.word	0x20005af8

0800fe24 <__ssputs_r>:
 800fe24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe28:	688e      	ldr	r6, [r1, #8]
 800fe2a:	461f      	mov	r7, r3
 800fe2c:	42be      	cmp	r6, r7
 800fe2e:	680b      	ldr	r3, [r1, #0]
 800fe30:	4682      	mov	sl, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	4690      	mov	r8, r2
 800fe36:	d82d      	bhi.n	800fe94 <__ssputs_r+0x70>
 800fe38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe40:	d026      	beq.n	800fe90 <__ssputs_r+0x6c>
 800fe42:	6965      	ldr	r5, [r4, #20]
 800fe44:	6909      	ldr	r1, [r1, #16]
 800fe46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe4a:	eba3 0901 	sub.w	r9, r3, r1
 800fe4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe52:	1c7b      	adds	r3, r7, #1
 800fe54:	444b      	add	r3, r9
 800fe56:	106d      	asrs	r5, r5, #1
 800fe58:	429d      	cmp	r5, r3
 800fe5a:	bf38      	it	cc
 800fe5c:	461d      	movcc	r5, r3
 800fe5e:	0553      	lsls	r3, r2, #21
 800fe60:	d527      	bpl.n	800feb2 <__ssputs_r+0x8e>
 800fe62:	4629      	mov	r1, r5
 800fe64:	f000 f960 	bl	8010128 <_malloc_r>
 800fe68:	4606      	mov	r6, r0
 800fe6a:	b360      	cbz	r0, 800fec6 <__ssputs_r+0xa2>
 800fe6c:	6921      	ldr	r1, [r4, #16]
 800fe6e:	464a      	mov	r2, r9
 800fe70:	f7ff f933 	bl	800f0da <memcpy>
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe7e:	81a3      	strh	r3, [r4, #12]
 800fe80:	6126      	str	r6, [r4, #16]
 800fe82:	6165      	str	r5, [r4, #20]
 800fe84:	444e      	add	r6, r9
 800fe86:	eba5 0509 	sub.w	r5, r5, r9
 800fe8a:	6026      	str	r6, [r4, #0]
 800fe8c:	60a5      	str	r5, [r4, #8]
 800fe8e:	463e      	mov	r6, r7
 800fe90:	42be      	cmp	r6, r7
 800fe92:	d900      	bls.n	800fe96 <__ssputs_r+0x72>
 800fe94:	463e      	mov	r6, r7
 800fe96:	6820      	ldr	r0, [r4, #0]
 800fe98:	4632      	mov	r2, r6
 800fe9a:	4641      	mov	r1, r8
 800fe9c:	f000 fe6f 	bl	8010b7e <memmove>
 800fea0:	68a3      	ldr	r3, [r4, #8]
 800fea2:	1b9b      	subs	r3, r3, r6
 800fea4:	60a3      	str	r3, [r4, #8]
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	4433      	add	r3, r6
 800feaa:	6023      	str	r3, [r4, #0]
 800feac:	2000      	movs	r0, #0
 800feae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feb2:	462a      	mov	r2, r5
 800feb4:	f000 fe35 	bl	8010b22 <_realloc_r>
 800feb8:	4606      	mov	r6, r0
 800feba:	2800      	cmp	r0, #0
 800febc:	d1e0      	bne.n	800fe80 <__ssputs_r+0x5c>
 800febe:	6921      	ldr	r1, [r4, #16]
 800fec0:	4650      	mov	r0, sl
 800fec2:	f7ff ff65 	bl	800fd90 <_free_r>
 800fec6:	230c      	movs	r3, #12
 800fec8:	f8ca 3000 	str.w	r3, [sl]
 800fecc:	89a3      	ldrh	r3, [r4, #12]
 800fece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fed8:	e7e9      	b.n	800feae <__ssputs_r+0x8a>
	...

0800fedc <_svfiprintf_r>:
 800fedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee0:	4698      	mov	r8, r3
 800fee2:	898b      	ldrh	r3, [r1, #12]
 800fee4:	061b      	lsls	r3, r3, #24
 800fee6:	b09d      	sub	sp, #116	@ 0x74
 800fee8:	4607      	mov	r7, r0
 800feea:	460d      	mov	r5, r1
 800feec:	4614      	mov	r4, r2
 800feee:	d510      	bpl.n	800ff12 <_svfiprintf_r+0x36>
 800fef0:	690b      	ldr	r3, [r1, #16]
 800fef2:	b973      	cbnz	r3, 800ff12 <_svfiprintf_r+0x36>
 800fef4:	2140      	movs	r1, #64	@ 0x40
 800fef6:	f000 f917 	bl	8010128 <_malloc_r>
 800fefa:	6028      	str	r0, [r5, #0]
 800fefc:	6128      	str	r0, [r5, #16]
 800fefe:	b930      	cbnz	r0, 800ff0e <_svfiprintf_r+0x32>
 800ff00:	230c      	movs	r3, #12
 800ff02:	603b      	str	r3, [r7, #0]
 800ff04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff08:	b01d      	add	sp, #116	@ 0x74
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0e:	2340      	movs	r3, #64	@ 0x40
 800ff10:	616b      	str	r3, [r5, #20]
 800ff12:	2300      	movs	r3, #0
 800ff14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff16:	2320      	movs	r3, #32
 800ff18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff20:	2330      	movs	r3, #48	@ 0x30
 800ff22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80100c0 <_svfiprintf_r+0x1e4>
 800ff26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff2a:	f04f 0901 	mov.w	r9, #1
 800ff2e:	4623      	mov	r3, r4
 800ff30:	469a      	mov	sl, r3
 800ff32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff36:	b10a      	cbz	r2, 800ff3c <_svfiprintf_r+0x60>
 800ff38:	2a25      	cmp	r2, #37	@ 0x25
 800ff3a:	d1f9      	bne.n	800ff30 <_svfiprintf_r+0x54>
 800ff3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ff40:	d00b      	beq.n	800ff5a <_svfiprintf_r+0x7e>
 800ff42:	465b      	mov	r3, fp
 800ff44:	4622      	mov	r2, r4
 800ff46:	4629      	mov	r1, r5
 800ff48:	4638      	mov	r0, r7
 800ff4a:	f7ff ff6b 	bl	800fe24 <__ssputs_r>
 800ff4e:	3001      	adds	r0, #1
 800ff50:	f000 80a7 	beq.w	80100a2 <_svfiprintf_r+0x1c6>
 800ff54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff56:	445a      	add	r2, fp
 800ff58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f000 809f 	beq.w	80100a2 <_svfiprintf_r+0x1c6>
 800ff64:	2300      	movs	r3, #0
 800ff66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff6e:	f10a 0a01 	add.w	sl, sl, #1
 800ff72:	9304      	str	r3, [sp, #16]
 800ff74:	9307      	str	r3, [sp, #28]
 800ff76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff7c:	4654      	mov	r4, sl
 800ff7e:	2205      	movs	r2, #5
 800ff80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff84:	484e      	ldr	r0, [pc, #312]	@ (80100c0 <_svfiprintf_r+0x1e4>)
 800ff86:	f7f0 f923 	bl	80001d0 <memchr>
 800ff8a:	9a04      	ldr	r2, [sp, #16]
 800ff8c:	b9d8      	cbnz	r0, 800ffc6 <_svfiprintf_r+0xea>
 800ff8e:	06d0      	lsls	r0, r2, #27
 800ff90:	bf44      	itt	mi
 800ff92:	2320      	movmi	r3, #32
 800ff94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff98:	0711      	lsls	r1, r2, #28
 800ff9a:	bf44      	itt	mi
 800ff9c:	232b      	movmi	r3, #43	@ 0x2b
 800ff9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffa2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffa8:	d015      	beq.n	800ffd6 <_svfiprintf_r+0xfa>
 800ffaa:	9a07      	ldr	r2, [sp, #28]
 800ffac:	4654      	mov	r4, sl
 800ffae:	2000      	movs	r0, #0
 800ffb0:	f04f 0c0a 	mov.w	ip, #10
 800ffb4:	4621      	mov	r1, r4
 800ffb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffba:	3b30      	subs	r3, #48	@ 0x30
 800ffbc:	2b09      	cmp	r3, #9
 800ffbe:	d94b      	bls.n	8010058 <_svfiprintf_r+0x17c>
 800ffc0:	b1b0      	cbz	r0, 800fff0 <_svfiprintf_r+0x114>
 800ffc2:	9207      	str	r2, [sp, #28]
 800ffc4:	e014      	b.n	800fff0 <_svfiprintf_r+0x114>
 800ffc6:	eba0 0308 	sub.w	r3, r0, r8
 800ffca:	fa09 f303 	lsl.w	r3, r9, r3
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	46a2      	mov	sl, r4
 800ffd4:	e7d2      	b.n	800ff7c <_svfiprintf_r+0xa0>
 800ffd6:	9b03      	ldr	r3, [sp, #12]
 800ffd8:	1d19      	adds	r1, r3, #4
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	9103      	str	r1, [sp, #12]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	bfbb      	ittet	lt
 800ffe2:	425b      	neglt	r3, r3
 800ffe4:	f042 0202 	orrlt.w	r2, r2, #2
 800ffe8:	9307      	strge	r3, [sp, #28]
 800ffea:	9307      	strlt	r3, [sp, #28]
 800ffec:	bfb8      	it	lt
 800ffee:	9204      	strlt	r2, [sp, #16]
 800fff0:	7823      	ldrb	r3, [r4, #0]
 800fff2:	2b2e      	cmp	r3, #46	@ 0x2e
 800fff4:	d10a      	bne.n	801000c <_svfiprintf_r+0x130>
 800fff6:	7863      	ldrb	r3, [r4, #1]
 800fff8:	2b2a      	cmp	r3, #42	@ 0x2a
 800fffa:	d132      	bne.n	8010062 <_svfiprintf_r+0x186>
 800fffc:	9b03      	ldr	r3, [sp, #12]
 800fffe:	1d1a      	adds	r2, r3, #4
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	9203      	str	r2, [sp, #12]
 8010004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010008:	3402      	adds	r4, #2
 801000a:	9305      	str	r3, [sp, #20]
 801000c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80100d0 <_svfiprintf_r+0x1f4>
 8010010:	7821      	ldrb	r1, [r4, #0]
 8010012:	2203      	movs	r2, #3
 8010014:	4650      	mov	r0, sl
 8010016:	f7f0 f8db 	bl	80001d0 <memchr>
 801001a:	b138      	cbz	r0, 801002c <_svfiprintf_r+0x150>
 801001c:	9b04      	ldr	r3, [sp, #16]
 801001e:	eba0 000a 	sub.w	r0, r0, sl
 8010022:	2240      	movs	r2, #64	@ 0x40
 8010024:	4082      	lsls	r2, r0
 8010026:	4313      	orrs	r3, r2
 8010028:	3401      	adds	r4, #1
 801002a:	9304      	str	r3, [sp, #16]
 801002c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010030:	4824      	ldr	r0, [pc, #144]	@ (80100c4 <_svfiprintf_r+0x1e8>)
 8010032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010036:	2206      	movs	r2, #6
 8010038:	f7f0 f8ca 	bl	80001d0 <memchr>
 801003c:	2800      	cmp	r0, #0
 801003e:	d036      	beq.n	80100ae <_svfiprintf_r+0x1d2>
 8010040:	4b21      	ldr	r3, [pc, #132]	@ (80100c8 <_svfiprintf_r+0x1ec>)
 8010042:	bb1b      	cbnz	r3, 801008c <_svfiprintf_r+0x1b0>
 8010044:	9b03      	ldr	r3, [sp, #12]
 8010046:	3307      	adds	r3, #7
 8010048:	f023 0307 	bic.w	r3, r3, #7
 801004c:	3308      	adds	r3, #8
 801004e:	9303      	str	r3, [sp, #12]
 8010050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010052:	4433      	add	r3, r6
 8010054:	9309      	str	r3, [sp, #36]	@ 0x24
 8010056:	e76a      	b.n	800ff2e <_svfiprintf_r+0x52>
 8010058:	fb0c 3202 	mla	r2, ip, r2, r3
 801005c:	460c      	mov	r4, r1
 801005e:	2001      	movs	r0, #1
 8010060:	e7a8      	b.n	800ffb4 <_svfiprintf_r+0xd8>
 8010062:	2300      	movs	r3, #0
 8010064:	3401      	adds	r4, #1
 8010066:	9305      	str	r3, [sp, #20]
 8010068:	4619      	mov	r1, r3
 801006a:	f04f 0c0a 	mov.w	ip, #10
 801006e:	4620      	mov	r0, r4
 8010070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010074:	3a30      	subs	r2, #48	@ 0x30
 8010076:	2a09      	cmp	r2, #9
 8010078:	d903      	bls.n	8010082 <_svfiprintf_r+0x1a6>
 801007a:	2b00      	cmp	r3, #0
 801007c:	d0c6      	beq.n	801000c <_svfiprintf_r+0x130>
 801007e:	9105      	str	r1, [sp, #20]
 8010080:	e7c4      	b.n	801000c <_svfiprintf_r+0x130>
 8010082:	fb0c 2101 	mla	r1, ip, r1, r2
 8010086:	4604      	mov	r4, r0
 8010088:	2301      	movs	r3, #1
 801008a:	e7f0      	b.n	801006e <_svfiprintf_r+0x192>
 801008c:	ab03      	add	r3, sp, #12
 801008e:	9300      	str	r3, [sp, #0]
 8010090:	462a      	mov	r2, r5
 8010092:	4b0e      	ldr	r3, [pc, #56]	@ (80100cc <_svfiprintf_r+0x1f0>)
 8010094:	a904      	add	r1, sp, #16
 8010096:	4638      	mov	r0, r7
 8010098:	f7fe faf6 	bl	800e688 <_printf_float>
 801009c:	1c42      	adds	r2, r0, #1
 801009e:	4606      	mov	r6, r0
 80100a0:	d1d6      	bne.n	8010050 <_svfiprintf_r+0x174>
 80100a2:	89ab      	ldrh	r3, [r5, #12]
 80100a4:	065b      	lsls	r3, r3, #25
 80100a6:	f53f af2d 	bmi.w	800ff04 <_svfiprintf_r+0x28>
 80100aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100ac:	e72c      	b.n	800ff08 <_svfiprintf_r+0x2c>
 80100ae:	ab03      	add	r3, sp, #12
 80100b0:	9300      	str	r3, [sp, #0]
 80100b2:	462a      	mov	r2, r5
 80100b4:	4b05      	ldr	r3, [pc, #20]	@ (80100cc <_svfiprintf_r+0x1f0>)
 80100b6:	a904      	add	r1, sp, #16
 80100b8:	4638      	mov	r0, r7
 80100ba:	f7fe fd7d 	bl	800ebb8 <_printf_i>
 80100be:	e7ed      	b.n	801009c <_svfiprintf_r+0x1c0>
 80100c0:	080115dd 	.word	0x080115dd
 80100c4:	080115e7 	.word	0x080115e7
 80100c8:	0800e689 	.word	0x0800e689
 80100cc:	0800fe25 	.word	0x0800fe25
 80100d0:	080115e3 	.word	0x080115e3

080100d4 <malloc>:
 80100d4:	4b02      	ldr	r3, [pc, #8]	@ (80100e0 <malloc+0xc>)
 80100d6:	4601      	mov	r1, r0
 80100d8:	6818      	ldr	r0, [r3, #0]
 80100da:	f000 b825 	b.w	8010128 <_malloc_r>
 80100de:	bf00      	nop
 80100e0:	20000124 	.word	0x20000124

080100e4 <sbrk_aligned>:
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	4e0f      	ldr	r6, [pc, #60]	@ (8010124 <sbrk_aligned+0x40>)
 80100e8:	460c      	mov	r4, r1
 80100ea:	6831      	ldr	r1, [r6, #0]
 80100ec:	4605      	mov	r5, r0
 80100ee:	b911      	cbnz	r1, 80100f6 <sbrk_aligned+0x12>
 80100f0:	f000 fd94 	bl	8010c1c <_sbrk_r>
 80100f4:	6030      	str	r0, [r6, #0]
 80100f6:	4621      	mov	r1, r4
 80100f8:	4628      	mov	r0, r5
 80100fa:	f000 fd8f 	bl	8010c1c <_sbrk_r>
 80100fe:	1c43      	adds	r3, r0, #1
 8010100:	d103      	bne.n	801010a <sbrk_aligned+0x26>
 8010102:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010106:	4620      	mov	r0, r4
 8010108:	bd70      	pop	{r4, r5, r6, pc}
 801010a:	1cc4      	adds	r4, r0, #3
 801010c:	f024 0403 	bic.w	r4, r4, #3
 8010110:	42a0      	cmp	r0, r4
 8010112:	d0f8      	beq.n	8010106 <sbrk_aligned+0x22>
 8010114:	1a21      	subs	r1, r4, r0
 8010116:	4628      	mov	r0, r5
 8010118:	f000 fd80 	bl	8010c1c <_sbrk_r>
 801011c:	3001      	adds	r0, #1
 801011e:	d1f2      	bne.n	8010106 <sbrk_aligned+0x22>
 8010120:	e7ef      	b.n	8010102 <sbrk_aligned+0x1e>
 8010122:	bf00      	nop
 8010124:	20005af4 	.word	0x20005af4

08010128 <_malloc_r>:
 8010128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801012c:	1ccd      	adds	r5, r1, #3
 801012e:	f025 0503 	bic.w	r5, r5, #3
 8010132:	3508      	adds	r5, #8
 8010134:	2d0c      	cmp	r5, #12
 8010136:	bf38      	it	cc
 8010138:	250c      	movcc	r5, #12
 801013a:	2d00      	cmp	r5, #0
 801013c:	4606      	mov	r6, r0
 801013e:	db01      	blt.n	8010144 <_malloc_r+0x1c>
 8010140:	42a9      	cmp	r1, r5
 8010142:	d904      	bls.n	801014e <_malloc_r+0x26>
 8010144:	230c      	movs	r3, #12
 8010146:	6033      	str	r3, [r6, #0]
 8010148:	2000      	movs	r0, #0
 801014a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801014e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010224 <_malloc_r+0xfc>
 8010152:	f000 f915 	bl	8010380 <__malloc_lock>
 8010156:	f8d8 3000 	ldr.w	r3, [r8]
 801015a:	461c      	mov	r4, r3
 801015c:	bb44      	cbnz	r4, 80101b0 <_malloc_r+0x88>
 801015e:	4629      	mov	r1, r5
 8010160:	4630      	mov	r0, r6
 8010162:	f7ff ffbf 	bl	80100e4 <sbrk_aligned>
 8010166:	1c43      	adds	r3, r0, #1
 8010168:	4604      	mov	r4, r0
 801016a:	d158      	bne.n	801021e <_malloc_r+0xf6>
 801016c:	f8d8 4000 	ldr.w	r4, [r8]
 8010170:	4627      	mov	r7, r4
 8010172:	2f00      	cmp	r7, #0
 8010174:	d143      	bne.n	80101fe <_malloc_r+0xd6>
 8010176:	2c00      	cmp	r4, #0
 8010178:	d04b      	beq.n	8010212 <_malloc_r+0xea>
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	4639      	mov	r1, r7
 801017e:	4630      	mov	r0, r6
 8010180:	eb04 0903 	add.w	r9, r4, r3
 8010184:	f000 fd4a 	bl	8010c1c <_sbrk_r>
 8010188:	4581      	cmp	r9, r0
 801018a:	d142      	bne.n	8010212 <_malloc_r+0xea>
 801018c:	6821      	ldr	r1, [r4, #0]
 801018e:	1a6d      	subs	r5, r5, r1
 8010190:	4629      	mov	r1, r5
 8010192:	4630      	mov	r0, r6
 8010194:	f7ff ffa6 	bl	80100e4 <sbrk_aligned>
 8010198:	3001      	adds	r0, #1
 801019a:	d03a      	beq.n	8010212 <_malloc_r+0xea>
 801019c:	6823      	ldr	r3, [r4, #0]
 801019e:	442b      	add	r3, r5
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	f8d8 3000 	ldr.w	r3, [r8]
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	bb62      	cbnz	r2, 8010204 <_malloc_r+0xdc>
 80101aa:	f8c8 7000 	str.w	r7, [r8]
 80101ae:	e00f      	b.n	80101d0 <_malloc_r+0xa8>
 80101b0:	6822      	ldr	r2, [r4, #0]
 80101b2:	1b52      	subs	r2, r2, r5
 80101b4:	d420      	bmi.n	80101f8 <_malloc_r+0xd0>
 80101b6:	2a0b      	cmp	r2, #11
 80101b8:	d917      	bls.n	80101ea <_malloc_r+0xc2>
 80101ba:	1961      	adds	r1, r4, r5
 80101bc:	42a3      	cmp	r3, r4
 80101be:	6025      	str	r5, [r4, #0]
 80101c0:	bf18      	it	ne
 80101c2:	6059      	strne	r1, [r3, #4]
 80101c4:	6863      	ldr	r3, [r4, #4]
 80101c6:	bf08      	it	eq
 80101c8:	f8c8 1000 	streq.w	r1, [r8]
 80101cc:	5162      	str	r2, [r4, r5]
 80101ce:	604b      	str	r3, [r1, #4]
 80101d0:	4630      	mov	r0, r6
 80101d2:	f000 f8db 	bl	801038c <__malloc_unlock>
 80101d6:	f104 000b 	add.w	r0, r4, #11
 80101da:	1d23      	adds	r3, r4, #4
 80101dc:	f020 0007 	bic.w	r0, r0, #7
 80101e0:	1ac2      	subs	r2, r0, r3
 80101e2:	bf1c      	itt	ne
 80101e4:	1a1b      	subne	r3, r3, r0
 80101e6:	50a3      	strne	r3, [r4, r2]
 80101e8:	e7af      	b.n	801014a <_malloc_r+0x22>
 80101ea:	6862      	ldr	r2, [r4, #4]
 80101ec:	42a3      	cmp	r3, r4
 80101ee:	bf0c      	ite	eq
 80101f0:	f8c8 2000 	streq.w	r2, [r8]
 80101f4:	605a      	strne	r2, [r3, #4]
 80101f6:	e7eb      	b.n	80101d0 <_malloc_r+0xa8>
 80101f8:	4623      	mov	r3, r4
 80101fa:	6864      	ldr	r4, [r4, #4]
 80101fc:	e7ae      	b.n	801015c <_malloc_r+0x34>
 80101fe:	463c      	mov	r4, r7
 8010200:	687f      	ldr	r7, [r7, #4]
 8010202:	e7b6      	b.n	8010172 <_malloc_r+0x4a>
 8010204:	461a      	mov	r2, r3
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	42a3      	cmp	r3, r4
 801020a:	d1fb      	bne.n	8010204 <_malloc_r+0xdc>
 801020c:	2300      	movs	r3, #0
 801020e:	6053      	str	r3, [r2, #4]
 8010210:	e7de      	b.n	80101d0 <_malloc_r+0xa8>
 8010212:	230c      	movs	r3, #12
 8010214:	6033      	str	r3, [r6, #0]
 8010216:	4630      	mov	r0, r6
 8010218:	f000 f8b8 	bl	801038c <__malloc_unlock>
 801021c:	e794      	b.n	8010148 <_malloc_r+0x20>
 801021e:	6005      	str	r5, [r0, #0]
 8010220:	e7d6      	b.n	80101d0 <_malloc_r+0xa8>
 8010222:	bf00      	nop
 8010224:	20005af8 	.word	0x20005af8

08010228 <__sflush_r>:
 8010228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801022c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010230:	0716      	lsls	r6, r2, #28
 8010232:	4605      	mov	r5, r0
 8010234:	460c      	mov	r4, r1
 8010236:	d454      	bmi.n	80102e2 <__sflush_r+0xba>
 8010238:	684b      	ldr	r3, [r1, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	dc02      	bgt.n	8010244 <__sflush_r+0x1c>
 801023e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010240:	2b00      	cmp	r3, #0
 8010242:	dd48      	ble.n	80102d6 <__sflush_r+0xae>
 8010244:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010246:	2e00      	cmp	r6, #0
 8010248:	d045      	beq.n	80102d6 <__sflush_r+0xae>
 801024a:	2300      	movs	r3, #0
 801024c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010250:	682f      	ldr	r7, [r5, #0]
 8010252:	6a21      	ldr	r1, [r4, #32]
 8010254:	602b      	str	r3, [r5, #0]
 8010256:	d030      	beq.n	80102ba <__sflush_r+0x92>
 8010258:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801025a:	89a3      	ldrh	r3, [r4, #12]
 801025c:	0759      	lsls	r1, r3, #29
 801025e:	d505      	bpl.n	801026c <__sflush_r+0x44>
 8010260:	6863      	ldr	r3, [r4, #4]
 8010262:	1ad2      	subs	r2, r2, r3
 8010264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010266:	b10b      	cbz	r3, 801026c <__sflush_r+0x44>
 8010268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801026a:	1ad2      	subs	r2, r2, r3
 801026c:	2300      	movs	r3, #0
 801026e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010270:	6a21      	ldr	r1, [r4, #32]
 8010272:	4628      	mov	r0, r5
 8010274:	47b0      	blx	r6
 8010276:	1c43      	adds	r3, r0, #1
 8010278:	89a3      	ldrh	r3, [r4, #12]
 801027a:	d106      	bne.n	801028a <__sflush_r+0x62>
 801027c:	6829      	ldr	r1, [r5, #0]
 801027e:	291d      	cmp	r1, #29
 8010280:	d82b      	bhi.n	80102da <__sflush_r+0xb2>
 8010282:	4a2a      	ldr	r2, [pc, #168]	@ (801032c <__sflush_r+0x104>)
 8010284:	410a      	asrs	r2, r1
 8010286:	07d6      	lsls	r6, r2, #31
 8010288:	d427      	bmi.n	80102da <__sflush_r+0xb2>
 801028a:	2200      	movs	r2, #0
 801028c:	6062      	str	r2, [r4, #4]
 801028e:	04d9      	lsls	r1, r3, #19
 8010290:	6922      	ldr	r2, [r4, #16]
 8010292:	6022      	str	r2, [r4, #0]
 8010294:	d504      	bpl.n	80102a0 <__sflush_r+0x78>
 8010296:	1c42      	adds	r2, r0, #1
 8010298:	d101      	bne.n	801029e <__sflush_r+0x76>
 801029a:	682b      	ldr	r3, [r5, #0]
 801029c:	b903      	cbnz	r3, 80102a0 <__sflush_r+0x78>
 801029e:	6560      	str	r0, [r4, #84]	@ 0x54
 80102a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102a2:	602f      	str	r7, [r5, #0]
 80102a4:	b1b9      	cbz	r1, 80102d6 <__sflush_r+0xae>
 80102a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80102aa:	4299      	cmp	r1, r3
 80102ac:	d002      	beq.n	80102b4 <__sflush_r+0x8c>
 80102ae:	4628      	mov	r0, r5
 80102b0:	f7ff fd6e 	bl	800fd90 <_free_r>
 80102b4:	2300      	movs	r3, #0
 80102b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80102b8:	e00d      	b.n	80102d6 <__sflush_r+0xae>
 80102ba:	2301      	movs	r3, #1
 80102bc:	4628      	mov	r0, r5
 80102be:	47b0      	blx	r6
 80102c0:	4602      	mov	r2, r0
 80102c2:	1c50      	adds	r0, r2, #1
 80102c4:	d1c9      	bne.n	801025a <__sflush_r+0x32>
 80102c6:	682b      	ldr	r3, [r5, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d0c6      	beq.n	801025a <__sflush_r+0x32>
 80102cc:	2b1d      	cmp	r3, #29
 80102ce:	d001      	beq.n	80102d4 <__sflush_r+0xac>
 80102d0:	2b16      	cmp	r3, #22
 80102d2:	d11e      	bne.n	8010312 <__sflush_r+0xea>
 80102d4:	602f      	str	r7, [r5, #0]
 80102d6:	2000      	movs	r0, #0
 80102d8:	e022      	b.n	8010320 <__sflush_r+0xf8>
 80102da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102de:	b21b      	sxth	r3, r3
 80102e0:	e01b      	b.n	801031a <__sflush_r+0xf2>
 80102e2:	690f      	ldr	r7, [r1, #16]
 80102e4:	2f00      	cmp	r7, #0
 80102e6:	d0f6      	beq.n	80102d6 <__sflush_r+0xae>
 80102e8:	0793      	lsls	r3, r2, #30
 80102ea:	680e      	ldr	r6, [r1, #0]
 80102ec:	bf08      	it	eq
 80102ee:	694b      	ldreq	r3, [r1, #20]
 80102f0:	600f      	str	r7, [r1, #0]
 80102f2:	bf18      	it	ne
 80102f4:	2300      	movne	r3, #0
 80102f6:	eba6 0807 	sub.w	r8, r6, r7
 80102fa:	608b      	str	r3, [r1, #8]
 80102fc:	f1b8 0f00 	cmp.w	r8, #0
 8010300:	dde9      	ble.n	80102d6 <__sflush_r+0xae>
 8010302:	6a21      	ldr	r1, [r4, #32]
 8010304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010306:	4643      	mov	r3, r8
 8010308:	463a      	mov	r2, r7
 801030a:	4628      	mov	r0, r5
 801030c:	47b0      	blx	r6
 801030e:	2800      	cmp	r0, #0
 8010310:	dc08      	bgt.n	8010324 <__sflush_r+0xfc>
 8010312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801031a:	81a3      	strh	r3, [r4, #12]
 801031c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010324:	4407      	add	r7, r0
 8010326:	eba8 0800 	sub.w	r8, r8, r0
 801032a:	e7e7      	b.n	80102fc <__sflush_r+0xd4>
 801032c:	dfbffffe 	.word	0xdfbffffe

08010330 <_fflush_r>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	690b      	ldr	r3, [r1, #16]
 8010334:	4605      	mov	r5, r0
 8010336:	460c      	mov	r4, r1
 8010338:	b913      	cbnz	r3, 8010340 <_fflush_r+0x10>
 801033a:	2500      	movs	r5, #0
 801033c:	4628      	mov	r0, r5
 801033e:	bd38      	pop	{r3, r4, r5, pc}
 8010340:	b118      	cbz	r0, 801034a <_fflush_r+0x1a>
 8010342:	6a03      	ldr	r3, [r0, #32]
 8010344:	b90b      	cbnz	r3, 801034a <_fflush_r+0x1a>
 8010346:	f7fe fde3 	bl	800ef10 <__sinit>
 801034a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d0f3      	beq.n	801033a <_fflush_r+0xa>
 8010352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010354:	07d0      	lsls	r0, r2, #31
 8010356:	d404      	bmi.n	8010362 <_fflush_r+0x32>
 8010358:	0599      	lsls	r1, r3, #22
 801035a:	d402      	bmi.n	8010362 <_fflush_r+0x32>
 801035c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801035e:	f7fe feba 	bl	800f0d6 <__retarget_lock_acquire_recursive>
 8010362:	4628      	mov	r0, r5
 8010364:	4621      	mov	r1, r4
 8010366:	f7ff ff5f 	bl	8010228 <__sflush_r>
 801036a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801036c:	07da      	lsls	r2, r3, #31
 801036e:	4605      	mov	r5, r0
 8010370:	d4e4      	bmi.n	801033c <_fflush_r+0xc>
 8010372:	89a3      	ldrh	r3, [r4, #12]
 8010374:	059b      	lsls	r3, r3, #22
 8010376:	d4e1      	bmi.n	801033c <_fflush_r+0xc>
 8010378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801037a:	f7fe fead 	bl	800f0d8 <__retarget_lock_release_recursive>
 801037e:	e7dd      	b.n	801033c <_fflush_r+0xc>

08010380 <__malloc_lock>:
 8010380:	4801      	ldr	r0, [pc, #4]	@ (8010388 <__malloc_lock+0x8>)
 8010382:	f7fe bea8 	b.w	800f0d6 <__retarget_lock_acquire_recursive>
 8010386:	bf00      	nop
 8010388:	20005af0 	.word	0x20005af0

0801038c <__malloc_unlock>:
 801038c:	4801      	ldr	r0, [pc, #4]	@ (8010394 <__malloc_unlock+0x8>)
 801038e:	f7fe bea3 	b.w	800f0d8 <__retarget_lock_release_recursive>
 8010392:	bf00      	nop
 8010394:	20005af0 	.word	0x20005af0

08010398 <_Balloc>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	69c6      	ldr	r6, [r0, #28]
 801039c:	4604      	mov	r4, r0
 801039e:	460d      	mov	r5, r1
 80103a0:	b976      	cbnz	r6, 80103c0 <_Balloc+0x28>
 80103a2:	2010      	movs	r0, #16
 80103a4:	f7ff fe96 	bl	80100d4 <malloc>
 80103a8:	4602      	mov	r2, r0
 80103aa:	61e0      	str	r0, [r4, #28]
 80103ac:	b920      	cbnz	r0, 80103b8 <_Balloc+0x20>
 80103ae:	4b18      	ldr	r3, [pc, #96]	@ (8010410 <_Balloc+0x78>)
 80103b0:	4818      	ldr	r0, [pc, #96]	@ (8010414 <_Balloc+0x7c>)
 80103b2:	216b      	movs	r1, #107	@ 0x6b
 80103b4:	f000 fc54 	bl	8010c60 <__assert_func>
 80103b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103bc:	6006      	str	r6, [r0, #0]
 80103be:	60c6      	str	r6, [r0, #12]
 80103c0:	69e6      	ldr	r6, [r4, #28]
 80103c2:	68f3      	ldr	r3, [r6, #12]
 80103c4:	b183      	cbz	r3, 80103e8 <_Balloc+0x50>
 80103c6:	69e3      	ldr	r3, [r4, #28]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103ce:	b9b8      	cbnz	r0, 8010400 <_Balloc+0x68>
 80103d0:	2101      	movs	r1, #1
 80103d2:	fa01 f605 	lsl.w	r6, r1, r5
 80103d6:	1d72      	adds	r2, r6, #5
 80103d8:	0092      	lsls	r2, r2, #2
 80103da:	4620      	mov	r0, r4
 80103dc:	f000 fc5e 	bl	8010c9c <_calloc_r>
 80103e0:	b160      	cbz	r0, 80103fc <_Balloc+0x64>
 80103e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80103e6:	e00e      	b.n	8010406 <_Balloc+0x6e>
 80103e8:	2221      	movs	r2, #33	@ 0x21
 80103ea:	2104      	movs	r1, #4
 80103ec:	4620      	mov	r0, r4
 80103ee:	f000 fc55 	bl	8010c9c <_calloc_r>
 80103f2:	69e3      	ldr	r3, [r4, #28]
 80103f4:	60f0      	str	r0, [r6, #12]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1e4      	bne.n	80103c6 <_Balloc+0x2e>
 80103fc:	2000      	movs	r0, #0
 80103fe:	bd70      	pop	{r4, r5, r6, pc}
 8010400:	6802      	ldr	r2, [r0, #0]
 8010402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010406:	2300      	movs	r3, #0
 8010408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801040c:	e7f7      	b.n	80103fe <_Balloc+0x66>
 801040e:	bf00      	nop
 8010410:	0801155d 	.word	0x0801155d
 8010414:	080115ee 	.word	0x080115ee

08010418 <_Bfree>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	69c6      	ldr	r6, [r0, #28]
 801041c:	4605      	mov	r5, r0
 801041e:	460c      	mov	r4, r1
 8010420:	b976      	cbnz	r6, 8010440 <_Bfree+0x28>
 8010422:	2010      	movs	r0, #16
 8010424:	f7ff fe56 	bl	80100d4 <malloc>
 8010428:	4602      	mov	r2, r0
 801042a:	61e8      	str	r0, [r5, #28]
 801042c:	b920      	cbnz	r0, 8010438 <_Bfree+0x20>
 801042e:	4b09      	ldr	r3, [pc, #36]	@ (8010454 <_Bfree+0x3c>)
 8010430:	4809      	ldr	r0, [pc, #36]	@ (8010458 <_Bfree+0x40>)
 8010432:	218f      	movs	r1, #143	@ 0x8f
 8010434:	f000 fc14 	bl	8010c60 <__assert_func>
 8010438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801043c:	6006      	str	r6, [r0, #0]
 801043e:	60c6      	str	r6, [r0, #12]
 8010440:	b13c      	cbz	r4, 8010452 <_Bfree+0x3a>
 8010442:	69eb      	ldr	r3, [r5, #28]
 8010444:	6862      	ldr	r2, [r4, #4]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801044c:	6021      	str	r1, [r4, #0]
 801044e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010452:	bd70      	pop	{r4, r5, r6, pc}
 8010454:	0801155d 	.word	0x0801155d
 8010458:	080115ee 	.word	0x080115ee

0801045c <__multadd>:
 801045c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010460:	690d      	ldr	r5, [r1, #16]
 8010462:	4607      	mov	r7, r0
 8010464:	460c      	mov	r4, r1
 8010466:	461e      	mov	r6, r3
 8010468:	f101 0c14 	add.w	ip, r1, #20
 801046c:	2000      	movs	r0, #0
 801046e:	f8dc 3000 	ldr.w	r3, [ip]
 8010472:	b299      	uxth	r1, r3
 8010474:	fb02 6101 	mla	r1, r2, r1, r6
 8010478:	0c1e      	lsrs	r6, r3, #16
 801047a:	0c0b      	lsrs	r3, r1, #16
 801047c:	fb02 3306 	mla	r3, r2, r6, r3
 8010480:	b289      	uxth	r1, r1
 8010482:	3001      	adds	r0, #1
 8010484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010488:	4285      	cmp	r5, r0
 801048a:	f84c 1b04 	str.w	r1, [ip], #4
 801048e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010492:	dcec      	bgt.n	801046e <__multadd+0x12>
 8010494:	b30e      	cbz	r6, 80104da <__multadd+0x7e>
 8010496:	68a3      	ldr	r3, [r4, #8]
 8010498:	42ab      	cmp	r3, r5
 801049a:	dc19      	bgt.n	80104d0 <__multadd+0x74>
 801049c:	6861      	ldr	r1, [r4, #4]
 801049e:	4638      	mov	r0, r7
 80104a0:	3101      	adds	r1, #1
 80104a2:	f7ff ff79 	bl	8010398 <_Balloc>
 80104a6:	4680      	mov	r8, r0
 80104a8:	b928      	cbnz	r0, 80104b6 <__multadd+0x5a>
 80104aa:	4602      	mov	r2, r0
 80104ac:	4b0c      	ldr	r3, [pc, #48]	@ (80104e0 <__multadd+0x84>)
 80104ae:	480d      	ldr	r0, [pc, #52]	@ (80104e4 <__multadd+0x88>)
 80104b0:	21ba      	movs	r1, #186	@ 0xba
 80104b2:	f000 fbd5 	bl	8010c60 <__assert_func>
 80104b6:	6922      	ldr	r2, [r4, #16]
 80104b8:	3202      	adds	r2, #2
 80104ba:	f104 010c 	add.w	r1, r4, #12
 80104be:	0092      	lsls	r2, r2, #2
 80104c0:	300c      	adds	r0, #12
 80104c2:	f7fe fe0a 	bl	800f0da <memcpy>
 80104c6:	4621      	mov	r1, r4
 80104c8:	4638      	mov	r0, r7
 80104ca:	f7ff ffa5 	bl	8010418 <_Bfree>
 80104ce:	4644      	mov	r4, r8
 80104d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104d4:	3501      	adds	r5, #1
 80104d6:	615e      	str	r6, [r3, #20]
 80104d8:	6125      	str	r5, [r4, #16]
 80104da:	4620      	mov	r0, r4
 80104dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e0:	080115cc 	.word	0x080115cc
 80104e4:	080115ee 	.word	0x080115ee

080104e8 <__hi0bits>:
 80104e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80104ec:	4603      	mov	r3, r0
 80104ee:	bf36      	itet	cc
 80104f0:	0403      	lslcc	r3, r0, #16
 80104f2:	2000      	movcs	r0, #0
 80104f4:	2010      	movcc	r0, #16
 80104f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80104fa:	bf3c      	itt	cc
 80104fc:	021b      	lslcc	r3, r3, #8
 80104fe:	3008      	addcc	r0, #8
 8010500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010504:	bf3c      	itt	cc
 8010506:	011b      	lslcc	r3, r3, #4
 8010508:	3004      	addcc	r0, #4
 801050a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801050e:	bf3c      	itt	cc
 8010510:	009b      	lslcc	r3, r3, #2
 8010512:	3002      	addcc	r0, #2
 8010514:	2b00      	cmp	r3, #0
 8010516:	db05      	blt.n	8010524 <__hi0bits+0x3c>
 8010518:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801051c:	f100 0001 	add.w	r0, r0, #1
 8010520:	bf08      	it	eq
 8010522:	2020      	moveq	r0, #32
 8010524:	4770      	bx	lr

08010526 <__lo0bits>:
 8010526:	6803      	ldr	r3, [r0, #0]
 8010528:	4602      	mov	r2, r0
 801052a:	f013 0007 	ands.w	r0, r3, #7
 801052e:	d00b      	beq.n	8010548 <__lo0bits+0x22>
 8010530:	07d9      	lsls	r1, r3, #31
 8010532:	d421      	bmi.n	8010578 <__lo0bits+0x52>
 8010534:	0798      	lsls	r0, r3, #30
 8010536:	bf49      	itett	mi
 8010538:	085b      	lsrmi	r3, r3, #1
 801053a:	089b      	lsrpl	r3, r3, #2
 801053c:	2001      	movmi	r0, #1
 801053e:	6013      	strmi	r3, [r2, #0]
 8010540:	bf5c      	itt	pl
 8010542:	6013      	strpl	r3, [r2, #0]
 8010544:	2002      	movpl	r0, #2
 8010546:	4770      	bx	lr
 8010548:	b299      	uxth	r1, r3
 801054a:	b909      	cbnz	r1, 8010550 <__lo0bits+0x2a>
 801054c:	0c1b      	lsrs	r3, r3, #16
 801054e:	2010      	movs	r0, #16
 8010550:	b2d9      	uxtb	r1, r3
 8010552:	b909      	cbnz	r1, 8010558 <__lo0bits+0x32>
 8010554:	3008      	adds	r0, #8
 8010556:	0a1b      	lsrs	r3, r3, #8
 8010558:	0719      	lsls	r1, r3, #28
 801055a:	bf04      	itt	eq
 801055c:	091b      	lsreq	r3, r3, #4
 801055e:	3004      	addeq	r0, #4
 8010560:	0799      	lsls	r1, r3, #30
 8010562:	bf04      	itt	eq
 8010564:	089b      	lsreq	r3, r3, #2
 8010566:	3002      	addeq	r0, #2
 8010568:	07d9      	lsls	r1, r3, #31
 801056a:	d403      	bmi.n	8010574 <__lo0bits+0x4e>
 801056c:	085b      	lsrs	r3, r3, #1
 801056e:	f100 0001 	add.w	r0, r0, #1
 8010572:	d003      	beq.n	801057c <__lo0bits+0x56>
 8010574:	6013      	str	r3, [r2, #0]
 8010576:	4770      	bx	lr
 8010578:	2000      	movs	r0, #0
 801057a:	4770      	bx	lr
 801057c:	2020      	movs	r0, #32
 801057e:	4770      	bx	lr

08010580 <__i2b>:
 8010580:	b510      	push	{r4, lr}
 8010582:	460c      	mov	r4, r1
 8010584:	2101      	movs	r1, #1
 8010586:	f7ff ff07 	bl	8010398 <_Balloc>
 801058a:	4602      	mov	r2, r0
 801058c:	b928      	cbnz	r0, 801059a <__i2b+0x1a>
 801058e:	4b05      	ldr	r3, [pc, #20]	@ (80105a4 <__i2b+0x24>)
 8010590:	4805      	ldr	r0, [pc, #20]	@ (80105a8 <__i2b+0x28>)
 8010592:	f240 1145 	movw	r1, #325	@ 0x145
 8010596:	f000 fb63 	bl	8010c60 <__assert_func>
 801059a:	2301      	movs	r3, #1
 801059c:	6144      	str	r4, [r0, #20]
 801059e:	6103      	str	r3, [r0, #16]
 80105a0:	bd10      	pop	{r4, pc}
 80105a2:	bf00      	nop
 80105a4:	080115cc 	.word	0x080115cc
 80105a8:	080115ee 	.word	0x080115ee

080105ac <__multiply>:
 80105ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b0:	4614      	mov	r4, r2
 80105b2:	690a      	ldr	r2, [r1, #16]
 80105b4:	6923      	ldr	r3, [r4, #16]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	bfa8      	it	ge
 80105ba:	4623      	movge	r3, r4
 80105bc:	460f      	mov	r7, r1
 80105be:	bfa4      	itt	ge
 80105c0:	460c      	movge	r4, r1
 80105c2:	461f      	movge	r7, r3
 80105c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80105c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80105cc:	68a3      	ldr	r3, [r4, #8]
 80105ce:	6861      	ldr	r1, [r4, #4]
 80105d0:	eb0a 0609 	add.w	r6, sl, r9
 80105d4:	42b3      	cmp	r3, r6
 80105d6:	b085      	sub	sp, #20
 80105d8:	bfb8      	it	lt
 80105da:	3101      	addlt	r1, #1
 80105dc:	f7ff fedc 	bl	8010398 <_Balloc>
 80105e0:	b930      	cbnz	r0, 80105f0 <__multiply+0x44>
 80105e2:	4602      	mov	r2, r0
 80105e4:	4b44      	ldr	r3, [pc, #272]	@ (80106f8 <__multiply+0x14c>)
 80105e6:	4845      	ldr	r0, [pc, #276]	@ (80106fc <__multiply+0x150>)
 80105e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80105ec:	f000 fb38 	bl	8010c60 <__assert_func>
 80105f0:	f100 0514 	add.w	r5, r0, #20
 80105f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80105f8:	462b      	mov	r3, r5
 80105fa:	2200      	movs	r2, #0
 80105fc:	4543      	cmp	r3, r8
 80105fe:	d321      	bcc.n	8010644 <__multiply+0x98>
 8010600:	f107 0114 	add.w	r1, r7, #20
 8010604:	f104 0214 	add.w	r2, r4, #20
 8010608:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801060c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010610:	9302      	str	r3, [sp, #8]
 8010612:	1b13      	subs	r3, r2, r4
 8010614:	3b15      	subs	r3, #21
 8010616:	f023 0303 	bic.w	r3, r3, #3
 801061a:	3304      	adds	r3, #4
 801061c:	f104 0715 	add.w	r7, r4, #21
 8010620:	42ba      	cmp	r2, r7
 8010622:	bf38      	it	cc
 8010624:	2304      	movcc	r3, #4
 8010626:	9301      	str	r3, [sp, #4]
 8010628:	9b02      	ldr	r3, [sp, #8]
 801062a:	9103      	str	r1, [sp, #12]
 801062c:	428b      	cmp	r3, r1
 801062e:	d80c      	bhi.n	801064a <__multiply+0x9e>
 8010630:	2e00      	cmp	r6, #0
 8010632:	dd03      	ble.n	801063c <__multiply+0x90>
 8010634:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010638:	2b00      	cmp	r3, #0
 801063a:	d05b      	beq.n	80106f4 <__multiply+0x148>
 801063c:	6106      	str	r6, [r0, #16]
 801063e:	b005      	add	sp, #20
 8010640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010644:	f843 2b04 	str.w	r2, [r3], #4
 8010648:	e7d8      	b.n	80105fc <__multiply+0x50>
 801064a:	f8b1 a000 	ldrh.w	sl, [r1]
 801064e:	f1ba 0f00 	cmp.w	sl, #0
 8010652:	d024      	beq.n	801069e <__multiply+0xf2>
 8010654:	f104 0e14 	add.w	lr, r4, #20
 8010658:	46a9      	mov	r9, r5
 801065a:	f04f 0c00 	mov.w	ip, #0
 801065e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010662:	f8d9 3000 	ldr.w	r3, [r9]
 8010666:	fa1f fb87 	uxth.w	fp, r7
 801066a:	b29b      	uxth	r3, r3
 801066c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010670:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010674:	f8d9 7000 	ldr.w	r7, [r9]
 8010678:	4463      	add	r3, ip
 801067a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801067e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010682:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010686:	b29b      	uxth	r3, r3
 8010688:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801068c:	4572      	cmp	r2, lr
 801068e:	f849 3b04 	str.w	r3, [r9], #4
 8010692:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010696:	d8e2      	bhi.n	801065e <__multiply+0xb2>
 8010698:	9b01      	ldr	r3, [sp, #4]
 801069a:	f845 c003 	str.w	ip, [r5, r3]
 801069e:	9b03      	ldr	r3, [sp, #12]
 80106a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80106a4:	3104      	adds	r1, #4
 80106a6:	f1b9 0f00 	cmp.w	r9, #0
 80106aa:	d021      	beq.n	80106f0 <__multiply+0x144>
 80106ac:	682b      	ldr	r3, [r5, #0]
 80106ae:	f104 0c14 	add.w	ip, r4, #20
 80106b2:	46ae      	mov	lr, r5
 80106b4:	f04f 0a00 	mov.w	sl, #0
 80106b8:	f8bc b000 	ldrh.w	fp, [ip]
 80106bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80106c0:	fb09 770b 	mla	r7, r9, fp, r7
 80106c4:	4457      	add	r7, sl
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80106cc:	f84e 3b04 	str.w	r3, [lr], #4
 80106d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80106d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80106d8:	f8be 3000 	ldrh.w	r3, [lr]
 80106dc:	fb09 330a 	mla	r3, r9, sl, r3
 80106e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80106e4:	4562      	cmp	r2, ip
 80106e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80106ea:	d8e5      	bhi.n	80106b8 <__multiply+0x10c>
 80106ec:	9f01      	ldr	r7, [sp, #4]
 80106ee:	51eb      	str	r3, [r5, r7]
 80106f0:	3504      	adds	r5, #4
 80106f2:	e799      	b.n	8010628 <__multiply+0x7c>
 80106f4:	3e01      	subs	r6, #1
 80106f6:	e79b      	b.n	8010630 <__multiply+0x84>
 80106f8:	080115cc 	.word	0x080115cc
 80106fc:	080115ee 	.word	0x080115ee

08010700 <__pow5mult>:
 8010700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010704:	4615      	mov	r5, r2
 8010706:	f012 0203 	ands.w	r2, r2, #3
 801070a:	4607      	mov	r7, r0
 801070c:	460e      	mov	r6, r1
 801070e:	d007      	beq.n	8010720 <__pow5mult+0x20>
 8010710:	4c25      	ldr	r4, [pc, #148]	@ (80107a8 <__pow5mult+0xa8>)
 8010712:	3a01      	subs	r2, #1
 8010714:	2300      	movs	r3, #0
 8010716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801071a:	f7ff fe9f 	bl	801045c <__multadd>
 801071e:	4606      	mov	r6, r0
 8010720:	10ad      	asrs	r5, r5, #2
 8010722:	d03d      	beq.n	80107a0 <__pow5mult+0xa0>
 8010724:	69fc      	ldr	r4, [r7, #28]
 8010726:	b97c      	cbnz	r4, 8010748 <__pow5mult+0x48>
 8010728:	2010      	movs	r0, #16
 801072a:	f7ff fcd3 	bl	80100d4 <malloc>
 801072e:	4602      	mov	r2, r0
 8010730:	61f8      	str	r0, [r7, #28]
 8010732:	b928      	cbnz	r0, 8010740 <__pow5mult+0x40>
 8010734:	4b1d      	ldr	r3, [pc, #116]	@ (80107ac <__pow5mult+0xac>)
 8010736:	481e      	ldr	r0, [pc, #120]	@ (80107b0 <__pow5mult+0xb0>)
 8010738:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801073c:	f000 fa90 	bl	8010c60 <__assert_func>
 8010740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010744:	6004      	str	r4, [r0, #0]
 8010746:	60c4      	str	r4, [r0, #12]
 8010748:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801074c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010750:	b94c      	cbnz	r4, 8010766 <__pow5mult+0x66>
 8010752:	f240 2171 	movw	r1, #625	@ 0x271
 8010756:	4638      	mov	r0, r7
 8010758:	f7ff ff12 	bl	8010580 <__i2b>
 801075c:	2300      	movs	r3, #0
 801075e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010762:	4604      	mov	r4, r0
 8010764:	6003      	str	r3, [r0, #0]
 8010766:	f04f 0900 	mov.w	r9, #0
 801076a:	07eb      	lsls	r3, r5, #31
 801076c:	d50a      	bpl.n	8010784 <__pow5mult+0x84>
 801076e:	4631      	mov	r1, r6
 8010770:	4622      	mov	r2, r4
 8010772:	4638      	mov	r0, r7
 8010774:	f7ff ff1a 	bl	80105ac <__multiply>
 8010778:	4631      	mov	r1, r6
 801077a:	4680      	mov	r8, r0
 801077c:	4638      	mov	r0, r7
 801077e:	f7ff fe4b 	bl	8010418 <_Bfree>
 8010782:	4646      	mov	r6, r8
 8010784:	106d      	asrs	r5, r5, #1
 8010786:	d00b      	beq.n	80107a0 <__pow5mult+0xa0>
 8010788:	6820      	ldr	r0, [r4, #0]
 801078a:	b938      	cbnz	r0, 801079c <__pow5mult+0x9c>
 801078c:	4622      	mov	r2, r4
 801078e:	4621      	mov	r1, r4
 8010790:	4638      	mov	r0, r7
 8010792:	f7ff ff0b 	bl	80105ac <__multiply>
 8010796:	6020      	str	r0, [r4, #0]
 8010798:	f8c0 9000 	str.w	r9, [r0]
 801079c:	4604      	mov	r4, r0
 801079e:	e7e4      	b.n	801076a <__pow5mult+0x6a>
 80107a0:	4630      	mov	r0, r6
 80107a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107a6:	bf00      	nop
 80107a8:	08011648 	.word	0x08011648
 80107ac:	0801155d 	.word	0x0801155d
 80107b0:	080115ee 	.word	0x080115ee

080107b4 <__lshift>:
 80107b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107b8:	460c      	mov	r4, r1
 80107ba:	6849      	ldr	r1, [r1, #4]
 80107bc:	6923      	ldr	r3, [r4, #16]
 80107be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80107c2:	68a3      	ldr	r3, [r4, #8]
 80107c4:	4607      	mov	r7, r0
 80107c6:	4691      	mov	r9, r2
 80107c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80107cc:	f108 0601 	add.w	r6, r8, #1
 80107d0:	42b3      	cmp	r3, r6
 80107d2:	db0b      	blt.n	80107ec <__lshift+0x38>
 80107d4:	4638      	mov	r0, r7
 80107d6:	f7ff fddf 	bl	8010398 <_Balloc>
 80107da:	4605      	mov	r5, r0
 80107dc:	b948      	cbnz	r0, 80107f2 <__lshift+0x3e>
 80107de:	4602      	mov	r2, r0
 80107e0:	4b28      	ldr	r3, [pc, #160]	@ (8010884 <__lshift+0xd0>)
 80107e2:	4829      	ldr	r0, [pc, #164]	@ (8010888 <__lshift+0xd4>)
 80107e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80107e8:	f000 fa3a 	bl	8010c60 <__assert_func>
 80107ec:	3101      	adds	r1, #1
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	e7ee      	b.n	80107d0 <__lshift+0x1c>
 80107f2:	2300      	movs	r3, #0
 80107f4:	f100 0114 	add.w	r1, r0, #20
 80107f8:	f100 0210 	add.w	r2, r0, #16
 80107fc:	4618      	mov	r0, r3
 80107fe:	4553      	cmp	r3, sl
 8010800:	db33      	blt.n	801086a <__lshift+0xb6>
 8010802:	6920      	ldr	r0, [r4, #16]
 8010804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010808:	f104 0314 	add.w	r3, r4, #20
 801080c:	f019 091f 	ands.w	r9, r9, #31
 8010810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010818:	d02b      	beq.n	8010872 <__lshift+0xbe>
 801081a:	f1c9 0e20 	rsb	lr, r9, #32
 801081e:	468a      	mov	sl, r1
 8010820:	2200      	movs	r2, #0
 8010822:	6818      	ldr	r0, [r3, #0]
 8010824:	fa00 f009 	lsl.w	r0, r0, r9
 8010828:	4310      	orrs	r0, r2
 801082a:	f84a 0b04 	str.w	r0, [sl], #4
 801082e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010832:	459c      	cmp	ip, r3
 8010834:	fa22 f20e 	lsr.w	r2, r2, lr
 8010838:	d8f3      	bhi.n	8010822 <__lshift+0x6e>
 801083a:	ebac 0304 	sub.w	r3, ip, r4
 801083e:	3b15      	subs	r3, #21
 8010840:	f023 0303 	bic.w	r3, r3, #3
 8010844:	3304      	adds	r3, #4
 8010846:	f104 0015 	add.w	r0, r4, #21
 801084a:	4584      	cmp	ip, r0
 801084c:	bf38      	it	cc
 801084e:	2304      	movcc	r3, #4
 8010850:	50ca      	str	r2, [r1, r3]
 8010852:	b10a      	cbz	r2, 8010858 <__lshift+0xa4>
 8010854:	f108 0602 	add.w	r6, r8, #2
 8010858:	3e01      	subs	r6, #1
 801085a:	4638      	mov	r0, r7
 801085c:	612e      	str	r6, [r5, #16]
 801085e:	4621      	mov	r1, r4
 8010860:	f7ff fdda 	bl	8010418 <_Bfree>
 8010864:	4628      	mov	r0, r5
 8010866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801086a:	f842 0f04 	str.w	r0, [r2, #4]!
 801086e:	3301      	adds	r3, #1
 8010870:	e7c5      	b.n	80107fe <__lshift+0x4a>
 8010872:	3904      	subs	r1, #4
 8010874:	f853 2b04 	ldr.w	r2, [r3], #4
 8010878:	f841 2f04 	str.w	r2, [r1, #4]!
 801087c:	459c      	cmp	ip, r3
 801087e:	d8f9      	bhi.n	8010874 <__lshift+0xc0>
 8010880:	e7ea      	b.n	8010858 <__lshift+0xa4>
 8010882:	bf00      	nop
 8010884:	080115cc 	.word	0x080115cc
 8010888:	080115ee 	.word	0x080115ee

0801088c <__mcmp>:
 801088c:	690a      	ldr	r2, [r1, #16]
 801088e:	4603      	mov	r3, r0
 8010890:	6900      	ldr	r0, [r0, #16]
 8010892:	1a80      	subs	r0, r0, r2
 8010894:	b530      	push	{r4, r5, lr}
 8010896:	d10e      	bne.n	80108b6 <__mcmp+0x2a>
 8010898:	3314      	adds	r3, #20
 801089a:	3114      	adds	r1, #20
 801089c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80108a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80108a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80108a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80108ac:	4295      	cmp	r5, r2
 80108ae:	d003      	beq.n	80108b8 <__mcmp+0x2c>
 80108b0:	d205      	bcs.n	80108be <__mcmp+0x32>
 80108b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108b6:	bd30      	pop	{r4, r5, pc}
 80108b8:	42a3      	cmp	r3, r4
 80108ba:	d3f3      	bcc.n	80108a4 <__mcmp+0x18>
 80108bc:	e7fb      	b.n	80108b6 <__mcmp+0x2a>
 80108be:	2001      	movs	r0, #1
 80108c0:	e7f9      	b.n	80108b6 <__mcmp+0x2a>
	...

080108c4 <__mdiff>:
 80108c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c8:	4689      	mov	r9, r1
 80108ca:	4606      	mov	r6, r0
 80108cc:	4611      	mov	r1, r2
 80108ce:	4648      	mov	r0, r9
 80108d0:	4614      	mov	r4, r2
 80108d2:	f7ff ffdb 	bl	801088c <__mcmp>
 80108d6:	1e05      	subs	r5, r0, #0
 80108d8:	d112      	bne.n	8010900 <__mdiff+0x3c>
 80108da:	4629      	mov	r1, r5
 80108dc:	4630      	mov	r0, r6
 80108de:	f7ff fd5b 	bl	8010398 <_Balloc>
 80108e2:	4602      	mov	r2, r0
 80108e4:	b928      	cbnz	r0, 80108f2 <__mdiff+0x2e>
 80108e6:	4b3f      	ldr	r3, [pc, #252]	@ (80109e4 <__mdiff+0x120>)
 80108e8:	f240 2137 	movw	r1, #567	@ 0x237
 80108ec:	483e      	ldr	r0, [pc, #248]	@ (80109e8 <__mdiff+0x124>)
 80108ee:	f000 f9b7 	bl	8010c60 <__assert_func>
 80108f2:	2301      	movs	r3, #1
 80108f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80108f8:	4610      	mov	r0, r2
 80108fa:	b003      	add	sp, #12
 80108fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010900:	bfbc      	itt	lt
 8010902:	464b      	movlt	r3, r9
 8010904:	46a1      	movlt	r9, r4
 8010906:	4630      	mov	r0, r6
 8010908:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801090c:	bfba      	itte	lt
 801090e:	461c      	movlt	r4, r3
 8010910:	2501      	movlt	r5, #1
 8010912:	2500      	movge	r5, #0
 8010914:	f7ff fd40 	bl	8010398 <_Balloc>
 8010918:	4602      	mov	r2, r0
 801091a:	b918      	cbnz	r0, 8010924 <__mdiff+0x60>
 801091c:	4b31      	ldr	r3, [pc, #196]	@ (80109e4 <__mdiff+0x120>)
 801091e:	f240 2145 	movw	r1, #581	@ 0x245
 8010922:	e7e3      	b.n	80108ec <__mdiff+0x28>
 8010924:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010928:	6926      	ldr	r6, [r4, #16]
 801092a:	60c5      	str	r5, [r0, #12]
 801092c:	f109 0310 	add.w	r3, r9, #16
 8010930:	f109 0514 	add.w	r5, r9, #20
 8010934:	f104 0e14 	add.w	lr, r4, #20
 8010938:	f100 0b14 	add.w	fp, r0, #20
 801093c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010940:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	46d9      	mov	r9, fp
 8010948:	f04f 0c00 	mov.w	ip, #0
 801094c:	9b01      	ldr	r3, [sp, #4]
 801094e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010952:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010956:	9301      	str	r3, [sp, #4]
 8010958:	fa1f f38a 	uxth.w	r3, sl
 801095c:	4619      	mov	r1, r3
 801095e:	b283      	uxth	r3, r0
 8010960:	1acb      	subs	r3, r1, r3
 8010962:	0c00      	lsrs	r0, r0, #16
 8010964:	4463      	add	r3, ip
 8010966:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801096a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801096e:	b29b      	uxth	r3, r3
 8010970:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010974:	4576      	cmp	r6, lr
 8010976:	f849 3b04 	str.w	r3, [r9], #4
 801097a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801097e:	d8e5      	bhi.n	801094c <__mdiff+0x88>
 8010980:	1b33      	subs	r3, r6, r4
 8010982:	3b15      	subs	r3, #21
 8010984:	f023 0303 	bic.w	r3, r3, #3
 8010988:	3415      	adds	r4, #21
 801098a:	3304      	adds	r3, #4
 801098c:	42a6      	cmp	r6, r4
 801098e:	bf38      	it	cc
 8010990:	2304      	movcc	r3, #4
 8010992:	441d      	add	r5, r3
 8010994:	445b      	add	r3, fp
 8010996:	461e      	mov	r6, r3
 8010998:	462c      	mov	r4, r5
 801099a:	4544      	cmp	r4, r8
 801099c:	d30e      	bcc.n	80109bc <__mdiff+0xf8>
 801099e:	f108 0103 	add.w	r1, r8, #3
 80109a2:	1b49      	subs	r1, r1, r5
 80109a4:	f021 0103 	bic.w	r1, r1, #3
 80109a8:	3d03      	subs	r5, #3
 80109aa:	45a8      	cmp	r8, r5
 80109ac:	bf38      	it	cc
 80109ae:	2100      	movcc	r1, #0
 80109b0:	440b      	add	r3, r1
 80109b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80109b6:	b191      	cbz	r1, 80109de <__mdiff+0x11a>
 80109b8:	6117      	str	r7, [r2, #16]
 80109ba:	e79d      	b.n	80108f8 <__mdiff+0x34>
 80109bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80109c0:	46e6      	mov	lr, ip
 80109c2:	0c08      	lsrs	r0, r1, #16
 80109c4:	fa1c fc81 	uxtah	ip, ip, r1
 80109c8:	4471      	add	r1, lr
 80109ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80109ce:	b289      	uxth	r1, r1
 80109d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80109d4:	f846 1b04 	str.w	r1, [r6], #4
 80109d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80109dc:	e7dd      	b.n	801099a <__mdiff+0xd6>
 80109de:	3f01      	subs	r7, #1
 80109e0:	e7e7      	b.n	80109b2 <__mdiff+0xee>
 80109e2:	bf00      	nop
 80109e4:	080115cc 	.word	0x080115cc
 80109e8:	080115ee 	.word	0x080115ee

080109ec <__d2b>:
 80109ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109f0:	460f      	mov	r7, r1
 80109f2:	2101      	movs	r1, #1
 80109f4:	ec59 8b10 	vmov	r8, r9, d0
 80109f8:	4616      	mov	r6, r2
 80109fa:	f7ff fccd 	bl	8010398 <_Balloc>
 80109fe:	4604      	mov	r4, r0
 8010a00:	b930      	cbnz	r0, 8010a10 <__d2b+0x24>
 8010a02:	4602      	mov	r2, r0
 8010a04:	4b23      	ldr	r3, [pc, #140]	@ (8010a94 <__d2b+0xa8>)
 8010a06:	4824      	ldr	r0, [pc, #144]	@ (8010a98 <__d2b+0xac>)
 8010a08:	f240 310f 	movw	r1, #783	@ 0x30f
 8010a0c:	f000 f928 	bl	8010c60 <__assert_func>
 8010a10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a18:	b10d      	cbz	r5, 8010a1e <__d2b+0x32>
 8010a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	f1b8 0300 	subs.w	r3, r8, #0
 8010a24:	d023      	beq.n	8010a6e <__d2b+0x82>
 8010a26:	4668      	mov	r0, sp
 8010a28:	9300      	str	r3, [sp, #0]
 8010a2a:	f7ff fd7c 	bl	8010526 <__lo0bits>
 8010a2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010a32:	b1d0      	cbz	r0, 8010a6a <__d2b+0x7e>
 8010a34:	f1c0 0320 	rsb	r3, r0, #32
 8010a38:	fa02 f303 	lsl.w	r3, r2, r3
 8010a3c:	430b      	orrs	r3, r1
 8010a3e:	40c2      	lsrs	r2, r0
 8010a40:	6163      	str	r3, [r4, #20]
 8010a42:	9201      	str	r2, [sp, #4]
 8010a44:	9b01      	ldr	r3, [sp, #4]
 8010a46:	61a3      	str	r3, [r4, #24]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	bf0c      	ite	eq
 8010a4c:	2201      	moveq	r2, #1
 8010a4e:	2202      	movne	r2, #2
 8010a50:	6122      	str	r2, [r4, #16]
 8010a52:	b1a5      	cbz	r5, 8010a7e <__d2b+0x92>
 8010a54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010a58:	4405      	add	r5, r0
 8010a5a:	603d      	str	r5, [r7, #0]
 8010a5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010a60:	6030      	str	r0, [r6, #0]
 8010a62:	4620      	mov	r0, r4
 8010a64:	b003      	add	sp, #12
 8010a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a6a:	6161      	str	r1, [r4, #20]
 8010a6c:	e7ea      	b.n	8010a44 <__d2b+0x58>
 8010a6e:	a801      	add	r0, sp, #4
 8010a70:	f7ff fd59 	bl	8010526 <__lo0bits>
 8010a74:	9b01      	ldr	r3, [sp, #4]
 8010a76:	6163      	str	r3, [r4, #20]
 8010a78:	3020      	adds	r0, #32
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	e7e8      	b.n	8010a50 <__d2b+0x64>
 8010a7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010a86:	6038      	str	r0, [r7, #0]
 8010a88:	6918      	ldr	r0, [r3, #16]
 8010a8a:	f7ff fd2d 	bl	80104e8 <__hi0bits>
 8010a8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a92:	e7e5      	b.n	8010a60 <__d2b+0x74>
 8010a94:	080115cc 	.word	0x080115cc
 8010a98:	080115ee 	.word	0x080115ee

08010a9c <__sread>:
 8010a9c:	b510      	push	{r4, lr}
 8010a9e:	460c      	mov	r4, r1
 8010aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aa4:	f000 f8a8 	bl	8010bf8 <_read_r>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	bfab      	itete	ge
 8010aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010aae:	89a3      	ldrhlt	r3, [r4, #12]
 8010ab0:	181b      	addge	r3, r3, r0
 8010ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ab6:	bfac      	ite	ge
 8010ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010aba:	81a3      	strhlt	r3, [r4, #12]
 8010abc:	bd10      	pop	{r4, pc}

08010abe <__swrite>:
 8010abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac2:	461f      	mov	r7, r3
 8010ac4:	898b      	ldrh	r3, [r1, #12]
 8010ac6:	05db      	lsls	r3, r3, #23
 8010ac8:	4605      	mov	r5, r0
 8010aca:	460c      	mov	r4, r1
 8010acc:	4616      	mov	r6, r2
 8010ace:	d505      	bpl.n	8010adc <__swrite+0x1e>
 8010ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ad4:	2302      	movs	r3, #2
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f000 f87c 	bl	8010bd4 <_lseek_r>
 8010adc:	89a3      	ldrh	r3, [r4, #12]
 8010ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ae6:	81a3      	strh	r3, [r4, #12]
 8010ae8:	4632      	mov	r2, r6
 8010aea:	463b      	mov	r3, r7
 8010aec:	4628      	mov	r0, r5
 8010aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010af2:	f000 b8a3 	b.w	8010c3c <_write_r>

08010af6 <__sseek>:
 8010af6:	b510      	push	{r4, lr}
 8010af8:	460c      	mov	r4, r1
 8010afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010afe:	f000 f869 	bl	8010bd4 <_lseek_r>
 8010b02:	1c43      	adds	r3, r0, #1
 8010b04:	89a3      	ldrh	r3, [r4, #12]
 8010b06:	bf15      	itete	ne
 8010b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010b12:	81a3      	strheq	r3, [r4, #12]
 8010b14:	bf18      	it	ne
 8010b16:	81a3      	strhne	r3, [r4, #12]
 8010b18:	bd10      	pop	{r4, pc}

08010b1a <__sclose>:
 8010b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b1e:	f000 b849 	b.w	8010bb4 <_close_r>

08010b22 <_realloc_r>:
 8010b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b26:	4680      	mov	r8, r0
 8010b28:	4615      	mov	r5, r2
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	b921      	cbnz	r1, 8010b38 <_realloc_r+0x16>
 8010b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b32:	4611      	mov	r1, r2
 8010b34:	f7ff baf8 	b.w	8010128 <_malloc_r>
 8010b38:	b92a      	cbnz	r2, 8010b46 <_realloc_r+0x24>
 8010b3a:	f7ff f929 	bl	800fd90 <_free_r>
 8010b3e:	2400      	movs	r4, #0
 8010b40:	4620      	mov	r0, r4
 8010b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b46:	f000 f8cf 	bl	8010ce8 <_malloc_usable_size_r>
 8010b4a:	4285      	cmp	r5, r0
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	d802      	bhi.n	8010b56 <_realloc_r+0x34>
 8010b50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010b54:	d8f4      	bhi.n	8010b40 <_realloc_r+0x1e>
 8010b56:	4629      	mov	r1, r5
 8010b58:	4640      	mov	r0, r8
 8010b5a:	f7ff fae5 	bl	8010128 <_malloc_r>
 8010b5e:	4607      	mov	r7, r0
 8010b60:	2800      	cmp	r0, #0
 8010b62:	d0ec      	beq.n	8010b3e <_realloc_r+0x1c>
 8010b64:	42b5      	cmp	r5, r6
 8010b66:	462a      	mov	r2, r5
 8010b68:	4621      	mov	r1, r4
 8010b6a:	bf28      	it	cs
 8010b6c:	4632      	movcs	r2, r6
 8010b6e:	f7fe fab4 	bl	800f0da <memcpy>
 8010b72:	4621      	mov	r1, r4
 8010b74:	4640      	mov	r0, r8
 8010b76:	f7ff f90b 	bl	800fd90 <_free_r>
 8010b7a:	463c      	mov	r4, r7
 8010b7c:	e7e0      	b.n	8010b40 <_realloc_r+0x1e>

08010b7e <memmove>:
 8010b7e:	4288      	cmp	r0, r1
 8010b80:	b510      	push	{r4, lr}
 8010b82:	eb01 0402 	add.w	r4, r1, r2
 8010b86:	d902      	bls.n	8010b8e <memmove+0x10>
 8010b88:	4284      	cmp	r4, r0
 8010b8a:	4623      	mov	r3, r4
 8010b8c:	d807      	bhi.n	8010b9e <memmove+0x20>
 8010b8e:	1e43      	subs	r3, r0, #1
 8010b90:	42a1      	cmp	r1, r4
 8010b92:	d008      	beq.n	8010ba6 <memmove+0x28>
 8010b94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b9c:	e7f8      	b.n	8010b90 <memmove+0x12>
 8010b9e:	4402      	add	r2, r0
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	428a      	cmp	r2, r1
 8010ba4:	d100      	bne.n	8010ba8 <memmove+0x2a>
 8010ba6:	bd10      	pop	{r4, pc}
 8010ba8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010bac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010bb0:	e7f7      	b.n	8010ba2 <memmove+0x24>
	...

08010bb4 <_close_r>:
 8010bb4:	b538      	push	{r3, r4, r5, lr}
 8010bb6:	4d06      	ldr	r5, [pc, #24]	@ (8010bd0 <_close_r+0x1c>)
 8010bb8:	2300      	movs	r3, #0
 8010bba:	4604      	mov	r4, r0
 8010bbc:	4608      	mov	r0, r1
 8010bbe:	602b      	str	r3, [r5, #0]
 8010bc0:	f7f4 fd02 	bl	80055c8 <_close>
 8010bc4:	1c43      	adds	r3, r0, #1
 8010bc6:	d102      	bne.n	8010bce <_close_r+0x1a>
 8010bc8:	682b      	ldr	r3, [r5, #0]
 8010bca:	b103      	cbz	r3, 8010bce <_close_r+0x1a>
 8010bcc:	6023      	str	r3, [r4, #0]
 8010bce:	bd38      	pop	{r3, r4, r5, pc}
 8010bd0:	20005aec 	.word	0x20005aec

08010bd4 <_lseek_r>:
 8010bd4:	b538      	push	{r3, r4, r5, lr}
 8010bd6:	4d07      	ldr	r5, [pc, #28]	@ (8010bf4 <_lseek_r+0x20>)
 8010bd8:	4604      	mov	r4, r0
 8010bda:	4608      	mov	r0, r1
 8010bdc:	4611      	mov	r1, r2
 8010bde:	2200      	movs	r2, #0
 8010be0:	602a      	str	r2, [r5, #0]
 8010be2:	461a      	mov	r2, r3
 8010be4:	f7f4 fd17 	bl	8005616 <_lseek>
 8010be8:	1c43      	adds	r3, r0, #1
 8010bea:	d102      	bne.n	8010bf2 <_lseek_r+0x1e>
 8010bec:	682b      	ldr	r3, [r5, #0]
 8010bee:	b103      	cbz	r3, 8010bf2 <_lseek_r+0x1e>
 8010bf0:	6023      	str	r3, [r4, #0]
 8010bf2:	bd38      	pop	{r3, r4, r5, pc}
 8010bf4:	20005aec 	.word	0x20005aec

08010bf8 <_read_r>:
 8010bf8:	b538      	push	{r3, r4, r5, lr}
 8010bfa:	4d07      	ldr	r5, [pc, #28]	@ (8010c18 <_read_r+0x20>)
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	4608      	mov	r0, r1
 8010c00:	4611      	mov	r1, r2
 8010c02:	2200      	movs	r2, #0
 8010c04:	602a      	str	r2, [r5, #0]
 8010c06:	461a      	mov	r2, r3
 8010c08:	f7f4 fca5 	bl	8005556 <_read>
 8010c0c:	1c43      	adds	r3, r0, #1
 8010c0e:	d102      	bne.n	8010c16 <_read_r+0x1e>
 8010c10:	682b      	ldr	r3, [r5, #0]
 8010c12:	b103      	cbz	r3, 8010c16 <_read_r+0x1e>
 8010c14:	6023      	str	r3, [r4, #0]
 8010c16:	bd38      	pop	{r3, r4, r5, pc}
 8010c18:	20005aec 	.word	0x20005aec

08010c1c <_sbrk_r>:
 8010c1c:	b538      	push	{r3, r4, r5, lr}
 8010c1e:	4d06      	ldr	r5, [pc, #24]	@ (8010c38 <_sbrk_r+0x1c>)
 8010c20:	2300      	movs	r3, #0
 8010c22:	4604      	mov	r4, r0
 8010c24:	4608      	mov	r0, r1
 8010c26:	602b      	str	r3, [r5, #0]
 8010c28:	f7f4 fd02 	bl	8005630 <_sbrk>
 8010c2c:	1c43      	adds	r3, r0, #1
 8010c2e:	d102      	bne.n	8010c36 <_sbrk_r+0x1a>
 8010c30:	682b      	ldr	r3, [r5, #0]
 8010c32:	b103      	cbz	r3, 8010c36 <_sbrk_r+0x1a>
 8010c34:	6023      	str	r3, [r4, #0]
 8010c36:	bd38      	pop	{r3, r4, r5, pc}
 8010c38:	20005aec 	.word	0x20005aec

08010c3c <_write_r>:
 8010c3c:	b538      	push	{r3, r4, r5, lr}
 8010c3e:	4d07      	ldr	r5, [pc, #28]	@ (8010c5c <_write_r+0x20>)
 8010c40:	4604      	mov	r4, r0
 8010c42:	4608      	mov	r0, r1
 8010c44:	4611      	mov	r1, r2
 8010c46:	2200      	movs	r2, #0
 8010c48:	602a      	str	r2, [r5, #0]
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	f7f4 fca0 	bl	8005590 <_write>
 8010c50:	1c43      	adds	r3, r0, #1
 8010c52:	d102      	bne.n	8010c5a <_write_r+0x1e>
 8010c54:	682b      	ldr	r3, [r5, #0]
 8010c56:	b103      	cbz	r3, 8010c5a <_write_r+0x1e>
 8010c58:	6023      	str	r3, [r4, #0]
 8010c5a:	bd38      	pop	{r3, r4, r5, pc}
 8010c5c:	20005aec 	.word	0x20005aec

08010c60 <__assert_func>:
 8010c60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c62:	4614      	mov	r4, r2
 8010c64:	461a      	mov	r2, r3
 8010c66:	4b09      	ldr	r3, [pc, #36]	@ (8010c8c <__assert_func+0x2c>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	68d8      	ldr	r0, [r3, #12]
 8010c6e:	b954      	cbnz	r4, 8010c86 <__assert_func+0x26>
 8010c70:	4b07      	ldr	r3, [pc, #28]	@ (8010c90 <__assert_func+0x30>)
 8010c72:	461c      	mov	r4, r3
 8010c74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c78:	9100      	str	r1, [sp, #0]
 8010c7a:	462b      	mov	r3, r5
 8010c7c:	4905      	ldr	r1, [pc, #20]	@ (8010c94 <__assert_func+0x34>)
 8010c7e:	f000 f83b 	bl	8010cf8 <fiprintf>
 8010c82:	f000 f858 	bl	8010d36 <abort>
 8010c86:	4b04      	ldr	r3, [pc, #16]	@ (8010c98 <__assert_func+0x38>)
 8010c88:	e7f4      	b.n	8010c74 <__assert_func+0x14>
 8010c8a:	bf00      	nop
 8010c8c:	20000124 	.word	0x20000124
 8010c90:	0801188e 	.word	0x0801188e
 8010c94:	08011860 	.word	0x08011860
 8010c98:	08011853 	.word	0x08011853

08010c9c <_calloc_r>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	fba1 5402 	umull	r5, r4, r1, r2
 8010ca2:	b93c      	cbnz	r4, 8010cb4 <_calloc_r+0x18>
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f7ff fa3f 	bl	8010128 <_malloc_r>
 8010caa:	4606      	mov	r6, r0
 8010cac:	b928      	cbnz	r0, 8010cba <_calloc_r+0x1e>
 8010cae:	2600      	movs	r6, #0
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	220c      	movs	r2, #12
 8010cb6:	6002      	str	r2, [r0, #0]
 8010cb8:	e7f9      	b.n	8010cae <_calloc_r+0x12>
 8010cba:	462a      	mov	r2, r5
 8010cbc:	4621      	mov	r1, r4
 8010cbe:	f7fe f97d 	bl	800efbc <memset>
 8010cc2:	e7f5      	b.n	8010cb0 <_calloc_r+0x14>

08010cc4 <__ascii_mbtowc>:
 8010cc4:	b082      	sub	sp, #8
 8010cc6:	b901      	cbnz	r1, 8010cca <__ascii_mbtowc+0x6>
 8010cc8:	a901      	add	r1, sp, #4
 8010cca:	b142      	cbz	r2, 8010cde <__ascii_mbtowc+0x1a>
 8010ccc:	b14b      	cbz	r3, 8010ce2 <__ascii_mbtowc+0x1e>
 8010cce:	7813      	ldrb	r3, [r2, #0]
 8010cd0:	600b      	str	r3, [r1, #0]
 8010cd2:	7812      	ldrb	r2, [r2, #0]
 8010cd4:	1e10      	subs	r0, r2, #0
 8010cd6:	bf18      	it	ne
 8010cd8:	2001      	movne	r0, #1
 8010cda:	b002      	add	sp, #8
 8010cdc:	4770      	bx	lr
 8010cde:	4610      	mov	r0, r2
 8010ce0:	e7fb      	b.n	8010cda <__ascii_mbtowc+0x16>
 8010ce2:	f06f 0001 	mvn.w	r0, #1
 8010ce6:	e7f8      	b.n	8010cda <__ascii_mbtowc+0x16>

08010ce8 <_malloc_usable_size_r>:
 8010ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cec:	1f18      	subs	r0, r3, #4
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	bfbc      	itt	lt
 8010cf2:	580b      	ldrlt	r3, [r1, r0]
 8010cf4:	18c0      	addlt	r0, r0, r3
 8010cf6:	4770      	bx	lr

08010cf8 <fiprintf>:
 8010cf8:	b40e      	push	{r1, r2, r3}
 8010cfa:	b503      	push	{r0, r1, lr}
 8010cfc:	4601      	mov	r1, r0
 8010cfe:	ab03      	add	r3, sp, #12
 8010d00:	4805      	ldr	r0, [pc, #20]	@ (8010d18 <fiprintf+0x20>)
 8010d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d06:	6800      	ldr	r0, [r0, #0]
 8010d08:	9301      	str	r3, [sp, #4]
 8010d0a:	f000 f845 	bl	8010d98 <_vfiprintf_r>
 8010d0e:	b002      	add	sp, #8
 8010d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d14:	b003      	add	sp, #12
 8010d16:	4770      	bx	lr
 8010d18:	20000124 	.word	0x20000124

08010d1c <__ascii_wctomb>:
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	4608      	mov	r0, r1
 8010d20:	b141      	cbz	r1, 8010d34 <__ascii_wctomb+0x18>
 8010d22:	2aff      	cmp	r2, #255	@ 0xff
 8010d24:	d904      	bls.n	8010d30 <__ascii_wctomb+0x14>
 8010d26:	228a      	movs	r2, #138	@ 0x8a
 8010d28:	601a      	str	r2, [r3, #0]
 8010d2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d2e:	4770      	bx	lr
 8010d30:	700a      	strb	r2, [r1, #0]
 8010d32:	2001      	movs	r0, #1
 8010d34:	4770      	bx	lr

08010d36 <abort>:
 8010d36:	b508      	push	{r3, lr}
 8010d38:	2006      	movs	r0, #6
 8010d3a:	f000 fa85 	bl	8011248 <raise>
 8010d3e:	2001      	movs	r0, #1
 8010d40:	f7f4 fbfe 	bl	8005540 <_exit>

08010d44 <__sfputc_r>:
 8010d44:	6893      	ldr	r3, [r2, #8]
 8010d46:	3b01      	subs	r3, #1
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	b410      	push	{r4}
 8010d4c:	6093      	str	r3, [r2, #8]
 8010d4e:	da08      	bge.n	8010d62 <__sfputc_r+0x1e>
 8010d50:	6994      	ldr	r4, [r2, #24]
 8010d52:	42a3      	cmp	r3, r4
 8010d54:	db01      	blt.n	8010d5a <__sfputc_r+0x16>
 8010d56:	290a      	cmp	r1, #10
 8010d58:	d103      	bne.n	8010d62 <__sfputc_r+0x1e>
 8010d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d5e:	f000 b933 	b.w	8010fc8 <__swbuf_r>
 8010d62:	6813      	ldr	r3, [r2, #0]
 8010d64:	1c58      	adds	r0, r3, #1
 8010d66:	6010      	str	r0, [r2, #0]
 8010d68:	7019      	strb	r1, [r3, #0]
 8010d6a:	4608      	mov	r0, r1
 8010d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d70:	4770      	bx	lr

08010d72 <__sfputs_r>:
 8010d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d74:	4606      	mov	r6, r0
 8010d76:	460f      	mov	r7, r1
 8010d78:	4614      	mov	r4, r2
 8010d7a:	18d5      	adds	r5, r2, r3
 8010d7c:	42ac      	cmp	r4, r5
 8010d7e:	d101      	bne.n	8010d84 <__sfputs_r+0x12>
 8010d80:	2000      	movs	r0, #0
 8010d82:	e007      	b.n	8010d94 <__sfputs_r+0x22>
 8010d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d88:	463a      	mov	r2, r7
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	f7ff ffda 	bl	8010d44 <__sfputc_r>
 8010d90:	1c43      	adds	r3, r0, #1
 8010d92:	d1f3      	bne.n	8010d7c <__sfputs_r+0xa>
 8010d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d98 <_vfiprintf_r>:
 8010d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9c:	460d      	mov	r5, r1
 8010d9e:	b09d      	sub	sp, #116	@ 0x74
 8010da0:	4614      	mov	r4, r2
 8010da2:	4698      	mov	r8, r3
 8010da4:	4606      	mov	r6, r0
 8010da6:	b118      	cbz	r0, 8010db0 <_vfiprintf_r+0x18>
 8010da8:	6a03      	ldr	r3, [r0, #32]
 8010daa:	b90b      	cbnz	r3, 8010db0 <_vfiprintf_r+0x18>
 8010dac:	f7fe f8b0 	bl	800ef10 <__sinit>
 8010db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010db2:	07d9      	lsls	r1, r3, #31
 8010db4:	d405      	bmi.n	8010dc2 <_vfiprintf_r+0x2a>
 8010db6:	89ab      	ldrh	r3, [r5, #12]
 8010db8:	059a      	lsls	r2, r3, #22
 8010dba:	d402      	bmi.n	8010dc2 <_vfiprintf_r+0x2a>
 8010dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010dbe:	f7fe f98a 	bl	800f0d6 <__retarget_lock_acquire_recursive>
 8010dc2:	89ab      	ldrh	r3, [r5, #12]
 8010dc4:	071b      	lsls	r3, r3, #28
 8010dc6:	d501      	bpl.n	8010dcc <_vfiprintf_r+0x34>
 8010dc8:	692b      	ldr	r3, [r5, #16]
 8010dca:	b99b      	cbnz	r3, 8010df4 <_vfiprintf_r+0x5c>
 8010dcc:	4629      	mov	r1, r5
 8010dce:	4630      	mov	r0, r6
 8010dd0:	f000 f938 	bl	8011044 <__swsetup_r>
 8010dd4:	b170      	cbz	r0, 8010df4 <_vfiprintf_r+0x5c>
 8010dd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dd8:	07dc      	lsls	r4, r3, #31
 8010dda:	d504      	bpl.n	8010de6 <_vfiprintf_r+0x4e>
 8010ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010de0:	b01d      	add	sp, #116	@ 0x74
 8010de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de6:	89ab      	ldrh	r3, [r5, #12]
 8010de8:	0598      	lsls	r0, r3, #22
 8010dea:	d4f7      	bmi.n	8010ddc <_vfiprintf_r+0x44>
 8010dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010dee:	f7fe f973 	bl	800f0d8 <__retarget_lock_release_recursive>
 8010df2:	e7f3      	b.n	8010ddc <_vfiprintf_r+0x44>
 8010df4:	2300      	movs	r3, #0
 8010df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010df8:	2320      	movs	r3, #32
 8010dfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e02:	2330      	movs	r3, #48	@ 0x30
 8010e04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010fb4 <_vfiprintf_r+0x21c>
 8010e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e0c:	f04f 0901 	mov.w	r9, #1
 8010e10:	4623      	mov	r3, r4
 8010e12:	469a      	mov	sl, r3
 8010e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e18:	b10a      	cbz	r2, 8010e1e <_vfiprintf_r+0x86>
 8010e1a:	2a25      	cmp	r2, #37	@ 0x25
 8010e1c:	d1f9      	bne.n	8010e12 <_vfiprintf_r+0x7a>
 8010e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8010e22:	d00b      	beq.n	8010e3c <_vfiprintf_r+0xa4>
 8010e24:	465b      	mov	r3, fp
 8010e26:	4622      	mov	r2, r4
 8010e28:	4629      	mov	r1, r5
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	f7ff ffa1 	bl	8010d72 <__sfputs_r>
 8010e30:	3001      	adds	r0, #1
 8010e32:	f000 80a7 	beq.w	8010f84 <_vfiprintf_r+0x1ec>
 8010e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e38:	445a      	add	r2, fp
 8010e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f000 809f 	beq.w	8010f84 <_vfiprintf_r+0x1ec>
 8010e46:	2300      	movs	r3, #0
 8010e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e50:	f10a 0a01 	add.w	sl, sl, #1
 8010e54:	9304      	str	r3, [sp, #16]
 8010e56:	9307      	str	r3, [sp, #28]
 8010e58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e5e:	4654      	mov	r4, sl
 8010e60:	2205      	movs	r2, #5
 8010e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e66:	4853      	ldr	r0, [pc, #332]	@ (8010fb4 <_vfiprintf_r+0x21c>)
 8010e68:	f7ef f9b2 	bl	80001d0 <memchr>
 8010e6c:	9a04      	ldr	r2, [sp, #16]
 8010e6e:	b9d8      	cbnz	r0, 8010ea8 <_vfiprintf_r+0x110>
 8010e70:	06d1      	lsls	r1, r2, #27
 8010e72:	bf44      	itt	mi
 8010e74:	2320      	movmi	r3, #32
 8010e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e7a:	0713      	lsls	r3, r2, #28
 8010e7c:	bf44      	itt	mi
 8010e7e:	232b      	movmi	r3, #43	@ 0x2b
 8010e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e84:	f89a 3000 	ldrb.w	r3, [sl]
 8010e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e8a:	d015      	beq.n	8010eb8 <_vfiprintf_r+0x120>
 8010e8c:	9a07      	ldr	r2, [sp, #28]
 8010e8e:	4654      	mov	r4, sl
 8010e90:	2000      	movs	r0, #0
 8010e92:	f04f 0c0a 	mov.w	ip, #10
 8010e96:	4621      	mov	r1, r4
 8010e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e9c:	3b30      	subs	r3, #48	@ 0x30
 8010e9e:	2b09      	cmp	r3, #9
 8010ea0:	d94b      	bls.n	8010f3a <_vfiprintf_r+0x1a2>
 8010ea2:	b1b0      	cbz	r0, 8010ed2 <_vfiprintf_r+0x13a>
 8010ea4:	9207      	str	r2, [sp, #28]
 8010ea6:	e014      	b.n	8010ed2 <_vfiprintf_r+0x13a>
 8010ea8:	eba0 0308 	sub.w	r3, r0, r8
 8010eac:	fa09 f303 	lsl.w	r3, r9, r3
 8010eb0:	4313      	orrs	r3, r2
 8010eb2:	9304      	str	r3, [sp, #16]
 8010eb4:	46a2      	mov	sl, r4
 8010eb6:	e7d2      	b.n	8010e5e <_vfiprintf_r+0xc6>
 8010eb8:	9b03      	ldr	r3, [sp, #12]
 8010eba:	1d19      	adds	r1, r3, #4
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	9103      	str	r1, [sp, #12]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	bfbb      	ittet	lt
 8010ec4:	425b      	neglt	r3, r3
 8010ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8010eca:	9307      	strge	r3, [sp, #28]
 8010ecc:	9307      	strlt	r3, [sp, #28]
 8010ece:	bfb8      	it	lt
 8010ed0:	9204      	strlt	r2, [sp, #16]
 8010ed2:	7823      	ldrb	r3, [r4, #0]
 8010ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ed6:	d10a      	bne.n	8010eee <_vfiprintf_r+0x156>
 8010ed8:	7863      	ldrb	r3, [r4, #1]
 8010eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8010edc:	d132      	bne.n	8010f44 <_vfiprintf_r+0x1ac>
 8010ede:	9b03      	ldr	r3, [sp, #12]
 8010ee0:	1d1a      	adds	r2, r3, #4
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	9203      	str	r2, [sp, #12]
 8010ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010eea:	3402      	adds	r4, #2
 8010eec:	9305      	str	r3, [sp, #20]
 8010eee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010fc4 <_vfiprintf_r+0x22c>
 8010ef2:	7821      	ldrb	r1, [r4, #0]
 8010ef4:	2203      	movs	r2, #3
 8010ef6:	4650      	mov	r0, sl
 8010ef8:	f7ef f96a 	bl	80001d0 <memchr>
 8010efc:	b138      	cbz	r0, 8010f0e <_vfiprintf_r+0x176>
 8010efe:	9b04      	ldr	r3, [sp, #16]
 8010f00:	eba0 000a 	sub.w	r0, r0, sl
 8010f04:	2240      	movs	r2, #64	@ 0x40
 8010f06:	4082      	lsls	r2, r0
 8010f08:	4313      	orrs	r3, r2
 8010f0a:	3401      	adds	r4, #1
 8010f0c:	9304      	str	r3, [sp, #16]
 8010f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f12:	4829      	ldr	r0, [pc, #164]	@ (8010fb8 <_vfiprintf_r+0x220>)
 8010f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f18:	2206      	movs	r2, #6
 8010f1a:	f7ef f959 	bl	80001d0 <memchr>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d03f      	beq.n	8010fa2 <_vfiprintf_r+0x20a>
 8010f22:	4b26      	ldr	r3, [pc, #152]	@ (8010fbc <_vfiprintf_r+0x224>)
 8010f24:	bb1b      	cbnz	r3, 8010f6e <_vfiprintf_r+0x1d6>
 8010f26:	9b03      	ldr	r3, [sp, #12]
 8010f28:	3307      	adds	r3, #7
 8010f2a:	f023 0307 	bic.w	r3, r3, #7
 8010f2e:	3308      	adds	r3, #8
 8010f30:	9303      	str	r3, [sp, #12]
 8010f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f34:	443b      	add	r3, r7
 8010f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f38:	e76a      	b.n	8010e10 <_vfiprintf_r+0x78>
 8010f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f3e:	460c      	mov	r4, r1
 8010f40:	2001      	movs	r0, #1
 8010f42:	e7a8      	b.n	8010e96 <_vfiprintf_r+0xfe>
 8010f44:	2300      	movs	r3, #0
 8010f46:	3401      	adds	r4, #1
 8010f48:	9305      	str	r3, [sp, #20]
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	f04f 0c0a 	mov.w	ip, #10
 8010f50:	4620      	mov	r0, r4
 8010f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f56:	3a30      	subs	r2, #48	@ 0x30
 8010f58:	2a09      	cmp	r2, #9
 8010f5a:	d903      	bls.n	8010f64 <_vfiprintf_r+0x1cc>
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d0c6      	beq.n	8010eee <_vfiprintf_r+0x156>
 8010f60:	9105      	str	r1, [sp, #20]
 8010f62:	e7c4      	b.n	8010eee <_vfiprintf_r+0x156>
 8010f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f68:	4604      	mov	r4, r0
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e7f0      	b.n	8010f50 <_vfiprintf_r+0x1b8>
 8010f6e:	ab03      	add	r3, sp, #12
 8010f70:	9300      	str	r3, [sp, #0]
 8010f72:	462a      	mov	r2, r5
 8010f74:	4b12      	ldr	r3, [pc, #72]	@ (8010fc0 <_vfiprintf_r+0x228>)
 8010f76:	a904      	add	r1, sp, #16
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f7fd fb85 	bl	800e688 <_printf_float>
 8010f7e:	4607      	mov	r7, r0
 8010f80:	1c78      	adds	r0, r7, #1
 8010f82:	d1d6      	bne.n	8010f32 <_vfiprintf_r+0x19a>
 8010f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f86:	07d9      	lsls	r1, r3, #31
 8010f88:	d405      	bmi.n	8010f96 <_vfiprintf_r+0x1fe>
 8010f8a:	89ab      	ldrh	r3, [r5, #12]
 8010f8c:	059a      	lsls	r2, r3, #22
 8010f8e:	d402      	bmi.n	8010f96 <_vfiprintf_r+0x1fe>
 8010f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f92:	f7fe f8a1 	bl	800f0d8 <__retarget_lock_release_recursive>
 8010f96:	89ab      	ldrh	r3, [r5, #12]
 8010f98:	065b      	lsls	r3, r3, #25
 8010f9a:	f53f af1f 	bmi.w	8010ddc <_vfiprintf_r+0x44>
 8010f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fa0:	e71e      	b.n	8010de0 <_vfiprintf_r+0x48>
 8010fa2:	ab03      	add	r3, sp, #12
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	462a      	mov	r2, r5
 8010fa8:	4b05      	ldr	r3, [pc, #20]	@ (8010fc0 <_vfiprintf_r+0x228>)
 8010faa:	a904      	add	r1, sp, #16
 8010fac:	4630      	mov	r0, r6
 8010fae:	f7fd fe03 	bl	800ebb8 <_printf_i>
 8010fb2:	e7e4      	b.n	8010f7e <_vfiprintf_r+0x1e6>
 8010fb4:	080115dd 	.word	0x080115dd
 8010fb8:	080115e7 	.word	0x080115e7
 8010fbc:	0800e689 	.word	0x0800e689
 8010fc0:	08010d73 	.word	0x08010d73
 8010fc4:	080115e3 	.word	0x080115e3

08010fc8 <__swbuf_r>:
 8010fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fca:	460e      	mov	r6, r1
 8010fcc:	4614      	mov	r4, r2
 8010fce:	4605      	mov	r5, r0
 8010fd0:	b118      	cbz	r0, 8010fda <__swbuf_r+0x12>
 8010fd2:	6a03      	ldr	r3, [r0, #32]
 8010fd4:	b90b      	cbnz	r3, 8010fda <__swbuf_r+0x12>
 8010fd6:	f7fd ff9b 	bl	800ef10 <__sinit>
 8010fda:	69a3      	ldr	r3, [r4, #24]
 8010fdc:	60a3      	str	r3, [r4, #8]
 8010fde:	89a3      	ldrh	r3, [r4, #12]
 8010fe0:	071a      	lsls	r2, r3, #28
 8010fe2:	d501      	bpl.n	8010fe8 <__swbuf_r+0x20>
 8010fe4:	6923      	ldr	r3, [r4, #16]
 8010fe6:	b943      	cbnz	r3, 8010ffa <__swbuf_r+0x32>
 8010fe8:	4621      	mov	r1, r4
 8010fea:	4628      	mov	r0, r5
 8010fec:	f000 f82a 	bl	8011044 <__swsetup_r>
 8010ff0:	b118      	cbz	r0, 8010ffa <__swbuf_r+0x32>
 8010ff2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010ff6:	4638      	mov	r0, r7
 8010ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	6922      	ldr	r2, [r4, #16]
 8010ffe:	1a98      	subs	r0, r3, r2
 8011000:	6963      	ldr	r3, [r4, #20]
 8011002:	b2f6      	uxtb	r6, r6
 8011004:	4283      	cmp	r3, r0
 8011006:	4637      	mov	r7, r6
 8011008:	dc05      	bgt.n	8011016 <__swbuf_r+0x4e>
 801100a:	4621      	mov	r1, r4
 801100c:	4628      	mov	r0, r5
 801100e:	f7ff f98f 	bl	8010330 <_fflush_r>
 8011012:	2800      	cmp	r0, #0
 8011014:	d1ed      	bne.n	8010ff2 <__swbuf_r+0x2a>
 8011016:	68a3      	ldr	r3, [r4, #8]
 8011018:	3b01      	subs	r3, #1
 801101a:	60a3      	str	r3, [r4, #8]
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	1c5a      	adds	r2, r3, #1
 8011020:	6022      	str	r2, [r4, #0]
 8011022:	701e      	strb	r6, [r3, #0]
 8011024:	6962      	ldr	r2, [r4, #20]
 8011026:	1c43      	adds	r3, r0, #1
 8011028:	429a      	cmp	r2, r3
 801102a:	d004      	beq.n	8011036 <__swbuf_r+0x6e>
 801102c:	89a3      	ldrh	r3, [r4, #12]
 801102e:	07db      	lsls	r3, r3, #31
 8011030:	d5e1      	bpl.n	8010ff6 <__swbuf_r+0x2e>
 8011032:	2e0a      	cmp	r6, #10
 8011034:	d1df      	bne.n	8010ff6 <__swbuf_r+0x2e>
 8011036:	4621      	mov	r1, r4
 8011038:	4628      	mov	r0, r5
 801103a:	f7ff f979 	bl	8010330 <_fflush_r>
 801103e:	2800      	cmp	r0, #0
 8011040:	d0d9      	beq.n	8010ff6 <__swbuf_r+0x2e>
 8011042:	e7d6      	b.n	8010ff2 <__swbuf_r+0x2a>

08011044 <__swsetup_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	4b29      	ldr	r3, [pc, #164]	@ (80110ec <__swsetup_r+0xa8>)
 8011048:	4605      	mov	r5, r0
 801104a:	6818      	ldr	r0, [r3, #0]
 801104c:	460c      	mov	r4, r1
 801104e:	b118      	cbz	r0, 8011058 <__swsetup_r+0x14>
 8011050:	6a03      	ldr	r3, [r0, #32]
 8011052:	b90b      	cbnz	r3, 8011058 <__swsetup_r+0x14>
 8011054:	f7fd ff5c 	bl	800ef10 <__sinit>
 8011058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801105c:	0719      	lsls	r1, r3, #28
 801105e:	d422      	bmi.n	80110a6 <__swsetup_r+0x62>
 8011060:	06da      	lsls	r2, r3, #27
 8011062:	d407      	bmi.n	8011074 <__swsetup_r+0x30>
 8011064:	2209      	movs	r2, #9
 8011066:	602a      	str	r2, [r5, #0]
 8011068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801106c:	81a3      	strh	r3, [r4, #12]
 801106e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011072:	e033      	b.n	80110dc <__swsetup_r+0x98>
 8011074:	0758      	lsls	r0, r3, #29
 8011076:	d512      	bpl.n	801109e <__swsetup_r+0x5a>
 8011078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801107a:	b141      	cbz	r1, 801108e <__swsetup_r+0x4a>
 801107c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011080:	4299      	cmp	r1, r3
 8011082:	d002      	beq.n	801108a <__swsetup_r+0x46>
 8011084:	4628      	mov	r0, r5
 8011086:	f7fe fe83 	bl	800fd90 <_free_r>
 801108a:	2300      	movs	r3, #0
 801108c:	6363      	str	r3, [r4, #52]	@ 0x34
 801108e:	89a3      	ldrh	r3, [r4, #12]
 8011090:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011094:	81a3      	strh	r3, [r4, #12]
 8011096:	2300      	movs	r3, #0
 8011098:	6063      	str	r3, [r4, #4]
 801109a:	6923      	ldr	r3, [r4, #16]
 801109c:	6023      	str	r3, [r4, #0]
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	f043 0308 	orr.w	r3, r3, #8
 80110a4:	81a3      	strh	r3, [r4, #12]
 80110a6:	6923      	ldr	r3, [r4, #16]
 80110a8:	b94b      	cbnz	r3, 80110be <__swsetup_r+0x7a>
 80110aa:	89a3      	ldrh	r3, [r4, #12]
 80110ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110b4:	d003      	beq.n	80110be <__swsetup_r+0x7a>
 80110b6:	4621      	mov	r1, r4
 80110b8:	4628      	mov	r0, r5
 80110ba:	f000 f83f 	bl	801113c <__smakebuf_r>
 80110be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110c2:	f013 0201 	ands.w	r2, r3, #1
 80110c6:	d00a      	beq.n	80110de <__swsetup_r+0x9a>
 80110c8:	2200      	movs	r2, #0
 80110ca:	60a2      	str	r2, [r4, #8]
 80110cc:	6962      	ldr	r2, [r4, #20]
 80110ce:	4252      	negs	r2, r2
 80110d0:	61a2      	str	r2, [r4, #24]
 80110d2:	6922      	ldr	r2, [r4, #16]
 80110d4:	b942      	cbnz	r2, 80110e8 <__swsetup_r+0xa4>
 80110d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80110da:	d1c5      	bne.n	8011068 <__swsetup_r+0x24>
 80110dc:	bd38      	pop	{r3, r4, r5, pc}
 80110de:	0799      	lsls	r1, r3, #30
 80110e0:	bf58      	it	pl
 80110e2:	6962      	ldrpl	r2, [r4, #20]
 80110e4:	60a2      	str	r2, [r4, #8]
 80110e6:	e7f4      	b.n	80110d2 <__swsetup_r+0x8e>
 80110e8:	2000      	movs	r0, #0
 80110ea:	e7f7      	b.n	80110dc <__swsetup_r+0x98>
 80110ec:	20000124 	.word	0x20000124

080110f0 <__swhatbuf_r>:
 80110f0:	b570      	push	{r4, r5, r6, lr}
 80110f2:	460c      	mov	r4, r1
 80110f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110f8:	2900      	cmp	r1, #0
 80110fa:	b096      	sub	sp, #88	@ 0x58
 80110fc:	4615      	mov	r5, r2
 80110fe:	461e      	mov	r6, r3
 8011100:	da0d      	bge.n	801111e <__swhatbuf_r+0x2e>
 8011102:	89a3      	ldrh	r3, [r4, #12]
 8011104:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011108:	f04f 0100 	mov.w	r1, #0
 801110c:	bf14      	ite	ne
 801110e:	2340      	movne	r3, #64	@ 0x40
 8011110:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011114:	2000      	movs	r0, #0
 8011116:	6031      	str	r1, [r6, #0]
 8011118:	602b      	str	r3, [r5, #0]
 801111a:	b016      	add	sp, #88	@ 0x58
 801111c:	bd70      	pop	{r4, r5, r6, pc}
 801111e:	466a      	mov	r2, sp
 8011120:	f000 f848 	bl	80111b4 <_fstat_r>
 8011124:	2800      	cmp	r0, #0
 8011126:	dbec      	blt.n	8011102 <__swhatbuf_r+0x12>
 8011128:	9901      	ldr	r1, [sp, #4]
 801112a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801112e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011132:	4259      	negs	r1, r3
 8011134:	4159      	adcs	r1, r3
 8011136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801113a:	e7eb      	b.n	8011114 <__swhatbuf_r+0x24>

0801113c <__smakebuf_r>:
 801113c:	898b      	ldrh	r3, [r1, #12]
 801113e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011140:	079d      	lsls	r5, r3, #30
 8011142:	4606      	mov	r6, r0
 8011144:	460c      	mov	r4, r1
 8011146:	d507      	bpl.n	8011158 <__smakebuf_r+0x1c>
 8011148:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801114c:	6023      	str	r3, [r4, #0]
 801114e:	6123      	str	r3, [r4, #16]
 8011150:	2301      	movs	r3, #1
 8011152:	6163      	str	r3, [r4, #20]
 8011154:	b003      	add	sp, #12
 8011156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011158:	ab01      	add	r3, sp, #4
 801115a:	466a      	mov	r2, sp
 801115c:	f7ff ffc8 	bl	80110f0 <__swhatbuf_r>
 8011160:	9f00      	ldr	r7, [sp, #0]
 8011162:	4605      	mov	r5, r0
 8011164:	4639      	mov	r1, r7
 8011166:	4630      	mov	r0, r6
 8011168:	f7fe ffde 	bl	8010128 <_malloc_r>
 801116c:	b948      	cbnz	r0, 8011182 <__smakebuf_r+0x46>
 801116e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011172:	059a      	lsls	r2, r3, #22
 8011174:	d4ee      	bmi.n	8011154 <__smakebuf_r+0x18>
 8011176:	f023 0303 	bic.w	r3, r3, #3
 801117a:	f043 0302 	orr.w	r3, r3, #2
 801117e:	81a3      	strh	r3, [r4, #12]
 8011180:	e7e2      	b.n	8011148 <__smakebuf_r+0xc>
 8011182:	89a3      	ldrh	r3, [r4, #12]
 8011184:	6020      	str	r0, [r4, #0]
 8011186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801118a:	81a3      	strh	r3, [r4, #12]
 801118c:	9b01      	ldr	r3, [sp, #4]
 801118e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011192:	b15b      	cbz	r3, 80111ac <__smakebuf_r+0x70>
 8011194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011198:	4630      	mov	r0, r6
 801119a:	f000 f81d 	bl	80111d8 <_isatty_r>
 801119e:	b128      	cbz	r0, 80111ac <__smakebuf_r+0x70>
 80111a0:	89a3      	ldrh	r3, [r4, #12]
 80111a2:	f023 0303 	bic.w	r3, r3, #3
 80111a6:	f043 0301 	orr.w	r3, r3, #1
 80111aa:	81a3      	strh	r3, [r4, #12]
 80111ac:	89a3      	ldrh	r3, [r4, #12]
 80111ae:	431d      	orrs	r5, r3
 80111b0:	81a5      	strh	r5, [r4, #12]
 80111b2:	e7cf      	b.n	8011154 <__smakebuf_r+0x18>

080111b4 <_fstat_r>:
 80111b4:	b538      	push	{r3, r4, r5, lr}
 80111b6:	4d07      	ldr	r5, [pc, #28]	@ (80111d4 <_fstat_r+0x20>)
 80111b8:	2300      	movs	r3, #0
 80111ba:	4604      	mov	r4, r0
 80111bc:	4608      	mov	r0, r1
 80111be:	4611      	mov	r1, r2
 80111c0:	602b      	str	r3, [r5, #0]
 80111c2:	f7f4 fa0d 	bl	80055e0 <_fstat>
 80111c6:	1c43      	adds	r3, r0, #1
 80111c8:	d102      	bne.n	80111d0 <_fstat_r+0x1c>
 80111ca:	682b      	ldr	r3, [r5, #0]
 80111cc:	b103      	cbz	r3, 80111d0 <_fstat_r+0x1c>
 80111ce:	6023      	str	r3, [r4, #0]
 80111d0:	bd38      	pop	{r3, r4, r5, pc}
 80111d2:	bf00      	nop
 80111d4:	20005aec 	.word	0x20005aec

080111d8 <_isatty_r>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	4d06      	ldr	r5, [pc, #24]	@ (80111f4 <_isatty_r+0x1c>)
 80111dc:	2300      	movs	r3, #0
 80111de:	4604      	mov	r4, r0
 80111e0:	4608      	mov	r0, r1
 80111e2:	602b      	str	r3, [r5, #0]
 80111e4:	f7f4 fa0c 	bl	8005600 <_isatty>
 80111e8:	1c43      	adds	r3, r0, #1
 80111ea:	d102      	bne.n	80111f2 <_isatty_r+0x1a>
 80111ec:	682b      	ldr	r3, [r5, #0]
 80111ee:	b103      	cbz	r3, 80111f2 <_isatty_r+0x1a>
 80111f0:	6023      	str	r3, [r4, #0]
 80111f2:	bd38      	pop	{r3, r4, r5, pc}
 80111f4:	20005aec 	.word	0x20005aec

080111f8 <_raise_r>:
 80111f8:	291f      	cmp	r1, #31
 80111fa:	b538      	push	{r3, r4, r5, lr}
 80111fc:	4605      	mov	r5, r0
 80111fe:	460c      	mov	r4, r1
 8011200:	d904      	bls.n	801120c <_raise_r+0x14>
 8011202:	2316      	movs	r3, #22
 8011204:	6003      	str	r3, [r0, #0]
 8011206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801120a:	bd38      	pop	{r3, r4, r5, pc}
 801120c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801120e:	b112      	cbz	r2, 8011216 <_raise_r+0x1e>
 8011210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011214:	b94b      	cbnz	r3, 801122a <_raise_r+0x32>
 8011216:	4628      	mov	r0, r5
 8011218:	f000 f830 	bl	801127c <_getpid_r>
 801121c:	4622      	mov	r2, r4
 801121e:	4601      	mov	r1, r0
 8011220:	4628      	mov	r0, r5
 8011222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011226:	f000 b817 	b.w	8011258 <_kill_r>
 801122a:	2b01      	cmp	r3, #1
 801122c:	d00a      	beq.n	8011244 <_raise_r+0x4c>
 801122e:	1c59      	adds	r1, r3, #1
 8011230:	d103      	bne.n	801123a <_raise_r+0x42>
 8011232:	2316      	movs	r3, #22
 8011234:	6003      	str	r3, [r0, #0]
 8011236:	2001      	movs	r0, #1
 8011238:	e7e7      	b.n	801120a <_raise_r+0x12>
 801123a:	2100      	movs	r1, #0
 801123c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011240:	4620      	mov	r0, r4
 8011242:	4798      	blx	r3
 8011244:	2000      	movs	r0, #0
 8011246:	e7e0      	b.n	801120a <_raise_r+0x12>

08011248 <raise>:
 8011248:	4b02      	ldr	r3, [pc, #8]	@ (8011254 <raise+0xc>)
 801124a:	4601      	mov	r1, r0
 801124c:	6818      	ldr	r0, [r3, #0]
 801124e:	f7ff bfd3 	b.w	80111f8 <_raise_r>
 8011252:	bf00      	nop
 8011254:	20000124 	.word	0x20000124

08011258 <_kill_r>:
 8011258:	b538      	push	{r3, r4, r5, lr}
 801125a:	4d07      	ldr	r5, [pc, #28]	@ (8011278 <_kill_r+0x20>)
 801125c:	2300      	movs	r3, #0
 801125e:	4604      	mov	r4, r0
 8011260:	4608      	mov	r0, r1
 8011262:	4611      	mov	r1, r2
 8011264:	602b      	str	r3, [r5, #0]
 8011266:	f7f4 f95b 	bl	8005520 <_kill>
 801126a:	1c43      	adds	r3, r0, #1
 801126c:	d102      	bne.n	8011274 <_kill_r+0x1c>
 801126e:	682b      	ldr	r3, [r5, #0]
 8011270:	b103      	cbz	r3, 8011274 <_kill_r+0x1c>
 8011272:	6023      	str	r3, [r4, #0]
 8011274:	bd38      	pop	{r3, r4, r5, pc}
 8011276:	bf00      	nop
 8011278:	20005aec 	.word	0x20005aec

0801127c <_getpid_r>:
 801127c:	f7f4 b948 	b.w	8005510 <_getpid>

08011280 <_init>:
 8011280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011282:	bf00      	nop
 8011284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011286:	bc08      	pop	{r3}
 8011288:	469e      	mov	lr, r3
 801128a:	4770      	bx	lr

0801128c <_fini>:
 801128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128e:	bf00      	nop
 8011290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011292:	bc08      	pop	{r3}
 8011294:	469e      	mov	lr, r3
 8011296:	4770      	bx	lr
