
RMTemplateMay12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013af0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08013c80  08013c80  00014c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014450  08014450  0001627c  2**0
                  CONTENTS
  4 .ARM          00000008  08014450  08014450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014458  08014458  0001627c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014458  08014458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801445c  0801445c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08014460  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001627c  2**0
                  CONTENTS
 10 .bss          000058cc  2000027c  2000027c  0001627c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005b48  20005b48  0001627c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001627c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026d5e  00000000  00000000  000162ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005969  00000000  00000000  0003d00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002000  00000000  00000000  00042978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018f2  00000000  00000000  00044978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027692  00000000  00000000  0004626a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027c49  00000000  00000000  0006d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3375  00000000  00000000  00095545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001788ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098fc  00000000  00000000  00178900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001821fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000027c 	.word	0x2000027c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013c68 	.word	0x08013c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000280 	.word	0x20000280
 80001cc:	08013c68 	.word	0x08013c68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f000 b96a 	b.w	8001150 <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f806 	bl	8000e94 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__udivmoddi4>:
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	9d08      	ldr	r5, [sp, #32]
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d14e      	bne.n	8000f3e <__udivmoddi4+0xaa>
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	458c      	cmp	ip, r1
 8000ea4:	4686      	mov	lr, r0
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	d962      	bls.n	8000f72 <__udivmoddi4+0xde>
 8000eac:	b14a      	cbz	r2, 8000ec2 <__udivmoddi4+0x2e>
 8000eae:	f1c2 0320 	rsb	r3, r2, #32
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	4319      	orrs	r1, r3
 8000ebe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec6:	fa1f f68c 	uxth.w	r6, ip
 8000eca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ece:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ed2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb04 f106 	mul.w	r1, r4, r6
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d90a      	bls.n	8000ef8 <__udivmoddi4+0x64>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000eea:	f080 8112 	bcs.w	8001112 <__udivmoddi4+0x27e>
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	f240 810f 	bls.w	8001112 <__udivmoddi4+0x27e>
 8000ef4:	3c02      	subs	r4, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1a59      	subs	r1, r3, r1
 8000efa:	fa1f f38e 	uxth.w	r3, lr
 8000efe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f02:	fb07 1110 	mls	r1, r7, r0, r1
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f606 	mul.w	r6, r0, r6
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	d90a      	bls.n	8000f28 <__udivmoddi4+0x94>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000f1a:	f080 80fc 	bcs.w	8001116 <__udivmoddi4+0x282>
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	f240 80f9 	bls.w	8001116 <__udivmoddi4+0x282>
 8000f24:	4463      	add	r3, ip
 8000f26:	3802      	subs	r0, #2
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f2e:	2100      	movs	r1, #0
 8000f30:	b11d      	cbz	r5, 8000f3a <__udivmoddi4+0xa6>
 8000f32:	40d3      	lsrs	r3, r2
 8000f34:	2200      	movs	r2, #0
 8000f36:	e9c5 3200 	strd	r3, r2, [r5]
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d905      	bls.n	8000f4e <__udivmoddi4+0xba>
 8000f42:	b10d      	cbz	r5, 8000f48 <__udivmoddi4+0xb4>
 8000f44:	e9c5 0100 	strd	r0, r1, [r5]
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e7f5      	b.n	8000f3a <__udivmoddi4+0xa6>
 8000f4e:	fab3 f183 	clz	r1, r3
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d146      	bne.n	8000fe4 <__udivmoddi4+0x150>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d302      	bcc.n	8000f60 <__udivmoddi4+0xcc>
 8000f5a:	4290      	cmp	r0, r2
 8000f5c:	f0c0 80f0 	bcc.w	8001140 <__udivmoddi4+0x2ac>
 8000f60:	1a86      	subs	r6, r0, r2
 8000f62:	eb64 0303 	sbc.w	r3, r4, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d0e6      	beq.n	8000f3a <__udivmoddi4+0xa6>
 8000f6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000f70:	e7e3      	b.n	8000f3a <__udivmoddi4+0xa6>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	f040 8090 	bne.w	8001098 <__udivmoddi4+0x204>
 8000f78:	eba1 040c 	sub.w	r4, r1, ip
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa1f f78c 	uxth.w	r7, ip
 8000f84:	2101      	movs	r1, #1
 8000f86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f96:	fb07 f006 	mul.w	r0, r7, r6
 8000f9a:	4298      	cmp	r0, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x11c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000fa6:	d202      	bcs.n	8000fae <__udivmoddi4+0x11a>
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	f200 80cd 	bhi.w	8001148 <__udivmoddi4+0x2b4>
 8000fae:	4626      	mov	r6, r4
 8000fb0:	1a1c      	subs	r4, r3, r0
 8000fb2:	fa1f f38e 	uxth.w	r3, lr
 8000fb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000fba:	fb08 4410 	mls	r4, r8, r0, r4
 8000fbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fc2:	fb00 f707 	mul.w	r7, r0, r7
 8000fc6:	429f      	cmp	r7, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x148>
 8000fca:	eb1c 0303 	adds.w	r3, ip, r3
 8000fce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x146>
 8000fd4:	429f      	cmp	r7, r3
 8000fd6:	f200 80b0 	bhi.w	800113a <__udivmoddi4+0x2a6>
 8000fda:	4620      	mov	r0, r4
 8000fdc:	1bdb      	subs	r3, r3, r7
 8000fde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fe2:	e7a5      	b.n	8000f30 <__udivmoddi4+0x9c>
 8000fe4:	f1c1 0620 	rsb	r6, r1, #32
 8000fe8:	408b      	lsls	r3, r1
 8000fea:	fa22 f706 	lsr.w	r7, r2, r6
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ff4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ff8:	ea43 030c 	orr.w	r3, r3, ip
 8000ffc:	40f4      	lsrs	r4, r6
 8000ffe:	fa00 f801 	lsl.w	r8, r0, r1
 8001002:	0c38      	lsrs	r0, r7, #16
 8001004:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001008:	fbb4 fef0 	udiv	lr, r4, r0
 800100c:	fa1f fc87 	uxth.w	ip, r7
 8001010:	fb00 441e 	mls	r4, r0, lr, r4
 8001014:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001018:	fb0e f90c 	mul.w	r9, lr, ip
 800101c:	45a1      	cmp	r9, r4
 800101e:	fa02 f201 	lsl.w	r2, r2, r1
 8001022:	d90a      	bls.n	800103a <__udivmoddi4+0x1a6>
 8001024:	193c      	adds	r4, r7, r4
 8001026:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800102a:	f080 8084 	bcs.w	8001136 <__udivmoddi4+0x2a2>
 800102e:	45a1      	cmp	r9, r4
 8001030:	f240 8081 	bls.w	8001136 <__udivmoddi4+0x2a2>
 8001034:	f1ae 0e02 	sub.w	lr, lr, #2
 8001038:	443c      	add	r4, r7
 800103a:	eba4 0409 	sub.w	r4, r4, r9
 800103e:	fa1f f983 	uxth.w	r9, r3
 8001042:	fbb4 f3f0 	udiv	r3, r4, r0
 8001046:	fb00 4413 	mls	r4, r0, r3, r4
 800104a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800104e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001052:	45a4      	cmp	ip, r4
 8001054:	d907      	bls.n	8001066 <__udivmoddi4+0x1d2>
 8001056:	193c      	adds	r4, r7, r4
 8001058:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800105c:	d267      	bcs.n	800112e <__udivmoddi4+0x29a>
 800105e:	45a4      	cmp	ip, r4
 8001060:	d965      	bls.n	800112e <__udivmoddi4+0x29a>
 8001062:	3b02      	subs	r3, #2
 8001064:	443c      	add	r4, r7
 8001066:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800106a:	fba0 9302 	umull	r9, r3, r0, r2
 800106e:	eba4 040c 	sub.w	r4, r4, ip
 8001072:	429c      	cmp	r4, r3
 8001074:	46ce      	mov	lr, r9
 8001076:	469c      	mov	ip, r3
 8001078:	d351      	bcc.n	800111e <__udivmoddi4+0x28a>
 800107a:	d04e      	beq.n	800111a <__udivmoddi4+0x286>
 800107c:	b155      	cbz	r5, 8001094 <__udivmoddi4+0x200>
 800107e:	ebb8 030e 	subs.w	r3, r8, lr
 8001082:	eb64 040c 	sbc.w	r4, r4, ip
 8001086:	fa04 f606 	lsl.w	r6, r4, r6
 800108a:	40cb      	lsrs	r3, r1
 800108c:	431e      	orrs	r6, r3
 800108e:	40cc      	lsrs	r4, r1
 8001090:	e9c5 6400 	strd	r6, r4, [r5]
 8001094:	2100      	movs	r1, #0
 8001096:	e750      	b.n	8000f3a <__udivmoddi4+0xa6>
 8001098:	f1c2 0320 	rsb	r3, r2, #32
 800109c:	fa20 f103 	lsr.w	r1, r0, r3
 80010a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010a4:	fa24 f303 	lsr.w	r3, r4, r3
 80010a8:	4094      	lsls	r4, r2
 80010aa:	430c      	orrs	r4, r1
 80010ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80010b4:	fa1f f78c 	uxth.w	r7, ip
 80010b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010bc:	fb08 3110 	mls	r1, r8, r0, r3
 80010c0:	0c23      	lsrs	r3, r4, #16
 80010c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010c6:	fb00 f107 	mul.w	r1, r0, r7
 80010ca:	4299      	cmp	r1, r3
 80010cc:	d908      	bls.n	80010e0 <__udivmoddi4+0x24c>
 80010ce:	eb1c 0303 	adds.w	r3, ip, r3
 80010d2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80010d6:	d22c      	bcs.n	8001132 <__udivmoddi4+0x29e>
 80010d8:	4299      	cmp	r1, r3
 80010da:	d92a      	bls.n	8001132 <__udivmoddi4+0x29e>
 80010dc:	3802      	subs	r0, #2
 80010de:	4463      	add	r3, ip
 80010e0:	1a5b      	subs	r3, r3, r1
 80010e2:	b2a4      	uxth	r4, r4
 80010e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80010e8:	fb08 3311 	mls	r3, r8, r1, r3
 80010ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010f0:	fb01 f307 	mul.w	r3, r1, r7
 80010f4:	42a3      	cmp	r3, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x276>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001100:	d213      	bcs.n	800112a <__udivmoddi4+0x296>
 8001102:	42a3      	cmp	r3, r4
 8001104:	d911      	bls.n	800112a <__udivmoddi4+0x296>
 8001106:	3902      	subs	r1, #2
 8001108:	4464      	add	r4, ip
 800110a:	1ae4      	subs	r4, r4, r3
 800110c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001110:	e739      	b.n	8000f86 <__udivmoddi4+0xf2>
 8001112:	4604      	mov	r4, r0
 8001114:	e6f0      	b.n	8000ef8 <__udivmoddi4+0x64>
 8001116:	4608      	mov	r0, r1
 8001118:	e706      	b.n	8000f28 <__udivmoddi4+0x94>
 800111a:	45c8      	cmp	r8, r9
 800111c:	d2ae      	bcs.n	800107c <__udivmoddi4+0x1e8>
 800111e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001122:	eb63 0c07 	sbc.w	ip, r3, r7
 8001126:	3801      	subs	r0, #1
 8001128:	e7a8      	b.n	800107c <__udivmoddi4+0x1e8>
 800112a:	4631      	mov	r1, r6
 800112c:	e7ed      	b.n	800110a <__udivmoddi4+0x276>
 800112e:	4603      	mov	r3, r0
 8001130:	e799      	b.n	8001066 <__udivmoddi4+0x1d2>
 8001132:	4630      	mov	r0, r6
 8001134:	e7d4      	b.n	80010e0 <__udivmoddi4+0x24c>
 8001136:	46d6      	mov	lr, sl
 8001138:	e77f      	b.n	800103a <__udivmoddi4+0x1a6>
 800113a:	4463      	add	r3, ip
 800113c:	3802      	subs	r0, #2
 800113e:	e74d      	b.n	8000fdc <__udivmoddi4+0x148>
 8001140:	4606      	mov	r6, r0
 8001142:	4623      	mov	r3, r4
 8001144:	4608      	mov	r0, r1
 8001146:	e70f      	b.n	8000f68 <__udivmoddi4+0xd4>
 8001148:	3e02      	subs	r6, #2
 800114a:	4463      	add	r3, ip
 800114c:	e730      	b.n	8000fb0 <__udivmoddi4+0x11c>
 800114e:	bf00      	nop

08001150 <__aeabi_idiv0>:
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 800115e:	e003      	b.n	8001168 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001164:	f000 f80a 	bl	800117c <BMI088_delay_us>
    while(ms--)
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	80fa      	strh	r2, [r7, #6]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f6      	bne.n	8001160 <BMI088_delay_ms+0xc>
    }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <BMI088_delay_us+0x84>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	22a8      	movs	r2, #168	@ 0xa8
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <BMI088_delay_us+0x84>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <BMI088_delay_us+0x84>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d0f8      	beq.n	80011b0 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d206      	bcs.n	80011d4 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4413      	add	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	e007      	b.n	80011e4 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad2      	subs	r2, r2, r3
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4413      	add	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d200      	bcs.n	80011f2 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 80011f0:	e7de      	b.n	80011b0 <BMI088_delay_us+0x34>
            {
                break;
 80011f2:	bf00      	nop
            }
        }
    }


}
 80011f4:	bf00      	nop
 80011f6:	3724      	adds	r7, #36	@ 0x24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e010 	.word	0xe000e010

08001204 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <BMI088_ACCEL_NS_L+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <BMI088_ACCEL_NS_L+0x1c>)
 800120e:	8811      	ldrh	r1, [r2, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fc9c 	bl	8008b50 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <BMI088_ACCEL_NS_H+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <BMI088_ACCEL_NS_H+0x1c>)
 800122e:	8811      	ldrh	r1, [r2, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	4618      	mov	r0, r3
 8001234:	f007 fc8c 	bl	8008b50 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004

08001244 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <BMI088_GYRO_NS_L+0x18>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <BMI088_GYRO_NS_L+0x1c>)
 800124e:	8811      	ldrh	r1, [r2, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fc7c 	bl	8008b50 <HAL_GPIO_WritePin>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000008 	.word	0x20000008
 8001260:	2000000c 	.word	0x2000000c

08001264 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <BMI088_GYRO_NS_H+0x18>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <BMI088_GYRO_NS_H+0x1c>)
 800126e:	8811      	ldrh	r1, [r2, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fc6c 	bl	8008b50 <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000008 	.word	0x20000008
 8001280:	2000000c 	.word	0x2000000c

08001284 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 800128e:	f107 020f 	add.w	r2, r7, #15
 8001292:	1df9      	adds	r1, r7, #7
 8001294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	4803      	ldr	r0, [pc, #12]	@ (80012ac <BMI088_read_write_byte+0x28>)
 800129e:	f009 f9b5 	bl	800a60c <HAL_SPI_TransmitReceive>
    return rx_data;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000980 	.word	0x20000980

080012b0 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80012be:	f7ff ffa1 	bl	8001204 <BMI088_ACCEL_NS_L>
 80012c2:	2080      	movs	r0, #128	@ 0x80
 80012c4:	f7ff ffde 	bl	8001284 <BMI088_read_write_byte>
 80012c8:	2055      	movs	r0, #85	@ 0x55
 80012ca:	f7ff ffdb 	bl	8001284 <BMI088_read_write_byte>
 80012ce:	2055      	movs	r0, #85	@ 0x55
 80012d0:	f7ff ffd8 	bl	8001284 <BMI088_read_write_byte>
 80012d4:	4603      	mov	r3, r0
 80012d6:	71bb      	strb	r3, [r7, #6]
 80012d8:	f7ff ffa4 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012dc:	2096      	movs	r0, #150	@ 0x96
 80012de:	f7ff ff4d 	bl	800117c <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80012e2:	f7ff ff8f 	bl	8001204 <BMI088_ACCEL_NS_L>
 80012e6:	2080      	movs	r0, #128	@ 0x80
 80012e8:	f7ff ffcc 	bl	8001284 <BMI088_read_write_byte>
 80012ec:	2055      	movs	r0, #85	@ 0x55
 80012ee:	f7ff ffc9 	bl	8001284 <BMI088_read_write_byte>
 80012f2:	2055      	movs	r0, #85	@ 0x55
 80012f4:	f7ff ffc6 	bl	8001284 <BMI088_read_write_byte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	71bb      	strb	r3, [r7, #6]
 80012fc:	f7ff ff92 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001300:	2096      	movs	r0, #150	@ 0x96
 8001302:	f7ff ff3b 	bl	800117c <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001306:	f7ff ff7d 	bl	8001204 <BMI088_ACCEL_NS_L>
 800130a:	21b6      	movs	r1, #182	@ 0xb6
 800130c:	207e      	movs	r0, #126	@ 0x7e
 800130e:	f000 fa4d 	bl	80017ac <BMI088_write_single_reg>
 8001312:	f7ff ff87 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8001316:	2050      	movs	r0, #80	@ 0x50
 8001318:	f7ff ff1c 	bl	8001154 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800131c:	f7ff ff72 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001320:	2080      	movs	r0, #128	@ 0x80
 8001322:	f7ff ffaf 	bl	8001284 <BMI088_read_write_byte>
 8001326:	2055      	movs	r0, #85	@ 0x55
 8001328:	f7ff ffac 	bl	8001284 <BMI088_read_write_byte>
 800132c:	2055      	movs	r0, #85	@ 0x55
 800132e:	f7ff ffa9 	bl	8001284 <BMI088_read_write_byte>
 8001332:	4603      	mov	r3, r0
 8001334:	71bb      	strb	r3, [r7, #6]
 8001336:	f7ff ff75 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800133a:	2096      	movs	r0, #150	@ 0x96
 800133c:	f7ff ff1e 	bl	800117c <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001340:	f7ff ff60 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001344:	2080      	movs	r0, #128	@ 0x80
 8001346:	f7ff ff9d 	bl	8001284 <BMI088_read_write_byte>
 800134a:	2055      	movs	r0, #85	@ 0x55
 800134c:	f7ff ff9a 	bl	8001284 <BMI088_read_write_byte>
 8001350:	2055      	movs	r0, #85	@ 0x55
 8001352:	f7ff ff97 	bl	8001284 <BMI088_read_write_byte>
 8001356:	4603      	mov	r3, r0
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	f7ff ff63 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800135e:	2096      	movs	r0, #150	@ 0x96
 8001360:	f7ff ff0c 	bl	800117c <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b1e      	cmp	r3, #30
 8001368:	d001      	beq.n	800136e <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 800136a:	23ff      	movs	r3, #255	@ 0xff
 800136c:	e052      	b.n	8001414 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800136e:	2300      	movs	r3, #0
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e04b      	b.n	800140c <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 8001374:	f7ff ff46 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	4928      	ldr	r1, [pc, #160]	@ (800141c <BMI088_accel_init+0x16c>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	440b      	add	r3, r1
 8001384:	7818      	ldrb	r0, [r3, #0]
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4924      	ldr	r1, [pc, #144]	@ (800141c <BMI088_accel_init+0x16c>)
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	440b      	add	r3, r1
 8001392:	3301      	adds	r3, #1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	f000 fa08 	bl	80017ac <BMI088_write_single_reg>
 800139c:	f7ff ff42 	bl	8001224 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80013a0:	2096      	movs	r0, #150	@ 0x96
 80013a2:	f7ff feeb 	bl	800117c <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80013a6:	f7ff ff2d 	bl	8001204 <BMI088_ACCEL_NS_L>
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	491b      	ldr	r1, [pc, #108]	@ (800141c <BMI088_accel_init+0x16c>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff60 	bl	8001284 <BMI088_read_write_byte>
 80013c4:	2055      	movs	r0, #85	@ 0x55
 80013c6:	f7ff ff5d 	bl	8001284 <BMI088_read_write_byte>
 80013ca:	2055      	movs	r0, #85	@ 0x55
 80013cc:	f7ff ff5a 	bl	8001284 <BMI088_read_write_byte>
 80013d0:	4603      	mov	r3, r0
 80013d2:	71bb      	strb	r3, [r7, #6]
 80013d4:	f7ff ff26 	bl	8001224 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80013d8:	2096      	movs	r0, #150	@ 0x96
 80013da:	f7ff fecf 	bl	800117c <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	490e      	ldr	r1, [pc, #56]	@ (800141c <BMI088_accel_init+0x16c>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	3301      	adds	r3, #1
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d008      	beq.n	8001406 <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4909      	ldr	r1, [pc, #36]	@ (800141c <BMI088_accel_init+0x16c>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	440b      	add	r3, r1
 8001400:	3302      	adds	r3, #2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	e006      	b.n	8001414 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	3301      	adds	r3, #1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d9b0      	bls.n	8001374 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000018 	.word	0x20000018

08001420 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800142e:	f7ff ff09 	bl	8001244 <BMI088_GYRO_NS_L>
 8001432:	1dbb      	adds	r3, r7, #6
 8001434:	4619      	mov	r1, r3
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f9cc 	bl	80017d4 <BMI088_read_single_reg>
 800143c:	f7ff ff12 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001440:	2096      	movs	r0, #150	@ 0x96
 8001442:	f7ff fe9b 	bl	800117c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001446:	f7ff fefd 	bl	8001244 <BMI088_GYRO_NS_L>
 800144a:	1dbb      	adds	r3, r7, #6
 800144c:	4619      	mov	r1, r3
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f9c0 	bl	80017d4 <BMI088_read_single_reg>
 8001454:	f7ff ff06 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001458:	2096      	movs	r0, #150	@ 0x96
 800145a:	f7ff fe8f 	bl	800117c <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800145e:	f7ff fef1 	bl	8001244 <BMI088_GYRO_NS_L>
 8001462:	21b6      	movs	r1, #182	@ 0xb6
 8001464:	2014      	movs	r0, #20
 8001466:	f000 f9a1 	bl	80017ac <BMI088_write_single_reg>
 800146a:	f7ff fefb 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800146e:	2050      	movs	r0, #80	@ 0x50
 8001470:	f7ff fe70 	bl	8001154 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001474:	f7ff fee6 	bl	8001244 <BMI088_GYRO_NS_L>
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	4619      	mov	r1, r3
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f9a9 	bl	80017d4 <BMI088_read_single_reg>
 8001482:	f7ff feef 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001486:	2096      	movs	r0, #150	@ 0x96
 8001488:	f7ff fe78 	bl	800117c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800148c:	f7ff feda 	bl	8001244 <BMI088_GYRO_NS_L>
 8001490:	1dbb      	adds	r3, r7, #6
 8001492:	4619      	mov	r1, r3
 8001494:	2000      	movs	r0, #0
 8001496:	f000 f99d 	bl	80017d4 <BMI088_read_single_reg>
 800149a:	f7ff fee3 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800149e:	2096      	movs	r0, #150	@ 0x96
 80014a0:	f7ff fe6c 	bl	800117c <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	d001      	beq.n	80014ae <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80014aa:	23ff      	movs	r3, #255	@ 0xff
 80014ac:	e049      	b.n	8001542 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e042      	b.n	800153a <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80014b4:	f7ff fec6 	bl	8001244 <BMI088_GYRO_NS_L>
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	4924      	ldr	r1, [pc, #144]	@ (800154c <BMI088_gyro_init+0x12c>)
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	7818      	ldrb	r0, [r3, #0]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	4920      	ldr	r1, [pc, #128]	@ (800154c <BMI088_gyro_init+0x12c>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	3301      	adds	r3, #1
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	f000 f968 	bl	80017ac <BMI088_write_single_reg>
 80014dc:	f7ff fec2 	bl	8001264 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80014e0:	2096      	movs	r0, #150	@ 0x96
 80014e2:	f7ff fe4b 	bl	800117c <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 80014e6:	f7ff fead 	bl	8001244 <BMI088_GYRO_NS_L>
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4917      	ldr	r1, [pc, #92]	@ (800154c <BMI088_gyro_init+0x12c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	1dba      	adds	r2, r7, #6
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f969 	bl	80017d4 <BMI088_read_single_reg>
 8001502:	f7ff feaf 	bl	8001264 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001506:	2096      	movs	r0, #150	@ 0x96
 8001508:	f7ff fe38 	bl	800117c <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	490f      	ldr	r1, [pc, #60]	@ (800154c <BMI088_gyro_init+0x12c>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	440b      	add	r3, r1
 8001518:	3301      	adds	r3, #1
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	429a      	cmp	r2, r3
 8001520:	d008      	beq.n	8001534 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	4909      	ldr	r1, [pc, #36]	@ (800154c <BMI088_gyro_init+0x12c>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	440b      	add	r3, r1
 800152e:	3302      	adds	r3, #2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	e006      	b.n	8001542 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	3301      	adds	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d9b9      	bls.n	80014b4 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000002c 	.word	0x2000002c

08001550 <IMU_get_gyro>:

float IMU_get_gyro(axis_t axis) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	BMI088_read(gyro, accel, &temp);
 800155a:	4a10      	ldr	r2, [pc, #64]	@ (800159c <IMU_get_gyro+0x4c>)
 800155c:	4910      	ldr	r1, [pc, #64]	@ (80015a0 <IMU_get_gyro+0x50>)
 800155e:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <IMU_get_gyro+0x54>)
 8001560:	f000 f836 	bl	80015d0 <BMI088_read>
	if(axis == x){
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <IMU_get_gyro+0x20>
		return gyro[0];
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <IMU_get_gyro+0x54>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	e00d      	b.n	800158c <IMU_get_gyro+0x3c>
	} else if (axis == y) {
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <IMU_get_gyro+0x2c>
		return gyro[1];
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <IMU_get_gyro+0x54>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	e007      	b.n	800158c <IMU_get_gyro+0x3c>
	} else if (axis == z) {
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d102      	bne.n	8001588 <IMU_get_gyro+0x38>
		return gyro[2];
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <IMU_get_gyro+0x54>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	e001      	b.n	800158c <IMU_get_gyro+0x3c>
	} else {
		return 0;
 8001588:	f04f 0300 	mov.w	r3, #0
	}
}
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002b0 	.word	0x200002b0
 80015a0:	200002a4 	.word	0x200002a4
 80015a4:	20000298 	.word	0x20000298

080015a8 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80015ac:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <IMU_get_temp+0x1c>)
 80015ae:	4906      	ldr	r1, [pc, #24]	@ (80015c8 <IMU_get_temp+0x20>)
 80015b0:	4806      	ldr	r0, [pc, #24]	@ (80015cc <IMU_get_temp+0x24>)
 80015b2:	f000 f80d 	bl	80015d0 <BMI088_read>
	return temp;
 80015b6:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <IMU_get_temp+0x1c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	ee07 3a90 	vmov	s15, r3
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200002b0 	.word	0x200002b0
 80015c8:	200002a4 	.word	0x200002a4
 80015cc:	20000298 	.word	0x20000298

080015d0 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80015dc:	4a70      	ldr	r2, [pc, #448]	@ (80017a0 <BMI088_read+0x1d0>)
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e6:	6018      	str	r0, [r3, #0]
 80015e8:	3304      	adds	r3, #4
 80015ea:	8019      	strh	r1, [r3, #0]
 80015ec:	3302      	adds	r3, #2
 80015ee:	0c0a      	lsrs	r2, r1, #16
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80015f6:	f7ff fe05 	bl	8001204 <BMI088_ACCEL_NS_L>
 80015fa:	2092      	movs	r0, #146	@ 0x92
 80015fc:	f7ff fe42 	bl	8001284 <BMI088_read_write_byte>
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2206      	movs	r2, #6
 8001606:	4619      	mov	r1, r3
 8001608:	2012      	movs	r0, #18
 800160a:	f000 f8fb 	bl	8001804 <BMI088_read_muli_reg>
 800160e:	f7ff fe09 	bl	8001224 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8001612:	7d7b      	ldrb	r3, [r7, #21]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7d3b      	ldrb	r3, [r7, #20]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001620:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162c:	4b5d      	ldr	r3, [pc, #372]	@ (80017a4 <BMI088_read+0x1d4>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7dbb      	ldrb	r3, [r7, #22]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800164a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	4b53      	ldr	r3, [pc, #332]	@ (80017a4 <BMI088_read+0x1d4>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3304      	adds	r3, #4
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001668:	7e7b      	ldrb	r3, [r7, #25]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7e3b      	ldrb	r3, [r7, #24]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001676:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001682:	4b48      	ldr	r3, [pc, #288]	@ (80017a4 <BMI088_read+0x1d4>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3308      	adds	r3, #8
 800168c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001690:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8001694:	f7ff fdd6 	bl	8001244 <BMI088_GYRO_NS_L>
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2208      	movs	r2, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f8af 	bl	8001804 <BMI088_read_muli_reg>
 80016a6:	f7ff fddd 	bl	8001264 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80016aa:	7d3b      	ldrb	r3, [r7, #20]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d140      	bne.n	8001732 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80016be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <BMI088_read+0x1d8>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80016da:	7e7b      	ldrb	r3, [r7, #25]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	7e3b      	ldrb	r3, [r7, #24]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <BMI088_read+0x1d8>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3304      	adds	r3, #4
 80016fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001702:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8001706:	7efb      	ldrb	r3, [r7, #27]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7ebb      	ldrb	r3, [r7, #26]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001714:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <BMI088_read+0x1d8>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3308      	adds	r3, #8
 800172a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172e:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001732:	f7ff fd67 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001736:	20a2      	movs	r0, #162	@ 0xa2
 8001738:	f7ff fda4 	bl	8001284 <BMI088_read_write_byte>
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2202      	movs	r2, #2
 8001742:	4619      	mov	r1, r3
 8001744:	2022      	movs	r0, #34	@ 0x22
 8001746:	f000 f85d 	bl	8001804 <BMI088_read_muli_reg>
 800174a:	f7ff fd6b 	bl	8001224 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 800174e:	7d3b      	ldrb	r3, [r7, #20]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	b21a      	sxth	r2, r3
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	b2db      	uxtb	r3, r3
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001760:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001768:	db04      	blt.n	8001774 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 800176a:	8bfb      	ldrh	r3, [r7, #30]
 800176c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001770:	b29b      	uxth	r3, r3
 8001772:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001774:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001788:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800178c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	edc3 7a00 	vstr	s15, [r3]
}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	08013c80 	.word	0x08013c80
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000014 	.word	0x20000014

080017ac <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	460a      	mov	r2, r1
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	4613      	mov	r3, r2
 80017ba:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fd60 	bl	8001284 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fd5c 	bl	8001284 <BMI088_read_write_byte>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fd4b 	bl	8001284 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80017ee:	2055      	movs	r0, #85	@ 0x55
 80017f0:	f7ff fd48 	bl	8001284 <BMI088_read_write_byte>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	701a      	strb	r2, [r3, #0]
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fd31 	bl	8001284 <BMI088_read_write_byte>

    while (len != 0)
 8001822:	e00c      	b.n	800183e <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001824:	2055      	movs	r0, #85	@ 0x55
 8001826:	f7ff fd2d 	bl	8001284 <BMI088_read_write_byte>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	701a      	strb	r2, [r3, #0]
        buf++;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	603b      	str	r3, [r7, #0]
        len--;
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	3b01      	subs	r3, #1
 800183c:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ef      	bne.n	8001824 <BMI088_read_muli_reg+0x20>
    }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	f107 0210 	add.w	r2, r7, #16
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f005 ff4c 	bl	8007700 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800186e:	d813      	bhi.n	8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8001870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001874:	f240 809c 	bls.w	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8001878:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800187c:	2b03      	cmp	r3, #3
 800187e:	f200 8097 	bhi.w	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800198d 	.word	0x0800198d
 800188c:	0800199f 	.word	0x0800199f
 8001890:	080019b1 	.word	0x080019b1
 8001894:	080019b1 	.word	0x080019b1
 8001898:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800189c:	2b0a      	cmp	r3, #10
 800189e:	f200 8087 	bhi.w	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a44      	ldr	r2, [pc, #272]	@ (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d131      	bne.n	8001918 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 80018b4:	7a3b      	ldrb	r3, [r7, #8]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	7a7b      	ldrb	r3, [r7, #9]
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018c6:	b291      	uxth	r1, r2
 80018c8:	4a3e      	ldr	r2, [pc, #248]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80018ca:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80018ce:	7abb      	ldrb	r3, [r7, #10]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b219      	sxth	r1, r3
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018dc:	430a      	orrs	r2, r1
 80018de:	b211      	sxth	r1, r2
 80018e0:	4a38      	ldr	r2, [pc, #224]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	460a      	mov	r2, r1
 80018e8:	805a      	strh	r2, [r3, #2]
 80018ea:	7b3b      	ldrb	r3, [r7, #12]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b219      	sxth	r1, r3
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018f8:	430a      	orrs	r2, r1
 80018fa:	b211      	sxth	r1, r2
 80018fc:	4a31      	ldr	r2, [pc, #196]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	460a      	mov	r2, r1
 8001904:	809a      	strh	r2, [r3, #4]
 8001906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800190a:	7bb9      	ldrb	r1, [r7, #14]
 800190c:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	460a      	mov	r2, r1
 8001914:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8001916:	e04d      	b.n	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a2b      	ldr	r2, [pc, #172]	@ (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d149      	bne.n	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001920:	7a3b      	ldrb	r3, [r7, #8]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	7a7b      	ldrb	r3, [r7, #9]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001932:	b291      	uxth	r1, r2
 8001934:	4a23      	ldr	r2, [pc, #140]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001936:	330b      	adds	r3, #11
 8001938:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800193c:	7abb      	ldrb	r3, [r7, #10]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b219      	sxth	r1, r3
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	b21a      	sxth	r2, r3
 8001946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800194a:	430a      	orrs	r2, r1
 800194c:	b211      	sxth	r1, r2
 800194e:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001950:	330b      	adds	r3, #11
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	805a      	strh	r2, [r3, #2]
 800195a:	7b3b      	ldrb	r3, [r7, #12]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b219      	sxth	r1, r3
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	b21a      	sxth	r2, r3
 8001964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001968:	430a      	orrs	r2, r1
 800196a:	b211      	sxth	r1, r2
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800196e:	330b      	adds	r3, #11
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	460a      	mov	r2, r1
 8001976:	809a      	strh	r2, [r3, #4]
 8001978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800197c:	7bb9      	ldrb	r1, [r7, #14]
 800197e:	4a11      	ldr	r2, [pc, #68]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001980:	330b      	adds	r3, #11
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	460a      	mov	r2, r1
 8001988:	719a      	strb	r2, [r3, #6]
            break;
 800198a:	e013      	b.n	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800198e:	461a      	mov	r2, r3
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001998:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 800199c:	e00b      	b.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80019a0:	3308      	adds	r3, #8
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019aa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80019ae:	e002      	b.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 80019b4:	bf00      	nop
        }
    }
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	@ 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200008dc 	.word	0x200008dc
 80019c4:	20000304 	.word	0x20000304
 80019c8:	20000904 	.word	0x20000904
 80019cc:	20000714 	.word	0x20000714

080019d0 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	4603      	mov	r3, r0
 80019e4:	80bb      	strh	r3, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	4a27      	ldr	r2, [pc, #156]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 80019f2:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 80019f4:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 80019fa:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8001a06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a0a:	121b      	asrs	r3, r3, #8
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a12:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a1a:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8001a1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a20:	121b      	asrs	r3, r3, #8
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a28:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8001a2a:	883b      	ldrh	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a30:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8001a32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a36:	121b      	asrs	r3, r3, #8
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a3e:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001a40:	8c3b      	ldrh	r3, [r7, #32]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a46:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8001a48:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001a4c:	121b      	asrs	r3, r3, #8
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a54:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8001a56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a5c:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a6a:	4909      	ldr	r1, [pc, #36]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 8001a6c:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <CAN_DriveMotor+0xc8>)
 8001a6e:	f005 fd77 	bl	8007560 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8001a72:	e009      	b.n	8001a88 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d106      	bne.n	8001a88 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a80:	4903      	ldr	r1, [pc, #12]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <CAN_DriveMotor+0xcc>)
 8001a84:	f005 fd6c 	bl	8007560 <HAL_CAN_AddTxMessage>
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	200002b4 	.word	0x200002b4
 8001a94:	200002cc 	.word	0x200002cc
 8001a98:	200008dc 	.word	0x200008dc
 8001a9c:	20000904 	.word	0x20000904

08001aa0 <CAN_defineMotor>:

void CAN_defineMotor(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	71bb      	strb	r3, [r7, #6]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	717b      	strb	r3, [r7, #5]
	switch(motorType) {
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	dc02      	bgt.n	8001abe <CAN_defineMotor+0x1e>
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dc03      	bgt.n	8001ac4 <CAN_defineMotor+0x24>
 8001abc:	e082      	b.n	8001bc4 <CAN_defineMotor+0x124>
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d03a      	beq.n	8001b38 <CAN_defineMotor+0x98>
 8001ac2:	e07f      	b.n	8001bc4 <CAN_defineMotor+0x124>
		case (1) :
		case (2) : {
			switch(motorID) {
 8001ac4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	dc02      	bgt.n	8001ad2 <CAN_defineMotor+0x32>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dc04      	bgt.n	8001ada <CAN_defineMotor+0x3a>
 8001ad0:	e02a      	b.n	8001b28 <CAN_defineMotor+0x88>
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d827      	bhi.n	8001b28 <CAN_defineMotor+0x88>
 8001ad8:	e012      	b.n	8001b00 <CAN_defineMotor+0x60>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group1[motorID - 1], motorType);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ae2:	1e59      	subs	r1, r3, #1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	4a39      	ldr	r2, [pc, #228]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001af2:	4413      	add	r3, r2
 8001af4:	79ba      	ldrb	r2, [r7, #6]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f875 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001afe:	e01a      	b.n	8001b36 <CAN_defineMotor+0x96>
				}
				case (5):
				case (6):
				case (7):
				case (8): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	1e5a      	subs	r2, r3, #1
 8001b04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b08:	1e59      	subs	r1, r3, #1
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	4a30      	ldr	r2, [pc, #192]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	79ba      	ldrb	r2, [r7, #6]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f861 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001b26:	e006      	b.n	8001b36 <CAN_defineMotor+0x96>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001b28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482b      	ldr	r0, [pc, #172]	@ (8001bdc <CAN_defineMotor+0x13c>)
 8001b30:	f000 fee2 	bl	80028f8 <usart_printf>
					break;
 8001b34:	bf00      	nop
				}
			}
			break;
 8001b36:	e04b      	b.n	8001bd0 <CAN_defineMotor+0x130>
		}
		case (3): {
			switch(motorID) {
 8001b38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d032      	beq.n	8001ba6 <CAN_defineMotor+0x106>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	dc37      	bgt.n	8001bb4 <CAN_defineMotor+0x114>
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	dc02      	bgt.n	8001b4e <CAN_defineMotor+0xae>
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	dc04      	bgt.n	8001b56 <CAN_defineMotor+0xb6>
 8001b4c:	e032      	b.n	8001bb4 <CAN_defineMotor+0x114>
 8001b4e:	3b05      	subs	r3, #5
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d82f      	bhi.n	8001bb4 <CAN_defineMotor+0x114>
 8001b54:	e013      	b.n	8001b7e <CAN_defineMotor+0xde>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b5e:	1e59      	subs	r1, r3, #1
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	3304      	adds	r3, #4
 8001b72:	79ba      	ldrb	r2, [r7, #6]
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f836 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001b7c:	e021      	b.n	8001bc2 <CAN_defineMotor+0x122>
				}
				case (5):
				case (6):
				case (7): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group3[motorID - 5], motorType);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b86:	1f59      	subs	r1, r3, #5
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	3308      	adds	r3, #8
 8001b96:	4a10      	ldr	r2, [pc, #64]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001b98:	4413      	add	r3, r2
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f822 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001ba4:	e00d      	b.n	8001bc2 <CAN_defineMotor+0x122>
				}
				case (8): {               // call the user a dumbass for spawning an ID 8 on 0x2FF
					usart_printf("WARNING - motor ID 8 is not available for GM6020s according to DJI's CAN protocols \r\n", motorID);
 8001ba6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001baa:	4619      	mov	r1, r3
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <CAN_defineMotor+0x140>)
 8001bae:	f000 fea3 	bl	80028f8 <usart_printf>
					break;
 8001bb2:	e006      	b.n	8001bc2 <CAN_defineMotor+0x122>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001bb4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <CAN_defineMotor+0x13c>)
 8001bbc:	f000 fe9c 	bl	80028f8 <usart_printf>
					break;
 8001bc0:	bf00      	nop
				}
			}
			break;
 8001bc2:	e005      	b.n	8001bd0 <CAN_defineMotor+0x130>
		}
		default: {
			usart_printf("WARNING - motor type %d does not match any registered motors \r\n", motorType);
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4806      	ldr	r0, [pc, #24]	@ (8001be4 <CAN_defineMotor+0x144>)
 8001bca:	f000 fe95 	bl	80028f8 <usart_printf>
			break;
 8001bce:	bf00      	nop
		}
	}
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000040 	.word	0x20000040
 8001bdc:	08013c88 	.word	0x08013c88
 8001be0:	08013cc8 	.word	0x08013cc8
 8001be4:	08013d20 	.word	0x08013d20

08001be8 <CAN_setMotorDefinition>:

void CAN_setMotorDefinition(int8_t *Declaration, MotorType_ID motorType) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
	if (*Declaration == -1) {    // ok
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bfe:	d104      	bne.n	8001c0a <CAN_setMotorDefinition+0x22>
		*Declaration = motorType;
 8001c00:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	701a      	strb	r2, [r3, #0]
	} else {                           // repeat definition, do nothing
		usart_printf("WARNING - motor ID has already been set \r\n");
	}
}
 8001c08:	e002      	b.n	8001c10 <CAN_setMotorDefinition+0x28>
		usart_printf("WARNING - motor ID has already been set \r\n");
 8001c0a:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <CAN_setMotorDefinition+0x30>)
 8001c0c:	f000 fe74 	bl	80028f8 <usart_printf>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	08013d60 	.word	0x08013d60

08001c1c <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	4604      	mov	r4, r0
 8001c24:	4608      	mov	r0, r1
 8001c26:	4611      	mov	r1, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	460b      	mov	r3, r1
 8001c34:	717b      	strb	r3, [r7, #5]
 8001c36:	4613      	mov	r3, r2
 8001c38:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	f000 8142 	beq.w	8001ec6 <CAN_setMotorCtrlVal+0x2aa>
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	f300 81e1 	bgt.w	800200a <CAN_setMotorCtrlVal+0x3ee>
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	dc02      	bgt.n	8001c52 <CAN_setMotorCtrlVal+0x36>
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dc04      	bgt.n	8001c5a <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8001c50:	e1db      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	f000 8097 	beq.w	8001d86 <CAN_setMotorCtrlVal+0x16a>
}
 8001c58:	e1d7      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001c5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	dc02      	bgt.n	8001c68 <CAN_setMotorCtrlVal+0x4c>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dc05      	bgt.n	8001c72 <CAN_setMotorCtrlVal+0x56>
					break;
 8001c66:	e08c      	b.n	8001d82 <CAN_setMotorCtrlVal+0x166>
 8001c68:	3b05      	subs	r3, #5
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	f200 8089 	bhi.w	8001d82 <CAN_setMotorCtrlVal+0x166>
 8001c70:	e042      	b.n	8001cf8 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	1e5a      	subs	r2, r3, #1
 8001c76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c7a:	1e59      	subs	r1, r3, #1
 8001c7c:	48bd      	ldr	r0, [pc, #756]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	887a      	ldrh	r2, [r7, #2]
 8001c8a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	49b8      	ldr	r1, [pc, #736]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	49b3      	ldr	r1, [pc, #716]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	49ad      	ldr	r1, [pc, #692]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3304      	adds	r3, #4
 8001cca:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	48a8      	ldr	r0, [pc, #672]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4403      	add	r3, r0
 8001cde:	3306      	adds	r3, #6
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	79f8      	ldrb	r0, [r7, #7]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	9100      	str	r1, [sp, #0]
 8001cea:	462b      	mov	r3, r5
 8001cec:	4622      	mov	r2, r4
 8001cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cf2:	f7ff fe6d 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001cf6:	e045      	b.n	8001d84 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d00:	1f59      	subs	r1, r3, #5
 8001d02:	489c      	ldr	r0, [pc, #624]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3304      	adds	r3, #4
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	4996      	ldr	r1, [pc, #600]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	3308      	adds	r3, #8
 8001d28:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	1e5a      	subs	r2, r3, #1
 8001d30:	4990      	ldr	r1, [pc, #576]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	330a      	adds	r3, #10
 8001d3e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	498b      	ldr	r1, [pc, #556]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	330c      	adds	r3, #12
 8001d54:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	4885      	ldr	r0, [pc, #532]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4403      	add	r3, r0
 8001d68:	330e      	adds	r3, #14
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	79f8      	ldrb	r0, [r7, #7]
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	9100      	str	r1, [sp, #0]
 8001d74:	462b      	mov	r3, r5
 8001d76:	4622      	mov	r2, r4
 8001d78:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001d7c:	f7ff fe28 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001d80:	e000      	b.n	8001d84 <CAN_setMotorCtrlVal+0x168>
					break;
 8001d82:	bf00      	nop
			break;
 8001d84:	e141      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001d86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	f000 8097 	beq.w	8001ebe <CAN_setMotorCtrlVal+0x2a2>
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	f300 8096 	bgt.w	8001ec2 <CAN_setMotorCtrlVal+0x2a6>
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	dc02      	bgt.n	8001da0 <CAN_setMotorCtrlVal+0x184>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dc05      	bgt.n	8001daa <CAN_setMotorCtrlVal+0x18e>
					break;
 8001d9e:	e090      	b.n	8001ec2 <CAN_setMotorCtrlVal+0x2a6>
 8001da0:	3b05      	subs	r3, #5
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	f200 808d 	bhi.w	8001ec2 <CAN_setMotorCtrlVal+0x2a6>
 8001da8:	e044      	b.n	8001e34 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001db2:	1e59      	subs	r1, r3, #1
 8001db4:	486f      	ldr	r0, [pc, #444]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	4969      	ldr	r1, [pc, #420]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3308      	adds	r3, #8
 8001dda:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	4964      	ldr	r1, [pc, #400]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	330a      	adds	r3, #10
 8001df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	1e5a      	subs	r2, r3, #1
 8001df8:	495e      	ldr	r1, [pc, #376]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	330c      	adds	r3, #12
 8001e06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	4859      	ldr	r0, [pc, #356]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4403      	add	r3, r0
 8001e1a:	330e      	adds	r3, #14
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	79f8      	ldrb	r0, [r7, #7]
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	9100      	str	r1, [sp, #0]
 8001e26:	462b      	mov	r3, r5
 8001e28:	4622      	mov	r2, r4
 8001e2a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001e2e:	f7ff fdcf 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001e32:	e047      	b.n	8001ec4 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e3c:	1f59      	subs	r1, r3, #5
 8001e3e:	484d      	ldr	r0, [pc, #308]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	4947      	ldr	r1, [pc, #284]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3310      	adds	r3, #16
 8001e64:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	4941      	ldr	r1, [pc, #260]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3312      	adds	r3, #18
 8001e7a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	493c      	ldr	r1, [pc, #240]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3314      	adds	r3, #20
 8001e90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	4836      	ldr	r0, [pc, #216]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4403      	add	r3, r0
 8001ea4:	3316      	adds	r3, #22
 8001ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eaa:	79f8      	ldrb	r0, [r7, #7]
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	9100      	str	r1, [sp, #0]
 8001eb0:	462b      	mov	r3, r5
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001eb8:	f7ff fd8a 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001ebc:	e002      	b.n	8001ec4 <CAN_setMotorCtrlVal+0x2a8>
					break;
 8001ebe:	bf00      	nop
 8001ec0:	e0a3      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
					break;
 8001ec2:	bf00      	nop
			break;
 8001ec4:	e0a1      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001ec6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	f000 8099 	beq.w	8002002 <CAN_setMotorCtrlVal+0x3e6>
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	f300 8098 	bgt.w	8002006 <CAN_setMotorCtrlVal+0x3ea>
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	dc02      	bgt.n	8001ee0 <CAN_setMotorCtrlVal+0x2c4>
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dc05      	bgt.n	8001eea <CAN_setMotorCtrlVal+0x2ce>
					break;
 8001ede:	e092      	b.n	8002006 <CAN_setMotorCtrlVal+0x3ea>
 8001ee0:	3b05      	subs	r3, #5
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	f200 808f 	bhi.w	8002006 <CAN_setMotorCtrlVal+0x3ea>
 8001ee8:	e046      	b.n	8001f78 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ef2:	1e59      	subs	r1, r3, #1
 8001ef4:	481f      	ldr	r0, [pc, #124]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3304      	adds	r3, #4
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	1e5a      	subs	r2, r3, #1
 8001f0c:	4919      	ldr	r1, [pc, #100]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	3308      	adds	r3, #8
 8001f1a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	4914      	ldr	r1, [pc, #80]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	330a      	adds	r3, #10
 8001f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	1e5a      	subs	r2, r3, #1
 8001f38:	490e      	ldr	r1, [pc, #56]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	330c      	adds	r3, #12
 8001f46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	4809      	ldr	r0, [pc, #36]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4403      	add	r3, r0
 8001f5a:	330e      	adds	r3, #14
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	79f8      	ldrb	r0, [r7, #7]
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	9100      	str	r1, [sp, #0]
 8001f66:	462b      	mov	r3, r5
 8001f68:	4622      	mov	r2, r4
 8001f6a:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001f6e:	f7ff fd2f 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001f72:	e049      	b.n	8002008 <CAN_setMotorCtrlVal+0x3ec>
 8001f74:	200002d4 	.word	0x200002d4
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f80:	1f59      	subs	r1, r3, #5
 8001f82:	4824      	ldr	r0, [pc, #144]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3308      	adds	r3, #8
 8001f90:	887a      	ldrh	r2, [r7, #2]
 8001f92:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	491e      	ldr	r1, [pc, #120]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3310      	adds	r3, #16
 8001fa8:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	4918      	ldr	r1, [pc, #96]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	3312      	adds	r3, #18
 8001fbe:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	4913      	ldr	r1, [pc, #76]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	1e5a      	subs	r2, r3, #1
 8001fdc:	480d      	ldr	r0, [pc, #52]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4403      	add	r3, r0
 8001fe8:	3316      	adds	r3, #22
 8001fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fee:	79f8      	ldrb	r0, [r7, #7]
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	9100      	str	r1, [sp, #0]
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001ffc:	f7ff fce8 	bl	80019d0 <CAN_DriveMotor>
					break;
 8002000:	e002      	b.n	8002008 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002002:	bf00      	nop
 8002004:	e000      	b.n	8002008 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002006:	bf00      	nop
			break;
 8002008:	bf00      	nop
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bdb0      	pop	{r4, r5, r7, pc}
 8002012:	bf00      	nop
 8002014:	200002d4 	.word	0x200002d4

08002018 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b08b      	sub	sp, #44	@ 0x2c
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	eef0 6a40 	vmov.f32	s13, s0
 800202a:	eeb0 7a60 	vmov.f32	s14, s1
 800202e:	eef0 7a41 	vmov.f32	s15, s2
 8002032:	4623      	mov	r3, r4
 8002034:	75fb      	strb	r3, [r7, #23]
 8002036:	4603      	mov	r3, r0
 8002038:	75bb      	strb	r3, [r7, #22]
 800203a:	460b      	mov	r3, r1
 800203c:	757b      	strb	r3, [r7, #21]
 800203e:	4613      	mov	r3, r2
 8002040:	827b      	strh	r3, [r7, #18]
 8002042:	edc7 6a01 	vstr	s13, [r7, #4]
 8002046:	ed87 7a02 	vstr	s14, [r7, #8]
 800204a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	3b01      	subs	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8002058:	7dbb      	ldrb	r3, [r7, #22]
 800205a:	2b02      	cmp	r3, #2
 800205c:	dc02      	bgt.n	8002064 <calcRPM_PID+0x4c>
 800205e:	2b00      	cmp	r3, #0
 8002060:	dc04      	bgt.n	800206c <calcRPM_PID+0x54>
 8002062:	e00d      	b.n	8002080 <calcRPM_PID+0x68>
 8002064:	3b03      	subs	r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d80a      	bhi.n	8002080 <calcRPM_PID+0x68>
 800206a:	e004      	b.n	8002076 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 800206c:	7d7b      	ldrb	r3, [r7, #21]
 800206e:	3b01      	subs	r3, #1
 8002070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002074:	e009      	b.n	800208a <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8002076:	7d7b      	ldrb	r3, [r7, #21]
 8002078:	3303      	adds	r3, #3
 800207a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800207e:	e004      	b.n	800208a <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8002080:	7d7b      	ldrb	r3, [r7, #21]
 8002082:	3b01      	subs	r3, #1
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002088:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 800208a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800208e:	7ffa      	ldrb	r2, [r7, #31]
 8002090:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002094:	4c70      	ldr	r4, [pc, #448]	@ (8002258 <calcRPM_PID+0x240>)
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	4403      	add	r3, r0
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4423      	add	r3, r4
 80020a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020aa:	7ffa      	ldrb	r2, [r7, #31]
 80020ac:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020b0:	1ac9      	subs	r1, r1, r3
 80020b2:	4c6a      	ldr	r4, [pc, #424]	@ (800225c <calcRPM_PID+0x244>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	4403      	add	r3, r0
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4423      	add	r3, r4
 80020c4:	3304      	adds	r3, #4
 80020c6:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80020c8:	7ffa      	ldrb	r2, [r7, #31]
 80020ca:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80020ce:	4863      	ldr	r0, [pc, #396]	@ (800225c <calcRPM_PID+0x244>)
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	440b      	add	r3, r1
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4403      	add	r3, r0
 80020e0:	3308      	adds	r3, #8
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	7ffa      	ldrb	r2, [r7, #31]
 80020e6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020ea:	4c5c      	ldr	r4, [pc, #368]	@ (800225c <calcRPM_PID+0x244>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	4403      	add	r3, r0
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4423      	add	r3, r4
 80020fc:	3304      	adds	r3, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	7ffa      	ldrb	r2, [r7, #31]
 8002102:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002106:	4419      	add	r1, r3
 8002108:	4c54      	ldr	r4, [pc, #336]	@ (800225c <calcRPM_PID+0x244>)
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	4403      	add	r3, r0
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4423      	add	r3, r4
 800211a:	3308      	adds	r3, #8
 800211c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 800211e:	7ffa      	ldrb	r2, [r7, #31]
 8002120:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002124:	484d      	ldr	r0, [pc, #308]	@ (800225c <calcRPM_PID+0x244>)
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	440b      	add	r3, r1
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	4403      	add	r3, r0
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	7ffa      	ldrb	r2, [r7, #31]
 800213a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800213e:	4c46      	ldr	r4, [pc, #280]	@ (8002258 <calcRPM_PID+0x240>)
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	4403      	add	r3, r0
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4423      	add	r3, r4
 8002150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002154:	7ffa      	ldrb	r2, [r7, #31]
 8002156:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800215a:	1ac9      	subs	r1, r1, r3
 800215c:	4c3f      	ldr	r4, [pc, #252]	@ (800225c <calcRPM_PID+0x244>)
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	4403      	add	r3, r0
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	4423      	add	r3, r4
 800216e:	330c      	adds	r3, #12
 8002170:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8002172:	7ffa      	ldrb	r2, [r7, #31]
 8002174:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002178:	4837      	ldr	r0, [pc, #220]	@ (8002258 <calcRPM_PID+0x240>)
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	440b      	add	r3, r1
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4403      	add	r3, r0
 800218a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800218e:	7ffa      	ldrb	r2, [r7, #31]
 8002190:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002194:	461c      	mov	r4, r3
 8002196:	4831      	ldr	r0, [pc, #196]	@ (800225c <calcRPM_PID+0x244>)
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	4403      	add	r3, r0
 80021a8:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80021aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80021ae:	7ffa      	ldrb	r2, [r7, #31]
 80021b0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021b4:	4829      	ldr	r0, [pc, #164]	@ (800225c <calcRPM_PID+0x244>)
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4403      	add	r3, r0
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80021da:	7ffa      	ldrb	r2, [r7, #31]
 80021dc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021e0:	481e      	ldr	r0, [pc, #120]	@ (800225c <calcRPM_PID+0x244>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4403      	add	r3, r0
 80021f2:	3308      	adds	r3, #8
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002206:	edd7 6a03 	vldr	s13, [r7, #12]
 800220a:	7ffa      	ldrb	r2, [r7, #31]
 800220c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002210:	4812      	ldr	r0, [pc, #72]	@ (800225c <calcRPM_PID+0x244>)
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	440b      	add	r3, r1
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4403      	add	r3, r0
 8002222:	330c      	adds	r3, #12
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223a:	ee17 3a90 	vmov	r3, s15
 800223e:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8002240:	7dbb      	ldrb	r3, [r7, #22]
 8002242:	6a39      	ldr	r1, [r7, #32]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f997 	bl	8002578 <applyCtrlLimit>
 800224a:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 800224c:	6a3b      	ldr	r3, [r7, #32]
}
 800224e:	4618      	mov	r0, r3
 8002250:	372c      	adds	r7, #44	@ 0x2c
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop
 8002258:	20000304 	.word	0x20000304
 800225c:	200003b4 	.word	0x200003b4

08002260 <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b08b      	sub	sp, #44	@ 0x2c
 8002264:	af00      	add	r7, sp, #0
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	eef0 6a40 	vmov.f32	s13, s0
 8002272:	eeb0 7a60 	vmov.f32	s14, s1
 8002276:	eef0 7a41 	vmov.f32	s15, s2
 800227a:	4623      	mov	r3, r4
 800227c:	75fb      	strb	r3, [r7, #23]
 800227e:	4603      	mov	r3, r0
 8002280:	75bb      	strb	r3, [r7, #22]
 8002282:	460b      	mov	r3, r1
 8002284:	757b      	strb	r3, [r7, #21]
 8002286:	4613      	mov	r3, r2
 8002288:	827b      	strh	r3, [r7, #18]
 800228a:	edc7 6a01 	vstr	s13, [r7, #4]
 800228e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002292:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	3b01      	subs	r3, #1
 800229e:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 80022a8:	7dbb      	ldrb	r3, [r7, #22]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	dc02      	bgt.n	80022b4 <calcPosition_PID+0x54>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	dc04      	bgt.n	80022bc <calcPosition_PID+0x5c>
 80022b2:	e00d      	b.n	80022d0 <calcPosition_PID+0x70>
 80022b4:	3b03      	subs	r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d80a      	bhi.n	80022d0 <calcPosition_PID+0x70>
 80022ba:	e004      	b.n	80022c6 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 80022bc:	7d7b      	ldrb	r3, [r7, #21]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022c4:	e009      	b.n	80022da <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80022c6:	7d7b      	ldrb	r3, [r7, #21]
 80022c8:	3303      	adds	r3, #3
 80022ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022ce:	e004      	b.n	80022da <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 80022d0:	7d7b      	ldrb	r3, [r7, #21]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022d8:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 80022da:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80022de:	7ffa      	ldrb	r2, [r7, #31]
 80022e0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80022e4:	4ca2      	ldr	r4, [pc, #648]	@ (8002570 <calcPosition_PID+0x310>)
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	4403      	add	r3, r0
 80022f2:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80022f6:	1acb      	subs	r3, r1, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db10      	blt.n	800231e <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 80022fc:	8a79      	ldrh	r1, [r7, #18]
 80022fe:	7ffa      	ldrb	r2, [r7, #31]
 8002300:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002304:	4c9a      	ldr	r4, [pc, #616]	@ (8002570 <calcPosition_PID+0x310>)
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	4403      	add	r3, r0
 8002312:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002316:	1acb      	subs	r3, r1, r3
 8002318:	b29b      	uxth	r3, r3
 800231a:	83bb      	strh	r3, [r7, #28]
 800231c:	e012      	b.n	8002344 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 800231e:	8a79      	ldrh	r1, [r7, #18]
 8002320:	7ffa      	ldrb	r2, [r7, #31]
 8002322:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002326:	4c92      	ldr	r4, [pc, #584]	@ (8002570 <calcPosition_PID+0x310>)
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	4403      	add	r3, r0
 8002334:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002338:	1acb      	subs	r3, r1, r3
 800233a:	b29b      	uxth	r3, r3
 800233c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002340:	b29b      	uxth	r3, r3
 8002342:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8002344:	7ffa      	ldrb	r2, [r7, #31]
 8002346:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800234a:	4889      	ldr	r0, [pc, #548]	@ (8002570 <calcPosition_PID+0x310>)
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	440b      	add	r3, r1
 8002358:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800235c:	461a      	mov	r2, r3
 800235e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	db10      	blt.n	800238a <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8002368:	7ffa      	ldrb	r2, [r7, #31]
 800236a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800236e:	4880      	ldr	r0, [pc, #512]	@ (8002570 <calcPosition_PID+0x310>)
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	440b      	add	r3, r1
 800237c:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002380:	8a7b      	ldrh	r3, [r7, #18]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	837b      	strh	r3, [r7, #26]
 8002388:	e012      	b.n	80023b0 <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 800238a:	7ffa      	ldrb	r2, [r7, #31]
 800238c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002390:	4877      	ldr	r0, [pc, #476]	@ (8002570 <calcPosition_PID+0x310>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	440b      	add	r3, r1
 800239e:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 80023a2:	8a7b      	ldrh	r3, [r7, #18]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 80023b0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80023b4:	7ffa      	ldrb	r2, [r7, #31]
 80023b6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80023ba:	4c6d      	ldr	r4, [pc, #436]	@ (8002570 <calcPosition_PID+0x310>)
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	4403      	add	r3, r0
 80023c8:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80023cc:	7ffa      	ldrb	r2, [r7, #31]
 80023ce:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80023d2:	1ac9      	subs	r1, r1, r3
 80023d4:	4c67      	ldr	r4, [pc, #412]	@ (8002574 <calcPosition_PID+0x314>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	4403      	add	r3, r0
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4423      	add	r3, r4
 80023e6:	3304      	adds	r3, #4
 80023e8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80023ea:	7ffa      	ldrb	r2, [r7, #31]
 80023ec:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80023f0:	4860      	ldr	r0, [pc, #384]	@ (8002574 <calcPosition_PID+0x314>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4403      	add	r3, r0
 8002402:	3308      	adds	r3, #8
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	7ffa      	ldrb	r2, [r7, #31]
 8002408:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800240c:	4c59      	ldr	r4, [pc, #356]	@ (8002574 <calcPosition_PID+0x314>)
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	4403      	add	r3, r0
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4423      	add	r3, r4
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	7ffa      	ldrb	r2, [r7, #31]
 8002424:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002428:	4419      	add	r1, r3
 800242a:	4c52      	ldr	r4, [pc, #328]	@ (8002574 <calcPosition_PID+0x314>)
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	4403      	add	r3, r0
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4423      	add	r3, r4
 800243c:	3308      	adds	r3, #8
 800243e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 8002440:	7ffa      	ldrb	r2, [r7, #31]
 8002442:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002446:	484b      	ldr	r0, [pc, #300]	@ (8002574 <calcPosition_PID+0x314>)
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	440b      	add	r3, r1
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	4403      	add	r3, r0
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	7ffa      	ldrb	r2, [r7, #31]
 800245c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002460:	4c43      	ldr	r4, [pc, #268]	@ (8002570 <calcPosition_PID+0x310>)
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	4403      	add	r3, r0
 800246e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002472:	7ffa      	ldrb	r2, [r7, #31]
 8002474:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002478:	1ac9      	subs	r1, r1, r3
 800247a:	4c3e      	ldr	r4, [pc, #248]	@ (8002574 <calcPosition_PID+0x314>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	4403      	add	r3, r0
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4423      	add	r3, r4
 800248c:	330c      	adds	r3, #12
 800248e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8002490:	7ffa      	ldrb	r2, [r7, #31]
 8002492:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002496:	4836      	ldr	r0, [pc, #216]	@ (8002570 <calcPosition_PID+0x310>)
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80024a8:	7ffa      	ldrb	r2, [r7, #31]
 80024aa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024ae:	461c      	mov	r4, r3
 80024b0:	4830      	ldr	r0, [pc, #192]	@ (8002574 <calcPosition_PID+0x314>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	440b      	add	r3, r1
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4403      	add	r3, r0
 80024c2:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80024c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80024c8:	7ffa      	ldrb	r2, [r7, #31]
 80024ca:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024ce:	4829      	ldr	r0, [pc, #164]	@ (8002574 <calcPosition_PID+0x314>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	440b      	add	r3, r1
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	4403      	add	r3, r0
 80024e0:	3304      	adds	r3, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f0:	edd7 6a02 	vldr	s13, [r7, #8]
 80024f4:	7ffa      	ldrb	r2, [r7, #31]
 80024f6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024fa:	481e      	ldr	r0, [pc, #120]	@ (8002574 <calcPosition_PID+0x314>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	440b      	add	r3, r1
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4403      	add	r3, r0
 800250c:	3308      	adds	r3, #8
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002520:	edd7 6a03 	vldr	s13, [r7, #12]
 8002524:	7ffa      	ldrb	r2, [r7, #31]
 8002526:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800252a:	4812      	ldr	r0, [pc, #72]	@ (8002574 <calcPosition_PID+0x314>)
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	440b      	add	r3, r1
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4403      	add	r3, r0
 800253c:	330c      	adds	r3, #12
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002554:	ee17 3a90 	vmov	r3, s15
 8002558:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 800255a:	7dbb      	ldrb	r3, [r7, #22]
 800255c:	6a39      	ldr	r1, [r7, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f80a 	bl	8002578 <applyCtrlLimit>
 8002564:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8002566:	6a3b      	ldr	r3, [r7, #32]
}
 8002568:	4618      	mov	r0, r3
 800256a:	372c      	adds	r7, #44	@ 0x2c
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	20000304 	.word	0x20000304
 8002574:	200003b4 	.word	0x200003b4

08002578 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b04      	cmp	r3, #4
 8002588:	d009      	beq.n	800259e <applyCtrlLimit+0x26>
 800258a:	2b04      	cmp	r3, #4
 800258c:	dc29      	bgt.n	80025e2 <applyCtrlLimit+0x6a>
 800258e:	2b02      	cmp	r3, #2
 8002590:	dc02      	bgt.n	8002598 <applyCtrlLimit+0x20>
 8002592:	2b00      	cmp	r3, #0
 8002594:	dc03      	bgt.n	800259e <applyCtrlLimit+0x26>
 8002596:	e024      	b.n	80025e2 <applyCtrlLimit+0x6a>
 8002598:	2b03      	cmp	r3, #3
 800259a:	d00f      	beq.n	80025bc <applyCtrlLimit+0x44>
 800259c:	e021      	b.n	80025e2 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025a4:	dd03      	ble.n	80025ae <applyCtrlLimit+0x36>
				val = 16384;
 80025a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025aa:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 80025ac:	e016      	b.n	80025dc <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80025b4:	da12      	bge.n	80025dc <applyCtrlLimit+0x64>
				val = -16384;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <applyCtrlLimit+0x78>)
 80025b8:	603b      	str	r3, [r7, #0]
			break;
 80025ba:	e00f      	b.n	80025dc <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80025c2:	4293      	cmp	r3, r2
 80025c4:	dd03      	ble.n	80025ce <applyCtrlLimit+0x56>
				val = 25000;
 80025c6:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80025ca:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 80025cc:	e008      	b.n	80025e0 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <applyCtrlLimit+0x7c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	da04      	bge.n	80025e0 <applyCtrlLimit+0x68>
				val = -25000;
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <applyCtrlLimit+0x7c>)
 80025d8:	603b      	str	r3, [r7, #0]
			break;
 80025da:	e001      	b.n	80025e0 <applyCtrlLimit+0x68>
			break;
 80025dc:	bf00      	nop
 80025de:	e000      	b.n	80025e2 <applyCtrlLimit+0x6a>
			break;
 80025e0:	bf00      	nop
		}
	}
	return val;
 80025e2:	683b      	ldr	r3, [r7, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	ffffc000 	.word	0xffffc000
 80025f4:	ffff9e58 	.word	0xffff9e58

080025f8 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4604      	mov	r4, r0
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	eef0 6a40 	vmov.f32	s13, s0
 800260a:	eeb0 7a60 	vmov.f32	s14, s1
 800260e:	eef0 7a41 	vmov.f32	s15, s2
 8002612:	4623      	mov	r3, r4
 8002614:	75fb      	strb	r3, [r7, #23]
 8002616:	4603      	mov	r3, r0
 8002618:	75bb      	strb	r3, [r7, #22]
 800261a:	460b      	mov	r3, r1
 800261c:	757b      	strb	r3, [r7, #21]
 800261e:	4613      	mov	r3, r2
 8002620:	827b      	strh	r3, [r7, #18]
 8002622:	edc7 6a01 	vstr	s13, [r7, #4]
 8002626:	ed87 7a02 	vstr	s14, [r7, #8]
 800262a:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 800262e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002632:	ed97 7a02 	vldr	s14, [r7, #8]
 8002636:	edd7 7a03 	vldr	s15, [r7, #12]
 800263a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800263e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002642:	7db9      	ldrb	r1, [r7, #22]
 8002644:	7df8      	ldrb	r0, [r7, #23]
 8002646:	eeb0 0a66 	vmov.f32	s0, s13
 800264a:	eef0 0a47 	vmov.f32	s1, s14
 800264e:	eeb0 1a67 	vmov.f32	s2, s15
 8002652:	f7ff fce1 	bl	8002018 <calcRPM_PID>
 8002656:	4603      	mov	r3, r0
 8002658:	b21b      	sxth	r3, r3
 800265a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800265e:	7db9      	ldrb	r1, [r7, #22]
 8002660:	7df8      	ldrb	r0, [r7, #23]
 8002662:	f7ff fadb 	bl	8001c1c <CAN_setMotorCtrlVal>
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}

0800266e <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 800266e:	b590      	push	{r4, r7, lr}
 8002670:	b087      	sub	sp, #28
 8002672:	af00      	add	r7, sp, #0
 8002674:	4604      	mov	r4, r0
 8002676:	4608      	mov	r0, r1
 8002678:	4611      	mov	r1, r2
 800267a:	461a      	mov	r2, r3
 800267c:	eef0 6a40 	vmov.f32	s13, s0
 8002680:	eeb0 7a60 	vmov.f32	s14, s1
 8002684:	eef0 7a41 	vmov.f32	s15, s2
 8002688:	4623      	mov	r3, r4
 800268a:	75fb      	strb	r3, [r7, #23]
 800268c:	4603      	mov	r3, r0
 800268e:	75bb      	strb	r3, [r7, #22]
 8002690:	460b      	mov	r3, r1
 8002692:	757b      	strb	r3, [r7, #21]
 8002694:	4613      	mov	r3, r2
 8002696:	827b      	strh	r3, [r7, #18]
 8002698:	edc7 6a01 	vstr	s13, [r7, #4]
 800269c:	ed87 7a02 	vstr	s14, [r7, #8]
 80026a0:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 80026a4:	edd7 6a01 	vldr	s13, [r7, #4]
 80026a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80026ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026b4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80026b8:	7db9      	ldrb	r1, [r7, #22]
 80026ba:	7df8      	ldrb	r0, [r7, #23]
 80026bc:	eeb0 0a66 	vmov.f32	s0, s13
 80026c0:	eef0 0a47 	vmov.f32	s1, s14
 80026c4:	eeb0 1a67 	vmov.f32	s2, s15
 80026c8:	f7ff fdca 	bl	8002260 <calcPosition_PID>
 80026cc:	4603      	mov	r3, r0
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80026d4:	7db9      	ldrb	r1, [r7, #22]
 80026d6:	7df8      	ldrb	r0, [r7, #23]
 80026d8:	f7ff faa0 	bl	8001c1c <CAN_setMotorCtrlVal>
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}

080026e4 <getRotorPosition>:

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
 80026ee:	460b      	mov	r3, r1
 80026f0:	71bb      	strb	r3, [r7, #6]
 80026f2:	4613      	mov	r3, r2
 80026f4:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80026f6:	79bb      	ldrb	r3, [r7, #6]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	dc02      	bgt.n	8002702 <getRotorPosition+0x1e>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	dc04      	bgt.n	800270a <getRotorPosition+0x26>
 8002700:	e034      	b.n	800276c <getRotorPosition+0x88>
 8002702:	3b03      	subs	r3, #3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d831      	bhi.n	800276c <getRotorPosition+0x88>
 8002708:	e016      	b.n	8002738 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 800270a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800270e:	2b00      	cmp	r3, #0
 8002710:	dd29      	ble.n	8002766 <getRotorPosition+0x82>
 8002712:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002716:	2b08      	cmp	r3, #8
 8002718:	dc25      	bgt.n	8002766 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002722:	1e59      	subs	r1, r3, #1
 8002724:	4815      	ldr	r0, [pc, #84]	@ (800277c <getRotorPosition+0x98>)
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	440b      	add	r3, r1
 8002732:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002736:	e01b      	b.n	8002770 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002738:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800273c:	2b00      	cmp	r3, #0
 800273e:	dd14      	ble.n	800276a <getRotorPosition+0x86>
 8002740:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002744:	2b07      	cmp	r3, #7
 8002746:	dc10      	bgt.n	800276a <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	1e5a      	subs	r2, r3, #1
 800274c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002750:	1cd9      	adds	r1, r3, #3
 8002752:	480a      	ldr	r0, [pc, #40]	@ (800277c <getRotorPosition+0x98>)
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	440b      	add	r3, r1
 8002760:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002764:	e004      	b.n	8002770 <getRotorPosition+0x8c>
			break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <getRotorPosition+0x88>
			}
			break;
 800276a:	bf00      	nop
		}
	}
	return -1;
 800276c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	20000304 	.word	0x20000304

08002780 <getMotorRPM>:

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	460b      	mov	r3, r1
 800278c:	71bb      	strb	r3, [r7, #6]
 800278e:	4613      	mov	r3, r2
 8002790:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002792:	79bb      	ldrb	r3, [r7, #6]
 8002794:	2b02      	cmp	r3, #2
 8002796:	dc02      	bgt.n	800279e <getMotorRPM+0x1e>
 8002798:	2b00      	cmp	r3, #0
 800279a:	dc04      	bgt.n	80027a6 <getMotorRPM+0x26>
 800279c:	e038      	b.n	8002810 <getMotorRPM+0x90>
 800279e:	3b03      	subs	r3, #3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d835      	bhi.n	8002810 <getMotorRPM+0x90>
 80027a4:	e018      	b.n	80027d8 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 80027a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	dd2d      	ble.n	800280a <getMotorRPM+0x8a>
 80027ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	dc29      	bgt.n	800280a <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	4817      	ldr	r0, [pc, #92]	@ (8002820 <getMotorRPM+0xa0>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4403      	add	r3, r0
 80027d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027d6:	e01d      	b.n	8002814 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 80027d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dd16      	ble.n	800280e <getMotorRPM+0x8e>
 80027e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027e4:	2b07      	cmp	r3, #7
 80027e6:	dc12      	bgt.n	800280e <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	1e5a      	subs	r2, r3, #1
 80027ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027f0:	1cd9      	adds	r1, r3, #3
 80027f2:	480b      	ldr	r0, [pc, #44]	@ (8002820 <getMotorRPM+0xa0>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	440b      	add	r3, r1
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4403      	add	r3, r0
 8002804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002808:	e004      	b.n	8002814 <getMotorRPM+0x94>
			break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <getMotorRPM+0x90>
			}
			break;
 800280e:	bf00      	nop
		}
	}
	return -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000304 	.word	0x20000304

08002824 <getMotorCurrent>:

int16_t getMotorCurrent(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
 800282e:	460b      	mov	r3, r1
 8002830:	71bb      	strb	r3, [r7, #6]
 8002832:	4613      	mov	r3, r2
 8002834:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002836:	79bb      	ldrb	r3, [r7, #6]
 8002838:	2b02      	cmp	r3, #2
 800283a:	dc02      	bgt.n	8002842 <getMotorCurrent+0x1e>
 800283c:	2b00      	cmp	r3, #0
 800283e:	dc04      	bgt.n	800284a <getMotorCurrent+0x26>
 8002840:	e038      	b.n	80028b4 <getMotorCurrent+0x90>
 8002842:	3b03      	subs	r3, #3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d835      	bhi.n	80028b4 <getMotorCurrent+0x90>
 8002848:	e018      	b.n	800287c <getMotorCurrent+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 800284a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800284e:	2b00      	cmp	r3, #0
 8002850:	dd2d      	ble.n	80028ae <getMotorCurrent+0x8a>
 8002852:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002856:	2b08      	cmp	r3, #8
 8002858:	dc29      	bgt.n	80028ae <getMotorCurrent+0x8a>
				return motorFeedback[bus - 1][motorID - 1].torque_current;
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002862:	1e59      	subs	r1, r3, #1
 8002864:	4817      	ldr	r0, [pc, #92]	@ (80028c4 <getMotorCurrent+0xa0>)
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	440b      	add	r3, r1
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4403      	add	r3, r0
 8002876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800287a:	e01d      	b.n	80028b8 <getMotorCurrent+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 800287c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002880:	2b00      	cmp	r3, #0
 8002882:	dd16      	ble.n	80028b2 <getMotorCurrent+0x8e>
 8002884:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002888:	2b07      	cmp	r3, #7
 800288a:	dc12      	bgt.n	80028b2 <getMotorCurrent+0x8e>
				return motorFeedback[bus - 1][motorID + 3].torque_current;
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002894:	1cd9      	adds	r1, r3, #3
 8002896:	480b      	ldr	r0, [pc, #44]	@ (80028c4 <getMotorCurrent+0xa0>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4403      	add	r3, r0
 80028a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028ac:	e004      	b.n	80028b8 <getMotorCurrent+0x94>
			break;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <getMotorCurrent+0x90>
			}
			break;
 80028b2:	bf00      	nop
		}
	}
	return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	20000304 	.word	0x20000304

080028c8 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 80028cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d0:	4905      	ldr	r1, [pc, #20]	@ (80028e8 <usart_Init+0x20>)
 80028d2:	4806      	ldr	r0, [pc, #24]	@ (80028ec <usart_Init+0x24>)
 80028d4:	f009 f99a 	bl	800bc0c <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80028d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028dc:	4904      	ldr	r1, [pc, #16]	@ (80028f0 <usart_Init+0x28>)
 80028de:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <usart_Init+0x2c>)
 80028e0:	f009 f994 	bl	800bc0c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000514 	.word	0x20000514
 80028ec:	20000c60 	.word	0x20000c60
 80028f0:	20000614 	.word	0x20000614
 80028f4:	20000cf0 	.word	0x20000cf0

080028f8 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80028f8:	b40f      	push	{r0, r1, r2, r3}
 80028fa:	b580      	push	{r7, lr}
 80028fc:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	4a0c      	ldr	r2, [pc, #48]	@ (8002934 <usart_printf+0x3c>)
 8002904:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <usart_printf+0x3c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	480a      	ldr	r0, [pc, #40]	@ (8002938 <usart_printf+0x40>)
 800290e:	f00d ffbb 	bl	8010888 <vsiprintf>
 8002912:	4603      	mov	r3, r0
 8002914:	b29a      	uxth	r2, r3
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <usart_printf+0x44>)
 8002918:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800291a:	4b08      	ldr	r3, [pc, #32]	@ (800293c <usart_printf+0x44>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4905      	ldr	r1, [pc, #20]	@ (8002938 <usart_printf+0x40>)
 8002922:	4807      	ldr	r0, [pc, #28]	@ (8002940 <usart_printf+0x48>)
 8002924:	f009 f902 	bl	800bb2c <HAL_UART_Transmit_DMA>
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002930:	b004      	add	sp, #16
 8002932:	4770      	bx	lr
 8002934:	20000740 	.word	0x20000740
 8002938:	20000744 	.word	0x20000744
 800293c:	20000844 	.word	0x20000844
 8002940:	20000c60 	.word	0x20000c60

08002944 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
					    }
			}

	}
	*/
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8002986:	463b      	mov	r3, r7
 8002988:	4619      	mov	r1, r3
 800298a:	480f      	ldr	r0, [pc, #60]	@ (80029c8 <can_filter_init+0x6c>)
 800298c:	f004 fcc4 	bl	8007318 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002990:	480d      	ldr	r0, [pc, #52]	@ (80029c8 <can_filter_init+0x6c>)
 8002992:	f004 fda1 	bl	80074d8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002996:	2102      	movs	r1, #2
 8002998:	480b      	ldr	r0, [pc, #44]	@ (80029c8 <can_filter_init+0x6c>)
 800299a:	f004 ffd3 	bl	8007944 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 800299e:	230e      	movs	r3, #14
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80029a2:	230e      	movs	r3, #14
 80029a4:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80029a6:	463b      	mov	r3, r7
 80029a8:	4619      	mov	r1, r3
 80029aa:	4808      	ldr	r0, [pc, #32]	@ (80029cc <can_filter_init+0x70>)
 80029ac:	f004 fcb4 	bl	8007318 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80029b0:	4806      	ldr	r0, [pc, #24]	@ (80029cc <can_filter_init+0x70>)
 80029b2:	f004 fd91 	bl	80074d8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029b6:	2102      	movs	r1, #2
 80029b8:	4804      	ldr	r0, [pc, #16]	@ (80029cc <can_filter_init+0x70>)
 80029ba:	f004 ffc3 	bl	8007944 <HAL_CAN_ActivateNotification>
}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	@ 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200008dc 	.word	0x200008dc
 80029cc:	20000904 	.word	0x20000904

080029d0 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80029da:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <imu_pwm_set+0x1c>)
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40014400 	.word	0x40014400

080029f0 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <RC_init+0xac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <RC_init+0xac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a0c:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8002a0e:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <RC_init+0xac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <RC_init+0xac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0210 	orr.w	r2, r2, #16
 8002a1c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <RC_init+0xb0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <RC_init+0xb0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002a2e:	e007      	b.n	8002a40 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002a30:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <RC_init+0xb0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <RC_init+0xb0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002a40:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <RC_init+0xb0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002a4e:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <RC_init+0xb0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <RC_init+0xb4>)
 8002a54:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <RC_init+0xb0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <RC_init+0xb0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <RC_init+0xb0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <RC_init+0xb0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <RC_init+0xb0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a7c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <RC_init+0xb0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <RC_init+0xb0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000ca8 	.word	0x20000ca8
 8002aa0:	20000df8 	.word	0x20000df8
 8002aa4:	40004804 	.word	0x40004804

08002aa8 <findingKIScaler>:
float maxPowerLimitor = 0;
float powerScaler = 0;
int16_t M3508Current[4] = {0, 0, 0, 0};
int16_t M3508ScaledCurrent[4] = {0, 0, 0, 0};

void findingKIScaler() {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	e019      	b.n	8002aec <findingKIScaler+0x44>
		if (M3508Current[i] > 0) {
 8002ab8:	4a25      	ldr	r2, [pc, #148]	@ (8002b50 <findingKIScaler+0xa8>)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	dd08      	ble.n	8002ad6 <findingKIScaler+0x2e>
			sum += M3508Current[i];
 8002ac4:	4a22      	ldr	r2, [pc, #136]	@ (8002b50 <findingKIScaler+0xa8>)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	e007      	b.n	8002ae6 <findingKIScaler+0x3e>
		} else {
			sum -= M3508Current[i];
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <findingKIScaler+0xa8>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	dde2      	ble.n	8002ab8 <findingKIScaler+0x10>
		}
	}
	powerScaler = maxPowerLimitor/sum;
 8002af2:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <findingKIScaler+0xac>)
 8002af4:	edd3 6a00 	vldr	s13, [r3]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
	if (powerScaler > 1) {
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	dd04      	ble.n	8002b2a <findingKIScaler+0x82>
		powerScaler = 1;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b26:	601a      	str	r2, [r3, #0]
	} else if (powerScaler < 0) {
		powerScaler = 0;
	}
	// usart_printf("%f/%d = %f\r\n", maxPowerLimitor, sum, powerScaler);
}
 8002b28:	e00c      	b.n	8002b44 <findingKIScaler+0x9c>
	} else if (powerScaler < 0) {
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d400      	bmi.n	8002b3c <findingKIScaler+0x94>
}
 8002b3a:	e003      	b.n	8002b44 <findingKIScaler+0x9c>
		powerScaler = 0;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000850 	.word	0x20000850
 8002b54:	20000848 	.word	0x20000848
 8002b58:	2000084c 	.word	0x2000084c
 8002b5c:	00000000 	.word	0x00000000

08002b60 <settingMaxCurrentVal>:

void settingMaxCurrentVal (float bufferValFromPMM, uint16_t powerLimit) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	807b      	strh	r3, [r7, #2]

	// uint16_t adjustedPowerLimit = powerLimit - 6;

	float maxPowerForRobot = 0;
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
	if (powerLimit > 100) {
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d902      	bls.n	8002b80 <settingMaxCurrentVal+0x20>
		maxPowerForRobot = 4;
 8002b7a:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8002b7e:	60fb      	str	r3, [r7, #12]
	} if (powerLimit >= 60 && powerLimit <=100) {
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b84:	d91c      	bls.n	8002bc0 <settingMaxCurrentVal+0x60>
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	2b64      	cmp	r3, #100	@ 0x64
 8002b8a:	d819      	bhi.n	8002bc0 <settingMaxCurrentVal+0x60>
		maxPowerForRobot = (0.05*powerLimit)-1;
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fcc8 	bl	8000524 <__aeabi_i2d>
 8002b94:	a33f      	add	r3, pc, #252	@ (adr r3, 8002c94 <settingMaxCurrentVal+0x134>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fd2d 	bl	80005f8 <__aeabi_dmul>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	4b35      	ldr	r3, [pc, #212]	@ (8002c80 <settingMaxCurrentVal+0x120>)
 8002bac:	f7fd fb6c 	bl	8000288 <__aeabi_dsub>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fd fff6 	bl	8000ba8 <__aeabi_d2f>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60fb      	str	r3, [r7, #12]
	} if (powerLimit < 60) {
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	2b3b      	cmp	r3, #59	@ 0x3b
 8002bc4:	d802      	bhi.n	8002bcc <settingMaxCurrentVal+0x6c>
		maxPowerForRobot = 2;
 8002bc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002bca:	60fb      	str	r3, [r7, #12]
	}

	if (bufferValFromPMM > 50) {
 8002bcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002c84 <settingMaxCurrentVal+0x124>
 8002bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	dd03      	ble.n	8002be6 <settingMaxCurrentVal+0x86>
		maxPowerLimitor = 8192;
 8002bde:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <settingMaxCurrentVal+0x128>)
 8002be0:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002be4:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 50) {
 8002be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bea:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	dd22      	ble.n	8002c3e <settingMaxCurrentVal+0xde>
 8002bf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bfc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002c84 <settingMaxCurrentVal+0x124>
 8002c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c08:	d819      	bhi.n	8002c3e <settingMaxCurrentVal+0xde>
		maxPowerLimitor = (179.8*bufferValFromPMM) - 798.0f;
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd fc9c 	bl	8000548 <__aeabi_f2d>
 8002c10:	a319      	add	r3, pc, #100	@ (adr r3, 8002c78 <settingMaxCurrentVal+0x118>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f7fd fcef 	bl	80005f8 <__aeabi_dmul>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <settingMaxCurrentVal+0x12c>)
 8002c28:	f7fd fb2e 	bl	8000288 <__aeabi_dsub>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ffb8 	bl	8000ba8 <__aeabi_d2f>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <settingMaxCurrentVal+0x128>)
 8002c3c:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 8002c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c42:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	d802      	bhi.n	8002c56 <settingMaxCurrentVal+0xf6>
		maxPowerLimitor = 0.00001;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <settingMaxCurrentVal+0x128>)
 8002c52:	4a0f      	ldr	r2, [pc, #60]	@ (8002c90 <settingMaxCurrentVal+0x130>)
 8002c54:	601a      	str	r2, [r3, #0]
	}
	maxPowerLimitor = maxPowerLimitor * maxPowerForRobot;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <settingMaxCurrentVal+0x128>)
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c64:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <settingMaxCurrentVal+0x128>)
 8002c66:	edc3 7a00 	vstr	s15, [r3]
	// maxPowerLimitor = 8192*8;
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	f3af 8000 	nop.w
 8002c78:	9999999a 	.word	0x9999999a
 8002c7c:	40667999 	.word	0x40667999
 8002c80:	3ff00000 	.word	0x3ff00000
 8002c84:	42480000 	.word	0x42480000
 8002c88:	20000848 	.word	0x20000848
 8002c8c:	4088f000 	.word	0x4088f000
 8002c90:	3727c5ac 	.word	0x3727c5ac
 8002c94:	9999999a 	.word	0x9999999a
 8002c98:	3fa99999 	.word	0x3fa99999

08002c9c <driveMotorRPM>:

void driveMotorRPM (int16_t RPMtarget[], PID_preset_t preset) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	eef0 6a40 	vmov.f32	s13, s0
 8002ca8:	eeb0 7a60 	vmov.f32	s14, s1
 8002cac:	eef0 7a41 	vmov.f32	s15, s2
 8002cb0:	edc7 6a00 	vstr	s13, [r7]
 8002cb4:	ed87 7a01 	vstr	s14, [r7, #4]
 8002cb8:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < 4; i++) {
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e024      	b.n	8002d0c <driveMotorRPM+0x70>
		M3508Current[i] = calcRPM_PID(Bus1, M3508, i+1, RPMtarget[i], preset);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	b259      	sxtb	r1, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd8:	edd7 6a00 	vldr	s13, [r7]
 8002cdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ce0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce4:	eeb0 0a66 	vmov.f32	s0, s13
 8002ce8:	eef0 0a47 	vmov.f32	s1, s14
 8002cec:	eeb0 1a67 	vmov.f32	s2, s15
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7ff f98f 	bl	8002018 <calcRPM_PID>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b219      	sxth	r1, r3
 8002cfe:	4a07      	ldr	r2, [pc, #28]	@ (8002d1c <driveMotorRPM+0x80>)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	ddd7      	ble.n	8002cc2 <driveMotorRPM+0x26>
	}
	// M3508Current[motorID-1] = calcRPM_PID(Bus2, M3508, motorID, RPMtarget, preset);
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000850 	.word	0x20000850

08002d20 <ScaleAllCurrentValuesForDriveMotors>:

void ScaleAllCurrentValuesForDriveMotors () {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	findingKIScaler();
 8002d26:	f7ff febf 	bl	8002aa8 <findingKIScaler>
	for (int i = 0; i < 4; i++) {
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	e018      	b.n	8002d62 <ScaleAllCurrentValuesForDriveMotors+0x42>
		M3508ScaledCurrent[i] = M3508Current[i] * powerScaler;
 8002d30:	4a10      	ldr	r2, [pc, #64]	@ (8002d74 <ScaleAllCurrentValuesForDriveMotors+0x54>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d40:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <ScaleAllCurrentValuesForDriveMotors+0x58>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4e:	ee17 3a90 	vmov	r3, s15
 8002d52:	b219      	sxth	r1, r3
 8002d54:	4a09      	ldr	r2, [pc, #36]	@ (8002d7c <ScaleAllCurrentValuesForDriveMotors+0x5c>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	dde3      	ble.n	8002d30 <ScaleAllCurrentValuesForDriveMotors+0x10>
	}
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000850 	.word	0x20000850
 8002d78:	2000084c 	.word	0x2000084c
 8002d7c:	20000858 	.word	0x20000858

08002d80 <createDriveMotorCAN>:

void createDriveMotorCAN() {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
	for (int j = 0; j < 4; j++) {
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	e00f      	b.n	8002dac <createDriveMotorCAN+0x2c>
		CAN_setMotorCtrlVal(Bus1, M3508, j+1, M3508ScaledCurrent[j]);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	b25a      	sxtb	r2, r3
 8002d96:	4909      	ldr	r1, [pc, #36]	@ (8002dbc <createDriveMotorCAN+0x3c>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002d9e:	2101      	movs	r1, #1
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7fe ff3b 	bl	8001c1c <CAN_setMotorCtrlVal>
	for (int j = 0; j < 4; j++) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3301      	adds	r3, #1
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	ddec      	ble.n	8002d8c <createDriveMotorCAN+0xc>
	}
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000858 	.word	0x20000858

08002dc0 <bufferLimitedDriveMode>:

void bufferLimitedDriveMode(int16_t RPMtarget[], PID_preset_t preset) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	eef0 6a40 	vmov.f32	s13, s0
 8002dcc:	eeb0 7a60 	vmov.f32	s14, s1
 8002dd0:	eef0 7a41 	vmov.f32	s15, s2
 8002dd4:	edc7 6a00 	vstr	s13, [r7]
 8002dd8:	ed87 7a01 	vstr	s14, [r7, #4]
 8002ddc:	edc7 7a02 	vstr	s15, [r7, #8]
	driveMotorRPM(RPMtarget, preset);
 8002de0:	edd7 6a00 	vldr	s13, [r7]
 8002de4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002de8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dec:	eeb0 0a66 	vmov.f32	s0, s13
 8002df0:	eef0 0a47 	vmov.f32	s1, s14
 8002df4:	eeb0 1a67 	vmov.f32	s2, s15
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff4f 	bl	8002c9c <driveMotorRPM>
	findingKIScaler();
 8002dfe:	f7ff fe53 	bl	8002aa8 <findingKIScaler>
	ScaleAllCurrentValuesForDriveMotors();
 8002e02:	f7ff ff8d 	bl	8002d20 <ScaleAllCurrentValuesForDriveMotors>
	createDriveMotorCAN();
 8002e06:	f7ff ffbb 	bl	8002d80 <createDriveMotorCAN>
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <graphingFunction>:
int8_t qButtonDown = 0;
int8_t eButtonDown = 0;
int8_t rButtonDown = 0;
float movementCounter[6] = {0, 0, 0, 0, 0, 0};

float graphingFunction (float x) {
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = x;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60fb      	str	r3, [r7, #12]
	return y;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	ee07 3a90 	vmov	s15, r3
}
 8002e26:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <graphingFunctionEdgeCase>:

float graphingFunctionEdgeCase (float x) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = graphingFunction(x);
 8002e3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e42:	f7ff ffe6 	bl	8002e12 <graphingFunction>
 8002e46:	ed87 0a03 	vstr	s0, [r7, #12]
	if (x <= 0) {
 8002e4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d803      	bhi.n	8002e60 <graphingFunctionEdgeCase+0x2c>
		y = 0;
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e00e      	b.n	8002e7e <graphingFunctionEdgeCase+0x4a>
	} else if (x > 1) {
 8002e60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e70:	dd05      	ble.n	8002e7e <graphingFunctionEdgeCase+0x4a>
		y = graphingFunction(1.0);
 8002e72:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e76:	f7ff ffcc 	bl	8002e12 <graphingFunction>
 8002e7a:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	return y;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	ee07 3a90 	vmov	s15, r3
}
 8002e84:	eeb0 0a67 	vmov.f32	s0, s15
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <allCheShit>:

void allCheShit(uint8_t w, uint8_t a, uint8_t s, uint8_t d, uint8_t q, uint8_t e, uint8_t r, int16_t rcRPM[], int8_t chassisVsTurretDrive, float convertedAngle, PID_preset_t chassisPreset) {
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b094      	sub	sp, #80	@ 0x50
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4604      	mov	r4, r0
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ea4:	eef0 6a60 	vmov.f32	s13, s1
 8002ea8:	eeb0 7a41 	vmov.f32	s14, s2
 8002eac:	eef0 7a61 	vmov.f32	s15, s3
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	75fb      	strb	r3, [r7, #23]
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	75bb      	strb	r3, [r7, #22]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	757b      	strb	r3, [r7, #21]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	753b      	strb	r3, [r7, #20]
 8002ec0:	edc7 6a01 	vstr	s13, [r7, #4]
 8002ec4:	ed87 7a02 	vstr	s14, [r7, #8]
 8002ec8:	edc7 7a03 	vstr	s15, [r7, #12]
	float scaledMovementCounter[6] = {0, 0, 0, 0, 0, 0};
 8002ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
	int16_t xJoystickDirection = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t yJoystickDirection = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t rotationOfChassis = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 8002ef0:	f107 031c 	add.w	r3, r7, #28
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]

	if (w == 1) {
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10a      	bne.n	8002f16 <allCheShit+0x86>
		movementCounter[0]+= increaseSpeed;
 8002f00:	4b93      	ldr	r3, [pc, #588]	@ (8003150 <allCheShit+0x2c0>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8003154 <allCheShit+0x2c4>
 8002f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f0e:	4b90      	ldr	r3, [pc, #576]	@ (8003150 <allCheShit+0x2c0>)
 8002f10:	edc3 7a00 	vstr	s15, [r3]
 8002f14:	e009      	b.n	8002f2a <allCheShit+0x9a>
	} else {
		movementCounter[0]-= decreaseSpeed;
 8002f16:	4b8e      	ldr	r3, [pc, #568]	@ (8003150 <allCheShit+0x2c0>)
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8003158 <allCheShit+0x2c8>
 8002f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f24:	4b8a      	ldr	r3, [pc, #552]	@ (8003150 <allCheShit+0x2c0>)
 8002f26:	edc3 7a00 	vstr	s15, [r3]
	}
	if (a == 1) {
 8002f2a:	7dbb      	ldrb	r3, [r7, #22]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10a      	bne.n	8002f46 <allCheShit+0xb6>
		movementCounter[1]+= increaseSpeed;
 8002f30:	4b87      	ldr	r3, [pc, #540]	@ (8003150 <allCheShit+0x2c0>)
 8002f32:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f36:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8003154 <allCheShit+0x2c4>
 8002f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f3e:	4b84      	ldr	r3, [pc, #528]	@ (8003150 <allCheShit+0x2c0>)
 8002f40:	edc3 7a01 	vstr	s15, [r3, #4]
 8002f44:	e009      	b.n	8002f5a <allCheShit+0xca>
	} else {
		movementCounter[1]-= decreaseSpeed;
 8002f46:	4b82      	ldr	r3, [pc, #520]	@ (8003150 <allCheShit+0x2c0>)
 8002f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f4c:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003158 <allCheShit+0x2c8>
 8002f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f54:	4b7e      	ldr	r3, [pc, #504]	@ (8003150 <allCheShit+0x2c0>)
 8002f56:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if (s == 1) {
 8002f5a:	7d7b      	ldrb	r3, [r7, #21]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10a      	bne.n	8002f76 <allCheShit+0xe6>
		movementCounter[2]+= increaseSpeed;
 8002f60:	4b7b      	ldr	r3, [pc, #492]	@ (8003150 <allCheShit+0x2c0>)
 8002f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f66:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003154 <allCheShit+0x2c4>
 8002f6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f6e:	4b78      	ldr	r3, [pc, #480]	@ (8003150 <allCheShit+0x2c0>)
 8002f70:	edc3 7a02 	vstr	s15, [r3, #8]
 8002f74:	e009      	b.n	8002f8a <allCheShit+0xfa>
	} else {
		movementCounter[2]-= decreaseSpeed;
 8002f76:	4b76      	ldr	r3, [pc, #472]	@ (8003150 <allCheShit+0x2c0>)
 8002f78:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f7c:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003158 <allCheShit+0x2c8>
 8002f80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f84:	4b72      	ldr	r3, [pc, #456]	@ (8003150 <allCheShit+0x2c0>)
 8002f86:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (d == 1) {
 8002f8a:	7d3b      	ldrb	r3, [r7, #20]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10a      	bne.n	8002fa6 <allCheShit+0x116>
		movementCounter[3]+= increaseSpeed;
 8002f90:	4b6f      	ldr	r3, [pc, #444]	@ (8003150 <allCheShit+0x2c0>)
 8002f92:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f96:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003154 <allCheShit+0x2c4>
 8002f9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003150 <allCheShit+0x2c0>)
 8002fa0:	edc3 7a03 	vstr	s15, [r3, #12]
 8002fa4:	e009      	b.n	8002fba <allCheShit+0x12a>
	} else {
		movementCounter[3]-= decreaseSpeed;
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003150 <allCheShit+0x2c0>)
 8002fa8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fac:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8003158 <allCheShit+0x2c8>
 8002fb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fb4:	4b66      	ldr	r3, [pc, #408]	@ (8003150 <allCheShit+0x2c0>)
 8002fb6:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	if (q == 1) {
 8002fba:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10a      	bne.n	8002fd8 <allCheShit+0x148>
		movementCounter[4]+= increaseSpeed;
 8002fc2:	4b63      	ldr	r3, [pc, #396]	@ (8003150 <allCheShit+0x2c0>)
 8002fc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fc8:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8003154 <allCheShit+0x2c4>
 8002fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8003150 <allCheShit+0x2c0>)
 8002fd2:	edc3 7a04 	vstr	s15, [r3, #16]
 8002fd6:	e009      	b.n	8002fec <allCheShit+0x15c>
	} else {
		movementCounter[4]-= decreaseSpeed;
 8002fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8003150 <allCheShit+0x2c0>)
 8002fda:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fde:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003158 <allCheShit+0x2c8>
 8002fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8003150 <allCheShit+0x2c0>)
 8002fe8:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	if (e == 1) {
 8002fec:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10a      	bne.n	800300a <allCheShit+0x17a>
		movementCounter[5]+= increaseSpeed;
 8002ff4:	4b56      	ldr	r3, [pc, #344]	@ (8003150 <allCheShit+0x2c0>)
 8002ff6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ffa:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8003154 <allCheShit+0x2c4>
 8002ffe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003002:	4b53      	ldr	r3, [pc, #332]	@ (8003150 <allCheShit+0x2c0>)
 8003004:	edc3 7a05 	vstr	s15, [r3, #20]
 8003008:	e009      	b.n	800301e <allCheShit+0x18e>
	} else {
		movementCounter[5]-= decreaseSpeed;
 800300a:	4b51      	ldr	r3, [pc, #324]	@ (8003150 <allCheShit+0x2c0>)
 800300c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003010:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003158 <allCheShit+0x2c8>
 8003014:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003018:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <allCheShit+0x2c0>)
 800301a:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	usart_printf("1\r\n");
 800301e:	484f      	ldr	r0, [pc, #316]	@ (800315c <allCheShit+0x2cc>)
 8003020:	f7ff fc6a 	bl	80028f8 <usart_printf>

	if (q == 1 && qButtonDown == 0) {
 8003024:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003028:	2b01      	cmp	r3, #1
 800302a:	d111      	bne.n	8003050 <allCheShit+0x1c0>
 800302c:	4b4c      	ldr	r3, [pc, #304]	@ (8003160 <allCheShit+0x2d0>)
 800302e:	f993 3000 	ldrsb.w	r3, [r3]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <allCheShit+0x1c0>
		qButtonDown = 1;
 8003036:	4b4a      	ldr	r3, [pc, #296]	@ (8003160 <allCheShit+0x2d0>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
		qeRotationWOWS--;
 800303c:	4b49      	ldr	r3, [pc, #292]	@ (8003164 <allCheShit+0x2d4>)
 800303e:	f993 3000 	ldrsb.w	r3, [r3]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	b25a      	sxtb	r2, r3
 800304a:	4b46      	ldr	r3, [pc, #280]	@ (8003164 <allCheShit+0x2d4>)
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e00b      	b.n	8003068 <allCheShit+0x1d8>
	} else if (q == 0 && qButtonDown == 1) {
 8003050:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <allCheShit+0x1d8>
 8003058:	4b41      	ldr	r3, [pc, #260]	@ (8003160 <allCheShit+0x2d0>)
 800305a:	f993 3000 	ldrsb.w	r3, [r3]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <allCheShit+0x1d8>
		qButtonDown = 0;
 8003062:	4b3f      	ldr	r3, [pc, #252]	@ (8003160 <allCheShit+0x2d0>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
	}
	if (e == 1 && eButtonDown == 0) {
 8003068:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800306c:	2b01      	cmp	r3, #1
 800306e:	d111      	bne.n	8003094 <allCheShit+0x204>
 8003070:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <allCheShit+0x2d8>)
 8003072:	f993 3000 	ldrsb.w	r3, [r3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <allCheShit+0x204>
		eButtonDown = 1;
 800307a:	4b3b      	ldr	r3, [pc, #236]	@ (8003168 <allCheShit+0x2d8>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
		qeRotationWOWS++;
 8003080:	4b38      	ldr	r3, [pc, #224]	@ (8003164 <allCheShit+0x2d4>)
 8003082:	f993 3000 	ldrsb.w	r3, [r3]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	b25a      	sxtb	r2, r3
 800308e:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <allCheShit+0x2d4>)
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e00b      	b.n	80030ac <allCheShit+0x21c>
	} else if (e == 0 && eButtonDown == 1) {
 8003094:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <allCheShit+0x21c>
 800309c:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <allCheShit+0x2d8>)
 800309e:	f993 3000 	ldrsb.w	r3, [r3]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d102      	bne.n	80030ac <allCheShit+0x21c>
		eButtonDown = 0;
 80030a6:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <allCheShit+0x2d8>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
	}
	if (qeRotationWOWS > maxQEVal) {
 80030ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003164 <allCheShit+0x2d4>)
 80030ae:	f993 3000 	ldrsb.w	r3, [r3]
 80030b2:	2203      	movs	r2, #3
 80030b4:	4293      	cmp	r3, r2
 80030b6:	dd03      	ble.n	80030c0 <allCheShit+0x230>
		qeRotationWOWS = 3;
 80030b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <allCheShit+0x2d4>)
 80030ba:	2203      	movs	r2, #3
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e00a      	b.n	80030d6 <allCheShit+0x246>
	} else if (qeRotationWOWS < (-1*maxQEVal)) {
 80030c0:	4b28      	ldr	r3, [pc, #160]	@ (8003164 <allCheShit+0x2d4>)
 80030c2:	f993 3000 	ldrsb.w	r3, [r3]
 80030c6:	461a      	mov	r2, r3
 80030c8:	2303      	movs	r3, #3
 80030ca:	425b      	negs	r3, r3
 80030cc:	429a      	cmp	r2, r3
 80030ce:	da02      	bge.n	80030d6 <allCheShit+0x246>
		qeRotationWOWS = -3;
 80030d0:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <allCheShit+0x2d4>)
 80030d2:	22fd      	movs	r2, #253	@ 0xfd
 80030d4:	701a      	strb	r2, [r3, #0]
	}
	if (r == 1 && rButtonDown == 0) {
 80030d6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d111      	bne.n	8003102 <allCheShit+0x272>
 80030de:	4b23      	ldr	r3, [pc, #140]	@ (800316c <allCheShit+0x2dc>)
 80030e0:	f993 3000 	ldrsb.w	r3, [r3]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10c      	bne.n	8003102 <allCheShit+0x272>
		qeRotationWOWS = -1*qeRotationWOWS;
 80030e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <allCheShit+0x2d4>)
 80030ea:	f993 3000 	ldrsb.w	r3, [r3]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	425b      	negs	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	b25a      	sxtb	r2, r3
 80030f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003164 <allCheShit+0x2d4>)
 80030f8:	701a      	strb	r2, [r3, #0]
		rButtonDown = 1;
 80030fa:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <allCheShit+0x2dc>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e00b      	b.n	800311a <allCheShit+0x28a>
	} else if (r == 0 && rButtonDown == 1) {
 8003102:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <allCheShit+0x28a>
 800310a:	4b18      	ldr	r3, [pc, #96]	@ (800316c <allCheShit+0x2dc>)
 800310c:	f993 3000 	ldrsb.w	r3, [r3]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d102      	bne.n	800311a <allCheShit+0x28a>
		rButtonDown = 0;
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <allCheShit+0x2dc>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
	}
	usart_printf("2\r\n");
 800311a:	4815      	ldr	r0, [pc, #84]	@ (8003170 <allCheShit+0x2e0>)
 800311c:	f7ff fbec 	bl	80028f8 <usart_printf>
	for (int i = 0; i < 6; i++) {
 8003120:	2300      	movs	r3, #0
 8003122:	647b      	str	r3, [r7, #68]	@ 0x44
 8003124:	e04e      	b.n	80031c4 <allCheShit+0x334>
		if (movementCounter[i] > 1) {
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <allCheShit+0x2c0>)
 8003128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	dd19      	ble.n	8003174 <allCheShit+0x2e4>
			movementCounter[i] = 1;
 8003140:	4a03      	ldr	r2, [pc, #12]	@ (8003150 <allCheShit+0x2c0>)
 8003142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e023      	b.n	8003198 <allCheShit+0x308>
 8003150:	20000864 	.word	0x20000864
 8003154:	3c03126f 	.word	0x3c03126f
 8003158:	3ca3d70a 	.word	0x3ca3d70a
 800315c:	08013d8c 	.word	0x08013d8c
 8003160:	20000861 	.word	0x20000861
 8003164:	20000860 	.word	0x20000860
 8003168:	20000862 	.word	0x20000862
 800316c:	20000863 	.word	0x20000863
 8003170:	08013d90 	.word	0x08013d90
		} else if (movementCounter[i] < 0) {
 8003174:	4ac6      	ldr	r2, [pc, #792]	@ (8003490 <allCheShit+0x600>)
 8003176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	d506      	bpl.n	8003198 <allCheShit+0x308>
			movementCounter[i] = 0;
 800318a:	4ac1      	ldr	r2, [pc, #772]	@ (8003490 <allCheShit+0x600>)
 800318c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
		}
		scaledMovementCounter[i] = graphingFunctionEdgeCase(movementCounter[i]);
 8003198:	4abd      	ldr	r2, [pc, #756]	@ (8003490 <allCheShit+0x600>)
 800319a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	eeb0 0a67 	vmov.f32	s0, s15
 80031a8:	f7ff fe44 	bl	8002e34 <graphingFunctionEdgeCase>
 80031ac:	eef0 7a40 	vmov.f32	s15, s0
 80031b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	3350      	adds	r3, #80	@ 0x50
 80031b6:	443b      	add	r3, r7
 80031b8:	3b2c      	subs	r3, #44	@ 0x2c
 80031ba:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 6; i++) {
 80031be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c0:	3301      	adds	r3, #1
 80031c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	ddad      	ble.n	8003126 <allCheShit+0x296>
	}

	int16_t rcWS = 9005.7*((scaledMovementCounter[0]-scaledMovementCounter[2]));
 80031ca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031ce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80031d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d6:	ee17 0a90 	vmov	r0, s15
 80031da:	f7fd f9b5 	bl	8000548 <__aeabi_f2d>
 80031de:	a3aa      	add	r3, pc, #680	@ (adr r3, 8003488 <allCheShit+0x5f8>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd fa08 	bl	80005f8 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fcb2 	bl	8000b58 <__aeabi_d2iz>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	int16_t rcAD = 9005.7*((scaledMovementCounter[3]-scaledMovementCounter[1]));
 80031fa:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80031fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003206:	ee17 0a90 	vmov	r0, s15
 800320a:	f7fd f99d 	bl	8000548 <__aeabi_f2d>
 800320e:	a39e      	add	r3, pc, #632	@ (adr r3, 8003488 <allCheShit+0x5f8>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f7fd f9f0 	bl	80005f8 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	f7fd fc9a 	bl	8000b58 <__aeabi_d2iz>
 8003224:	4603      	mov	r3, r0
 8003226:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	int16_t rcQE = 9005.7*((scaledMovementCounter[5]-scaledMovementCounter[4]));
 800322a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800322e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003236:	ee17 0a90 	vmov	r0, s15
 800323a:	f7fd f985 	bl	8000548 <__aeabi_f2d>
 800323e:	a392      	add	r3, pc, #584	@ (adr r3, 8003488 <allCheShit+0x5f8>)
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f7fd f9d8 	bl	80005f8 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f7fd fc82 	bl	8000b58 <__aeabi_d2iz>
 8003254:	4603      	mov	r3, r0
 8003256:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	if (chassisVsTurretDrive == 1) {
 8003258:	f997 3080 	ldrsb.w	r3, [r7, #128]	@ 0x80
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 811b 	bne.w	8003498 <allCheShit+0x608>
		xJoystickDirection = (rcRPM[0]*cos(convertedAngle) - rcRPM[1]*sin(convertedAngle) + (rcAD*cos(convertedAngle) - rcWS*sin(convertedAngle)));
 8003262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f95b 	bl	8000524 <__aeabi_i2d>
 800326e:	4604      	mov	r4, r0
 8003270:	460d      	mov	r5, r1
 8003272:	6938      	ldr	r0, [r7, #16]
 8003274:	f7fd f968 	bl	8000548 <__aeabi_f2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	ec43 2b10 	vmov	d0, r2, r3
 8003280:	f00f fc6e 	bl	8012b60 <cos>
 8003284:	ec53 2b10 	vmov	r2, r3, d0
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fd f9b4 	bl	80005f8 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4690      	mov	r8, r2
 8003296:	4699      	mov	r9, r3
 8003298:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800329a:	3302      	adds	r3, #2
 800329c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f93f 	bl	8000524 <__aeabi_i2d>
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
 80032aa:	6938      	ldr	r0, [r7, #16]
 80032ac:	f7fd f94c 	bl	8000548 <__aeabi_f2d>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	ec43 2b10 	vmov	d0, r2, r3
 80032b8:	f00f fca6 	bl	8012c08 <sin>
 80032bc:	ec53 2b10 	vmov	r2, r3, d0
 80032c0:	4620      	mov	r0, r4
 80032c2:	4629      	mov	r1, r5
 80032c4:	f7fd f998 	bl	80005f8 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4640      	mov	r0, r8
 80032ce:	4649      	mov	r1, r9
 80032d0:	f7fc ffda 	bl	8000288 <__aeabi_dsub>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4690      	mov	r8, r2
 80032da:	4699      	mov	r9, r3
 80032dc:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd f91f 	bl	8000524 <__aeabi_i2d>
 80032e6:	4604      	mov	r4, r0
 80032e8:	460d      	mov	r5, r1
 80032ea:	6938      	ldr	r0, [r7, #16]
 80032ec:	f7fd f92c 	bl	8000548 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	ec43 2b10 	vmov	d0, r2, r3
 80032f8:	f00f fc32 	bl	8012b60 <cos>
 80032fc:	ec53 2b10 	vmov	r2, r3, d0
 8003300:	4620      	mov	r0, r4
 8003302:	4629      	mov	r1, r5
 8003304:	f7fd f978 	bl	80005f8 <__aeabi_dmul>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4692      	mov	sl, r2
 800330e:	469b      	mov	fp, r3
 8003310:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f905 	bl	8000524 <__aeabi_i2d>
 800331a:	4604      	mov	r4, r0
 800331c:	460d      	mov	r5, r1
 800331e:	6938      	ldr	r0, [r7, #16]
 8003320:	f7fd f912 	bl	8000548 <__aeabi_f2d>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	ec43 2b10 	vmov	d0, r2, r3
 800332c:	f00f fc6c 	bl	8012c08 <sin>
 8003330:	ec53 2b10 	vmov	r2, r3, d0
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fd f95e 	bl	80005f8 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4650      	mov	r0, sl
 8003342:	4659      	mov	r1, fp
 8003344:	f7fc ffa0 	bl	8000288 <__aeabi_dsub>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4640      	mov	r0, r8
 800334e:	4649      	mov	r1, r9
 8003350:	f7fc ff9c 	bl	800028c <__adddf3>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f7fd fbfc 	bl	8000b58 <__aeabi_d2iz>
 8003360:	4603      	mov	r3, r0
 8003362:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		yJoystickDirection = (rcRPM[0]*sin(convertedAngle) + rcRPM[1]*cos(convertedAngle) + (rcAD*sin(convertedAngle) + rcWS*cos(convertedAngle)));
 8003366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fd f8d9 	bl	8000524 <__aeabi_i2d>
 8003372:	4604      	mov	r4, r0
 8003374:	460d      	mov	r5, r1
 8003376:	6938      	ldr	r0, [r7, #16]
 8003378:	f7fd f8e6 	bl	8000548 <__aeabi_f2d>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	ec43 2b10 	vmov	d0, r2, r3
 8003384:	f00f fc40 	bl	8012c08 <sin>
 8003388:	ec53 2b10 	vmov	r2, r3, d0
 800338c:	4620      	mov	r0, r4
 800338e:	4629      	mov	r1, r5
 8003390:	f7fd f932 	bl	80005f8 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4690      	mov	r8, r2
 800339a:	4699      	mov	r9, r3
 800339c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800339e:	3302      	adds	r3, #2
 80033a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8bd 	bl	8000524 <__aeabi_i2d>
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	6938      	ldr	r0, [r7, #16]
 80033b0:	f7fd f8ca 	bl	8000548 <__aeabi_f2d>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	ec43 2b10 	vmov	d0, r2, r3
 80033bc:	f00f fbd0 	bl	8012b60 <cos>
 80033c0:	ec53 2b10 	vmov	r2, r3, d0
 80033c4:	4620      	mov	r0, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7fd f916 	bl	80005f8 <__aeabi_dmul>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4640      	mov	r0, r8
 80033d2:	4649      	mov	r1, r9
 80033d4:	f7fc ff5a 	bl	800028c <__adddf3>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4690      	mov	r8, r2
 80033de:	4699      	mov	r9, r3
 80033e0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd f89d 	bl	8000524 <__aeabi_i2d>
 80033ea:	4604      	mov	r4, r0
 80033ec:	460d      	mov	r5, r1
 80033ee:	6938      	ldr	r0, [r7, #16]
 80033f0:	f7fd f8aa 	bl	8000548 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	ec43 2b10 	vmov	d0, r2, r3
 80033fc:	f00f fc04 	bl	8012c08 <sin>
 8003400:	ec53 2b10 	vmov	r2, r3, d0
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f7fd f8f6 	bl	80005f8 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4692      	mov	sl, r2
 8003412:	469b      	mov	fp, r3
 8003414:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f883 	bl	8000524 <__aeabi_i2d>
 800341e:	4604      	mov	r4, r0
 8003420:	460d      	mov	r5, r1
 8003422:	6938      	ldr	r0, [r7, #16]
 8003424:	f7fd f890 	bl	8000548 <__aeabi_f2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	ec43 2b10 	vmov	d0, r2, r3
 8003430:	f00f fb96 	bl	8012b60 <cos>
 8003434:	ec53 2b10 	vmov	r2, r3, d0
 8003438:	4620      	mov	r0, r4
 800343a:	4629      	mov	r1, r5
 800343c:	f7fd f8dc 	bl	80005f8 <__aeabi_dmul>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4650      	mov	r0, sl
 8003446:	4659      	mov	r1, fp
 8003448:	f7fc ff20 	bl	800028c <__adddf3>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4640      	mov	r0, r8
 8003452:	4649      	mov	r1, r9
 8003454:	f7fc ff1a 	bl	800028c <__adddf3>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fb7a 	bl	8000b58 <__aeabi_d2iz>
 8003464:	4603      	mov	r3, r0
 8003466:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		rotationOfChassis = rotationSpeedOfChassis * qeRotationWOWS;
 800346a:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <allCheShit+0x604>)
 800346c:	f993 3000 	ldrsb.w	r3, [r3]
 8003470:	b29a      	uxth	r2, r3
 8003472:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003476:	b29b      	uxth	r3, r3
 8003478:	fb12 f303 	smulbb	r3, r2, r3
 800347c:	b29b      	uxth	r3, r3
 800347e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003482:	e028      	b.n	80034d6 <allCheShit+0x646>
 8003484:	f3af 8000 	nop.w
 8003488:	9999999a 	.word	0x9999999a
 800348c:	40c196d9 	.word	0x40c196d9
 8003490:	20000864 	.word	0x20000864
 8003494:	20000860 	.word	0x20000860
	} else {
		xJoystickDirection = (rcRPM[0] + rcWS);
 8003498:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800349a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80034a4:	4413      	add	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		yJoystickDirection = (rcRPM[1] + rcQE);
 80034ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034ae:	3302      	adds	r3, #2
 80034b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80034b8:	4413      	add	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		rotationOfChassis = (rcRPM[2] + rcAD);
 80034c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034c2:	3304      	adds	r3, #4
 80034c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80034ce:	4413      	add	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	}

	usart_printf("3\r\n");
 80034d6:	4824      	ldr	r0, [pc, #144]	@ (8003568 <allCheShit+0x6d8>)
 80034d8:	f7ff fa0e 	bl	80028f8 <usart_printf>
    chassisTargetRPM[0] = yJoystickDirection + rotationOfChassis + xJoystickDirection;
 80034dc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80034e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034e4:	4413      	add	r3, r2
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034ec:	4413      	add	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	83bb      	strh	r3, [r7, #28]
    chassisTargetRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
 80034f4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80034f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034fc:	4413      	add	r3, r2
 80034fe:	b29a      	uxth	r2, r3
 8003500:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21b      	sxth	r3, r3
 800350a:	83fb      	strh	r3, [r7, #30]
    chassisTargetRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
 800350c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003510:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	b29a      	uxth	r2, r3
 8003518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	b29b      	uxth	r3, r3
 8003520:	b21b      	sxth	r3, r3
 8003522:	843b      	strh	r3, [r7, #32]
    chassisTargetRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003524:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003528:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	b29a      	uxth	r2, r3
 8003530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003534:	4413      	add	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	b21b      	sxth	r3, r3
 800353a:	847b      	strh	r3, [r7, #34]	@ 0x22

    bufferLimitedDriveMode(chassisTargetRPM, chassisPreset);
 800353c:	edd7 6a01 	vldr	s13, [r7, #4]
 8003540:	ed97 7a02 	vldr	s14, [r7, #8]
 8003544:	edd7 7a03 	vldr	s15, [r7, #12]
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	eeb0 0a66 	vmov.f32	s0, s13
 8003550:	eef0 0a47 	vmov.f32	s1, s14
 8003554:	eeb0 1a67 	vmov.f32	s2, s15
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fc31 	bl	8002dc0 <bufferLimitedDriveMode>

}
 800355e:	bf00      	nop
 8003560:	3750      	adds	r7, #80	@ 0x50
 8003562:	46bd      	mov	sp, r7
 8003564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003568:	08013d94 	.word	0x08013d94

0800356c <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8003574:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003578:	f009 fda8 	bl	800d0cc <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 800357c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003620 <imu_temp_control_task+0xb4>
 8003580:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8003624 <imu_temp_control_task+0xb8>
 8003584:	4a28      	ldr	r2, [pc, #160]	@ (8003628 <imu_temp_control_task+0xbc>)
 8003586:	2100      	movs	r1, #0
 8003588:	4828      	ldr	r0, [pc, #160]	@ (800362c <imu_temp_control_task+0xc0>)
 800358a:	f001 fd57 	bl	800503c <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800358e:	4b28      	ldr	r3, [pc, #160]	@ (8003630 <imu_temp_control_task+0xc4>)
 8003590:	2210      	movs	r2, #16
 8003592:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003594:	4826      	ldr	r0, [pc, #152]	@ (8003630 <imu_temp_control_task+0xc4>)
 8003596:	f006 ffb0 	bl	800a4fa <HAL_SPI_Init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80035a0:	f001 fd46 	bl	8005030 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80035a4:	2000      	movs	r0, #0
 80035a6:	f00a feaf 	bl	800e308 <pcTaskGetName>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00a ff3f 	bl	800e430 <xTaskGetHandle>
 80035b2:	4603      	mov	r3, r0
 80035b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <imu_temp_control_task+0xc8>)
 80035b6:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80035b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003638 <imu_temp_control_task+0xcc>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80035be:	bf00      	nop
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035c4:	2001      	movs	r0, #1
 80035c6:	f00b fb5f 	bl	800ec88 <ulTaskNotifyTake>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d1f7      	bne.n	80035c0 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 80035d0:	f7fd ffea 	bl	80015a8 <IMU_get_temp>
 80035d4:	eef0 7a40 	vmov.f32	s15, s0
 80035d8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800363c <imu_temp_control_task+0xd0>
 80035dc:	eeb0 0a67 	vmov.f32	s0, s15
 80035e0:	4812      	ldr	r0, [pc, #72]	@ (800362c <imu_temp_control_task+0xc0>)
 80035e2:	f001 fd82 	bl	80050ea <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <imu_temp_control_task+0xc0>)
 80035e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80035ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f4:	d503      	bpl.n	80035fe <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 80035f6:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <imu_temp_control_task+0xc0>)
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 80035fe:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <imu_temp_control_task+0xc0>)
 8003600:	edd3 7a08 	vldr	s15, [r3, #32]
 8003604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003608:	ee17 3a90 	vmov	r3, s15
 800360c:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 800360e:	89fb      	ldrh	r3, [r7, #14]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff f9dd 	bl	80029d0 <imu_pwm_set>
        osDelay(5);
 8003616:	2005      	movs	r0, #5
 8003618:	f009 fd58 	bl	800d0cc <osDelay>
    {
 800361c:	e7cf      	b.n	80035be <imu_temp_control_task+0x52>
 800361e:	bf00      	nop
 8003620:	45898000 	.word	0x45898000
 8003624:	458ca000 	.word	0x458ca000
 8003628:	08013e3c 	.word	0x08013e3c
 800362c:	20000884 	.word	0x20000884
 8003630:	20000980 	.word	0x20000980
 8003634:	2000087c 	.word	0x2000087c
 8003638:	20000880 	.word	0x20000880
 800363c:	42200000 	.word	0x42200000

08003640 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_GPIO_EXTI_Callback+0x54>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	88fa      	ldrh	r2, [r7, #6]
 8003650:	429a      	cmp	r2, r3
 8003652:	d11b      	bne.n	800368c <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8003654:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <HAL_GPIO_EXTI_Callback+0x58>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800365e:	f00b fa85 	bl	800eb6c <xTaskGetSchedulerState>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d011      	beq.n	800368c <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8003668:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <HAL_GPIO_EXTI_Callback+0x5c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	490c      	ldr	r1, [pc, #48]	@ (80036a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800366e:	4618      	mov	r0, r3
 8003670:	f00b fb56 	bl	800ed20 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <HAL_GPIO_EXTI_Callback+0x60>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_GPIO_EXTI_Callback+0x4c>
 800367c:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_GPIO_EXTI_Callback+0x64>)
 800367e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	2000000e 	.word	0x2000000e
 8003698:	20000880 	.word	0x20000880
 800369c:	2000087c 	.word	0x2000087c
 80036a0:	200008cc 	.word	0x200008cc
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80036b6:	f000 f8bd 	bl	8003834 <ist8310_GPIO_init>
    ist8310_com_init();
 80036ba:	f000 f8c2 	bl	8003842 <ist8310_com_init>

    ist8310_RST_L();
 80036be:	f000 f97b 	bl	80039b8 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 80036c2:	4b30      	ldr	r3, [pc, #192]	@ (8003784 <ist8310_init+0xdc>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f916 	bl	80038f8 <ist8310_delay_ms>
    ist8310_RST_H();
 80036cc:	f000 f968 	bl	80039a0 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 80036d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003784 <ist8310_init+0xdc>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f90f 	bl	80038f8 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 80036da:	2000      	movs	r0, #0
 80036dc:	f000 f8b8 	bl	8003850 <ist8310_IIC_read_single_reg>
 80036e0:	4603      	mov	r3, r0
 80036e2:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 80036e4:	79bb      	ldrb	r3, [r7, #6]
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d001      	beq.n	80036ee <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 80036ea:	2340      	movs	r3, #64	@ 0x40
 80036ec:	e045      	b.n	800377a <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80036ee:	2300      	movs	r3, #0
 80036f0:	71fb      	strb	r3, [r7, #7]
 80036f2:	e03e      	b.n	8003772 <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 80036f4:	79fa      	ldrb	r2, [r7, #7]
 80036f6:	4924      	ldr	r1, [pc, #144]	@ (8003788 <ist8310_init+0xe0>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	440b      	add	r3, r1
 8003700:	7818      	ldrb	r0, [r3, #0]
 8003702:	79fa      	ldrb	r2, [r7, #7]
 8003704:	4920      	ldr	r1, [pc, #128]	@ (8003788 <ist8310_init+0xe0>)
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	440b      	add	r3, r1
 800370e:	3301      	adds	r3, #1
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	4619      	mov	r1, r3
 8003714:	f000 f8b8 	bl	8003888 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8003718:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <ist8310_init+0xe4>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f8f9 	bl	8003914 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8003722:	79fa      	ldrb	r2, [r7, #7]
 8003724:	4918      	ldr	r1, [pc, #96]	@ (8003788 <ist8310_init+0xe0>)
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	440b      	add	r3, r1
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f88d 	bl	8003850 <ist8310_IIC_read_single_reg>
 8003736:	4603      	mov	r3, r0
 8003738:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 800373a:	4b14      	ldr	r3, [pc, #80]	@ (800378c <ist8310_init+0xe4>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f8e8 	bl	8003914 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8003744:	79fa      	ldrb	r2, [r7, #7]
 8003746:	4910      	ldr	r1, [pc, #64]	@ (8003788 <ist8310_init+0xe0>)
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	440b      	add	r3, r1
 8003750:	3301      	adds	r3, #1
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	79ba      	ldrb	r2, [r7, #6]
 8003756:	429a      	cmp	r2, r3
 8003758:	d008      	beq.n	800376c <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 800375a:	79fa      	ldrb	r2, [r7, #7]
 800375c:	490a      	ldr	r1, [pc, #40]	@ (8003788 <ist8310_init+0xe0>)
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	440b      	add	r3, r1
 8003766:	3302      	adds	r3, #2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	e006      	b.n	800377a <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	3301      	adds	r3, #1
 8003770:	71fb      	strb	r3, [r7, #7]
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d9bd      	bls.n	80036f4 <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08013e54 	.word	0x08013e54
 8003788:	08013e48 	.word	0x08013e48
 800378c:	08013e55 	.word	0x08013e55

08003790 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 800379c:	f107 0308 	add.w	r3, r7, #8
 80037a0:	2206      	movs	r2, #6
 80037a2:	4619      	mov	r1, r3
 80037a4:	2003      	movs	r0, #3
 80037a6:	f000 f88b 	bl	80038c0 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80037aa:	7a7b      	ldrb	r3, [r7, #9]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	b21a      	sxth	r2, r3
 80037b0:	7a3b      	ldrb	r3, [r7, #8]
 80037b2:	b21b      	sxth	r3, r3
 80037b4:	4313      	orrs	r3, r2
 80037b6:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80037b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003830 <ist8310_read_mag+0xa0>
 80037c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	7abb      	ldrb	r3, [r7, #10]
 80037da:	b21b      	sxth	r3, r3
 80037dc:	4313      	orrs	r3, r2
 80037de:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 80037e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003830 <ist8310_read_mag+0xa0>
 80037f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037f8:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 80037fc:	7b7b      	ldrb	r3, [r7, #13]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	b21a      	sxth	r2, r3
 8003802:	7b3b      	ldrb	r3, [r7, #12]
 8003804:	b21b      	sxth	r3, r3
 8003806:	4313      	orrs	r3, r2
 8003808:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800380a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3308      	adds	r3, #8
 800381a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003830 <ist8310_read_mag+0xa0>
 800381e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003822:	edc3 7a00 	vstr	s15, [r3]
}
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	3e99999a 	.word	0x3e99999a

08003834 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0

}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af04      	add	r7, sp, #16
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	b29a      	uxth	r2, r3
 8003862:	230a      	movs	r3, #10
 8003864:	9302      	str	r3, [sp, #8]
 8003866:	2301      	movs	r3, #1
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	f107 030f 	add.w	r3, r7, #15
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2301      	movs	r3, #1
 8003872:	211c      	movs	r1, #28
 8003874:	4803      	ldr	r0, [pc, #12]	@ (8003884 <ist8310_IIC_read_single_reg+0x34>)
 8003876:	f005 fbdb 	bl	8009030 <HAL_I2C_Mem_Read>
    return res;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	2000092c 	.word	0x2000092c

08003888 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af04      	add	r7, sp, #16
 800388e:	4603      	mov	r3, r0
 8003890:	460a      	mov	r2, r1
 8003892:	71fb      	strb	r3, [r7, #7]
 8003894:	4613      	mov	r3, r2
 8003896:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	b29a      	uxth	r2, r3
 800389c:	230a      	movs	r3, #10
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	2301      	movs	r3, #1
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	1dbb      	adds	r3, r7, #6
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2301      	movs	r3, #1
 80038aa:	211c      	movs	r1, #28
 80038ac:	4803      	ldr	r0, [pc, #12]	@ (80038bc <ist8310_IIC_write_single_reg+0x34>)
 80038ae:	f005 fac5 	bl	8008e3c <HAL_I2C_Mem_Write>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2000092c 	.word	0x2000092c

080038c0 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af04      	add	r7, sp, #16
 80038c6:	4603      	mov	r3, r0
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	71fb      	strb	r3, [r7, #7]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	79bb      	ldrb	r3, [r7, #6]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	210a      	movs	r1, #10
 80038da:	9102      	str	r1, [sp, #8]
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2301      	movs	r3, #1
 80038e4:	211c      	movs	r1, #28
 80038e6:	4803      	ldr	r0, [pc, #12]	@ (80038f4 <ist8310_IIC_read_muli_reg+0x34>)
 80038e8:	f005 fba2 	bl	8009030 <HAL_I2C_Mem_Read>
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000092c 	.word	0x2000092c

080038f8 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fbe7 	bl	80070d8 <HAL_Delay>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	@ 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8003932:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <ist8310_delay_us+0x88>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8003944:	4b15      	ldr	r3, [pc, #84]	@ (800399c <ist8310_delay_us+0x88>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 800394a:	4b14      	ldr	r3, [pc, #80]	@ (800399c <ist8310_delay_us+0x88>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	429a      	cmp	r2, r3
 8003956:	d0f8      	beq.n	800394a <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	d206      	bcs.n	800396e <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4413      	add	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	e007      	b.n	800397e <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	429a      	cmp	r2, r3
 8003988:	d200      	bcs.n	800398c <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 800398a:	e7de      	b.n	800394a <ist8310_delay_us+0x36>
            {
                break;
 800398c:	bf00      	nop
            }
        }
    }
}
 800398e:	bf00      	nop
 8003990:	3724      	adds	r7, #36	@ 0x24
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	e000e010 	.word	0xe000e010

080039a0 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80039a4:	2201      	movs	r2, #1
 80039a6:	2140      	movs	r1, #64	@ 0x40
 80039a8:	4802      	ldr	r0, [pc, #8]	@ (80039b4 <ist8310_RST_H+0x14>)
 80039aa:	f005 f8d1 	bl	8008b50 <HAL_GPIO_WritePin>
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021800 	.word	0x40021800

080039b8 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80039bc:	2200      	movs	r2, #0
 80039be:	2140      	movs	r1, #64	@ 0x40
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <ist8310_RST_L+0x14>)
 80039c2:	f005 f8c5 	bl	8008b50 <HAL_GPIO_WritePin>
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40021800 	.word	0x40021800

080039d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039d4:	f003 fb0e 	bl	8006ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039d8:	f000 f868 	bl	8003aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039dc:	f000 fd02 	bl	80043e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80039e0:	f000 fc9a 	bl	8004318 <MX_DMA_Init>
  MX_CAN1_Init();
 80039e4:	f000 f8ce 	bl	8003b84 <MX_CAN1_Init>
  MX_CAN2_Init();
 80039e8:	f000 f902 	bl	8003bf0 <MX_CAN2_Init>
  MX_SPI1_Init();
 80039ec:	f000 f964 	bl	8003cb8 <MX_SPI1_Init>
  MX_TIM4_Init();
 80039f0:	f000 fa40 	bl	8003e74 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80039f4:	f000 fc10 	bl	8004218 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80039f8:	f000 fc64 	bl	80042c4 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80039fc:	f000 f992 	bl	8003d24 <MX_TIM1_Init>
  MX_TIM8_Init();
 8003a00:	f000 fb20 	bl	8004044 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8003a04:	f000 fc32 	bl	800426c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003a08:	f000 fbb8 	bl	800417c <MX_TIM10_Init>
  MX_I2C3_Init();
 8003a0c:	f000 f926 	bl	8003c5c <MX_I2C3_Init>
  MX_TIM5_Init();
 8003a10:	f000 faa8 	bl	8003f64 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8003a14:	f7fe ffa2 	bl	800295c <can_filter_init>
  remote_control_init();
 8003a18:	f002 f87a 	bl	8005b10 <remote_control_init>
  usart_Init();
 8003a1c:	f7fe ff54 	bl	80028c8 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8003a20:	f002 f884 	bl	8005b2c <get_remote_control_point>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4a14      	ldr	r2, [pc, #80]	@ (8003a78 <main+0xa8>)
 8003a28:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003a2a:	f009 fa73 	bl	800cf14 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8003a2e:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <main+0xac>)
 8003a30:	2100      	movs	r1, #0
 8003a32:	4813      	ldr	r0, [pc, #76]	@ (8003a80 <main+0xb0>)
 8003a34:	f009 fab8 	bl	800cfa8 <osThreadNew>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a12      	ldr	r2, [pc, #72]	@ (8003a84 <main+0xb4>)
 8003a3c:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8003a3e:	4a12      	ldr	r2, [pc, #72]	@ (8003a88 <main+0xb8>)
 8003a40:	2100      	movs	r1, #0
 8003a42:	4812      	ldr	r0, [pc, #72]	@ (8003a8c <main+0xbc>)
 8003a44:	f009 fab0 	bl	800cfa8 <osThreadNew>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4a11      	ldr	r2, [pc, #68]	@ (8003a90 <main+0xc0>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8003a4e:	4a11      	ldr	r2, [pc, #68]	@ (8003a94 <main+0xc4>)
 8003a50:	2100      	movs	r1, #0
 8003a52:	4811      	ldr	r0, [pc, #68]	@ (8003a98 <main+0xc8>)
 8003a54:	f009 faa8 	bl	800cfa8 <osThreadNew>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4a10      	ldr	r2, [pc, #64]	@ (8003a9c <main+0xcc>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8003a5e:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <main+0xd0>)
 8003a60:	2100      	movs	r1, #0
 8003a62:	4810      	ldr	r0, [pc, #64]	@ (8003aa4 <main+0xd4>)
 8003a64:	f009 faa0 	bl	800cfa8 <osThreadNew>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa8 <main+0xd8>)
 8003a6c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003a6e:	f009 fa75 	bl	800cf5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a72:	bf00      	nop
 8003a74:	e7fd      	b.n	8003a72 <main+0xa2>
 8003a76:	bf00      	nop
 8003a78:	20000f28 	.word	0x20000f28
 8003a7c:	08013e58 	.word	0x08013e58
 8003a80:	080045d9 	.word	0x080045d9
 8003a84:	20000f18 	.word	0x20000f18
 8003a88:	08013e7c 	.word	0x08013e7c
 8003a8c:	08004691 	.word	0x08004691
 8003a90:	20000f1c 	.word	0x20000f1c
 8003a94:	08013ea0 	.word	0x08013ea0
 8003a98:	0800356d 	.word	0x0800356d
 8003a9c:	20000f20 	.word	0x20000f20
 8003aa0:	08013ec4 	.word	0x08013ec4
 8003aa4:	08005021 	.word	0x08005021
 8003aa8:	20000f24 	.word	0x20000f24

08003aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b094      	sub	sp, #80	@ 0x50
 8003ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab2:	f107 0320 	add.w	r3, r7, #32
 8003ab6:	2230      	movs	r2, #48	@ 0x30
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f00c feee 	bl	801089c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <SystemClock_Config+0xd0>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <SystemClock_Config+0xd0>)
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae0:	4b26      	ldr	r3, [pc, #152]	@ (8003b7c <SystemClock_Config+0xd0>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aec:	2300      	movs	r3, #0
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	4b23      	ldr	r3, [pc, #140]	@ (8003b80 <SystemClock_Config+0xd4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a22      	ldr	r2, [pc, #136]	@ (8003b80 <SystemClock_Config+0xd4>)
 8003af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <SystemClock_Config+0xd4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b12:	2302      	movs	r3, #2
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003b1c:	2306      	movs	r3, #6
 8003b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b20:	23a8      	movs	r3, #168	@ 0xa8
 8003b22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b24:	2302      	movs	r3, #2
 8003b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b28:	2304      	movs	r3, #4
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b2c:	f107 0320 	add.w	r3, r7, #32
 8003b30:	4618      	mov	r0, r3
 8003b32:	f006 f863 	bl	8009bfc <HAL_RCC_OscConfig>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003b3c:	f001 fa78 	bl	8005030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b40:	230f      	movs	r3, #15
 8003b42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b44:	2302      	movs	r3, #2
 8003b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	2105      	movs	r1, #5
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f006 fac4 	bl	800a0ec <HAL_RCC_ClockConfig>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003b6a:	f001 fa61 	bl	8005030 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003b6e:	f006 fba3 	bl	800a2b8 <HAL_RCC_EnableCSS>
}
 8003b72:	bf00      	nop
 8003b74:	3750      	adds	r7, #80	@ 0x50
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000

08003b84 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003b88:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003b8a:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <MX_CAN1_Init+0x68>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003b90:	2203      	movs	r2, #3
 8003b92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003b94:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003ba2:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003ba6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003baa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003bae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003bc2:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003bc8:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003bd4:	4804      	ldr	r0, [pc, #16]	@ (8003be8 <MX_CAN1_Init+0x64>)
 8003bd6:	f003 faa3 	bl	8007120 <HAL_CAN_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003be0:	f001 fa26 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200008dc 	.word	0x200008dc
 8003bec:	40006400 	.word	0x40006400

08003bf0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003bf4:	4b17      	ldr	r3, [pc, #92]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003bf6:	4a18      	ldr	r2, [pc, #96]	@ (8003c58 <MX_CAN2_Init+0x68>)
 8003bf8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8003bfa:	4b16      	ldr	r3, [pc, #88]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003c00:	4b14      	ldr	r3, [pc, #80]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c06:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c0e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003c12:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003c14:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c16:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003c1a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003c22:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003c2e:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003c34:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003c40:	4804      	ldr	r0, [pc, #16]	@ (8003c54 <MX_CAN2_Init+0x64>)
 8003c42:	f003 fa6d 	bl	8007120 <HAL_CAN_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003c4c:	f001 f9f0 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000904 	.word	0x20000904
 8003c58:	40006800 	.word	0x40006800

08003c5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003c60:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c62:	4a13      	ldr	r2, [pc, #76]	@ (8003cb0 <MX_I2C3_Init+0x54>)
 8003c64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003c66:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c68:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <MX_I2C3_Init+0x58>)
 8003c6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c7e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c80:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003c86:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c8c:	4b07      	ldr	r3, [pc, #28]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c92:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003c98:	4804      	ldr	r0, [pc, #16]	@ (8003cac <MX_I2C3_Init+0x50>)
 8003c9a:	f004 ff8b 	bl	8008bb4 <HAL_I2C_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003ca4:	f001 f9c4 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	2000092c 	.word	0x2000092c
 8003cb0:	40005c00 	.word	0x40005c00
 8003cb4:	00061a80 	.word	0x00061a80

08003cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cbc:	4b17      	ldr	r3, [pc, #92]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cbe:	4a18      	ldr	r2, [pc, #96]	@ (8003d20 <MX_SPI1_Init+0x68>)
 8003cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cc2:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cca:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cd8:	2202      	movs	r2, #2
 8003cda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cec:	2238      	movs	r2, #56	@ 0x38
 8003cee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cf6:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003d04:	220a      	movs	r2, #10
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d08:	4804      	ldr	r0, [pc, #16]	@ (8003d1c <MX_SPI1_Init+0x64>)
 8003d0a:	f006 fbf6 	bl	800a4fa <HAL_SPI_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d14:	f001 f98c 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000980 	.word	0x20000980
 8003d20:	40013000 	.word	0x40013000

08003d24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b092      	sub	sp, #72	@ 0x48
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
 8003d44:	615a      	str	r2, [r3, #20]
 8003d46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f00c fda4 	bl	801089c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d54:	4b45      	ldr	r3, [pc, #276]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d56:	4a46      	ldr	r2, [pc, #280]	@ (8003e70 <MX_TIM1_Init+0x14c>)
 8003d58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8003d5a:	4b44      	ldr	r3, [pc, #272]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d5c:	2253      	movs	r2, #83	@ 0x53
 8003d5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d60:	4b42      	ldr	r3, [pc, #264]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003d66:	4b41      	ldr	r3, [pc, #260]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d68:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003d6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d74:	4b3d      	ldr	r3, [pc, #244]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d80:	483a      	ldr	r0, [pc, #232]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003d82:	f006 ff87 	bl	800ac94 <HAL_TIM_PWM_Init>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003d8c:	f001 f950 	bl	8005030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4833      	ldr	r0, [pc, #204]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003da0:	f007 fda6 	bl	800b8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003daa:	f001 f941 	bl	8005030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dae:	2360      	movs	r3, #96	@ 0x60
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003db6:	2300      	movs	r3, #0
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4826      	ldr	r0, [pc, #152]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003dd4:	f007 f8e6 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003dde:	f001 f927 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de6:	2204      	movs	r2, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4820      	ldr	r0, [pc, #128]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003dec:	f007 f8da 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003df6:	f001 f91b 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dfe:	2208      	movs	r2, #8
 8003e00:	4619      	mov	r1, r3
 8003e02:	481a      	ldr	r0, [pc, #104]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003e04:	f007 f8ce 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003e0e:	f001 f90f 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e16:	220c      	movs	r2, #12
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4814      	ldr	r0, [pc, #80]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003e1c:	f007 f8c2 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003e26:	f001 f903 	bl	8005030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4807      	ldr	r0, [pc, #28]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003e4e:	f007 fdcb 	bl	800b9e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003e58:	f001 f8ea 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e5c:	4803      	ldr	r0, [pc, #12]	@ (8003e6c <MX_TIM1_Init+0x148>)
 8003e5e:	f002 fc21 	bl	80066a4 <HAL_TIM_MspPostInit>

}
 8003e62:	bf00      	nop
 8003e64:	3748      	adds	r7, #72	@ 0x48
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200009d8 	.word	0x200009d8
 8003e70:	40010000 	.word	0x40010000

08003e74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08e      	sub	sp, #56	@ 0x38
 8003e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e88:	f107 0320 	add.w	r3, r7, #32
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
 8003ea0:	615a      	str	r2, [r3, #20]
 8003ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8003f60 <MX_TIM4_Init+0xec>)
 8003ea8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003eac:	2253      	movs	r2, #83	@ 0x53
 8003eae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8003eb6:	4b29      	ldr	r3, [pc, #164]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003eb8:	f245 2207 	movw	r2, #20999	@ 0x5207
 8003ebc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ec4:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003ec6:	2280      	movs	r2, #128	@ 0x80
 8003ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003eca:	4824      	ldr	r0, [pc, #144]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003ecc:	f006 fe2a 	bl	800ab24 <HAL_TIM_Base_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003ed6:	f001 f8ab 	bl	8005030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ee0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	481d      	ldr	r0, [pc, #116]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003ee8:	f007 f91e 	bl	800b128 <HAL_TIM_ConfigClockSource>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003ef2:	f001 f89d 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ef6:	4819      	ldr	r0, [pc, #100]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003ef8:	f006 fecc 	bl	800ac94 <HAL_TIM_PWM_Init>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003f02:	f001 f895 	bl	8005030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f0e:	f107 0320 	add.w	r3, r7, #32
 8003f12:	4619      	mov	r1, r3
 8003f14:	4811      	ldr	r0, [pc, #68]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003f16:	f007 fceb 	bl	800b8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003f20:	f001 f886 	bl	8005030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f24:	2360      	movs	r3, #96	@ 0x60
 8003f26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8003f28:	f642 1303 	movw	r3, #10499	@ 0x2903
 8003f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	2208      	movs	r2, #8
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4807      	ldr	r0, [pc, #28]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003f3e:	f007 f831 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003f48:	f001 f872 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003f4c:	4803      	ldr	r0, [pc, #12]	@ (8003f5c <MX_TIM4_Init+0xe8>)
 8003f4e:	f002 fba9 	bl	80066a4 <HAL_TIM_MspPostInit>

}
 8003f52:	bf00      	nop
 8003f54:	3738      	adds	r7, #56	@ 0x38
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000a20 	.word	0x20000a20
 8003f60:	40000800 	.word	0x40000800

08003f64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	@ 0x28
 8003f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6a:	f107 0320 	add.w	r3, r7, #32
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	615a      	str	r2, [r3, #20]
 8003f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f86:	4b2d      	ldr	r3, [pc, #180]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003f88:	4a2d      	ldr	r2, [pc, #180]	@ (8004040 <MX_TIM5_Init+0xdc>)
 8003f8a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003f8e:	2253      	movs	r2, #83	@ 0x53
 8003f90:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8003f98:	4b28      	ldr	r3, [pc, #160]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003f9a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8003f9e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa0:	4b26      	ldr	r3, [pc, #152]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa6:	4b25      	ldr	r3, [pc, #148]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003fac:	4823      	ldr	r0, [pc, #140]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003fae:	f006 fe71 	bl	800ac94 <HAL_TIM_PWM_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003fb8:	f001 f83a 	bl	8005030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003fc4:	f107 0320 	add.w	r3, r7, #32
 8003fc8:	4619      	mov	r1, r3
 8003fca:	481c      	ldr	r0, [pc, #112]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003fcc:	f007 fc90 	bl	800b8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8003fd6:	f001 f82b 	bl	8005030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fda:	2360      	movs	r3, #96	@ 0x60
 8003fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	2200      	movs	r2, #0
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4812      	ldr	r0, [pc, #72]	@ (800403c <MX_TIM5_Init+0xd8>)
 8003ff2:	f006 ffd7 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003ffc:	f001 f818 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	2204      	movs	r2, #4
 8004004:	4619      	mov	r1, r3
 8004006:	480d      	ldr	r0, [pc, #52]	@ (800403c <MX_TIM5_Init+0xd8>)
 8004008:	f006 ffcc 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8004012:	f001 f80d 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	2208      	movs	r2, #8
 800401a:	4619      	mov	r1, r3
 800401c:	4807      	ldr	r0, [pc, #28]	@ (800403c <MX_TIM5_Init+0xd8>)
 800401e:	f006 ffc1 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8004028:	f001 f802 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800402c:	4803      	ldr	r0, [pc, #12]	@ (800403c <MX_TIM5_Init+0xd8>)
 800402e:	f002 fb39 	bl	80066a4 <HAL_TIM_MspPostInit>

}
 8004032:	bf00      	nop
 8004034:	3728      	adds	r7, #40	@ 0x28
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000a68 	.word	0x20000a68
 8004040:	40000c00 	.word	0x40000c00

08004044 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b092      	sub	sp, #72	@ 0x48
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800404a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
 8004064:	615a      	str	r2, [r3, #20]
 8004066:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004068:	1d3b      	adds	r3, r7, #4
 800406a:	2220      	movs	r2, #32
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f00c fc14 	bl	801089c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004074:	4b3f      	ldr	r3, [pc, #252]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004076:	4a40      	ldr	r2, [pc, #256]	@ (8004178 <MX_TIM8_Init+0x134>)
 8004078:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 800407a:	4b3e      	ldr	r3, [pc, #248]	@ (8004174 <MX_TIM8_Init+0x130>)
 800407c:	2253      	movs	r2, #83	@ 0x53
 800407e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004080:	4b3c      	ldr	r3, [pc, #240]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8004086:	4b3b      	ldr	r3, [pc, #236]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004088:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800408c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800408e:	4b39      	ldr	r3, [pc, #228]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004094:	4b37      	ldr	r3, [pc, #220]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004096:	2200      	movs	r2, #0
 8004098:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800409a:	4b36      	ldr	r3, [pc, #216]	@ (8004174 <MX_TIM8_Init+0x130>)
 800409c:	2280      	movs	r2, #128	@ 0x80
 800409e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040a0:	4834      	ldr	r0, [pc, #208]	@ (8004174 <MX_TIM8_Init+0x130>)
 80040a2:	f006 fdf7 	bl	800ac94 <HAL_TIM_PWM_Init>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80040ac:	f000 ffc0 	bl	8005030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b0:	2300      	movs	r3, #0
 80040b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80040bc:	4619      	mov	r1, r3
 80040be:	482d      	ldr	r0, [pc, #180]	@ (8004174 <MX_TIM8_Init+0x130>)
 80040c0:	f007 fc16 	bl	800b8f0 <HAL_TIMEx_MasterConfigSynchronization>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80040ca:	f000 ffb1 	bl	8005030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ce:	2360      	movs	r3, #96	@ 0x60
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040d6:	2300      	movs	r3, #0
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040da:	2300      	movs	r3, #0
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040ee:	2200      	movs	r2, #0
 80040f0:	4619      	mov	r1, r3
 80040f2:	4820      	ldr	r0, [pc, #128]	@ (8004174 <MX_TIM8_Init+0x130>)
 80040f4:	f006 ff56 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80040fe:	f000 ff97 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004106:	2204      	movs	r2, #4
 8004108:	4619      	mov	r1, r3
 800410a:	481a      	ldr	r0, [pc, #104]	@ (8004174 <MX_TIM8_Init+0x130>)
 800410c:	f006 ff4a 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004116:	f000 ff8b 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800411a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800411e:	2208      	movs	r2, #8
 8004120:	4619      	mov	r1, r3
 8004122:	4814      	ldr	r0, [pc, #80]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004124:	f006 ff3e 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800412e:	f000 ff7f 	bl	8005030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800414a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800414c:	2300      	movs	r3, #0
 800414e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004150:	1d3b      	adds	r3, r7, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4807      	ldr	r0, [pc, #28]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004156:	f007 fc47 	bl	800b9e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8004160:	f000 ff66 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004164:	4803      	ldr	r0, [pc, #12]	@ (8004174 <MX_TIM8_Init+0x130>)
 8004166:	f002 fa9d 	bl	80066a4 <HAL_TIM_MspPostInit>

}
 800416a:	bf00      	nop
 800416c:	3748      	adds	r7, #72	@ 0x48
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000ab0 	.word	0x20000ab0
 8004178:	40010400 	.word	0x40010400

0800417c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	611a      	str	r2, [r3, #16]
 8004190:	615a      	str	r2, [r3, #20]
 8004192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004194:	4b1e      	ldr	r3, [pc, #120]	@ (8004210 <MX_TIM10_Init+0x94>)
 8004196:	4a1f      	ldr	r2, [pc, #124]	@ (8004214 <MX_TIM10_Init+0x98>)
 8004198:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800419a:	4b1d      	ldr	r3, [pc, #116]	@ (8004210 <MX_TIM10_Init+0x94>)
 800419c:	2200      	movs	r2, #0
 800419e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <MX_TIM10_Init+0x94>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <MX_TIM10_Init+0x94>)
 80041a8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80041ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ae:	4b18      	ldr	r3, [pc, #96]	@ (8004210 <MX_TIM10_Init+0x94>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041b4:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <MX_TIM10_Init+0x94>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80041ba:	4815      	ldr	r0, [pc, #84]	@ (8004210 <MX_TIM10_Init+0x94>)
 80041bc:	f006 fcb2 	bl	800ab24 <HAL_TIM_Base_Init>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80041c6:	f000 ff33 	bl	8005030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80041ca:	4811      	ldr	r0, [pc, #68]	@ (8004210 <MX_TIM10_Init+0x94>)
 80041cc:	f006 fd62 	bl	800ac94 <HAL_TIM_PWM_Init>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80041d6:	f000 ff2b 	bl	8005030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041da:	2360      	movs	r3, #96	@ 0x60
 80041dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	2200      	movs	r2, #0
 80041ee:	4619      	mov	r1, r3
 80041f0:	4807      	ldr	r0, [pc, #28]	@ (8004210 <MX_TIM10_Init+0x94>)
 80041f2:	f006 fed7 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80041fc:	f000 ff18 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004200:	4803      	ldr	r0, [pc, #12]	@ (8004210 <MX_TIM10_Init+0x94>)
 8004202:	f002 fa4f 	bl	80066a4 <HAL_TIM_MspPostInit>

}
 8004206:	bf00      	nop
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000af8 	.word	0x20000af8
 8004214:	40014400 	.word	0x40014400

08004218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800421c:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 800421e:	4a12      	ldr	r2, [pc, #72]	@ (8004268 <MX_USART1_UART_Init+0x50>)
 8004220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004222:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 8004224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 8004232:	2200      	movs	r2, #0
 8004234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800423c:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 800423e:	220c      	movs	r2, #12
 8004240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004242:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 8004244:	2200      	movs	r2, #0
 8004246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <MX_USART1_UART_Init+0x4c>)
 8004250:	f007 fc1c 	bl	800ba8c <HAL_UART_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800425a:	f000 fee9 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000c60 	.word	0x20000c60
 8004268:	40011000 	.word	0x40011000

0800426c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004272:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <MX_USART3_UART_Init+0x50>)
 8004274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8004276:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004278:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <MX_USART3_UART_Init+0x54>)
 800427a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800427c:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004284:	2200      	movs	r2, #0
 8004286:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 800428a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800428e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004292:	220c      	movs	r2, #12
 8004294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004296:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 8004298:	2200      	movs	r2, #0
 800429a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800429c:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 800429e:	2200      	movs	r2, #0
 80042a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042a2:	4805      	ldr	r0, [pc, #20]	@ (80042b8 <MX_USART3_UART_Init+0x4c>)
 80042a4:	f007 fbf2 	bl	800ba8c <HAL_UART_Init>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80042ae:	f000 febf 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000ca8 	.word	0x20000ca8
 80042bc:	40004800 	.word	0x40004800
 80042c0:	000186a0 	.word	0x000186a0

080042c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042ca:	4a12      	ldr	r2, [pc, #72]	@ (8004314 <MX_USART6_UART_Init+0x50>)
 80042cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80042ce:	4b10      	ldr	r3, [pc, #64]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80042d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80042dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80042e8:	4b09      	ldr	r3, [pc, #36]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042ea:	220c      	movs	r2, #12
 80042ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ee:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f4:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80042fa:	4805      	ldr	r0, [pc, #20]	@ (8004310 <MX_USART6_UART_Init+0x4c>)
 80042fc:	f007 fbc6 	bl	800ba8c <HAL_UART_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004306:	f000 fe93 	bl	8005030 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000cf0 	.word	0x20000cf0
 8004314:	40011400 	.word	0x40011400

08004318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <MX_DMA_Init+0xc8>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	4a2e      	ldr	r2, [pc, #184]	@ (80043e0 <MX_DMA_Init+0xc8>)
 8004328:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800432c:	6313      	str	r3, [r2, #48]	@ 0x30
 800432e:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <MX_DMA_Init+0xc8>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4b28      	ldr	r3, [pc, #160]	@ (80043e0 <MX_DMA_Init+0xc8>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	4a27      	ldr	r2, [pc, #156]	@ (80043e0 <MX_DMA_Init+0xc8>)
 8004344:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004348:	6313      	str	r3, [r2, #48]	@ 0x30
 800434a:	4b25      	ldr	r3, [pc, #148]	@ (80043e0 <MX_DMA_Init+0xc8>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2105      	movs	r1, #5
 800435a:	200c      	movs	r0, #12
 800435c:	f003 fe23 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004360:	200c      	movs	r0, #12
 8004362:	f003 fe3c 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2105      	movs	r1, #5
 800436a:	200d      	movs	r0, #13
 800436c:	f003 fe1b 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004370:	200d      	movs	r0, #13
 8004372:	f003 fe34 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8004376:	2200      	movs	r2, #0
 8004378:	2105      	movs	r1, #5
 800437a:	200f      	movs	r0, #15
 800437c:	f003 fe13 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004380:	200f      	movs	r0, #15
 8004382:	f003 fe2c 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	2105      	movs	r1, #5
 800438a:	202f      	movs	r0, #47	@ 0x2f
 800438c:	f003 fe0b 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004390:	202f      	movs	r0, #47	@ 0x2f
 8004392:	f003 fe24 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2105      	movs	r1, #5
 800439a:	2039      	movs	r0, #57	@ 0x39
 800439c:	f003 fe03 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80043a0:	2039      	movs	r0, #57	@ 0x39
 80043a2:	f003 fe1c 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2105      	movs	r1, #5
 80043aa:	203a      	movs	r0, #58	@ 0x3a
 80043ac:	f003 fdfb 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80043b0:	203a      	movs	r0, #58	@ 0x3a
 80043b2:	f003 fe14 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2105      	movs	r1, #5
 80043ba:	2045      	movs	r0, #69	@ 0x45
 80043bc:	f003 fdf3 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80043c0:	2045      	movs	r0, #69	@ 0x45
 80043c2:	f003 fe0c 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2105      	movs	r1, #5
 80043ca:	2046      	movs	r0, #70	@ 0x46
 80043cc:	f003 fdeb 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80043d0:	2046      	movs	r0, #70	@ 0x46
 80043d2:	f003 fe04 	bl	8007fde <HAL_NVIC_EnableIRQ>

}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800

080043e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08e      	sub	sp, #56	@ 0x38
 80043e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	4b71      	ldr	r3, [pc, #452]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004402:	4a70      	ldr	r2, [pc, #448]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004404:	f043 0302 	orr.w	r3, r3, #2
 8004408:	6313      	str	r3, [r2, #48]	@ 0x30
 800440a:	4b6e      	ldr	r3, [pc, #440]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	4b6a      	ldr	r3, [pc, #424]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	4a69      	ldr	r2, [pc, #420]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004424:	6313      	str	r3, [r2, #48]	@ 0x30
 8004426:	4b67      	ldr	r3, [pc, #412]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	4b63      	ldr	r3, [pc, #396]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4a62      	ldr	r2, [pc, #392]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6313      	str	r3, [r2, #48]	@ 0x30
 8004442:	4b60      	ldr	r3, [pc, #384]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	4b5c      	ldr	r3, [pc, #368]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	4a5b      	ldr	r2, [pc, #364]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	6313      	str	r3, [r2, #48]	@ 0x30
 800445e:	4b59      	ldr	r3, [pc, #356]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	4b55      	ldr	r3, [pc, #340]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	4a54      	ldr	r2, [pc, #336]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004474:	f043 0304 	orr.w	r3, r3, #4
 8004478:	6313      	str	r3, [r2, #48]	@ 0x30
 800447a:	4b52      	ldr	r3, [pc, #328]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	4b4e      	ldr	r3, [pc, #312]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	4a4d      	ldr	r2, [pc, #308]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004494:	6313      	str	r3, [r2, #48]	@ 0x30
 8004496:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	4b47      	ldr	r3, [pc, #284]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	4a46      	ldr	r2, [pc, #280]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b2:	4b44      	ldr	r3, [pc, #272]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	4b40      	ldr	r3, [pc, #256]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	4a3f      	ldr	r2, [pc, #252]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044c8:	f043 0320 	orr.w	r3, r3, #32
 80044cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ce:	4b3d      	ldr	r3, [pc, #244]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	4a38      	ldr	r2, [pc, #224]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044e4:	f043 0310 	orr.w	r3, r3, #16
 80044e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ea:	4b36      	ldr	r3, [pc, #216]	@ (80045c4 <MX_GPIO_Init+0x1e0>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2140      	movs	r1, #64	@ 0x40
 80044fa:	4833      	ldr	r0, [pc, #204]	@ (80045c8 <MX_GPIO_Init+0x1e4>)
 80044fc:	f004 fb28 	bl	8008b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004500:	2200      	movs	r2, #0
 8004502:	2110      	movs	r1, #16
 8004504:	4831      	ldr	r0, [pc, #196]	@ (80045cc <MX_GPIO_Init+0x1e8>)
 8004506:	f004 fb23 	bl	8008b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800450a:	2200      	movs	r2, #0
 800450c:	2101      	movs	r1, #1
 800450e:	4830      	ldr	r0, [pc, #192]	@ (80045d0 <MX_GPIO_Init+0x1ec>)
 8004510:	f004 fb1e 	bl	8008b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004514:	2340      	movs	r3, #64	@ 0x40
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004518:	2301      	movs	r3, #1
 800451a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004520:	2300      	movs	r3, #0
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004528:	4619      	mov	r1, r3
 800452a:	4827      	ldr	r0, [pc, #156]	@ (80045c8 <MX_GPIO_Init+0x1e4>)
 800452c:	f004 f974 	bl	8008818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004530:	2308      	movs	r3, #8
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004534:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800453e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004542:	4619      	mov	r1, r3
 8004544:	4820      	ldr	r0, [pc, #128]	@ (80045c8 <MX_GPIO_Init+0x1e4>)
 8004546:	f004 f967 	bl	8008818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800454a:	2310      	movs	r3, #16
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800454e:	2301      	movs	r3, #1
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004556:	2300      	movs	r3, #0
 8004558:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800455e:	4619      	mov	r1, r3
 8004560:	481a      	ldr	r0, [pc, #104]	@ (80045cc <MX_GPIO_Init+0x1e8>)
 8004562:	f004 f959 	bl	8008818 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8004566:	2330      	movs	r3, #48	@ 0x30
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800456a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800456e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004578:	4619      	mov	r1, r3
 800457a:	4816      	ldr	r0, [pc, #88]	@ (80045d4 <MX_GPIO_Init+0x1f0>)
 800457c:	f004 f94c 	bl	8008818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004580:	2301      	movs	r3, #1
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004584:	2301      	movs	r3, #1
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458c:	2300      	movs	r3, #0
 800458e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004594:	4619      	mov	r1, r3
 8004596:	480e      	ldr	r0, [pc, #56]	@ (80045d0 <MX_GPIO_Init+0x1ec>)
 8004598:	f004 f93e 	bl	8008818 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800459c:	2200      	movs	r2, #0
 800459e:	2105      	movs	r1, #5
 80045a0:	2009      	movs	r0, #9
 80045a2:	f003 fd00 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045a6:	2009      	movs	r0, #9
 80045a8:	f003 fd19 	bl	8007fde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2105      	movs	r1, #5
 80045b0:	200a      	movs	r0, #10
 80045b2:	f003 fcf8 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045b6:	200a      	movs	r0, #10
 80045b8:	f003 fd11 	bl	8007fde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80045bc:	bf00      	nop
 80045be:	3738      	adds	r7, #56	@ 0x38
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40021800 	.word	0x40021800
 80045cc:	40020000 	.word	0x40020000
 80045d0:	40020400 	.word	0x40020400
 80045d4:	40020800 	.word	0x40020800

080045d8 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	// LED_PWM_Start();
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 80045e0:	2201      	movs	r2, #1
 80045e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80045e6:	4823      	ldr	r0, [pc, #140]	@ (8004674 <TaskMain+0x9c>)
 80045e8:	f004 fab2 	bl	8008b50 <HAL_GPIO_WritePin>
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 80045ec:	f7fc fe60 	bl	80012b0 <BMI088_accel_init>
		//usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 80045f0:	f7fc ff16 	bl	8001420 <BMI088_gyro_init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <TaskMain+0x28>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 80045fa:	481f      	ldr	r0, [pc, #124]	@ (8004678 <TaskMain+0xa0>)
 80045fc:	f7fe f97c 	bl	80028f8 <usart_printf>
	}
	if (ist8310_init()) {
 8004600:	f7ff f852 	bl	80036a8 <ist8310_init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <TaskMain+0x38>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 800460a:	481c      	ldr	r0, [pc, #112]	@ (800467c <TaskMain+0xa4>)
 800460c:	f7fe f974 	bl	80028f8 <usart_printf>
	}
	CAN_defineMotor(Bus2, M3508, 1);
 8004610:	2201      	movs	r2, #1
 8004612:	2101      	movs	r1, #1
 8004614:	2002      	movs	r0, #2
 8004616:	f7fd fa43 	bl	8001aa0 <CAN_defineMotor>
	CAN_defineMotor(Bus2, M2006, 2);
 800461a:	2202      	movs	r2, #2
 800461c:	2102      	movs	r1, #2
 800461e:	2002      	movs	r0, #2
 8004620:	f7fd fa3e 	bl	8001aa0 <CAN_defineMotor>
	CAN_defineMotor(Bus2, GM6020, 1);
 8004624:	2201      	movs	r2, #1
 8004626:	2103      	movs	r1, #3
 8004628:	2002      	movs	r0, #2
 800462a:	f7fd fa39 	bl	8001aa0 <CAN_defineMotor>

	osDelay(150);
 800462e:	2096      	movs	r0, #150	@ 0x96
 8004630:	f008 fd4c 	bl	800d0cc <osDelay>
	PWMOutput(LED, 2, 500);
 8004634:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004638:	2102      	movs	r1, #2
 800463a:	2001      	movs	r0, #1
 800463c:	f001 f8d4 	bl	80057e8 <PWMOutput>
	PWMInitialize(LED, FR, 2, 0.9);
 8004640:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8004680 <TaskMain+0xa8>
 8004644:	2202      	movs	r2, #2
 8004646:	2101      	movs	r1, #1
 8004648:	2001      	movs	r0, #1
 800464a:	f000 ffb5 	bl	80055b8 <PWMInitialize>
	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
	JoulesBuffer = 60;
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <TaskMain+0xac>)
 8004650:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <TaskMain+0xb0>)
 8004652:	601a      	str	r2, [r3, #0]
		}
		settingMaxCurrentVal(JoulesBuffer, PowerLimitor);
		osDelay(100);
		*/
		// usart_printf("%d\r\n", power_heat_data.buffer_energy);
		settingMaxCurrentVal((float)power_heat_data.buffer_energy,100);
 8004654:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <TaskMain+0xb4>)
 8004656:	891b      	ldrh	r3, [r3, #8]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004660:	2064      	movs	r0, #100	@ 0x64
 8004662:	eeb0 0a67 	vmov.f32	s0, s15
 8004666:	f7fe fa7b 	bl	8002b60 <settingMaxCurrentVal>
		osDelay(5);
 800466a:	2005      	movs	r0, #5
 800466c:	f008 fd2e 	bl	800d0cc <osDelay>
		settingMaxCurrentVal((float)power_heat_data.buffer_energy,100);
 8004670:	bf00      	nop
 8004672:	e7ef      	b.n	8004654 <TaskMain+0x7c>
 8004674:	40021c00 	.word	0x40021c00
 8004678:	08013dcc 	.word	0x08013dcc
 800467c:	08013df8 	.word	0x08013df8
 8004680:	3f666666 	.word	0x3f666666
 8004684:	20000094 	.word	0x20000094
 8004688:	42700000 	.word	0x42700000
 800468c:	20000714 	.word	0x20000714

08004690 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	b0af      	sub	sp, #188	@ 0xbc
 8004696:	af06      	add	r7, sp, #24
 8004698:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN TaskChassis */

	PWMInit(&htim1, &htim4, &htim5, &htim8);
 800469a:	4b9e      	ldr	r3, [pc, #632]	@ (8004914 <TaskChassis+0x284>)
 800469c:	4a9e      	ldr	r2, [pc, #632]	@ (8004918 <TaskChassis+0x288>)
 800469e:	499f      	ldr	r1, [pc, #636]	@ (800491c <TaskChassis+0x28c>)
 80046a0:	489f      	ldr	r0, [pc, #636]	@ (8004920 <TaskChassis+0x290>)
 80046a2:	f000 fe6b 	bl	800537c <PWMInit>
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 80046a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	605a      	str	r2, [r3, #4]
    int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 80046b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]


    int16_t rcYaw = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    int16_t chassisrcYaw = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    int16_t previousVal = getRotorPosition(Bus2, GM6020, 5);
    float prevGyroVal = 0;
    */

    // int16_t rcPitch = 0;   	                    // range: 2204 ~ 4726
    int8_t jammed = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    int8_t indexerStopped = 1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    int8_t indexerTargetReached = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d

    int8_t previousC = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c

    int8_t bufferDead = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    int8_t M3508Voltage = 24;
 80046e4:	2318      	movs	r3, #24
 80046e6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

    maxPower = 0;
 80046ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004924 <TaskChassis+0x294>)
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
    float scuffedMaxedPower = 0;
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    // float percentagePowerLimit = 1;

    float gyroidValue = 0;
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    // int8_t switchForShooter = 0;
    int8_t motorOn = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    float MC[4] = {0, 0, 0, 0};
 8004708:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
	*/

    // int8_t switcherForBuzzer = 0;
    // int16_t counterForBuzzer = 0;

    int16_t turretPitchNew = 2735;
 8004716:	f640 23af 	movw	r3, #2735	@ 0xaaf
 800471a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

    // int32_t actualTurretAngle = 0;
    double convertedAngle = 0;
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    int16_t rotationSpeedOfChassis = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    // int16_t 你是一个奴隶 = 5;

    int8_t chassisVsTurretDrive = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    int32_t motorRotationCounter = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	67bb      	str	r3, [r7, #120]	@ 0x78
	int64_t turretMotorPosition = 0;
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int16_t initialTurretPosition = getRotorPosition(Bus2, GM6020, 1);
 8004746:	2201      	movs	r2, #1
 8004748:	2103      	movs	r1, #3
 800474a:	2002      	movs	r0, #2
 800474c:	f7fd ffca 	bl	80026e4 <getRotorPosition>
 8004750:	4603      	mov	r3, r0
 8004752:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	int16_t currentMotorPosition = getRotorPosition(Bus2, GM6020, 1);
 8004756:	2201      	movs	r2, #1
 8004758:	2103      	movs	r1, #3
 800475a:	2002      	movs	r0, #2
 800475c:	f7fd ffc2 	bl	80026e4 <getRotorPosition>
 8004760:	4603      	mov	r3, r0
 8004762:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	int16_t previousMotorPosition = getRotorPosition(Bus2, GM6020, 1);
 8004766:	2201      	movs	r2, #1
 8004768:	2103      	movs	r1, #3
 800476a:	2002      	movs	r0, #2
 800476c:	f7fd ffba 	bl	80026e4 <getRotorPosition>
 8004770:	4603      	mov	r3, r0
 8004772:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    //int16_t targetRPM[4] = {0,0,0,0};

  /* Infinite loop */
    for(;;) {

    	int8_t rightSwitch = getRCswitch(0);
 8004776:	2000      	movs	r0, #0
 8004778:	f001 fba2 	bl	8005ec0 <getRCswitch>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    	int8_t leftSwitch = getRCswitch(1);
 8004782:	2001      	movs	r0, #1
 8004784:	f001 fb9c 	bl	8005ec0 <getRCswitch>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

    	currentMotorPosition = getRotorPosition(Bus1, GM6020, 1);
 800478e:	2201      	movs	r2, #1
 8004790:	2103      	movs	r1, #3
 8004792:	2001      	movs	r0, #1
 8004794:	f7fd ffa6 	bl	80026e4 <getRotorPosition>
 8004798:	4603      	mov	r3, r0
 800479a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    	if ((currentMotorPosition - previousMotorPosition) < -6000) {
 800479e:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 80047a2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004928 <TaskChassis+0x298>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	da03      	bge.n	80047b6 <TaskChassis+0x126>
    		motorRotationCounter++;
 80047ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047b0:	3301      	adds	r3, #1
 80047b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047b4:	e00b      	b.n	80047ce <TaskChassis+0x13e>
    	} else if ((currentMotorPosition - previousMotorPosition) > 6000) {
 80047b6:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 80047ba:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 7270 	movw	r2, #6000	@ 0x1770
 80047c4:	4293      	cmp	r3, r2
 80047c6:	dd02      	ble.n	80047ce <TaskChassis+0x13e>
    		motorRotationCounter--;
 80047c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ca:	3b01      	subs	r3, #1
 80047cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    	}

    	turretMotorPosition = currentMotorPosition + (8191 * motorRotationCounter);
 80047ce:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 80047d2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80047d4:	4613      	mov	r3, r2
 80047d6:	035b      	lsls	r3, r3, #13
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	440b      	add	r3, r1
 80047dc:	17da      	asrs	r2, r3, #31
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	60fa      	str	r2, [r7, #12]
 80047e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80047e6:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    	// actualTurretAngle = ((turretMotorPosition - initialTurretPosition)*0.025408f);
    	convertedAngle = ((turretMotorPosition - initialTurretPosition)* 0.0004434705f);
 80047ea:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80047ee:	17da      	asrs	r2, r3, #31
 80047f0:	469a      	mov	sl, r3
 80047f2:	4693      	mov	fp, r2
 80047f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047f8:	ebb2 010a 	subs.w	r1, r2, sl
 80047fc:	6139      	str	r1, [r7, #16]
 80047fe:	eb63 030b 	sbc.w	r3, r3, fp
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004808:	f7fc faee 	bl	8000de8 <__aeabi_l2f>
 800480c:	ee07 0a10 	vmov	s14, r0
 8004810:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800492c <TaskChassis+0x29c>
 8004814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004818:	ee17 0a90 	vmov	r0, s15
 800481c:	f7fb fe94 	bl	8000548 <__aeabi_f2d>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80


    	// usart_printf("%d %d %d\r\n", turretMotorPosition, initialTurretPosition, actualTurretAngle);
    	previousMotorPosition = getRotorPosition(Bus1, GM6020, 1);
 8004828:	2201      	movs	r2, #1
 800482a:	2103      	movs	r1, #3
 800482c:	2001      	movs	r0, #1
 800482e:	f7fd ff59 	bl	80026e4 <getRotorPosition>
 8004832:	4603      	mov	r3, r0
 8004834:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74


    	if (leftSwitch == 1) {
 8004838:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 800483c:	2b01      	cmp	r3, #1
 800483e:	d104      	bne.n	800484a <TaskChassis+0x1ba>
    		rotationSpeedOfChassis = 2000;
 8004840:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004844:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8004848:	e00b      	b.n	8004862 <TaskChassis+0x1d2>
    	} else if (leftSwitch == 2) {
 800484a:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 800484e:	2b02      	cmp	r3, #2
 8004850:	d104      	bne.n	800485c <TaskChassis+0x1cc>
    		rotationSpeedOfChassis = -2000;
 8004852:	f64f 0330 	movw	r3, #63536	@ 0xf830
 8004856:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800485a:	e002      	b.n	8004862 <TaskChassis+0x1d2>
    	} else {
    		rotationSpeedOfChassis = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    	}


	    for (int i = 0; i < 4; i++) {
 8004862:	2300      	movs	r3, #0
 8004864:	673b      	str	r3, [r7, #112]	@ 0x70
 8004866:	e01d      	b.n	80048a4 <TaskChassis+0x214>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8004868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800486a:	b25b      	sxtb	r3, r3
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fb13 	bl	8005e98 <getRCchannel>
 8004872:	4603      	mov	r3, r0
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800487c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004930 <TaskChassis+0x2a0>
 8004880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004888:	ee17 3a90 	vmov	r3, s15
 800488c:	b21a      	sxth	r2, r3
 800488e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	3388      	adds	r3, #136	@ 0x88
 8004894:	f107 0118 	add.w	r1, r7, #24
 8004898:	440b      	add	r3, r1
 800489a:	f823 2c5c 	strh.w	r2, [r3, #-92]
	    for (int i = 0; i < 4; i++) {
 800489e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048a0:	3301      	adds	r3, #1
 80048a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80048a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	ddde      	ble.n	8004868 <TaskChassis+0x1d8>
	    }

	    rcYaw = getRCchannel(4) * 0.85f;
 80048aa:	2004      	movs	r0, #4
 80048ac:	f001 faf4 	bl	8005e98 <getRCchannel>
 80048b0:	4603      	mov	r3, r0
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ba:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004934 <TaskChassis+0x2a4>
 80048be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c6:	ee17 3a90 	vmov	r3, s15
 80048ca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	    chassisrcYaw = getRCchannel(0)*0.85f;
 80048ce:	2000      	movs	r0, #0
 80048d0:	f001 fae2 	bl	8005e98 <getRCchannel>
 80048d4:	4603      	mov	r3, r0
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048de:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004934 <TaskChassis+0x2a4>
 80048e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ea:	ee17 3a90 	vmov	r3, s15
 80048ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	    	rotationSpeedOfChassis = 0;
	    }
	    */
	    // usart_printf("%d\r\n", getRCchannel(4));

	    if ((previousC == 0) && (pc_control.c == 1) && (chassisVsTurretDrive == 1)) {
 80048f2:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d120      	bne.n	800493c <TaskChassis+0x2ac>
 80048fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004938 <TaskChassis+0x2a8>)
 80048fc:	7e5b      	ldrb	r3, [r3, #25]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d11c      	bne.n	800493c <TaskChassis+0x2ac>
 8004902:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8004906:	2b01      	cmp	r3, #1
 8004908:	d118      	bne.n	800493c <TaskChassis+0x2ac>
	    	chassisVsTurretDrive = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004910:	e023      	b.n	800495a <TaskChassis+0x2ca>
 8004912:	bf00      	nop
 8004914:	20000ab0 	.word	0x20000ab0
 8004918:	20000a68 	.word	0x20000a68
 800491c:	20000a20 	.word	0x20000a20
 8004920:	200009d8 	.word	0x200009d8
 8004924:	20000f2c 	.word	0x20000f2c
 8004928:	ffffe890 	.word	0xffffe890
 800492c:	39e8819a 	.word	0x39e8819a
 8004930:	415a51ec 	.word	0x415a51ec
 8004934:	3f59999a 	.word	0x3f59999a
 8004938:	20000724 	.word	0x20000724
	    } else if ((previousC == 0) && (pc_control.v == 1) && (chassisVsTurretDrive == 0)) {
 800493c:	f997 309c 	ldrsb.w	r3, [r7, #156]	@ 0x9c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <TaskChassis+0x2ca>
 8004944:	4bce      	ldr	r3, [pc, #824]	@ (8004c80 <TaskChassis+0x5f0>)
 8004946:	7e9b      	ldrb	r3, [r3, #26]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d106      	bne.n	800495a <TaskChassis+0x2ca>
 800494c:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <TaskChassis+0x2ca>
	    	chassisVsTurretDrive = 1;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	    }

	    previousC = pc_control.c;
 800495a:	4bc9      	ldr	r3, [pc, #804]	@ (8004c80 <TaskChassis+0x5f0>)
 800495c:	7e5b      	ldrb	r3, [r3, #25]
 800495e:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
	        // actualTurretAngle = 0;
	        convertedAngle = 0;
	    }
	    */

	    if (pc_control.f == 1) {
 8004962:	4bc7      	ldr	r3, [pc, #796]	@ (8004c80 <TaskChassis+0x5f0>)
 8004964:	7d5b      	ldrb	r3, [r3, #21]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d115      	bne.n	8004996 <TaskChassis+0x306>
	        motorRotationCounter = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	67bb      	str	r3, [r7, #120]	@ 0x78
	    	turretMotorPosition = 0;
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	    	initialTurretPosition = getRotorPosition(Bus1, GM6020, 1);
 800497a:	2201      	movs	r2, #1
 800497c:	2103      	movs	r1, #3
 800497e:	2001      	movs	r0, #1
 8004980:	f7fd feb0 	bl	80026e4 <getRotorPosition>
 8004984:	4603      	mov	r3, r0
 8004986:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	        // actualTurretAngle = 0;
	        convertedAngle = 0;
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	    //CAN_setMotorCurrent(1, M3508, 7, 2000);
	    //rcPitch = getRotorPosition(1, 1, 2);

	    // int16_t turretPitch = (getRCchannel(1)*0.63f)+2640;

	    int16_t turretPitch = getRCchannel(1)* 0.85f;
 8004996:	2001      	movs	r0, #1
 8004998:	f001 fa7e 	bl	8005e98 <getRCchannel>
 800499c:	4603      	mov	r3, r0
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a6:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8004c84 <TaskChassis+0x5f4>
 80049aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b2:	ee17 3a90 	vmov	r3, s15
 80049b6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	    // chassisTargetRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
	    // chassisTargetRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
	    // chassisTargetRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;


	    allCheShit(pc_control.w, pc_control.a, pc_control.s, pc_control.d, pc_control.q, pc_control.e, pc_control.r, rcRPM, chassisVsTurretDrive, convertedAngle, chassisPreset);
 80049ba:	4bb1      	ldr	r3, [pc, #708]	@ (8004c80 <TaskChassis+0x5f0>)
 80049bc:	7b1b      	ldrb	r3, [r3, #12]
 80049be:	fa4f f883 	sxtb.w	r8, r3
 80049c2:	4baf      	ldr	r3, [pc, #700]	@ (8004c80 <TaskChassis+0x5f0>)
 80049c4:	7b9b      	ldrb	r3, [r3, #14]
 80049c6:	fa4f f983 	sxtb.w	r9, r3
 80049ca:	4bad      	ldr	r3, [pc, #692]	@ (8004c80 <TaskChassis+0x5f0>)
 80049cc:	7b5b      	ldrb	r3, [r3, #13]
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	4bab      	ldr	r3, [pc, #684]	@ (8004c80 <TaskChassis+0x5f0>)
 80049d4:	7bdb      	ldrb	r3, [r3, #15]
 80049d6:	b259      	sxtb	r1, r3
 80049d8:	6079      	str	r1, [r7, #4]
 80049da:	4ba9      	ldr	r3, [pc, #676]	@ (8004c80 <TaskChassis+0x5f0>)
 80049dc:	7c9b      	ldrb	r3, [r3, #18]
 80049de:	b25c      	sxtb	r4, r3
 80049e0:	4ba7      	ldr	r3, [pc, #668]	@ (8004c80 <TaskChassis+0x5f0>)
 80049e2:	7cdb      	ldrb	r3, [r3, #19]
 80049e4:	b25d      	sxtb	r5, r3
 80049e6:	4ba6      	ldr	r3, [pc, #664]	@ (8004c80 <TaskChassis+0x5f0>)
 80049e8:	7d1b      	ldrb	r3, [r3, #20]
 80049ea:	b25e      	sxtb	r6, r3
 80049ec:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80049f0:	f7fc f8da 	bl	8000ba8 <__aeabi_d2f>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4ba4      	ldr	r3, [pc, #656]	@ (8004c88 <TaskChassis+0x5f8>)
 80049f8:	edd3 6a00 	vldr	s13, [r3]
 80049fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a00:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a04:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004a0e:	9303      	str	r3, [sp, #12]
 8004a10:	9602      	str	r6, [sp, #8]
 8004a12:	9501      	str	r5, [sp, #4]
 8004a14:	9400      	str	r4, [sp, #0]
 8004a16:	eef0 0a66 	vmov.f32	s1, s13
 8004a1a:	eeb0 1a47 	vmov.f32	s2, s14
 8004a1e:	eef0 1a67 	vmov.f32	s3, s15
 8004a22:	ee00 2a10 	vmov	s0, r2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	f7fe fa2f 	bl	8002e90 <allCheShit>
	    // bufferLimitedDriveMode(chassisTargetRPM, chassisPreset);

	    // turretPitchNew += (int16_t)((float)(turretPitch)* mouseYScaler);
	    turretPitchNew -= (int16_t)((float)(pc_control.mouse_y)* mouseYScaler);
 8004a32:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8004a36:	4b92      	ldr	r3, [pc, #584]	@ (8004c80 <TaskChassis+0x5f0>)
 8004a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a44:	4b91      	ldr	r3, [pc, #580]	@ (8004c8c <TaskChassis+0x5fc>)
 8004a46:	edd3 7a00 	vldr	s15, [r3]
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a52:	ee17 3a90 	vmov	r3, s15
 8004a56:	b21b      	sxth	r3, r3
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

	    if (turretPitchNew > 4000) {
 8004a62:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8004a66:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8004a6a:	dd04      	ble.n	8004a76 <TaskChassis+0x3e6>
	    	turretPitchNew = 4000;
 8004a6c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8004a70:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8004a74:	e009      	b.n	8004a8a <TaskChassis+0x3fa>
	    } else if (turretPitchNew < 2299) {
 8004a76:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8004a7a:	f640 02fa 	movw	r2, #2298	@ 0x8fa
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	dc03      	bgt.n	8004a8a <TaskChassis+0x3fa>
	    	turretPitchNew = 2299;
 8004a82:	f640 03fb 	movw	r3, #2299	@ 0x8fb
 8004a86:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c

	    // setMotorPosition(Bus2, GM6020, 5, (randomNumbers[currentNumber]*1701)+3000, pitchPresetVoltagePosition);
	    // usart_printf("%d %d %d\r\n", (int16_t)((randomNumbers[currentNumber]*1701)+3000), turretCurrentPitch, getRCchannel(1)*10);

	    // usart_printf("%d %d\r\n", (int16_t)((randomNumbers[currentNumber]-0.5)*200.0), RPMTHING);
	    setMotorPosition(Bus2, GM6020, 5, turretPitchNew, pitchPresetVoltagePosition);
 8004a8a:	4b81      	ldr	r3, [pc, #516]	@ (8004c90 <TaskChassis+0x600>)
 8004a8c:	edd3 6a00 	vldr	s13, [r3]
 8004a90:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a94:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a98:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8004a9c:	eeb0 0a66 	vmov.f32	s0, s13
 8004aa0:	eef0 0a47 	vmov.f32	s1, s14
 8004aa4:	eeb0 1a67 	vmov.f32	s2, s15
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	2103      	movs	r1, #3
 8004aac:	2002      	movs	r0, #2
 8004aae:	f7fd fdde 	bl	800266e <setMotorPosition>

	    // usart_printf("%d %d\r\n", turretPitchNew, getRotorPosition(Bus1, GM6020, 5));
	    // setMotorRPM(Bus2, GM6020, 5, chassisTargetRPM[0], chassisPreset);

	    //CAN_DriveMotor(Bus1, 0x2FF, 2000, 0, 0, 0);
	    osDelay(2);
 8004ab2:	2002      	movs	r0, #2
 8004ab4:	f008 fb0a 	bl	800d0cc <osDelay>

	    //setMotorRPM(Bus2, M3508, 8, 50, shooterPreset);
	    float gyroVel[3] = {IMU_get_gyro(x), IMU_get_gyro(y), IMU_get_gyro(z)};
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7fc fd49 	bl	8001550 <IMU_get_gyro>
 8004abe:	eef0 7a40 	vmov.f32	s15, s0
 8004ac2:	edc7 7a08 	vstr	s15, [r7, #32]
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	f7fc fd42 	bl	8001550 <IMU_get_gyro>
 8004acc:	eef0 7a40 	vmov.f32	s15, s0
 8004ad0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8004ad4:	2002      	movs	r0, #2
 8004ad6:	f7fc fd3b 	bl	8001550 <IMU_get_gyro>
 8004ada:	eef0 7a40 	vmov.f32	s15, s0
 8004ade:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	    if (chassisVsTurretDrive == 1) {
 8004ae2:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	f040 8083 	bne.w	8004bf2 <TaskChassis+0x562>
	    	// usart_printf("%f, %f, %f\r\n", gyroVel[0], gyroVel[1], gyroVel[2]);
	    	// gyroidValue += gyroVel[2]*0.005;
	    	if (((gyroVel[2] > -0.02) && (gyroVel[2] < 0.02))) {
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fb fd2a 	bl	8000548 <__aeabi_f2d>
 8004af4:	a35a      	add	r3, pc, #360	@ (adr r3, 8004c60 <TaskChassis+0x5d0>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fc f80d 	bl	8000b18 <__aeabi_dcmpgt>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <TaskChassis+0x492>
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fb fd1e 	bl	8000548 <__aeabi_f2d>
 8004b0c:	a356      	add	r3, pc, #344	@ (adr r3, 8004c68 <TaskChassis+0x5d8>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb ffe3 	bl	8000adc <__aeabi_dcmplt>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <TaskChassis+0x492>
	    		gyroVel[2] = 0;
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	62bb      	str	r3, [r7, #40]	@ 0x28
	    	}

	    	// gyroidValue += (gyroVel[2] + 0.008*((float)(chassisrcYaw)))*0.01* mouseXScaler;
	    	gyroidValue += (gyroVel[2] + 0.008*((float)(pc_control.mouse_x)))*0.4* mouseXScaler;
 8004b22:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8004b26:	f7fb fd0f 	bl	8000548 <__aeabi_f2d>
 8004b2a:	4680      	mov	r8, r0
 8004b2c:	4689      	mov	r9, r1
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fb fd09 	bl	8000548 <__aeabi_f2d>
 8004b36:	4604      	mov	r4, r0
 8004b38:	460d      	mov	r5, r1
 8004b3a:	4b51      	ldr	r3, [pc, #324]	@ (8004c80 <TaskChassis+0x5f0>)
 8004b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b48:	ee17 0a90 	vmov	r0, s15
 8004b4c:	f7fb fcfc 	bl	8000548 <__aeabi_f2d>
 8004b50:	a347      	add	r3, pc, #284	@ (adr r3, 8004c70 <TaskChassis+0x5e0>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb fd4f 	bl	80005f8 <__aeabi_dmul>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	f7fb fb93 	bl	800028c <__adddf3>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	a342      	add	r3, pc, #264	@ (adr r3, 8004c78 <TaskChassis+0x5e8>)
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f7fb fd40 	bl	80005f8 <__aeabi_dmul>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	4b44      	ldr	r3, [pc, #272]	@ (8004c94 <TaskChassis+0x604>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb fcdf 	bl	8000548 <__aeabi_f2d>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb fd31 	bl	80005f8 <__aeabi_dmul>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	f7fb fb75 	bl	800028c <__adddf3>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f7fb fffd 	bl	8000ba8 <__aeabi_d2f>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	    	setMotorRPM(Bus1, GM6020, 1, (int16_t)(-20*gyroidValue), yawPresetVoltageRPM);
 8004bb4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004bb8:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8004bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bc4:	ee17 3a90 	vmov	r3, s15
 8004bc8:	b21a      	sxth	r2, r3
 8004bca:	4b33      	ldr	r3, [pc, #204]	@ (8004c98 <TaskChassis+0x608>)
 8004bcc:	edd3 6a00 	vldr	s13, [r3]
 8004bd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bd8:	eeb0 0a66 	vmov.f32	s0, s13
 8004bdc:	eef0 0a47 	vmov.f32	s1, s14
 8004be0:	eeb0 1a67 	vmov.f32	s2, s15
 8004be4:	4613      	mov	r3, r2
 8004be6:	2201      	movs	r2, #1
 8004be8:	2103      	movs	r1, #3
 8004bea:	2001      	movs	r0, #1
 8004bec:	f7fd fd04 	bl	80025f8 <setMotorRPM>
 8004bf0:	e033      	b.n	8004c5a <TaskChassis+0x5ca>
	    	/*
	        motorRotationCounter = 0;
	    	turretMotorPosition = 0;
	    	*/
	    	// setMotorRPM(Bus1, GM6020, 1, (int16_t)(mouseXScaler*(float)(rcYaw)), yawPresetVoltageRPM);
	    	setMotorRPM(Bus1, GM6020, 1, -0.5*(int16_t)(mouseXScaler*(float)(pc_control.mouse_x)), yawPresetVoltageRPM);
 8004bf2:	4b23      	ldr	r3, [pc, #140]	@ (8004c80 <TaskChassis+0x5f0>)
 8004bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c00:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <TaskChassis+0x604>)
 8004c02:	edd3 7a00 	vldr	s15, [r3]
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c0e:	ee17 3a90 	vmov	r3, s15
 8004c12:	b21b      	sxth	r3, r3
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fb fc85 	bl	8000524 <__aeabi_i2d>
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c9c <TaskChassis+0x60c>)
 8004c20:	f7fb fcea 	bl	80005f8 <__aeabi_dmul>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f7fb ff94 	bl	8000b58 <__aeabi_d2iz>
 8004c30:	4603      	mov	r3, r0
 8004c32:	b21a      	sxth	r2, r3
 8004c34:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <TaskChassis+0x608>)
 8004c36:	edd3 6a00 	vldr	s13, [r3]
 8004c3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c42:	eeb0 0a66 	vmov.f32	s0, s13
 8004c46:	eef0 0a47 	vmov.f32	s1, s14
 8004c4a:	eeb0 1a67 	vmov.f32	s2, s15
 8004c4e:	4613      	mov	r3, r2
 8004c50:	2201      	movs	r2, #1
 8004c52:	2103      	movs	r1, #3
 8004c54:	2001      	movs	r0, #1
 8004c56:	f7fd fccf 	bl	80025f8 <setMotorRPM>



	    // usart_printf("%d %d\r\n",pc_control.mouse_x, pc_control.mouse_y);

	    for (int i = 0; i < 4; i++) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c5e:	e062      	b.n	8004d26 <TaskChassis+0x696>
 8004c60:	47ae147b 	.word	0x47ae147b
 8004c64:	bf947ae1 	.word	0xbf947ae1
 8004c68:	47ae147b 	.word	0x47ae147b
 8004c6c:	3f947ae1 	.word	0x3f947ae1
 8004c70:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c74:	3f80624d 	.word	0x3f80624d
 8004c78:	9999999a 	.word	0x9999999a
 8004c7c:	3fd99999 	.word	0x3fd99999
 8004c80:	20000724 	.word	0x20000724
 8004c84:	3f59999a 	.word	0x3f59999a
 8004c88:	20000058 	.word	0x20000058
 8004c8c:	2000009c 	.word	0x2000009c
 8004c90:	20000070 	.word	0x20000070
 8004c94:	20000098 	.word	0x20000098
 8004c98:	20000064 	.word	0x20000064
 8004c9c:	bfe00000 	.word	0xbfe00000
 8004ca0:	3a9fffe5 	.word	0x3a9fffe5
	    	MC[i] = getMotorCurrent(Bus2, M3508, (i+1)) * 0.0012207f;
 8004ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fd fdb6 	bl	8002824 <getMotorCurrent>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc2:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8004ca0 <TaskChassis+0x610>
 8004cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	3388      	adds	r3, #136	@ 0x88
 8004cd0:	f107 0218 	add.w	r2, r7, #24
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3b74      	subs	r3, #116	@ 0x74
 8004cd8:	edc3 7a00 	vstr	s15, [r3]
	    	if (MC[i] < 0) {
 8004cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	3388      	adds	r3, #136	@ 0x88
 8004ce2:	f107 0218 	add.w	r2, r7, #24
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3b74      	subs	r3, #116	@ 0x74
 8004cea:	edd3 7a00 	vldr	s15, [r3]
 8004cee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf6:	d513      	bpl.n	8004d20 <TaskChassis+0x690>
	    		MC[i] = -1* MC[i];
 8004cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3388      	adds	r3, #136	@ 0x88
 8004cfe:	f107 0218 	add.w	r2, r7, #24
 8004d02:	4413      	add	r3, r2
 8004d04:	3b74      	subs	r3, #116	@ 0x74
 8004d06:	edd3 7a00 	vldr	s15, [r3]
 8004d0a:	eef1 7a67 	vneg.f32	s15, s15
 8004d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3388      	adds	r3, #136	@ 0x88
 8004d14:	f107 0218 	add.w	r2, r7, #24
 8004d18:	4413      	add	r3, r2
 8004d1a:	3b74      	subs	r3, #116	@ 0x74
 8004d1c:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < 4; i++) {
 8004d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d22:	3301      	adds	r3, #1
 8004d24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	ddbb      	ble.n	8004ca4 <TaskChassis+0x614>
	    	}
	    }
	    maxPower = 0;
 8004d2c:	4bb5      	ldr	r3, [pc, #724]	@ (8005004 <TaskChassis+0x974>)
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
	    scuffedMaxedPower = 0;
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	    for (int i = 0; i < 4; i++) {
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d40:	e02a      	b.n	8004d98 <TaskChassis+0x708>
	    	maxPower += ((MC[i])) * M3508Voltage;
 8004d42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	3388      	adds	r3, #136	@ 0x88
 8004d48:	f107 0218 	add.w	r2, r7, #24
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3b74      	subs	r3, #116	@ 0x74
 8004d50:	ed93 7a00 	vldr	s14, [r3]
 8004d54:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d64:	4ba7      	ldr	r3, [pc, #668]	@ (8005004 <TaskChassis+0x974>)
 8004d66:	edd3 7a00 	vldr	s15, [r3]
 8004d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6e:	4ba5      	ldr	r3, [pc, #660]	@ (8005004 <TaskChassis+0x974>)
 8004d70:	edc3 7a00 	vstr	s15, [r3]
	    	scuffedMaxedPower += MC[i];
 8004d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	3388      	adds	r3, #136	@ 0x88
 8004d7a:	f107 0218 	add.w	r2, r7, #24
 8004d7e:	4413      	add	r3, r2
 8004d80:	3b74      	subs	r3, #116	@ 0x74
 8004d82:	edd3 7a00 	vldr	s15, [r3]
 8004d86:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d8e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	    for (int i = 0; i < 4; i++) {
 8004d92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d94:	3301      	adds	r3, #1
 8004d96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	ddd1      	ble.n	8004d42 <TaskChassis+0x6b2>
	    }

	    // usart_printf("%f, %f, %f, %f, %f, %f, %f\r\n", MC[0], MC[1], MC[2], MC[3], scuffedMaxedPower, PowerLimitor*0.04166, JoulesBuffer);
	    PWMOutput(Buzzer, 1, 2000);
 8004d9e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004da2:	2101      	movs	r1, #1
 8004da4:	2002      	movs	r0, #2
 8004da6:	f000 fd1f 	bl	80057e8 <PWMOutput>
	    PWMInitialize(Buzzer, FR, 1, 0.5);
 8004daa:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8004dae:	2201      	movs	r2, #1
 8004db0:	2101      	movs	r1, #1
 8004db2:	2002      	movs	r0, #2
 8004db4:	f000 fc00 	bl	80055b8 <PWMInitialize>

	    PWMOutput(LED, 1, 500);
 8004db8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f000 fd12 	bl	80057e8 <PWMOutput>
	    PWMOutput(LED, 3, 500);
 8004dc4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004dc8:	2103      	movs	r1, #3
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f000 fd0c 	bl	80057e8 <PWMOutput>
	    PWMInitialize(LED, FR, 1, 0.9);
 8004dd0:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8005008 <TaskChassis+0x978>
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f000 fbed 	bl	80055b8 <PWMInitialize>
	    PWMInitialize(LED, FR, 3, 0.9);
 8004dde:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8005008 <TaskChassis+0x978>
 8004de2:	2203      	movs	r2, #3
 8004de4:	2101      	movs	r1, #1
 8004de6:	2001      	movs	r0, #1
 8004de8:	f000 fbe6 	bl	80055b8 <PWMInitialize>
	    if (JoulesBuffer < 1) {
 8004dec:	4b87      	ldr	r3, [pc, #540]	@ (800500c <TaskChassis+0x97c>)
 8004dee:	edd3 7a00 	vldr	s15, [r3]
 8004df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	d502      	bpl.n	8004e06 <TaskChassis+0x776>
	    	bufferDead = 1;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
	    }
	    if (bufferDead == 1) {
 8004e06:	f997 309b 	ldrsb.w	r3, [r7, #155]	@ 0x9b
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d104      	bne.n	8004e18 <TaskChassis+0x788>
	    	PWMOn(LED, 3);
 8004e0e:	2103      	movs	r1, #3
 8004e10:	2001      	movs	r0, #1
 8004e12:	f000 fd19 	bl	8005848 <PWMOn>
 8004e16:	e003      	b.n	8004e20 <TaskChassis+0x790>
	    } else {
	    	PWMOff(LED, 3);
 8004e18:	2103      	movs	r1, #3
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f000 fd40 	bl	80058a0 <PWMOff>
	    if (rightSwitch == 3) {
	    	switchForShooter = 0;
	    }
	    */

	    int16_t flywheelSpeed = getMotorRPM(Bus2, M3508, 8);
 8004e20:	2208      	movs	r2, #8
 8004e22:	2101      	movs	r1, #1
 8004e24:	2002      	movs	r0, #2
 8004e26:	f7fd fcab 	bl	8002780 <getMotorRPM>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	    	motorOn = 1;
	    }
	    */


	    if ((pc_control.right_button_down == 1) || (pc_control.left_button_down == 1)) {
 8004e30:	4b77      	ldr	r3, [pc, #476]	@ (8005010 <TaskChassis+0x980>)
 8004e32:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d004      	beq.n	8004e44 <TaskChassis+0x7b4>
 8004e3a:	4b75      	ldr	r3, [pc, #468]	@ (8005010 <TaskChassis+0x980>)
 8004e3c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d103      	bne.n	8004e4c <TaskChassis+0x7bc>
	    	motorOn = 1;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004e4a:	e002      	b.n	8004e52 <TaskChassis+0x7c2>
	    } else {
	    	motorOn = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	    }


	    if ((pc_control.left_button_down == 1) && (flywheelSpeed > 7000)) {
 8004e52:	4b6f      	ldr	r3, [pc, #444]	@ (8005010 <TaskChassis+0x980>)
 8004e54:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d164      	bne.n	8004f26 <TaskChassis+0x896>
 8004e5c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8004e60:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004e64:	4293      	cmp	r3, r2
 8004e66:	dd5e      	ble.n	8004f26 <TaskChassis+0x896>
	    	// setMotorRPM(Bus2, M2006, 6, (100), indexerPreset);

			if (jammed > 0 && indexerStopped == 0) {
 8004e68:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	dd1f      	ble.n	8004eb0 <TaskChassis+0x820>
 8004e70:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11b      	bne.n	8004eb0 <TaskChassis+0x820>
				setMotorRPM(Bus2, M2006, 6, 15000, indexerPreset);
 8004e78:	4b66      	ldr	r3, [pc, #408]	@ (8005014 <TaskChassis+0x984>)
 8004e7a:	edd3 6a00 	vldr	s13, [r3]
 8004e7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e82:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e86:	eeb0 0a66 	vmov.f32	s0, s13
 8004e8a:	eef0 0a47 	vmov.f32	s1, s14
 8004e8e:	eeb0 1a67 	vmov.f32	s2, s15
 8004e92:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8004e96:	2206      	movs	r2, #6
 8004e98:	2102      	movs	r1, #2
 8004e9a:	2002      	movs	r0, #2
 8004e9c:	f7fd fbac 	bl	80025f8 <setMotorRPM>
				jammed--;
 8004ea0:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8004eae:	e039      	b.n	8004f24 <TaskChassis+0x894>
			} else {
				indexerStopped = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
				setMotorRPM(Bus2, M2006, 6, -5400, indexerPreset);
 8004eb6:	4b57      	ldr	r3, [pc, #348]	@ (8005014 <TaskChassis+0x984>)
 8004eb8:	edd3 6a00 	vldr	s13, [r3]
 8004ebc:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ec0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ec4:	eeb0 0a66 	vmov.f32	s0, s13
 8004ec8:	eef0 0a47 	vmov.f32	s1, s14
 8004ecc:	eeb0 1a67 	vmov.f32	s2, s15
 8004ed0:	4b51      	ldr	r3, [pc, #324]	@ (8005018 <TaskChassis+0x988>)
 8004ed2:	2206      	movs	r2, #6
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	2002      	movs	r0, #2
 8004ed8:	f7fd fb8e 	bl	80025f8 <setMotorRPM>
				if (indexerTargetReached == 0 && getMotorRPM(Bus2, M2006, 6) <= -10) {
 8004edc:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10c      	bne.n	8004efe <TaskChassis+0x86e>
 8004ee4:	2206      	movs	r2, #6
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	2002      	movs	r0, #2
 8004eea:	f7fd fc49 	bl	8002780 <getMotorRPM>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f113 0f09 	cmn.w	r3, #9
 8004ef4:	da03      	bge.n	8004efe <TaskChassis+0x86e>
					indexerTargetReached = 1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8004efc:	e012      	b.n	8004f24 <TaskChassis+0x894>
				} else if (getMotorRPM(Bus2, M2006, 6) > -1 && indexerTargetReached == 1) {         // jammed
 8004efe:	2206      	movs	r2, #6
 8004f00:	2102      	movs	r1, #2
 8004f02:	2002      	movs	r0, #2
 8004f04:	f7fd fc3c 	bl	8002780 <getMotorRPM>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	db25      	blt.n	8004f5a <TaskChassis+0x8ca>
 8004f0e:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d121      	bne.n	8004f5a <TaskChassis+0x8ca>
					jammed = 12;
 8004f16:	230c      	movs	r3, #12
 8004f18:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					indexerTargetReached = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
			if (jammed > 0 && indexerStopped == 0) {
 8004f22:	e01a      	b.n	8004f5a <TaskChassis+0x8ca>
 8004f24:	e019      	b.n	8004f5a <TaskChassis+0x8ca>
				}
			}
	    } else {
			indexerStopped = 1;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			indexerTargetReached = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
	    	setMotorRPM(Bus2, M2006, 6, 0, indexerPreset);
 8004f32:	4b38      	ldr	r3, [pc, #224]	@ (8005014 <TaskChassis+0x984>)
 8004f34:	edd3 6a00 	vldr	s13, [r3]
 8004f38:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f40:	eeb0 0a66 	vmov.f32	s0, s13
 8004f44:	eef0 0a47 	vmov.f32	s1, s14
 8004f48:	eeb0 1a67 	vmov.f32	s2, s15
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2206      	movs	r2, #6
 8004f50:	2102      	movs	r1, #2
 8004f52:	2002      	movs	r0, #2
 8004f54:	f7fd fb50 	bl	80025f8 <setMotorRPM>
 8004f58:	e000      	b.n	8004f5c <TaskChassis+0x8cc>
			if (jammed > 0 && indexerStopped == 0) {
 8004f5a:	bf00      	nop
	    }

	    PWMOff(Buzzer, 1);
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	2002      	movs	r0, #2
 8004f60:	f000 fc9e 	bl	80058a0 <PWMOff>
		setMotorRPM(Bus2, M3508, 7, -8000*motorOn, flywheel);
 8004f64:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	00d2      	lsls	r2, r2, #3
 8004f6e:	1ad2      	subs	r2, r2, r3
 8004f70:	0092      	lsls	r2, r2, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	0152      	lsls	r2, r2, #5
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	019b      	lsls	r3, r3, #6
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	b21a      	sxth	r2, r3
 8004f80:	4b26      	ldr	r3, [pc, #152]	@ (800501c <TaskChassis+0x98c>)
 8004f82:	edd3 6a00 	vldr	s13, [r3]
 8004f86:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f8e:	eeb0 0a66 	vmov.f32	s0, s13
 8004f92:	eef0 0a47 	vmov.f32	s1, s14
 8004f96:	eeb0 1a67 	vmov.f32	s2, s15
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	2002      	movs	r0, #2
 8004fa2:	f7fd fb29 	bl	80025f8 <setMotorRPM>
		setMotorRPM(Bus2, M3508, 8, 8000*motorOn, flywheel);
 8004fa6:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	0152      	lsls	r2, r2, #5
 8004fb0:	1ad2      	subs	r2, r2, r3
 8004fb2:	0092      	lsls	r2, r2, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	019b      	lsls	r3, r3, #6
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	4b17      	ldr	r3, [pc, #92]	@ (800501c <TaskChassis+0x98c>)
 8004fbe:	edd3 6a00 	vldr	s13, [r3]
 8004fc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fca:	eeb0 0a66 	vmov.f32	s0, s13
 8004fce:	eef0 0a47 	vmov.f32	s1, s14
 8004fd2:	eeb0 1a67 	vmov.f32	s2, s15
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	2208      	movs	r2, #8
 8004fda:	2101      	movs	r1, #1
 8004fdc:	2002      	movs	r0, #2
 8004fde:	f7fd fb0b 	bl	80025f8 <setMotorRPM>




	    int16_t motorSpeeddd = getMotorRPM(Bus1, GM6020, 1);
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	2103      	movs	r1, #3
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	f7fd fbca 	bl	8002780 <getMotorRPM>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			indexerStopped = 1;
			indexerTargetReached = 0;
		}
		*/
		// usart_printf("%f\r\n", JoulesBuffer);
		PWMTimerStarter();
 8004ff2:	f000 fc81 	bl	80058f8 <PWMTimerStarter>
		RCkeysRefresh();
 8004ff6:	f000 ff77 	bl	8005ee8 <RCkeysRefresh>
        osDelay(5);
 8004ffa:	2005      	movs	r0, #5
 8004ffc:	f008 f866 	bl	800d0cc <osDelay>
    for(;;) {
 8005000:	f7ff bbb9 	b.w	8004776 <TaskChassis+0xe6>
 8005004:	20000f2c 	.word	0x20000f2c
 8005008:	3f666666 	.word	0x3f666666
 800500c:	20000094 	.word	0x20000094
 8005010:	20000724 	.word	0x20000724
 8005014:	2000007c 	.word	0x2000007c
 8005018:	ffffeae8 	.word	0xffffeae8
 800501c:	20000088 	.word	0x20000088

08005020 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8005028:	2005      	movs	r0, #5
 800502a:	f008 f84f 	bl	800d0cc <osDelay>
 800502e:	e7fb      	b.n	8005028 <TaskTurret+0x8>

08005030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005034:	b672      	cpsid	i
}
 8005036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <Error_Handler+0x8>

0800503c <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6178      	str	r0, [r7, #20]
 8005044:	460b      	mov	r3, r1
 8005046:	60fa      	str	r2, [r7, #12]
 8005048:	ed87 0a02 	vstr	s0, [r7, #8]
 800504c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005050:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d042      	beq.n	80050de <PID_init+0xa2>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d03f      	beq.n	80050de <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	7cfa      	ldrb	r2, [r7, #19]
 8005062:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3304      	adds	r3, #4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3308      	adds	r3, #8
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	639a      	str	r2, [r3, #56]	@ 0x38
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	635a      	str	r2, [r3, #52]	@ 0x34
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	621a      	str	r2, [r3, #32]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050dc:	e000      	b.n	80050e0 <PID_init+0xa4>
        return;
 80050de:	bf00      	nop
}
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80050f6:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <PID_calc+0x1c>
    {
        return 0.0f;
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e130      	b.n	8005368 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005122:	ed97 7a01 	vldr	s14, [r7, #4]
 8005126:	edd7 7a02 	vldr	s15, [r7, #8]
 800512a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8095 	bne.w	8005268 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	ed93 7a01 	vldr	s14, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	ed93 7a03 	vldr	s14, [r3, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80051bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c4:	dd04      	ble.n	80051d0 <PID_calc+0xe6>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80051ce:	e014      	b.n	80051fa <PID_calc+0x110>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80051dc:	eef1 7a67 	vneg.f32	s15, s15
 80051e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	d507      	bpl.n	80051fa <PID_calc+0x110>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80051f0:	eef1 7a67 	vneg.f32	s15, s15
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	edd3 7a04 	vldr	s15, [r3, #16]
 8005226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	dd04      	ble.n	800523a <PID_calc+0x150>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	621a      	str	r2, [r3, #32]
 8005238:	e094      	b.n	8005364 <PID_calc+0x27a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	edd3 7a04 	vldr	s15, [r3, #16]
 8005246:	eef1 7a67 	vneg.f32	s15, s15
 800524a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	f140 8087 	bpl.w	8005364 <PID_calc+0x27a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	edd3 7a04 	vldr	s15, [r3, #16]
 800525c:	eef1 7a67 	vneg.f32	s15, s15
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	edc3 7a08 	vstr	s15, [r3, #32]
 8005266:	e07d      	b.n	8005364 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d179      	bne.n	8005364 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	ed93 7a01 	vldr	s14, [r3, #4]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005282:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	ed93 7a02 	vldr	s14, [r3, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800529c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80052c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80052d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	ed93 7a03 	vldr	s14, [r3, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005302:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800530c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	edd3 7a04 	vldr	s15, [r3, #16]
 8005326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800532a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532e:	dd04      	ble.n	800533a <PID_calc+0x250>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	621a      	str	r2, [r3, #32]
 8005338:	e014      	b.n	8005364 <PID_calc+0x27a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	edd3 7a04 	vldr	s15, [r3, #16]
 8005346:	eef1 7a67 	vneg.f32	s15, s15
 800534a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800534e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005352:	d507      	bpl.n	8005364 <PID_calc+0x27a>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	edd3 7a04 	vldr	s15, [r3, #16]
 800535a:	eef1 7a67 	vneg.f32	s15, s15
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
}
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eeb0 0a67 	vmov.f32	s0, s15
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 800538a:	4a12      	ldr	r2, [pc, #72]	@ (80053d4 <PWMInit+0x58>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8005390:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <PWMInit+0x5c>)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8005396:	4a11      	ldr	r2, [pc, #68]	@ (80053dc <PWMInit+0x60>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 800539c:	4a10      	ldr	r2, [pc, #64]	@ (80053e0 <PWMInit+0x64>)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 80053a2:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <PWMInit+0x58>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f005 fc0c 	bl	800abc4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <PWMInit+0x5c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f005 fc07 	bl	800abc4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 80053b6:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <PWMInit+0x60>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f005 fc02 	bl	800abc4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <PWMInit+0x64>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f005 fbfd 	bl	800abc4 <HAL_TIM_Base_Start>
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000f30 	.word	0x20000f30
 80053d8:	20000f34 	.word	0x20000f34
 80053dc:	20000f38 	.word	0x20000f38
 80053e0:	20000f3c 	.word	0x20000f3c

080053e4 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	6039      	str	r1, [r7, #0]
 80053ee:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d02c      	beq.n	8005454 <calculateOutputPeriodToGetFrequency+0x70>
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	dc3d      	bgt.n	800547a <calculateOutputPeriodToGetFrequency+0x96>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <calculateOutputPeriodToGetFrequency+0x24>
 8005402:	2b01      	cmp	r3, #1
 8005404:	d013      	beq.n	800542e <calculateOutputPeriodToGetFrequency+0x4a>
 8005406:	e038      	b.n	800547a <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005488 <calculateOutputPeriodToGetFrequency+0xa4>
 8005416:	ee27 7a87 	vmul.f32	s14, s15, s14
 800541a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005426:	ee17 3a90 	vmov	r3, s15
 800542a:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 800542c:	e025      	b.n	800547a <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005438:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800548c <calculateOutputPeriodToGetFrequency+0xa8>
 800543c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005440:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800544c:	ee17 3a90 	vmov	r3, s15
 8005450:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8005452:	e012      	b.n	800547a <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800548c <calculateOutputPeriodToGetFrequency+0xa8>
 8005462:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800546e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005472:	ee17 3a90 	vmov	r3, s15
 8005476:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8005478:	bf00      	nop
	}

	return finalVal;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	360637bd 	.word	0x360637bd
 800548c:	358637bd 	.word	0x358637bd

08005490 <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054a6:	edd7 7a00 	vldr	s15, [r7]
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b2:	ee17 3a90 	vmov	r3, s15
 80054b6:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d902      	bls.n	80054c6 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e004      	b.n	80054d0 <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 80054cc:	2301      	movs	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 80054d0:	68fb      	ldr	r3, [r7, #12]

}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	ed87 0a00 	vstr	s0, [r7]
 80054ec:	71fb      	strb	r3, [r7, #7]
 80054ee:	460b      	mov	r3, r1
 80054f0:	71bb      	strb	r3, [r7, #6]
 80054f2:	4613      	mov	r3, r2
 80054f4:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d03c      	beq.n	800557a <calculateOutputPeriodValue+0x9a>
 8005500:	2b02      	cmp	r3, #2
 8005502:	dc51      	bgt.n	80055a8 <calculateOutputPeriodValue+0xc8>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <calculateOutputPeriodValue+0x2e>
 8005508:	2b01      	cmp	r3, #1
 800550a:	d01b      	beq.n	8005544 <calculateOutputPeriodValue+0x64>
 800550c:	e04c      	b.n	80055a8 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 800550e:	79bb      	ldrb	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10a      	bne.n	800552a <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8005514:	edd7 7a00 	vldr	s15, [r7]
 8005518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551c:	ee17 2a90 	vmov	r2, s15
 8005520:	2302      	movs	r3, #2
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8005528:	e03e      	b.n	80055a8 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 800552a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800552e:	3b01      	subs	r3, #1
 8005530:	4a20      	ldr	r2, [pc, #128]	@ (80055b4 <calculateOutputPeriodValue+0xd4>)
 8005532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005536:	ed97 0a00 	vldr	s0, [r7]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ffa8 	bl	8005490 <safeOutputPeriodValueCalculator>
 8005540:	60f8      	str	r0, [r7, #12]
			break;
 8005542:	e031      	b.n	80055a8 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 8005544:	79bb      	ldrb	r3, [r7, #6]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 800554a:	edd7 7a00 	vldr	s15, [r7]
 800554e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005552:	ee17 2a90 	vmov	r2, s15
 8005556:	2301      	movs	r3, #1
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 800555e:	e023      	b.n	80055a8 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 8005560:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005564:	3306      	adds	r3, #6
 8005566:	4a13      	ldr	r2, [pc, #76]	@ (80055b4 <calculateOutputPeriodValue+0xd4>)
 8005568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556c:	ed97 0a00 	vldr	s0, [r7]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff8d 	bl	8005490 <safeOutputPeriodValueCalculator>
 8005576:	60f8      	str	r0, [r7, #12]
			break;
 8005578:	e016      	b.n	80055a8 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 800557a:	79bb      	ldrb	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8005580:	edd7 7a00 	vldr	s15, [r7]
 8005584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005588:	ee17 2a90 	vmov	r2, s15
 800558c:	2301      	movs	r3, #1
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8005594:	e007      	b.n	80055a6 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8005596:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <calculateOutputPeriodValue+0xd4>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	ed97 0a00 	vldr	s0, [r7]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ff76 	bl	8005490 <safeOutputPeriodValueCalculator>
 80055a4:	60f8      	str	r0, [r7, #12]
			break;
 80055a6:	bf00      	nop
		default:
	}
	return returnVal;
 80055a8:	68fb      	ldr	r3, [r7, #12]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000f78 	.word	0x20000f78

080055b8 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	ed87 0a00 	vstr	s0, [r7]
 80055c4:	71fb      	strb	r3, [r7, #7]
 80055c6:	460b      	mov	r3, r1
 80055c8:	71bb      	strb	r3, [r7, #6]
 80055ca:	4613      	mov	r3, r2
 80055cc:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 80055ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80055d2:	79b9      	ldrb	r1, [r7, #6]
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	ed97 0a00 	vldr	s0, [r7]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff ff80 	bl	80054e0 <calculateOutputPeriodValue>
 80055e0:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d076      	beq.n	80056d6 <PWMInitialize+0x11e>
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	dc7e      	bgt.n	80056ea <PWMInitialize+0x132>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <PWMInitialize+0x3e>
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d04a      	beq.n	800568a <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 80055f4:	e079      	b.n	80056ea <PWMInitialize+0x132>
		switch (position) {
 80055f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d83b      	bhi.n	8005678 <PWMInitialize+0xc0>
 8005600:	a201      	add	r2, pc, #4	@ (adr r2, 8005608 <PWMInitialize+0x50>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	08005625 	.word	0x08005625
 800560c:	08005631 	.word	0x08005631
 8005610:	0800563d 	.word	0x0800563d
 8005614:	08005649 	.word	0x08005649
 8005618:	08005655 	.word	0x08005655
 800561c:	08005661 	.word	0x08005661
 8005620:	0800566d 	.word	0x0800566d
			(*tim1).Instance->CCR1=value;
 8005624:	4b33      	ldr	r3, [pc, #204]	@ (80056f4 <PWMInitialize+0x13c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800562e:	e024      	b.n	800567a <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 8005630:	4b30      	ldr	r3, [pc, #192]	@ (80056f4 <PWMInitialize+0x13c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800563a:	e01e      	b.n	800567a <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 800563c:	4b2d      	ldr	r3, [pc, #180]	@ (80056f4 <PWMInitialize+0x13c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8005646:	e018      	b.n	800567a <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8005648:	4b2a      	ldr	r3, [pc, #168]	@ (80056f4 <PWMInitialize+0x13c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8005652:	e012      	b.n	800567a <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8005654:	4b28      	ldr	r3, [pc, #160]	@ (80056f8 <PWMInitialize+0x140>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800565e:	e00c      	b.n	800567a <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 8005660:	4b25      	ldr	r3, [pc, #148]	@ (80056f8 <PWMInitialize+0x140>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800566a:	e006      	b.n	800567a <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 800566c:	4b22      	ldr	r3, [pc, #136]	@ (80056f8 <PWMInitialize+0x140>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8005676:	e000      	b.n	800567a <PWMInitialize+0xc2>
			break;
 8005678:	bf00      	nop
		subPeriod[position-1] = value;
 800567a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800567e:	3b01      	subs	r3, #1
 8005680:	491e      	ldr	r1, [pc, #120]	@ (80056fc <PWMInitialize+0x144>)
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8005688:	e02e      	b.n	80056e8 <PWMInitialize+0x130>
		switch (position) {
 800568a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d012      	beq.n	80056b8 <PWMInitialize+0x100>
 8005692:	2b03      	cmp	r3, #3
 8005694:	dc16      	bgt.n	80056c4 <PWMInitialize+0x10c>
 8005696:	2b01      	cmp	r3, #1
 8005698:	d002      	beq.n	80056a0 <PWMInitialize+0xe8>
 800569a:	2b02      	cmp	r3, #2
 800569c:	d006      	beq.n	80056ac <PWMInitialize+0xf4>
			break;
 800569e:	e011      	b.n	80056c4 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 80056a0:	4b17      	ldr	r3, [pc, #92]	@ (8005700 <PWMInitialize+0x148>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80056aa:	e00c      	b.n	80056c6 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 80056ac:	4b14      	ldr	r3, [pc, #80]	@ (8005700 <PWMInitialize+0x148>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80056b6:	e006      	b.n	80056c6 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 80056b8:	4b11      	ldr	r3, [pc, #68]	@ (8005700 <PWMInitialize+0x148>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80056c2:	e000      	b.n	80056c6 <PWMInitialize+0x10e>
			break;
 80056c4:	bf00      	nop
		subPeriod[position+6] = value;
 80056c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80056ca:	3306      	adds	r3, #6
 80056cc:	490b      	ldr	r1, [pc, #44]	@ (80056fc <PWMInitialize+0x144>)
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80056d4:	e008      	b.n	80056e8 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 80056d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <PWMInitialize+0x14c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 80056e0:	4a06      	ldr	r2, [pc, #24]	@ (80056fc <PWMInitialize+0x144>)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 80056e6:	bf00      	nop
	return;
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
}
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000f30 	.word	0x20000f30
 80056f8:	20000f3c 	.word	0x20000f3c
 80056fc:	20000f4c 	.word	0x20000f4c
 8005700:	20000f38 	.word	0x20000f38
 8005704:	20000f34 	.word	0x20000f34

08005708 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	6039      	str	r1, [r7, #0]
 8005712:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8005714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005718:	2b04      	cmp	r3, #4
 800571a:	dc0c      	bgt.n	8005736 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 800571c:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <MotorPositionForInitializingPeriod+0x54>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8005726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572a:	3b01      	subs	r3, #1
 800572c:	490c      	ldr	r1, [pc, #48]	@ (8005760 <MotorPositionForInitializingPeriod+0x58>)
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8005734:	e00b      	b.n	800574e <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8005736:	4b0b      	ldr	r3, [pc, #44]	@ (8005764 <MotorPositionForInitializingPeriod+0x5c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 8005740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005744:	3b01      	subs	r3, #1
 8005746:	4906      	ldr	r1, [pc, #24]	@ (8005760 <MotorPositionForInitializingPeriod+0x58>)
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20000f30 	.word	0x20000f30
 8005760:	20000f78 	.word	0x20000f78
 8005764:	20000f3c 	.word	0x20000f3c

08005768 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	603a      	str	r2, [r7, #0]
 8005772:	71fb      	strb	r3, [r7, #7]
 8005774:	460b      	mov	r3, r1
 8005776:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fe31 	bl	80053e4 <calculateOutputPeriodToGetFrequency>
 8005782:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d01a      	beq.n	80057c0 <initializePeriod+0x58>
 800578a:	2b02      	cmp	r3, #2
 800578c:	dc22      	bgt.n	80057d4 <initializePeriod+0x6c>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <initializePeriod+0x30>
 8005792:	2b01      	cmp	r3, #1
 8005794:	d007      	beq.n	80057a6 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 8005796:	e01d      	b.n	80057d4 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8005798:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800579c:	68f9      	ldr	r1, [r7, #12]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff ffb2 	bl	8005708 <MotorPositionForInitializingPeriod>
		break;
 80057a4:	e015      	b.n	80057d2 <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <initializePeriod+0x74>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 80057b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80057b4:	3306      	adds	r3, #6
 80057b6:	490a      	ldr	r1, [pc, #40]	@ (80057e0 <initializePeriod+0x78>)
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80057be:	e008      	b.n	80057d2 <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 80057c0:	4b08      	ldr	r3, [pc, #32]	@ (80057e4 <initializePeriod+0x7c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 80057ca:	4a05      	ldr	r2, [pc, #20]	@ (80057e0 <initializePeriod+0x78>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 80057d0:	bf00      	nop
	return;
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
}
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000f38 	.word	0x20000f38
 80057e0:	20000f78 	.word	0x20000f78
 80057e4:	20000f34 	.word	0x20000f34

080057e8 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	603a      	str	r2, [r7, #0]
 80057f2:	71fb      	strb	r3, [r7, #7]
 80057f4:	460b      	mov	r3, r1
 80057f6:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 80057f8:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff ffb1 	bl	8005768 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d014      	beq.n	8005836 <PWMOutput+0x4e>
 800580c:	2b02      	cmp	r3, #2
 800580e:	dc16      	bgt.n	800583e <PWMOutput+0x56>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <PWMOutput+0x32>
 8005814:	2b01      	cmp	r3, #1
 8005816:	d007      	beq.n	8005828 <PWMOutput+0x40>
 8005818:	e011      	b.n	800583e <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 800581a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800581e:	3b01      	subs	r3, #1
 8005820:	4a08      	ldr	r2, [pc, #32]	@ (8005844 <PWMOutput+0x5c>)
 8005822:	2101      	movs	r1, #1
 8005824:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005826:	e00a      	b.n	800583e <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8005828:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800582c:	3306      	adds	r3, #6
 800582e:	4a05      	ldr	r2, [pc, #20]	@ (8005844 <PWMOutput+0x5c>)
 8005830:	2101      	movs	r1, #1
 8005832:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005834:	e003      	b.n	800583e <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8005836:	4b03      	ldr	r3, [pc, #12]	@ (8005844 <PWMOutput+0x5c>)
 8005838:	2201      	movs	r2, #1
 800583a:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 800583c:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000f40 	.word	0x20000f40

08005848 <PWMOn>:

void PWMOn(TypesThatUsePWM_t Type, int8_t Position) {
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	460a      	mov	r2, r1
 8005852:	71fb      	strb	r3, [r7, #7]
 8005854:	4613      	mov	r3, r2
 8005856:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d014      	beq.n	8005888 <PWMOn+0x40>
 800585e:	2b02      	cmp	r3, #2
 8005860:	dc16      	bgt.n	8005890 <PWMOn+0x48>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <PWMOn+0x24>
 8005866:	2b01      	cmp	r3, #1
 8005868:	d007      	beq.n	800587a <PWMOn+0x32>
 800586a:	e011      	b.n	8005890 <PWMOn+0x48>
	case 0:
		whichPWMisOn[Position-1] = 1;
 800586c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005870:	3b01      	subs	r3, #1
 8005872:	4a0a      	ldr	r2, [pc, #40]	@ (800589c <PWMOn+0x54>)
 8005874:	2101      	movs	r1, #1
 8005876:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005878:	e00a      	b.n	8005890 <PWMOn+0x48>
	case 1:
		whichPWMisOn[Position+6] = 1;
 800587a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800587e:	3306      	adds	r3, #6
 8005880:	4a06      	ldr	r2, [pc, #24]	@ (800589c <PWMOn+0x54>)
 8005882:	2101      	movs	r1, #1
 8005884:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005886:	e003      	b.n	8005890 <PWMOn+0x48>
	case 2:
		whichPWMisOn[10] = 1;
 8005888:	4b04      	ldr	r3, [pc, #16]	@ (800589c <PWMOn+0x54>)
 800588a:	2201      	movs	r2, #1
 800588c:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 800588e:	bf00      	nop
	}
}
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000f40 	.word	0x20000f40

080058a0 <PWMOff>:

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	460a      	mov	r2, r1
 80058aa:	71fb      	strb	r3, [r7, #7]
 80058ac:	4613      	mov	r3, r2
 80058ae:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d014      	beq.n	80058e0 <PWMOff+0x40>
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	dc16      	bgt.n	80058e8 <PWMOff+0x48>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <PWMOff+0x24>
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d007      	beq.n	80058d2 <PWMOff+0x32>
 80058c2:	e011      	b.n	80058e8 <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 80058c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	4a0a      	ldr	r2, [pc, #40]	@ (80058f4 <PWMOff+0x54>)
 80058cc:	2100      	movs	r1, #0
 80058ce:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 80058d0:	e00a      	b.n	80058e8 <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 80058d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80058d6:	3306      	adds	r3, #6
 80058d8:	4a06      	ldr	r2, [pc, #24]	@ (80058f4 <PWMOff+0x54>)
 80058da:	2100      	movs	r1, #0
 80058dc:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 80058de:	e003      	b.n	80058e8 <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <PWMOff+0x54>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 80058e6:	bf00      	nop
	}
}
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20000f40 	.word	0x20000f40

080058f8 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	e0f1      	b.n	8005ae8 <PWMTimerStarter+0x1f0>
		switch (i) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b0a      	cmp	r3, #10
 8005908:	f200 80eb 	bhi.w	8005ae2 <PWMTimerStarter+0x1ea>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <PWMTimerStarter+0x1c>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005941 	.word	0x08005941
 8005918:	08005967 	.word	0x08005967
 800591c:	0800598d 	.word	0x0800598d
 8005920:	080059b3 	.word	0x080059b3
 8005924:	080059d9 	.word	0x080059d9
 8005928:	080059ff 	.word	0x080059ff
 800592c:	08005a25 	.word	0x08005a25
 8005930:	08005a4b 	.word	0x08005a4b
 8005934:	08005a71 	.word	0x08005a71
 8005938:	08005a97 	.word	0x08005a97
 800593c:	08005abd 	.word	0x08005abd
		case 0:
			if (whichPWMisOn[0] == 1) {
 8005940:	4b6e      	ldr	r3, [pc, #440]	@ (8005afc <PWMTimerStarter+0x204>)
 8005942:	f993 3000 	ldrsb.w	r3, [r3]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d106      	bne.n	8005958 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800594a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b00 <PWMTimerStarter+0x208>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2100      	movs	r1, #0
 8005950:	4618      	mov	r0, r3
 8005952:	f005 f9ef 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8005956:	e0c4      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8005958:	4b69      	ldr	r3, [pc, #420]	@ (8005b00 <PWMTimerStarter+0x208>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2100      	movs	r1, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f005 fab0 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 8005964:	e0bd      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8005966:	4b65      	ldr	r3, [pc, #404]	@ (8005afc <PWMTimerStarter+0x204>)
 8005968:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d106      	bne.n	800597e <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8005970:	4b63      	ldr	r3, [pc, #396]	@ (8005b00 <PWMTimerStarter+0x208>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2104      	movs	r1, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f005 f9dc 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 800597c:	e0b1      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 800597e:	4b60      	ldr	r3, [pc, #384]	@ (8005b00 <PWMTimerStarter+0x208>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2104      	movs	r1, #4
 8005984:	4618      	mov	r0, r3
 8005986:	f005 fa9d 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 800598a:	e0aa      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 800598c:	4b5b      	ldr	r3, [pc, #364]	@ (8005afc <PWMTimerStarter+0x204>)
 800598e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d106      	bne.n	80059a4 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8005996:	4b5a      	ldr	r3, [pc, #360]	@ (8005b00 <PWMTimerStarter+0x208>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2108      	movs	r1, #8
 800599c:	4618      	mov	r0, r3
 800599e:	f005 f9c9 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 80059a2:	e09e      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 80059a4:	4b56      	ldr	r3, [pc, #344]	@ (8005b00 <PWMTimerStarter+0x208>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2108      	movs	r1, #8
 80059aa:	4618      	mov	r0, r3
 80059ac:	f005 fa8a 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 80059b0:	e097      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 80059b2:	4b52      	ldr	r3, [pc, #328]	@ (8005afc <PWMTimerStarter+0x204>)
 80059b4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80059bc:	4b50      	ldr	r3, [pc, #320]	@ (8005b00 <PWMTimerStarter+0x208>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	210c      	movs	r1, #12
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 f9b6 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80059c8:	e08b      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80059ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005b00 <PWMTimerStarter+0x208>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	210c      	movs	r1, #12
 80059d0:	4618      	mov	r0, r3
 80059d2:	f005 fa77 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 80059d6:	e084      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 80059d8:	4b48      	ldr	r3, [pc, #288]	@ (8005afc <PWMTimerStarter+0x204>)
 80059da:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d106      	bne.n	80059f0 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 80059e2:	4b48      	ldr	r3, [pc, #288]	@ (8005b04 <PWMTimerStarter+0x20c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f005 f9a3 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 80059ee:	e078      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 80059f0:	4b44      	ldr	r3, [pc, #272]	@ (8005b04 <PWMTimerStarter+0x20c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f005 fa64 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 80059fc:	e071      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 80059fe:	4b3f      	ldr	r3, [pc, #252]	@ (8005afc <PWMTimerStarter+0x204>)
 8005a00:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d106      	bne.n	8005a16 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8005a08:	4b3e      	ldr	r3, [pc, #248]	@ (8005b04 <PWMTimerStarter+0x20c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2104      	movs	r1, #4
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f005 f990 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8005a14:	e065      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8005a16:	4b3b      	ldr	r3, [pc, #236]	@ (8005b04 <PWMTimerStarter+0x20c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2104      	movs	r1, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f005 fa51 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 8005a22:	e05e      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8005a24:	4b35      	ldr	r3, [pc, #212]	@ (8005afc <PWMTimerStarter+0x204>)
 8005a26:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8005a2e:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <PWMTimerStarter+0x20c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2108      	movs	r1, #8
 8005a34:	4618      	mov	r0, r3
 8005a36:	f005 f97d 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8005a3a:	e052      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8005a3c:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <PWMTimerStarter+0x20c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2108      	movs	r1, #8
 8005a42:	4618      	mov	r0, r3
 8005a44:	f005 fa3e 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 8005a48:	e04b      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8005a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005afc <PWMTimerStarter+0x204>)
 8005a4c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d106      	bne.n	8005a62 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8005a54:	4b2c      	ldr	r3, [pc, #176]	@ (8005b08 <PWMTimerStarter+0x210>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f005 f96a 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8005a60:	e03f      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8005a62:	4b29      	ldr	r3, [pc, #164]	@ (8005b08 <PWMTimerStarter+0x210>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f005 fa2b 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 8005a6e:	e038      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8005a70:	4b22      	ldr	r3, [pc, #136]	@ (8005afc <PWMTimerStarter+0x204>)
 8005a72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d106      	bne.n	8005a88 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8005a7a:	4b23      	ldr	r3, [pc, #140]	@ (8005b08 <PWMTimerStarter+0x210>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f005 f957 	bl	800ad34 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8005a86:	e02c      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8005a88:	4b1f      	ldr	r3, [pc, #124]	@ (8005b08 <PWMTimerStarter+0x210>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2104      	movs	r1, #4
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f005 fa18 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 8005a94:	e025      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8005a96:	4b19      	ldr	r3, [pc, #100]	@ (8005afc <PWMTimerStarter+0x204>)
 8005a98:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d106      	bne.n	8005aae <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8005aa0:	4b19      	ldr	r3, [pc, #100]	@ (8005b08 <PWMTimerStarter+0x210>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2108      	movs	r1, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f005 f944 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8005aac:	e019      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8005aae:	4b16      	ldr	r3, [pc, #88]	@ (8005b08 <PWMTimerStarter+0x210>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2108      	movs	r1, #8
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f005 fa05 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 8005aba:	e012      	b.n	8005ae2 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8005abc:	4b0f      	ldr	r3, [pc, #60]	@ (8005afc <PWMTimerStarter+0x204>)
 8005abe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d106      	bne.n	8005ad4 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8005ac6:	4b11      	ldr	r3, [pc, #68]	@ (8005b0c <PWMTimerStarter+0x214>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2108      	movs	r1, #8
 8005acc:	4618      	mov	r0, r3
 8005ace:	f005 f931 	bl	800ad34 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8005ad2:	e005      	b.n	8005ae0 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b0c <PWMTimerStarter+0x214>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2108      	movs	r1, #8
 8005ada:	4618      	mov	r0, r3
 8005adc:	f005 f9f2 	bl	800aec4 <HAL_TIM_PWM_Stop>
			break;
 8005ae0:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b0a      	cmp	r3, #10
 8005aec:	f77f af0a 	ble.w	8005904 <PWMTimerStarter+0xc>
		}
	}
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000f40 	.word	0x20000f40
 8005b00:	20000f30 	.word	0x20000f30
 8005b04:	20000f3c 	.word	0x20000f3c
 8005b08:	20000f38 	.word	0x20000f38
 8005b0c:	20000f34 	.word	0x20000f34

08005b10 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8005b14:	2224      	movs	r2, #36	@ 0x24
 8005b16:	4903      	ldr	r1, [pc, #12]	@ (8005b24 <remote_control_init+0x14>)
 8005b18:	4803      	ldr	r0, [pc, #12]	@ (8005b28 <remote_control_init+0x18>)
 8005b1a:	f7fc ff69 	bl	80029f0 <RC_init>
}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000fe0 	.word	0x20000fe0
 8005b28:	20000fbc 	.word	0x20000fbc

08005b2c <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8005b30:	4b02      	ldr	r3, [pc, #8]	@ (8005b3c <get_remote_control_point+0x10>)
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000fa4 	.word	0x20000fa4

08005b40 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8005b46:	4b44      	ldr	r3, [pc, #272]	@ (8005c58 <USART3_IRQHandler+0x118>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005b54:	2300      	movs	r3, #0
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	4b3f      	ldr	r3, [pc, #252]	@ (8005c58 <USART3_IRQHandler+0x118>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	4b3d      	ldr	r3, [pc, #244]	@ (8005c58 <USART3_IRQHandler+0x118>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	607b      	str	r3, [r7, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8005b6a:	e070      	b.n	8005c4e <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8005b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c5c <USART3_IRQHandler+0x11c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d06a      	beq.n	8005c4e <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005b78:	2300      	movs	r3, #0
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4b36      	ldr	r3, [pc, #216]	@ (8005c58 <USART3_IRQHandler+0x118>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4b34      	ldr	r3, [pc, #208]	@ (8005c58 <USART3_IRQHandler+0x118>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8005b8e:	4b34      	ldr	r3, [pc, #208]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d12d      	bne.n	8005bf8 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8005b9c:	4b30      	ldr	r3, [pc, #192]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8005bac:	4b2c      	ldr	r3, [pc, #176]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	4b2a      	ldr	r3, [pc, #168]	@ (8005c64 <USART3_IRQHandler+0x124>)
 8005bbc:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8005bbe:	4b28      	ldr	r3, [pc, #160]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2224      	movs	r2, #36	@ 0x24
 8005bc4:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8005bc6:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8005bd4:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8005bd6:	4b22      	ldr	r3, [pc, #136]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b20      	ldr	r3, [pc, #128]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8005be6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c64 <USART3_IRQHandler+0x124>)
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	2b12      	cmp	r3, #18
 8005bec:	d12f      	bne.n	8005c4e <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8005bee:	491e      	ldr	r1, [pc, #120]	@ (8005c68 <USART3_IRQHandler+0x128>)
 8005bf0:	481e      	ldr	r0, [pc, #120]	@ (8005c6c <USART3_IRQHandler+0x12c>)
 8005bf2:	f000 f841 	bl	8005c78 <sbus_to_rc>
}
 8005bf6:	e02a      	b.n	8005c4e <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8005bf8:	4b19      	ldr	r3, [pc, #100]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b18      	ldr	r3, [pc, #96]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8005c08:	4b15      	ldr	r3, [pc, #84]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	4b13      	ldr	r3, [pc, #76]	@ (8005c64 <USART3_IRQHandler+0x124>)
 8005c18:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8005c1a:	4b11      	ldr	r3, [pc, #68]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2224      	movs	r2, #36	@ 0x24
 8005c20:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8005c22:	4b13      	ldr	r3, [pc, #76]	@ (8005c70 <USART3_IRQHandler+0x130>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a12      	ldr	r2, [pc, #72]	@ (8005c70 <USART3_IRQHandler+0x130>)
 8005c28:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005c2c:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <USART3_IRQHandler+0x120>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8005c3e:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <USART3_IRQHandler+0x124>)
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	2b12      	cmp	r3, #18
 8005c44:	d103      	bne.n	8005c4e <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8005c46:	4908      	ldr	r1, [pc, #32]	@ (8005c68 <USART3_IRQHandler+0x128>)
 8005c48:	480a      	ldr	r0, [pc, #40]	@ (8005c74 <USART3_IRQHandler+0x134>)
 8005c4a:	f000 f815 	bl	8005c78 <sbus_to_rc>
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000ca8 	.word	0x20000ca8
 8005c5c:	40004800 	.word	0x40004800
 8005c60:	20000df8 	.word	0x20000df8
 8005c64:	20001004 	.word	0x20001004
 8005c68:	20000fa4 	.word	0x20000fa4
 8005c6c:	20000fbc 	.word	0x20000fbc
 8005c70:	40026028 	.word	0x40026028
 8005c74:	20000fe0 	.word	0x20000fe0

08005c78 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8101 	beq.w	8005e8c <sbus_to_rc+0x214>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80fd 	beq.w	8005e8c <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	b21b      	sxth	r3, r3
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	b21b      	sxth	r3, r3
 8005caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cae:	b21a      	sxth	r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	08db      	lsrs	r3, r3, #3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	b21a      	sxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	015b      	lsls	r3, r3, #5
 8005ccc:	b21b      	sxth	r3, r3
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	b21b      	sxth	r3, r3
 8005cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cd6:	b21a      	sxth	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3302      	adds	r3, #2
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	099b      	lsrs	r3, r3, #6
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	b21a      	sxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3303      	adds	r3, #3
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	b21b      	sxth	r3, r3
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005d04:	b21b      	sxth	r3, r3
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8005d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d0e:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	085b      	lsrs	r3, r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	b21a      	sxth	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3305      	adds	r3, #5
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	01db      	lsls	r3, r3, #7
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b21b      	sxth	r3, r3
 8005d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d36:	b21a      	sxth	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3305      	adds	r3, #5
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3305      	adds	r3, #5
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	109b      	asrs	r3, r3, #2
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3306      	adds	r3, #6
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	b21a      	sxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3307      	adds	r3, #7
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b21a      	sxth	r2, r3
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	b21a      	sxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3309      	adds	r3, #9
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	b21b      	sxth	r3, r3
 8005da0:	4313      	orrs	r3, r2
 8005da2:	b21a      	sxth	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	330a      	adds	r3, #10
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	b21a      	sxth	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	330b      	adds	r3, #11
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b21a      	sxth	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	330d      	adds	r3, #13
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	330e      	adds	r3, #14
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	b21a      	sxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	330f      	adds	r3, #15
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	b21b      	sxth	r3, r3
 8005df4:	4313      	orrs	r3, r2
 8005df6:	b21b      	sxth	r3, r3
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3310      	adds	r3, #16
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	b21a      	sxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3311      	adds	r3, #17
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	b21b      	sxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b21a      	sxth	r2, r3
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e22:	b21b      	sxth	r3, r3
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	b21a      	sxth	r2, r3
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b21a      	sxth	r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	b21a      	sxth	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	b21a      	sxth	r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e7a:	b21b      	sxth	r3, r3
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	811a      	strh	r2, [r3, #8]
 8005e8a:	e000      	b.n	8005e8e <sbus_to_rc+0x216>
        return;
 8005e8c:	bf00      	nop
}
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8005ea2:	4b06      	ldr	r3, [pc, #24]	@ (8005ebc <getRCchannel+0x24>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005eaa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005eae:	b21b      	sxth	r3, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	200000a0 	.word	0x200000a0

08005ec0 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <getRCswitch+0x24>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	7a9b      	ldrb	r3, [r3, #10]
 8005ed6:	b25b      	sxtb	r3, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	200000a0 	.word	0x200000a0

08005ee8 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8005eee:	4b85      	ldr	r3, [pc, #532]	@ (8006104 <RCkeysRefresh+0x21c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	7d1a      	ldrb	r2, [r3, #20]
 8005ef4:	7d5b      	ldrb	r3, [r3, #21]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8005efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	da07      	bge.n	8005f14 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8005f04:	4b80      	ldr	r3, [pc, #512]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005f10:	80fb      	strh	r3, [r7, #6]
 8005f12:	e002      	b.n	8005f1a <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8005f14:	4b7c      	ldr	r3, [pc, #496]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f20:	d307      	bcc.n	8005f32 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8005f22:	4b79      	ldr	r3, [pc, #484]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8005f2e:	80fb      	strh	r3, [r7, #6]
 8005f30:	e002      	b.n	8005f38 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8005f32:	4b75      	ldr	r3, [pc, #468]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3e:	d307      	bcc.n	8005f50 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8005f40:	4b71      	ldr	r3, [pc, #452]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8005f4c:	80fb      	strh	r3, [r7, #6]
 8005f4e:	e002      	b.n	8005f56 <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8005f50:	4b6d      	ldr	r3, [pc, #436]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5c:	d307      	bcc.n	8005f6e <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8005f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8005f6a:	80fb      	strh	r3, [r7, #6]
 8005f6c:	e002      	b.n	8005f74 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8005f6e:	4b66      	ldr	r3, [pc, #408]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f7a:	d307      	bcc.n	8005f8c <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8005f7c:	4b62      	ldr	r3, [pc, #392]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8005f88:	80fb      	strh	r3, [r7, #6]
 8005f8a:	e002      	b.n	8005f92 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8005f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f98:	d307      	bcc.n	8005faa <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8005f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8006108 <RCkeysRefresh+0x220>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005fa6:	80fb      	strh	r3, [r7, #6]
 8005fa8:	e002      	b.n	8005fb0 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 8005faa:	4b57      	ldr	r3, [pc, #348]	@ (8006108 <RCkeysRefresh+0x220>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb6:	d307      	bcc.n	8005fc8 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8005fb8:	4b53      	ldr	r3, [pc, #332]	@ (8006108 <RCkeysRefresh+0x220>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8005fc4:	80fb      	strh	r3, [r7, #6]
 8005fc6:	e002      	b.n	8005fce <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8005fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8006108 <RCkeysRefresh+0x220>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2bff      	cmp	r3, #255	@ 0xff
 8005fd2:	d907      	bls.n	8005fe4 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8005fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8006108 <RCkeysRefresh+0x220>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005fe0:	80fb      	strh	r3, [r7, #6]
 8005fe2:	e002      	b.n	8005fea <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8005fe4:	4b48      	ldr	r3, [pc, #288]	@ (8006108 <RCkeysRefresh+0x220>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fee:	d906      	bls.n	8005ffe <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8005ff0:	4b45      	ldr	r3, [pc, #276]	@ (8006108 <RCkeysRefresh+0x220>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	3b80      	subs	r3, #128	@ 0x80
 8005ffa:	80fb      	strh	r3, [r7, #6]
 8005ffc:	e002      	b.n	8006004 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8005ffe:	4b42      	ldr	r3, [pc, #264]	@ (8006108 <RCkeysRefresh+0x220>)
 8006000:	2200      	movs	r2, #0
 8006002:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b3f      	cmp	r3, #63	@ 0x3f
 8006008:	d906      	bls.n	8006018 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 800600a:	4b3f      	ldr	r3, [pc, #252]	@ (8006108 <RCkeysRefresh+0x220>)
 800600c:	2201      	movs	r2, #1
 800600e:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	3b40      	subs	r3, #64	@ 0x40
 8006014:	80fb      	strh	r3, [r7, #6]
 8006016:	e002      	b.n	800601e <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8006018:	4b3b      	ldr	r3, [pc, #236]	@ (8006108 <RCkeysRefresh+0x220>)
 800601a:	2200      	movs	r2, #0
 800601c:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2b1f      	cmp	r3, #31
 8006022:	d906      	bls.n	8006032 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8006024:	4b38      	ldr	r3, [pc, #224]	@ (8006108 <RCkeysRefresh+0x220>)
 8006026:	2201      	movs	r2, #1
 8006028:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	3b20      	subs	r3, #32
 800602e:	80fb      	strh	r3, [r7, #6]
 8006030:	e002      	b.n	8006038 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8006032:	4b35      	ldr	r3, [pc, #212]	@ (8006108 <RCkeysRefresh+0x220>)
 8006034:	2200      	movs	r2, #0
 8006036:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	2b0f      	cmp	r3, #15
 800603c:	d906      	bls.n	800604c <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 800603e:	4b32      	ldr	r3, [pc, #200]	@ (8006108 <RCkeysRefresh+0x220>)
 8006040:	2201      	movs	r2, #1
 8006042:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	3b10      	subs	r3, #16
 8006048:	80fb      	strh	r3, [r7, #6]
 800604a:	e002      	b.n	8006052 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 800604c:	4b2e      	ldr	r3, [pc, #184]	@ (8006108 <RCkeysRefresh+0x220>)
 800604e:	2200      	movs	r2, #0
 8006050:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	2b07      	cmp	r3, #7
 8006056:	d906      	bls.n	8006066 <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 8006058:	4b2b      	ldr	r3, [pc, #172]	@ (8006108 <RCkeysRefresh+0x220>)
 800605a:	2201      	movs	r2, #1
 800605c:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	3b08      	subs	r3, #8
 8006062:	80fb      	strh	r3, [r7, #6]
 8006064:	e002      	b.n	800606c <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 8006066:	4b28      	ldr	r3, [pc, #160]	@ (8006108 <RCkeysRefresh+0x220>)
 8006068:	2200      	movs	r2, #0
 800606a:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d906      	bls.n	8006080 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 8006072:	4b25      	ldr	r3, [pc, #148]	@ (8006108 <RCkeysRefresh+0x220>)
 8006074:	2201      	movs	r2, #1
 8006076:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	3b04      	subs	r3, #4
 800607c:	80fb      	strh	r3, [r7, #6]
 800607e:	e002      	b.n	8006086 <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8006080:	4b21      	ldr	r3, [pc, #132]	@ (8006108 <RCkeysRefresh+0x220>)
 8006082:	2200      	movs	r2, #0
 8006084:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d906      	bls.n	800609a <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 800608c:	4b1e      	ldr	r3, [pc, #120]	@ (8006108 <RCkeysRefresh+0x220>)
 800608e:	2201      	movs	r2, #1
 8006090:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	3b02      	subs	r3, #2
 8006096:	80fb      	strh	r3, [r7, #6]
 8006098:	e002      	b.n	80060a0 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 800609a:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <RCkeysRefresh+0x220>)
 800609c:	2200      	movs	r2, #0
 800609e:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 80060a6:	4b18      	ldr	r3, [pc, #96]	@ (8006108 <RCkeysRefresh+0x220>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	731a      	strb	r2, [r3, #12]
 80060ac:	e002      	b.n	80060b4 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 80060ae:	4b16      	ldr	r3, [pc, #88]	@ (8006108 <RCkeysRefresh+0x220>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 80060b4:	4b13      	ldr	r3, [pc, #76]	@ (8006104 <RCkeysRefresh+0x21c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80060bc:	b21a      	sxth	r2, r3
 80060be:	4b12      	ldr	r3, [pc, #72]	@ (8006108 <RCkeysRefresh+0x220>)
 80060c0:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 80060c2:	4b10      	ldr	r3, [pc, #64]	@ (8006104 <RCkeysRefresh+0x21c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80060ca:	b21a      	sxth	r2, r3
 80060cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <RCkeysRefresh+0x220>)
 80060ce:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006104 <RCkeysRefresh+0x21c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80060d8:	b21a      	sxth	r2, r3
 80060da:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <RCkeysRefresh+0x220>)
 80060dc:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 80060de:	4b09      	ldr	r3, [pc, #36]	@ (8006104 <RCkeysRefresh+0x21c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	7c9b      	ldrb	r3, [r3, #18]
 80060e4:	b25a      	sxtb	r2, r3
 80060e6:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <RCkeysRefresh+0x220>)
 80060e8:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 80060ea:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <RCkeysRefresh+0x21c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	7cdb      	ldrb	r3, [r3, #19]
 80060f0:	b25a      	sxtb	r2, r3
 80060f2:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <RCkeysRefresh+0x220>)
 80060f4:	71da      	strb	r2, [r3, #7]
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	200000a0 	.word	0x200000a0
 8006108:	20000724 	.word	0x20000724

0800610c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <HAL_MspInit+0x54>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611a:	4a11      	ldr	r2, [pc, #68]	@ (8006160 <HAL_MspInit+0x54>)
 800611c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006120:	6453      	str	r3, [r2, #68]	@ 0x44
 8006122:	4b0f      	ldr	r3, [pc, #60]	@ (8006160 <HAL_MspInit+0x54>)
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800612e:	2300      	movs	r3, #0
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <HAL_MspInit+0x54>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	4a0a      	ldr	r2, [pc, #40]	@ (8006160 <HAL_MspInit+0x54>)
 8006138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613c:	6413      	str	r3, [r2, #64]	@ 0x40
 800613e:	4b08      	ldr	r3, [pc, #32]	@ (8006160 <HAL_MspInit+0x54>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800614a:	2200      	movs	r2, #0
 800614c:	210f      	movs	r1, #15
 800614e:	f06f 0001 	mvn.w	r0, #1
 8006152:	f001 ff28 	bl	8007fa6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40023800 	.word	0x40023800

08006164 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08c      	sub	sp, #48	@ 0x30
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800616c:	f107 031c 	add.w	r3, r7, #28
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a4a      	ldr	r2, [pc, #296]	@ (80062ac <HAL_CAN_MspInit+0x148>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d13d      	bne.n	8006202 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006186:	4b4a      	ldr	r3, [pc, #296]	@ (80062b0 <HAL_CAN_MspInit+0x14c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	4a48      	ldr	r2, [pc, #288]	@ (80062b0 <HAL_CAN_MspInit+0x14c>)
 800618e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006190:	4b47      	ldr	r3, [pc, #284]	@ (80062b0 <HAL_CAN_MspInit+0x14c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d10d      	bne.n	80061b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006198:	2300      	movs	r3, #0
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	4b45      	ldr	r3, [pc, #276]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	4a44      	ldr	r2, [pc, #272]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 80061a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80061a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80061a8:	4b42      	ldr	r3, [pc, #264]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061b4:	2300      	movs	r3, #0
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	4b3e      	ldr	r3, [pc, #248]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 80061ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061bc:	4a3d      	ldr	r2, [pc, #244]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 80061be:	f043 0308 	orr.w	r3, r3, #8
 80061c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80061c4:	4b3b      	ldr	r3, [pc, #236]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80061d0:	2303      	movs	r3, #3
 80061d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d4:	2302      	movs	r3, #2
 80061d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061dc:	2303      	movs	r3, #3
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80061e0:	2309      	movs	r3, #9
 80061e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061e4:	f107 031c 	add.w	r3, r7, #28
 80061e8:	4619      	mov	r1, r3
 80061ea:	4833      	ldr	r0, [pc, #204]	@ (80062b8 <HAL_CAN_MspInit+0x154>)
 80061ec:	f002 fb14 	bl	8008818 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80061f0:	2200      	movs	r2, #0
 80061f2:	2105      	movs	r1, #5
 80061f4:	2014      	movs	r0, #20
 80061f6:	f001 fed6 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80061fa:	2014      	movs	r0, #20
 80061fc:	f001 feef 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8006200:	e04f      	b.n	80062a2 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2d      	ldr	r2, [pc, #180]	@ (80062bc <HAL_CAN_MspInit+0x158>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d14a      	bne.n	80062a2 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	4b28      	ldr	r3, [pc, #160]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 8006212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006214:	4a27      	ldr	r2, [pc, #156]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 8006216:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800621a:	6413      	str	r3, [r2, #64]	@ 0x40
 800621c:	4b25      	ldr	r3, [pc, #148]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006228:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <HAL_CAN_MspInit+0x14c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	4a20      	ldr	r2, [pc, #128]	@ (80062b0 <HAL_CAN_MspInit+0x14c>)
 8006230:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006232:	4b1f      	ldr	r3, [pc, #124]	@ (80062b0 <HAL_CAN_MspInit+0x14c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d10d      	bne.n	8006256 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	4b1d      	ldr	r3, [pc, #116]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	4a1c      	ldr	r2, [pc, #112]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 8006244:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006248:	6413      	str	r3, [r2, #64]	@ 0x40
 800624a:	4b1a      	ldr	r3, [pc, #104]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006256:	2300      	movs	r3, #0
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	4b16      	ldr	r3, [pc, #88]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625e:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 8006260:	f043 0302 	orr.w	r3, r3, #2
 8006264:	6313      	str	r3, [r2, #48]	@ 0x30
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <HAL_CAN_MspInit+0x150>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006272:	2360      	movs	r3, #96	@ 0x60
 8006274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006276:	2302      	movs	r3, #2
 8006278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627a:	2300      	movs	r3, #0
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800627e:	2303      	movs	r3, #3
 8006280:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006282:	2309      	movs	r3, #9
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006286:	f107 031c 	add.w	r3, r7, #28
 800628a:	4619      	mov	r1, r3
 800628c:	480c      	ldr	r0, [pc, #48]	@ (80062c0 <HAL_CAN_MspInit+0x15c>)
 800628e:	f002 fac3 	bl	8008818 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8006292:	2200      	movs	r2, #0
 8006294:	2105      	movs	r1, #5
 8006296:	2040      	movs	r0, #64	@ 0x40
 8006298:	f001 fe85 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800629c:	2040      	movs	r0, #64	@ 0x40
 800629e:	f001 fe9e 	bl	8007fde <HAL_NVIC_EnableIRQ>
}
 80062a2:	bf00      	nop
 80062a4:	3730      	adds	r7, #48	@ 0x30
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40006400 	.word	0x40006400
 80062b0:	20001008 	.word	0x20001008
 80062b4:	40023800 	.word	0x40023800
 80062b8:	40020c00 	.word	0x40020c00
 80062bc:	40006800 	.word	0x40006800
 80062c0:	40020400 	.word	0x40020400

080062c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	@ 0x28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062cc:	f107 0314 	add.w	r3, r7, #20
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	609a      	str	r2, [r3, #8]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a29      	ldr	r2, [pc, #164]	@ (8006388 <HAL_I2C_MspInit+0xc4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d14b      	bne.n	800637e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	4b28      	ldr	r3, [pc, #160]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ee:	4a27      	ldr	r2, [pc, #156]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 80062f0:	f043 0304 	orr.w	r3, r3, #4
 80062f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80062f6:	4b25      	ldr	r3, [pc, #148]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 80062f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	4b21      	ldr	r3, [pc, #132]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 8006308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630a:	4a20      	ldr	r2, [pc, #128]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	6313      	str	r3, [r2, #48]	@ 0x30
 8006312:	4b1e      	ldr	r3, [pc, #120]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800631e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006324:	2312      	movs	r3, #18
 8006326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800632c:	2303      	movs	r3, #3
 800632e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006330:	2304      	movs	r3, #4
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006334:	f107 0314 	add.w	r3, r7, #20
 8006338:	4619      	mov	r1, r3
 800633a:	4815      	ldr	r0, [pc, #84]	@ (8006390 <HAL_I2C_MspInit+0xcc>)
 800633c:	f002 fa6c 	bl	8008818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006340:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006346:	2312      	movs	r3, #18
 8006348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800634e:	2303      	movs	r3, #3
 8006350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006352:	2304      	movs	r3, #4
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006356:	f107 0314 	add.w	r3, r7, #20
 800635a:	4619      	mov	r1, r3
 800635c:	480d      	ldr	r0, [pc, #52]	@ (8006394 <HAL_I2C_MspInit+0xd0>)
 800635e:	f002 fa5b 	bl	8008818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	4b09      	ldr	r3, [pc, #36]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	4a08      	ldr	r2, [pc, #32]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 800636c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006370:	6413      	str	r3, [r2, #64]	@ 0x40
 8006372:	4b06      	ldr	r3, [pc, #24]	@ (800638c <HAL_I2C_MspInit+0xc8>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800637a:	60bb      	str	r3, [r7, #8]
 800637c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800637e:	bf00      	nop
 8006380:	3728      	adds	r7, #40	@ 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40005c00 	.word	0x40005c00
 800638c:	40023800 	.word	0x40023800
 8006390:	40020800 	.word	0x40020800
 8006394:	40020000 	.word	0x40020000

08006398 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	@ 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063a0:	f107 0314 	add.w	r3, r7, #20
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	60da      	str	r2, [r3, #12]
 80063ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a28      	ldr	r2, [pc, #160]	@ (8006458 <HAL_SPI_MspInit+0xc0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d149      	bne.n	800644e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	4b27      	ldr	r3, [pc, #156]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c2:	4a26      	ldr	r2, [pc, #152]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80063ca:	4b24      	ldr	r3, [pc, #144]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	4b20      	ldr	r3, [pc, #128]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063de:	4a1f      	ldr	r2, [pc, #124]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063e0:	f043 0302 	orr.w	r3, r3, #2
 80063e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80063e6:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	4b19      	ldr	r3, [pc, #100]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fa:	4a18      	ldr	r2, [pc, #96]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6313      	str	r3, [r2, #48]	@ 0x30
 8006402:	4b16      	ldr	r3, [pc, #88]	@ (800645c <HAL_SPI_MspInit+0xc4>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800640e:	2318      	movs	r3, #24
 8006410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006412:	2302      	movs	r3, #2
 8006414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800641a:	2303      	movs	r3, #3
 800641c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800641e:	2305      	movs	r3, #5
 8006420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	4619      	mov	r1, r3
 8006428:	480d      	ldr	r0, [pc, #52]	@ (8006460 <HAL_SPI_MspInit+0xc8>)
 800642a:	f002 f9f5 	bl	8008818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800642e:	2380      	movs	r3, #128	@ 0x80
 8006430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006432:	2302      	movs	r3, #2
 8006434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800643a:	2303      	movs	r3, #3
 800643c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800643e:	2305      	movs	r3, #5
 8006440:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006442:	f107 0314 	add.w	r3, r7, #20
 8006446:	4619      	mov	r1, r3
 8006448:	4806      	ldr	r0, [pc, #24]	@ (8006464 <HAL_SPI_MspInit+0xcc>)
 800644a:	f002 f9e5 	bl	8008818 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800644e:	bf00      	nop
 8006450:	3728      	adds	r7, #40	@ 0x28
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40013000 	.word	0x40013000
 800645c:	40023800 	.word	0x40023800
 8006460:	40020400 	.word	0x40020400
 8006464:	40020000 	.word	0x40020000

08006468 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a4e      	ldr	r2, [pc, #312]	@ (80065b0 <HAL_TIM_PWM_MspInit+0x148>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10e      	bne.n	8006498 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	4b4d      	ldr	r3, [pc, #308]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006482:	4a4c      	ldr	r2, [pc, #304]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	6453      	str	r3, [r2, #68]	@ 0x44
 800648a:	4b4a      	ldr	r3, [pc, #296]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 800648c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006496:	e086      	b.n	80065a6 <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a46      	ldr	r2, [pc, #280]	@ (80065b8 <HAL_TIM_PWM_MspInit+0x150>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d16e      	bne.n	8006580 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80064a2:	2300      	movs	r3, #0
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	4b43      	ldr	r3, [pc, #268]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	4a42      	ldr	r2, [pc, #264]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 80064ac:	f043 0308 	orr.w	r3, r3, #8
 80064b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064b2:	4b40      	ldr	r3, [pc, #256]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80064be:	4b3f      	ldr	r3, [pc, #252]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064c0:	4a3f      	ldr	r2, [pc, #252]	@ (80065c0 <HAL_TIM_PWM_MspInit+0x158>)
 80064c2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80064c4:	4b3d      	ldr	r3, [pc, #244]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064c6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80064ca:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064cc:	4b3b      	ldr	r3, [pc, #236]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064d2:	4b3a      	ldr	r3, [pc, #232]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80064d8:	4b38      	ldr	r3, [pc, #224]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064de:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064e0:	4b36      	ldr	r3, [pc, #216]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064e6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064e8:	4b34      	ldr	r3, [pc, #208]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80064ee:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 80064f0:	4b32      	ldr	r3, [pc, #200]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80064f6:	4b31      	ldr	r3, [pc, #196]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064fc:	4b2f      	ldr	r3, [pc, #188]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 80064fe:	2200      	movs	r2, #0
 8006500:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8006502:	482e      	ldr	r0, [pc, #184]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 8006504:	f001 fd86 	bl	8008014 <HAL_DMA_Init>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 800650e:	f7fe fd8f 	bl	8005030 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a29      	ldr	r2, [pc, #164]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 8006516:	625a      	str	r2, [r3, #36]	@ 0x24
 8006518:	4a28      	ldr	r2, [pc, #160]	@ (80065bc <HAL_TIM_PWM_MspInit+0x154>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800651e:	4b29      	ldr	r3, [pc, #164]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006520:	4a29      	ldr	r2, [pc, #164]	@ (80065c8 <HAL_TIM_PWM_MspInit+0x160>)
 8006522:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8006524:	4b27      	ldr	r3, [pc, #156]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006526:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800652a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800652c:	4b25      	ldr	r3, [pc, #148]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 800652e:	2200      	movs	r2, #0
 8006530:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006532:	4b24      	ldr	r3, [pc, #144]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006534:	2200      	movs	r2, #0
 8006536:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006538:	4b22      	ldr	r3, [pc, #136]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 800653a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800653e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006540:	4b20      	ldr	r3, [pc, #128]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006542:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006546:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006548:	4b1e      	ldr	r3, [pc, #120]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 800654a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800654e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8006550:	4b1c      	ldr	r3, [pc, #112]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006552:	2200      	movs	r2, #0
 8006554:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006556:	4b1b      	ldr	r3, [pc, #108]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006558:	2200      	movs	r2, #0
 800655a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800655c:	4b19      	ldr	r3, [pc, #100]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 800655e:	2200      	movs	r2, #0
 8006560:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8006562:	4818      	ldr	r0, [pc, #96]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006564:	f001 fd56 	bl	8008014 <HAL_DMA_Init>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 800656e:	f7fe fd5f 	bl	8005030 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a13      	ldr	r2, [pc, #76]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006576:	629a      	str	r2, [r3, #40]	@ 0x28
 8006578:	4a12      	ldr	r2, [pc, #72]	@ (80065c4 <HAL_TIM_PWM_MspInit+0x15c>)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800657e:	e012      	b.n	80065a6 <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a11      	ldr	r2, [pc, #68]	@ (80065cc <HAL_TIM_PWM_MspInit+0x164>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d10d      	bne.n	80065a6 <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006592:	4a08      	ldr	r2, [pc, #32]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	6453      	str	r3, [r2, #68]	@ 0x44
 800659a:	4b06      	ldr	r3, [pc, #24]	@ (80065b4 <HAL_TIM_PWM_MspInit+0x14c>)
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
}
 80065a6:	bf00      	nop
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40010000 	.word	0x40010000
 80065b4:	40023800 	.word	0x40023800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	20000ba0 	.word	0x20000ba0
 80065c0:	40026040 	.word	0x40026040
 80065c4:	20000c00 	.word	0x20000c00
 80065c8:	40026070 	.word	0x40026070
 80065cc:	40010400 	.word	0x40010400

080065d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006690 <HAL_TIM_Base_MspInit+0xc0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d13e      	bne.n	8006660 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <HAL_TIM_Base_MspInit+0xc4>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006694 <HAL_TIM_Base_MspInit+0xc4>)
 80065ec:	f043 0304 	orr.w	r3, r3, #4
 80065f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065f2:	4b28      	ldr	r3, [pc, #160]	@ (8006694 <HAL_TIM_Base_MspInit+0xc4>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80065fe:	4b26      	ldr	r3, [pc, #152]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006600:	4a26      	ldr	r2, [pc, #152]	@ (800669c <HAL_TIM_Base_MspInit+0xcc>)
 8006602:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8006604:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006606:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800660a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800660c:	4b22      	ldr	r3, [pc, #136]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006612:	4b21      	ldr	r3, [pc, #132]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006614:	2200      	movs	r2, #0
 8006616:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8006618:	4b1f      	ldr	r3, [pc, #124]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 800661a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800661e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006620:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006626:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006628:	4b1b      	ldr	r3, [pc, #108]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 800662a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800662e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8006630:	4b19      	ldr	r3, [pc, #100]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006632:	2200      	movs	r2, #0
 8006634:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8006636:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006638:	2200      	movs	r2, #0
 800663a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800663c:	4b16      	ldr	r3, [pc, #88]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 800663e:	2200      	movs	r2, #0
 8006640:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8006642:	4815      	ldr	r0, [pc, #84]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006644:	f001 fce6 	bl	8008014 <HAL_DMA_Init>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800664e:	f7fe fcef 	bl	8005030 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a10      	ldr	r2, [pc, #64]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 8006656:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006658:	4a0f      	ldr	r2, [pc, #60]	@ (8006698 <HAL_TIM_Base_MspInit+0xc8>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800665e:	e012      	b.n	8006686 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <HAL_TIM_Base_MspInit+0xd0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d10d      	bne.n	8006686 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	4b09      	ldr	r3, [pc, #36]	@ (8006694 <HAL_TIM_Base_MspInit+0xc4>)
 8006670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006672:	4a08      	ldr	r2, [pc, #32]	@ (8006694 <HAL_TIM_Base_MspInit+0xc4>)
 8006674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006678:	6453      	str	r3, [r2, #68]	@ 0x44
 800667a:	4b06      	ldr	r3, [pc, #24]	@ (8006694 <HAL_TIM_Base_MspInit+0xc4>)
 800667c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40000800 	.word	0x40000800
 8006694:	40023800 	.word	0x40023800
 8006698:	20000b40 	.word	0x20000b40
 800669c:	400260b8 	.word	0x400260b8
 80066a0:	40014400 	.word	0x40014400

080066a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08e      	sub	sp, #56	@ 0x38
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	609a      	str	r2, [r3, #8]
 80066b8:	60da      	str	r2, [r3, #12]
 80066ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a6a      	ldr	r2, [pc, #424]	@ (800686c <HAL_TIM_MspPostInit+0x1c8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d11f      	bne.n	8006706 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80066c6:	2300      	movs	r3, #0
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	4b69      	ldr	r3, [pc, #420]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	4a68      	ldr	r2, [pc, #416]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80066d0:	f043 0310 	orr.w	r3, r3, #16
 80066d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80066d6:	4b66      	ldr	r3, [pc, #408]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	623b      	str	r3, [r7, #32]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80066e2:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80066e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e8:	2302      	movs	r3, #2
 80066ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f0:	2300      	movs	r3, #0
 80066f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80066f4:	2301      	movs	r3, #1
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066fc:	4619      	mov	r1, r3
 80066fe:	485d      	ldr	r0, [pc, #372]	@ (8006874 <HAL_TIM_MspPostInit+0x1d0>)
 8006700:	f002 f88a 	bl	8008818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8006704:	e0ae      	b.n	8006864 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a5b      	ldr	r2, [pc, #364]	@ (8006878 <HAL_TIM_MspPostInit+0x1d4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d11f      	bne.n	8006750 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	4b56      	ldr	r3, [pc, #344]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 8006716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006718:	4a55      	ldr	r2, [pc, #340]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 800671a:	f043 0308 	orr.w	r3, r3, #8
 800671e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006720:	4b53      	ldr	r3, [pc, #332]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800672c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006732:	2302      	movs	r3, #2
 8006734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006736:	2300      	movs	r3, #0
 8006738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800673a:	2300      	movs	r3, #0
 800673c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800673e:	2302      	movs	r3, #2
 8006740:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006746:	4619      	mov	r1, r3
 8006748:	484c      	ldr	r0, [pc, #304]	@ (800687c <HAL_TIM_MspPostInit+0x1d8>)
 800674a:	f002 f865 	bl	8008818 <HAL_GPIO_Init>
}
 800674e:	e089      	b.n	8006864 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a4a      	ldr	r2, [pc, #296]	@ (8006880 <HAL_TIM_MspPostInit+0x1dc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d11f      	bne.n	800679a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	4b44      	ldr	r3, [pc, #272]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006762:	4a43      	ldr	r2, [pc, #268]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 8006764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006768:	6313      	str	r3, [r2, #48]	@ 0x30
 800676a:	4b41      	ldr	r3, [pc, #260]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006772:	61bb      	str	r3, [r7, #24]
 8006774:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8006776:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800677a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677c:	2302      	movs	r3, #2
 800677e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006780:	2300      	movs	r3, #0
 8006782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006784:	2300      	movs	r3, #0
 8006786:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006788:	2302      	movs	r3, #2
 800678a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800678c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006790:	4619      	mov	r1, r3
 8006792:	483c      	ldr	r0, [pc, #240]	@ (8006884 <HAL_TIM_MspPostInit+0x1e0>)
 8006794:	f002 f840 	bl	8008818 <HAL_GPIO_Init>
}
 8006798:	e064      	b.n	8006864 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a3a      	ldr	r2, [pc, #232]	@ (8006888 <HAL_TIM_MspPostInit+0x1e4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d13c      	bne.n	800681e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	4b31      	ldr	r3, [pc, #196]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	4a30      	ldr	r2, [pc, #192]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80067ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80067b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80067b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c8:	4a29      	ldr	r2, [pc, #164]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80067ca:	f043 0304 	orr.w	r3, r3, #4
 80067ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80067d0:	4b27      	ldr	r3, [pc, #156]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80067dc:	23c0      	movs	r3, #192	@ 0xc0
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e0:	2302      	movs	r3, #2
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e8:	2300      	movs	r3, #0
 80067ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80067ec:	2303      	movs	r3, #3
 80067ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80067f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067f4:	4619      	mov	r1, r3
 80067f6:	4825      	ldr	r0, [pc, #148]	@ (800688c <HAL_TIM_MspPostInit+0x1e8>)
 80067f8:	f002 f80e 	bl	8008818 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80067fc:	2340      	movs	r3, #64	@ 0x40
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006800:	2302      	movs	r3, #2
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006804:	2300      	movs	r3, #0
 8006806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006808:	2300      	movs	r3, #0
 800680a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800680c:	2303      	movs	r3, #3
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006814:	4619      	mov	r1, r3
 8006816:	481e      	ldr	r0, [pc, #120]	@ (8006890 <HAL_TIM_MspPostInit+0x1ec>)
 8006818:	f001 fffe 	bl	8008818 <HAL_GPIO_Init>
}
 800681c:	e022      	b.n	8006864 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1c      	ldr	r2, [pc, #112]	@ (8006894 <HAL_TIM_MspPostInit+0x1f0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d11d      	bne.n	8006864 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	4b10      	ldr	r3, [pc, #64]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006830:	4a0f      	ldr	r2, [pc, #60]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 8006832:	f043 0320 	orr.w	r3, r3, #32
 8006836:	6313      	str	r3, [r2, #48]	@ 0x30
 8006838:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <HAL_TIM_MspPostInit+0x1cc>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006844:	2340      	movs	r3, #64	@ 0x40
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006848:	2302      	movs	r3, #2
 800684a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800684c:	2301      	movs	r3, #1
 800684e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006850:	2302      	movs	r3, #2
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006854:	2303      	movs	r3, #3
 8006856:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800685c:	4619      	mov	r1, r3
 800685e:	480e      	ldr	r0, [pc, #56]	@ (8006898 <HAL_TIM_MspPostInit+0x1f4>)
 8006860:	f001 ffda 	bl	8008818 <HAL_GPIO_Init>
}
 8006864:	bf00      	nop
 8006866:	3738      	adds	r7, #56	@ 0x38
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40010000 	.word	0x40010000
 8006870:	40023800 	.word	0x40023800
 8006874:	40021000 	.word	0x40021000
 8006878:	40000800 	.word	0x40000800
 800687c:	40020c00 	.word	0x40020c00
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40021c00 	.word	0x40021c00
 8006888:	40010400 	.word	0x40010400
 800688c:	40022000 	.word	0x40022000
 8006890:	40020800 	.word	0x40020800
 8006894:	40014400 	.word	0x40014400
 8006898:	40021400 	.word	0x40021400

0800689c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08e      	sub	sp, #56	@ 0x38
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	609a      	str	r2, [r3, #8]
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a90      	ldr	r2, [pc, #576]	@ (8006afc <HAL_UART_MspInit+0x260>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	f040 80b2 	bne.w	8006a24 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068c0:	2300      	movs	r3, #0
 80068c2:	623b      	str	r3, [r7, #32]
 80068c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 80068c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c8:	4a8d      	ldr	r2, [pc, #564]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 80068ca:	f043 0310 	orr.w	r3, r3, #16
 80068ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80068d0:	4b8b      	ldr	r3, [pc, #556]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 80068d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068dc:	2300      	movs	r3, #0
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	4b87      	ldr	r3, [pc, #540]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 80068e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e4:	4a86      	ldr	r2, [pc, #536]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 80068e6:	f043 0302 	orr.w	r3, r3, #2
 80068ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80068ec:	4b84      	ldr	r3, [pc, #528]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f8:	2300      	movs	r3, #0
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	4b80      	ldr	r3, [pc, #512]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	4a7f      	ldr	r2, [pc, #508]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 8006902:	f043 0301 	orr.w	r3, r3, #1
 8006906:	6313      	str	r3, [r2, #48]	@ 0x30
 8006908:	4b7d      	ldr	r3, [pc, #500]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 800690a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006914:	2380      	movs	r3, #128	@ 0x80
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006918:	2302      	movs	r3, #2
 800691a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691c:	2300      	movs	r3, #0
 800691e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006920:	2303      	movs	r3, #3
 8006922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006924:	2307      	movs	r3, #7
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800692c:	4619      	mov	r1, r3
 800692e:	4875      	ldr	r0, [pc, #468]	@ (8006b04 <HAL_UART_MspInit+0x268>)
 8006930:	f001 ff72 	bl	8008818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006934:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693a:	2302      	movs	r3, #2
 800693c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006942:	2303      	movs	r3, #3
 8006944:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006946:	2307      	movs	r3, #7
 8006948:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800694a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800694e:	4619      	mov	r1, r3
 8006950:	486d      	ldr	r0, [pc, #436]	@ (8006b08 <HAL_UART_MspInit+0x26c>)
 8006952:	f001 ff61 	bl	8008818 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006956:	4b6d      	ldr	r3, [pc, #436]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 8006958:	4a6d      	ldr	r2, [pc, #436]	@ (8006b10 <HAL_UART_MspInit+0x274>)
 800695a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800695c:	4b6b      	ldr	r3, [pc, #428]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 800695e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006962:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006964:	4b69      	ldr	r3, [pc, #420]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 8006966:	2240      	movs	r2, #64	@ 0x40
 8006968:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800696a:	4b68      	ldr	r3, [pc, #416]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 800696c:	2200      	movs	r2, #0
 800696e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006970:	4b66      	ldr	r3, [pc, #408]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 8006972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006976:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006978:	4b64      	ldr	r3, [pc, #400]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 800697a:	2200      	movs	r2, #0
 800697c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800697e:	4b63      	ldr	r3, [pc, #396]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 8006980:	2200      	movs	r2, #0
 8006982:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006984:	4b61      	ldr	r3, [pc, #388]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 8006986:	2200      	movs	r2, #0
 8006988:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800698a:	4b60      	ldr	r3, [pc, #384]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 800698c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006990:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006992:	4b5e      	ldr	r3, [pc, #376]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 8006994:	2200      	movs	r2, #0
 8006996:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006998:	485c      	ldr	r0, [pc, #368]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 800699a:	f001 fb3b 	bl	8008014 <HAL_DMA_Init>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80069a4:	f7fe fb44 	bl	8005030 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a58      	ldr	r2, [pc, #352]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 80069ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80069ae:	4a57      	ldr	r2, [pc, #348]	@ (8006b0c <HAL_UART_MspInit+0x270>)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80069b4:	4b57      	ldr	r3, [pc, #348]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069b6:	4a58      	ldr	r2, [pc, #352]	@ (8006b18 <HAL_UART_MspInit+0x27c>)
 80069b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80069ba:	4b56      	ldr	r3, [pc, #344]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80069c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069c2:	4b54      	ldr	r3, [pc, #336]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069c8:	4b52      	ldr	r3, [pc, #328]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069ce:	4b51      	ldr	r3, [pc, #324]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80069d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069d8:	2200      	movs	r2, #0
 80069da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069de:	2200      	movs	r2, #0
 80069e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80069e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80069ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069f0:	4b48      	ldr	r3, [pc, #288]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80069f6:	4847      	ldr	r0, [pc, #284]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 80069f8:	f001 fb0c 	bl	8008014 <HAL_DMA_Init>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8006a02:	f7fe fb15 	bl	8005030 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a42      	ldr	r2, [pc, #264]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 8006a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a0c:	4a41      	ldr	r2, [pc, #260]	@ (8006b14 <HAL_UART_MspInit+0x278>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006a12:	2200      	movs	r2, #0
 8006a14:	2105      	movs	r1, #5
 8006a16:	2025      	movs	r0, #37	@ 0x25
 8006a18:	f001 fac5 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006a1c:	2025      	movs	r0, #37	@ 0x25
 8006a1e:	f001 fade 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006a22:	e11c      	b.n	8006c5e <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a3c      	ldr	r2, [pc, #240]	@ (8006b1c <HAL_UART_MspInit+0x280>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d17e      	bne.n	8006b2c <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	4b33      	ldr	r3, [pc, #204]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 8006a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a36:	4a32      	ldr	r2, [pc, #200]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 8006a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a3e:	4b30      	ldr	r3, [pc, #192]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a52:	4a2b      	ldr	r2, [pc, #172]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 8006a54:	f043 0304 	orr.w	r3, r3, #4
 8006a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a5a:	4b29      	ldr	r3, [pc, #164]	@ (8006b00 <HAL_UART_MspInit+0x264>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8006a66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a74:	2303      	movs	r3, #3
 8006a76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a78:	2307      	movs	r3, #7
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a80:	4619      	mov	r1, r3
 8006a82:	4827      	ldr	r0, [pc, #156]	@ (8006b20 <HAL_UART_MspInit+0x284>)
 8006a84:	f001 fec8 	bl	8008818 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006a88:	4b26      	ldr	r3, [pc, #152]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006a8a:	4a27      	ldr	r2, [pc, #156]	@ (8006b28 <HAL_UART_MspInit+0x28c>)
 8006a8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006a8e:	4b25      	ldr	r3, [pc, #148]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006a90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006a94:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a96:	4b23      	ldr	r3, [pc, #140]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a9c:	4b21      	ldr	r3, [pc, #132]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006aa2:	4b20      	ldr	r3, [pc, #128]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006aa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006aa8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006abc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006abe:	4b19      	ldr	r3, [pc, #100]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006ac0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006ac4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ac6:	4b17      	ldr	r3, [pc, #92]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006acc:	4815      	ldr	r0, [pc, #84]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006ace:	f001 faa1 	bl	8008014 <HAL_DMA_Init>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <HAL_UART_MspInit+0x240>
      Error_Handler();
 8006ad8:	f7fe faaa 	bl	8005030 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a11      	ldr	r2, [pc, #68]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ae2:	4a10      	ldr	r2, [pc, #64]	@ (8006b24 <HAL_UART_MspInit+0x288>)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2105      	movs	r1, #5
 8006aec:	2027      	movs	r0, #39	@ 0x27
 8006aee:	f001 fa5a 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006af2:	2027      	movs	r0, #39	@ 0x27
 8006af4:	f001 fa73 	bl	8007fde <HAL_NVIC_EnableIRQ>
}
 8006af8:	e0b1      	b.n	8006c5e <HAL_UART_MspInit+0x3c2>
 8006afa:	bf00      	nop
 8006afc:	40011000 	.word	0x40011000
 8006b00:	40023800 	.word	0x40023800
 8006b04:	40020400 	.word	0x40020400
 8006b08:	40020000 	.word	0x40020000
 8006b0c:	20000d38 	.word	0x20000d38
 8006b10:	400264b8 	.word	0x400264b8
 8006b14:	20000d98 	.word	0x20000d98
 8006b18:	40026440 	.word	0x40026440
 8006b1c:	40004800 	.word	0x40004800
 8006b20:	40020800 	.word	0x40020800
 8006b24:	20000df8 	.word	0x20000df8
 8006b28:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a4d      	ldr	r2, [pc, #308]	@ (8006c68 <HAL_UART_MspInit+0x3cc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	f040 8093 	bne.w	8006c5e <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c6c <HAL_UART_MspInit+0x3d0>)
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b40:	4a4a      	ldr	r2, [pc, #296]	@ (8006c6c <HAL_UART_MspInit+0x3d0>)
 8006b42:	f043 0320 	orr.w	r3, r3, #32
 8006b46:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b48:	4b48      	ldr	r3, [pc, #288]	@ (8006c6c <HAL_UART_MspInit+0x3d0>)
 8006b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b54:	2300      	movs	r3, #0
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	4b44      	ldr	r3, [pc, #272]	@ (8006c6c <HAL_UART_MspInit+0x3d0>)
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	4a43      	ldr	r2, [pc, #268]	@ (8006c6c <HAL_UART_MspInit+0x3d0>)
 8006b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b64:	4b41      	ldr	r3, [pc, #260]	@ (8006c6c <HAL_UART_MspInit+0x3d0>)
 8006b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8006b70:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b76:	2302      	movs	r3, #2
 8006b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006b82:	2308      	movs	r3, #8
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4838      	ldr	r0, [pc, #224]	@ (8006c70 <HAL_UART_MspInit+0x3d4>)
 8006b8e:	f001 fe43 	bl	8008818 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006b92:	4b38      	ldr	r3, [pc, #224]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006b94:	4a38      	ldr	r2, [pc, #224]	@ (8006c78 <HAL_UART_MspInit+0x3dc>)
 8006b96:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006b98:	4b36      	ldr	r3, [pc, #216]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006b9a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006b9e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ba0:	4b34      	ldr	r3, [pc, #208]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ba6:	4b33      	ldr	r3, [pc, #204]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006bac:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006bb2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bb4:	4b2f      	ldr	r3, [pc, #188]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bba:	4b2e      	ldr	r3, [pc, #184]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bc8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006bcc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bce:	4b29      	ldr	r3, [pc, #164]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006bd4:	4827      	ldr	r0, [pc, #156]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bd6:	f001 fa1d 	bl	8008014 <HAL_DMA_Init>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8006be0:	f7fe fa26 	bl	8005030 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a23      	ldr	r2, [pc, #140]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006be8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006bea:	4a22      	ldr	r2, [pc, #136]	@ (8006c74 <HAL_UART_MspInit+0x3d8>)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006bf0:	4b22      	ldr	r3, [pc, #136]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006bf2:	4a23      	ldr	r2, [pc, #140]	@ (8006c80 <HAL_UART_MspInit+0x3e4>)
 8006bf4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006bf6:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006bf8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006bfc:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c00:	2240      	movs	r2, #64	@ 0x40
 8006c02:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c04:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c10:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c12:	4b1a      	ldr	r3, [pc, #104]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c18:	4b18      	ldr	r3, [pc, #96]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006c1e:	4b17      	ldr	r3, [pc, #92]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006c24:	4b15      	ldr	r3, [pc, #84]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c26:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006c2a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c2c:	4b13      	ldr	r3, [pc, #76]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006c32:	4812      	ldr	r0, [pc, #72]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c34:	f001 f9ee 	bl	8008014 <HAL_DMA_Init>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8006c3e:	f7fe f9f7 	bl	8005030 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a0d      	ldr	r2, [pc, #52]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c46:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c48:	4a0c      	ldr	r2, [pc, #48]	@ (8006c7c <HAL_UART_MspInit+0x3e0>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2105      	movs	r1, #5
 8006c52:	2047      	movs	r0, #71	@ 0x47
 8006c54:	f001 f9a7 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006c58:	2047      	movs	r0, #71	@ 0x47
 8006c5a:	f001 f9c0 	bl	8007fde <HAL_NVIC_EnableIRQ>
}
 8006c5e:	bf00      	nop
 8006c60:	3738      	adds	r7, #56	@ 0x38
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	40011400 	.word	0x40011400
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	40021800 	.word	0x40021800
 8006c74:	20000e58 	.word	0x20000e58
 8006c78:	40026428 	.word	0x40026428
 8006c7c:	20000eb8 	.word	0x20000eb8
 8006c80:	400264a0 	.word	0x400264a0

08006c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006c88:	f003 fc1c 	bl	800a4c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c8c:	bf00      	nop
 8006c8e:	e7fd      	b.n	8006c8c <NMI_Handler+0x8>

08006c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <HardFault_Handler+0x4>

08006c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c9c:	bf00      	nop
 8006c9e:	e7fd      	b.n	8006c9c <MemManage_Handler+0x4>

08006ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <BusFault_Handler+0x4>

08006ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <UsageFault_Handler+0x4>

08006cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006cb4:	bf00      	nop
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006cc2:	f000 f9e9 	bl	8007098 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006cc6:	f007 ff51 	bl	800eb6c <xTaskGetSchedulerState>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d001      	beq.n	8006cd4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006cd0:	f008 fe2a 	bl	800f928 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cd4:	bf00      	nop
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006cdc:	2008      	movs	r0, #8
 8006cde:	f001 ff51 	bl	8008b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8006ce2:	4802      	ldr	r0, [pc, #8]	@ (8006cec <EXTI3_IRQHandler+0x14>)
 8006ce4:	f7fc fd54 	bl	8003790 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8006ce8:	bf00      	nop
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	200008d0 	.word	0x200008d0

08006cf0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8006cf4:	2010      	movs	r0, #16
 8006cf6:	f001 ff45 	bl	8008b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006cfa:	bf00      	nop
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006d04:	4802      	ldr	r0, [pc, #8]	@ (8006d10 <DMA1_Stream1_IRQHandler+0x10>)
 8006d06:	f001 fb1d 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000df8 	.word	0x20000df8

08006d14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8006d18:	4802      	ldr	r0, [pc, #8]	@ (8006d24 <DMA1_Stream2_IRQHandler+0x10>)
 8006d1a:	f001 fb13 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006d1e:	bf00      	nop
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000ba0 	.word	0x20000ba0

08006d28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8006d2c:	4802      	ldr	r0, [pc, #8]	@ (8006d38 <DMA1_Stream4_IRQHandler+0x10>)
 8006d2e:	f001 fb09 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006d32:	bf00      	nop
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000c00 	.word	0x20000c00

08006d3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006d40:	4802      	ldr	r0, [pc, #8]	@ (8006d4c <CAN1_RX0_IRQHandler+0x10>)
 8006d42:	f000 fe25 	bl	8007990 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006d46:	bf00      	nop
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200008dc 	.word	0x200008dc

08006d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006d54:	4802      	ldr	r0, [pc, #8]	@ (8006d60 <USART1_IRQHandler+0x10>)
 8006d56:	f004 ffb7 	bl	800bcc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006d5a:	bf00      	nop
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000c60 	.word	0x20000c60

08006d64 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8006d68:	4802      	ldr	r0, [pc, #8]	@ (8006d74 <DMA1_Stream7_IRQHandler+0x10>)
 8006d6a:	f001 faeb 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000b40 	.word	0x20000b40

08006d78 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006d7c:	4802      	ldr	r0, [pc, #8]	@ (8006d88 <DMA2_Stream1_IRQHandler+0x10>)
 8006d7e:	f001 fae1 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006d82:	bf00      	nop
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000e58 	.word	0x20000e58

08006d8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006d90:	4802      	ldr	r0, [pc, #8]	@ (8006d9c <DMA2_Stream2_IRQHandler+0x10>)
 8006d92:	f001 fad7 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006d96:	bf00      	nop
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000d98 	.word	0x20000d98

08006da0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006da4:	4802      	ldr	r0, [pc, #8]	@ (8006db0 <CAN2_RX0_IRQHandler+0x10>)
 8006da6:	f000 fdf3 	bl	8007990 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8006daa:	bf00      	nop
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000904 	.word	0x20000904

08006db4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006db8:	4802      	ldr	r0, [pc, #8]	@ (8006dc4 <DMA2_Stream6_IRQHandler+0x10>)
 8006dba:	f001 fac3 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006dbe:	bf00      	nop
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000eb8 	.word	0x20000eb8

08006dc8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006dcc:	4802      	ldr	r0, [pc, #8]	@ (8006dd8 <DMA2_Stream7_IRQHandler+0x10>)
 8006dce:	f001 fab9 	bl	8008344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006dd2:	bf00      	nop
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000d38 	.word	0x20000d38

08006ddc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006de0:	4802      	ldr	r0, [pc, #8]	@ (8006dec <USART6_IRQHandler+0x10>)
 8006de2:	f004 ff71 	bl	800bcc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006de6:	bf00      	nop
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000cf0 	.word	0x20000cf0

08006df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  return 1;
 8006df4:	2301      	movs	r3, #1
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <_kill>:

int _kill(int pid, int sig)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e0a:	f009 fda9 	bl	8010960 <__errno>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2216      	movs	r2, #22
 8006e12:	601a      	str	r2, [r3, #0]
  return -1;
 8006e14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <_exit>:

void _exit (int status)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ffe7 	bl	8006e00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e32:	bf00      	nop
 8006e34:	e7fd      	b.n	8006e32 <_exit+0x12>

08006e36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e00a      	b.n	8006e5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e48:	f3af 8000 	nop.w
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	60ba      	str	r2, [r7, #8]
 8006e54:	b2ca      	uxtb	r2, r1
 8006e56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	dbf0      	blt.n	8006e48 <_read+0x12>
  }

  return len;
 8006e66:	687b      	ldr	r3, [r7, #4]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e009      	b.n	8006e96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	60ba      	str	r2, [r7, #8]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	3301      	adds	r3, #1
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	dbf1      	blt.n	8006e82 <_write+0x12>
  }
  return len;
 8006e9e:	687b      	ldr	r3, [r7, #4]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <_close>:

int _close(int file)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ed0:	605a      	str	r2, [r3, #4]
  return 0;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <_isatty>:

int _isatty(int file)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006ee8:	2301      	movs	r3, #1
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f18:	4a14      	ldr	r2, [pc, #80]	@ (8006f6c <_sbrk+0x5c>)
 8006f1a:	4b15      	ldr	r3, [pc, #84]	@ (8006f70 <_sbrk+0x60>)
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f24:	4b13      	ldr	r3, [pc, #76]	@ (8006f74 <_sbrk+0x64>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f2c:	4b11      	ldr	r3, [pc, #68]	@ (8006f74 <_sbrk+0x64>)
 8006f2e:	4a12      	ldr	r2, [pc, #72]	@ (8006f78 <_sbrk+0x68>)
 8006f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f32:	4b10      	ldr	r3, [pc, #64]	@ (8006f74 <_sbrk+0x64>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d207      	bcs.n	8006f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f40:	f009 fd0e 	bl	8010960 <__errno>
 8006f44:	4603      	mov	r3, r0
 8006f46:	220c      	movs	r2, #12
 8006f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f4e:	e009      	b.n	8006f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f50:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <_sbrk+0x64>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f56:	4b07      	ldr	r3, [pc, #28]	@ (8006f74 <_sbrk+0x64>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	4a05      	ldr	r2, [pc, #20]	@ (8006f74 <_sbrk+0x64>)
 8006f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f62:	68fb      	ldr	r3, [r7, #12]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20020000 	.word	0x20020000
 8006f70:	00000400 	.word	0x00000400
 8006f74:	2000100c 	.word	0x2000100c
 8006f78:	20005b48 	.word	0x20005b48

08006f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f80:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <SystemInit+0x20>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f86:	4a05      	ldr	r2, [pc, #20]	@ (8006f9c <SystemInit+0x20>)
 8006f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f90:	bf00      	nop
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	e000ed00 	.word	0xe000ed00

08006fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006fa4:	480d      	ldr	r0, [pc, #52]	@ (8006fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006fa6:	490e      	ldr	r1, [pc, #56]	@ (8006fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8006fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fac:	e002      	b.n	8006fb4 <LoopCopyDataInit>

08006fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fb2:	3304      	adds	r3, #4

08006fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fb8:	d3f9      	bcc.n	8006fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fba:	4a0b      	ldr	r2, [pc, #44]	@ (8006fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006fbc:	4c0b      	ldr	r4, [pc, #44]	@ (8006fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8006fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fc0:	e001      	b.n	8006fc6 <LoopFillZerobss>

08006fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fc4:	3204      	adds	r2, #4

08006fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fc8:	d3fb      	bcc.n	8006fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006fca:	f7ff ffd7 	bl	8006f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006fce:	f009 fccd 	bl	801096c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fd2:	f7fc fcfd 	bl	80039d0 <main>
  bx  lr    
 8006fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fe0:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8006fe4:	08014460 	.word	0x08014460
  ldr r2, =_sbss
 8006fe8:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 8006fec:	20005b48 	.word	0x20005b48

08006ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ff0:	e7fe      	b.n	8006ff0 <ADC_IRQHandler>
	...

08006ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <HAL_Init+0x40>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8007034 <HAL_Init+0x40>)
 8006ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007004:	4b0b      	ldr	r3, [pc, #44]	@ (8007034 <HAL_Init+0x40>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a0a      	ldr	r2, [pc, #40]	@ (8007034 <HAL_Init+0x40>)
 800700a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800700e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007010:	4b08      	ldr	r3, [pc, #32]	@ (8007034 <HAL_Init+0x40>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a07      	ldr	r2, [pc, #28]	@ (8007034 <HAL_Init+0x40>)
 8007016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800701a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800701c:	2003      	movs	r0, #3
 800701e:	f000 ffb7 	bl	8007f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007022:	200f      	movs	r0, #15
 8007024:	f000 f808 	bl	8007038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007028:	f7ff f870 	bl	800610c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40023c00 	.word	0x40023c00

08007038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007040:	4b12      	ldr	r3, [pc, #72]	@ (800708c <HAL_InitTick+0x54>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b12      	ldr	r3, [pc, #72]	@ (8007090 <HAL_InitTick+0x58>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	4619      	mov	r1, r3
 800704a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800704e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007052:	fbb2 f3f3 	udiv	r3, r2, r3
 8007056:	4618      	mov	r0, r3
 8007058:	f000 ffcf 	bl	8007ffa <HAL_SYSTICK_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e00e      	b.n	8007084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b0f      	cmp	r3, #15
 800706a:	d80a      	bhi.n	8007082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800706c:	2200      	movs	r2, #0
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007074:	f000 ff97 	bl	8007fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007078:	4a06      	ldr	r2, [pc, #24]	@ (8007094 <HAL_InitTick+0x5c>)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	200000a4 	.word	0x200000a4
 8007090:	200000ac 	.word	0x200000ac
 8007094:	200000a8 	.word	0x200000a8

08007098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <HAL_IncTick+0x20>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <HAL_IncTick+0x24>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4413      	add	r3, r2
 80070a8:	4a04      	ldr	r2, [pc, #16]	@ (80070bc <HAL_IncTick+0x24>)
 80070aa:	6013      	str	r3, [r2, #0]
}
 80070ac:	bf00      	nop
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	200000ac 	.word	0x200000ac
 80070bc:	20001010 	.word	0x20001010

080070c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  return uwTick;
 80070c4:	4b03      	ldr	r3, [pc, #12]	@ (80070d4 <HAL_GetTick+0x14>)
 80070c6:	681b      	ldr	r3, [r3, #0]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20001010 	.word	0x20001010

080070d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070e0:	f7ff ffee 	bl	80070c0 <HAL_GetTick>
 80070e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070f0:	d005      	beq.n	80070fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070f2:	4b0a      	ldr	r3, [pc, #40]	@ (800711c <HAL_Delay+0x44>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070fe:	bf00      	nop
 8007100:	f7ff ffde 	bl	80070c0 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	429a      	cmp	r2, r3
 800710e:	d8f7      	bhi.n	8007100 <HAL_Delay+0x28>
  {
  }
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	200000ac 	.word	0x200000ac

08007120 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e0ed      	b.n	800730e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff f810 	bl	8006164 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007154:	f7ff ffb4 	bl	80070c0 <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800715a:	e012      	b.n	8007182 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800715c:	f7ff ffb0 	bl	80070c0 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b0a      	cmp	r3, #10
 8007168:	d90b      	bls.n	8007182 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2205      	movs	r2, #5
 800717a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e0c5      	b.n	800730e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0e5      	beq.n	800715c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0202 	bic.w	r2, r2, #2
 800719e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071a0:	f7ff ff8e 	bl	80070c0 <HAL_GetTick>
 80071a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80071a6:	e012      	b.n	80071ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071a8:	f7ff ff8a 	bl	80070c0 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b0a      	cmp	r3, #10
 80071b4:	d90b      	bls.n	80071ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2205      	movs	r2, #5
 80071c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e09f      	b.n	800730e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7e1b      	ldrb	r3, [r3, #24]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d108      	bne.n	80071f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e007      	b.n	8007206 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007204:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7e5b      	ldrb	r3, [r3, #25]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d108      	bne.n	8007220 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e007      	b.n	8007230 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800722e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	7e9b      	ldrb	r3, [r3, #26]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d108      	bne.n	800724a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0220 	orr.w	r2, r2, #32
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e007      	b.n	800725a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0220 	bic.w	r2, r2, #32
 8007258:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7edb      	ldrb	r3, [r3, #27]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d108      	bne.n	8007274 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0210 	bic.w	r2, r2, #16
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e007      	b.n	8007284 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0210 	orr.w	r2, r2, #16
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7f1b      	ldrb	r3, [r3, #28]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d108      	bne.n	800729e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0208 	orr.w	r2, r2, #8
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e007      	b.n	80072ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0208 	bic.w	r2, r2, #8
 80072ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7f5b      	ldrb	r3, [r3, #29]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d108      	bne.n	80072c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0204 	orr.w	r2, r2, #4
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e007      	b.n	80072d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0204 	bic.w	r2, r2, #4
 80072d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	ea42 0103 	orr.w	r1, r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	1e5a      	subs	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800732e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007330:	7cfb      	ldrb	r3, [r7, #19]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d003      	beq.n	800733e <HAL_CAN_ConfigFilter+0x26>
 8007336:	7cfb      	ldrb	r3, [r7, #19]
 8007338:	2b02      	cmp	r3, #2
 800733a:	f040 80be 	bne.w	80074ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800733e:	4b65      	ldr	r3, [pc, #404]	@ (80074d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007340:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007348:	f043 0201 	orr.w	r2, r3, #1
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007358:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	431a      	orrs	r2, r3
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	2201      	movs	r2, #1
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	43db      	mvns	r3, r3
 8007390:	401a      	ands	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d123      	bne.n	80073e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	43db      	mvns	r3, r3
 80073aa:	401a      	ands	r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80073c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3248      	adds	r2, #72	@ 0x48
 80073c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80073dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80073de:	6979      	ldr	r1, [r7, #20]
 80073e0:	3348      	adds	r3, #72	@ 0x48
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	440b      	add	r3, r1
 80073e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d122      	bne.n	8007436 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007410:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	3248      	adds	r2, #72	@ 0x48
 8007416:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800742a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800742c:	6979      	ldr	r1, [r7, #20]
 800742e:	3348      	adds	r3, #72	@ 0x48
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	440b      	add	r3, r1
 8007434:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	43db      	mvns	r3, r3
 8007448:	401a      	ands	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8007450:	e007      	b.n	8007462 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	431a      	orrs	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	43db      	mvns	r3, r3
 8007474:	401a      	ands	r2, r3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800747c:	e007      	b.n	800748e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	431a      	orrs	r2, r3
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d107      	bne.n	80074a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	431a      	orrs	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074ac:	f023 0201 	bic.w	r2, r3, #1
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e006      	b.n	80074c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
  }
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	40006400 	.word	0x40006400

080074d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d12e      	bne.n	800754a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007504:	f7ff fddc 	bl	80070c0 <HAL_GetTick>
 8007508:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800750a:	e012      	b.n	8007532 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800750c:	f7ff fdd8 	bl	80070c0 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b0a      	cmp	r3, #10
 8007518:	d90b      	bls.n	8007532 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2205      	movs	r2, #5
 800752a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e012      	b.n	8007558 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e5      	bne.n	800750c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	e006      	b.n	8007558 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007560:	b480      	push	{r7}
 8007562:	b089      	sub	sp, #36	@ 0x24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007574:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800757e:	7ffb      	ldrb	r3, [r7, #31]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d003      	beq.n	800758c <HAL_CAN_AddTxMessage+0x2c>
 8007584:	7ffb      	ldrb	r3, [r7, #31]
 8007586:	2b02      	cmp	r3, #2
 8007588:	f040 80ad 	bne.w	80076e6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8095 	beq.w	80076d6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	0e1b      	lsrs	r3, r3, #24
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80075b6:	2201      	movs	r2, #1
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	409a      	lsls	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10d      	bne.n	80075e4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80075d2:	68f9      	ldr	r1, [r7, #12]
 80075d4:	6809      	ldr	r1, [r1, #0]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	3318      	adds	r3, #24
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	440b      	add	r3, r1
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	e00f      	b.n	8007604 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075f4:	68f9      	ldr	r1, [r7, #12]
 80075f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80075f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	3318      	adds	r3, #24
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	440b      	add	r3, r1
 8007602:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6819      	ldr	r1, [r3, #0]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	3318      	adds	r3, #24
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	440b      	add	r3, r1
 8007614:	3304      	adds	r3, #4
 8007616:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	7d1b      	ldrb	r3, [r3, #20]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d111      	bne.n	8007644 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	3318      	adds	r3, #24
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4413      	add	r3, r2
 800762c:	3304      	adds	r3, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	6811      	ldr	r1, [r2, #0]
 8007634:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	3318      	adds	r3, #24
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	440b      	add	r3, r1
 8007640:	3304      	adds	r3, #4
 8007642:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3307      	adds	r3, #7
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	061a      	lsls	r2, r3, #24
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3306      	adds	r3, #6
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3305      	adds	r3, #5
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	4313      	orrs	r3, r2
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	3204      	adds	r2, #4
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	4610      	mov	r0, r2
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	6811      	ldr	r1, [r2, #0]
 800766c:	ea43 0200 	orr.w	r2, r3, r0
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	440b      	add	r3, r1
 8007676:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800767a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3303      	adds	r3, #3
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	061a      	lsls	r2, r3, #24
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3302      	adds	r3, #2
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	041b      	lsls	r3, r3, #16
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3301      	adds	r3, #1
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	4313      	orrs	r3, r2
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7812      	ldrb	r2, [r2, #0]
 800769c:	4610      	mov	r0, r2
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	6811      	ldr	r1, [r2, #0]
 80076a2:	ea43 0200 	orr.w	r2, r3, r0
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	440b      	add	r3, r1
 80076ac:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80076b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	3318      	adds	r3, #24
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	4413      	add	r3, r2
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	6811      	ldr	r1, [r2, #0]
 80076c4:	f043 0201 	orr.w	r2, r3, #1
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3318      	adds	r3, #24
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	440b      	add	r3, r1
 80076d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e00e      	b.n	80076f4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e006      	b.n	80076f4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3724      	adds	r7, #36	@ 0x24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007714:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d003      	beq.n	8007724 <HAL_CAN_GetRxMessage+0x24>
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	2b02      	cmp	r3, #2
 8007720:	f040 8103 	bne.w	800792a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10e      	bne.n	8007748 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d116      	bne.n	8007766 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0f7      	b.n	8007938 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d107      	bne.n	8007766 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e0e8      	b.n	8007938 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	331b      	adds	r3, #27
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	4413      	add	r3, r2
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0204 	and.w	r2, r3, #4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10c      	bne.n	800779e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	331b      	adds	r3, #27
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	4413      	add	r3, r2
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	0d5b      	lsrs	r3, r3, #21
 8007794:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e00b      	b.n	80077b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	331b      	adds	r3, #27
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	4413      	add	r3, r2
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	08db      	lsrs	r3, r3, #3
 80077ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	331b      	adds	r3, #27
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	4413      	add	r3, r2
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0202 	and.w	r2, r3, #2
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	331b      	adds	r3, #27
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	4413      	add	r3, r2
 80077d8:	3304      	adds	r3, #4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2208      	movs	r2, #8
 80077e8:	611a      	str	r2, [r3, #16]
 80077ea:	e00b      	b.n	8007804 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	331b      	adds	r3, #27
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	4413      	add	r3, r2
 80077f8:	3304      	adds	r3, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	331b      	adds	r3, #27
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	4413      	add	r3, r2
 8007810:	3304      	adds	r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	0a1b      	lsrs	r3, r3, #8
 8007816:	b2da      	uxtb	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	331b      	adds	r3, #27
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	4413      	add	r3, r2
 8007828:	3304      	adds	r3, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	0c1b      	lsrs	r3, r3, #16
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	4413      	add	r3, r2
 800783e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	b2da      	uxtb	r2, r3
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	4413      	add	r3, r2
 8007854:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	0a1a      	lsrs	r2, r3, #8
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	4413      	add	r3, r2
 800786e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	0c1a      	lsrs	r2, r3, #16
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	3302      	adds	r3, #2
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	4413      	add	r3, r2
 8007888:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	0e1a      	lsrs	r2, r3, #24
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	3303      	adds	r3, #3
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3304      	adds	r3, #4
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	0a1a      	lsrs	r2, r3, #8
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	3305      	adds	r3, #5
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	0c1a      	lsrs	r2, r3, #16
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	3306      	adds	r3, #6
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	0e1a      	lsrs	r2, r3, #24
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3307      	adds	r3, #7
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d108      	bne.n	8007916 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0220 	orr.w	r2, r2, #32
 8007912:	60da      	str	r2, [r3, #12]
 8007914:	e007      	b.n	8007926 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0220 	orr.w	r2, r2, #32
 8007924:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e006      	b.n	8007938 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007954:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d002      	beq.n	8007962 <HAL_CAN_ActivateNotification+0x1e>
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d109      	bne.n	8007976 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6959      	ldr	r1, [r3, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	e006      	b.n	8007984 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
  }
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	@ 0x28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d07c      	beq.n	8007ad0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d023      	beq.n	8007a28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f983 	bl	8007cfe <HAL_CAN_TxMailbox0CompleteCallback>
 80079f8:	e016      	b.n	8007a28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0c:	e00c      	b.n	8007a28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a20:	e002      	b.n	8007a28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f989 	bl	8007d3a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d024      	beq.n	8007a7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f963 	bl	8007d12 <HAL_CAN_TxMailbox1CompleteCallback>
 8007a4c:	e016      	b.n	8007a7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a60:	e00c      	b.n	8007a7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a74:	e002      	b.n	8007a7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f969 	bl	8007d4e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d024      	beq.n	8007ad0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007a8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f943 	bl	8007d26 <HAL_CAN_TxMailbox2CompleteCallback>
 8007aa0:	e016      	b.n	8007ad0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ab4:	e00c      	b.n	8007ad0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ac8:	e002      	b.n	8007ad0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f949 	bl	8007d62 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00c      	beq.n	8007af4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2210      	movs	r2, #16
 8007af2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f930 	bl	8007d76 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d009      	beq.n	8007b34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7f9 fe8e 	bl	8001850 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00c      	beq.n	8007b58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2210      	movs	r2, #16
 8007b56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d006      	beq.n	8007b7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2208      	movs	r2, #8
 8007b72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f912 	bl	8007d9e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	f003 0310 	and.w	r3, r3, #16
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8f9 	bl	8007d8a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2210      	movs	r2, #16
 8007bb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8fc 	bl	8007db2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d006      	beq.n	8007bdc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8f5 	bl	8007dc6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d07b      	beq.n	8007cde <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d072      	beq.n	8007cd6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	f043 0302 	orr.w	r3, r3, #2
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	f043 0304 	orr.w	r3, r3, #4
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d043      	beq.n	8007cd6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d03e      	beq.n	8007cd6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c5e:	2b60      	cmp	r3, #96	@ 0x60
 8007c60:	d02b      	beq.n	8007cba <HAL_CAN_IRQHandler+0x32a>
 8007c62:	2b60      	cmp	r3, #96	@ 0x60
 8007c64:	d82e      	bhi.n	8007cc4 <HAL_CAN_IRQHandler+0x334>
 8007c66:	2b50      	cmp	r3, #80	@ 0x50
 8007c68:	d022      	beq.n	8007cb0 <HAL_CAN_IRQHandler+0x320>
 8007c6a:	2b50      	cmp	r3, #80	@ 0x50
 8007c6c:	d82a      	bhi.n	8007cc4 <HAL_CAN_IRQHandler+0x334>
 8007c6e:	2b40      	cmp	r3, #64	@ 0x40
 8007c70:	d019      	beq.n	8007ca6 <HAL_CAN_IRQHandler+0x316>
 8007c72:	2b40      	cmp	r3, #64	@ 0x40
 8007c74:	d826      	bhi.n	8007cc4 <HAL_CAN_IRQHandler+0x334>
 8007c76:	2b30      	cmp	r3, #48	@ 0x30
 8007c78:	d010      	beq.n	8007c9c <HAL_CAN_IRQHandler+0x30c>
 8007c7a:	2b30      	cmp	r3, #48	@ 0x30
 8007c7c:	d822      	bhi.n	8007cc4 <HAL_CAN_IRQHandler+0x334>
 8007c7e:	2b10      	cmp	r3, #16
 8007c80:	d002      	beq.n	8007c88 <HAL_CAN_IRQHandler+0x2f8>
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d005      	beq.n	8007c92 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007c86:	e01d      	b.n	8007cc4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	f043 0308 	orr.w	r3, r3, #8
 8007c8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007c90:	e019      	b.n	8007cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	f043 0310 	orr.w	r3, r3, #16
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007c9a:	e014      	b.n	8007cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	f043 0320 	orr.w	r3, r3, #32
 8007ca2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007ca4:	e00f      	b.n	8007cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cae:	e00a      	b.n	8007cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cb8:	e005      	b.n	8007cc6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cc2:	e000      	b.n	8007cc6 <HAL_CAN_IRQHandler+0x336>
            break;
 8007cc4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699a      	ldr	r2, [r3, #24]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007cd4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f872 	bl	8007dda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007cf6:	bf00      	nop
 8007cf8:	3728      	adds	r7, #40	@ 0x28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e00:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <__NVIC_SetPriorityGrouping+0x44>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e22:	4a04      	ldr	r2, [pc, #16]	@ (8007e34 <__NVIC_SetPriorityGrouping+0x44>)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	60d3      	str	r3, [r2, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	e000ed00 	.word	0xe000ed00

08007e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e3c:	4b04      	ldr	r3, [pc, #16]	@ (8007e50 <__NVIC_GetPriorityGrouping+0x18>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	f003 0307 	and.w	r3, r3, #7
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	e000ed00 	.word	0xe000ed00

08007e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	db0b      	blt.n	8007e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	f003 021f 	and.w	r2, r3, #31
 8007e6c:	4907      	ldr	r1, [pc, #28]	@ (8007e8c <__NVIC_EnableIRQ+0x38>)
 8007e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	2001      	movs	r0, #1
 8007e76:	fa00 f202 	lsl.w	r2, r0, r2
 8007e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	e000e100 	.word	0xe000e100

08007e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	db0a      	blt.n	8007eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	490c      	ldr	r1, [pc, #48]	@ (8007edc <__NVIC_SetPriority+0x4c>)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	0112      	lsls	r2, r2, #4
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	440b      	add	r3, r1
 8007eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007eb8:	e00a      	b.n	8007ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	4908      	ldr	r1, [pc, #32]	@ (8007ee0 <__NVIC_SetPriority+0x50>)
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	3b04      	subs	r3, #4
 8007ec8:	0112      	lsls	r2, r2, #4
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	440b      	add	r3, r1
 8007ece:	761a      	strb	r2, [r3, #24]
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	e000e100 	.word	0xe000e100
 8007ee0:	e000ed00 	.word	0xe000ed00

08007ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b089      	sub	sp, #36	@ 0x24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f1c3 0307 	rsb	r3, r3, #7
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	bf28      	it	cs
 8007f02:	2304      	movcs	r3, #4
 8007f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	2b06      	cmp	r3, #6
 8007f0c:	d902      	bls.n	8007f14 <NVIC_EncodePriority+0x30>
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	3b03      	subs	r3, #3
 8007f12:	e000      	b.n	8007f16 <NVIC_EncodePriority+0x32>
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	43da      	mvns	r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	401a      	ands	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	fa01 f303 	lsl.w	r3, r1, r3
 8007f36:	43d9      	mvns	r1, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f3c:	4313      	orrs	r3, r2
         );
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3724      	adds	r7, #36	@ 0x24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f5c:	d301      	bcc.n	8007f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e00f      	b.n	8007f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f62:	4a0a      	ldr	r2, [pc, #40]	@ (8007f8c <SysTick_Config+0x40>)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f6a:	210f      	movs	r1, #15
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f70:	f7ff ff8e 	bl	8007e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f74:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <SysTick_Config+0x40>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f7a:	4b04      	ldr	r3, [pc, #16]	@ (8007f8c <SysTick_Config+0x40>)
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	e000e010 	.word	0xe000e010

08007f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff29 	bl	8007df0 <__NVIC_SetPriorityGrouping>
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4603      	mov	r3, r0
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fb8:	f7ff ff3e 	bl	8007e38 <__NVIC_GetPriorityGrouping>
 8007fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	f7ff ff8e 	bl	8007ee4 <NVIC_EncodePriority>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff ff5d 	bl	8007e90 <__NVIC_SetPriority>
}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ff31 	bl	8007e54 <__NVIC_EnableIRQ>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff ffa2 	bl	8007f4c <SysTick_Config>
 8008008:	4603      	mov	r3, r0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008020:	f7ff f84e 	bl	80070c0 <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e099      	b.n	8008164 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008050:	e00f      	b.n	8008072 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008052:	f7ff f835 	bl	80070c0 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b05      	cmp	r3, #5
 800805e:	d908      	bls.n	8008072 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2203      	movs	r2, #3
 800806a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e078      	b.n	8008164 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e8      	bne.n	8008052 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4b38      	ldr	r3, [pc, #224]	@ (800816c <HAL_DMA_Init+0x158>)
 800808c:	4013      	ands	r3, r2
 800808e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800809e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d107      	bne.n	80080dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d4:	4313      	orrs	r3, r2
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f023 0307 	bic.w	r3, r3, #7
 80080f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	2b04      	cmp	r3, #4
 8008104:	d117      	bne.n	8008136 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00e      	beq.n	8008136 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fb01 	bl	8008720 <DMA_CheckFifoParam>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2240      	movs	r2, #64	@ 0x40
 8008128:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008132:	2301      	movs	r3, #1
 8008134:	e016      	b.n	8008164 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fab8 	bl	80086b4 <DMA_CalcBaseAndBitshift>
 8008144:	4603      	mov	r3, r0
 8008146:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800814c:	223f      	movs	r2, #63	@ 0x3f
 800814e:	409a      	lsls	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	f010803f 	.word	0xf010803f

08008170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008186:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_DMA_Start_IT+0x26>
 8008192:	2302      	movs	r3, #2
 8008194:	e040      	b.n	8008218 <HAL_DMA_Start_IT+0xa8>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d12f      	bne.n	800820a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fa4a 	bl	8008658 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c8:	223f      	movs	r2, #63	@ 0x3f
 80081ca:	409a      	lsls	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0216 	orr.w	r2, r2, #22
 80081de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0208 	orr.w	r2, r2, #8
 80081f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e005      	b.n	8008216 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008212:	2302      	movs	r3, #2
 8008214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800822c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800822e:	f7fe ff47 	bl	80070c0 <HAL_GetTick>
 8008232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d008      	beq.n	8008252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2280      	movs	r2, #128	@ 0x80
 8008244:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e052      	b.n	80082f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0216 	bic.w	r2, r2, #22
 8008260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d103      	bne.n	8008282 <HAL_DMA_Abort+0x62>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0208 	bic.w	r2, r2, #8
 8008290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082a2:	e013      	b.n	80082cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082a4:	f7fe ff0c 	bl	80070c0 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	d90c      	bls.n	80082cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2203      	movs	r2, #3
 80082bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e015      	b.n	80082f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e4      	bne.n	80082a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082de:	223f      	movs	r2, #63	@ 0x3f
 80082e0:	409a      	lsls	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d004      	beq.n	800831e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2280      	movs	r2, #128	@ 0x80
 8008318:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e00c      	b.n	8008338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2205      	movs	r2, #5
 8008322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0201 	bic.w	r2, r2, #1
 8008334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008350:	4b8e      	ldr	r3, [pc, #568]	@ (800858c <HAL_DMA_IRQHandler+0x248>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a8e      	ldr	r2, [pc, #568]	@ (8008590 <HAL_DMA_IRQHandler+0x24c>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	0a9b      	lsrs	r3, r3, #10
 800835c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008362:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800836e:	2208      	movs	r2, #8
 8008370:	409a      	lsls	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4013      	ands	r3, r2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01a      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d013      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0204 	bic.w	r2, r2, #4
 8008396:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800839c:	2208      	movs	r2, #8
 800839e:	409a      	lsls	r2, r3
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a8:	f043 0201 	orr.w	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083b4:	2201      	movs	r2, #1
 80083b6:	409a      	lsls	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d012      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d2:	2201      	movs	r2, #1
 80083d4:	409a      	lsls	r2, r3
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083de:	f043 0202 	orr.w	r2, r3, #2
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ea:	2204      	movs	r2, #4
 80083ec:	409a      	lsls	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4013      	ands	r3, r2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d012      	beq.n	800841c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008408:	2204      	movs	r2, #4
 800840a:	409a      	lsls	r2, r3
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008414:	f043 0204 	orr.w	r2, r3, #4
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008420:	2210      	movs	r2, #16
 8008422:	409a      	lsls	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4013      	ands	r3, r2
 8008428:	2b00      	cmp	r3, #0
 800842a:	d043      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d03c      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800843e:	2210      	movs	r2, #16
 8008440:	409a      	lsls	r2, r3
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d018      	beq.n	8008486 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d108      	bne.n	8008474 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008466:	2b00      	cmp	r3, #0
 8008468:	d024      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
 8008472:	e01f      	b.n	80084b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01b      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
 8008484:	e016      	b.n	80084b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008490:	2b00      	cmp	r3, #0
 8008492:	d107      	bne.n	80084a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0208 	bic.w	r2, r2, #8
 80084a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084b8:	2220      	movs	r2, #32
 80084ba:	409a      	lsls	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 808f 	beq.w	80085e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 8087 	beq.w	80085e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084da:	2220      	movs	r2, #32
 80084dc:	409a      	lsls	r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b05      	cmp	r3, #5
 80084ec:	d136      	bne.n	800855c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0216 	bic.w	r2, r2, #22
 80084fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	695a      	ldr	r2, [r3, #20]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800850c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d103      	bne.n	800851e <HAL_DMA_IRQHandler+0x1da>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800851a:	2b00      	cmp	r3, #0
 800851c:	d007      	beq.n	800852e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0208 	bic.w	r2, r2, #8
 800852c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008532:	223f      	movs	r2, #63	@ 0x3f
 8008534:	409a      	lsls	r2, r3
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854e:	2b00      	cmp	r3, #0
 8008550:	d07e      	beq.n	8008650 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
        }
        return;
 800855a:	e079      	b.n	8008650 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01d      	beq.n	80085a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10d      	bne.n	8008594 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800857c:	2b00      	cmp	r3, #0
 800857e:	d031      	beq.n	80085e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
 8008588:	e02c      	b.n	80085e4 <HAL_DMA_IRQHandler+0x2a0>
 800858a:	bf00      	nop
 800858c:	200000a4 	.word	0x200000a4
 8008590:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d023      	beq.n	80085e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	4798      	blx	r3
 80085a4:	e01e      	b.n	80085e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10f      	bne.n	80085d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0210 	bic.w	r2, r2, #16
 80085c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d003      	beq.n	80085e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d032      	beq.n	8008652 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d022      	beq.n	800863e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2205      	movs	r2, #5
 80085fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0201 	bic.w	r2, r2, #1
 800860e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	3301      	adds	r3, #1
 8008614:	60bb      	str	r3, [r7, #8]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	429a      	cmp	r2, r3
 800861a:	d307      	bcc.n	800862c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1f2      	bne.n	8008610 <HAL_DMA_IRQHandler+0x2cc>
 800862a:	e000      	b.n	800862e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800862c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	4798      	blx	r3
 800864e:	e000      	b.n	8008652 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008650:	bf00      	nop
    }
  }
}
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008674:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b40      	cmp	r3, #64	@ 0x40
 8008684:	d108      	bne.n	8008698 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008696:	e007      	b.n	80086a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	60da      	str	r2, [r3, #12]
}
 80086a8:	bf00      	nop
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	3b10      	subs	r3, #16
 80086c4:	4a14      	ldr	r2, [pc, #80]	@ (8008718 <DMA_CalcBaseAndBitshift+0x64>)
 80086c6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086ce:	4a13      	ldr	r2, [pc, #76]	@ (800871c <DMA_CalcBaseAndBitshift+0x68>)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d909      	bls.n	80086f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	1d1a      	adds	r2, r3, #4
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80086f4:	e007      	b.n	8008706 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80086fe:	f023 0303 	bic.w	r3, r3, #3
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	aaaaaaab 	.word	0xaaaaaaab
 800871c:	08013f00 	.word	0x08013f00

08008720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d11f      	bne.n	800877a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d856      	bhi.n	80087ee <DMA_CheckFifoParam+0xce>
 8008740:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <DMA_CheckFifoParam+0x28>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	08008759 	.word	0x08008759
 800874c:	0800876b 	.word	0x0800876b
 8008750:	08008759 	.word	0x08008759
 8008754:	080087ef 	.word	0x080087ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d046      	beq.n	80087f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008768:	e043      	b.n	80087f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008772:	d140      	bne.n	80087f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008778:	e03d      	b.n	80087f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008782:	d121      	bne.n	80087c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b03      	cmp	r3, #3
 8008788:	d837      	bhi.n	80087fa <DMA_CheckFifoParam+0xda>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <DMA_CheckFifoParam+0x70>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a7 	.word	0x080087a7
 8008798:	080087a1 	.word	0x080087a1
 800879c:	080087b9 	.word	0x080087b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	73fb      	strb	r3, [r7, #15]
      break;
 80087a4:	e030      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d025      	beq.n	80087fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087b6:	e022      	b.n	80087fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80087c0:	d11f      	bne.n	8008802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087c6:	e01c      	b.n	8008802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d903      	bls.n	80087d6 <DMA_CheckFifoParam+0xb6>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d003      	beq.n	80087dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087d4:	e018      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	73fb      	strb	r3, [r7, #15]
      break;
 80087da:	e015      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00e      	beq.n	8008806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
      break;
 80087ec:	e00b      	b.n	8008806 <DMA_CheckFifoParam+0xe6>
      break;
 80087ee:	bf00      	nop
 80087f0:	e00a      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      break;
 80087f2:	bf00      	nop
 80087f4:	e008      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      break;
 80087f6:	bf00      	nop
 80087f8:	e006      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      break;
 80087fa:	bf00      	nop
 80087fc:	e004      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      break;
 80087fe:	bf00      	nop
 8008800:	e002      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      break;   
 8008802:	bf00      	nop
 8008804:	e000      	b.n	8008808 <DMA_CheckFifoParam+0xe8>
      break;
 8008806:	bf00      	nop
    }
  } 
  
  return status; 
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop

08008818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008818:	b480      	push	{r7}
 800881a:	b089      	sub	sp, #36	@ 0x24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800882a:	2300      	movs	r3, #0
 800882c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800882e:	2300      	movs	r3, #0
 8008830:	61fb      	str	r3, [r7, #28]
 8008832:	e16b      	b.n	8008b0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008834:	2201      	movs	r2, #1
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	fa02 f303 	lsl.w	r3, r2, r3
 800883c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4013      	ands	r3, r2
 8008846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	429a      	cmp	r2, r3
 800884e:	f040 815a 	bne.w	8008b06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b01      	cmp	r3, #1
 800885c:	d005      	beq.n	800886a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008866:	2b02      	cmp	r3, #2
 8008868:	d130      	bne.n	80088cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	2203      	movs	r2, #3
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	43db      	mvns	r3, r3
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	4013      	ands	r3, r2
 8008880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4313      	orrs	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088a0:	2201      	movs	r2, #1
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	43db      	mvns	r3, r3
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	4013      	ands	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	091b      	lsrs	r3, r3, #4
 80088b6:	f003 0201 	and.w	r2, r3, #1
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d017      	beq.n	8008908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	2203      	movs	r2, #3
 80088e4:	fa02 f303 	lsl.w	r3, r2, r3
 80088e8:	43db      	mvns	r3, r3
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	4013      	ands	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	fa02 f303 	lsl.w	r3, r2, r3
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	4313      	orrs	r3, r2
 8008900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f003 0303 	and.w	r3, r3, #3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d123      	bne.n	800895c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	08da      	lsrs	r2, r3, #3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3208      	adds	r2, #8
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	220f      	movs	r2, #15
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	43db      	mvns	r3, r3
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	4013      	ands	r3, r2
 8008936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	08da      	lsrs	r2, r3, #3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3208      	adds	r2, #8
 8008956:	69b9      	ldr	r1, [r7, #24]
 8008958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	2203      	movs	r2, #3
 8008968:	fa02 f303 	lsl.w	r3, r2, r3
 800896c:	43db      	mvns	r3, r3
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	4013      	ands	r3, r2
 8008972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f003 0203 	and.w	r2, r3, #3
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	4313      	orrs	r3, r2
 8008988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80b4 	beq.w	8008b06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	4b60      	ldr	r3, [pc, #384]	@ (8008b24 <HAL_GPIO_Init+0x30c>)
 80089a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a6:	4a5f      	ldr	r2, [pc, #380]	@ (8008b24 <HAL_GPIO_Init+0x30c>)
 80089a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80089ae:	4b5d      	ldr	r3, [pc, #372]	@ (8008b24 <HAL_GPIO_Init+0x30c>)
 80089b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089ba:	4a5b      	ldr	r2, [pc, #364]	@ (8008b28 <HAL_GPIO_Init+0x310>)
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	089b      	lsrs	r3, r3, #2
 80089c0:	3302      	adds	r3, #2
 80089c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f003 0303 	and.w	r3, r3, #3
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	220f      	movs	r2, #15
 80089d2:	fa02 f303 	lsl.w	r3, r2, r3
 80089d6:	43db      	mvns	r3, r3
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	4013      	ands	r3, r2
 80089dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a52      	ldr	r2, [pc, #328]	@ (8008b2c <HAL_GPIO_Init+0x314>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d02b      	beq.n	8008a3e <HAL_GPIO_Init+0x226>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a51      	ldr	r2, [pc, #324]	@ (8008b30 <HAL_GPIO_Init+0x318>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d025      	beq.n	8008a3a <HAL_GPIO_Init+0x222>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a50      	ldr	r2, [pc, #320]	@ (8008b34 <HAL_GPIO_Init+0x31c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d01f      	beq.n	8008a36 <HAL_GPIO_Init+0x21e>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a4f      	ldr	r2, [pc, #316]	@ (8008b38 <HAL_GPIO_Init+0x320>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d019      	beq.n	8008a32 <HAL_GPIO_Init+0x21a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a4e      	ldr	r2, [pc, #312]	@ (8008b3c <HAL_GPIO_Init+0x324>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d013      	beq.n	8008a2e <HAL_GPIO_Init+0x216>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a4d      	ldr	r2, [pc, #308]	@ (8008b40 <HAL_GPIO_Init+0x328>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d00d      	beq.n	8008a2a <HAL_GPIO_Init+0x212>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a4c      	ldr	r2, [pc, #304]	@ (8008b44 <HAL_GPIO_Init+0x32c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d007      	beq.n	8008a26 <HAL_GPIO_Init+0x20e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a4b      	ldr	r2, [pc, #300]	@ (8008b48 <HAL_GPIO_Init+0x330>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d101      	bne.n	8008a22 <HAL_GPIO_Init+0x20a>
 8008a1e:	2307      	movs	r3, #7
 8008a20:	e00e      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a22:	2308      	movs	r3, #8
 8008a24:	e00c      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a26:	2306      	movs	r3, #6
 8008a28:	e00a      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a2a:	2305      	movs	r3, #5
 8008a2c:	e008      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a2e:	2304      	movs	r3, #4
 8008a30:	e006      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a32:	2303      	movs	r3, #3
 8008a34:	e004      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a36:	2302      	movs	r3, #2
 8008a38:	e002      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <HAL_GPIO_Init+0x228>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	f002 0203 	and.w	r2, r2, #3
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	4093      	lsls	r3, r2
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a50:	4935      	ldr	r1, [pc, #212]	@ (8008b28 <HAL_GPIO_Init+0x310>)
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	089b      	lsrs	r3, r3, #2
 8008a56:	3302      	adds	r3, #2
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	43db      	mvns	r3, r3
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a82:	4a32      	ldr	r2, [pc, #200]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a88:	4b30      	ldr	r3, [pc, #192]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	43db      	mvns	r3, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	4013      	ands	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008aac:	4a27      	ldr	r2, [pc, #156]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008ab2:	4b26      	ldr	r3, [pc, #152]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	43db      	mvns	r3, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	4013      	ands	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b00:	4a12      	ldr	r2, [pc, #72]	@ (8008b4c <HAL_GPIO_Init+0x334>)
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b0f      	cmp	r3, #15
 8008b10:	f67f ae90 	bls.w	8008834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	3724      	adds	r7, #36	@ 0x24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40023800 	.word	0x40023800
 8008b28:	40013800 	.word	0x40013800
 8008b2c:	40020000 	.word	0x40020000
 8008b30:	40020400 	.word	0x40020400
 8008b34:	40020800 	.word	0x40020800
 8008b38:	40020c00 	.word	0x40020c00
 8008b3c:	40021000 	.word	0x40021000
 8008b40:	40021400 	.word	0x40021400
 8008b44:	40021800 	.word	0x40021800
 8008b48:	40021c00 	.word	0x40021c00
 8008b4c:	40013c00 	.word	0x40013c00

08008b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	807b      	strh	r3, [r7, #2]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b60:	787b      	ldrb	r3, [r7, #1]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b66:	887a      	ldrh	r2, [r7, #2]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b6c:	e003      	b.n	8008b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b6e:	887b      	ldrh	r3, [r7, #2]
 8008b70:	041a      	lsls	r2, r3, #16
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	619a      	str	r2, [r3, #24]
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008b8e:	4b08      	ldr	r3, [pc, #32]	@ (8008bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	4013      	ands	r3, r2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d006      	beq.n	8008ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b9a:	4a05      	ldr	r2, [pc, #20]	@ (8008bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b9c:	88fb      	ldrh	r3, [r7, #6]
 8008b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fa fd4c 	bl	8003640 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40013c00 	.word	0x40013c00

08008bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e12b      	b.n	8008e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7fd fb72 	bl	80062c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2224      	movs	r2, #36	@ 0x24
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0201 	bic.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c18:	f001 fc2c 	bl	800a474 <HAL_RCC_GetPCLK1Freq>
 8008c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	4a81      	ldr	r2, [pc, #516]	@ (8008e28 <HAL_I2C_Init+0x274>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d807      	bhi.n	8008c38 <HAL_I2C_Init+0x84>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4a80      	ldr	r2, [pc, #512]	@ (8008e2c <HAL_I2C_Init+0x278>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	bf94      	ite	ls
 8008c30:	2301      	movls	r3, #1
 8008c32:	2300      	movhi	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	e006      	b.n	8008c46 <HAL_I2C_Init+0x92>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8008e30 <HAL_I2C_Init+0x27c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	bf94      	ite	ls
 8008c40:	2301      	movls	r3, #1
 8008c42:	2300      	movhi	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e0e7      	b.n	8008e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4a78      	ldr	r2, [pc, #480]	@ (8008e34 <HAL_I2C_Init+0x280>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	0c9b      	lsrs	r3, r3, #18
 8008c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4a6a      	ldr	r2, [pc, #424]	@ (8008e28 <HAL_I2C_Init+0x274>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d802      	bhi.n	8008c88 <HAL_I2C_Init+0xd4>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	3301      	adds	r3, #1
 8008c86:	e009      	b.n	8008c9c <HAL_I2C_Init+0xe8>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	4a69      	ldr	r2, [pc, #420]	@ (8008e38 <HAL_I2C_Init+0x284>)
 8008c94:	fba2 2303 	umull	r2, r3, r2, r3
 8008c98:	099b      	lsrs	r3, r3, #6
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	6812      	ldr	r2, [r2, #0]
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008cae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	495c      	ldr	r1, [pc, #368]	@ (8008e28 <HAL_I2C_Init+0x274>)
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	d819      	bhi.n	8008cf0 <HAL_I2C_Init+0x13c>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	1e59      	subs	r1, r3, #1
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cca:	1c59      	adds	r1, r3, #1
 8008ccc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008cd0:	400b      	ands	r3, r1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <HAL_I2C_Init+0x138>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	1e59      	subs	r1, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cea:	e051      	b.n	8008d90 <HAL_I2C_Init+0x1dc>
 8008cec:	2304      	movs	r3, #4
 8008cee:	e04f      	b.n	8008d90 <HAL_I2C_Init+0x1dc>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d111      	bne.n	8008d1c <HAL_I2C_Init+0x168>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	1e58      	subs	r0, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6859      	ldr	r1, [r3, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	440b      	add	r3, r1
 8008d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bf0c      	ite	eq
 8008d14:	2301      	moveq	r3, #1
 8008d16:	2300      	movne	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	e012      	b.n	8008d42 <HAL_I2C_Init+0x18e>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	1e58      	subs	r0, r3, #1
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6859      	ldr	r1, [r3, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	440b      	add	r3, r1
 8008d2a:	0099      	lsls	r1, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d32:	3301      	adds	r3, #1
 8008d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bf0c      	ite	eq
 8008d3c:	2301      	moveq	r3, #1
 8008d3e:	2300      	movne	r3, #0
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <HAL_I2C_Init+0x196>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e022      	b.n	8008d90 <HAL_I2C_Init+0x1dc>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10e      	bne.n	8008d70 <HAL_I2C_Init+0x1bc>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1e58      	subs	r0, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6859      	ldr	r1, [r3, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	440b      	add	r3, r1
 8008d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d64:	3301      	adds	r3, #1
 8008d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d6e:	e00f      	b.n	8008d90 <HAL_I2C_Init+0x1dc>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1e58      	subs	r0, r3, #1
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6859      	ldr	r1, [r3, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	0099      	lsls	r1, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d86:	3301      	adds	r3, #1
 8008d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	6809      	ldr	r1, [r1, #0]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69da      	ldr	r2, [r3, #28]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008dbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6911      	ldr	r1, [r2, #16]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68d2      	ldr	r2, [r2, #12]
 8008dca:	4311      	orrs	r1, r2
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6812      	ldr	r2, [r2, #0]
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	695a      	ldr	r2, [r3, #20]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	000186a0 	.word	0x000186a0
 8008e2c:	001e847f 	.word	0x001e847f
 8008e30:	003d08ff 	.word	0x003d08ff
 8008e34:	431bde83 	.word	0x431bde83
 8008e38:	10624dd3 	.word	0x10624dd3

08008e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	4608      	mov	r0, r1
 8008e46:	4611      	mov	r1, r2
 8008e48:	461a      	mov	r2, r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	817b      	strh	r3, [r7, #10]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	813b      	strh	r3, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e56:	f7fe f933 	bl	80070c0 <HAL_GetTick>
 8008e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b20      	cmp	r3, #32
 8008e66:	f040 80d9 	bne.w	800901c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	2319      	movs	r3, #25
 8008e70:	2201      	movs	r2, #1
 8008e72:	496d      	ldr	r1, [pc, #436]	@ (8009028 <HAL_I2C_Mem_Write+0x1ec>)
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 fc8b 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008e80:	2302      	movs	r3, #2
 8008e82:	e0cc      	b.n	800901e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_I2C_Mem_Write+0x56>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e0c5      	b.n	800901e <HAL_I2C_Mem_Write+0x1e2>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d007      	beq.n	8008eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0201 	orr.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2221      	movs	r2, #33	@ 0x21
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2240      	movs	r2, #64	@ 0x40
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a3a      	ldr	r2, [r7, #32]
 8008ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800902c <HAL_I2C_Mem_Write+0x1f0>)
 8008ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008efa:	88f8      	ldrh	r0, [r7, #6]
 8008efc:	893a      	ldrh	r2, [r7, #8]
 8008efe:	8979      	ldrh	r1, [r7, #10]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	4603      	mov	r3, r0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fac2 	bl	8009494 <I2C_RequestMemoryWrite>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d052      	beq.n	8008fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e081      	b.n	800901e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fd50 	bl	80099c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00d      	beq.n	8008f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d107      	bne.n	8008f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e06b      	b.n	800901e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4a:	781a      	ldrb	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d11b      	bne.n	8008fbc <HAL_I2C_Mem_Write+0x180>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d017      	beq.n	8008fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1aa      	bne.n	8008f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 fd43 	bl	8009a54 <I2C_WaitOnBTFFlagUntilTimeout>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00d      	beq.n	8008ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d107      	bne.n	8008fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e016      	b.n	800901e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	e000      	b.n	800901e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800901c:	2302      	movs	r3, #2
  }
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	00100002 	.word	0x00100002
 800902c:	ffff0000 	.word	0xffff0000

08009030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08c      	sub	sp, #48	@ 0x30
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	4608      	mov	r0, r1
 800903a:	4611      	mov	r1, r2
 800903c:	461a      	mov	r2, r3
 800903e:	4603      	mov	r3, r0
 8009040:	817b      	strh	r3, [r7, #10]
 8009042:	460b      	mov	r3, r1
 8009044:	813b      	strh	r3, [r7, #8]
 8009046:	4613      	mov	r3, r2
 8009048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800904a:	f7fe f839 	bl	80070c0 <HAL_GetTick>
 800904e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b20      	cmp	r3, #32
 800905a:	f040 8214 	bne.w	8009486 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	2319      	movs	r3, #25
 8009064:	2201      	movs	r2, #1
 8009066:	497b      	ldr	r1, [pc, #492]	@ (8009254 <HAL_I2C_Mem_Read+0x224>)
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fb91 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
 8009076:	e207      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_I2C_Mem_Read+0x56>
 8009082:	2302      	movs	r3, #2
 8009084:	e200      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b01      	cmp	r3, #1
 800909a:	d007      	beq.n	80090ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2222      	movs	r2, #34	@ 0x22
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2240      	movs	r2, #64	@ 0x40
 80090c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80090dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4a5b      	ldr	r2, [pc, #364]	@ (8009258 <HAL_I2C_Mem_Read+0x228>)
 80090ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090ee:	88f8      	ldrh	r0, [r7, #6]
 80090f0:	893a      	ldrh	r2, [r7, #8]
 80090f2:	8979      	ldrh	r1, [r7, #10]
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	4603      	mov	r3, r0
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fa5e 	bl	80095c0 <I2C_RequestMemoryRead>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e1bc      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009112:	2b00      	cmp	r3, #0
 8009114:	d113      	bne.n	800913e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009116:	2300      	movs	r3, #0
 8009118:	623b      	str	r3, [r7, #32]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	623b      	str	r3, [r7, #32]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	623b      	str	r3, [r7, #32]
 800912a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	e190      	b.n	8009460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009142:	2b01      	cmp	r3, #1
 8009144:	d11b      	bne.n	800917e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009156:	2300      	movs	r3, #0
 8009158:	61fb      	str	r3, [r7, #28]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	61fb      	str	r3, [r7, #28]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	e170      	b.n	8009460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009182:	2b02      	cmp	r3, #2
 8009184:	d11b      	bne.n	80091be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009194:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091a6:	2300      	movs	r3, #0
 80091a8:	61bb      	str	r3, [r7, #24]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	e150      	b.n	8009460 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80091d4:	e144      	b.n	8009460 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091da:	2b03      	cmp	r3, #3
 80091dc:	f200 80f1 	bhi.w	80093c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d123      	bne.n	8009230 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 fc79 	bl	8009ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e145      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691a      	ldr	r2, [r3, #16]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009218:	3b01      	subs	r3, #1
 800921a:	b29a      	uxth	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800922e:	e117      	b.n	8009460 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009234:	2b02      	cmp	r3, #2
 8009236:	d14e      	bne.n	80092d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	2200      	movs	r2, #0
 8009240:	4906      	ldr	r1, [pc, #24]	@ (800925c <HAL_I2C_Mem_Read+0x22c>)
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 faa4 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e11a      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
 8009252:	bf00      	nop
 8009254:	00100002 	.word	0x00100002
 8009258:	ffff0000 	.word	0xffff0000
 800925c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800926e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691a      	ldr	r2, [r3, #16]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	b29a      	uxth	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691a      	ldr	r2, [r3, #16]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ac:	b2d2      	uxtb	r2, r2
 80092ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092d4:	e0c4      	b.n	8009460 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092dc:	2200      	movs	r2, #0
 80092de:	496c      	ldr	r1, [pc, #432]	@ (8009490 <HAL_I2C_Mem_Read+0x460>)
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fa55 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e0cb      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009338:	2200      	movs	r2, #0
 800933a:	4955      	ldr	r1, [pc, #340]	@ (8009490 <HAL_I2C_Mem_Read+0x460>)
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 fa27 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e09d      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800935a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691a      	ldr	r2, [r3, #16]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009366:	b2d2      	uxtb	r2, r2
 8009368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009378:	3b01      	subs	r3, #1
 800937a:	b29a      	uxth	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009384:	b29b      	uxth	r3, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691a      	ldr	r2, [r3, #16]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009398:	b2d2      	uxtb	r2, r2
 800939a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093aa:	3b01      	subs	r3, #1
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093c0:	e04e      	b.n	8009460 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fb8c 	bl	8009ae4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e058      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e0:	b2d2      	uxtb	r2, r2
 80093e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f2:	3b01      	subs	r3, #1
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fe:	b29b      	uxth	r3, r3
 8009400:	3b01      	subs	r3, #1
 8009402:	b29a      	uxth	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b04      	cmp	r3, #4
 8009414:	d124      	bne.n	8009460 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800941a:	2b03      	cmp	r3, #3
 800941c:	d107      	bne.n	800942e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800942c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009438:	b2d2      	uxtb	r2, r2
 800943a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009456:	b29b      	uxth	r3, r3
 8009458:	3b01      	subs	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009464:	2b00      	cmp	r3, #0
 8009466:	f47f aeb6 	bne.w	80091d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2220      	movs	r2, #32
 800946e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	e000      	b.n	8009488 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009486:	2302      	movs	r3, #2
  }
}
 8009488:	4618      	mov	r0, r3
 800948a:	3728      	adds	r7, #40	@ 0x28
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	00010004 	.word	0x00010004

08009494 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af02      	add	r7, sp, #8
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	817b      	strh	r3, [r7, #10]
 80094a6:	460b      	mov	r3, r1
 80094a8:	813b      	strh	r3, [r7, #8]
 80094aa:	4613      	mov	r3, r2
 80094ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f960 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00d      	beq.n	80094f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094e4:	d103      	bne.n	80094ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e05f      	b.n	80095b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80094f2:	897b      	ldrh	r3, [r7, #10]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	461a      	mov	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	6a3a      	ldr	r2, [r7, #32]
 8009506:	492d      	ldr	r1, [pc, #180]	@ (80095bc <I2C_RequestMemoryWrite+0x128>)
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f9bb 	bl	8009884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e04c      	b.n	80095b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009518:	2300      	movs	r3, #0
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800952e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009530:	6a39      	ldr	r1, [r7, #32]
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fa46 	bl	80099c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00d      	beq.n	800955a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	2b04      	cmp	r3, #4
 8009544:	d107      	bne.n	8009556 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e02b      	b.n	80095b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d105      	bne.n	800956c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009560:	893b      	ldrh	r3, [r7, #8]
 8009562:	b2da      	uxtb	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	611a      	str	r2, [r3, #16]
 800956a:	e021      	b.n	80095b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800956c:	893b      	ldrh	r3, [r7, #8]
 800956e:	0a1b      	lsrs	r3, r3, #8
 8009570:	b29b      	uxth	r3, r3
 8009572:	b2da      	uxtb	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800957a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800957c:	6a39      	ldr	r1, [r7, #32]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fa20 	bl	80099c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00d      	beq.n	80095a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958e:	2b04      	cmp	r3, #4
 8009590:	d107      	bne.n	80095a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e005      	b.n	80095b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095a6:	893b      	ldrh	r3, [r7, #8]
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	00010002 	.word	0x00010002

080095c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af02      	add	r7, sp, #8
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	4608      	mov	r0, r1
 80095ca:	4611      	mov	r1, r2
 80095cc:	461a      	mov	r2, r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	817b      	strh	r3, [r7, #10]
 80095d2:	460b      	mov	r3, r1
 80095d4:	813b      	strh	r3, [r7, #8]
 80095d6:	4613      	mov	r3, r2
 80095d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80095e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	2200      	movs	r2, #0
 8009602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 f8c2 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00d      	beq.n	800962e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009620:	d103      	bne.n	800962a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009628:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e0aa      	b.n	8009784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800962e:	897b      	ldrh	r3, [r7, #10]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800963c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	6a3a      	ldr	r2, [r7, #32]
 8009642:	4952      	ldr	r1, [pc, #328]	@ (800978c <I2C_RequestMemoryRead+0x1cc>)
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f91d 	bl	8009884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e097      	b.n	8009784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	617b      	str	r3, [r7, #20]
 8009668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800966a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966c:	6a39      	ldr	r1, [r7, #32]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f9a8 	bl	80099c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00d      	beq.n	8009696 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967e:	2b04      	cmp	r3, #4
 8009680:	d107      	bne.n	8009692 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e076      	b.n	8009784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d105      	bne.n	80096a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800969c:	893b      	ldrh	r3, [r7, #8]
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	611a      	str	r2, [r3, #16]
 80096a6:	e021      	b.n	80096ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80096a8:	893b      	ldrh	r3, [r7, #8]
 80096aa:	0a1b      	lsrs	r3, r3, #8
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b8:	6a39      	ldr	r1, [r7, #32]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 f982 	bl	80099c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00d      	beq.n	80096e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d107      	bne.n	80096de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e050      	b.n	8009784 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096e2:	893b      	ldrh	r3, [r7, #8]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ee:	6a39      	ldr	r1, [r7, #32]
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f967 	bl	80099c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00d      	beq.n	8009718 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009700:	2b04      	cmp	r3, #4
 8009702:	d107      	bne.n	8009714 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009712:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e035      	b.n	8009784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009726:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	2200      	movs	r2, #0
 8009730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 f82b 	bl	8009790 <I2C_WaitOnFlagUntilTimeout>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00d      	beq.n	800975c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800974e:	d103      	bne.n	8009758 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e013      	b.n	8009784 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800975c:	897b      	ldrh	r3, [r7, #10]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f043 0301 	orr.w	r3, r3, #1
 8009764:	b2da      	uxtb	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	6a3a      	ldr	r2, [r7, #32]
 8009770:	4906      	ldr	r1, [pc, #24]	@ (800978c <I2C_RequestMemoryRead+0x1cc>)
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f886 	bl	8009884 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	00010002 	.word	0x00010002

08009790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	603b      	str	r3, [r7, #0]
 800979c:	4613      	mov	r3, r2
 800979e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097a0:	e048      	b.n	8009834 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097a8:	d044      	beq.n	8009834 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097aa:	f7fd fc89 	bl	80070c0 <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d302      	bcc.n	80097c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d139      	bne.n	8009834 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	0c1b      	lsrs	r3, r3, #16
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d10d      	bne.n	80097e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	43da      	mvns	r2, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4013      	ands	r3, r2
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	461a      	mov	r2, r3
 80097e4:	e00c      	b.n	8009800 <I2C_WaitOnFlagUntilTimeout+0x70>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	43da      	mvns	r2, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	4013      	ands	r3, r2
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bf0c      	ite	eq
 80097f8:	2301      	moveq	r3, #1
 80097fa:	2300      	movne	r3, #0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	429a      	cmp	r2, r3
 8009804:	d116      	bne.n	8009834 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009820:	f043 0220 	orr.w	r2, r3, #32
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e023      	b.n	800987c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b01      	cmp	r3, #1
 800983c:	d10d      	bne.n	800985a <I2C_WaitOnFlagUntilTimeout+0xca>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	43da      	mvns	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	4013      	ands	r3, r2
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	bf0c      	ite	eq
 8009850:	2301      	moveq	r3, #1
 8009852:	2300      	movne	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	461a      	mov	r2, r3
 8009858:	e00c      	b.n	8009874 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	43da      	mvns	r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4013      	ands	r3, r2
 8009866:	b29b      	uxth	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	bf0c      	ite	eq
 800986c:	2301      	moveq	r3, #1
 800986e:	2300      	movne	r3, #0
 8009870:	b2db      	uxtb	r3, r3
 8009872:	461a      	mov	r2, r3
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	429a      	cmp	r2, r3
 8009878:	d093      	beq.n	80097a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009892:	e071      	b.n	8009978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800989e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a2:	d123      	bne.n	80098ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80098bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2220      	movs	r2, #32
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d8:	f043 0204 	orr.w	r2, r3, #4
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e067      	b.n	80099bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098f2:	d041      	beq.n	8009978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098f4:	f7fd fbe4 	bl	80070c0 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	429a      	cmp	r2, r3
 8009902:	d302      	bcc.n	800990a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d136      	bne.n	8009978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b01      	cmp	r3, #1
 8009912:	d10c      	bne.n	800992e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	43da      	mvns	r2, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4013      	ands	r3, r2
 8009920:	b29b      	uxth	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	bf14      	ite	ne
 8009926:	2301      	movne	r3, #1
 8009928:	2300      	moveq	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	e00b      	b.n	8009946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	43da      	mvns	r2, r3
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	4013      	ands	r3, r2
 800993a:	b29b      	uxth	r3, r3
 800993c:	2b00      	cmp	r3, #0
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d016      	beq.n	8009978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2220      	movs	r2, #32
 8009954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009964:	f043 0220 	orr.w	r2, r3, #32
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e021      	b.n	80099bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	0c1b      	lsrs	r3, r3, #16
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b01      	cmp	r3, #1
 8009980:	d10c      	bne.n	800999c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	43da      	mvns	r2, r3
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	4013      	ands	r3, r2
 800998e:	b29b      	uxth	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	bf14      	ite	ne
 8009994:	2301      	movne	r3, #1
 8009996:	2300      	moveq	r3, #0
 8009998:	b2db      	uxtb	r3, r3
 800999a:	e00b      	b.n	80099b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	43da      	mvns	r2, r3
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	4013      	ands	r3, r2
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bf14      	ite	ne
 80099ae:	2301      	movne	r3, #1
 80099b0:	2300      	moveq	r3, #0
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f47f af6d 	bne.w	8009894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099d0:	e034      	b.n	8009a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f8e3 	bl	8009b9e <I2C_IsAcknowledgeFailed>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e034      	b.n	8009a4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e8:	d028      	beq.n	8009a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ea:	f7fd fb69 	bl	80070c0 <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d302      	bcc.n	8009a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d11d      	bne.n	8009a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0a:	2b80      	cmp	r3, #128	@ 0x80
 8009a0c:	d016      	beq.n	8009a3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a28:	f043 0220 	orr.w	r2, r3, #32
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e007      	b.n	8009a4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a46:	2b80      	cmp	r3, #128	@ 0x80
 8009a48:	d1c3      	bne.n	80099d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a60:	e034      	b.n	8009acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f89b 	bl	8009b9e <I2C_IsAcknowledgeFailed>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e034      	b.n	8009adc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a78:	d028      	beq.n	8009acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a7a:	f7fd fb21 	bl	80070c0 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d302      	bcc.n	8009a90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d11d      	bne.n	8009acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d016      	beq.n	8009acc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab8:	f043 0220 	orr.w	r2, r3, #32
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e007      	b.n	8009adc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	f003 0304 	and.w	r3, r3, #4
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	d1c3      	bne.n	8009a62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009af0:	e049      	b.n	8009b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	f003 0310 	and.w	r3, r3, #16
 8009afc:	2b10      	cmp	r3, #16
 8009afe:	d119      	bne.n	8009b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0210 	mvn.w	r2, #16
 8009b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e030      	b.n	8009b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b34:	f7fd fac4 	bl	80070c0 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d302      	bcc.n	8009b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d11d      	bne.n	8009b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b54:	2b40      	cmp	r3, #64	@ 0x40
 8009b56:	d016      	beq.n	8009b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b72:	f043 0220 	orr.w	r2, r3, #32
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e007      	b.n	8009b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b90:	2b40      	cmp	r3, #64	@ 0x40
 8009b92:	d1ae      	bne.n	8009af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bb4:	d11b      	bne.n	8009bee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009bbe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bda:	f043 0204 	orr.w	r2, r3, #4
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e267      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d075      	beq.n	8009d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c1a:	4b88      	ldr	r3, [pc, #544]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 030c 	and.w	r3, r3, #12
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d00c      	beq.n	8009c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c26:	4b85      	ldr	r3, [pc, #532]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d112      	bne.n	8009c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c32:	4b82      	ldr	r3, [pc, #520]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c3e:	d10b      	bne.n	8009c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c40:	4b7e      	ldr	r3, [pc, #504]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d05b      	beq.n	8009d04 <HAL_RCC_OscConfig+0x108>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d157      	bne.n	8009d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e242      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c60:	d106      	bne.n	8009c70 <HAL_RCC_OscConfig+0x74>
 8009c62:	4b76      	ldr	r3, [pc, #472]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a75      	ldr	r2, [pc, #468]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	e01d      	b.n	8009cac <HAL_RCC_OscConfig+0xb0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c78:	d10c      	bne.n	8009c94 <HAL_RCC_OscConfig+0x98>
 8009c7a:	4b70      	ldr	r3, [pc, #448]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a6f      	ldr	r2, [pc, #444]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	4b6d      	ldr	r3, [pc, #436]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	e00b      	b.n	8009cac <HAL_RCC_OscConfig+0xb0>
 8009c94:	4b69      	ldr	r3, [pc, #420]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a68      	ldr	r2, [pc, #416]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	4b66      	ldr	r3, [pc, #408]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a65      	ldr	r2, [pc, #404]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d013      	beq.n	8009cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cb4:	f7fd fa04 	bl	80070c0 <HAL_GetTick>
 8009cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009cbc:	f7fd fa00 	bl	80070c0 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b64      	cmp	r3, #100	@ 0x64
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e207      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cce:	4b5b      	ldr	r3, [pc, #364]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f0      	beq.n	8009cbc <HAL_RCC_OscConfig+0xc0>
 8009cda:	e014      	b.n	8009d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cdc:	f7fd f9f0 	bl	80070c0 <HAL_GetTick>
 8009ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ce4:	f7fd f9ec 	bl	80070c0 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b64      	cmp	r3, #100	@ 0x64
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e1f3      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cf6:	4b51      	ldr	r3, [pc, #324]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xe8>
 8009d02:	e000      	b.n	8009d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d063      	beq.n	8009dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d12:	4b4a      	ldr	r3, [pc, #296]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f003 030c 	and.w	r3, r3, #12
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00b      	beq.n	8009d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d1e:	4b47      	ldr	r3, [pc, #284]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d26:	2b08      	cmp	r3, #8
 8009d28:	d11c      	bne.n	8009d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d2a:	4b44      	ldr	r3, [pc, #272]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d116      	bne.n	8009d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d36:	4b41      	ldr	r3, [pc, #260]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_RCC_OscConfig+0x152>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d001      	beq.n	8009d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e1c7      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	4937      	ldr	r1, [pc, #220]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d62:	e03a      	b.n	8009dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d020      	beq.n	8009dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d6c:	4b34      	ldr	r3, [pc, #208]	@ (8009e40 <HAL_RCC_OscConfig+0x244>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d72:	f7fd f9a5 	bl	80070c0 <HAL_GetTick>
 8009d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d78:	e008      	b.n	8009d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d7a:	f7fd f9a1 	bl	80070c0 <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d901      	bls.n	8009d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e1a8      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d0f0      	beq.n	8009d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d98:	4b28      	ldr	r3, [pc, #160]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	4925      	ldr	r1, [pc, #148]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	600b      	str	r3, [r1, #0]
 8009dac:	e015      	b.n	8009dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009dae:	4b24      	ldr	r3, [pc, #144]	@ (8009e40 <HAL_RCC_OscConfig+0x244>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db4:	f7fd f984 	bl	80070c0 <HAL_GetTick>
 8009db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dba:	e008      	b.n	8009dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dbc:	f7fd f980 	bl	80070c0 <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d901      	bls.n	8009dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e187      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dce:	4b1b      	ldr	r3, [pc, #108]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1f0      	bne.n	8009dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d036      	beq.n	8009e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d016      	beq.n	8009e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dee:	4b15      	ldr	r3, [pc, #84]	@ (8009e44 <HAL_RCC_OscConfig+0x248>)
 8009df0:	2201      	movs	r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df4:	f7fd f964 	bl	80070c0 <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009dfa:	e008      	b.n	8009e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009dfc:	f7fd f960 	bl	80070c0 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e167      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e3c <HAL_RCC_OscConfig+0x240>)
 8009e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f0      	beq.n	8009dfc <HAL_RCC_OscConfig+0x200>
 8009e1a:	e01b      	b.n	8009e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e1c:	4b09      	ldr	r3, [pc, #36]	@ (8009e44 <HAL_RCC_OscConfig+0x248>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e22:	f7fd f94d 	bl	80070c0 <HAL_GetTick>
 8009e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e28:	e00e      	b.n	8009e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e2a:	f7fd f949 	bl	80070c0 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d907      	bls.n	8009e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e150      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
 8009e3c:	40023800 	.word	0x40023800
 8009e40:	42470000 	.word	0x42470000
 8009e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e48:	4b88      	ldr	r3, [pc, #544]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e4c:	f003 0302 	and.w	r3, r3, #2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1ea      	bne.n	8009e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 8097 	beq.w	8009f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e62:	2300      	movs	r3, #0
 8009e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e66:	4b81      	ldr	r3, [pc, #516]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10f      	bne.n	8009e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e72:	2300      	movs	r3, #0
 8009e74:	60bb      	str	r3, [r7, #8]
 8009e76:	4b7d      	ldr	r3, [pc, #500]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e82:	4b7a      	ldr	r3, [pc, #488]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e8a:	60bb      	str	r3, [r7, #8]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e92:	4b77      	ldr	r3, [pc, #476]	@ (800a070 <HAL_RCC_OscConfig+0x474>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d118      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e9e:	4b74      	ldr	r3, [pc, #464]	@ (800a070 <HAL_RCC_OscConfig+0x474>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a73      	ldr	r2, [pc, #460]	@ (800a070 <HAL_RCC_OscConfig+0x474>)
 8009ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009eaa:	f7fd f909 	bl	80070c0 <HAL_GetTick>
 8009eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009eb0:	e008      	b.n	8009ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009eb2:	f7fd f905 	bl	80070c0 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d901      	bls.n	8009ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e10c      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ec4:	4b6a      	ldr	r3, [pc, #424]	@ (800a070 <HAL_RCC_OscConfig+0x474>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d0f0      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d106      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x2ea>
 8009ed8:	4b64      	ldr	r3, [pc, #400]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009edc:	4a63      	ldr	r2, [pc, #396]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009ede:	f043 0301 	orr.w	r3, r3, #1
 8009ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ee4:	e01c      	b.n	8009f20 <HAL_RCC_OscConfig+0x324>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d10c      	bne.n	8009f08 <HAL_RCC_OscConfig+0x30c>
 8009eee:	4b5f      	ldr	r3, [pc, #380]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009ef4:	f043 0304 	orr.w	r3, r3, #4
 8009ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009efa:	4b5c      	ldr	r3, [pc, #368]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009efe:	4a5b      	ldr	r2, [pc, #364]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f00:	f043 0301 	orr.w	r3, r3, #1
 8009f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f06:	e00b      	b.n	8009f20 <HAL_RCC_OscConfig+0x324>
 8009f08:	4b58      	ldr	r3, [pc, #352]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f0c:	4a57      	ldr	r2, [pc, #348]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f0e:	f023 0301 	bic.w	r3, r3, #1
 8009f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f14:	4b55      	ldr	r3, [pc, #340]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f18:	4a54      	ldr	r2, [pc, #336]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f1a:	f023 0304 	bic.w	r3, r3, #4
 8009f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d015      	beq.n	8009f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f28:	f7fd f8ca 	bl	80070c0 <HAL_GetTick>
 8009f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f2e:	e00a      	b.n	8009f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f30:	f7fd f8c6 	bl	80070c0 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d901      	bls.n	8009f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e0cb      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f46:	4b49      	ldr	r3, [pc, #292]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0ee      	beq.n	8009f30 <HAL_RCC_OscConfig+0x334>
 8009f52:	e014      	b.n	8009f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f54:	f7fd f8b4 	bl	80070c0 <HAL_GetTick>
 8009f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f5a:	e00a      	b.n	8009f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f5c:	f7fd f8b0 	bl	80070c0 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d901      	bls.n	8009f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e0b5      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f72:	4b3e      	ldr	r3, [pc, #248]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1ee      	bne.n	8009f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d105      	bne.n	8009f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f84:	4b39      	ldr	r3, [pc, #228]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f88:	4a38      	ldr	r2, [pc, #224]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 80a1 	beq.w	800a0dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f9a:	4b34      	ldr	r3, [pc, #208]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 030c 	and.w	r3, r3, #12
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d05c      	beq.n	800a060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d141      	bne.n	800a032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fae:	4b31      	ldr	r3, [pc, #196]	@ (800a074 <HAL_RCC_OscConfig+0x478>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fb4:	f7fd f884 	bl	80070c0 <HAL_GetTick>
 8009fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fbc:	f7fd f880 	bl	80070c0 <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e087      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fce:	4b27      	ldr	r3, [pc, #156]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1f0      	bne.n	8009fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69da      	ldr	r2, [r3, #28]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe8:	019b      	lsls	r3, r3, #6
 8009fea:	431a      	orrs	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	085b      	lsrs	r3, r3, #1
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	041b      	lsls	r3, r3, #16
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffc:	061b      	lsls	r3, r3, #24
 8009ffe:	491b      	ldr	r1, [pc, #108]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 800a000:	4313      	orrs	r3, r2
 800a002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a004:	4b1b      	ldr	r3, [pc, #108]	@ (800a074 <HAL_RCC_OscConfig+0x478>)
 800a006:	2201      	movs	r2, #1
 800a008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a00a:	f7fd f859 	bl	80070c0 <HAL_GetTick>
 800a00e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a010:	e008      	b.n	800a024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a012:	f7fd f855 	bl	80070c0 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d901      	bls.n	800a024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e05c      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a024:	4b11      	ldr	r3, [pc, #68]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0f0      	beq.n	800a012 <HAL_RCC_OscConfig+0x416>
 800a030:	e054      	b.n	800a0dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <HAL_RCC_OscConfig+0x478>)
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a038:	f7fd f842 	bl	80070c0 <HAL_GetTick>
 800a03c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a03e:	e008      	b.n	800a052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a040:	f7fd f83e 	bl	80070c0 <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e045      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a052:	4b06      	ldr	r3, [pc, #24]	@ (800a06c <HAL_RCC_OscConfig+0x470>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1f0      	bne.n	800a040 <HAL_RCC_OscConfig+0x444>
 800a05e:	e03d      	b.n	800a0dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d107      	bne.n	800a078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e038      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
 800a06c:	40023800 	.word	0x40023800
 800a070:	40007000 	.word	0x40007000
 800a074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a078:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ec>)
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d028      	beq.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a090:	429a      	cmp	r2, r3
 800a092:	d121      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d11a      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a0ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d111      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0be:	085b      	lsrs	r3, r3, #1
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d107      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d001      	beq.n	800a0dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	40023800 	.word	0x40023800

0800a0ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e0cc      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a100:	4b68      	ldr	r3, [pc, #416]	@ (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d90c      	bls.n	800a128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a10e:	4b65      	ldr	r3, [pc, #404]	@ (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	b2d2      	uxtb	r2, r2
 800a114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a116:	4b63      	ldr	r3, [pc, #396]	@ (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0307 	and.w	r3, r3, #7
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d001      	beq.n	800a128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e0b8      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d020      	beq.n	800a176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a140:	4b59      	ldr	r3, [pc, #356]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	4a58      	ldr	r2, [pc, #352]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a14a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 0308 	and.w	r3, r3, #8
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a158:	4b53      	ldr	r3, [pc, #332]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	4a52      	ldr	r2, [pc, #328]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a15e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a164:	4b50      	ldr	r3, [pc, #320]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	494d      	ldr	r1, [pc, #308]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a172:	4313      	orrs	r3, r2
 800a174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d044      	beq.n	800a20c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d107      	bne.n	800a19a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a18a:	4b47      	ldr	r3, [pc, #284]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d119      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e07f      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d003      	beq.n	800a1aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d107      	bne.n	800a1ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d109      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e06f      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1ba:	4b3b      	ldr	r3, [pc, #236]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e067      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a1ca:	4b37      	ldr	r3, [pc, #220]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f023 0203 	bic.w	r2, r3, #3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4934      	ldr	r1, [pc, #208]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a1dc:	f7fc ff70 	bl	80070c0 <HAL_GetTick>
 800a1e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1e2:	e00a      	b.n	800a1fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1e4:	f7fc ff6c 	bl	80070c0 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e04f      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f003 020c 	and.w	r2, r3, #12
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	429a      	cmp	r2, r3
 800a20a:	d1eb      	bne.n	800a1e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a20c:	4b25      	ldr	r3, [pc, #148]	@ (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0307 	and.w	r3, r3, #7
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d20c      	bcs.n	800a234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a21a:	4b22      	ldr	r3, [pc, #136]	@ (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	b2d2      	uxtb	r2, r2
 800a220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a222:	4b20      	ldr	r3, [pc, #128]	@ (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d001      	beq.n	800a234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e032      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a240:	4b19      	ldr	r3, [pc, #100]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	4916      	ldr	r1, [pc, #88]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a25e:	4b12      	ldr	r3, [pc, #72]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	490e      	ldr	r1, [pc, #56]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a272:	f000 f82d 	bl	800a2d0 <HAL_RCC_GetSysClockFreq>
 800a276:	4602      	mov	r2, r0
 800a278:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	091b      	lsrs	r3, r3, #4
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	490a      	ldr	r1, [pc, #40]	@ (800a2ac <HAL_RCC_ClockConfig+0x1c0>)
 800a284:	5ccb      	ldrb	r3, [r1, r3]
 800a286:	fa22 f303 	lsr.w	r3, r2, r3
 800a28a:	4a09      	ldr	r2, [pc, #36]	@ (800a2b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a28c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a28e:	4b09      	ldr	r3, [pc, #36]	@ (800a2b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4618      	mov	r0, r3
 800a294:	f7fc fed0 	bl	8007038 <HAL_InitTick>

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	40023c00 	.word	0x40023c00
 800a2a8:	40023800 	.word	0x40023800
 800a2ac:	08013ee8 	.word	0x08013ee8
 800a2b0:	200000a4 	.word	0x200000a4
 800a2b4:	200000a8 	.word	0x200000a8

0800a2b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a2bc:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <HAL_RCC_EnableCSS+0x14>)
 800a2be:	2201      	movs	r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]
}
 800a2c2:	bf00      	nop
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	4247004c 	.word	0x4247004c

0800a2d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2d4:	b090      	sub	sp, #64	@ 0x40
 800a2d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2dc:	2300      	movs	r3, #0
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2e8:	4b59      	ldr	r3, [pc, #356]	@ (800a450 <HAL_RCC_GetSysClockFreq+0x180>)
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f003 030c 	and.w	r3, r3, #12
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d00d      	beq.n	800a310 <HAL_RCC_GetSysClockFreq+0x40>
 800a2f4:	2b08      	cmp	r3, #8
 800a2f6:	f200 80a1 	bhi.w	800a43c <HAL_RCC_GetSysClockFreq+0x16c>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <HAL_RCC_GetSysClockFreq+0x34>
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d003      	beq.n	800a30a <HAL_RCC_GetSysClockFreq+0x3a>
 800a302:	e09b      	b.n	800a43c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a304:	4b53      	ldr	r3, [pc, #332]	@ (800a454 <HAL_RCC_GetSysClockFreq+0x184>)
 800a306:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800a308:	e09b      	b.n	800a442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a30a:	4b53      	ldr	r3, [pc, #332]	@ (800a458 <HAL_RCC_GetSysClockFreq+0x188>)
 800a30c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a30e:	e098      	b.n	800a442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a310:	4b4f      	ldr	r3, [pc, #316]	@ (800a450 <HAL_RCC_GetSysClockFreq+0x180>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a318:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a31a:	4b4d      	ldr	r3, [pc, #308]	@ (800a450 <HAL_RCC_GetSysClockFreq+0x180>)
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d028      	beq.n	800a378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a326:	4b4a      	ldr	r3, [pc, #296]	@ (800a450 <HAL_RCC_GetSysClockFreq+0x180>)
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	099b      	lsrs	r3, r3, #6
 800a32c:	2200      	movs	r2, #0
 800a32e:	623b      	str	r3, [r7, #32]
 800a330:	627a      	str	r2, [r7, #36]	@ 0x24
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a338:	2100      	movs	r1, #0
 800a33a:	4b47      	ldr	r3, [pc, #284]	@ (800a458 <HAL_RCC_GetSysClockFreq+0x188>)
 800a33c:	fb03 f201 	mul.w	r2, r3, r1
 800a340:	2300      	movs	r3, #0
 800a342:	fb00 f303 	mul.w	r3, r0, r3
 800a346:	4413      	add	r3, r2
 800a348:	4a43      	ldr	r2, [pc, #268]	@ (800a458 <HAL_RCC_GetSysClockFreq+0x188>)
 800a34a:	fba0 1202 	umull	r1, r2, r0, r2
 800a34e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a350:	460a      	mov	r2, r1
 800a352:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a356:	4413      	add	r3, r2
 800a358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35c:	2200      	movs	r2, #0
 800a35e:	61bb      	str	r3, [r7, #24]
 800a360:	61fa      	str	r2, [r7, #28]
 800a362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a36a:	f7f6 fd7b 	bl	8000e64 <__aeabi_uldivmod>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4613      	mov	r3, r2
 800a374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a376:	e053      	b.n	800a420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a378:	4b35      	ldr	r3, [pc, #212]	@ (800a450 <HAL_RCC_GetSysClockFreq+0x180>)
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	099b      	lsrs	r3, r3, #6
 800a37e:	2200      	movs	r2, #0
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	617a      	str	r2, [r7, #20]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a38a:	f04f 0b00 	mov.w	fp, #0
 800a38e:	4652      	mov	r2, sl
 800a390:	465b      	mov	r3, fp
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f04f 0100 	mov.w	r1, #0
 800a39a:	0159      	lsls	r1, r3, #5
 800a39c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a3a0:	0150      	lsls	r0, r2, #5
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	ebb2 080a 	subs.w	r8, r2, sl
 800a3aa:	eb63 090b 	sbc.w	r9, r3, fp
 800a3ae:	f04f 0200 	mov.w	r2, #0
 800a3b2:	f04f 0300 	mov.w	r3, #0
 800a3b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a3ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a3be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a3c2:	ebb2 0408 	subs.w	r4, r2, r8
 800a3c6:	eb63 0509 	sbc.w	r5, r3, r9
 800a3ca:	f04f 0200 	mov.w	r2, #0
 800a3ce:	f04f 0300 	mov.w	r3, #0
 800a3d2:	00eb      	lsls	r3, r5, #3
 800a3d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3d8:	00e2      	lsls	r2, r4, #3
 800a3da:	4614      	mov	r4, r2
 800a3dc:	461d      	mov	r5, r3
 800a3de:	eb14 030a 	adds.w	r3, r4, sl
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	eb45 030b 	adc.w	r3, r5, fp
 800a3e8:	607b      	str	r3, [r7, #4]
 800a3ea:	f04f 0200 	mov.w	r2, #0
 800a3ee:	f04f 0300 	mov.w	r3, #0
 800a3f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	028b      	lsls	r3, r1, #10
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a400:	4621      	mov	r1, r4
 800a402:	028a      	lsls	r2, r1, #10
 800a404:	4610      	mov	r0, r2
 800a406:	4619      	mov	r1, r3
 800a408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40a:	2200      	movs	r2, #0
 800a40c:	60bb      	str	r3, [r7, #8]
 800a40e:	60fa      	str	r2, [r7, #12]
 800a410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a414:	f7f6 fd26 	bl	8000e64 <__aeabi_uldivmod>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4613      	mov	r3, r2
 800a41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a420:	4b0b      	ldr	r3, [pc, #44]	@ (800a450 <HAL_RCC_GetSysClockFreq+0x180>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	0c1b      	lsrs	r3, r3, #16
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	3301      	adds	r3, #1
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800a430:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	fbb2 f3f3 	udiv	r3, r2, r3
 800a438:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a43a:	e002      	b.n	800a442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a43c:	4b05      	ldr	r3, [pc, #20]	@ (800a454 <HAL_RCC_GetSysClockFreq+0x184>)
 800a43e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a440:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a444:	4618      	mov	r0, r3
 800a446:	3740      	adds	r7, #64	@ 0x40
 800a448:	46bd      	mov	sp, r7
 800a44a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a44e:	bf00      	nop
 800a450:	40023800 	.word	0x40023800
 800a454:	00f42400 	.word	0x00f42400
 800a458:	00b71b00 	.word	0x00b71b00

0800a45c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a460:	4b03      	ldr	r3, [pc, #12]	@ (800a470 <HAL_RCC_GetHCLKFreq+0x14>)
 800a462:	681b      	ldr	r3, [r3, #0]
}
 800a464:	4618      	mov	r0, r3
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	200000a4 	.word	0x200000a4

0800a474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a478:	f7ff fff0 	bl	800a45c <HAL_RCC_GetHCLKFreq>
 800a47c:	4602      	mov	r2, r0
 800a47e:	4b05      	ldr	r3, [pc, #20]	@ (800a494 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	0a9b      	lsrs	r3, r3, #10
 800a484:	f003 0307 	and.w	r3, r3, #7
 800a488:	4903      	ldr	r1, [pc, #12]	@ (800a498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a48a:	5ccb      	ldrb	r3, [r1, r3]
 800a48c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a490:	4618      	mov	r0, r3
 800a492:	bd80      	pop	{r7, pc}
 800a494:	40023800 	.word	0x40023800
 800a498:	08013ef8 	.word	0x08013ef8

0800a49c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a4a0:	f7ff ffdc 	bl	800a45c <HAL_RCC_GetHCLKFreq>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	4b05      	ldr	r3, [pc, #20]	@ (800a4bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	0b5b      	lsrs	r3, r3, #13
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	4903      	ldr	r1, [pc, #12]	@ (800a4c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a4b2:	5ccb      	ldrb	r3, [r1, r3]
 800a4b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	40023800 	.word	0x40023800
 800a4c0:	08013ef8 	.word	0x08013ef8

0800a4c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a4c8:	4b06      	ldr	r3, [pc, #24]	@ (800a4e4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d0:	2b80      	cmp	r3, #128	@ 0x80
 800a4d2:	d104      	bne.n	800a4de <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a4d4:	f000 f80a 	bl	800a4ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a4d8:	4b03      	ldr	r3, [pc, #12]	@ (800a4e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a4da:	2280      	movs	r2, #128	@ 0x80
 800a4dc:	701a      	strb	r2, [r3, #0]
  }
}
 800a4de:	bf00      	nop
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40023800 	.word	0x40023800
 800a4e8:	4002380e 	.word	0x4002380e

0800a4ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	e07b      	b.n	800a604 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a510:	2b00      	cmp	r3, #0
 800a512:	d108      	bne.n	800a526 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a51c:	d009      	beq.n	800a532 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	61da      	str	r2, [r3, #28]
 800a524:	e005      	b.n	800a532 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	d106      	bne.n	800a552 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7fb ff23 	bl	8006398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2202      	movs	r2, #2
 800a556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a568:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a57a:	431a      	orrs	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a584:	431a      	orrs	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b6:	ea42 0103 	orr.w	r1, r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	0c1b      	lsrs	r3, r3, #16
 800a5d0:	f003 0104 	and.w	r1, r3, #4
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d8:	f003 0210 	and.w	r2, r3, #16
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	69da      	ldr	r2, [r3, #28]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a5f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08c      	sub	sp, #48	@ 0x30
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a61a:	2301      	movs	r3, #1
 800a61c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a61e:	2300      	movs	r3, #0
 800a620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d101      	bne.n	800a632 <HAL_SPI_TransmitReceive+0x26>
 800a62e:	2302      	movs	r3, #2
 800a630:	e198      	b.n	800a964 <HAL_SPI_TransmitReceive+0x358>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a63a:	f7fc fd41 	bl	80070c0 <HAL_GetTick>
 800a63e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a650:	887b      	ldrh	r3, [r7, #2]
 800a652:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a654:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d00f      	beq.n	800a67c <HAL_SPI_TransmitReceive+0x70>
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a662:	d107      	bne.n	800a674 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d103      	bne.n	800a674 <HAL_SPI_TransmitReceive+0x68>
 800a66c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a670:	2b04      	cmp	r3, #4
 800a672:	d003      	beq.n	800a67c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a674:	2302      	movs	r3, #2
 800a676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a67a:	e16d      	b.n	800a958 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <HAL_SPI_TransmitReceive+0x82>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d002      	beq.n	800a68e <HAL_SPI_TransmitReceive+0x82>
 800a688:	887b      	ldrh	r3, [r7, #2]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d103      	bne.n	800a696 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a694:	e160      	b.n	800a958 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d003      	beq.n	800a6aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2205      	movs	r2, #5
 800a6a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	887a      	ldrh	r2, [r7, #2]
 800a6ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	887a      	ldrh	r2, [r7, #2]
 800a6c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	887a      	ldrh	r2, [r7, #2]
 800a6cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	887a      	ldrh	r2, [r7, #2]
 800a6d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ea:	2b40      	cmp	r3, #64	@ 0x40
 800a6ec:	d007      	beq.n	800a6fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a706:	d17c      	bne.n	800a802 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <HAL_SPI_TransmitReceive+0x10a>
 800a710:	8b7b      	ldrh	r3, [r7, #26]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d16a      	bne.n	800a7ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71a:	881a      	ldrh	r2, [r3, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a726:	1c9a      	adds	r2, r3, #2
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a730:	b29b      	uxth	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	b29a      	uxth	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a73a:	e057      	b.n	800a7ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f003 0302 	and.w	r3, r3, #2
 800a746:	2b02      	cmp	r3, #2
 800a748:	d11b      	bne.n	800a782 <HAL_SPI_TransmitReceive+0x176>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a74e:	b29b      	uxth	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d016      	beq.n	800a782 <HAL_SPI_TransmitReceive+0x176>
 800a754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a756:	2b01      	cmp	r3, #1
 800a758:	d113      	bne.n	800a782 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a75e:	881a      	ldrh	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a76a:	1c9a      	adds	r2, r3, #2
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a774:	b29b      	uxth	r3, r3
 800a776:	3b01      	subs	r3, #1
 800a778:	b29a      	uxth	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d119      	bne.n	800a7c4 <HAL_SPI_TransmitReceive+0x1b8>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a794:	b29b      	uxth	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d014      	beq.n	800a7c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68da      	ldr	r2, [r3, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a4:	b292      	uxth	r2, r2
 800a7a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ac:	1c9a      	adds	r2, r3, #2
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a7c4:	f7fc fc7c 	bl	80070c0 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d80b      	bhi.n	800a7ec <HAL_SPI_TransmitReceive+0x1e0>
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7da:	d007      	beq.n	800a7ec <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800a7ea:	e0b5      	b.n	800a958 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1a2      	bne.n	800a73c <HAL_SPI_TransmitReceive+0x130>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d19d      	bne.n	800a73c <HAL_SPI_TransmitReceive+0x130>
 800a800:	e080      	b.n	800a904 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <HAL_SPI_TransmitReceive+0x204>
 800a80a:	8b7b      	ldrh	r3, [r7, #26]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d16f      	bne.n	800a8f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	330c      	adds	r3, #12
 800a81a:	7812      	ldrb	r2, [r2, #0]
 800a81c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a836:	e05b      	b.n	800a8f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f003 0302 	and.w	r3, r3, #2
 800a842:	2b02      	cmp	r3, #2
 800a844:	d11c      	bne.n	800a880 <HAL_SPI_TransmitReceive+0x274>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d017      	beq.n	800a880 <HAL_SPI_TransmitReceive+0x274>
 800a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a852:	2b01      	cmp	r3, #1
 800a854:	d114      	bne.n	800a880 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	330c      	adds	r3, #12
 800a860:	7812      	ldrb	r2, [r2, #0]
 800a862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a872:	b29b      	uxth	r3, r3
 800a874:	3b01      	subs	r3, #1
 800a876:	b29a      	uxth	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d119      	bne.n	800a8c2 <HAL_SPI_TransmitReceive+0x2b6>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a892:	b29b      	uxth	r3, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d014      	beq.n	800a8c2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a2:	b2d2      	uxtb	r2, r2
 800a8a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a8c2:	f7fc fbfd 	bl	80070c0 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d803      	bhi.n	800a8da <HAL_SPI_TransmitReceive+0x2ce>
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8d8:	d102      	bne.n	800a8e0 <HAL_SPI_TransmitReceive+0x2d4>
 800a8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d107      	bne.n	800a8f0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800a8ee:	e033      	b.n	800a958 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d19e      	bne.n	800a838 <HAL_SPI_TransmitReceive+0x22c>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d199      	bne.n	800a838 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a906:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f000 f8b7 	bl	800aa7c <SPI_EndRxTxTransaction>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2220      	movs	r2, #32
 800a91e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a920:	e01a      	b.n	800a958 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a92a:	2300      	movs	r3, #0
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a94e:	e003      	b.n	800a958 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a960:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a964:	4618      	mov	r0, r3
 800a966:	3730      	adds	r7, #48	@ 0x30
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	4613      	mov	r3, r2
 800a97a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a97c:	f7fc fba0 	bl	80070c0 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4413      	add	r3, r2
 800a98a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a98c:	f7fc fb98 	bl	80070c0 <HAL_GetTick>
 800a990:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a992:	4b39      	ldr	r3, [pc, #228]	@ (800aa78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	015b      	lsls	r3, r3, #5
 800a998:	0d1b      	lsrs	r3, r3, #20
 800a99a:	69fa      	ldr	r2, [r7, #28]
 800a99c:	fb02 f303 	mul.w	r3, r2, r3
 800a9a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9a2:	e054      	b.n	800aa4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9aa:	d050      	beq.n	800aa4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9ac:	f7fc fb88 	bl	80070c0 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d902      	bls.n	800a9c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d13d      	bne.n	800aa3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a9d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9da:	d111      	bne.n	800aa00 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9e4:	d004      	beq.n	800a9f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9ee:	d107      	bne.n	800aa00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa08:	d10f      	bne.n	800aa2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e017      	b.n	800aa6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	4013      	ands	r3, r2
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	bf0c      	ite	eq
 800aa5e:	2301      	moveq	r3, #1
 800aa60:	2300      	movne	r3, #0
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	79fb      	ldrb	r3, [r7, #7]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d19b      	bne.n	800a9a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3720      	adds	r7, #32
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	200000a4 	.word	0x200000a4

0800aa7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	2102      	movs	r1, #2
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff ff6a 	bl	800a96c <SPI_WaitFlagStateUntilTimeout>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa2:	f043 0220 	orr.w	r2, r3, #32
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e032      	b.n	800ab14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aaae:	4b1b      	ldr	r3, [pc, #108]	@ (800ab1c <SPI_EndRxTxTransaction+0xa0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a1b      	ldr	r2, [pc, #108]	@ (800ab20 <SPI_EndRxTxTransaction+0xa4>)
 800aab4:	fba2 2303 	umull	r2, r3, r2, r3
 800aab8:	0d5b      	lsrs	r3, r3, #21
 800aaba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800aabe:	fb02 f303 	mul.w	r3, r2, r3
 800aac2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aacc:	d112      	bne.n	800aaf4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2200      	movs	r2, #0
 800aad6:	2180      	movs	r1, #128	@ 0x80
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7ff ff47 	bl	800a96c <SPI_WaitFlagStateUntilTimeout>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d016      	beq.n	800ab12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae8:	f043 0220 	orr.w	r2, r3, #32
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e00f      	b.n	800ab14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab0a:	2b80      	cmp	r3, #128	@ 0x80
 800ab0c:	d0f2      	beq.n	800aaf4 <SPI_EndRxTxTransaction+0x78>
 800ab0e:	e000      	b.n	800ab12 <SPI_EndRxTxTransaction+0x96>
        break;
 800ab10:	bf00      	nop
  }

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	200000a4 	.word	0x200000a4
 800ab20:	165e9f81 	.word	0x165e9f81

0800ab24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e041      	b.n	800abba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7fb fd40 	bl	80065d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f000 fba8 	bl	800b2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d001      	beq.n	800abdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e046      	b.n	800ac6a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a23      	ldr	r2, [pc, #140]	@ (800ac78 <HAL_TIM_Base_Start+0xb4>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d022      	beq.n	800ac34 <HAL_TIM_Base_Start+0x70>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf6:	d01d      	beq.n	800ac34 <HAL_TIM_Base_Start+0x70>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a1f      	ldr	r2, [pc, #124]	@ (800ac7c <HAL_TIM_Base_Start+0xb8>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d018      	beq.n	800ac34 <HAL_TIM_Base_Start+0x70>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1e      	ldr	r2, [pc, #120]	@ (800ac80 <HAL_TIM_Base_Start+0xbc>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d013      	beq.n	800ac34 <HAL_TIM_Base_Start+0x70>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1c      	ldr	r2, [pc, #112]	@ (800ac84 <HAL_TIM_Base_Start+0xc0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00e      	beq.n	800ac34 <HAL_TIM_Base_Start+0x70>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ac88 <HAL_TIM_Base_Start+0xc4>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d009      	beq.n	800ac34 <HAL_TIM_Base_Start+0x70>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a19      	ldr	r2, [pc, #100]	@ (800ac8c <HAL_TIM_Base_Start+0xc8>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d004      	beq.n	800ac34 <HAL_TIM_Base_Start+0x70>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a18      	ldr	r2, [pc, #96]	@ (800ac90 <HAL_TIM_Base_Start+0xcc>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d111      	bne.n	800ac58 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2b06      	cmp	r3, #6
 800ac44:	d010      	beq.n	800ac68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0201 	orr.w	r2, r2, #1
 800ac54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac56:	e007      	b.n	800ac68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f042 0201 	orr.w	r2, r2, #1
 800ac66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	40010000 	.word	0x40010000
 800ac7c:	40000400 	.word	0x40000400
 800ac80:	40000800 	.word	0x40000800
 800ac84:	40000c00 	.word	0x40000c00
 800ac88:	40010400 	.word	0x40010400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	40001800 	.word	0x40001800

0800ac94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e041      	b.n	800ad2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acac:	b2db      	uxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d106      	bne.n	800acc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7fb fbd4 	bl	8006468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3304      	adds	r3, #4
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f000 faf0 	bl	800b2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d109      	bne.n	800ad58 <HAL_TIM_PWM_Start+0x24>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	bf14      	ite	ne
 800ad50:	2301      	movne	r3, #1
 800ad52:	2300      	moveq	r3, #0
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	e022      	b.n	800ad9e <HAL_TIM_PWM_Start+0x6a>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d109      	bne.n	800ad72 <HAL_TIM_PWM_Start+0x3e>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	bf14      	ite	ne
 800ad6a:	2301      	movne	r3, #1
 800ad6c:	2300      	moveq	r3, #0
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	e015      	b.n	800ad9e <HAL_TIM_PWM_Start+0x6a>
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d109      	bne.n	800ad8c <HAL_TIM_PWM_Start+0x58>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	bf14      	ite	ne
 800ad84:	2301      	movne	r3, #1
 800ad86:	2300      	moveq	r3, #0
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	e008      	b.n	800ad9e <HAL_TIM_PWM_Start+0x6a>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	bf14      	ite	ne
 800ad98:	2301      	movne	r3, #1
 800ad9a:	2300      	moveq	r3, #0
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e07c      	b.n	800aea0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d104      	bne.n	800adb6 <HAL_TIM_PWM_Start+0x82>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adb4:	e013      	b.n	800adde <HAL_TIM_PWM_Start+0xaa>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d104      	bne.n	800adc6 <HAL_TIM_PWM_Start+0x92>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2202      	movs	r2, #2
 800adc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800adc4:	e00b      	b.n	800adde <HAL_TIM_PWM_Start+0xaa>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d104      	bne.n	800add6 <HAL_TIM_PWM_Start+0xa2>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2202      	movs	r2, #2
 800add0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800add4:	e003      	b.n	800adde <HAL_TIM_PWM_Start+0xaa>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2202      	movs	r2, #2
 800adda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2201      	movs	r2, #1
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 fd5c 	bl	800b8a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a2d      	ldr	r2, [pc, #180]	@ (800aea8 <HAL_TIM_PWM_Start+0x174>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d004      	beq.n	800ae00 <HAL_TIM_PWM_Start+0xcc>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a2c      	ldr	r2, [pc, #176]	@ (800aeac <HAL_TIM_PWM_Start+0x178>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d101      	bne.n	800ae04 <HAL_TIM_PWM_Start+0xd0>
 800ae00:	2301      	movs	r3, #1
 800ae02:	e000      	b.n	800ae06 <HAL_TIM_PWM_Start+0xd2>
 800ae04:	2300      	movs	r3, #0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a22      	ldr	r2, [pc, #136]	@ (800aea8 <HAL_TIM_PWM_Start+0x174>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d022      	beq.n	800ae6a <HAL_TIM_PWM_Start+0x136>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae2c:	d01d      	beq.n	800ae6a <HAL_TIM_PWM_Start+0x136>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a1f      	ldr	r2, [pc, #124]	@ (800aeb0 <HAL_TIM_PWM_Start+0x17c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d018      	beq.n	800ae6a <HAL_TIM_PWM_Start+0x136>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a1d      	ldr	r2, [pc, #116]	@ (800aeb4 <HAL_TIM_PWM_Start+0x180>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d013      	beq.n	800ae6a <HAL_TIM_PWM_Start+0x136>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a1c      	ldr	r2, [pc, #112]	@ (800aeb8 <HAL_TIM_PWM_Start+0x184>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d00e      	beq.n	800ae6a <HAL_TIM_PWM_Start+0x136>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a16      	ldr	r2, [pc, #88]	@ (800aeac <HAL_TIM_PWM_Start+0x178>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d009      	beq.n	800ae6a <HAL_TIM_PWM_Start+0x136>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a18      	ldr	r2, [pc, #96]	@ (800aebc <HAL_TIM_PWM_Start+0x188>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d004      	beq.n	800ae6a <HAL_TIM_PWM_Start+0x136>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a16      	ldr	r2, [pc, #88]	@ (800aec0 <HAL_TIM_PWM_Start+0x18c>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d111      	bne.n	800ae8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b06      	cmp	r3, #6
 800ae7a:	d010      	beq.n	800ae9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f042 0201 	orr.w	r2, r2, #1
 800ae8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae8c:	e007      	b.n	800ae9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f042 0201 	orr.w	r2, r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	40010000 	.word	0x40010000
 800aeac:	40010400 	.word	0x40010400
 800aeb0:	40000400 	.word	0x40000400
 800aeb4:	40000800 	.word	0x40000800
 800aeb8:	40000c00 	.word	0x40000c00
 800aebc:	40014000 	.word	0x40014000
 800aec0:	40001800 	.word	0x40001800

0800aec4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2200      	movs	r2, #0
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 fce4 	bl	800b8a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a2e      	ldr	r2, [pc, #184]	@ (800af9c <HAL_TIM_PWM_Stop+0xd8>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d004      	beq.n	800aef0 <HAL_TIM_PWM_Stop+0x2c>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a2d      	ldr	r2, [pc, #180]	@ (800afa0 <HAL_TIM_PWM_Stop+0xdc>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d101      	bne.n	800aef4 <HAL_TIM_PWM_Stop+0x30>
 800aef0:	2301      	movs	r3, #1
 800aef2:	e000      	b.n	800aef6 <HAL_TIM_PWM_Stop+0x32>
 800aef4:	2300      	movs	r3, #0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d017      	beq.n	800af2a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6a1a      	ldr	r2, [r3, #32]
 800af00:	f241 1311 	movw	r3, #4369	@ 0x1111
 800af04:	4013      	ands	r3, r2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10f      	bne.n	800af2a <HAL_TIM_PWM_Stop+0x66>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6a1a      	ldr	r2, [r3, #32]
 800af10:	f240 4344 	movw	r3, #1092	@ 0x444
 800af14:	4013      	ands	r3, r2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d107      	bne.n	800af2a <HAL_TIM_PWM_Stop+0x66>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800af28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6a1a      	ldr	r2, [r3, #32]
 800af30:	f241 1311 	movw	r3, #4369	@ 0x1111
 800af34:	4013      	ands	r3, r2
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10f      	bne.n	800af5a <HAL_TIM_PWM_Stop+0x96>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6a1a      	ldr	r2, [r3, #32]
 800af40:	f240 4344 	movw	r3, #1092	@ 0x444
 800af44:	4013      	ands	r3, r2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d107      	bne.n	800af5a <HAL_TIM_PWM_Stop+0x96>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f022 0201 	bic.w	r2, r2, #1
 800af58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d104      	bne.n	800af6a <HAL_TIM_PWM_Stop+0xa6>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af68:	e013      	b.n	800af92 <HAL_TIM_PWM_Stop+0xce>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d104      	bne.n	800af7a <HAL_TIM_PWM_Stop+0xb6>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af78:	e00b      	b.n	800af92 <HAL_TIM_PWM_Stop+0xce>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	d104      	bne.n	800af8a <HAL_TIM_PWM_Stop+0xc6>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af88:	e003      	b.n	800af92 <HAL_TIM_PWM_Stop+0xce>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2201      	movs	r2, #1
 800af8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	40010000 	.word	0x40010000
 800afa0:	40010400 	.word	0x40010400

0800afa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800afbe:	2302      	movs	r3, #2
 800afc0:	e0ae      	b.n	800b120 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b0c      	cmp	r3, #12
 800afce:	f200 809f 	bhi.w	800b110 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800afd2:	a201      	add	r2, pc, #4	@ (adr r2, 800afd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800b00d 	.word	0x0800b00d
 800afdc:	0800b111 	.word	0x0800b111
 800afe0:	0800b111 	.word	0x0800b111
 800afe4:	0800b111 	.word	0x0800b111
 800afe8:	0800b04d 	.word	0x0800b04d
 800afec:	0800b111 	.word	0x0800b111
 800aff0:	0800b111 	.word	0x0800b111
 800aff4:	0800b111 	.word	0x0800b111
 800aff8:	0800b08f 	.word	0x0800b08f
 800affc:	0800b111 	.word	0x0800b111
 800b000:	0800b111 	.word	0x0800b111
 800b004:	0800b111 	.word	0x0800b111
 800b008:	0800b0cf 	.word	0x0800b0cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	4618      	mov	r0, r3
 800b014:	f000 f9fc 	bl	800b410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	699a      	ldr	r2, [r3, #24]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f042 0208 	orr.w	r2, r2, #8
 800b026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0204 	bic.w	r2, r2, #4
 800b036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6999      	ldr	r1, [r3, #24]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	619a      	str	r2, [r3, #24]
      break;
 800b04a:	e064      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68b9      	ldr	r1, [r7, #8]
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fa4c 	bl	800b4f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	699a      	ldr	r2, [r3, #24]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6999      	ldr	r1, [r3, #24]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	021a      	lsls	r2, r3, #8
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	619a      	str	r2, [r3, #24]
      break;
 800b08c:	e043      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68b9      	ldr	r1, [r7, #8]
 800b094:	4618      	mov	r0, r3
 800b096:	f000 faa1 	bl	800b5dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69da      	ldr	r2, [r3, #28]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f042 0208 	orr.w	r2, r2, #8
 800b0a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	69da      	ldr	r2, [r3, #28]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f022 0204 	bic.w	r2, r2, #4
 800b0b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	69d9      	ldr	r1, [r3, #28]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	691a      	ldr	r2, [r3, #16]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	61da      	str	r2, [r3, #28]
      break;
 800b0cc:	e023      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 faf5 	bl	800b6c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	69da      	ldr	r2, [r3, #28]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	69da      	ldr	r2, [r3, #28]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	69d9      	ldr	r1, [r3, #28]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	021a      	lsls	r2, r3, #8
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	61da      	str	r2, [r3, #28]
      break;
 800b10e:	e002      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	75fb      	strb	r3, [r7, #23]
      break;
 800b114:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_TIM_ConfigClockSource+0x1c>
 800b140:	2302      	movs	r3, #2
 800b142:	e0b4      	b.n	800b2ae <HAL_TIM_ConfigClockSource+0x186>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b16a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b17c:	d03e      	beq.n	800b1fc <HAL_TIM_ConfigClockSource+0xd4>
 800b17e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b182:	f200 8087 	bhi.w	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b18a:	f000 8086 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x172>
 800b18e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b192:	d87f      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b194:	2b70      	cmp	r3, #112	@ 0x70
 800b196:	d01a      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0xa6>
 800b198:	2b70      	cmp	r3, #112	@ 0x70
 800b19a:	d87b      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b19c:	2b60      	cmp	r3, #96	@ 0x60
 800b19e:	d050      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x11a>
 800b1a0:	2b60      	cmp	r3, #96	@ 0x60
 800b1a2:	d877      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1a4:	2b50      	cmp	r3, #80	@ 0x50
 800b1a6:	d03c      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0xfa>
 800b1a8:	2b50      	cmp	r3, #80	@ 0x50
 800b1aa:	d873      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1ac:	2b40      	cmp	r3, #64	@ 0x40
 800b1ae:	d058      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x13a>
 800b1b0:	2b40      	cmp	r3, #64	@ 0x40
 800b1b2:	d86f      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b4:	2b30      	cmp	r3, #48	@ 0x30
 800b1b6:	d064      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1b8:	2b30      	cmp	r3, #48	@ 0x30
 800b1ba:	d86b      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d060      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d867      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d05c      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d05a      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1cc:	e062      	b.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1de:	f000 fb41 	bl	800b864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b1f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	609a      	str	r2, [r3, #8]
      break;
 800b1fa:	e04f      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b20c:	f000 fb2a 	bl	800b864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689a      	ldr	r2, [r3, #8]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b21e:	609a      	str	r2, [r3, #8]
      break;
 800b220:	e03c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b22e:	461a      	mov	r2, r3
 800b230:	f000 fa9e 	bl	800b770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2150      	movs	r1, #80	@ 0x50
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 faf7 	bl	800b82e <TIM_ITRx_SetConfig>
      break;
 800b240:	e02c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b24e:	461a      	mov	r2, r3
 800b250:	f000 fabd 	bl	800b7ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2160      	movs	r1, #96	@ 0x60
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fae7 	bl	800b82e <TIM_ITRx_SetConfig>
      break;
 800b260:	e01c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b26e:	461a      	mov	r2, r3
 800b270:	f000 fa7e 	bl	800b770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2140      	movs	r1, #64	@ 0x40
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fad7 	bl	800b82e <TIM_ITRx_SetConfig>
      break;
 800b280:	e00c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f000 face 	bl	800b82e <TIM_ITRx_SetConfig>
      break;
 800b292:	e003      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	73fb      	strb	r3, [r7, #15]
      break;
 800b298:	e000      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b29a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a46      	ldr	r2, [pc, #280]	@ (800b3e4 <TIM_Base_SetConfig+0x12c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d013      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2d6:	d00f      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a43      	ldr	r2, [pc, #268]	@ (800b3e8 <TIM_Base_SetConfig+0x130>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d00b      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a42      	ldr	r2, [pc, #264]	@ (800b3ec <TIM_Base_SetConfig+0x134>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d007      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a41      	ldr	r2, [pc, #260]	@ (800b3f0 <TIM_Base_SetConfig+0x138>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d003      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a40      	ldr	r2, [pc, #256]	@ (800b3f4 <TIM_Base_SetConfig+0x13c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d108      	bne.n	800b30a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a35      	ldr	r2, [pc, #212]	@ (800b3e4 <TIM_Base_SetConfig+0x12c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d02b      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b318:	d027      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a32      	ldr	r2, [pc, #200]	@ (800b3e8 <TIM_Base_SetConfig+0x130>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d023      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a31      	ldr	r2, [pc, #196]	@ (800b3ec <TIM_Base_SetConfig+0x134>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d01f      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a30      	ldr	r2, [pc, #192]	@ (800b3f0 <TIM_Base_SetConfig+0x138>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d01b      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a2f      	ldr	r2, [pc, #188]	@ (800b3f4 <TIM_Base_SetConfig+0x13c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d017      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a2e      	ldr	r2, [pc, #184]	@ (800b3f8 <TIM_Base_SetConfig+0x140>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d013      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a2d      	ldr	r2, [pc, #180]	@ (800b3fc <TIM_Base_SetConfig+0x144>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d00f      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a2c      	ldr	r2, [pc, #176]	@ (800b400 <TIM_Base_SetConfig+0x148>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d00b      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a2b      	ldr	r2, [pc, #172]	@ (800b404 <TIM_Base_SetConfig+0x14c>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d007      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a2a      	ldr	r2, [pc, #168]	@ (800b408 <TIM_Base_SetConfig+0x150>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d003      	beq.n	800b36a <TIM_Base_SetConfig+0xb2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a29      	ldr	r2, [pc, #164]	@ (800b40c <TIM_Base_SetConfig+0x154>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d108      	bne.n	800b37c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a10      	ldr	r2, [pc, #64]	@ (800b3e4 <TIM_Base_SetConfig+0x12c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d003      	beq.n	800b3b0 <TIM_Base_SetConfig+0xf8>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a12      	ldr	r2, [pc, #72]	@ (800b3f4 <TIM_Base_SetConfig+0x13c>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d103      	bne.n	800b3b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d105      	bne.n	800b3d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f023 0201 	bic.w	r2, r3, #1
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	611a      	str	r2, [r3, #16]
  }
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40000400 	.word	0x40000400
 800b3ec:	40000800 	.word	0x40000800
 800b3f0:	40000c00 	.word	0x40000c00
 800b3f4:	40010400 	.word	0x40010400
 800b3f8:	40014000 	.word	0x40014000
 800b3fc:	40014400 	.word	0x40014400
 800b400:	40014800 	.word	0x40014800
 800b404:	40001800 	.word	0x40001800
 800b408:	40001c00 	.word	0x40001c00
 800b40c:	40002000 	.word	0x40002000

0800b410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	f023 0201 	bic.w	r2, r3, #1
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b43e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f023 0303 	bic.w	r3, r3, #3
 800b446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f023 0302 	bic.w	r3, r3, #2
 800b458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4a20      	ldr	r2, [pc, #128]	@ (800b4e8 <TIM_OC1_SetConfig+0xd8>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d003      	beq.n	800b474 <TIM_OC1_SetConfig+0x64>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a1f      	ldr	r2, [pc, #124]	@ (800b4ec <TIM_OC1_SetConfig+0xdc>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d10c      	bne.n	800b48e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	f023 0308 	bic.w	r3, r3, #8
 800b47a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	697a      	ldr	r2, [r7, #20]
 800b482:	4313      	orrs	r3, r2
 800b484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f023 0304 	bic.w	r3, r3, #4
 800b48c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a15      	ldr	r2, [pc, #84]	@ (800b4e8 <TIM_OC1_SetConfig+0xd8>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d003      	beq.n	800b49e <TIM_OC1_SetConfig+0x8e>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a14      	ldr	r2, [pc, #80]	@ (800b4ec <TIM_OC1_SetConfig+0xdc>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d111      	bne.n	800b4c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	621a      	str	r2, [r3, #32]
}
 800b4dc:	bf00      	nop
 800b4de:	371c      	adds	r7, #28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	40010000 	.word	0x40010000
 800b4ec:	40010400 	.word	0x40010400

0800b4f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b087      	sub	sp, #28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a1b      	ldr	r3, [r3, #32]
 800b4fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a1b      	ldr	r3, [r3, #32]
 800b504:	f023 0210 	bic.w	r2, r3, #16
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	021b      	lsls	r3, r3, #8
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	4313      	orrs	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f023 0320 	bic.w	r3, r3, #32
 800b53a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	4313      	orrs	r3, r2
 800b546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	4a22      	ldr	r2, [pc, #136]	@ (800b5d4 <TIM_OC2_SetConfig+0xe4>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d003      	beq.n	800b558 <TIM_OC2_SetConfig+0x68>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a21      	ldr	r2, [pc, #132]	@ (800b5d8 <TIM_OC2_SetConfig+0xe8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d10d      	bne.n	800b574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b55e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	011b      	lsls	r3, r3, #4
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	4313      	orrs	r3, r2
 800b56a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b572:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a17      	ldr	r2, [pc, #92]	@ (800b5d4 <TIM_OC2_SetConfig+0xe4>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d003      	beq.n	800b584 <TIM_OC2_SetConfig+0x94>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a16      	ldr	r2, [pc, #88]	@ (800b5d8 <TIM_OC2_SetConfig+0xe8>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d113      	bne.n	800b5ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b58a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	621a      	str	r2, [r3, #32]
}
 800b5c6:	bf00      	nop
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	40010000 	.word	0x40010000
 800b5d8:	40010400 	.word	0x40010400

0800b5dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a1b      	ldr	r3, [r3, #32]
 800b5f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 0303 	bic.w	r3, r3, #3
 800b612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	4313      	orrs	r3, r2
 800b630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a21      	ldr	r2, [pc, #132]	@ (800b6bc <TIM_OC3_SetConfig+0xe0>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d003      	beq.n	800b642 <TIM_OC3_SetConfig+0x66>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a20      	ldr	r2, [pc, #128]	@ (800b6c0 <TIM_OC3_SetConfig+0xe4>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d10d      	bne.n	800b65e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	021b      	lsls	r3, r3, #8
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	4313      	orrs	r3, r2
 800b654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b65c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a16      	ldr	r2, [pc, #88]	@ (800b6bc <TIM_OC3_SetConfig+0xe0>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d003      	beq.n	800b66e <TIM_OC3_SetConfig+0x92>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a15      	ldr	r2, [pc, #84]	@ (800b6c0 <TIM_OC3_SetConfig+0xe4>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d113      	bne.n	800b696 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b67c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4313      	orrs	r3, r2
 800b688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	011b      	lsls	r3, r3, #4
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	4313      	orrs	r3, r2
 800b694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	693a      	ldr	r2, [r7, #16]
 800b69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	621a      	str	r2, [r3, #32]
}
 800b6b0:	bf00      	nop
 800b6b2:	371c      	adds	r7, #28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	40010000 	.word	0x40010000
 800b6c0:	40010400 	.word	0x40010400

0800b6c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b087      	sub	sp, #28
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a1b      	ldr	r3, [r3, #32]
 800b6d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	021b      	lsls	r3, r3, #8
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4313      	orrs	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b70e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	031b      	lsls	r3, r3, #12
 800b716:	693a      	ldr	r2, [r7, #16]
 800b718:	4313      	orrs	r3, r2
 800b71a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a12      	ldr	r2, [pc, #72]	@ (800b768 <TIM_OC4_SetConfig+0xa4>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d003      	beq.n	800b72c <TIM_OC4_SetConfig+0x68>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a11      	ldr	r2, [pc, #68]	@ (800b76c <TIM_OC4_SetConfig+0xa8>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d109      	bne.n	800b740 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	019b      	lsls	r3, r3, #6
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	621a      	str	r2, [r3, #32]
}
 800b75a:	bf00      	nop
 800b75c:	371c      	adds	r7, #28
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	40010000 	.word	0x40010000
 800b76c:	40010400 	.word	0x40010400

0800b770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	f023 0201 	bic.w	r2, r3, #1
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	699b      	ldr	r3, [r3, #24]
 800b792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b79a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	011b      	lsls	r3, r3, #4
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f023 030a 	bic.w	r3, r3, #10
 800b7ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	621a      	str	r2, [r3, #32]
}
 800b7c2:	bf00      	nop
 800b7c4:	371c      	adds	r7, #28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b087      	sub	sp, #28
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	60f8      	str	r0, [r7, #12]
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6a1b      	ldr	r3, [r3, #32]
 800b7e4:	f023 0210 	bic.w	r2, r3, #16
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b7f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	031b      	lsls	r3, r3, #12
 800b7fe:	693a      	ldr	r2, [r7, #16]
 800b800:	4313      	orrs	r3, r2
 800b802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b80a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	4313      	orrs	r3, r2
 800b814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	621a      	str	r2, [r3, #32]
}
 800b822:	bf00      	nop
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	f043 0307 	orr.w	r3, r3, #7
 800b850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	609a      	str	r2, [r3, #8]
}
 800b858:	bf00      	nop
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b87e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	021a      	lsls	r2, r3, #8
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	431a      	orrs	r2, r3
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	4313      	orrs	r3, r2
 800b890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	609a      	str	r2, [r3, #8]
}
 800b898:	bf00      	nop
 800b89a:	371c      	adds	r7, #28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f003 031f 	and.w	r3, r3, #31
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6a1a      	ldr	r2, [r3, #32]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	43db      	mvns	r3, r3
 800b8c6:	401a      	ands	r2, r3
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6a1a      	ldr	r2, [r3, #32]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	f003 031f 	and.w	r3, r3, #31
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8dc:	431a      	orrs	r2, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	621a      	str	r2, [r3, #32]
}
 800b8e2:	bf00      	nop
 800b8e4:	371c      	adds	r7, #28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
	...

0800b8f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b900:	2b01      	cmp	r3, #1
 800b902:	d101      	bne.n	800b908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b904:	2302      	movs	r3, #2
 800b906:	e05a      	b.n	800b9be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2202      	movs	r2, #2
 800b914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b92e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	4313      	orrs	r3, r2
 800b938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a21      	ldr	r2, [pc, #132]	@ (800b9cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d022      	beq.n	800b992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b954:	d01d      	beq.n	800b992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a1d      	ldr	r2, [pc, #116]	@ (800b9d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d018      	beq.n	800b992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a1b      	ldr	r2, [pc, #108]	@ (800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d013      	beq.n	800b992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a1a      	ldr	r2, [pc, #104]	@ (800b9d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d00e      	beq.n	800b992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a18      	ldr	r2, [pc, #96]	@ (800b9dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d009      	beq.n	800b992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a17      	ldr	r2, [pc, #92]	@ (800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d004      	beq.n	800b992 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a15      	ldr	r2, [pc, #84]	@ (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d10c      	bne.n	800b9ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	40010000 	.word	0x40010000
 800b9d0:	40000400 	.word	0x40000400
 800b9d4:	40000800 	.word	0x40000800
 800b9d8:	40000c00 	.word	0x40000c00
 800b9dc:	40010400 	.word	0x40010400
 800b9e0:	40014000 	.word	0x40014000
 800b9e4:	40001800 	.word	0x40001800

0800b9e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e03d      	b.n	800ba80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d101      	bne.n	800ba9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e042      	b.n	800bb24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d106      	bne.n	800bab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7fa fef2 	bl	800689c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2224      	movs	r2, #36	@ 0x24
 800babc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68da      	ldr	r2, [r3, #12]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 ff77 	bl	800c9c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	691a      	ldr	r2, [r3, #16]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	695a      	ldr	r2, [r3, #20]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800baf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68da      	ldr	r2, [r3, #12]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2220      	movs	r2, #32
 800bb10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2220      	movs	r2, #32
 800bb18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08c      	sub	sp, #48	@ 0x30
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	4613      	mov	r3, r2
 800bb38:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b20      	cmp	r3, #32
 800bb44:	d156      	bne.n	800bbf4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <HAL_UART_Transmit_DMA+0x26>
 800bb4c:	88fb      	ldrh	r3, [r7, #6]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	e04f      	b.n	800bbf6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	88fa      	ldrh	r2, [r7, #6]
 800bb60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	88fa      	ldrh	r2, [r7, #6]
 800bb66:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2221      	movs	r2, #33	@ 0x21
 800bb72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb7a:	4a21      	ldr	r2, [pc, #132]	@ (800bc00 <HAL_UART_Transmit_DMA+0xd4>)
 800bb7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb82:	4a20      	ldr	r2, [pc, #128]	@ (800bc04 <HAL_UART_Transmit_DMA+0xd8>)
 800bb84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8a:	4a1f      	ldr	r2, [pc, #124]	@ (800bc08 <HAL_UART_Transmit_DMA+0xdc>)
 800bb8c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb92:	2200      	movs	r2, #0
 800bb94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bb96:	f107 0308 	add.w	r3, r7, #8
 800bb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba2:	6819      	ldr	r1, [r3, #0]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	461a      	mov	r2, r3
 800bbac:	88fb      	ldrh	r3, [r7, #6]
 800bbae:	f7fc fadf 	bl	8008170 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bbba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3314      	adds	r3, #20
 800bbc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	e853 3f00 	ldrex	r3, [r3]
 800bbca:	617b      	str	r3, [r7, #20]
   return(result);
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	3314      	adds	r3, #20
 800bbda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbdc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	6a39      	ldr	r1, [r7, #32]
 800bbe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe4:	e841 2300 	strex	r3, r2, [r1]
 800bbe8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e5      	bne.n	800bbbc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	e000      	b.n	800bbf6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800bbf4:	2302      	movs	r3, #2
  }
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3730      	adds	r7, #48	@ 0x30
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	0800c251 	.word	0x0800c251
 800bc04:	0800c2eb 	.word	0x0800c2eb
 800bc08:	0800c46f 	.word	0x0800c46f

0800bc0c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08c      	sub	sp, #48	@ 0x30
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b20      	cmp	r3, #32
 800bc24:	d14a      	bne.n	800bcbc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bc2c:	88fb      	ldrh	r3, [r7, #6]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e043      	b.n	800bcbe <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bc42:	88fb      	ldrh	r3, [r7, #6]
 800bc44:	461a      	mov	r2, r3
 800bc46:	68b9      	ldr	r1, [r7, #8]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fc5b 	bl	800c504 <UART_Start_Receive_DMA>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bc54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d12c      	bne.n	800bcb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d125      	bne.n	800bcb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc64:	2300      	movs	r3, #0
 800bc66:	613b      	str	r3, [r7, #16]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	613b      	str	r3, [r7, #16]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	613b      	str	r3, [r7, #16]
 800bc78:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	330c      	adds	r3, #12
 800bc80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	e853 3f00 	ldrex	r3, [r3]
 800bc88:	617b      	str	r3, [r7, #20]
   return(result);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f043 0310 	orr.w	r3, r3, #16
 800bc90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	330c      	adds	r3, #12
 800bc98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc9a:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9e:	6a39      	ldr	r1, [r7, #32]
 800bca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca2:	e841 2300 	strex	r3, r2, [r1]
 800bca6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1e5      	bne.n	800bc7a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800bcae:	e002      	b.n	800bcb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bcb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcba:	e000      	b.n	800bcbe <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800bcbc:	2302      	movs	r3, #2
  }
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3730      	adds	r7, #48	@ 0x30
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b0ba      	sub	sp, #232	@ 0xe8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bcfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bd06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10f      	bne.n	800bd2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd12:	f003 0320 	and.w	r3, r3, #32
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d009      	beq.n	800bd2e <HAL_UART_IRQHandler+0x66>
 800bd1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd1e:	f003 0320 	and.w	r3, r3, #32
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fd8d 	bl	800c846 <UART_Receive_IT>
      return;
 800bd2c:	e25b      	b.n	800c1e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 80de 	beq.w	800bef4 <HAL_UART_IRQHandler+0x22c>
 800bd38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d106      	bne.n	800bd52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 80d1 	beq.w	800bef4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00b      	beq.n	800bd76 <HAL_UART_IRQHandler+0xae>
 800bd5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d005      	beq.n	800bd76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd6e:	f043 0201 	orr.w	r2, r3, #1
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00b      	beq.n	800bd9a <HAL_UART_IRQHandler+0xd2>
 800bd82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd92:	f043 0202 	orr.w	r2, r3, #2
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <HAL_UART_IRQHandler+0xf6>
 800bda6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d005      	beq.n	800bdbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdb6:	f043 0204 	orr.w	r2, r3, #4
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdc2:	f003 0308 	and.w	r3, r3, #8
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d011      	beq.n	800bdee <HAL_UART_IRQHandler+0x126>
 800bdca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdce:	f003 0320 	and.w	r3, r3, #32
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d105      	bne.n	800bde2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bde6:	f043 0208 	orr.w	r2, r3, #8
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f000 81f2 	beq.w	800c1dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bdf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdfc:	f003 0320 	and.w	r3, r3, #32
 800be00:	2b00      	cmp	r3, #0
 800be02:	d008      	beq.n	800be16 <HAL_UART_IRQHandler+0x14e>
 800be04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be08:	f003 0320 	and.w	r3, r3, #32
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 fd18 	bl	800c846 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be20:	2b40      	cmp	r3, #64	@ 0x40
 800be22:	bf0c      	ite	eq
 800be24:	2301      	moveq	r3, #1
 800be26:	2300      	movne	r3, #0
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be32:	f003 0308 	and.w	r3, r3, #8
 800be36:	2b00      	cmp	r3, #0
 800be38:	d103      	bne.n	800be42 <HAL_UART_IRQHandler+0x17a>
 800be3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d04f      	beq.n	800bee2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fc20 	bl	800c688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be52:	2b40      	cmp	r3, #64	@ 0x40
 800be54:	d141      	bne.n	800beda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	3314      	adds	r3, #20
 800be5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be64:	e853 3f00 	ldrex	r3, [r3]
 800be68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800be6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3314      	adds	r3, #20
 800be7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800be82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800be86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800be8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be92:	e841 2300 	strex	r3, r2, [r1]
 800be96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800be9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1d9      	bne.n	800be56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d013      	beq.n	800bed2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beae:	4a7e      	ldr	r2, [pc, #504]	@ (800c0a8 <HAL_UART_IRQHandler+0x3e0>)
 800beb0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fc fa22 	bl	8008300 <HAL_DMA_Abort_IT>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d016      	beq.n	800bef0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800becc:	4610      	mov	r0, r2
 800bece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed0:	e00e      	b.n	800bef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f9b2 	bl	800c23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed8:	e00a      	b.n	800bef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f9ae 	bl	800c23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee0:	e006      	b.n	800bef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f9aa 	bl	800c23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800beee:	e175      	b.n	800c1dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef0:	bf00      	nop
    return;
 800bef2:	e173      	b.n	800c1dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef8:	2b01      	cmp	r3, #1
 800befa:	f040 814f 	bne.w	800c19c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800befe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf02:	f003 0310 	and.w	r3, r3, #16
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f000 8148 	beq.w	800c19c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf10:	f003 0310 	and.w	r3, r3, #16
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 8141 	beq.w	800c19c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60bb      	str	r3, [r7, #8]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	60bb      	str	r3, [r7, #8]
 800bf2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf3a:	2b40      	cmp	r3, #64	@ 0x40
 800bf3c:	f040 80b6 	bne.w	800c0ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 8145 	beq.w	800c1e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	f080 813e 	bcs.w	800c1e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf76:	f000 8088 	beq.w	800c08a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	330c      	adds	r3, #12
 800bf80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf88:	e853 3f00 	ldrex	r3, [r3]
 800bf8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bf90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bfa6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bfaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bfb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bfb6:	e841 2300 	strex	r3, r2, [r1]
 800bfba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bfbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1d9      	bne.n	800bf7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3314      	adds	r3, #20
 800bfcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfd0:	e853 3f00 	ldrex	r3, [r3]
 800bfd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bfd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfd8:	f023 0301 	bic.w	r3, r3, #1
 800bfdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3314      	adds	r3, #20
 800bfe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bfea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bfee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bff2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e1      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3314      	adds	r3, #20
 800c008:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	3314      	adds	r3, #20
 800c022:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c026:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c028:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c02c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c02e:	e841 2300 	strex	r3, r2, [r1]
 800c032:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1e3      	bne.n	800c002 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	330c      	adds	r3, #12
 800c04e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c052:	e853 3f00 	ldrex	r3, [r3]
 800c056:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c05a:	f023 0310 	bic.w	r3, r3, #16
 800c05e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	330c      	adds	r3, #12
 800c068:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c06c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c06e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c070:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c072:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c074:	e841 2300 	strex	r3, r2, [r1]
 800c078:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e3      	bne.n	800c048 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c084:	4618      	mov	r0, r3
 800c086:	f7fc f8cb 	bl	8008220 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2202      	movs	r2, #2
 800c08e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c098:	b29b      	uxth	r3, r3
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7f6 fc4f 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0a6:	e09b      	b.n	800c1e0 <HAL_UART_IRQHandler+0x518>
 800c0a8:	0800c74f 	.word	0x0800c74f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 808e 	beq.w	800c1e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c0c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 8089 	beq.w	800c1e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	330c      	adds	r3, #12
 800c0d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c0f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c0f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e3      	bne.n	800c0d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	3314      	adds	r3, #20
 800c110:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	e853 3f00 	ldrex	r3, [r3]
 800c118:	623b      	str	r3, [r7, #32]
   return(result);
 800c11a:	6a3b      	ldr	r3, [r7, #32]
 800c11c:	f023 0301 	bic.w	r3, r3, #1
 800c120:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	3314      	adds	r3, #20
 800c12a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c12e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c136:	e841 2300 	strex	r3, r2, [r1]
 800c13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1e3      	bne.n	800c10a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2220      	movs	r2, #32
 800c146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	330c      	adds	r3, #12
 800c156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f023 0310 	bic.w	r3, r3, #16
 800c166:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	330c      	adds	r3, #12
 800c170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c174:	61fa      	str	r2, [r7, #28]
 800c176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	69b9      	ldr	r1, [r7, #24]
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	617b      	str	r3, [r7, #20]
   return(result);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e3      	bne.n	800c150 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c18e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7f6 fbd5 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c19a:	e023      	b.n	800c1e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d009      	beq.n	800c1bc <HAL_UART_IRQHandler+0x4f4>
 800c1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d003      	beq.n	800c1bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fade 	bl	800c776 <UART_Transmit_IT>
    return;
 800c1ba:	e014      	b.n	800c1e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00e      	beq.n	800c1e6 <HAL_UART_IRQHandler+0x51e>
 800c1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d008      	beq.n	800c1e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fb1e 	bl	800c816 <UART_EndTransmit_IT>
    return;
 800c1da:	e004      	b.n	800c1e6 <HAL_UART_IRQHandler+0x51e>
    return;
 800c1dc:	bf00      	nop
 800c1de:	e002      	b.n	800c1e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c1e0:	bf00      	nop
 800c1e2:	e000      	b.n	800c1e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c1e4:	bf00      	nop
  }
}
 800c1e6:	37e8      	adds	r7, #232	@ 0xe8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c1f4:	bf00      	nop
 800c1f6:	370c      	adds	r7, #12
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c208:	bf00      	nop
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b090      	sub	sp, #64	@ 0x40
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d137      	bne.n	800c2dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c26e:	2200      	movs	r2, #0
 800c270:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3314      	adds	r3, #20
 800c278:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27c:	e853 3f00 	ldrex	r3, [r3]
 800c280:	623b      	str	r3, [r7, #32]
   return(result);
 800c282:	6a3b      	ldr	r3, [r7, #32]
 800c284:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c288:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3314      	adds	r3, #20
 800c290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c292:	633a      	str	r2, [r7, #48]	@ 0x30
 800c294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e5      	bne.n	800c272 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	330c      	adds	r3, #12
 800c2ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	330c      	adds	r3, #12
 800c2c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2c6:	61fa      	str	r2, [r7, #28]
 800c2c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	69b9      	ldr	r1, [r7, #24]
 800c2cc:	69fa      	ldr	r2, [r7, #28]
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	617b      	str	r3, [r7, #20]
   return(result);
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e5      	bne.n	800c2a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2da:	e002      	b.n	800c2e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c2dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c2de:	f7ff ff85 	bl	800c1ec <HAL_UART_TxCpltCallback>
}
 800c2e2:	bf00      	nop
 800c2e4:	3740      	adds	r7, #64	@ 0x40
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b084      	sub	sp, #16
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f7ff ff81 	bl	800c200 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2fe:	bf00      	nop
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b09c      	sub	sp, #112	@ 0x70
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c312:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d172      	bne.n	800c408 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c324:	2200      	movs	r2, #0
 800c326:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	330c      	adds	r3, #12
 800c32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c332:	e853 3f00 	ldrex	r3, [r3]
 800c336:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c33a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c33e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	330c      	adds	r3, #12
 800c346:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c348:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c34a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c34e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c350:	e841 2300 	strex	r3, r2, [r1]
 800c354:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e5      	bne.n	800c328 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c35c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3314      	adds	r3, #20
 800c362:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	667b      	str	r3, [r7, #100]	@ 0x64
 800c374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3314      	adds	r3, #20
 800c37a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c37c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c37e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c384:	e841 2300 	strex	r3, r2, [r1]
 800c388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1e5      	bne.n	800c35c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	3314      	adds	r3, #20
 800c396:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39a:	e853 3f00 	ldrex	r3, [r3]
 800c39e:	623b      	str	r3, [r7, #32]
   return(result);
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c3a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3314      	adds	r3, #20
 800c3ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c3b0:	633a      	str	r2, [r7, #48]	@ 0x30
 800c3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3b8:	e841 2300 	strex	r3, r2, [r1]
 800c3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e5      	bne.n	800c390 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c3c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d119      	bne.n	800c408 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	330c      	adds	r3, #12
 800c3da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	e853 3f00 	ldrex	r3, [r3]
 800c3e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f023 0310 	bic.w	r3, r3, #16
 800c3ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	330c      	adds	r3, #12
 800c3f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c3f4:	61fa      	str	r2, [r7, #28]
 800c3f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	69b9      	ldr	r1, [r7, #24]
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	e841 2300 	strex	r3, r2, [r1]
 800c400:	617b      	str	r3, [r7, #20]
   return(result);
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e5      	bne.n	800c3d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c40a:	2200      	movs	r2, #0
 800c40c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c40e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c412:	2b01      	cmp	r3, #1
 800c414:	d106      	bne.n	800c424 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c418:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c41a:	4619      	mov	r1, r3
 800c41c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c41e:	f7f6 fa91 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c422:	e002      	b.n	800c42a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c424:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c426:	f7ff fef5 	bl	800c214 <HAL_UART_RxCpltCallback>
}
 800c42a:	bf00      	nop
 800c42c:	3770      	adds	r7, #112	@ 0x70
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2201      	movs	r2, #1
 800c444:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d108      	bne.n	800c460 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c452:	085b      	lsrs	r3, r3, #1
 800c454:	b29b      	uxth	r3, r3
 800c456:	4619      	mov	r1, r3
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f7f6 fa73 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c45e:	e002      	b.n	800c466 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f7ff fee1 	bl	800c228 <HAL_UART_RxHalfCpltCallback>
}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c476:	2300      	movs	r3, #0
 800c478:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c47e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c48a:	2b80      	cmp	r3, #128	@ 0x80
 800c48c:	bf0c      	ite	eq
 800c48e:	2301      	moveq	r3, #1
 800c490:	2300      	movne	r3, #0
 800c492:	b2db      	uxtb	r3, r3
 800c494:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b21      	cmp	r3, #33	@ 0x21
 800c4a0:	d108      	bne.n	800c4b4 <UART_DMAError+0x46>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d005      	beq.n	800c4b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c4ae:	68b8      	ldr	r0, [r7, #8]
 800c4b0:	f000 f8c2 	bl	800c638 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	695b      	ldr	r3, [r3, #20]
 800c4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4be:	2b40      	cmp	r3, #64	@ 0x40
 800c4c0:	bf0c      	ite	eq
 800c4c2:	2301      	moveq	r3, #1
 800c4c4:	2300      	movne	r3, #0
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b22      	cmp	r3, #34	@ 0x22
 800c4d4:	d108      	bne.n	800c4e8 <UART_DMAError+0x7a>
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d005      	beq.n	800c4e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c4e2:	68b8      	ldr	r0, [r7, #8]
 800c4e4:	f000 f8d0 	bl	800c688 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ec:	f043 0210 	orr.w	r2, r3, #16
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4f4:	68b8      	ldr	r0, [r7, #8]
 800c4f6:	f7ff fea1 	bl	800c23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4fa:	bf00      	nop
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
	...

0800c504 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b098      	sub	sp, #96	@ 0x60
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	4613      	mov	r3, r2
 800c510:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	88fa      	ldrh	r2, [r7, #6]
 800c51c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2200      	movs	r2, #0
 800c522:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2222      	movs	r2, #34	@ 0x22
 800c528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c530:	4a3e      	ldr	r2, [pc, #248]	@ (800c62c <UART_Start_Receive_DMA+0x128>)
 800c532:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c538:	4a3d      	ldr	r2, [pc, #244]	@ (800c630 <UART_Start_Receive_DMA+0x12c>)
 800c53a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c540:	4a3c      	ldr	r2, [pc, #240]	@ (800c634 <UART_Start_Receive_DMA+0x130>)
 800c542:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c548:	2200      	movs	r2, #0
 800c54a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c54c:	f107 0308 	add.w	r3, r7, #8
 800c550:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4619      	mov	r1, r3
 800c55e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	88fb      	ldrh	r3, [r7, #6]
 800c564:	f7fb fe04 	bl	8008170 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c568:	2300      	movs	r3, #0
 800c56a:	613b      	str	r3, [r7, #16]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	613b      	str	r3, [r7, #16]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	613b      	str	r3, [r7, #16]
 800c57c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d019      	beq.n	800c5ba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	330c      	adds	r3, #12
 800c58c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c590:	e853 3f00 	ldrex	r3, [r3]
 800c594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c59c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	330c      	adds	r3, #12
 800c5a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c5ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5ae:	e841 2300 	strex	r3, r2, [r1]
 800c5b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c5b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1e5      	bne.n	800c586 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3314      	adds	r3, #20
 800c5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c4:	e853 3f00 	ldrex	r3, [r3]
 800c5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5cc:	f043 0301 	orr.w	r3, r3, #1
 800c5d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3314      	adds	r3, #20
 800c5d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c5da:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c5e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5e2:	e841 2300 	strex	r3, r2, [r1]
 800c5e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e5      	bne.n	800c5ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3314      	adds	r3, #20
 800c5f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c604:	653b      	str	r3, [r7, #80]	@ 0x50
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	3314      	adds	r3, #20
 800c60c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c60e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c612:	6a39      	ldr	r1, [r7, #32]
 800c614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1e5      	bne.n	800c5ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3760      	adds	r7, #96	@ 0x60
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	0800c307 	.word	0x0800c307
 800c630:	0800c433 	.word	0x0800c433
 800c634:	0800c46f 	.word	0x0800c46f

0800c638 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c638:	b480      	push	{r7}
 800c63a:	b089      	sub	sp, #36	@ 0x24
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	330c      	adds	r3, #12
 800c646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	e853 3f00 	ldrex	r3, [r3]
 800c64e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c656:	61fb      	str	r3, [r7, #28]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	330c      	adds	r3, #12
 800c65e:	69fa      	ldr	r2, [r7, #28]
 800c660:	61ba      	str	r2, [r7, #24]
 800c662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	6979      	ldr	r1, [r7, #20]
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	e841 2300 	strex	r3, r2, [r1]
 800c66c:	613b      	str	r3, [r7, #16]
   return(result);
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e5      	bne.n	800c640 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2220      	movs	r2, #32
 800c678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c67c:	bf00      	nop
 800c67e:	3724      	adds	r7, #36	@ 0x24
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c688:	b480      	push	{r7}
 800c68a:	b095      	sub	sp, #84	@ 0x54
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	330c      	adds	r3, #12
 800c696:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c69a:	e853 3f00 	ldrex	r3, [r3]
 800c69e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	330c      	adds	r3, #12
 800c6ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6b0:	643a      	str	r2, [r7, #64]	@ 0x40
 800c6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c6b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e5      	bne.n	800c690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3314      	adds	r3, #20
 800c6ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	e853 3f00 	ldrex	r3, [r3]
 800c6d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	f023 0301 	bic.w	r3, r3, #1
 800c6da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3314      	adds	r3, #20
 800c6e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6ec:	e841 2300 	strex	r3, r2, [r1]
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1e5      	bne.n	800c6c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d119      	bne.n	800c734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	330c      	adds	r3, #12
 800c706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	e853 3f00 	ldrex	r3, [r3]
 800c70e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f023 0310 	bic.w	r3, r3, #16
 800c716:	647b      	str	r3, [r7, #68]	@ 0x44
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	330c      	adds	r3, #12
 800c71e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c720:	61ba      	str	r2, [r7, #24]
 800c722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c724:	6979      	ldr	r1, [r7, #20]
 800c726:	69ba      	ldr	r2, [r7, #24]
 800c728:	e841 2300 	strex	r3, r2, [r1]
 800c72c:	613b      	str	r3, [r7, #16]
   return(result);
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1e5      	bne.n	800c700 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2220      	movs	r2, #32
 800c738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c742:	bf00      	nop
 800c744:	3754      	adds	r7, #84	@ 0x54
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c75a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f7ff fd67 	bl	800c23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c776:	b480      	push	{r7}
 800c778:	b085      	sub	sp, #20
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b21      	cmp	r3, #33	@ 0x21
 800c788:	d13e      	bne.n	800c808 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c792:	d114      	bne.n	800c7be <UART_Transmit_IT+0x48>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d110      	bne.n	800c7be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a1b      	ldr	r3, [r3, #32]
 800c7a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	1c9a      	adds	r2, r3, #2
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	621a      	str	r2, [r3, #32]
 800c7bc:	e008      	b.n	800c7d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	1c59      	adds	r1, r3, #1
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	6211      	str	r1, [r2, #32]
 800c7c8:	781a      	ldrb	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	4619      	mov	r1, r3
 800c7de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10f      	bne.n	800c804 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c7f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68da      	ldr	r2, [r3, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c802:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c804:	2300      	movs	r3, #0
 800c806:	e000      	b.n	800c80a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c808:	2302      	movs	r3, #2
  }
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3714      	adds	r7, #20
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr

0800c816 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68da      	ldr	r2, [r3, #12]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c82c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2220      	movs	r2, #32
 800c832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff fcd8 	bl	800c1ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b08c      	sub	sp, #48	@ 0x30
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b22      	cmp	r3, #34	@ 0x22
 800c858:	f040 80ae 	bne.w	800c9b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c864:	d117      	bne.n	800c896 <UART_Receive_IT+0x50>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d113      	bne.n	800c896 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c86e:	2300      	movs	r3, #0
 800c870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c876:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c884:	b29a      	uxth	r2, r3
 800c886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c888:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c88e:	1c9a      	adds	r2, r3, #2
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	629a      	str	r2, [r3, #40]	@ 0x28
 800c894:	e026      	b.n	800c8e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c89a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c89c:	2300      	movs	r3, #0
 800c89e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8a8:	d007      	beq.n	800c8ba <UART_Receive_IT+0x74>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <UART_Receive_IT+0x82>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c4:	701a      	strb	r2, [r3, #0]
 800c8c6:	e008      	b.n	800c8da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d15d      	bne.n	800c9b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	68da      	ldr	r2, [r3, #12]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f022 0220 	bic.w	r2, r2, #32
 800c906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68da      	ldr	r2, [r3, #12]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c916:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	695a      	ldr	r2, [r3, #20]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f022 0201 	bic.w	r2, r2, #1
 800c926:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2220      	movs	r2, #32
 800c92c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d135      	bne.n	800c9aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	330c      	adds	r3, #12
 800c94a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	e853 3f00 	ldrex	r3, [r3]
 800c952:	613b      	str	r3, [r7, #16]
   return(result);
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	f023 0310 	bic.w	r3, r3, #16
 800c95a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	330c      	adds	r3, #12
 800c962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c964:	623a      	str	r2, [r7, #32]
 800c966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c968:	69f9      	ldr	r1, [r7, #28]
 800c96a:	6a3a      	ldr	r2, [r7, #32]
 800c96c:	e841 2300 	strex	r3, r2, [r1]
 800c970:	61bb      	str	r3, [r7, #24]
   return(result);
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1e5      	bne.n	800c944 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 0310 	and.w	r3, r3, #16
 800c982:	2b10      	cmp	r3, #16
 800c984:	d10a      	bne.n	800c99c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c986:	2300      	movs	r3, #0
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	60fb      	str	r3, [r7, #12]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7f5 ffce 	bl	8002944 <HAL_UARTEx_RxEventCallback>
 800c9a8:	e002      	b.n	800c9b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7ff fc32 	bl	800c214 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e002      	b.n	800c9ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	e000      	b.n	800c9ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c9b8:	2302      	movs	r3, #2
  }
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3730      	adds	r7, #48	@ 0x30
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
	...

0800c9c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9c8:	b0c0      	sub	sp, #256	@ 0x100
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9e0:	68d9      	ldr	r1, [r3, #12]
 800c9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	ea40 0301 	orr.w	r3, r0, r1
 800c9ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c9ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9f2:	689a      	ldr	r2, [r3, #8]
 800c9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	431a      	orrs	r2, r3
 800ca04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ca10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ca1c:	f021 010c 	bic.w	r1, r1, #12
 800ca20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ca2a:	430b      	orrs	r3, r1
 800ca2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ca3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca3e:	6999      	ldr	r1, [r3, #24]
 800ca40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	ea40 0301 	orr.w	r3, r0, r1
 800ca4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	4b8f      	ldr	r3, [pc, #572]	@ (800cc90 <UART_SetConfig+0x2cc>)
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d005      	beq.n	800ca64 <UART_SetConfig+0xa0>
 800ca58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	4b8d      	ldr	r3, [pc, #564]	@ (800cc94 <UART_SetConfig+0x2d0>)
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d104      	bne.n	800ca6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca64:	f7fd fd1a 	bl	800a49c <HAL_RCC_GetPCLK2Freq>
 800ca68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ca6c:	e003      	b.n	800ca76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca6e:	f7fd fd01 	bl	800a474 <HAL_RCC_GetPCLK1Freq>
 800ca72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca80:	f040 810c 	bne.w	800cc9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ca8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ca92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ca96:	4622      	mov	r2, r4
 800ca98:	462b      	mov	r3, r5
 800ca9a:	1891      	adds	r1, r2, r2
 800ca9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ca9e:	415b      	adcs	r3, r3
 800caa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800caa6:	4621      	mov	r1, r4
 800caa8:	eb12 0801 	adds.w	r8, r2, r1
 800caac:	4629      	mov	r1, r5
 800caae:	eb43 0901 	adc.w	r9, r3, r1
 800cab2:	f04f 0200 	mov.w	r2, #0
 800cab6:	f04f 0300 	mov.w	r3, #0
 800caba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cabe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cac6:	4690      	mov	r8, r2
 800cac8:	4699      	mov	r9, r3
 800caca:	4623      	mov	r3, r4
 800cacc:	eb18 0303 	adds.w	r3, r8, r3
 800cad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cad4:	462b      	mov	r3, r5
 800cad6:	eb49 0303 	adc.w	r3, r9, r3
 800cada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800caea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800caee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800caf2:	460b      	mov	r3, r1
 800caf4:	18db      	adds	r3, r3, r3
 800caf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800caf8:	4613      	mov	r3, r2
 800cafa:	eb42 0303 	adc.w	r3, r2, r3
 800cafe:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cb04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cb08:	f7f4 f9ac 	bl	8000e64 <__aeabi_uldivmod>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4b61      	ldr	r3, [pc, #388]	@ (800cc98 <UART_SetConfig+0x2d4>)
 800cb12:	fba3 2302 	umull	r2, r3, r3, r2
 800cb16:	095b      	lsrs	r3, r3, #5
 800cb18:	011c      	lsls	r4, r3, #4
 800cb1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cb24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cb28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cb2c:	4642      	mov	r2, r8
 800cb2e:	464b      	mov	r3, r9
 800cb30:	1891      	adds	r1, r2, r2
 800cb32:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cb34:	415b      	adcs	r3, r3
 800cb36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cb3c:	4641      	mov	r1, r8
 800cb3e:	eb12 0a01 	adds.w	sl, r2, r1
 800cb42:	4649      	mov	r1, r9
 800cb44:	eb43 0b01 	adc.w	fp, r3, r1
 800cb48:	f04f 0200 	mov.w	r2, #0
 800cb4c:	f04f 0300 	mov.w	r3, #0
 800cb50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb5c:	4692      	mov	sl, r2
 800cb5e:	469b      	mov	fp, r3
 800cb60:	4643      	mov	r3, r8
 800cb62:	eb1a 0303 	adds.w	r3, sl, r3
 800cb66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb6a:	464b      	mov	r3, r9
 800cb6c:	eb4b 0303 	adc.w	r3, fp, r3
 800cb70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cb84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cb88:	460b      	mov	r3, r1
 800cb8a:	18db      	adds	r3, r3, r3
 800cb8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb8e:	4613      	mov	r3, r2
 800cb90:	eb42 0303 	adc.w	r3, r2, r3
 800cb94:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cb9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cb9e:	f7f4 f961 	bl	8000e64 <__aeabi_uldivmod>
 800cba2:	4602      	mov	r2, r0
 800cba4:	460b      	mov	r3, r1
 800cba6:	4611      	mov	r1, r2
 800cba8:	4b3b      	ldr	r3, [pc, #236]	@ (800cc98 <UART_SetConfig+0x2d4>)
 800cbaa:	fba3 2301 	umull	r2, r3, r3, r1
 800cbae:	095b      	lsrs	r3, r3, #5
 800cbb0:	2264      	movs	r2, #100	@ 0x64
 800cbb2:	fb02 f303 	mul.w	r3, r2, r3
 800cbb6:	1acb      	subs	r3, r1, r3
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cbbe:	4b36      	ldr	r3, [pc, #216]	@ (800cc98 <UART_SetConfig+0x2d4>)
 800cbc0:	fba3 2302 	umull	r2, r3, r3, r2
 800cbc4:	095b      	lsrs	r3, r3, #5
 800cbc6:	005b      	lsls	r3, r3, #1
 800cbc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cbcc:	441c      	add	r4, r3
 800cbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cbd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cbdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	1891      	adds	r1, r2, r2
 800cbe6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cbe8:	415b      	adcs	r3, r3
 800cbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cbf0:	4641      	mov	r1, r8
 800cbf2:	1851      	adds	r1, r2, r1
 800cbf4:	6339      	str	r1, [r7, #48]	@ 0x30
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	414b      	adcs	r3, r1
 800cbfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbfc:	f04f 0200 	mov.w	r2, #0
 800cc00:	f04f 0300 	mov.w	r3, #0
 800cc04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cc08:	4659      	mov	r1, fp
 800cc0a:	00cb      	lsls	r3, r1, #3
 800cc0c:	4651      	mov	r1, sl
 800cc0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc12:	4651      	mov	r1, sl
 800cc14:	00ca      	lsls	r2, r1, #3
 800cc16:	4610      	mov	r0, r2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	4642      	mov	r2, r8
 800cc1e:	189b      	adds	r3, r3, r2
 800cc20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc24:	464b      	mov	r3, r9
 800cc26:	460a      	mov	r2, r1
 800cc28:	eb42 0303 	adc.w	r3, r2, r3
 800cc2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cc40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cc44:	460b      	mov	r3, r1
 800cc46:	18db      	adds	r3, r3, r3
 800cc48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	eb42 0303 	adc.w	r3, r2, r3
 800cc50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cc56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cc5a:	f7f4 f903 	bl	8000e64 <__aeabi_uldivmod>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4b0d      	ldr	r3, [pc, #52]	@ (800cc98 <UART_SetConfig+0x2d4>)
 800cc64:	fba3 1302 	umull	r1, r3, r3, r2
 800cc68:	095b      	lsrs	r3, r3, #5
 800cc6a:	2164      	movs	r1, #100	@ 0x64
 800cc6c:	fb01 f303 	mul.w	r3, r1, r3
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	3332      	adds	r3, #50	@ 0x32
 800cc76:	4a08      	ldr	r2, [pc, #32]	@ (800cc98 <UART_SetConfig+0x2d4>)
 800cc78:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	f003 0207 	and.w	r2, r3, #7
 800cc82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4422      	add	r2, r4
 800cc8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc8c:	e106      	b.n	800ce9c <UART_SetConfig+0x4d8>
 800cc8e:	bf00      	nop
 800cc90:	40011000 	.word	0x40011000
 800cc94:	40011400 	.word	0x40011400
 800cc98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cca0:	2200      	movs	r2, #0
 800cca2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cca6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ccaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ccae:	4642      	mov	r2, r8
 800ccb0:	464b      	mov	r3, r9
 800ccb2:	1891      	adds	r1, r2, r2
 800ccb4:	6239      	str	r1, [r7, #32]
 800ccb6:	415b      	adcs	r3, r3
 800ccb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ccbe:	4641      	mov	r1, r8
 800ccc0:	1854      	adds	r4, r2, r1
 800ccc2:	4649      	mov	r1, r9
 800ccc4:	eb43 0501 	adc.w	r5, r3, r1
 800ccc8:	f04f 0200 	mov.w	r2, #0
 800cccc:	f04f 0300 	mov.w	r3, #0
 800ccd0:	00eb      	lsls	r3, r5, #3
 800ccd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ccd6:	00e2      	lsls	r2, r4, #3
 800ccd8:	4614      	mov	r4, r2
 800ccda:	461d      	mov	r5, r3
 800ccdc:	4643      	mov	r3, r8
 800ccde:	18e3      	adds	r3, r4, r3
 800cce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cce4:	464b      	mov	r3, r9
 800cce6:	eb45 0303 	adc.w	r3, r5, r3
 800ccea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ccee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ccfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ccfe:	f04f 0200 	mov.w	r2, #0
 800cd02:	f04f 0300 	mov.w	r3, #0
 800cd06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	008b      	lsls	r3, r1, #2
 800cd0e:	4621      	mov	r1, r4
 800cd10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd14:	4621      	mov	r1, r4
 800cd16:	008a      	lsls	r2, r1, #2
 800cd18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800cd1c:	f7f4 f8a2 	bl	8000e64 <__aeabi_uldivmod>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4b60      	ldr	r3, [pc, #384]	@ (800cea8 <UART_SetConfig+0x4e4>)
 800cd26:	fba3 2302 	umull	r2, r3, r3, r2
 800cd2a:	095b      	lsrs	r3, r3, #5
 800cd2c:	011c      	lsls	r4, r3, #4
 800cd2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd32:	2200      	movs	r2, #0
 800cd34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cd38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cd3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800cd40:	4642      	mov	r2, r8
 800cd42:	464b      	mov	r3, r9
 800cd44:	1891      	adds	r1, r2, r2
 800cd46:	61b9      	str	r1, [r7, #24]
 800cd48:	415b      	adcs	r3, r3
 800cd4a:	61fb      	str	r3, [r7, #28]
 800cd4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd50:	4641      	mov	r1, r8
 800cd52:	1851      	adds	r1, r2, r1
 800cd54:	6139      	str	r1, [r7, #16]
 800cd56:	4649      	mov	r1, r9
 800cd58:	414b      	adcs	r3, r1
 800cd5a:	617b      	str	r3, [r7, #20]
 800cd5c:	f04f 0200 	mov.w	r2, #0
 800cd60:	f04f 0300 	mov.w	r3, #0
 800cd64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd68:	4659      	mov	r1, fp
 800cd6a:	00cb      	lsls	r3, r1, #3
 800cd6c:	4651      	mov	r1, sl
 800cd6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd72:	4651      	mov	r1, sl
 800cd74:	00ca      	lsls	r2, r1, #3
 800cd76:	4610      	mov	r0, r2
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	4642      	mov	r2, r8
 800cd7e:	189b      	adds	r3, r3, r2
 800cd80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd84:	464b      	mov	r3, r9
 800cd86:	460a      	mov	r2, r1
 800cd88:	eb42 0303 	adc.w	r3, r2, r3
 800cd8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cd9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cd9c:	f04f 0200 	mov.w	r2, #0
 800cda0:	f04f 0300 	mov.w	r3, #0
 800cda4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cda8:	4649      	mov	r1, r9
 800cdaa:	008b      	lsls	r3, r1, #2
 800cdac:	4641      	mov	r1, r8
 800cdae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cdb2:	4641      	mov	r1, r8
 800cdb4:	008a      	lsls	r2, r1, #2
 800cdb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cdba:	f7f4 f853 	bl	8000e64 <__aeabi_uldivmod>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	4b38      	ldr	r3, [pc, #224]	@ (800cea8 <UART_SetConfig+0x4e4>)
 800cdc6:	fba3 2301 	umull	r2, r3, r3, r1
 800cdca:	095b      	lsrs	r3, r3, #5
 800cdcc:	2264      	movs	r2, #100	@ 0x64
 800cdce:	fb02 f303 	mul.w	r3, r2, r3
 800cdd2:	1acb      	subs	r3, r1, r3
 800cdd4:	011b      	lsls	r3, r3, #4
 800cdd6:	3332      	adds	r3, #50	@ 0x32
 800cdd8:	4a33      	ldr	r2, [pc, #204]	@ (800cea8 <UART_SetConfig+0x4e4>)
 800cdda:	fba2 2303 	umull	r2, r3, r2, r3
 800cdde:	095b      	lsrs	r3, r3, #5
 800cde0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cde4:	441c      	add	r4, r3
 800cde6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdea:	2200      	movs	r2, #0
 800cdec:	673b      	str	r3, [r7, #112]	@ 0x70
 800cdee:	677a      	str	r2, [r7, #116]	@ 0x74
 800cdf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cdf4:	4642      	mov	r2, r8
 800cdf6:	464b      	mov	r3, r9
 800cdf8:	1891      	adds	r1, r2, r2
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	415b      	adcs	r3, r3
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce04:	4641      	mov	r1, r8
 800ce06:	1851      	adds	r1, r2, r1
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	4649      	mov	r1, r9
 800ce0c:	414b      	adcs	r3, r1
 800ce0e:	607b      	str	r3, [r7, #4]
 800ce10:	f04f 0200 	mov.w	r2, #0
 800ce14:	f04f 0300 	mov.w	r3, #0
 800ce18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ce1c:	4659      	mov	r1, fp
 800ce1e:	00cb      	lsls	r3, r1, #3
 800ce20:	4651      	mov	r1, sl
 800ce22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce26:	4651      	mov	r1, sl
 800ce28:	00ca      	lsls	r2, r1, #3
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4603      	mov	r3, r0
 800ce30:	4642      	mov	r2, r8
 800ce32:	189b      	adds	r3, r3, r2
 800ce34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ce36:	464b      	mov	r3, r9
 800ce38:	460a      	mov	r2, r1
 800ce3a:	eb42 0303 	adc.w	r3, r2, r3
 800ce3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ce40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce4a:	667a      	str	r2, [r7, #100]	@ 0x64
 800ce4c:	f04f 0200 	mov.w	r2, #0
 800ce50:	f04f 0300 	mov.w	r3, #0
 800ce54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ce58:	4649      	mov	r1, r9
 800ce5a:	008b      	lsls	r3, r1, #2
 800ce5c:	4641      	mov	r1, r8
 800ce5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce62:	4641      	mov	r1, r8
 800ce64:	008a      	lsls	r2, r1, #2
 800ce66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ce6a:	f7f3 fffb 	bl	8000e64 <__aeabi_uldivmod>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <UART_SetConfig+0x4e4>)
 800ce74:	fba3 1302 	umull	r1, r3, r3, r2
 800ce78:	095b      	lsrs	r3, r3, #5
 800ce7a:	2164      	movs	r1, #100	@ 0x64
 800ce7c:	fb01 f303 	mul.w	r3, r1, r3
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	011b      	lsls	r3, r3, #4
 800ce84:	3332      	adds	r3, #50	@ 0x32
 800ce86:	4a08      	ldr	r2, [pc, #32]	@ (800cea8 <UART_SetConfig+0x4e4>)
 800ce88:	fba2 2303 	umull	r2, r3, r2, r3
 800ce8c:	095b      	lsrs	r3, r3, #5
 800ce8e:	f003 020f 	and.w	r2, r3, #15
 800ce92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4422      	add	r2, r4
 800ce9a:	609a      	str	r2, [r3, #8]
}
 800ce9c:	bf00      	nop
 800ce9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cea2:	46bd      	mov	sp, r7
 800cea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cea8:	51eb851f 	.word	0x51eb851f

0800ceac <__NVIC_SetPriority>:
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	6039      	str	r1, [r7, #0]
 800ceb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ceb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	db0a      	blt.n	800ced6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	490c      	ldr	r1, [pc, #48]	@ (800cef8 <__NVIC_SetPriority+0x4c>)
 800cec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceca:	0112      	lsls	r2, r2, #4
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	440b      	add	r3, r1
 800ced0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ced4:	e00a      	b.n	800ceec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	4908      	ldr	r1, [pc, #32]	@ (800cefc <__NVIC_SetPriority+0x50>)
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	f003 030f 	and.w	r3, r3, #15
 800cee2:	3b04      	subs	r3, #4
 800cee4:	0112      	lsls	r2, r2, #4
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	440b      	add	r3, r1
 800ceea:	761a      	strb	r2, [r3, #24]
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr
 800cef8:	e000e100 	.word	0xe000e100
 800cefc:	e000ed00 	.word	0xe000ed00

0800cf00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cf00:	b580      	push	{r7, lr}
 800cf02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cf04:	2100      	movs	r1, #0
 800cf06:	f06f 0004 	mvn.w	r0, #4
 800cf0a:	f7ff ffcf 	bl	800ceac <__NVIC_SetPriority>
#endif
}
 800cf0e:	bf00      	nop
 800cf10:	bd80      	pop	{r7, pc}
	...

0800cf14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf1a:	f3ef 8305 	mrs	r3, IPSR
 800cf1e:	603b      	str	r3, [r7, #0]
  return(result);
 800cf20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d003      	beq.n	800cf2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cf26:	f06f 0305 	mvn.w	r3, #5
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	e00c      	b.n	800cf48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf2e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf58 <osKernelInitialize+0x44>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d105      	bne.n	800cf42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf36:	4b08      	ldr	r3, [pc, #32]	@ (800cf58 <osKernelInitialize+0x44>)
 800cf38:	2201      	movs	r2, #1
 800cf3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	607b      	str	r3, [r7, #4]
 800cf40:	e002      	b.n	800cf48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf48:	687b      	ldr	r3, [r7, #4]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	370c      	adds	r7, #12
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	20001014 	.word	0x20001014

0800cf5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf62:	f3ef 8305 	mrs	r3, IPSR
 800cf66:	603b      	str	r3, [r7, #0]
  return(result);
 800cf68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d003      	beq.n	800cf76 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf6e:	f06f 0305 	mvn.w	r3, #5
 800cf72:	607b      	str	r3, [r7, #4]
 800cf74:	e010      	b.n	800cf98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf76:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa4 <osKernelStart+0x48>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d109      	bne.n	800cf92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf7e:	f7ff ffbf 	bl	800cf00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf82:	4b08      	ldr	r3, [pc, #32]	@ (800cfa4 <osKernelStart+0x48>)
 800cf84:	2202      	movs	r2, #2
 800cf86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf88:	f001 f892 	bl	800e0b0 <vTaskStartScheduler>
      stat = osOK;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	607b      	str	r3, [r7, #4]
 800cf90:	e002      	b.n	800cf98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cf92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf98:	687b      	ldr	r3, [r7, #4]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3708      	adds	r7, #8
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	20001014 	.word	0x20001014

0800cfa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08e      	sub	sp, #56	@ 0x38
 800cfac:	af04      	add	r7, sp, #16
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb8:	f3ef 8305 	mrs	r3, IPSR
 800cfbc:	617b      	str	r3, [r7, #20]
  return(result);
 800cfbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d17e      	bne.n	800d0c2 <osThreadNew+0x11a>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d07b      	beq.n	800d0c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cfca:	2380      	movs	r3, #128	@ 0x80
 800cfcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cfce:	2318      	movs	r3, #24
 800cfd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cfd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d045      	beq.n	800d06e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d002      	beq.n	800cff0 <osThreadNew+0x48>
        name = attr->name;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d008      	beq.n	800d016 <osThreadNew+0x6e>
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	2b38      	cmp	r3, #56	@ 0x38
 800d008:	d805      	bhi.n	800d016 <osThreadNew+0x6e>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	f003 0301 	and.w	r3, r3, #1
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <osThreadNew+0x72>
        return (NULL);
 800d016:	2300      	movs	r3, #0
 800d018:	e054      	b.n	800d0c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d003      	beq.n	800d02a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	089b      	lsrs	r3, r3, #2
 800d028:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00e      	beq.n	800d050 <osThreadNew+0xa8>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	2ba7      	cmp	r3, #167	@ 0xa7
 800d038:	d90a      	bls.n	800d050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d006      	beq.n	800d050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <osThreadNew+0xa8>
        mem = 1;
 800d04a:	2301      	movs	r3, #1
 800d04c:	61bb      	str	r3, [r7, #24]
 800d04e:	e010      	b.n	800d072 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10c      	bne.n	800d072 <osThreadNew+0xca>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d108      	bne.n	800d072 <osThreadNew+0xca>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d104      	bne.n	800d072 <osThreadNew+0xca>
          mem = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	61bb      	str	r3, [r7, #24]
 800d06c:	e001      	b.n	800d072 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d110      	bne.n	800d09a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d080:	9202      	str	r2, [sp, #8]
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	6a3a      	ldr	r2, [r7, #32]
 800d08c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f000 fe1a 	bl	800dcc8 <xTaskCreateStatic>
 800d094:	4603      	mov	r3, r0
 800d096:	613b      	str	r3, [r7, #16]
 800d098:	e013      	b.n	800d0c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d110      	bne.n	800d0c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	f107 0310 	add.w	r3, r7, #16
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f000 fe68 	bl	800dd88 <xTaskCreate>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d001      	beq.n	800d0c2 <osThreadNew+0x11a>
            hTask = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d0c2:	693b      	ldr	r3, [r7, #16]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3728      	adds	r7, #40	@ 0x28
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0d4:	f3ef 8305 	mrs	r3, IPSR
 800d0d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d003      	beq.n	800d0e8 <osDelay+0x1c>
    stat = osErrorISR;
 800d0e0:	f06f 0305 	mvn.w	r3, #5
 800d0e4:	60fb      	str	r3, [r7, #12]
 800d0e6:	e007      	b.n	800d0f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d002      	beq.n	800d0f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 ffa6 	bl	800e044 <vTaskDelay>
    }
  }

  return (stat);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	4a07      	ldr	r2, [pc, #28]	@ (800d130 <vApplicationGetIdleTaskMemory+0x2c>)
 800d114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	4a06      	ldr	r2, [pc, #24]	@ (800d134 <vApplicationGetIdleTaskMemory+0x30>)
 800d11a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2280      	movs	r2, #128	@ 0x80
 800d120:	601a      	str	r2, [r3, #0]
}
 800d122:	bf00      	nop
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	20001018 	.word	0x20001018
 800d134:	200010c0 	.word	0x200010c0

0800d138 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	4a07      	ldr	r2, [pc, #28]	@ (800d164 <vApplicationGetTimerTaskMemory+0x2c>)
 800d148:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	4a06      	ldr	r2, [pc, #24]	@ (800d168 <vApplicationGetTimerTaskMemory+0x30>)
 800d14e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d156:	601a      	str	r2, [r3, #0]
}
 800d158:	bf00      	nop
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr
 800d164:	200012c0 	.word	0x200012c0
 800d168:	20001368 	.word	0x20001368

0800d16c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f103 0208 	add.w	r2, r3, #8
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d184:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f103 0208 	add.w	r2, r3, #8
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f103 0208 	add.w	r2, r3, #8
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d1ba:	bf00      	nop
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b085      	sub	sp, #20
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
 800d1ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	601a      	str	r2, [r3, #0]
}
 800d202:	bf00      	nop
 800d204:	3714      	adds	r7, #20
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d20e:	b480      	push	{r7}
 800d210:	b085      	sub	sp, #20
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d224:	d103      	bne.n	800d22e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	e00c      	b.n	800d248 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3308      	adds	r3, #8
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	e002      	b.n	800d23c <vListInsert+0x2e>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	429a      	cmp	r2, r3
 800d246:	d2f6      	bcs.n	800d236 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	68fa      	ldr	r2, [r7, #12]
 800d25c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	683a      	ldr	r2, [r7, #0]
 800d262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	1c5a      	adds	r2, r3, #1
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	601a      	str	r2, [r3, #0]
}
 800d274:	bf00      	nop
 800d276:	3714      	adds	r7, #20
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	6892      	ldr	r2, [r2, #8]
 800d296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	6852      	ldr	r2, [r2, #4]
 800d2a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d103      	bne.n	800d2b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	689a      	ldr	r2, [r3, #8]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	1e5a      	subs	r2, r3, #1
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10b      	bne.n	800d300 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2fa:	bf00      	nop
 800d2fc:	bf00      	nop
 800d2fe:	e7fd      	b.n	800d2fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d300:	f002 fa82 	bl	800f808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d30c:	68f9      	ldr	r1, [r7, #12]
 800d30e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d310:	fb01 f303 	mul.w	r3, r1, r3
 800d314:	441a      	add	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2200      	movs	r2, #0
 800d31e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d330:	3b01      	subs	r3, #1
 800d332:	68f9      	ldr	r1, [r7, #12]
 800d334:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d336:	fb01 f303 	mul.w	r3, r1, r3
 800d33a:	441a      	add	r2, r3
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	22ff      	movs	r2, #255	@ 0xff
 800d344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	22ff      	movs	r2, #255	@ 0xff
 800d34c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d114      	bne.n	800d380 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d01a      	beq.n	800d394 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3310      	adds	r3, #16
 800d362:	4618      	mov	r0, r3
 800d364:	f001 fa3c 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d012      	beq.n	800d394 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d36e:	4b0d      	ldr	r3, [pc, #52]	@ (800d3a4 <xQueueGenericReset+0xd0>)
 800d370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d374:	601a      	str	r2, [r3, #0]
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	f3bf 8f6f 	isb	sy
 800d37e:	e009      	b.n	800d394 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	3310      	adds	r3, #16
 800d384:	4618      	mov	r0, r3
 800d386:	f7ff fef1 	bl	800d16c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3324      	adds	r3, #36	@ 0x24
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff feec 	bl	800d16c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d394:	f002 fa6a 	bl	800f86c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d398:	2301      	movs	r3, #1
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	e000ed04 	.word	0xe000ed04

0800d3a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08e      	sub	sp, #56	@ 0x38
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10b      	bne.n	800d3d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d3ce:	bf00      	nop
 800d3d0:	bf00      	nop
 800d3d2:	e7fd      	b.n	800d3d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10b      	bne.n	800d3f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d3ec:	bf00      	nop
 800d3ee:	bf00      	nop
 800d3f0:	e7fd      	b.n	800d3ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d002      	beq.n	800d3fe <xQueueGenericCreateStatic+0x56>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <xQueueGenericCreateStatic+0x5a>
 800d3fe:	2301      	movs	r3, #1
 800d400:	e000      	b.n	800d404 <xQueueGenericCreateStatic+0x5c>
 800d402:	2300      	movs	r3, #0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10b      	bne.n	800d420 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	623b      	str	r3, [r7, #32]
}
 800d41a:	bf00      	nop
 800d41c:	bf00      	nop
 800d41e:	e7fd      	b.n	800d41c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d102      	bne.n	800d42c <xQueueGenericCreateStatic+0x84>
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <xQueueGenericCreateStatic+0x88>
 800d42c:	2301      	movs	r3, #1
 800d42e:	e000      	b.n	800d432 <xQueueGenericCreateStatic+0x8a>
 800d430:	2300      	movs	r3, #0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10b      	bne.n	800d44e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	61fb      	str	r3, [r7, #28]
}
 800d448:	bf00      	nop
 800d44a:	bf00      	nop
 800d44c:	e7fd      	b.n	800d44a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d44e:	2350      	movs	r3, #80	@ 0x50
 800d450:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b50      	cmp	r3, #80	@ 0x50
 800d456:	d00b      	beq.n	800d470 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	61bb      	str	r3, [r7, #24]
}
 800d46a:	bf00      	nop
 800d46c:	bf00      	nop
 800d46e:	e7fd      	b.n	800d46c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d470:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00d      	beq.n	800d498 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d47e:	2201      	movs	r2, #1
 800d480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d484:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48a:	9300      	str	r3, [sp, #0]
 800d48c:	4613      	mov	r3, r2
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	68b9      	ldr	r1, [r7, #8]
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f000 f805 	bl	800d4a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3730      	adds	r7, #48	@ 0x30
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b084      	sub	sp, #16
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	60f8      	str	r0, [r7, #12]
 800d4aa:	60b9      	str	r1, [r7, #8]
 800d4ac:	607a      	str	r2, [r7, #4]
 800d4ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d103      	bne.n	800d4be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	69ba      	ldr	r2, [r7, #24]
 800d4ba:	601a      	str	r2, [r3, #0]
 800d4bc:	e002      	b.n	800d4c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	69b8      	ldr	r0, [r7, #24]
 800d4d4:	f7ff fefe 	bl	800d2d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	78fa      	ldrb	r2, [r7, #3]
 800d4dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d4e0:	bf00      	nop
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08e      	sub	sp, #56	@ 0x38
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10b      	bne.n	800d51c <xQueueGenericSend+0x34>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d516:	bf00      	nop
 800d518:	bf00      	nop
 800d51a:	e7fd      	b.n	800d518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d103      	bne.n	800d52a <xQueueGenericSend+0x42>
 800d522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <xQueueGenericSend+0x46>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e000      	b.n	800d530 <xQueueGenericSend+0x48>
 800d52e:	2300      	movs	r3, #0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10b      	bne.n	800d54c <xQueueGenericSend+0x64>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d546:	bf00      	nop
 800d548:	bf00      	nop
 800d54a:	e7fd      	b.n	800d548 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d103      	bne.n	800d55a <xQueueGenericSend+0x72>
 800d552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d556:	2b01      	cmp	r3, #1
 800d558:	d101      	bne.n	800d55e <xQueueGenericSend+0x76>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e000      	b.n	800d560 <xQueueGenericSend+0x78>
 800d55e:	2300      	movs	r3, #0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10b      	bne.n	800d57c <xQueueGenericSend+0x94>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	623b      	str	r3, [r7, #32]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d57c:	f001 faf6 	bl	800eb6c <xTaskGetSchedulerState>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <xQueueGenericSend+0xa4>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <xQueueGenericSend+0xa8>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <xQueueGenericSend+0xaa>
 800d590:	2300      	movs	r3, #0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10b      	bne.n	800d5ae <xQueueGenericSend+0xc6>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	61fb      	str	r3, [r7, #28]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5ae:	f002 f92b 	bl	800f808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d302      	bcc.n	800d5c4 <xQueueGenericSend+0xdc>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d129      	bne.n	800d618 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5c4:	683a      	ldr	r2, [r7, #0]
 800d5c6:	68b9      	ldr	r1, [r7, #8]
 800d5c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5ca:	f000 fa0f 	bl	800d9ec <prvCopyDataToQueue>
 800d5ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d010      	beq.n	800d5fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5da:	3324      	adds	r3, #36	@ 0x24
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f001 f8ff 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d013      	beq.n	800d610 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5e8:	4b3f      	ldr	r3, [pc, #252]	@ (800d6e8 <xQueueGenericSend+0x200>)
 800d5ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	e00a      	b.n	800d610 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d007      	beq.n	800d610 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d600:	4b39      	ldr	r3, [pc, #228]	@ (800d6e8 <xQueueGenericSend+0x200>)
 800d602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d606:	601a      	str	r2, [r3, #0]
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d610:	f002 f92c 	bl	800f86c <vPortExitCritical>
				return pdPASS;
 800d614:	2301      	movs	r3, #1
 800d616:	e063      	b.n	800d6e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d103      	bne.n	800d626 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d61e:	f002 f925 	bl	800f86c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d622:	2300      	movs	r3, #0
 800d624:	e05c      	b.n	800d6e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d62c:	f107 0314 	add.w	r3, r7, #20
 800d630:	4618      	mov	r0, r3
 800d632:	f001 f939 	bl	800e8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d636:	2301      	movs	r3, #1
 800d638:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d63a:	f002 f917 	bl	800f86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d63e:	f000 fda7 	bl	800e190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d642:	f002 f8e1 	bl	800f808 <vPortEnterCritical>
 800d646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d64c:	b25b      	sxtb	r3, r3
 800d64e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d652:	d103      	bne.n	800d65c <xQueueGenericSend+0x174>
 800d654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d662:	b25b      	sxtb	r3, r3
 800d664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d668:	d103      	bne.n	800d672 <xQueueGenericSend+0x18a>
 800d66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d672:	f002 f8fb 	bl	800f86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d676:	1d3a      	adds	r2, r7, #4
 800d678:	f107 0314 	add.w	r3, r7, #20
 800d67c:	4611      	mov	r1, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 f928 	bl	800e8d4 <xTaskCheckForTimeOut>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d124      	bne.n	800d6d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d68a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d68c:	f000 faa6 	bl	800dbdc <prvIsQueueFull>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d018      	beq.n	800d6c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	3310      	adds	r3, #16
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 f84c 	bl	800e73c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6a6:	f000 fa31 	bl	800db0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6aa:	f000 fd7f 	bl	800e1ac <xTaskResumeAll>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f47f af7c 	bne.w	800d5ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d6e8 <xQueueGenericSend+0x200>)
 800d6b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	e772      	b.n	800d5ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ca:	f000 fa1f 	bl	800db0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ce:	f000 fd6d 	bl	800e1ac <xTaskResumeAll>
 800d6d2:	e76c      	b.n	800d5ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6d6:	f000 fa19 	bl	800db0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6da:	f000 fd67 	bl	800e1ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3738      	adds	r7, #56	@ 0x38
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	e000ed04 	.word	0xe000ed04

0800d6ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b090      	sub	sp, #64	@ 0x40
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10b      	bne.n	800d71c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	e7fd      	b.n	800d718 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d103      	bne.n	800d72a <xQueueGenericSendFromISR+0x3e>
 800d722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <xQueueGenericSendFromISR+0x42>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <xQueueGenericSendFromISR+0x44>
 800d72e:	2300      	movs	r3, #0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10b      	bne.n	800d74c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	e7fd      	b.n	800d748 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d103      	bne.n	800d75a <xQueueGenericSendFromISR+0x6e>
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d756:	2b01      	cmp	r3, #1
 800d758:	d101      	bne.n	800d75e <xQueueGenericSendFromISR+0x72>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e000      	b.n	800d760 <xQueueGenericSendFromISR+0x74>
 800d75e:	2300      	movs	r3, #0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10b      	bne.n	800d77c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	623b      	str	r3, [r7, #32]
}
 800d776:	bf00      	nop
 800d778:	bf00      	nop
 800d77a:	e7fd      	b.n	800d778 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d77c:	f002 f924 	bl	800f9c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d780:	f3ef 8211 	mrs	r2, BASEPRI
 800d784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	61fa      	str	r2, [r7, #28]
 800d796:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d798:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d79a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d302      	bcc.n	800d7ae <xQueueGenericSendFromISR+0xc2>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d12f      	bne.n	800d80e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	68b9      	ldr	r1, [r7, #8]
 800d7c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7c4:	f000 f912 	bl	800d9ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d7cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7d0:	d112      	bne.n	800d7f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d016      	beq.n	800d808 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	3324      	adds	r3, #36	@ 0x24
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 fffe 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00e      	beq.n	800d808 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	e007      	b.n	800d808 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	b25a      	sxtb	r2, r3
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d808:	2301      	movs	r3, #1
 800d80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d80c:	e001      	b.n	800d812 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d814:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d81c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d81e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d820:	4618      	mov	r0, r3
 800d822:	3740      	adds	r7, #64	@ 0x40
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08c      	sub	sp, #48	@ 0x30
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d834:	2300      	movs	r3, #0
 800d836:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10b      	bne.n	800d85a <xQueueReceive+0x32>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	623b      	str	r3, [r7, #32]
}
 800d854:	bf00      	nop
 800d856:	bf00      	nop
 800d858:	e7fd      	b.n	800d856 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d103      	bne.n	800d868 <xQueueReceive+0x40>
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <xQueueReceive+0x44>
 800d868:	2301      	movs	r3, #1
 800d86a:	e000      	b.n	800d86e <xQueueReceive+0x46>
 800d86c:	2300      	movs	r3, #0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10b      	bne.n	800d88a <xQueueReceive+0x62>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	61fb      	str	r3, [r7, #28]
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop
 800d888:	e7fd      	b.n	800d886 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d88a:	f001 f96f 	bl	800eb6c <xTaskGetSchedulerState>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <xQueueReceive+0x72>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d101      	bne.n	800d89e <xQueueReceive+0x76>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e000      	b.n	800d8a0 <xQueueReceive+0x78>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10b      	bne.n	800d8bc <xQueueReceive+0x94>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	61bb      	str	r3, [r7, #24]
}
 800d8b6:	bf00      	nop
 800d8b8:	bf00      	nop
 800d8ba:	e7fd      	b.n	800d8b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8bc:	f001 ffa4 	bl	800f808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01f      	beq.n	800d90c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8cc:	68b9      	ldr	r1, [r7, #8]
 800d8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8d0:	f000 f8f6 	bl	800dac0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d6:	1e5a      	subs	r2, r3, #1
 800d8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00f      	beq.n	800d904 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e6:	3310      	adds	r3, #16
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 ff79 	bl	800e7e0 <xTaskRemoveFromEventList>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d007      	beq.n	800d904 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8f4:	4b3c      	ldr	r3, [pc, #240]	@ (800d9e8 <xQueueReceive+0x1c0>)
 800d8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d904:	f001 ffb2 	bl	800f86c <vPortExitCritical>
				return pdPASS;
 800d908:	2301      	movs	r3, #1
 800d90a:	e069      	b.n	800d9e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d103      	bne.n	800d91a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d912:	f001 ffab 	bl	800f86c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d916:	2300      	movs	r3, #0
 800d918:	e062      	b.n	800d9e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d106      	bne.n	800d92e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d920:	f107 0310 	add.w	r3, r7, #16
 800d924:	4618      	mov	r0, r3
 800d926:	f000 ffbf 	bl	800e8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d92a:	2301      	movs	r3, #1
 800d92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d92e:	f001 ff9d 	bl	800f86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d932:	f000 fc2d 	bl	800e190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d936:	f001 ff67 	bl	800f808 <vPortEnterCritical>
 800d93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d940:	b25b      	sxtb	r3, r3
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d946:	d103      	bne.n	800d950 <xQueueReceive+0x128>
 800d948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94a:	2200      	movs	r2, #0
 800d94c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d956:	b25b      	sxtb	r3, r3
 800d958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d95c:	d103      	bne.n	800d966 <xQueueReceive+0x13e>
 800d95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d966:	f001 ff81 	bl	800f86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d96a:	1d3a      	adds	r2, r7, #4
 800d96c:	f107 0310 	add.w	r3, r7, #16
 800d970:	4611      	mov	r1, r2
 800d972:	4618      	mov	r0, r3
 800d974:	f000 ffae 	bl	800e8d4 <xTaskCheckForTimeOut>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d123      	bne.n	800d9c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d97e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d980:	f000 f916 	bl	800dbb0 <prvIsQueueEmpty>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d017      	beq.n	800d9ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98c:	3324      	adds	r3, #36	@ 0x24
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f000 fed2 	bl	800e73c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d99a:	f000 f8b7 	bl	800db0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d99e:	f000 fc05 	bl	800e1ac <xTaskResumeAll>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d189      	bne.n	800d8bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d9a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d9e8 <xQueueReceive+0x1c0>)
 800d9aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	e780      	b.n	800d8bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9bc:	f000 f8a6 	bl	800db0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9c0:	f000 fbf4 	bl	800e1ac <xTaskResumeAll>
 800d9c4:	e77a      	b.n	800d8bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9c8:	f000 f8a0 	bl	800db0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9cc:	f000 fbee 	bl	800e1ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9d2:	f000 f8ed 	bl	800dbb0 <prvIsQueueEmpty>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f43f af6f 	beq.w	800d8bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3730      	adds	r7, #48	@ 0x30
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	e000ed04 	.word	0xe000ed04

0800d9ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b086      	sub	sp, #24
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10d      	bne.n	800da26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d14d      	bne.n	800daae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	4618      	mov	r0, r3
 800da18:	f001 f8c6 	bl	800eba8 <xTaskPriorityDisinherit>
 800da1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2200      	movs	r2, #0
 800da22:	609a      	str	r2, [r3, #8]
 800da24:	e043      	b.n	800daae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d119      	bne.n	800da60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6858      	ldr	r0, [r3, #4]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da34:	461a      	mov	r2, r3
 800da36:	68b9      	ldr	r1, [r7, #8]
 800da38:	f002 ffbf 	bl	80109ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	685a      	ldr	r2, [r3, #4]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da44:	441a      	add	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	429a      	cmp	r2, r3
 800da54:	d32b      	bcc.n	800daae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	605a      	str	r2, [r3, #4]
 800da5e:	e026      	b.n	800daae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	68d8      	ldr	r0, [r3, #12]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da68:	461a      	mov	r2, r3
 800da6a:	68b9      	ldr	r1, [r7, #8]
 800da6c:	f002 ffa5 	bl	80109ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	68da      	ldr	r2, [r3, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da78:	425b      	negs	r3, r3
 800da7a:	441a      	add	r2, r3
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68da      	ldr	r2, [r3, #12]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d207      	bcs.n	800da9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	689a      	ldr	r2, [r3, #8]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da94:	425b      	negs	r3, r3
 800da96:	441a      	add	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d105      	bne.n	800daae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d002      	beq.n	800daae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	3b01      	subs	r3, #1
 800daac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	1c5a      	adds	r2, r3, #1
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dab6:	697b      	ldr	r3, [r7, #20]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3718      	adds	r7, #24
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d018      	beq.n	800db04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68da      	ldr	r2, [r3, #12]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dada:	441a      	add	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68da      	ldr	r2, [r3, #12]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	689b      	ldr	r3, [r3, #8]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d303      	bcc.n	800daf4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	68d9      	ldr	r1, [r3, #12]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dafc:	461a      	mov	r2, r3
 800dafe:	6838      	ldr	r0, [r7, #0]
 800db00:	f002 ff5b 	bl	80109ba <memcpy>
	}
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db14:	f001 fe78 	bl	800f808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db20:	e011      	b.n	800db46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db26:	2b00      	cmp	r3, #0
 800db28:	d012      	beq.n	800db50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	3324      	adds	r3, #36	@ 0x24
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 fe56 	bl	800e7e0 <xTaskRemoveFromEventList>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db3a:	f000 ff2f 	bl	800e99c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	3b01      	subs	r3, #1
 800db42:	b2db      	uxtb	r3, r3
 800db44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dce9      	bgt.n	800db22 <prvUnlockQueue+0x16>
 800db4e:	e000      	b.n	800db52 <prvUnlockQueue+0x46>
					break;
 800db50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	22ff      	movs	r2, #255	@ 0xff
 800db56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800db5a:	f001 fe87 	bl	800f86c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db5e:	f001 fe53 	bl	800f808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db6a:	e011      	b.n	800db90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d012      	beq.n	800db9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3310      	adds	r3, #16
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 fe31 	bl	800e7e0 <xTaskRemoveFromEventList>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db84:	f000 ff0a 	bl	800e99c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db88:	7bbb      	ldrb	r3, [r7, #14]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db94:	2b00      	cmp	r3, #0
 800db96:	dce9      	bgt.n	800db6c <prvUnlockQueue+0x60>
 800db98:	e000      	b.n	800db9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	22ff      	movs	r2, #255	@ 0xff
 800dba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dba4:	f001 fe62 	bl	800f86c <vPortExitCritical>
}
 800dba8:	bf00      	nop
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbb8:	f001 fe26 	bl	800f808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d102      	bne.n	800dbca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	60fb      	str	r3, [r7, #12]
 800dbc8:	e001      	b.n	800dbce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbce:	f001 fe4d 	bl	800f86c <vPortExitCritical>

	return xReturn;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbe4:	f001 fe10 	bl	800f808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d102      	bne.n	800dbfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	60fb      	str	r3, [r7, #12]
 800dbf8:	e001      	b.n	800dbfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbfe:	f001 fe35 	bl	800f86c <vPortExitCritical>

	return xReturn;
 800dc02:	68fb      	ldr	r3, [r7, #12]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc16:	2300      	movs	r3, #0
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	e014      	b.n	800dc46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc1c:	4a0f      	ldr	r2, [pc, #60]	@ (800dc5c <vQueueAddToRegistry+0x50>)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10b      	bne.n	800dc40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc28:	490c      	ldr	r1, [pc, #48]	@ (800dc5c <vQueueAddToRegistry+0x50>)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc32:	4a0a      	ldr	r2, [pc, #40]	@ (800dc5c <vQueueAddToRegistry+0x50>)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	00db      	lsls	r3, r3, #3
 800dc38:	4413      	add	r3, r2
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc3e:	e006      	b.n	800dc4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	3301      	adds	r3, #1
 800dc44:	60fb      	str	r3, [r7, #12]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2b07      	cmp	r3, #7
 800dc4a:	d9e7      	bls.n	800dc1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc4c:	bf00      	nop
 800dc4e:	bf00      	nop
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	20001768 	.word	0x20001768

0800dc60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc70:	f001 fdca 	bl	800f808 <vPortEnterCritical>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc7a:	b25b      	sxtb	r3, r3
 800dc7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc80:	d103      	bne.n	800dc8a <vQueueWaitForMessageRestricted+0x2a>
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc90:	b25b      	sxtb	r3, r3
 800dc92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc96:	d103      	bne.n	800dca0 <vQueueWaitForMessageRestricted+0x40>
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dca0:	f001 fde4 	bl	800f86c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	3324      	adds	r3, #36	@ 0x24
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 fd67 	bl	800e788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dcba:	6978      	ldr	r0, [r7, #20]
 800dcbc:	f7ff ff26 	bl	800db0c <prvUnlockQueue>
	}
 800dcc0:	bf00      	nop
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08e      	sub	sp, #56	@ 0x38
 800dccc:	af04      	add	r7, sp, #16
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10b      	bne.n	800dcf4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	623b      	str	r3, [r7, #32]
}
 800dcee:	bf00      	nop
 800dcf0:	bf00      	nop
 800dcf2:	e7fd      	b.n	800dcf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10b      	bne.n	800dd12 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	61fb      	str	r3, [r7, #28]
}
 800dd0c:	bf00      	nop
 800dd0e:	bf00      	nop
 800dd10:	e7fd      	b.n	800dd0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd12:	23a8      	movs	r3, #168	@ 0xa8
 800dd14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	2ba8      	cmp	r3, #168	@ 0xa8
 800dd1a:	d00b      	beq.n	800dd34 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd20:	f383 8811 	msr	BASEPRI, r3
 800dd24:	f3bf 8f6f 	isb	sy
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	61bb      	str	r3, [r7, #24]
}
 800dd2e:	bf00      	nop
 800dd30:	bf00      	nop
 800dd32:	e7fd      	b.n	800dd30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01e      	beq.n	800dd7a <xTaskCreateStatic+0xb2>
 800dd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d01b      	beq.n	800dd7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4e:	2202      	movs	r2, #2
 800dd50:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd54:	2300      	movs	r3, #0
 800dd56:	9303      	str	r3, [sp, #12]
 800dd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	f107 0314 	add.w	r3, r7, #20
 800dd60:	9301      	str	r3, [sp, #4]
 800dd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f000 f851 	bl	800de14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd74:	f000 f8f6 	bl	800df64 <prvAddNewTaskToReadyList>
 800dd78:	e001      	b.n	800dd7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd7e:	697b      	ldr	r3, [r7, #20]
	}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3728      	adds	r7, #40	@ 0x28
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b08c      	sub	sp, #48	@ 0x30
 800dd8c:	af04      	add	r7, sp, #16
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	603b      	str	r3, [r7, #0]
 800dd94:	4613      	mov	r3, r2
 800dd96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f001 fe55 	bl	800fa4c <pvPortMalloc>
 800dda2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00e      	beq.n	800ddc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ddaa:	20a8      	movs	r0, #168	@ 0xa8
 800ddac:	f001 fe4e 	bl	800fa4c <pvPortMalloc>
 800ddb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d003      	beq.n	800ddc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	631a      	str	r2, [r3, #48]	@ 0x30
 800ddbe:	e005      	b.n	800ddcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ddc0:	6978      	ldr	r0, [r7, #20]
 800ddc2:	f001 ff11 	bl	800fbe8 <vPortFree>
 800ddc6:	e001      	b.n	800ddcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d017      	beq.n	800de02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ddda:	88fa      	ldrh	r2, [r7, #6]
 800dddc:	2300      	movs	r3, #0
 800ddde:	9303      	str	r3, [sp, #12]
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	9302      	str	r3, [sp, #8]
 800dde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	68b9      	ldr	r1, [r7, #8]
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f000 f80f 	bl	800de14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddf6:	69f8      	ldr	r0, [r7, #28]
 800ddf8:	f000 f8b4 	bl	800df64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	61bb      	str	r3, [r7, #24]
 800de00:	e002      	b.n	800de08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de08:	69bb      	ldr	r3, [r7, #24]
	}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3720      	adds	r7, #32
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
	...

0800de14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b088      	sub	sp, #32
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800de22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	461a      	mov	r2, r3
 800de2c:	21a5      	movs	r1, #165	@ 0xa5
 800de2e:	f002 fd35 	bl	801089c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de3c:	3b01      	subs	r3, #1
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de44:	69bb      	ldr	r3, [r7, #24]
 800de46:	f023 0307 	bic.w	r3, r3, #7
 800de4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	f003 0307 	and.w	r3, r3, #7
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00b      	beq.n	800de6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800de56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	617b      	str	r3, [r7, #20]
}
 800de68:	bf00      	nop
 800de6a:	bf00      	nop
 800de6c:	e7fd      	b.n	800de6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d01f      	beq.n	800deb4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de74:	2300      	movs	r3, #0
 800de76:	61fb      	str	r3, [r7, #28]
 800de78:	e012      	b.n	800dea0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	4413      	add	r3, r2
 800de80:	7819      	ldrb	r1, [r3, #0]
 800de82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	4413      	add	r3, r2
 800de88:	3334      	adds	r3, #52	@ 0x34
 800de8a:	460a      	mov	r2, r1
 800de8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	4413      	add	r3, r2
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d006      	beq.n	800dea8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	3301      	adds	r3, #1
 800de9e:	61fb      	str	r3, [r7, #28]
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	2b0f      	cmp	r3, #15
 800dea4:	d9e9      	bls.n	800de7a <prvInitialiseNewTask+0x66>
 800dea6:	e000      	b.n	800deaa <prvInitialiseNewTask+0x96>
			{
				break;
 800dea8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800deaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800deb2:	e003      	b.n	800debc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800deb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800debc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debe:	2b37      	cmp	r3, #55	@ 0x37
 800dec0:	d901      	bls.n	800dec6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dec2:	2337      	movs	r3, #55	@ 0x37
 800dec4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800deca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800decc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ded0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	2200      	movs	r2, #0
 800ded6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ded8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deda:	3304      	adds	r3, #4
 800dedc:	4618      	mov	r0, r3
 800dede:	f7ff f965 	bl	800d1ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee4:	3318      	adds	r3, #24
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff f960 	bl	800d1ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800def0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800def2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800def8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800defc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df04:	2200      	movs	r2, #0
 800df06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df14:	3354      	adds	r3, #84	@ 0x54
 800df16:	224c      	movs	r2, #76	@ 0x4c
 800df18:	2100      	movs	r1, #0
 800df1a:	4618      	mov	r0, r3
 800df1c:	f002 fcbe 	bl	801089c <memset>
 800df20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df22:	4a0d      	ldr	r2, [pc, #52]	@ (800df58 <prvInitialiseNewTask+0x144>)
 800df24:	659a      	str	r2, [r3, #88]	@ 0x58
 800df26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df28:	4a0c      	ldr	r2, [pc, #48]	@ (800df5c <prvInitialiseNewTask+0x148>)
 800df2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800df2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df2e:	4a0c      	ldr	r2, [pc, #48]	@ (800df60 <prvInitialiseNewTask+0x14c>)
 800df30:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df32:	683a      	ldr	r2, [r7, #0]
 800df34:	68f9      	ldr	r1, [r7, #12]
 800df36:	69b8      	ldr	r0, [r7, #24]
 800df38:	f001 fb36 	bl	800f5a8 <pxPortInitialiseStack>
 800df3c:	4602      	mov	r2, r0
 800df3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df4e:	bf00      	nop
 800df50:	3720      	adds	r7, #32
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	200059fc 	.word	0x200059fc
 800df5c:	20005a64 	.word	0x20005a64
 800df60:	20005acc 	.word	0x20005acc

0800df64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df6c:	f001 fc4c 	bl	800f808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df70:	4b2d      	ldr	r3, [pc, #180]	@ (800e028 <prvAddNewTaskToReadyList+0xc4>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	3301      	adds	r3, #1
 800df76:	4a2c      	ldr	r2, [pc, #176]	@ (800e028 <prvAddNewTaskToReadyList+0xc4>)
 800df78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df7a:	4b2c      	ldr	r3, [pc, #176]	@ (800e02c <prvAddNewTaskToReadyList+0xc8>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d109      	bne.n	800df96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df82:	4a2a      	ldr	r2, [pc, #168]	@ (800e02c <prvAddNewTaskToReadyList+0xc8>)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df88:	4b27      	ldr	r3, [pc, #156]	@ (800e028 <prvAddNewTaskToReadyList+0xc4>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d110      	bne.n	800dfb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df90:	f000 fd28 	bl	800e9e4 <prvInitialiseTaskLists>
 800df94:	e00d      	b.n	800dfb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df96:	4b26      	ldr	r3, [pc, #152]	@ (800e030 <prvAddNewTaskToReadyList+0xcc>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d109      	bne.n	800dfb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df9e:	4b23      	ldr	r3, [pc, #140]	@ (800e02c <prvAddNewTaskToReadyList+0xc8>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d802      	bhi.n	800dfb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dfac:	4a1f      	ldr	r2, [pc, #124]	@ (800e02c <prvAddNewTaskToReadyList+0xc8>)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dfb2:	4b20      	ldr	r3, [pc, #128]	@ (800e034 <prvAddNewTaskToReadyList+0xd0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	4a1e      	ldr	r2, [pc, #120]	@ (800e034 <prvAddNewTaskToReadyList+0xd0>)
 800dfba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dfbc:	4b1d      	ldr	r3, [pc, #116]	@ (800e034 <prvAddNewTaskToReadyList+0xd0>)
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfc8:	4b1b      	ldr	r3, [pc, #108]	@ (800e038 <prvAddNewTaskToReadyList+0xd4>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d903      	bls.n	800dfd8 <prvAddNewTaskToReadyList+0x74>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfd4:	4a18      	ldr	r2, [pc, #96]	@ (800e038 <prvAddNewTaskToReadyList+0xd4>)
 800dfd6:	6013      	str	r3, [r2, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfdc:	4613      	mov	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4a15      	ldr	r2, [pc, #84]	@ (800e03c <prvAddNewTaskToReadyList+0xd8>)
 800dfe6:	441a      	add	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	3304      	adds	r3, #4
 800dfec:	4619      	mov	r1, r3
 800dfee:	4610      	mov	r0, r2
 800dff0:	f7ff f8e9 	bl	800d1c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dff4:	f001 fc3a 	bl	800f86c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dff8:	4b0d      	ldr	r3, [pc, #52]	@ (800e030 <prvAddNewTaskToReadyList+0xcc>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00e      	beq.n	800e01e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e000:	4b0a      	ldr	r3, [pc, #40]	@ (800e02c <prvAddNewTaskToReadyList+0xc8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d207      	bcs.n	800e01e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e00e:	4b0c      	ldr	r3, [pc, #48]	@ (800e040 <prvAddNewTaskToReadyList+0xdc>)
 800e010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e014:	601a      	str	r2, [r3, #0]
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e01e:	bf00      	nop
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	20001c7c 	.word	0x20001c7c
 800e02c:	200017a8 	.word	0x200017a8
 800e030:	20001c88 	.word	0x20001c88
 800e034:	20001c98 	.word	0x20001c98
 800e038:	20001c84 	.word	0x20001c84
 800e03c:	200017ac 	.word	0x200017ac
 800e040:	e000ed04 	.word	0xe000ed04

0800e044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e04c:	2300      	movs	r3, #0
 800e04e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d018      	beq.n	800e088 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e056:	4b14      	ldr	r3, [pc, #80]	@ (800e0a8 <vTaskDelay+0x64>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00b      	beq.n	800e076 <vTaskDelay+0x32>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	60bb      	str	r3, [r7, #8]
}
 800e070:	bf00      	nop
 800e072:	bf00      	nop
 800e074:	e7fd      	b.n	800e072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e076:	f000 f88b 	bl	800e190 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e07a:	2100      	movs	r1, #0
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fee5 	bl	800ee4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e082:	f000 f893 	bl	800e1ac <xTaskResumeAll>
 800e086:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d107      	bne.n	800e09e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e08e:	4b07      	ldr	r3, [pc, #28]	@ (800e0ac <vTaskDelay+0x68>)
 800e090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e094:	601a      	str	r2, [r3, #0]
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e09e:	bf00      	nop
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20001ca4 	.word	0x20001ca4
 800e0ac:	e000ed04 	.word	0xe000ed04

0800e0b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b08a      	sub	sp, #40	@ 0x28
 800e0b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e0be:	463a      	mov	r2, r7
 800e0c0:	1d39      	adds	r1, r7, #4
 800e0c2:	f107 0308 	add.w	r3, r7, #8
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff f81c 	bl	800d104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68ba      	ldr	r2, [r7, #8]
 800e0d2:	9202      	str	r2, [sp, #8]
 800e0d4:	9301      	str	r3, [sp, #4]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	2300      	movs	r3, #0
 800e0dc:	460a      	mov	r2, r1
 800e0de:	4924      	ldr	r1, [pc, #144]	@ (800e170 <vTaskStartScheduler+0xc0>)
 800e0e0:	4824      	ldr	r0, [pc, #144]	@ (800e174 <vTaskStartScheduler+0xc4>)
 800e0e2:	f7ff fdf1 	bl	800dcc8 <xTaskCreateStatic>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	4a23      	ldr	r2, [pc, #140]	@ (800e178 <vTaskStartScheduler+0xc8>)
 800e0ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0ec:	4b22      	ldr	r3, [pc, #136]	@ (800e178 <vTaskStartScheduler+0xc8>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	617b      	str	r3, [r7, #20]
 800e0f8:	e001      	b.n	800e0fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d102      	bne.n	800e10a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e104:	f000 fef6 	bl	800eef4 <xTimerCreateTimerTask>
 800e108:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d11b      	bne.n	800e148 <vTaskStartScheduler+0x98>
	__asm volatile
 800e110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	613b      	str	r3, [r7, #16]
}
 800e122:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e124:	4b15      	ldr	r3, [pc, #84]	@ (800e17c <vTaskStartScheduler+0xcc>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	3354      	adds	r3, #84	@ 0x54
 800e12a:	4a15      	ldr	r2, [pc, #84]	@ (800e180 <vTaskStartScheduler+0xd0>)
 800e12c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e12e:	4b15      	ldr	r3, [pc, #84]	@ (800e184 <vTaskStartScheduler+0xd4>)
 800e130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e134:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e136:	4b14      	ldr	r3, [pc, #80]	@ (800e188 <vTaskStartScheduler+0xd8>)
 800e138:	2201      	movs	r2, #1
 800e13a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e13c:	4b13      	ldr	r3, [pc, #76]	@ (800e18c <vTaskStartScheduler+0xdc>)
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e142:	f001 fabd 	bl	800f6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e146:	e00f      	b.n	800e168 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e14e:	d10b      	bne.n	800e168 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	bf00      	nop
 800e166:	e7fd      	b.n	800e164 <vTaskStartScheduler+0xb4>
}
 800e168:	bf00      	nop
 800e16a:	3718      	adds	r7, #24
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	08013e24 	.word	0x08013e24
 800e174:	0800e9b5 	.word	0x0800e9b5
 800e178:	20001ca0 	.word	0x20001ca0
 800e17c:	200017a8 	.word	0x200017a8
 800e180:	200000c0 	.word	0x200000c0
 800e184:	20001c9c 	.word	0x20001c9c
 800e188:	20001c88 	.word	0x20001c88
 800e18c:	20001c80 	.word	0x20001c80

0800e190 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e190:	b480      	push	{r7}
 800e192:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e194:	4b04      	ldr	r3, [pc, #16]	@ (800e1a8 <vTaskSuspendAll+0x18>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	3301      	adds	r3, #1
 800e19a:	4a03      	ldr	r2, [pc, #12]	@ (800e1a8 <vTaskSuspendAll+0x18>)
 800e19c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e19e:	bf00      	nop
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	20001ca4 	.word	0x20001ca4

0800e1ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e1ba:	4b42      	ldr	r3, [pc, #264]	@ (800e2c4 <xTaskResumeAll+0x118>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d10b      	bne.n	800e1da <xTaskResumeAll+0x2e>
	__asm volatile
 800e1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c6:	f383 8811 	msr	BASEPRI, r3
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	603b      	str	r3, [r7, #0]
}
 800e1d4:	bf00      	nop
 800e1d6:	bf00      	nop
 800e1d8:	e7fd      	b.n	800e1d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e1da:	f001 fb15 	bl	800f808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e1de:	4b39      	ldr	r3, [pc, #228]	@ (800e2c4 <xTaskResumeAll+0x118>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	4a37      	ldr	r2, [pc, #220]	@ (800e2c4 <xTaskResumeAll+0x118>)
 800e1e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1e8:	4b36      	ldr	r3, [pc, #216]	@ (800e2c4 <xTaskResumeAll+0x118>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d162      	bne.n	800e2b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e1f0:	4b35      	ldr	r3, [pc, #212]	@ (800e2c8 <xTaskResumeAll+0x11c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d05e      	beq.n	800e2b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1f8:	e02f      	b.n	800e25a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1fa:	4b34      	ldr	r3, [pc, #208]	@ (800e2cc <xTaskResumeAll+0x120>)
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3318      	adds	r3, #24
 800e206:	4618      	mov	r0, r3
 800e208:	f7ff f83a 	bl	800d280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	3304      	adds	r3, #4
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff f835 	bl	800d280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e21a:	4b2d      	ldr	r3, [pc, #180]	@ (800e2d0 <xTaskResumeAll+0x124>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d903      	bls.n	800e22a <xTaskResumeAll+0x7e>
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e226:	4a2a      	ldr	r2, [pc, #168]	@ (800e2d0 <xTaskResumeAll+0x124>)
 800e228:	6013      	str	r3, [r2, #0]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e22e:	4613      	mov	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4a27      	ldr	r2, [pc, #156]	@ (800e2d4 <xTaskResumeAll+0x128>)
 800e238:	441a      	add	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3304      	adds	r3, #4
 800e23e:	4619      	mov	r1, r3
 800e240:	4610      	mov	r0, r2
 800e242:	f7fe ffc0 	bl	800d1c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e24a:	4b23      	ldr	r3, [pc, #140]	@ (800e2d8 <xTaskResumeAll+0x12c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e250:	429a      	cmp	r2, r3
 800e252:	d302      	bcc.n	800e25a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e254:	4b21      	ldr	r3, [pc, #132]	@ (800e2dc <xTaskResumeAll+0x130>)
 800e256:	2201      	movs	r2, #1
 800e258:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e25a:	4b1c      	ldr	r3, [pc, #112]	@ (800e2cc <xTaskResumeAll+0x120>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1cb      	bne.n	800e1fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e268:	f000 fc60 	bl	800eb2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e26c:	4b1c      	ldr	r3, [pc, #112]	@ (800e2e0 <xTaskResumeAll+0x134>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d010      	beq.n	800e29a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e278:	f000 f940 	bl	800e4fc <xTaskIncrementTick>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d002      	beq.n	800e288 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e282:	4b16      	ldr	r3, [pc, #88]	@ (800e2dc <xTaskResumeAll+0x130>)
 800e284:	2201      	movs	r2, #1
 800e286:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	3b01      	subs	r3, #1
 800e28c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d1f1      	bne.n	800e278 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e294:	4b12      	ldr	r3, [pc, #72]	@ (800e2e0 <xTaskResumeAll+0x134>)
 800e296:	2200      	movs	r2, #0
 800e298:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e29a:	4b10      	ldr	r3, [pc, #64]	@ (800e2dc <xTaskResumeAll+0x130>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d009      	beq.n	800e2b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e4 <xTaskResumeAll+0x138>)
 800e2a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2ac:	601a      	str	r2, [r3, #0]
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e2b6:	f001 fad9 	bl	800f86c <vPortExitCritical>

	return xAlreadyYielded;
 800e2ba:	68bb      	ldr	r3, [r7, #8]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	20001ca4 	.word	0x20001ca4
 800e2c8:	20001c7c 	.word	0x20001c7c
 800e2cc:	20001c3c 	.word	0x20001c3c
 800e2d0:	20001c84 	.word	0x20001c84
 800e2d4:	200017ac 	.word	0x200017ac
 800e2d8:	200017a8 	.word	0x200017a8
 800e2dc:	20001c90 	.word	0x20001c90
 800e2e0:	20001c8c 	.word	0x20001c8c
 800e2e4:	e000ed04 	.word	0xe000ed04

0800e2e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e2ee:	4b05      	ldr	r3, [pc, #20]	@ (800e304 <xTaskGetTickCount+0x1c>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e2f4:	687b      	ldr	r3, [r7, #4]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	20001c80 	.word	0x20001c80

0800e308 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <pcTaskGetName+0x14>
 800e316:	4b0e      	ldr	r3, [pc, #56]	@ (800e350 <pcTaskGetName+0x48>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	e000      	b.n	800e31e <pcTaskGetName+0x16>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10b      	bne.n	800e33e <pcTaskGetName+0x36>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	60bb      	str	r3, [r7, #8]
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	e7fd      	b.n	800e33a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	3334      	adds	r3, #52	@ 0x34
}
 800e342:	4618      	mov	r0, r3
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	200017a8 	.word	0x200017a8

0800e354 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e354:	b480      	push	{r7}
 800e356:	b08b      	sub	sp, #44	@ 0x2c
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e35e:	2300      	movs	r3, #0
 800e360:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d05b      	beq.n	800e422 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	61bb      	str	r3, [r7, #24]
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	685a      	ldr	r2, [r3, #4]
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	605a      	str	r2, [r3, #4]
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	685a      	ldr	r2, [r3, #4]
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	3308      	adds	r3, #8
 800e380:	429a      	cmp	r2, r3
 800e382:	d104      	bne.n	800e38e <prvSearchForNameWithinSingleList+0x3a>
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	685a      	ldr	r2, [r3, #4]
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	605a      	str	r2, [r3, #4]
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	613b      	str	r3, [r7, #16]
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	685a      	ldr	r2, [r3, #4]
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	605a      	str	r2, [r3, #4]
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	685a      	ldr	r2, [r3, #4]
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d104      	bne.n	800e3ba <prvSearchForNameWithinSingleList+0x66>
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	605a      	str	r2, [r3, #4]
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	623b      	str	r3, [r7, #32]
 800e3ca:	e01c      	b.n	800e406 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	6a3b      	ldr	r3, [r7, #32]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	3334      	adds	r3, #52	@ 0x34
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e3d8:	683a      	ldr	r2, [r7, #0]
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	4413      	add	r3, r2
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	7afa      	ldrb	r2, [r7, #11]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d002      	beq.n	800e3ec <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	61fb      	str	r3, [r7, #28]
 800e3ea:	e006      	b.n	800e3fa <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e3ec:	7afb      	ldrb	r3, [r7, #11]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d103      	bne.n	800e3fa <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d106      	bne.n	800e40e <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e400:	6a3b      	ldr	r3, [r7, #32]
 800e402:	3301      	adds	r3, #1
 800e404:	623b      	str	r3, [r7, #32]
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	2b0f      	cmp	r3, #15
 800e40a:	d9df      	bls.n	800e3cc <prvSearchForNameWithinSingleList+0x78>
 800e40c:	e000      	b.n	800e410 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e40e:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e412:	2b00      	cmp	r3, #0
 800e414:	d104      	bne.n	800e420 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d1bb      	bne.n	800e396 <prvSearchForNameWithinSingleList+0x42>
 800e41e:	e000      	b.n	800e422 <prvSearchForNameWithinSingleList+0xce>
					break;
 800e420:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e424:	4618      	mov	r0, r3
 800e426:	372c      	adds	r7, #44	@ 0x2c
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e438:	2338      	movs	r3, #56	@ 0x38
 800e43a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7f1 ff17 	bl	8000270 <strlen>
 800e442:	4603      	mov	r3, r0
 800e444:	2b0f      	cmp	r3, #15
 800e446:	d90b      	bls.n	800e460 <xTaskGetHandle+0x30>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	60fb      	str	r3, [r7, #12]
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	e7fd      	b.n	800e45c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e460:	f7ff fe96 	bl	800e190 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	3b01      	subs	r3, #1
 800e468:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	4613      	mov	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	4a1c      	ldr	r2, [pc, #112]	@ (800e4e8 <xTaskGetHandle+0xb8>)
 800e476:	4413      	add	r3, r2
 800e478:	6879      	ldr	r1, [r7, #4]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7ff ff6a 	bl	800e354 <prvSearchForNameWithinSingleList>
 800e480:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d103      	bne.n	800e490 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1ea      	bne.n	800e464 <xTaskGetHandle+0x34>
 800e48e:	e000      	b.n	800e492 <xTaskGetHandle+0x62>
					break;
 800e490:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d106      	bne.n	800e4a6 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e498:	4b14      	ldr	r3, [pc, #80]	@ (800e4ec <xTaskGetHandle+0xbc>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	6879      	ldr	r1, [r7, #4]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7ff ff58 	bl	800e354 <prvSearchForNameWithinSingleList>
 800e4a4:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d106      	bne.n	800e4ba <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e4ac:	4b10      	ldr	r3, [pc, #64]	@ (800e4f0 <xTaskGetHandle+0xc0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6879      	ldr	r1, [r7, #4]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff ff4e 	bl	800e354 <prvSearchForNameWithinSingleList>
 800e4b8:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d104      	bne.n	800e4ca <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e4c0:	6879      	ldr	r1, [r7, #4]
 800e4c2:	480c      	ldr	r0, [pc, #48]	@ (800e4f4 <xTaskGetHandle+0xc4>)
 800e4c4:	f7ff ff46 	bl	800e354 <prvSearchForNameWithinSingleList>
 800e4c8:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d104      	bne.n	800e4da <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e4d0:	6879      	ldr	r1, [r7, #4]
 800e4d2:	4809      	ldr	r0, [pc, #36]	@ (800e4f8 <xTaskGetHandle+0xc8>)
 800e4d4:	f7ff ff3e 	bl	800e354 <prvSearchForNameWithinSingleList>
 800e4d8:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e4da:	f7ff fe67 	bl	800e1ac <xTaskResumeAll>

		return pxTCB;
 800e4de:	693b      	ldr	r3, [r7, #16]
	}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	200017ac 	.word	0x200017ac
 800e4ec:	20001c34 	.word	0x20001c34
 800e4f0:	20001c38 	.word	0x20001c38
 800e4f4:	20001c68 	.word	0x20001c68
 800e4f8:	20001c50 	.word	0x20001c50

0800e4fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b086      	sub	sp, #24
 800e500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e506:	4b4f      	ldr	r3, [pc, #316]	@ (800e644 <xTaskIncrementTick+0x148>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f040 8090 	bne.w	800e630 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e510:	4b4d      	ldr	r3, [pc, #308]	@ (800e648 <xTaskIncrementTick+0x14c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3301      	adds	r3, #1
 800e516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e518:	4a4b      	ldr	r2, [pc, #300]	@ (800e648 <xTaskIncrementTick+0x14c>)
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d121      	bne.n	800e568 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e524:	4b49      	ldr	r3, [pc, #292]	@ (800e64c <xTaskIncrementTick+0x150>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00b      	beq.n	800e546 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	603b      	str	r3, [r7, #0]
}
 800e540:	bf00      	nop
 800e542:	bf00      	nop
 800e544:	e7fd      	b.n	800e542 <xTaskIncrementTick+0x46>
 800e546:	4b41      	ldr	r3, [pc, #260]	@ (800e64c <xTaskIncrementTick+0x150>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	60fb      	str	r3, [r7, #12]
 800e54c:	4b40      	ldr	r3, [pc, #256]	@ (800e650 <xTaskIncrementTick+0x154>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a3e      	ldr	r2, [pc, #248]	@ (800e64c <xTaskIncrementTick+0x150>)
 800e552:	6013      	str	r3, [r2, #0]
 800e554:	4a3e      	ldr	r2, [pc, #248]	@ (800e650 <xTaskIncrementTick+0x154>)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	4b3e      	ldr	r3, [pc, #248]	@ (800e654 <xTaskIncrementTick+0x158>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	3301      	adds	r3, #1
 800e560:	4a3c      	ldr	r2, [pc, #240]	@ (800e654 <xTaskIncrementTick+0x158>)
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	f000 fae2 	bl	800eb2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e568:	4b3b      	ldr	r3, [pc, #236]	@ (800e658 <xTaskIncrementTick+0x15c>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d349      	bcc.n	800e606 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e572:	4b36      	ldr	r3, [pc, #216]	@ (800e64c <xTaskIncrementTick+0x150>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d104      	bne.n	800e586 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e57c:	4b36      	ldr	r3, [pc, #216]	@ (800e658 <xTaskIncrementTick+0x15c>)
 800e57e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e582:	601a      	str	r2, [r3, #0]
					break;
 800e584:	e03f      	b.n	800e606 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e586:	4b31      	ldr	r3, [pc, #196]	@ (800e64c <xTaskIncrementTick+0x150>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d203      	bcs.n	800e5a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e59e:	4a2e      	ldr	r2, [pc, #184]	@ (800e658 <xTaskIncrementTick+0x15c>)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5a4:	e02f      	b.n	800e606 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe fe68 	bl	800d280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	3318      	adds	r3, #24
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe fe5f 	bl	800d280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5c6:	4b25      	ldr	r3, [pc, #148]	@ (800e65c <xTaskIncrementTick+0x160>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d903      	bls.n	800e5d6 <xTaskIncrementTick+0xda>
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d2:	4a22      	ldr	r2, [pc, #136]	@ (800e65c <xTaskIncrementTick+0x160>)
 800e5d4:	6013      	str	r3, [r2, #0]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5da:	4613      	mov	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4a1f      	ldr	r2, [pc, #124]	@ (800e660 <xTaskIncrementTick+0x164>)
 800e5e4:	441a      	add	r2, r3
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f7fe fdea 	bl	800d1c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800e664 <xTaskIncrementTick+0x168>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d3b8      	bcc.n	800e572 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e600:	2301      	movs	r3, #1
 800e602:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e604:	e7b5      	b.n	800e572 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e606:	4b17      	ldr	r3, [pc, #92]	@ (800e664 <xTaskIncrementTick+0x168>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e60c:	4914      	ldr	r1, [pc, #80]	@ (800e660 <xTaskIncrementTick+0x164>)
 800e60e:	4613      	mov	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	4413      	add	r3, r2
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	440b      	add	r3, r1
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d901      	bls.n	800e622 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e61e:	2301      	movs	r3, #1
 800e620:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e622:	4b11      	ldr	r3, [pc, #68]	@ (800e668 <xTaskIncrementTick+0x16c>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d007      	beq.n	800e63a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e62a:	2301      	movs	r3, #1
 800e62c:	617b      	str	r3, [r7, #20]
 800e62e:	e004      	b.n	800e63a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e630:	4b0e      	ldr	r3, [pc, #56]	@ (800e66c <xTaskIncrementTick+0x170>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	4a0d      	ldr	r2, [pc, #52]	@ (800e66c <xTaskIncrementTick+0x170>)
 800e638:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e63a:	697b      	ldr	r3, [r7, #20]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	20001ca4 	.word	0x20001ca4
 800e648:	20001c80 	.word	0x20001c80
 800e64c:	20001c34 	.word	0x20001c34
 800e650:	20001c38 	.word	0x20001c38
 800e654:	20001c94 	.word	0x20001c94
 800e658:	20001c9c 	.word	0x20001c9c
 800e65c:	20001c84 	.word	0x20001c84
 800e660:	200017ac 	.word	0x200017ac
 800e664:	200017a8 	.word	0x200017a8
 800e668:	20001c90 	.word	0x20001c90
 800e66c:	20001c8c 	.word	0x20001c8c

0800e670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e676:	4b2b      	ldr	r3, [pc, #172]	@ (800e724 <vTaskSwitchContext+0xb4>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d003      	beq.n	800e686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e67e:	4b2a      	ldr	r3, [pc, #168]	@ (800e728 <vTaskSwitchContext+0xb8>)
 800e680:	2201      	movs	r2, #1
 800e682:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e684:	e047      	b.n	800e716 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e686:	4b28      	ldr	r3, [pc, #160]	@ (800e728 <vTaskSwitchContext+0xb8>)
 800e688:	2200      	movs	r2, #0
 800e68a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e68c:	4b27      	ldr	r3, [pc, #156]	@ (800e72c <vTaskSwitchContext+0xbc>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	60fb      	str	r3, [r7, #12]
 800e692:	e011      	b.n	800e6b8 <vTaskSwitchContext+0x48>
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10b      	bne.n	800e6b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	607b      	str	r3, [r7, #4]
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	e7fd      	b.n	800e6ae <vTaskSwitchContext+0x3e>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	491d      	ldr	r1, [pc, #116]	@ (800e730 <vTaskSwitchContext+0xc0>)
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	440b      	add	r3, r1
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d0e3      	beq.n	800e694 <vTaskSwitchContext+0x24>
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	4413      	add	r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4a16      	ldr	r2, [pc, #88]	@ (800e730 <vTaskSwitchContext+0xc0>)
 800e6d8:	4413      	add	r3, r2
 800e6da:	60bb      	str	r3, [r7, #8]
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	605a      	str	r2, [r3, #4]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	685a      	ldr	r2, [r3, #4]
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	3308      	adds	r3, #8
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d104      	bne.n	800e6fc <vTaskSwitchContext+0x8c>
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	685a      	ldr	r2, [r3, #4]
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	605a      	str	r2, [r3, #4]
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	4a0c      	ldr	r2, [pc, #48]	@ (800e734 <vTaskSwitchContext+0xc4>)
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	4a09      	ldr	r2, [pc, #36]	@ (800e72c <vTaskSwitchContext+0xbc>)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e70c:	4b09      	ldr	r3, [pc, #36]	@ (800e734 <vTaskSwitchContext+0xc4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3354      	adds	r3, #84	@ 0x54
 800e712:	4a09      	ldr	r2, [pc, #36]	@ (800e738 <vTaskSwitchContext+0xc8>)
 800e714:	6013      	str	r3, [r2, #0]
}
 800e716:	bf00      	nop
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	20001ca4 	.word	0x20001ca4
 800e728:	20001c90 	.word	0x20001c90
 800e72c:	20001c84 	.word	0x20001c84
 800e730:	200017ac 	.word	0x200017ac
 800e734:	200017a8 	.word	0x200017a8
 800e738:	200000c0 	.word	0x200000c0

0800e73c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10b      	bne.n	800e764 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	60fb      	str	r3, [r7, #12]
}
 800e75e:	bf00      	nop
 800e760:	bf00      	nop
 800e762:	e7fd      	b.n	800e760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e764:	4b07      	ldr	r3, [pc, #28]	@ (800e784 <vTaskPlaceOnEventList+0x48>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	3318      	adds	r3, #24
 800e76a:	4619      	mov	r1, r3
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7fe fd4e 	bl	800d20e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e772:	2101      	movs	r1, #1
 800e774:	6838      	ldr	r0, [r7, #0]
 800e776:	f000 fb69 	bl	800ee4c <prvAddCurrentTaskToDelayedList>
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	200017a8 	.word	0x200017a8

0800e788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b086      	sub	sp, #24
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10b      	bne.n	800e7b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	617b      	str	r3, [r7, #20]
}
 800e7ac:	bf00      	nop
 800e7ae:	bf00      	nop
 800e7b0:	e7fd      	b.n	800e7ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e7dc <vTaskPlaceOnEventListRestricted+0x54>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3318      	adds	r3, #24
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7fe fd03 	bl	800d1c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d002      	beq.n	800e7cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e7c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e7ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e7cc:	6879      	ldr	r1, [r7, #4]
 800e7ce:	68b8      	ldr	r0, [r7, #8]
 800e7d0:	f000 fb3c 	bl	800ee4c <prvAddCurrentTaskToDelayedList>
	}
 800e7d4:	bf00      	nop
 800e7d6:	3718      	adds	r7, #24
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	200017a8 	.word	0x200017a8

0800e7e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10b      	bne.n	800e80e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	60fb      	str	r3, [r7, #12]
}
 800e808:	bf00      	nop
 800e80a:	bf00      	nop
 800e80c:	e7fd      	b.n	800e80a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	3318      	adds	r3, #24
 800e812:	4618      	mov	r0, r3
 800e814:	f7fe fd34 	bl	800d280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e818:	4b1d      	ldr	r3, [pc, #116]	@ (800e890 <xTaskRemoveFromEventList+0xb0>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d11d      	bne.n	800e85c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	3304      	adds	r3, #4
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe fd2b 	bl	800d280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e82e:	4b19      	ldr	r3, [pc, #100]	@ (800e894 <xTaskRemoveFromEventList+0xb4>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d903      	bls.n	800e83e <xTaskRemoveFromEventList+0x5e>
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e83a:	4a16      	ldr	r2, [pc, #88]	@ (800e894 <xTaskRemoveFromEventList+0xb4>)
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e842:	4613      	mov	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4413      	add	r3, r2
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	4a13      	ldr	r2, [pc, #76]	@ (800e898 <xTaskRemoveFromEventList+0xb8>)
 800e84c:	441a      	add	r2, r3
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	3304      	adds	r3, #4
 800e852:	4619      	mov	r1, r3
 800e854:	4610      	mov	r0, r2
 800e856:	f7fe fcb6 	bl	800d1c6 <vListInsertEnd>
 800e85a:	e005      	b.n	800e868 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	3318      	adds	r3, #24
 800e860:	4619      	mov	r1, r3
 800e862:	480e      	ldr	r0, [pc, #56]	@ (800e89c <xTaskRemoveFromEventList+0xbc>)
 800e864:	f7fe fcaf 	bl	800d1c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e86c:	4b0c      	ldr	r3, [pc, #48]	@ (800e8a0 <xTaskRemoveFromEventList+0xc0>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e872:	429a      	cmp	r2, r3
 800e874:	d905      	bls.n	800e882 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e876:	2301      	movs	r3, #1
 800e878:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e87a:	4b0a      	ldr	r3, [pc, #40]	@ (800e8a4 <xTaskRemoveFromEventList+0xc4>)
 800e87c:	2201      	movs	r2, #1
 800e87e:	601a      	str	r2, [r3, #0]
 800e880:	e001      	b.n	800e886 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e882:	2300      	movs	r3, #0
 800e884:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e886:	697b      	ldr	r3, [r7, #20]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	20001ca4 	.word	0x20001ca4
 800e894:	20001c84 	.word	0x20001c84
 800e898:	200017ac 	.word	0x200017ac
 800e89c:	20001c3c 	.word	0x20001c3c
 800e8a0:	200017a8 	.word	0x200017a8
 800e8a4:	20001c90 	.word	0x20001c90

0800e8a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8b0:	4b06      	ldr	r3, [pc, #24]	@ (800e8cc <vTaskInternalSetTimeOutState+0x24>)
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8b8:	4b05      	ldr	r3, [pc, #20]	@ (800e8d0 <vTaskInternalSetTimeOutState+0x28>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	605a      	str	r2, [r3, #4]
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	20001c94 	.word	0x20001c94
 800e8d0:	20001c80 	.word	0x20001c80

0800e8d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10b      	bne.n	800e8fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	613b      	str	r3, [r7, #16]
}
 800e8f6:	bf00      	nop
 800e8f8:	bf00      	nop
 800e8fa:	e7fd      	b.n	800e8f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10b      	bne.n	800e91a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	60fb      	str	r3, [r7, #12]
}
 800e914:	bf00      	nop
 800e916:	bf00      	nop
 800e918:	e7fd      	b.n	800e916 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e91a:	f000 ff75 	bl	800f808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e91e:	4b1d      	ldr	r3, [pc, #116]	@ (800e994 <xTaskCheckForTimeOut+0xc0>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	69ba      	ldr	r2, [r7, #24]
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e936:	d102      	bne.n	800e93e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e938:	2300      	movs	r3, #0
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	e023      	b.n	800e986 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	4b15      	ldr	r3, [pc, #84]	@ (800e998 <xTaskCheckForTimeOut+0xc4>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d007      	beq.n	800e95a <xTaskCheckForTimeOut+0x86>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	429a      	cmp	r2, r3
 800e952:	d302      	bcc.n	800e95a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e954:	2301      	movs	r3, #1
 800e956:	61fb      	str	r3, [r7, #28]
 800e958:	e015      	b.n	800e986 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	429a      	cmp	r2, r3
 800e962:	d20b      	bcs.n	800e97c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	1ad2      	subs	r2, r2, r3
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7ff ff99 	bl	800e8a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e976:	2300      	movs	r3, #0
 800e978:	61fb      	str	r3, [r7, #28]
 800e97a:	e004      	b.n	800e986 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	2200      	movs	r2, #0
 800e980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e982:	2301      	movs	r3, #1
 800e984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e986:	f000 ff71 	bl	800f86c <vPortExitCritical>

	return xReturn;
 800e98a:	69fb      	ldr	r3, [r7, #28]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3720      	adds	r7, #32
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20001c80 	.word	0x20001c80
 800e998:	20001c94 	.word	0x20001c94

0800e99c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9a0:	4b03      	ldr	r3, [pc, #12]	@ (800e9b0 <vTaskMissedYield+0x14>)
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	601a      	str	r2, [r3, #0]
}
 800e9a6:	bf00      	nop
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	20001c90 	.word	0x20001c90

0800e9b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9bc:	f000 f852 	bl	800ea64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9c0:	4b06      	ldr	r3, [pc, #24]	@ (800e9dc <prvIdleTask+0x28>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d9f9      	bls.n	800e9bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9c8:	4b05      	ldr	r3, [pc, #20]	@ (800e9e0 <prvIdleTask+0x2c>)
 800e9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9d8:	e7f0      	b.n	800e9bc <prvIdleTask+0x8>
 800e9da:	bf00      	nop
 800e9dc:	200017ac 	.word	0x200017ac
 800e9e0:	e000ed04 	.word	0xe000ed04

0800e9e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	607b      	str	r3, [r7, #4]
 800e9ee:	e00c      	b.n	800ea0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	4a12      	ldr	r2, [pc, #72]	@ (800ea44 <prvInitialiseTaskLists+0x60>)
 800e9fc:	4413      	add	r3, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe fbb4 	bl	800d16c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3301      	adds	r3, #1
 800ea08:	607b      	str	r3, [r7, #4]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b37      	cmp	r3, #55	@ 0x37
 800ea0e:	d9ef      	bls.n	800e9f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea10:	480d      	ldr	r0, [pc, #52]	@ (800ea48 <prvInitialiseTaskLists+0x64>)
 800ea12:	f7fe fbab 	bl	800d16c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea16:	480d      	ldr	r0, [pc, #52]	@ (800ea4c <prvInitialiseTaskLists+0x68>)
 800ea18:	f7fe fba8 	bl	800d16c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea1c:	480c      	ldr	r0, [pc, #48]	@ (800ea50 <prvInitialiseTaskLists+0x6c>)
 800ea1e:	f7fe fba5 	bl	800d16c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea22:	480c      	ldr	r0, [pc, #48]	@ (800ea54 <prvInitialiseTaskLists+0x70>)
 800ea24:	f7fe fba2 	bl	800d16c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea28:	480b      	ldr	r0, [pc, #44]	@ (800ea58 <prvInitialiseTaskLists+0x74>)
 800ea2a:	f7fe fb9f 	bl	800d16c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea5c <prvInitialiseTaskLists+0x78>)
 800ea30:	4a05      	ldr	r2, [pc, #20]	@ (800ea48 <prvInitialiseTaskLists+0x64>)
 800ea32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea34:	4b0a      	ldr	r3, [pc, #40]	@ (800ea60 <prvInitialiseTaskLists+0x7c>)
 800ea36:	4a05      	ldr	r2, [pc, #20]	@ (800ea4c <prvInitialiseTaskLists+0x68>)
 800ea38:	601a      	str	r2, [r3, #0]
}
 800ea3a:	bf00      	nop
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	200017ac 	.word	0x200017ac
 800ea48:	20001c0c 	.word	0x20001c0c
 800ea4c:	20001c20 	.word	0x20001c20
 800ea50:	20001c3c 	.word	0x20001c3c
 800ea54:	20001c50 	.word	0x20001c50
 800ea58:	20001c68 	.word	0x20001c68
 800ea5c:	20001c34 	.word	0x20001c34
 800ea60:	20001c38 	.word	0x20001c38

0800ea64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea6a:	e019      	b.n	800eaa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea6c:	f000 fecc 	bl	800f808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea70:	4b10      	ldr	r3, [pc, #64]	@ (800eab4 <prvCheckTasksWaitingTermination+0x50>)
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	68db      	ldr	r3, [r3, #12]
 800ea76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3304      	adds	r3, #4
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe fbff 	bl	800d280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea82:	4b0d      	ldr	r3, [pc, #52]	@ (800eab8 <prvCheckTasksWaitingTermination+0x54>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	3b01      	subs	r3, #1
 800ea88:	4a0b      	ldr	r2, [pc, #44]	@ (800eab8 <prvCheckTasksWaitingTermination+0x54>)
 800ea8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea8c:	4b0b      	ldr	r3, [pc, #44]	@ (800eabc <prvCheckTasksWaitingTermination+0x58>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	3b01      	subs	r3, #1
 800ea92:	4a0a      	ldr	r2, [pc, #40]	@ (800eabc <prvCheckTasksWaitingTermination+0x58>)
 800ea94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea96:	f000 fee9 	bl	800f86c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f810 	bl	800eac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eaa0:	4b06      	ldr	r3, [pc, #24]	@ (800eabc <prvCheckTasksWaitingTermination+0x58>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e1      	bne.n	800ea6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	3708      	adds	r7, #8
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20001c50 	.word	0x20001c50
 800eab8:	20001c7c 	.word	0x20001c7c
 800eabc:	20001c64 	.word	0x20001c64

0800eac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	3354      	adds	r3, #84	@ 0x54
 800eacc:	4618      	mov	r0, r3
 800eace:	f001 fef1 	bl	80108b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d108      	bne.n	800eaee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eae0:	4618      	mov	r0, r3
 800eae2:	f001 f881 	bl	800fbe8 <vPortFree>
				vPortFree( pxTCB );
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f001 f87e 	bl	800fbe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eaec:	e019      	b.n	800eb22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d103      	bne.n	800eb00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f001 f875 	bl	800fbe8 <vPortFree>
	}
 800eafe:	e010      	b.n	800eb22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d00b      	beq.n	800eb22 <prvDeleteTCB+0x62>
	__asm volatile
 800eb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb0e:	f383 8811 	msr	BASEPRI, r3
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	60fb      	str	r3, [r7, #12]
}
 800eb1c:	bf00      	nop
 800eb1e:	bf00      	nop
 800eb20:	e7fd      	b.n	800eb1e <prvDeleteTCB+0x5e>
	}
 800eb22:	bf00      	nop
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
	...

0800eb2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb32:	4b0c      	ldr	r3, [pc, #48]	@ (800eb64 <prvResetNextTaskUnblockTime+0x38>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d104      	bne.n	800eb46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb68 <prvResetNextTaskUnblockTime+0x3c>)
 800eb3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb44:	e008      	b.n	800eb58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb46:	4b07      	ldr	r3, [pc, #28]	@ (800eb64 <prvResetNextTaskUnblockTime+0x38>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	4a04      	ldr	r2, [pc, #16]	@ (800eb68 <prvResetNextTaskUnblockTime+0x3c>)
 800eb56:	6013      	str	r3, [r2, #0]
}
 800eb58:	bf00      	nop
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	20001c34 	.word	0x20001c34
 800eb68:	20001c9c 	.word	0x20001c9c

0800eb6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb72:	4b0b      	ldr	r3, [pc, #44]	@ (800eba0 <xTaskGetSchedulerState+0x34>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d102      	bne.n	800eb80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	607b      	str	r3, [r7, #4]
 800eb7e:	e008      	b.n	800eb92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb80:	4b08      	ldr	r3, [pc, #32]	@ (800eba4 <xTaskGetSchedulerState+0x38>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d102      	bne.n	800eb8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb88:	2302      	movs	r3, #2
 800eb8a:	607b      	str	r3, [r7, #4]
 800eb8c:	e001      	b.n	800eb92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb92:	687b      	ldr	r3, [r7, #4]
	}
 800eb94:	4618      	mov	r0, r3
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr
 800eba0:	20001c88 	.word	0x20001c88
 800eba4:	20001ca4 	.word	0x20001ca4

0800eba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d058      	beq.n	800ec70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ebbe:	4b2f      	ldr	r3, [pc, #188]	@ (800ec7c <xTaskPriorityDisinherit+0xd4>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	693a      	ldr	r2, [r7, #16]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d00b      	beq.n	800ebe0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	60fb      	str	r3, [r7, #12]
}
 800ebda:	bf00      	nop
 800ebdc:	bf00      	nop
 800ebde:	e7fd      	b.n	800ebdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10b      	bne.n	800ec00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ebe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebec:	f383 8811 	msr	BASEPRI, r3
 800ebf0:	f3bf 8f6f 	isb	sy
 800ebf4:	f3bf 8f4f 	dsb	sy
 800ebf8:	60bb      	str	r3, [r7, #8]
}
 800ebfa:	bf00      	nop
 800ebfc:	bf00      	nop
 800ebfe:	e7fd      	b.n	800ebfc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec04:	1e5a      	subs	r2, r3, #1
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d02c      	beq.n	800ec70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d128      	bne.n	800ec70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe fb2c 	bl	800d280 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec40:	4b0f      	ldr	r3, [pc, #60]	@ (800ec80 <xTaskPriorityDisinherit+0xd8>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d903      	bls.n	800ec50 <xTaskPriorityDisinherit+0xa8>
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec4c:	4a0c      	ldr	r2, [pc, #48]	@ (800ec80 <xTaskPriorityDisinherit+0xd8>)
 800ec4e:	6013      	str	r3, [r2, #0]
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec54:	4613      	mov	r3, r2
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	4413      	add	r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	4a09      	ldr	r2, [pc, #36]	@ (800ec84 <xTaskPriorityDisinherit+0xdc>)
 800ec5e:	441a      	add	r2, r3
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	3304      	adds	r3, #4
 800ec64:	4619      	mov	r1, r3
 800ec66:	4610      	mov	r0, r2
 800ec68:	f7fe faad 	bl	800d1c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec70:	697b      	ldr	r3, [r7, #20]
	}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3718      	adds	r7, #24
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	200017a8 	.word	0x200017a8
 800ec80:	20001c84 	.word	0x20001c84
 800ec84:	200017ac 	.word	0x200017ac

0800ec88 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ec92:	f000 fdb9 	bl	800f808 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ec96:	4b20      	ldr	r3, [pc, #128]	@ (800ed18 <ulTaskNotifyTake+0x90>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d113      	bne.n	800ecca <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800eca2:	4b1d      	ldr	r3, [pc, #116]	@ (800ed18 <ulTaskNotifyTake+0x90>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00b      	beq.n	800ecca <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ecb2:	2101      	movs	r1, #1
 800ecb4:	6838      	ldr	r0, [r7, #0]
 800ecb6:	f000 f8c9 	bl	800ee4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ecba:	4b18      	ldr	r3, [pc, #96]	@ (800ed1c <ulTaskNotifyTake+0x94>)
 800ecbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ecca:	f000 fdcf 	bl	800f86c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ecce:	f000 fd9b 	bl	800f808 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ecd2:	4b11      	ldr	r3, [pc, #68]	@ (800ed18 <ulTaskNotifyTake+0x90>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ecda:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00e      	beq.n	800ed00 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d005      	beq.n	800ecf4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ece8:	4b0b      	ldr	r3, [pc, #44]	@ (800ed18 <ulTaskNotifyTake+0x90>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800ecf2:	e005      	b.n	800ed00 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ecf4:	4b08      	ldr	r3, [pc, #32]	@ (800ed18 <ulTaskNotifyTake+0x90>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	3a01      	subs	r2, #1
 800ecfc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed00:	4b05      	ldr	r3, [pc, #20]	@ (800ed18 <ulTaskNotifyTake+0x90>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ed0a:	f000 fdaf 	bl	800f86c <vPortExitCritical>

		return ulReturn;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
	}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	200017a8 	.word	0x200017a8
 800ed1c:	e000ed04 	.word	0xe000ed04

0800ed20 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b08a      	sub	sp, #40	@ 0x28
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10b      	bne.n	800ed48 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	61bb      	str	r3, [r7, #24]
}
 800ed42:	bf00      	nop
 800ed44:	bf00      	nop
 800ed46:	e7fd      	b.n	800ed44 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed48:	f000 fe3e 	bl	800f9c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800ed50:	f3ef 8211 	mrs	r2, BASEPRI
 800ed54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed58:	f383 8811 	msr	BASEPRI, r3
 800ed5c:	f3bf 8f6f 	isb	sy
 800ed60:	f3bf 8f4f 	dsb	sy
 800ed64:	617a      	str	r2, [r7, #20]
 800ed66:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ed68:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed6a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ed6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ed72:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ed74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed76:	2202      	movs	r2, #2
 800ed78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed82:	1c5a      	adds	r2, r3, #1
 800ed84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ed8a:	7ffb      	ldrb	r3, [r7, #31]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d147      	bne.n	800ee20 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ed90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00b      	beq.n	800edb0 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	60fb      	str	r3, [r7, #12]
}
 800edaa:	bf00      	nop
 800edac:	bf00      	nop
 800edae:	e7fd      	b.n	800edac <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edb0:	4b20      	ldr	r3, [pc, #128]	@ (800ee34 <vTaskNotifyGiveFromISR+0x114>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d11d      	bne.n	800edf4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800edb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edba:	3304      	adds	r3, #4
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7fe fa5f 	bl	800d280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800edc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edc6:	4b1c      	ldr	r3, [pc, #112]	@ (800ee38 <vTaskNotifyGiveFromISR+0x118>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d903      	bls.n	800edd6 <vTaskNotifyGiveFromISR+0xb6>
 800edce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd2:	4a19      	ldr	r2, [pc, #100]	@ (800ee38 <vTaskNotifyGiveFromISR+0x118>)
 800edd4:	6013      	str	r3, [r2, #0]
 800edd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edda:	4613      	mov	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4413      	add	r3, r2
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4a16      	ldr	r2, [pc, #88]	@ (800ee3c <vTaskNotifyGiveFromISR+0x11c>)
 800ede4:	441a      	add	r2, r3
 800ede6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede8:	3304      	adds	r3, #4
 800edea:	4619      	mov	r1, r3
 800edec:	4610      	mov	r0, r2
 800edee:	f7fe f9ea 	bl	800d1c6 <vListInsertEnd>
 800edf2:	e005      	b.n	800ee00 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800edf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf6:	3318      	adds	r3, #24
 800edf8:	4619      	mov	r1, r3
 800edfa:	4811      	ldr	r0, [pc, #68]	@ (800ee40 <vTaskNotifyGiveFromISR+0x120>)
 800edfc:	f7fe f9e3 	bl	800d1c6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee04:	4b0f      	ldr	r3, [pc, #60]	@ (800ee44 <vTaskNotifyGiveFromISR+0x124>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d908      	bls.n	800ee20 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	2201      	movs	r2, #1
 800ee18:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ee1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee48 <vTaskNotifyGiveFromISR+0x128>)
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	6a3b      	ldr	r3, [r7, #32]
 800ee22:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	f383 8811 	msr	BASEPRI, r3
}
 800ee2a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ee2c:	bf00      	nop
 800ee2e:	3728      	adds	r7, #40	@ 0x28
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	20001ca4 	.word	0x20001ca4
 800ee38:	20001c84 	.word	0x20001c84
 800ee3c:	200017ac 	.word	0x200017ac
 800ee40:	20001c3c 	.word	0x20001c3c
 800ee44:	200017a8 	.word	0x200017a8
 800ee48:	20001c90 	.word	0x20001c90

0800ee4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee56:	4b21      	ldr	r3, [pc, #132]	@ (800eedc <prvAddCurrentTaskToDelayedList+0x90>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee5c:	4b20      	ldr	r3, [pc, #128]	@ (800eee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3304      	adds	r3, #4
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fe fa0c 	bl	800d280 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee6e:	d10a      	bne.n	800ee86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d007      	beq.n	800ee86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee76:	4b1a      	ldr	r3, [pc, #104]	@ (800eee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4819      	ldr	r0, [pc, #100]	@ (800eee4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ee80:	f7fe f9a1 	bl	800d1c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee84:	e026      	b.n	800eed4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee8e:	4b14      	ldr	r3, [pc, #80]	@ (800eee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee96:	68ba      	ldr	r2, [r7, #8]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d209      	bcs.n	800eeb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee9e:	4b12      	ldr	r3, [pc, #72]	@ (800eee8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	4b0f      	ldr	r3, [pc, #60]	@ (800eee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3304      	adds	r3, #4
 800eea8:	4619      	mov	r1, r3
 800eeaa:	4610      	mov	r0, r2
 800eeac:	f7fe f9af 	bl	800d20e <vListInsert>
}
 800eeb0:	e010      	b.n	800eed4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eeb2:	4b0e      	ldr	r3, [pc, #56]	@ (800eeec <prvAddCurrentTaskToDelayedList+0xa0>)
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	4b0a      	ldr	r3, [pc, #40]	@ (800eee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3304      	adds	r3, #4
 800eebc:	4619      	mov	r1, r3
 800eebe:	4610      	mov	r0, r2
 800eec0:	f7fe f9a5 	bl	800d20e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eec4:	4b0a      	ldr	r3, [pc, #40]	@ (800eef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d202      	bcs.n	800eed4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800eece:	4a08      	ldr	r2, [pc, #32]	@ (800eef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	6013      	str	r3, [r2, #0]
}
 800eed4:	bf00      	nop
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	20001c80 	.word	0x20001c80
 800eee0:	200017a8 	.word	0x200017a8
 800eee4:	20001c68 	.word	0x20001c68
 800eee8:	20001c38 	.word	0x20001c38
 800eeec:	20001c34 	.word	0x20001c34
 800eef0:	20001c9c 	.word	0x20001c9c

0800eef4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b08a      	sub	sp, #40	@ 0x28
 800eef8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eefa:	2300      	movs	r3, #0
 800eefc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eefe:	f000 fb13 	bl	800f528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef02:	4b1d      	ldr	r3, [pc, #116]	@ (800ef78 <xTimerCreateTimerTask+0x84>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d021      	beq.n	800ef4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef12:	1d3a      	adds	r2, r7, #4
 800ef14:	f107 0108 	add.w	r1, r7, #8
 800ef18:	f107 030c 	add.w	r3, r7, #12
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fe f90b 	bl	800d138 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef22:	6879      	ldr	r1, [r7, #4]
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	9202      	str	r2, [sp, #8]
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	2302      	movs	r3, #2
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	2300      	movs	r3, #0
 800ef32:	460a      	mov	r2, r1
 800ef34:	4911      	ldr	r1, [pc, #68]	@ (800ef7c <xTimerCreateTimerTask+0x88>)
 800ef36:	4812      	ldr	r0, [pc, #72]	@ (800ef80 <xTimerCreateTimerTask+0x8c>)
 800ef38:	f7fe fec6 	bl	800dcc8 <xTaskCreateStatic>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	4a11      	ldr	r2, [pc, #68]	@ (800ef84 <xTimerCreateTimerTask+0x90>)
 800ef40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef42:	4b10      	ldr	r3, [pc, #64]	@ (800ef84 <xTimerCreateTimerTask+0x90>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10b      	bne.n	800ef6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ef54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef58:	f383 8811 	msr	BASEPRI, r3
 800ef5c:	f3bf 8f6f 	isb	sy
 800ef60:	f3bf 8f4f 	dsb	sy
 800ef64:	613b      	str	r3, [r7, #16]
}
 800ef66:	bf00      	nop
 800ef68:	bf00      	nop
 800ef6a:	e7fd      	b.n	800ef68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ef6c:	697b      	ldr	r3, [r7, #20]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3718      	adds	r7, #24
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	20001cd8 	.word	0x20001cd8
 800ef7c:	08013e2c 	.word	0x08013e2c
 800ef80:	0800f0c1 	.word	0x0800f0c1
 800ef84:	20001cdc 	.word	0x20001cdc

0800ef88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b08a      	sub	sp, #40	@ 0x28
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
 800ef94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef96:	2300      	movs	r3, #0
 800ef98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10b      	bne.n	800efb8 <xTimerGenericCommand+0x30>
	__asm volatile
 800efa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	623b      	str	r3, [r7, #32]
}
 800efb2:	bf00      	nop
 800efb4:	bf00      	nop
 800efb6:	e7fd      	b.n	800efb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800efb8:	4b19      	ldr	r3, [pc, #100]	@ (800f020 <xTimerGenericCommand+0x98>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d02a      	beq.n	800f016 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2b05      	cmp	r3, #5
 800efd0:	dc18      	bgt.n	800f004 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efd2:	f7ff fdcb 	bl	800eb6c <xTaskGetSchedulerState>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b02      	cmp	r3, #2
 800efda:	d109      	bne.n	800eff0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efdc:	4b10      	ldr	r3, [pc, #64]	@ (800f020 <xTimerGenericCommand+0x98>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	f107 0110 	add.w	r1, r7, #16
 800efe4:	2300      	movs	r3, #0
 800efe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efe8:	f7fe fa7e 	bl	800d4e8 <xQueueGenericSend>
 800efec:	6278      	str	r0, [r7, #36]	@ 0x24
 800efee:	e012      	b.n	800f016 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eff0:	4b0b      	ldr	r3, [pc, #44]	@ (800f020 <xTimerGenericCommand+0x98>)
 800eff2:	6818      	ldr	r0, [r3, #0]
 800eff4:	f107 0110 	add.w	r1, r7, #16
 800eff8:	2300      	movs	r3, #0
 800effa:	2200      	movs	r2, #0
 800effc:	f7fe fa74 	bl	800d4e8 <xQueueGenericSend>
 800f000:	6278      	str	r0, [r7, #36]	@ 0x24
 800f002:	e008      	b.n	800f016 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f004:	4b06      	ldr	r3, [pc, #24]	@ (800f020 <xTimerGenericCommand+0x98>)
 800f006:	6818      	ldr	r0, [r3, #0]
 800f008:	f107 0110 	add.w	r1, r7, #16
 800f00c:	2300      	movs	r3, #0
 800f00e:	683a      	ldr	r2, [r7, #0]
 800f010:	f7fe fb6c 	bl	800d6ec <xQueueGenericSendFromISR>
 800f014:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3728      	adds	r7, #40	@ 0x28
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	20001cd8 	.word	0x20001cd8

0800f024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b088      	sub	sp, #32
 800f028:	af02      	add	r7, sp, #8
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f02e:	4b23      	ldr	r3, [pc, #140]	@ (800f0bc <prvProcessExpiredTimer+0x98>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	3304      	adds	r3, #4
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fe f91f 	bl	800d280 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f048:	f003 0304 	and.w	r3, r3, #4
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d023      	beq.n	800f098 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	699a      	ldr	r2, [r3, #24]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	18d1      	adds	r1, r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	6978      	ldr	r0, [r7, #20]
 800f05e:	f000 f8d5 	bl	800f20c <prvInsertTimerInActiveList>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d020      	beq.n	800f0aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f068:	2300      	movs	r3, #0
 800f06a:	9300      	str	r3, [sp, #0]
 800f06c:	2300      	movs	r3, #0
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	2100      	movs	r1, #0
 800f072:	6978      	ldr	r0, [r7, #20]
 800f074:	f7ff ff88 	bl	800ef88 <xTimerGenericCommand>
 800f078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d114      	bne.n	800f0aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	60fb      	str	r3, [r7, #12]
}
 800f092:	bf00      	nop
 800f094:	bf00      	nop
 800f096:	e7fd      	b.n	800f094 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f09e:	f023 0301 	bic.w	r3, r3, #1
 800f0a2:	b2da      	uxtb	r2, r3
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	6a1b      	ldr	r3, [r3, #32]
 800f0ae:	6978      	ldr	r0, [r7, #20]
 800f0b0:	4798      	blx	r3
}
 800f0b2:	bf00      	nop
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	20001cd0 	.word	0x20001cd0

0800f0c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0c8:	f107 0308 	add.w	r3, r7, #8
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f000 f859 	bl	800f184 <prvGetNextExpireTime>
 800f0d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f000 f805 	bl	800f0e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0de:	f000 f8d7 	bl	800f290 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0e2:	bf00      	nop
 800f0e4:	e7f0      	b.n	800f0c8 <prvTimerTask+0x8>
	...

0800f0e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0f2:	f7ff f84d 	bl	800e190 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0f6:	f107 0308 	add.w	r3, r7, #8
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 f866 	bl	800f1cc <prvSampleTimeNow>
 800f100:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d130      	bne.n	800f16a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d10a      	bne.n	800f124 <prvProcessTimerOrBlockTask+0x3c>
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	429a      	cmp	r2, r3
 800f114:	d806      	bhi.n	800f124 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f116:	f7ff f849 	bl	800e1ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f11a:	68f9      	ldr	r1, [r7, #12]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7ff ff81 	bl	800f024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f122:	e024      	b.n	800f16e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d008      	beq.n	800f13c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f12a:	4b13      	ldr	r3, [pc, #76]	@ (800f178 <prvProcessTimerOrBlockTask+0x90>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d101      	bne.n	800f138 <prvProcessTimerOrBlockTask+0x50>
 800f134:	2301      	movs	r3, #1
 800f136:	e000      	b.n	800f13a <prvProcessTimerOrBlockTask+0x52>
 800f138:	2300      	movs	r3, #0
 800f13a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f13c:	4b0f      	ldr	r3, [pc, #60]	@ (800f17c <prvProcessTimerOrBlockTask+0x94>)
 800f13e:	6818      	ldr	r0, [r3, #0]
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	4619      	mov	r1, r3
 800f14a:	f7fe fd89 	bl	800dc60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f14e:	f7ff f82d 	bl	800e1ac <xTaskResumeAll>
 800f152:	4603      	mov	r3, r0
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10a      	bne.n	800f16e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f158:	4b09      	ldr	r3, [pc, #36]	@ (800f180 <prvProcessTimerOrBlockTask+0x98>)
 800f15a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f15e:	601a      	str	r2, [r3, #0]
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	f3bf 8f6f 	isb	sy
}
 800f168:	e001      	b.n	800f16e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f16a:	f7ff f81f 	bl	800e1ac <xTaskResumeAll>
}
 800f16e:	bf00      	nop
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	20001cd4 	.word	0x20001cd4
 800f17c:	20001cd8 	.word	0x20001cd8
 800f180:	e000ed04 	.word	0xe000ed04

0800f184 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f18c:	4b0e      	ldr	r3, [pc, #56]	@ (800f1c8 <prvGetNextExpireTime+0x44>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d101      	bne.n	800f19a <prvGetNextExpireTime+0x16>
 800f196:	2201      	movs	r2, #1
 800f198:	e000      	b.n	800f19c <prvGetNextExpireTime+0x18>
 800f19a:	2200      	movs	r2, #0
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d105      	bne.n	800f1b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1a8:	4b07      	ldr	r3, [pc, #28]	@ (800f1c8 <prvGetNextExpireTime+0x44>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	60fb      	str	r3, [r7, #12]
 800f1b2:	e001      	b.n	800f1b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3714      	adds	r7, #20
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop
 800f1c8:	20001cd0 	.word	0x20001cd0

0800f1cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f1d4:	f7ff f888 	bl	800e2e8 <xTaskGetTickCount>
 800f1d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f1da:	4b0b      	ldr	r3, [pc, #44]	@ (800f208 <prvSampleTimeNow+0x3c>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d205      	bcs.n	800f1f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f1e4:	f000 f93a 	bl	800f45c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	601a      	str	r2, [r3, #0]
 800f1ee:	e002      	b.n	800f1f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1f6:	4a04      	ldr	r2, [pc, #16]	@ (800f208 <prvSampleTimeNow+0x3c>)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	20001ce0 	.word	0x20001ce0

0800f20c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
 800f218:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f21a:	2300      	movs	r3, #0
 800f21c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d812      	bhi.n	800f258 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	1ad2      	subs	r2, r2, r3
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	699b      	ldr	r3, [r3, #24]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d302      	bcc.n	800f246 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f240:	2301      	movs	r3, #1
 800f242:	617b      	str	r3, [r7, #20]
 800f244:	e01b      	b.n	800f27e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f246:	4b10      	ldr	r3, [pc, #64]	@ (800f288 <prvInsertTimerInActiveList+0x7c>)
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	3304      	adds	r3, #4
 800f24e:	4619      	mov	r1, r3
 800f250:	4610      	mov	r0, r2
 800f252:	f7fd ffdc 	bl	800d20e <vListInsert>
 800f256:	e012      	b.n	800f27e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d206      	bcs.n	800f26e <prvInsertTimerInActiveList+0x62>
 800f260:	68ba      	ldr	r2, [r7, #8]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	429a      	cmp	r2, r3
 800f266:	d302      	bcc.n	800f26e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f268:	2301      	movs	r3, #1
 800f26a:	617b      	str	r3, [r7, #20]
 800f26c:	e007      	b.n	800f27e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f26e:	4b07      	ldr	r3, [pc, #28]	@ (800f28c <prvInsertTimerInActiveList+0x80>)
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	3304      	adds	r3, #4
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7fd ffc8 	bl	800d20e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f27e:	697b      	ldr	r3, [r7, #20]
}
 800f280:	4618      	mov	r0, r3
 800f282:	3718      	adds	r7, #24
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	20001cd4 	.word	0x20001cd4
 800f28c:	20001cd0 	.word	0x20001cd0

0800f290 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b08e      	sub	sp, #56	@ 0x38
 800f294:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f296:	e0ce      	b.n	800f436 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	da19      	bge.n	800f2d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f29e:	1d3b      	adds	r3, r7, #4
 800f2a0:	3304      	adds	r3, #4
 800f2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10b      	bne.n	800f2c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	61fb      	str	r3, [r7, #28]
}
 800f2bc:	bf00      	nop
 800f2be:	bf00      	nop
 800f2c0:	e7fd      	b.n	800f2be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2c8:	6850      	ldr	r0, [r2, #4]
 800f2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2cc:	6892      	ldr	r2, [r2, #8]
 800f2ce:	4611      	mov	r1, r2
 800f2d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f2c0 80ae 	blt.w	800f436 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d004      	beq.n	800f2f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e8:	3304      	adds	r3, #4
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd ffc8 	bl	800d280 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2f0:	463b      	mov	r3, r7
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff ff6a 	bl	800f1cc <prvSampleTimeNow>
 800f2f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b09      	cmp	r3, #9
 800f2fe:	f200 8097 	bhi.w	800f430 <prvProcessReceivedCommands+0x1a0>
 800f302:	a201      	add	r2, pc, #4	@ (adr r2, 800f308 <prvProcessReceivedCommands+0x78>)
 800f304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f308:	0800f331 	.word	0x0800f331
 800f30c:	0800f331 	.word	0x0800f331
 800f310:	0800f331 	.word	0x0800f331
 800f314:	0800f3a7 	.word	0x0800f3a7
 800f318:	0800f3bb 	.word	0x0800f3bb
 800f31c:	0800f407 	.word	0x0800f407
 800f320:	0800f331 	.word	0x0800f331
 800f324:	0800f331 	.word	0x0800f331
 800f328:	0800f3a7 	.word	0x0800f3a7
 800f32c:	0800f3bb 	.word	0x0800f3bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f332:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f336:	f043 0301 	orr.w	r3, r3, #1
 800f33a:	b2da      	uxtb	r2, r3
 800f33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f33e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f346:	699b      	ldr	r3, [r3, #24]
 800f348:	18d1      	adds	r1, r2, r3
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f34e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f350:	f7ff ff5c 	bl	800f20c <prvInsertTimerInActiveList>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d06c      	beq.n	800f434 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f360:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f368:	f003 0304 	and.w	r3, r3, #4
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d061      	beq.n	800f434 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f370:	68ba      	ldr	r2, [r7, #8]
 800f372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f374:	699b      	ldr	r3, [r3, #24]
 800f376:	441a      	add	r2, r3
 800f378:	2300      	movs	r3, #0
 800f37a:	9300      	str	r3, [sp, #0]
 800f37c:	2300      	movs	r3, #0
 800f37e:	2100      	movs	r1, #0
 800f380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f382:	f7ff fe01 	bl	800ef88 <xTimerGenericCommand>
 800f386:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f388:	6a3b      	ldr	r3, [r7, #32]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d152      	bne.n	800f434 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	61bb      	str	r3, [r7, #24]
}
 800f3a0:	bf00      	nop
 800f3a2:	bf00      	nop
 800f3a4:	e7fd      	b.n	800f3a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3ac:	f023 0301 	bic.w	r3, r3, #1
 800f3b0:	b2da      	uxtb	r2, r3
 800f3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f3b8:	e03d      	b.n	800f436 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3c0:	f043 0301 	orr.w	r3, r3, #1
 800f3c4:	b2da      	uxtb	r2, r3
 800f3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d4:	699b      	ldr	r3, [r3, #24]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10b      	bne.n	800f3f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3de:	f383 8811 	msr	BASEPRI, r3
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	f3bf 8f4f 	dsb	sy
 800f3ea:	617b      	str	r3, [r7, #20]
}
 800f3ec:	bf00      	nop
 800f3ee:	bf00      	nop
 800f3f0:	e7fd      	b.n	800f3ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f4:	699a      	ldr	r2, [r3, #24]
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f8:	18d1      	adds	r1, r2, r3
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f400:	f7ff ff04 	bl	800f20c <prvInsertTimerInActiveList>
					break;
 800f404:	e017      	b.n	800f436 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f40c:	f003 0302 	and.w	r3, r3, #2
 800f410:	2b00      	cmp	r3, #0
 800f412:	d103      	bne.n	800f41c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f416:	f000 fbe7 	bl	800fbe8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f41a:	e00c      	b.n	800f436 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f41e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f422:	f023 0301 	bic.w	r3, r3, #1
 800f426:	b2da      	uxtb	r2, r3
 800f428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f42e:	e002      	b.n	800f436 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f430:	bf00      	nop
 800f432:	e000      	b.n	800f436 <prvProcessReceivedCommands+0x1a6>
					break;
 800f434:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f436:	4b08      	ldr	r3, [pc, #32]	@ (800f458 <prvProcessReceivedCommands+0x1c8>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	1d39      	adds	r1, r7, #4
 800f43c:	2200      	movs	r2, #0
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fe f9f2 	bl	800d828 <xQueueReceive>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	f47f af26 	bne.w	800f298 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f44c:	bf00      	nop
 800f44e:	bf00      	nop
 800f450:	3730      	adds	r7, #48	@ 0x30
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20001cd8 	.word	0x20001cd8

0800f45c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b088      	sub	sp, #32
 800f460:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f462:	e049      	b.n	800f4f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f464:	4b2e      	ldr	r3, [pc, #184]	@ (800f520 <prvSwitchTimerLists+0xc4>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f46e:	4b2c      	ldr	r3, [pc, #176]	@ (800f520 <prvSwitchTimerLists+0xc4>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	3304      	adds	r3, #4
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fd feff 	bl	800d280 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f490:	f003 0304 	and.w	r3, r3, #4
 800f494:	2b00      	cmp	r3, #0
 800f496:	d02f      	beq.n	800f4f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	699b      	ldr	r3, [r3, #24]
 800f49c:	693a      	ldr	r2, [r7, #16]
 800f49e:	4413      	add	r3, r2
 800f4a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d90e      	bls.n	800f4c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4b6:	4b1a      	ldr	r3, [pc, #104]	@ (800f520 <prvSwitchTimerLists+0xc4>)
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4619      	mov	r1, r3
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	f7fd fea4 	bl	800d20e <vListInsert>
 800f4c6:	e017      	b.n	800f4f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f7ff fd58 	bl	800ef88 <xTimerGenericCommand>
 800f4d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d10b      	bne.n	800f4f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e4:	f383 8811 	msr	BASEPRI, r3
 800f4e8:	f3bf 8f6f 	isb	sy
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	603b      	str	r3, [r7, #0]
}
 800f4f2:	bf00      	nop
 800f4f4:	bf00      	nop
 800f4f6:	e7fd      	b.n	800f4f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f4f8:	4b09      	ldr	r3, [pc, #36]	@ (800f520 <prvSwitchTimerLists+0xc4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1b0      	bne.n	800f464 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f502:	4b07      	ldr	r3, [pc, #28]	@ (800f520 <prvSwitchTimerLists+0xc4>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f508:	4b06      	ldr	r3, [pc, #24]	@ (800f524 <prvSwitchTimerLists+0xc8>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4a04      	ldr	r2, [pc, #16]	@ (800f520 <prvSwitchTimerLists+0xc4>)
 800f50e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f510:	4a04      	ldr	r2, [pc, #16]	@ (800f524 <prvSwitchTimerLists+0xc8>)
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	6013      	str	r3, [r2, #0]
}
 800f516:	bf00      	nop
 800f518:	3718      	adds	r7, #24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	20001cd0 	.word	0x20001cd0
 800f524:	20001cd4 	.word	0x20001cd4

0800f528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f52e:	f000 f96b 	bl	800f808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f532:	4b15      	ldr	r3, [pc, #84]	@ (800f588 <prvCheckForValidListAndQueue+0x60>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d120      	bne.n	800f57c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f53a:	4814      	ldr	r0, [pc, #80]	@ (800f58c <prvCheckForValidListAndQueue+0x64>)
 800f53c:	f7fd fe16 	bl	800d16c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f540:	4813      	ldr	r0, [pc, #76]	@ (800f590 <prvCheckForValidListAndQueue+0x68>)
 800f542:	f7fd fe13 	bl	800d16c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f546:	4b13      	ldr	r3, [pc, #76]	@ (800f594 <prvCheckForValidListAndQueue+0x6c>)
 800f548:	4a10      	ldr	r2, [pc, #64]	@ (800f58c <prvCheckForValidListAndQueue+0x64>)
 800f54a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f54c:	4b12      	ldr	r3, [pc, #72]	@ (800f598 <prvCheckForValidListAndQueue+0x70>)
 800f54e:	4a10      	ldr	r2, [pc, #64]	@ (800f590 <prvCheckForValidListAndQueue+0x68>)
 800f550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f552:	2300      	movs	r3, #0
 800f554:	9300      	str	r3, [sp, #0]
 800f556:	4b11      	ldr	r3, [pc, #68]	@ (800f59c <prvCheckForValidListAndQueue+0x74>)
 800f558:	4a11      	ldr	r2, [pc, #68]	@ (800f5a0 <prvCheckForValidListAndQueue+0x78>)
 800f55a:	2110      	movs	r1, #16
 800f55c:	200a      	movs	r0, #10
 800f55e:	f7fd ff23 	bl	800d3a8 <xQueueGenericCreateStatic>
 800f562:	4603      	mov	r3, r0
 800f564:	4a08      	ldr	r2, [pc, #32]	@ (800f588 <prvCheckForValidListAndQueue+0x60>)
 800f566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f568:	4b07      	ldr	r3, [pc, #28]	@ (800f588 <prvCheckForValidListAndQueue+0x60>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d005      	beq.n	800f57c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f570:	4b05      	ldr	r3, [pc, #20]	@ (800f588 <prvCheckForValidListAndQueue+0x60>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	490b      	ldr	r1, [pc, #44]	@ (800f5a4 <prvCheckForValidListAndQueue+0x7c>)
 800f576:	4618      	mov	r0, r3
 800f578:	f7fe fb48 	bl	800dc0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f57c:	f000 f976 	bl	800f86c <vPortExitCritical>
}
 800f580:	bf00      	nop
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	20001cd8 	.word	0x20001cd8
 800f58c:	20001ca8 	.word	0x20001ca8
 800f590:	20001cbc 	.word	0x20001cbc
 800f594:	20001cd0 	.word	0x20001cd0
 800f598:	20001cd4 	.word	0x20001cd4
 800f59c:	20001d84 	.word	0x20001d84
 800f5a0:	20001ce4 	.word	0x20001ce4
 800f5a4:	08013e34 	.word	0x08013e34

0800f5a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	3b04      	subs	r3, #4
 800f5b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f5c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	3b04      	subs	r3, #4
 800f5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	f023 0201 	bic.w	r2, r3, #1
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	3b04      	subs	r3, #4
 800f5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f5d8:	4a0c      	ldr	r2, [pc, #48]	@ (800f60c <pxPortInitialiseStack+0x64>)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	3b14      	subs	r3, #20
 800f5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	3b04      	subs	r3, #4
 800f5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f06f 0202 	mvn.w	r2, #2
 800f5f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3b20      	subs	r3, #32
 800f5fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3714      	adds	r7, #20
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	0800f611 	.word	0x0800f611

0800f610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f616:	2300      	movs	r3, #0
 800f618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f61a:	4b13      	ldr	r3, [pc, #76]	@ (800f668 <prvTaskExitError+0x58>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f622:	d00b      	beq.n	800f63c <prvTaskExitError+0x2c>
	__asm volatile
 800f624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f628:	f383 8811 	msr	BASEPRI, r3
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	60fb      	str	r3, [r7, #12]
}
 800f636:	bf00      	nop
 800f638:	bf00      	nop
 800f63a:	e7fd      	b.n	800f638 <prvTaskExitError+0x28>
	__asm volatile
 800f63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	60bb      	str	r3, [r7, #8]
}
 800f64e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f650:	bf00      	nop
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0fc      	beq.n	800f652 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f658:	bf00      	nop
 800f65a:	bf00      	nop
 800f65c:	3714      	adds	r7, #20
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	200000b0 	.word	0x200000b0
 800f66c:	00000000 	.word	0x00000000

0800f670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f670:	4b07      	ldr	r3, [pc, #28]	@ (800f690 <pxCurrentTCBConst2>)
 800f672:	6819      	ldr	r1, [r3, #0]
 800f674:	6808      	ldr	r0, [r1, #0]
 800f676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f67a:	f380 8809 	msr	PSP, r0
 800f67e:	f3bf 8f6f 	isb	sy
 800f682:	f04f 0000 	mov.w	r0, #0
 800f686:	f380 8811 	msr	BASEPRI, r0
 800f68a:	4770      	bx	lr
 800f68c:	f3af 8000 	nop.w

0800f690 <pxCurrentTCBConst2>:
 800f690:	200017a8 	.word	0x200017a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f694:	bf00      	nop
 800f696:	bf00      	nop

0800f698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f698:	4808      	ldr	r0, [pc, #32]	@ (800f6bc <prvPortStartFirstTask+0x24>)
 800f69a:	6800      	ldr	r0, [r0, #0]
 800f69c:	6800      	ldr	r0, [r0, #0]
 800f69e:	f380 8808 	msr	MSP, r0
 800f6a2:	f04f 0000 	mov.w	r0, #0
 800f6a6:	f380 8814 	msr	CONTROL, r0
 800f6aa:	b662      	cpsie	i
 800f6ac:	b661      	cpsie	f
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	df00      	svc	0
 800f6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f6ba:	bf00      	nop
 800f6bc:	e000ed08 	.word	0xe000ed08

0800f6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f6c6:	4b47      	ldr	r3, [pc, #284]	@ (800f7e4 <xPortStartScheduler+0x124>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4a47      	ldr	r2, [pc, #284]	@ (800f7e8 <xPortStartScheduler+0x128>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d10b      	bne.n	800f6e8 <xPortStartScheduler+0x28>
	__asm volatile
 800f6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d4:	f383 8811 	msr	BASEPRI, r3
 800f6d8:	f3bf 8f6f 	isb	sy
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	613b      	str	r3, [r7, #16]
}
 800f6e2:	bf00      	nop
 800f6e4:	bf00      	nop
 800f6e6:	e7fd      	b.n	800f6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f6e8:	4b3e      	ldr	r3, [pc, #248]	@ (800f7e4 <xPortStartScheduler+0x124>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a3f      	ldr	r2, [pc, #252]	@ (800f7ec <xPortStartScheduler+0x12c>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d10b      	bne.n	800f70a <xPortStartScheduler+0x4a>
	__asm volatile
 800f6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	60fb      	str	r3, [r7, #12]
}
 800f704:	bf00      	nop
 800f706:	bf00      	nop
 800f708:	e7fd      	b.n	800f706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f70a:	4b39      	ldr	r3, [pc, #228]	@ (800f7f0 <xPortStartScheduler+0x130>)
 800f70c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	b2db      	uxtb	r3, r3
 800f714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	22ff      	movs	r2, #255	@ 0xff
 800f71a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	b2db      	uxtb	r3, r3
 800f722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f724:	78fb      	ldrb	r3, [r7, #3]
 800f726:	b2db      	uxtb	r3, r3
 800f728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f72c:	b2da      	uxtb	r2, r3
 800f72e:	4b31      	ldr	r3, [pc, #196]	@ (800f7f4 <xPortStartScheduler+0x134>)
 800f730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f732:	4b31      	ldr	r3, [pc, #196]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f734:	2207      	movs	r2, #7
 800f736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f738:	e009      	b.n	800f74e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f73a:	4b2f      	ldr	r3, [pc, #188]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3b01      	subs	r3, #1
 800f740:	4a2d      	ldr	r2, [pc, #180]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f744:	78fb      	ldrb	r3, [r7, #3]
 800f746:	b2db      	uxtb	r3, r3
 800f748:	005b      	lsls	r3, r3, #1
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f74e:	78fb      	ldrb	r3, [r7, #3]
 800f750:	b2db      	uxtb	r3, r3
 800f752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f756:	2b80      	cmp	r3, #128	@ 0x80
 800f758:	d0ef      	beq.n	800f73a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f75a:	4b27      	ldr	r3, [pc, #156]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f1c3 0307 	rsb	r3, r3, #7
 800f762:	2b04      	cmp	r3, #4
 800f764:	d00b      	beq.n	800f77e <xPortStartScheduler+0xbe>
	__asm volatile
 800f766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76a:	f383 8811 	msr	BASEPRI, r3
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	60bb      	str	r3, [r7, #8]
}
 800f778:	bf00      	nop
 800f77a:	bf00      	nop
 800f77c:	e7fd      	b.n	800f77a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f77e:	4b1e      	ldr	r3, [pc, #120]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	021b      	lsls	r3, r3, #8
 800f784:	4a1c      	ldr	r2, [pc, #112]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f788:	4b1b      	ldr	r3, [pc, #108]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f790:	4a19      	ldr	r2, [pc, #100]	@ (800f7f8 <xPortStartScheduler+0x138>)
 800f792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	b2da      	uxtb	r2, r3
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f79c:	4b17      	ldr	r3, [pc, #92]	@ (800f7fc <xPortStartScheduler+0x13c>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a16      	ldr	r2, [pc, #88]	@ (800f7fc <xPortStartScheduler+0x13c>)
 800f7a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f7a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f7a8:	4b14      	ldr	r3, [pc, #80]	@ (800f7fc <xPortStartScheduler+0x13c>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a13      	ldr	r2, [pc, #76]	@ (800f7fc <xPortStartScheduler+0x13c>)
 800f7ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f7b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f7b4:	f000 f8da 	bl	800f96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7b8:	4b11      	ldr	r3, [pc, #68]	@ (800f800 <xPortStartScheduler+0x140>)
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7be:	f000 f8f9 	bl	800f9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7c2:	4b10      	ldr	r3, [pc, #64]	@ (800f804 <xPortStartScheduler+0x144>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a0f      	ldr	r2, [pc, #60]	@ (800f804 <xPortStartScheduler+0x144>)
 800f7c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f7cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f7ce:	f7ff ff63 	bl	800f698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f7d2:	f7fe ff4d 	bl	800e670 <vTaskSwitchContext>
	prvTaskExitError();
 800f7d6:	f7ff ff1b 	bl	800f610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3718      	adds	r7, #24
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	e000ed00 	.word	0xe000ed00
 800f7e8:	410fc271 	.word	0x410fc271
 800f7ec:	410fc270 	.word	0x410fc270
 800f7f0:	e000e400 	.word	0xe000e400
 800f7f4:	20001dd4 	.word	0x20001dd4
 800f7f8:	20001dd8 	.word	0x20001dd8
 800f7fc:	e000ed20 	.word	0xe000ed20
 800f800:	200000b0 	.word	0x200000b0
 800f804:	e000ef34 	.word	0xe000ef34

0800f808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	607b      	str	r3, [r7, #4]
}
 800f820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f822:	4b10      	ldr	r3, [pc, #64]	@ (800f864 <vPortEnterCritical+0x5c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3301      	adds	r3, #1
 800f828:	4a0e      	ldr	r2, [pc, #56]	@ (800f864 <vPortEnterCritical+0x5c>)
 800f82a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f82c:	4b0d      	ldr	r3, [pc, #52]	@ (800f864 <vPortEnterCritical+0x5c>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2b01      	cmp	r3, #1
 800f832:	d110      	bne.n	800f856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f834:	4b0c      	ldr	r3, [pc, #48]	@ (800f868 <vPortEnterCritical+0x60>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00b      	beq.n	800f856 <vPortEnterCritical+0x4e>
	__asm volatile
 800f83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f842:	f383 8811 	msr	BASEPRI, r3
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	f3bf 8f4f 	dsb	sy
 800f84e:	603b      	str	r3, [r7, #0]
}
 800f850:	bf00      	nop
 800f852:	bf00      	nop
 800f854:	e7fd      	b.n	800f852 <vPortEnterCritical+0x4a>
	}
}
 800f856:	bf00      	nop
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	200000b0 	.word	0x200000b0
 800f868:	e000ed04 	.word	0xe000ed04

0800f86c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f872:	4b12      	ldr	r3, [pc, #72]	@ (800f8bc <vPortExitCritical+0x50>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10b      	bne.n	800f892 <vPortExitCritical+0x26>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	607b      	str	r3, [r7, #4]
}
 800f88c:	bf00      	nop
 800f88e:	bf00      	nop
 800f890:	e7fd      	b.n	800f88e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f892:	4b0a      	ldr	r3, [pc, #40]	@ (800f8bc <vPortExitCritical+0x50>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3b01      	subs	r3, #1
 800f898:	4a08      	ldr	r2, [pc, #32]	@ (800f8bc <vPortExitCritical+0x50>)
 800f89a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f89c:	4b07      	ldr	r3, [pc, #28]	@ (800f8bc <vPortExitCritical+0x50>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d105      	bne.n	800f8b0 <vPortExitCritical+0x44>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	f383 8811 	msr	BASEPRI, r3
}
 800f8ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f8b0:	bf00      	nop
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	200000b0 	.word	0x200000b0

0800f8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f8c0:	f3ef 8009 	mrs	r0, PSP
 800f8c4:	f3bf 8f6f 	isb	sy
 800f8c8:	4b15      	ldr	r3, [pc, #84]	@ (800f920 <pxCurrentTCBConst>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	f01e 0f10 	tst.w	lr, #16
 800f8d0:	bf08      	it	eq
 800f8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8da:	6010      	str	r0, [r2, #0]
 800f8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f8e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f8e4:	f380 8811 	msr	BASEPRI, r0
 800f8e8:	f3bf 8f4f 	dsb	sy
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f7fe febe 	bl	800e670 <vTaskSwitchContext>
 800f8f4:	f04f 0000 	mov.w	r0, #0
 800f8f8:	f380 8811 	msr	BASEPRI, r0
 800f8fc:	bc09      	pop	{r0, r3}
 800f8fe:	6819      	ldr	r1, [r3, #0]
 800f900:	6808      	ldr	r0, [r1, #0]
 800f902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f906:	f01e 0f10 	tst.w	lr, #16
 800f90a:	bf08      	it	eq
 800f90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f910:	f380 8809 	msr	PSP, r0
 800f914:	f3bf 8f6f 	isb	sy
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	f3af 8000 	nop.w

0800f920 <pxCurrentTCBConst>:
 800f920:	200017a8 	.word	0x200017a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f924:	bf00      	nop
 800f926:	bf00      	nop

0800f928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
	__asm volatile
 800f92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	607b      	str	r3, [r7, #4]
}
 800f940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f942:	f7fe fddb 	bl	800e4fc <xTaskIncrementTick>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d003      	beq.n	800f954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f94c:	4b06      	ldr	r3, [pc, #24]	@ (800f968 <xPortSysTickHandler+0x40>)
 800f94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	2300      	movs	r3, #0
 800f956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	f383 8811 	msr	BASEPRI, r3
}
 800f95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f960:	bf00      	nop
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	e000ed04 	.word	0xe000ed04

0800f96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f96c:	b480      	push	{r7}
 800f96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f970:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a0 <vPortSetupTimerInterrupt+0x34>)
 800f972:	2200      	movs	r2, #0
 800f974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f976:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a4 <vPortSetupTimerInterrupt+0x38>)
 800f978:	2200      	movs	r2, #0
 800f97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f97c:	4b0a      	ldr	r3, [pc, #40]	@ (800f9a8 <vPortSetupTimerInterrupt+0x3c>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a0a      	ldr	r2, [pc, #40]	@ (800f9ac <vPortSetupTimerInterrupt+0x40>)
 800f982:	fba2 2303 	umull	r2, r3, r2, r3
 800f986:	099b      	lsrs	r3, r3, #6
 800f988:	4a09      	ldr	r2, [pc, #36]	@ (800f9b0 <vPortSetupTimerInterrupt+0x44>)
 800f98a:	3b01      	subs	r3, #1
 800f98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f98e:	4b04      	ldr	r3, [pc, #16]	@ (800f9a0 <vPortSetupTimerInterrupt+0x34>)
 800f990:	2207      	movs	r2, #7
 800f992:	601a      	str	r2, [r3, #0]
}
 800f994:	bf00      	nop
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	e000e010 	.word	0xe000e010
 800f9a4:	e000e018 	.word	0xe000e018
 800f9a8:	200000a4 	.word	0x200000a4
 800f9ac:	10624dd3 	.word	0x10624dd3
 800f9b0:	e000e014 	.word	0xe000e014

0800f9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f9c4 <vPortEnableVFP+0x10>
 800f9b8:	6801      	ldr	r1, [r0, #0]
 800f9ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f9be:	6001      	str	r1, [r0, #0]
 800f9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f9c2:	bf00      	nop
 800f9c4:	e000ed88 	.word	0xe000ed88

0800f9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9ce:	f3ef 8305 	mrs	r3, IPSR
 800f9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2b0f      	cmp	r3, #15
 800f9d8:	d915      	bls.n	800fa06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f9da:	4a18      	ldr	r2, [pc, #96]	@ (800fa3c <vPortValidateInterruptPriority+0x74>)
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	4413      	add	r3, r2
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f9e4:	4b16      	ldr	r3, [pc, #88]	@ (800fa40 <vPortValidateInterruptPriority+0x78>)
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	7afa      	ldrb	r2, [r7, #11]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d20b      	bcs.n	800fa06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f2:	f383 8811 	msr	BASEPRI, r3
 800f9f6:	f3bf 8f6f 	isb	sy
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	607b      	str	r3, [r7, #4]
}
 800fa00:	bf00      	nop
 800fa02:	bf00      	nop
 800fa04:	e7fd      	b.n	800fa02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa06:	4b0f      	ldr	r3, [pc, #60]	@ (800fa44 <vPortValidateInterruptPriority+0x7c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fa0e:	4b0e      	ldr	r3, [pc, #56]	@ (800fa48 <vPortValidateInterruptPriority+0x80>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d90b      	bls.n	800fa2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	603b      	str	r3, [r7, #0]
}
 800fa28:	bf00      	nop
 800fa2a:	bf00      	nop
 800fa2c:	e7fd      	b.n	800fa2a <vPortValidateInterruptPriority+0x62>
	}
 800fa2e:	bf00      	nop
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	e000e3f0 	.word	0xe000e3f0
 800fa40:	20001dd4 	.word	0x20001dd4
 800fa44:	e000ed0c 	.word	0xe000ed0c
 800fa48:	20001dd8 	.word	0x20001dd8

0800fa4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b08a      	sub	sp, #40	@ 0x28
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa54:	2300      	movs	r3, #0
 800fa56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa58:	f7fe fb9a 	bl	800e190 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa5c:	4b5c      	ldr	r3, [pc, #368]	@ (800fbd0 <pvPortMalloc+0x184>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d101      	bne.n	800fa68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa64:	f000 f924 	bl	800fcb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa68:	4b5a      	ldr	r3, [pc, #360]	@ (800fbd4 <pvPortMalloc+0x188>)
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4013      	ands	r3, r2
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f040 8095 	bne.w	800fba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d01e      	beq.n	800faba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fa7c:	2208      	movs	r2, #8
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4413      	add	r3, r2
 800fa82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f003 0307 	and.w	r3, r3, #7
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d015      	beq.n	800faba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f023 0307 	bic.w	r3, r3, #7
 800fa94:	3308      	adds	r3, #8
 800fa96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f003 0307 	and.w	r3, r3, #7
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d00b      	beq.n	800faba <pvPortMalloc+0x6e>
	__asm volatile
 800faa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa6:	f383 8811 	msr	BASEPRI, r3
 800faaa:	f3bf 8f6f 	isb	sy
 800faae:	f3bf 8f4f 	dsb	sy
 800fab2:	617b      	str	r3, [r7, #20]
}
 800fab4:	bf00      	nop
 800fab6:	bf00      	nop
 800fab8:	e7fd      	b.n	800fab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d06f      	beq.n	800fba0 <pvPortMalloc+0x154>
 800fac0:	4b45      	ldr	r3, [pc, #276]	@ (800fbd8 <pvPortMalloc+0x18c>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d86a      	bhi.n	800fba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800faca:	4b44      	ldr	r3, [pc, #272]	@ (800fbdc <pvPortMalloc+0x190>)
 800facc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800face:	4b43      	ldr	r3, [pc, #268]	@ (800fbdc <pvPortMalloc+0x190>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fad4:	e004      	b.n	800fae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d903      	bls.n	800faf2 <pvPortMalloc+0xa6>
 800faea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1f1      	bne.n	800fad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800faf2:	4b37      	ldr	r3, [pc, #220]	@ (800fbd0 <pvPortMalloc+0x184>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d051      	beq.n	800fba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fafc:	6a3b      	ldr	r3, [r7, #32]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2208      	movs	r2, #8
 800fb02:	4413      	add	r3, r2
 800fb04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	6a3b      	ldr	r3, [r7, #32]
 800fb0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb10:	685a      	ldr	r2, [r3, #4]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	1ad2      	subs	r2, r2, r3
 800fb16:	2308      	movs	r3, #8
 800fb18:	005b      	lsls	r3, r3, #1
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d920      	bls.n	800fb60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4413      	add	r3, r2
 800fb24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	f003 0307 	and.w	r3, r3, #7
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00b      	beq.n	800fb48 <pvPortMalloc+0xfc>
	__asm volatile
 800fb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb34:	f383 8811 	msr	BASEPRI, r3
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	613b      	str	r3, [r7, #16]
}
 800fb42:	bf00      	nop
 800fb44:	bf00      	nop
 800fb46:	e7fd      	b.n	800fb44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb4a:	685a      	ldr	r2, [r3, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	1ad2      	subs	r2, r2, r3
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb5a:	69b8      	ldr	r0, [r7, #24]
 800fb5c:	f000 f90a 	bl	800fd74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb60:	4b1d      	ldr	r3, [pc, #116]	@ (800fbd8 <pvPortMalloc+0x18c>)
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	4a1b      	ldr	r2, [pc, #108]	@ (800fbd8 <pvPortMalloc+0x18c>)
 800fb6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb6e:	4b1a      	ldr	r3, [pc, #104]	@ (800fbd8 <pvPortMalloc+0x18c>)
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	4b1b      	ldr	r3, [pc, #108]	@ (800fbe0 <pvPortMalloc+0x194>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d203      	bcs.n	800fb82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb7a:	4b17      	ldr	r3, [pc, #92]	@ (800fbd8 <pvPortMalloc+0x18c>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a18      	ldr	r2, [pc, #96]	@ (800fbe0 <pvPortMalloc+0x194>)
 800fb80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb84:	685a      	ldr	r2, [r3, #4]
 800fb86:	4b13      	ldr	r3, [pc, #76]	@ (800fbd4 <pvPortMalloc+0x188>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	431a      	orrs	r2, r3
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb92:	2200      	movs	r2, #0
 800fb94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb96:	4b13      	ldr	r3, [pc, #76]	@ (800fbe4 <pvPortMalloc+0x198>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	4a11      	ldr	r2, [pc, #68]	@ (800fbe4 <pvPortMalloc+0x198>)
 800fb9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fba0:	f7fe fb04 	bl	800e1ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	f003 0307 	and.w	r3, r3, #7
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00b      	beq.n	800fbc6 <pvPortMalloc+0x17a>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	60fb      	str	r3, [r7, #12]
}
 800fbc0:	bf00      	nop
 800fbc2:	bf00      	nop
 800fbc4:	e7fd      	b.n	800fbc2 <pvPortMalloc+0x176>
	return pvReturn;
 800fbc6:	69fb      	ldr	r3, [r7, #28]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3728      	adds	r7, #40	@ 0x28
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	200059e4 	.word	0x200059e4
 800fbd4:	200059f8 	.word	0x200059f8
 800fbd8:	200059e8 	.word	0x200059e8
 800fbdc:	200059dc 	.word	0x200059dc
 800fbe0:	200059ec 	.word	0x200059ec
 800fbe4:	200059f0 	.word	0x200059f0

0800fbe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b086      	sub	sp, #24
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d04f      	beq.n	800fc9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fbfa:	2308      	movs	r3, #8
 800fbfc:	425b      	negs	r3, r3
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	4413      	add	r3, r2
 800fc02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	685a      	ldr	r2, [r3, #4]
 800fc0c:	4b25      	ldr	r3, [pc, #148]	@ (800fca4 <vPortFree+0xbc>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4013      	ands	r3, r2
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d10b      	bne.n	800fc2e <vPortFree+0x46>
	__asm volatile
 800fc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1a:	f383 8811 	msr	BASEPRI, r3
 800fc1e:	f3bf 8f6f 	isb	sy
 800fc22:	f3bf 8f4f 	dsb	sy
 800fc26:	60fb      	str	r3, [r7, #12]
}
 800fc28:	bf00      	nop
 800fc2a:	bf00      	nop
 800fc2c:	e7fd      	b.n	800fc2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00b      	beq.n	800fc4e <vPortFree+0x66>
	__asm volatile
 800fc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3a:	f383 8811 	msr	BASEPRI, r3
 800fc3e:	f3bf 8f6f 	isb	sy
 800fc42:	f3bf 8f4f 	dsb	sy
 800fc46:	60bb      	str	r3, [r7, #8]
}
 800fc48:	bf00      	nop
 800fc4a:	bf00      	nop
 800fc4c:	e7fd      	b.n	800fc4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	4b14      	ldr	r3, [pc, #80]	@ (800fca4 <vPortFree+0xbc>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4013      	ands	r3, r2
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d01e      	beq.n	800fc9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d11a      	bne.n	800fc9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	685a      	ldr	r2, [r3, #4]
 800fc68:	4b0e      	ldr	r3, [pc, #56]	@ (800fca4 <vPortFree+0xbc>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	43db      	mvns	r3, r3
 800fc6e:	401a      	ands	r2, r3
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc74:	f7fe fa8c 	bl	800e190 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fca8 <vPortFree+0xc0>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4413      	add	r3, r2
 800fc82:	4a09      	ldr	r2, [pc, #36]	@ (800fca8 <vPortFree+0xc0>)
 800fc84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc86:	6938      	ldr	r0, [r7, #16]
 800fc88:	f000 f874 	bl	800fd74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc8c:	4b07      	ldr	r3, [pc, #28]	@ (800fcac <vPortFree+0xc4>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3301      	adds	r3, #1
 800fc92:	4a06      	ldr	r2, [pc, #24]	@ (800fcac <vPortFree+0xc4>)
 800fc94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc96:	f7fe fa89 	bl	800e1ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc9a:	bf00      	nop
 800fc9c:	3718      	adds	r7, #24
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	200059f8 	.word	0x200059f8
 800fca8:	200059e8 	.word	0x200059e8
 800fcac:	200059f4 	.word	0x200059f4

0800fcb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fcb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fcba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fcbc:	4b27      	ldr	r3, [pc, #156]	@ (800fd5c <prvHeapInit+0xac>)
 800fcbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f003 0307 	and.w	r3, r3, #7
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00c      	beq.n	800fce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3307      	adds	r3, #7
 800fcce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f023 0307 	bic.w	r3, r3, #7
 800fcd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	1ad3      	subs	r3, r2, r3
 800fcde:	4a1f      	ldr	r2, [pc, #124]	@ (800fd5c <prvHeapInit+0xac>)
 800fce0:	4413      	add	r3, r2
 800fce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fce8:	4a1d      	ldr	r2, [pc, #116]	@ (800fd60 <prvHeapInit+0xb0>)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fcee:	4b1c      	ldr	r3, [pc, #112]	@ (800fd60 <prvHeapInit+0xb0>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	68ba      	ldr	r2, [r7, #8]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fcfc:	2208      	movs	r2, #8
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	1a9b      	subs	r3, r3, r2
 800fd02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f023 0307 	bic.w	r3, r3, #7
 800fd0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	4a15      	ldr	r2, [pc, #84]	@ (800fd64 <prvHeapInit+0xb4>)
 800fd10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd12:	4b14      	ldr	r3, [pc, #80]	@ (800fd64 <prvHeapInit+0xb4>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2200      	movs	r2, #0
 800fd18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd1a:	4b12      	ldr	r3, [pc, #72]	@ (800fd64 <prvHeapInit+0xb4>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	68fa      	ldr	r2, [r7, #12]
 800fd2a:	1ad2      	subs	r2, r2, r3
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd30:	4b0c      	ldr	r3, [pc, #48]	@ (800fd64 <prvHeapInit+0xb4>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	4a0a      	ldr	r2, [pc, #40]	@ (800fd68 <prvHeapInit+0xb8>)
 800fd3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	4a09      	ldr	r2, [pc, #36]	@ (800fd6c <prvHeapInit+0xbc>)
 800fd46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd48:	4b09      	ldr	r3, [pc, #36]	@ (800fd70 <prvHeapInit+0xc0>)
 800fd4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fd4e:	601a      	str	r2, [r3, #0]
}
 800fd50:	bf00      	nop
 800fd52:	3714      	adds	r7, #20
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr
 800fd5c:	20001ddc 	.word	0x20001ddc
 800fd60:	200059dc 	.word	0x200059dc
 800fd64:	200059e4 	.word	0x200059e4
 800fd68:	200059ec 	.word	0x200059ec
 800fd6c:	200059e8 	.word	0x200059e8
 800fd70:	200059f8 	.word	0x200059f8

0800fd74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd7c:	4b28      	ldr	r3, [pc, #160]	@ (800fe20 <prvInsertBlockIntoFreeList+0xac>)
 800fd7e:	60fb      	str	r3, [r7, #12]
 800fd80:	e002      	b.n	800fd88 <prvInsertBlockIntoFreeList+0x14>
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	60fb      	str	r3, [r7, #12]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d8f7      	bhi.n	800fd82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d108      	bne.n	800fdb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	685a      	ldr	r2, [r3, #4]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	441a      	add	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	68ba      	ldr	r2, [r7, #8]
 800fdc0:	441a      	add	r2, r3
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d118      	bne.n	800fdfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	4b15      	ldr	r3, [pc, #84]	@ (800fe24 <prvInsertBlockIntoFreeList+0xb0>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d00d      	beq.n	800fdf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	685a      	ldr	r2, [r3, #4]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	441a      	add	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	601a      	str	r2, [r3, #0]
 800fdf0:	e008      	b.n	800fe04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fdf2:	4b0c      	ldr	r3, [pc, #48]	@ (800fe24 <prvInsertBlockIntoFreeList+0xb0>)
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	601a      	str	r2, [r3, #0]
 800fdfa:	e003      	b.n	800fe04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d002      	beq.n	800fe12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe12:	bf00      	nop
 800fe14:	3714      	adds	r7, #20
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	200059dc 	.word	0x200059dc
 800fe24:	200059e4 	.word	0x200059e4

0800fe28 <__cvt>:
 800fe28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe2c:	ec57 6b10 	vmov	r6, r7, d0
 800fe30:	2f00      	cmp	r7, #0
 800fe32:	460c      	mov	r4, r1
 800fe34:	4619      	mov	r1, r3
 800fe36:	463b      	mov	r3, r7
 800fe38:	bfbb      	ittet	lt
 800fe3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fe3e:	461f      	movlt	r7, r3
 800fe40:	2300      	movge	r3, #0
 800fe42:	232d      	movlt	r3, #45	@ 0x2d
 800fe44:	700b      	strb	r3, [r1, #0]
 800fe46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fe4c:	4691      	mov	r9, r2
 800fe4e:	f023 0820 	bic.w	r8, r3, #32
 800fe52:	bfbc      	itt	lt
 800fe54:	4632      	movlt	r2, r6
 800fe56:	4616      	movlt	r6, r2
 800fe58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fe5c:	d005      	beq.n	800fe6a <__cvt+0x42>
 800fe5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fe62:	d100      	bne.n	800fe66 <__cvt+0x3e>
 800fe64:	3401      	adds	r4, #1
 800fe66:	2102      	movs	r1, #2
 800fe68:	e000      	b.n	800fe6c <__cvt+0x44>
 800fe6a:	2103      	movs	r1, #3
 800fe6c:	ab03      	add	r3, sp, #12
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	ab02      	add	r3, sp, #8
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	ec47 6b10 	vmov	d0, r6, r7
 800fe78:	4653      	mov	r3, sl
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	f000 fe34 	bl	8010ae8 <_dtoa_r>
 800fe80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fe84:	4605      	mov	r5, r0
 800fe86:	d119      	bne.n	800febc <__cvt+0x94>
 800fe88:	f019 0f01 	tst.w	r9, #1
 800fe8c:	d00e      	beq.n	800feac <__cvt+0x84>
 800fe8e:	eb00 0904 	add.w	r9, r0, r4
 800fe92:	2200      	movs	r2, #0
 800fe94:	2300      	movs	r3, #0
 800fe96:	4630      	mov	r0, r6
 800fe98:	4639      	mov	r1, r7
 800fe9a:	f7f0 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe9e:	b108      	cbz	r0, 800fea4 <__cvt+0x7c>
 800fea0:	f8cd 900c 	str.w	r9, [sp, #12]
 800fea4:	2230      	movs	r2, #48	@ 0x30
 800fea6:	9b03      	ldr	r3, [sp, #12]
 800fea8:	454b      	cmp	r3, r9
 800feaa:	d31e      	bcc.n	800feea <__cvt+0xc2>
 800feac:	9b03      	ldr	r3, [sp, #12]
 800feae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800feb0:	1b5b      	subs	r3, r3, r5
 800feb2:	4628      	mov	r0, r5
 800feb4:	6013      	str	r3, [r2, #0]
 800feb6:	b004      	add	sp, #16
 800feb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800febc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fec0:	eb00 0904 	add.w	r9, r0, r4
 800fec4:	d1e5      	bne.n	800fe92 <__cvt+0x6a>
 800fec6:	7803      	ldrb	r3, [r0, #0]
 800fec8:	2b30      	cmp	r3, #48	@ 0x30
 800feca:	d10a      	bne.n	800fee2 <__cvt+0xba>
 800fecc:	2200      	movs	r2, #0
 800fece:	2300      	movs	r3, #0
 800fed0:	4630      	mov	r0, r6
 800fed2:	4639      	mov	r1, r7
 800fed4:	f7f0 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800fed8:	b918      	cbnz	r0, 800fee2 <__cvt+0xba>
 800feda:	f1c4 0401 	rsb	r4, r4, #1
 800fede:	f8ca 4000 	str.w	r4, [sl]
 800fee2:	f8da 3000 	ldr.w	r3, [sl]
 800fee6:	4499      	add	r9, r3
 800fee8:	e7d3      	b.n	800fe92 <__cvt+0x6a>
 800feea:	1c59      	adds	r1, r3, #1
 800feec:	9103      	str	r1, [sp, #12]
 800feee:	701a      	strb	r2, [r3, #0]
 800fef0:	e7d9      	b.n	800fea6 <__cvt+0x7e>

0800fef2 <__exponent>:
 800fef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fef4:	2900      	cmp	r1, #0
 800fef6:	bfba      	itte	lt
 800fef8:	4249      	neglt	r1, r1
 800fefa:	232d      	movlt	r3, #45	@ 0x2d
 800fefc:	232b      	movge	r3, #43	@ 0x2b
 800fefe:	2909      	cmp	r1, #9
 800ff00:	7002      	strb	r2, [r0, #0]
 800ff02:	7043      	strb	r3, [r0, #1]
 800ff04:	dd29      	ble.n	800ff5a <__exponent+0x68>
 800ff06:	f10d 0307 	add.w	r3, sp, #7
 800ff0a:	461d      	mov	r5, r3
 800ff0c:	270a      	movs	r7, #10
 800ff0e:	461a      	mov	r2, r3
 800ff10:	fbb1 f6f7 	udiv	r6, r1, r7
 800ff14:	fb07 1416 	mls	r4, r7, r6, r1
 800ff18:	3430      	adds	r4, #48	@ 0x30
 800ff1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ff1e:	460c      	mov	r4, r1
 800ff20:	2c63      	cmp	r4, #99	@ 0x63
 800ff22:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ff26:	4631      	mov	r1, r6
 800ff28:	dcf1      	bgt.n	800ff0e <__exponent+0x1c>
 800ff2a:	3130      	adds	r1, #48	@ 0x30
 800ff2c:	1e94      	subs	r4, r2, #2
 800ff2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ff32:	1c41      	adds	r1, r0, #1
 800ff34:	4623      	mov	r3, r4
 800ff36:	42ab      	cmp	r3, r5
 800ff38:	d30a      	bcc.n	800ff50 <__exponent+0x5e>
 800ff3a:	f10d 0309 	add.w	r3, sp, #9
 800ff3e:	1a9b      	subs	r3, r3, r2
 800ff40:	42ac      	cmp	r4, r5
 800ff42:	bf88      	it	hi
 800ff44:	2300      	movhi	r3, #0
 800ff46:	3302      	adds	r3, #2
 800ff48:	4403      	add	r3, r0
 800ff4a:	1a18      	subs	r0, r3, r0
 800ff4c:	b003      	add	sp, #12
 800ff4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff50:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ff54:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ff58:	e7ed      	b.n	800ff36 <__exponent+0x44>
 800ff5a:	2330      	movs	r3, #48	@ 0x30
 800ff5c:	3130      	adds	r1, #48	@ 0x30
 800ff5e:	7083      	strb	r3, [r0, #2]
 800ff60:	70c1      	strb	r1, [r0, #3]
 800ff62:	1d03      	adds	r3, r0, #4
 800ff64:	e7f1      	b.n	800ff4a <__exponent+0x58>
	...

0800ff68 <_printf_float>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	b08d      	sub	sp, #52	@ 0x34
 800ff6e:	460c      	mov	r4, r1
 800ff70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ff74:	4616      	mov	r6, r2
 800ff76:	461f      	mov	r7, r3
 800ff78:	4605      	mov	r5, r0
 800ff7a:	f000 fc97 	bl	80108ac <_localeconv_r>
 800ff7e:	6803      	ldr	r3, [r0, #0]
 800ff80:	9304      	str	r3, [sp, #16]
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7f0 f974 	bl	8000270 <strlen>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ff90:	9005      	str	r0, [sp, #20]
 800ff92:	3307      	adds	r3, #7
 800ff94:	f023 0307 	bic.w	r3, r3, #7
 800ff98:	f103 0208 	add.w	r2, r3, #8
 800ff9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ffa0:	f8d4 b000 	ldr.w	fp, [r4]
 800ffa4:	f8c8 2000 	str.w	r2, [r8]
 800ffa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ffb0:	9307      	str	r3, [sp, #28]
 800ffb2:	f8cd 8018 	str.w	r8, [sp, #24]
 800ffb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ffba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffbe:	4b9c      	ldr	r3, [pc, #624]	@ (8010230 <_printf_float+0x2c8>)
 800ffc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffc4:	f7f0 fdb2 	bl	8000b2c <__aeabi_dcmpun>
 800ffc8:	bb70      	cbnz	r0, 8010028 <_printf_float+0xc0>
 800ffca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffce:	4b98      	ldr	r3, [pc, #608]	@ (8010230 <_printf_float+0x2c8>)
 800ffd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffd4:	f7f0 fd8c 	bl	8000af0 <__aeabi_dcmple>
 800ffd8:	bb30      	cbnz	r0, 8010028 <_printf_float+0xc0>
 800ffda:	2200      	movs	r2, #0
 800ffdc:	2300      	movs	r3, #0
 800ffde:	4640      	mov	r0, r8
 800ffe0:	4649      	mov	r1, r9
 800ffe2:	f7f0 fd7b 	bl	8000adc <__aeabi_dcmplt>
 800ffe6:	b110      	cbz	r0, 800ffee <_printf_float+0x86>
 800ffe8:	232d      	movs	r3, #45	@ 0x2d
 800ffea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffee:	4a91      	ldr	r2, [pc, #580]	@ (8010234 <_printf_float+0x2cc>)
 800fff0:	4b91      	ldr	r3, [pc, #580]	@ (8010238 <_printf_float+0x2d0>)
 800fff2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fff6:	bf94      	ite	ls
 800fff8:	4690      	movls	r8, r2
 800fffa:	4698      	movhi	r8, r3
 800fffc:	2303      	movs	r3, #3
 800fffe:	6123      	str	r3, [r4, #16]
 8010000:	f02b 0304 	bic.w	r3, fp, #4
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	f04f 0900 	mov.w	r9, #0
 801000a:	9700      	str	r7, [sp, #0]
 801000c:	4633      	mov	r3, r6
 801000e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010010:	4621      	mov	r1, r4
 8010012:	4628      	mov	r0, r5
 8010014:	f000 f9d2 	bl	80103bc <_printf_common>
 8010018:	3001      	adds	r0, #1
 801001a:	f040 808d 	bne.w	8010138 <_printf_float+0x1d0>
 801001e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010022:	b00d      	add	sp, #52	@ 0x34
 8010024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010028:	4642      	mov	r2, r8
 801002a:	464b      	mov	r3, r9
 801002c:	4640      	mov	r0, r8
 801002e:	4649      	mov	r1, r9
 8010030:	f7f0 fd7c 	bl	8000b2c <__aeabi_dcmpun>
 8010034:	b140      	cbz	r0, 8010048 <_printf_float+0xe0>
 8010036:	464b      	mov	r3, r9
 8010038:	2b00      	cmp	r3, #0
 801003a:	bfbc      	itt	lt
 801003c:	232d      	movlt	r3, #45	@ 0x2d
 801003e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010042:	4a7e      	ldr	r2, [pc, #504]	@ (801023c <_printf_float+0x2d4>)
 8010044:	4b7e      	ldr	r3, [pc, #504]	@ (8010240 <_printf_float+0x2d8>)
 8010046:	e7d4      	b.n	800fff2 <_printf_float+0x8a>
 8010048:	6863      	ldr	r3, [r4, #4]
 801004a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801004e:	9206      	str	r2, [sp, #24]
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	d13b      	bne.n	80100cc <_printf_float+0x164>
 8010054:	2306      	movs	r3, #6
 8010056:	6063      	str	r3, [r4, #4]
 8010058:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801005c:	2300      	movs	r3, #0
 801005e:	6022      	str	r2, [r4, #0]
 8010060:	9303      	str	r3, [sp, #12]
 8010062:	ab0a      	add	r3, sp, #40	@ 0x28
 8010064:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010068:	ab09      	add	r3, sp, #36	@ 0x24
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	6861      	ldr	r1, [r4, #4]
 801006e:	ec49 8b10 	vmov	d0, r8, r9
 8010072:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010076:	4628      	mov	r0, r5
 8010078:	f7ff fed6 	bl	800fe28 <__cvt>
 801007c:	9b06      	ldr	r3, [sp, #24]
 801007e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010080:	2b47      	cmp	r3, #71	@ 0x47
 8010082:	4680      	mov	r8, r0
 8010084:	d129      	bne.n	80100da <_printf_float+0x172>
 8010086:	1cc8      	adds	r0, r1, #3
 8010088:	db02      	blt.n	8010090 <_printf_float+0x128>
 801008a:	6863      	ldr	r3, [r4, #4]
 801008c:	4299      	cmp	r1, r3
 801008e:	dd41      	ble.n	8010114 <_printf_float+0x1ac>
 8010090:	f1aa 0a02 	sub.w	sl, sl, #2
 8010094:	fa5f fa8a 	uxtb.w	sl, sl
 8010098:	3901      	subs	r1, #1
 801009a:	4652      	mov	r2, sl
 801009c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80100a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80100a2:	f7ff ff26 	bl	800fef2 <__exponent>
 80100a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80100a8:	1813      	adds	r3, r2, r0
 80100aa:	2a01      	cmp	r2, #1
 80100ac:	4681      	mov	r9, r0
 80100ae:	6123      	str	r3, [r4, #16]
 80100b0:	dc02      	bgt.n	80100b8 <_printf_float+0x150>
 80100b2:	6822      	ldr	r2, [r4, #0]
 80100b4:	07d2      	lsls	r2, r2, #31
 80100b6:	d501      	bpl.n	80100bc <_printf_float+0x154>
 80100b8:	3301      	adds	r3, #1
 80100ba:	6123      	str	r3, [r4, #16]
 80100bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d0a2      	beq.n	801000a <_printf_float+0xa2>
 80100c4:	232d      	movs	r3, #45	@ 0x2d
 80100c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80100ca:	e79e      	b.n	801000a <_printf_float+0xa2>
 80100cc:	9a06      	ldr	r2, [sp, #24]
 80100ce:	2a47      	cmp	r2, #71	@ 0x47
 80100d0:	d1c2      	bne.n	8010058 <_printf_float+0xf0>
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1c0      	bne.n	8010058 <_printf_float+0xf0>
 80100d6:	2301      	movs	r3, #1
 80100d8:	e7bd      	b.n	8010056 <_printf_float+0xee>
 80100da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80100de:	d9db      	bls.n	8010098 <_printf_float+0x130>
 80100e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80100e4:	d118      	bne.n	8010118 <_printf_float+0x1b0>
 80100e6:	2900      	cmp	r1, #0
 80100e8:	6863      	ldr	r3, [r4, #4]
 80100ea:	dd0b      	ble.n	8010104 <_printf_float+0x19c>
 80100ec:	6121      	str	r1, [r4, #16]
 80100ee:	b913      	cbnz	r3, 80100f6 <_printf_float+0x18e>
 80100f0:	6822      	ldr	r2, [r4, #0]
 80100f2:	07d0      	lsls	r0, r2, #31
 80100f4:	d502      	bpl.n	80100fc <_printf_float+0x194>
 80100f6:	3301      	adds	r3, #1
 80100f8:	440b      	add	r3, r1
 80100fa:	6123      	str	r3, [r4, #16]
 80100fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80100fe:	f04f 0900 	mov.w	r9, #0
 8010102:	e7db      	b.n	80100bc <_printf_float+0x154>
 8010104:	b913      	cbnz	r3, 801010c <_printf_float+0x1a4>
 8010106:	6822      	ldr	r2, [r4, #0]
 8010108:	07d2      	lsls	r2, r2, #31
 801010a:	d501      	bpl.n	8010110 <_printf_float+0x1a8>
 801010c:	3302      	adds	r3, #2
 801010e:	e7f4      	b.n	80100fa <_printf_float+0x192>
 8010110:	2301      	movs	r3, #1
 8010112:	e7f2      	b.n	80100fa <_printf_float+0x192>
 8010114:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801011a:	4299      	cmp	r1, r3
 801011c:	db05      	blt.n	801012a <_printf_float+0x1c2>
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	6121      	str	r1, [r4, #16]
 8010122:	07d8      	lsls	r0, r3, #31
 8010124:	d5ea      	bpl.n	80100fc <_printf_float+0x194>
 8010126:	1c4b      	adds	r3, r1, #1
 8010128:	e7e7      	b.n	80100fa <_printf_float+0x192>
 801012a:	2900      	cmp	r1, #0
 801012c:	bfd4      	ite	le
 801012e:	f1c1 0202 	rsble	r2, r1, #2
 8010132:	2201      	movgt	r2, #1
 8010134:	4413      	add	r3, r2
 8010136:	e7e0      	b.n	80100fa <_printf_float+0x192>
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	055a      	lsls	r2, r3, #21
 801013c:	d407      	bmi.n	801014e <_printf_float+0x1e6>
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	4642      	mov	r2, r8
 8010142:	4631      	mov	r1, r6
 8010144:	4628      	mov	r0, r5
 8010146:	47b8      	blx	r7
 8010148:	3001      	adds	r0, #1
 801014a:	d12b      	bne.n	80101a4 <_printf_float+0x23c>
 801014c:	e767      	b.n	801001e <_printf_float+0xb6>
 801014e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010152:	f240 80dd 	bls.w	8010310 <_printf_float+0x3a8>
 8010156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801015a:	2200      	movs	r2, #0
 801015c:	2300      	movs	r3, #0
 801015e:	f7f0 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8010162:	2800      	cmp	r0, #0
 8010164:	d033      	beq.n	80101ce <_printf_float+0x266>
 8010166:	4a37      	ldr	r2, [pc, #220]	@ (8010244 <_printf_float+0x2dc>)
 8010168:	2301      	movs	r3, #1
 801016a:	4631      	mov	r1, r6
 801016c:	4628      	mov	r0, r5
 801016e:	47b8      	blx	r7
 8010170:	3001      	adds	r0, #1
 8010172:	f43f af54 	beq.w	801001e <_printf_float+0xb6>
 8010176:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801017a:	4543      	cmp	r3, r8
 801017c:	db02      	blt.n	8010184 <_printf_float+0x21c>
 801017e:	6823      	ldr	r3, [r4, #0]
 8010180:	07d8      	lsls	r0, r3, #31
 8010182:	d50f      	bpl.n	80101a4 <_printf_float+0x23c>
 8010184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010188:	4631      	mov	r1, r6
 801018a:	4628      	mov	r0, r5
 801018c:	47b8      	blx	r7
 801018e:	3001      	adds	r0, #1
 8010190:	f43f af45 	beq.w	801001e <_printf_float+0xb6>
 8010194:	f04f 0900 	mov.w	r9, #0
 8010198:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801019c:	f104 0a1a 	add.w	sl, r4, #26
 80101a0:	45c8      	cmp	r8, r9
 80101a2:	dc09      	bgt.n	80101b8 <_printf_float+0x250>
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	079b      	lsls	r3, r3, #30
 80101a8:	f100 8103 	bmi.w	80103b2 <_printf_float+0x44a>
 80101ac:	68e0      	ldr	r0, [r4, #12]
 80101ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101b0:	4298      	cmp	r0, r3
 80101b2:	bfb8      	it	lt
 80101b4:	4618      	movlt	r0, r3
 80101b6:	e734      	b.n	8010022 <_printf_float+0xba>
 80101b8:	2301      	movs	r3, #1
 80101ba:	4652      	mov	r2, sl
 80101bc:	4631      	mov	r1, r6
 80101be:	4628      	mov	r0, r5
 80101c0:	47b8      	blx	r7
 80101c2:	3001      	adds	r0, #1
 80101c4:	f43f af2b 	beq.w	801001e <_printf_float+0xb6>
 80101c8:	f109 0901 	add.w	r9, r9, #1
 80101cc:	e7e8      	b.n	80101a0 <_printf_float+0x238>
 80101ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	dc39      	bgt.n	8010248 <_printf_float+0x2e0>
 80101d4:	4a1b      	ldr	r2, [pc, #108]	@ (8010244 <_printf_float+0x2dc>)
 80101d6:	2301      	movs	r3, #1
 80101d8:	4631      	mov	r1, r6
 80101da:	4628      	mov	r0, r5
 80101dc:	47b8      	blx	r7
 80101de:	3001      	adds	r0, #1
 80101e0:	f43f af1d 	beq.w	801001e <_printf_float+0xb6>
 80101e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80101e8:	ea59 0303 	orrs.w	r3, r9, r3
 80101ec:	d102      	bne.n	80101f4 <_printf_float+0x28c>
 80101ee:	6823      	ldr	r3, [r4, #0]
 80101f0:	07d9      	lsls	r1, r3, #31
 80101f2:	d5d7      	bpl.n	80101a4 <_printf_float+0x23c>
 80101f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101f8:	4631      	mov	r1, r6
 80101fa:	4628      	mov	r0, r5
 80101fc:	47b8      	blx	r7
 80101fe:	3001      	adds	r0, #1
 8010200:	f43f af0d 	beq.w	801001e <_printf_float+0xb6>
 8010204:	f04f 0a00 	mov.w	sl, #0
 8010208:	f104 0b1a 	add.w	fp, r4, #26
 801020c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801020e:	425b      	negs	r3, r3
 8010210:	4553      	cmp	r3, sl
 8010212:	dc01      	bgt.n	8010218 <_printf_float+0x2b0>
 8010214:	464b      	mov	r3, r9
 8010216:	e793      	b.n	8010140 <_printf_float+0x1d8>
 8010218:	2301      	movs	r3, #1
 801021a:	465a      	mov	r2, fp
 801021c:	4631      	mov	r1, r6
 801021e:	4628      	mov	r0, r5
 8010220:	47b8      	blx	r7
 8010222:	3001      	adds	r0, #1
 8010224:	f43f aefb 	beq.w	801001e <_printf_float+0xb6>
 8010228:	f10a 0a01 	add.w	sl, sl, #1
 801022c:	e7ee      	b.n	801020c <_printf_float+0x2a4>
 801022e:	bf00      	nop
 8010230:	7fefffff 	.word	0x7fefffff
 8010234:	08013f08 	.word	0x08013f08
 8010238:	08013f0c 	.word	0x08013f0c
 801023c:	08013f10 	.word	0x08013f10
 8010240:	08013f14 	.word	0x08013f14
 8010244:	08013f18 	.word	0x08013f18
 8010248:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801024a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801024e:	4553      	cmp	r3, sl
 8010250:	bfa8      	it	ge
 8010252:	4653      	movge	r3, sl
 8010254:	2b00      	cmp	r3, #0
 8010256:	4699      	mov	r9, r3
 8010258:	dc36      	bgt.n	80102c8 <_printf_float+0x360>
 801025a:	f04f 0b00 	mov.w	fp, #0
 801025e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010262:	f104 021a 	add.w	r2, r4, #26
 8010266:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010268:	9306      	str	r3, [sp, #24]
 801026a:	eba3 0309 	sub.w	r3, r3, r9
 801026e:	455b      	cmp	r3, fp
 8010270:	dc31      	bgt.n	80102d6 <_printf_float+0x36e>
 8010272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010274:	459a      	cmp	sl, r3
 8010276:	dc3a      	bgt.n	80102ee <_printf_float+0x386>
 8010278:	6823      	ldr	r3, [r4, #0]
 801027a:	07da      	lsls	r2, r3, #31
 801027c:	d437      	bmi.n	80102ee <_printf_float+0x386>
 801027e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010280:	ebaa 0903 	sub.w	r9, sl, r3
 8010284:	9b06      	ldr	r3, [sp, #24]
 8010286:	ebaa 0303 	sub.w	r3, sl, r3
 801028a:	4599      	cmp	r9, r3
 801028c:	bfa8      	it	ge
 801028e:	4699      	movge	r9, r3
 8010290:	f1b9 0f00 	cmp.w	r9, #0
 8010294:	dc33      	bgt.n	80102fe <_printf_float+0x396>
 8010296:	f04f 0800 	mov.w	r8, #0
 801029a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801029e:	f104 0b1a 	add.w	fp, r4, #26
 80102a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a4:	ebaa 0303 	sub.w	r3, sl, r3
 80102a8:	eba3 0309 	sub.w	r3, r3, r9
 80102ac:	4543      	cmp	r3, r8
 80102ae:	f77f af79 	ble.w	80101a4 <_printf_float+0x23c>
 80102b2:	2301      	movs	r3, #1
 80102b4:	465a      	mov	r2, fp
 80102b6:	4631      	mov	r1, r6
 80102b8:	4628      	mov	r0, r5
 80102ba:	47b8      	blx	r7
 80102bc:	3001      	adds	r0, #1
 80102be:	f43f aeae 	beq.w	801001e <_printf_float+0xb6>
 80102c2:	f108 0801 	add.w	r8, r8, #1
 80102c6:	e7ec      	b.n	80102a2 <_printf_float+0x33a>
 80102c8:	4642      	mov	r2, r8
 80102ca:	4631      	mov	r1, r6
 80102cc:	4628      	mov	r0, r5
 80102ce:	47b8      	blx	r7
 80102d0:	3001      	adds	r0, #1
 80102d2:	d1c2      	bne.n	801025a <_printf_float+0x2f2>
 80102d4:	e6a3      	b.n	801001e <_printf_float+0xb6>
 80102d6:	2301      	movs	r3, #1
 80102d8:	4631      	mov	r1, r6
 80102da:	4628      	mov	r0, r5
 80102dc:	9206      	str	r2, [sp, #24]
 80102de:	47b8      	blx	r7
 80102e0:	3001      	adds	r0, #1
 80102e2:	f43f ae9c 	beq.w	801001e <_printf_float+0xb6>
 80102e6:	9a06      	ldr	r2, [sp, #24]
 80102e8:	f10b 0b01 	add.w	fp, fp, #1
 80102ec:	e7bb      	b.n	8010266 <_printf_float+0x2fe>
 80102ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102f2:	4631      	mov	r1, r6
 80102f4:	4628      	mov	r0, r5
 80102f6:	47b8      	blx	r7
 80102f8:	3001      	adds	r0, #1
 80102fa:	d1c0      	bne.n	801027e <_printf_float+0x316>
 80102fc:	e68f      	b.n	801001e <_printf_float+0xb6>
 80102fe:	9a06      	ldr	r2, [sp, #24]
 8010300:	464b      	mov	r3, r9
 8010302:	4442      	add	r2, r8
 8010304:	4631      	mov	r1, r6
 8010306:	4628      	mov	r0, r5
 8010308:	47b8      	blx	r7
 801030a:	3001      	adds	r0, #1
 801030c:	d1c3      	bne.n	8010296 <_printf_float+0x32e>
 801030e:	e686      	b.n	801001e <_printf_float+0xb6>
 8010310:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010314:	f1ba 0f01 	cmp.w	sl, #1
 8010318:	dc01      	bgt.n	801031e <_printf_float+0x3b6>
 801031a:	07db      	lsls	r3, r3, #31
 801031c:	d536      	bpl.n	801038c <_printf_float+0x424>
 801031e:	2301      	movs	r3, #1
 8010320:	4642      	mov	r2, r8
 8010322:	4631      	mov	r1, r6
 8010324:	4628      	mov	r0, r5
 8010326:	47b8      	blx	r7
 8010328:	3001      	adds	r0, #1
 801032a:	f43f ae78 	beq.w	801001e <_printf_float+0xb6>
 801032e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010332:	4631      	mov	r1, r6
 8010334:	4628      	mov	r0, r5
 8010336:	47b8      	blx	r7
 8010338:	3001      	adds	r0, #1
 801033a:	f43f ae70 	beq.w	801001e <_printf_float+0xb6>
 801033e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010342:	2200      	movs	r2, #0
 8010344:	2300      	movs	r3, #0
 8010346:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801034a:	f7f0 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 801034e:	b9c0      	cbnz	r0, 8010382 <_printf_float+0x41a>
 8010350:	4653      	mov	r3, sl
 8010352:	f108 0201 	add.w	r2, r8, #1
 8010356:	4631      	mov	r1, r6
 8010358:	4628      	mov	r0, r5
 801035a:	47b8      	blx	r7
 801035c:	3001      	adds	r0, #1
 801035e:	d10c      	bne.n	801037a <_printf_float+0x412>
 8010360:	e65d      	b.n	801001e <_printf_float+0xb6>
 8010362:	2301      	movs	r3, #1
 8010364:	465a      	mov	r2, fp
 8010366:	4631      	mov	r1, r6
 8010368:	4628      	mov	r0, r5
 801036a:	47b8      	blx	r7
 801036c:	3001      	adds	r0, #1
 801036e:	f43f ae56 	beq.w	801001e <_printf_float+0xb6>
 8010372:	f108 0801 	add.w	r8, r8, #1
 8010376:	45d0      	cmp	r8, sl
 8010378:	dbf3      	blt.n	8010362 <_printf_float+0x3fa>
 801037a:	464b      	mov	r3, r9
 801037c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010380:	e6df      	b.n	8010142 <_printf_float+0x1da>
 8010382:	f04f 0800 	mov.w	r8, #0
 8010386:	f104 0b1a 	add.w	fp, r4, #26
 801038a:	e7f4      	b.n	8010376 <_printf_float+0x40e>
 801038c:	2301      	movs	r3, #1
 801038e:	4642      	mov	r2, r8
 8010390:	e7e1      	b.n	8010356 <_printf_float+0x3ee>
 8010392:	2301      	movs	r3, #1
 8010394:	464a      	mov	r2, r9
 8010396:	4631      	mov	r1, r6
 8010398:	4628      	mov	r0, r5
 801039a:	47b8      	blx	r7
 801039c:	3001      	adds	r0, #1
 801039e:	f43f ae3e 	beq.w	801001e <_printf_float+0xb6>
 80103a2:	f108 0801 	add.w	r8, r8, #1
 80103a6:	68e3      	ldr	r3, [r4, #12]
 80103a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103aa:	1a5b      	subs	r3, r3, r1
 80103ac:	4543      	cmp	r3, r8
 80103ae:	dcf0      	bgt.n	8010392 <_printf_float+0x42a>
 80103b0:	e6fc      	b.n	80101ac <_printf_float+0x244>
 80103b2:	f04f 0800 	mov.w	r8, #0
 80103b6:	f104 0919 	add.w	r9, r4, #25
 80103ba:	e7f4      	b.n	80103a6 <_printf_float+0x43e>

080103bc <_printf_common>:
 80103bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c0:	4616      	mov	r6, r2
 80103c2:	4698      	mov	r8, r3
 80103c4:	688a      	ldr	r2, [r1, #8]
 80103c6:	690b      	ldr	r3, [r1, #16]
 80103c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80103cc:	4293      	cmp	r3, r2
 80103ce:	bfb8      	it	lt
 80103d0:	4613      	movlt	r3, r2
 80103d2:	6033      	str	r3, [r6, #0]
 80103d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80103d8:	4607      	mov	r7, r0
 80103da:	460c      	mov	r4, r1
 80103dc:	b10a      	cbz	r2, 80103e2 <_printf_common+0x26>
 80103de:	3301      	adds	r3, #1
 80103e0:	6033      	str	r3, [r6, #0]
 80103e2:	6823      	ldr	r3, [r4, #0]
 80103e4:	0699      	lsls	r1, r3, #26
 80103e6:	bf42      	ittt	mi
 80103e8:	6833      	ldrmi	r3, [r6, #0]
 80103ea:	3302      	addmi	r3, #2
 80103ec:	6033      	strmi	r3, [r6, #0]
 80103ee:	6825      	ldr	r5, [r4, #0]
 80103f0:	f015 0506 	ands.w	r5, r5, #6
 80103f4:	d106      	bne.n	8010404 <_printf_common+0x48>
 80103f6:	f104 0a19 	add.w	sl, r4, #25
 80103fa:	68e3      	ldr	r3, [r4, #12]
 80103fc:	6832      	ldr	r2, [r6, #0]
 80103fe:	1a9b      	subs	r3, r3, r2
 8010400:	42ab      	cmp	r3, r5
 8010402:	dc26      	bgt.n	8010452 <_printf_common+0x96>
 8010404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010408:	6822      	ldr	r2, [r4, #0]
 801040a:	3b00      	subs	r3, #0
 801040c:	bf18      	it	ne
 801040e:	2301      	movne	r3, #1
 8010410:	0692      	lsls	r2, r2, #26
 8010412:	d42b      	bmi.n	801046c <_printf_common+0xb0>
 8010414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010418:	4641      	mov	r1, r8
 801041a:	4638      	mov	r0, r7
 801041c:	47c8      	blx	r9
 801041e:	3001      	adds	r0, #1
 8010420:	d01e      	beq.n	8010460 <_printf_common+0xa4>
 8010422:	6823      	ldr	r3, [r4, #0]
 8010424:	6922      	ldr	r2, [r4, #16]
 8010426:	f003 0306 	and.w	r3, r3, #6
 801042a:	2b04      	cmp	r3, #4
 801042c:	bf02      	ittt	eq
 801042e:	68e5      	ldreq	r5, [r4, #12]
 8010430:	6833      	ldreq	r3, [r6, #0]
 8010432:	1aed      	subeq	r5, r5, r3
 8010434:	68a3      	ldr	r3, [r4, #8]
 8010436:	bf0c      	ite	eq
 8010438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801043c:	2500      	movne	r5, #0
 801043e:	4293      	cmp	r3, r2
 8010440:	bfc4      	itt	gt
 8010442:	1a9b      	subgt	r3, r3, r2
 8010444:	18ed      	addgt	r5, r5, r3
 8010446:	2600      	movs	r6, #0
 8010448:	341a      	adds	r4, #26
 801044a:	42b5      	cmp	r5, r6
 801044c:	d11a      	bne.n	8010484 <_printf_common+0xc8>
 801044e:	2000      	movs	r0, #0
 8010450:	e008      	b.n	8010464 <_printf_common+0xa8>
 8010452:	2301      	movs	r3, #1
 8010454:	4652      	mov	r2, sl
 8010456:	4641      	mov	r1, r8
 8010458:	4638      	mov	r0, r7
 801045a:	47c8      	blx	r9
 801045c:	3001      	adds	r0, #1
 801045e:	d103      	bne.n	8010468 <_printf_common+0xac>
 8010460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010468:	3501      	adds	r5, #1
 801046a:	e7c6      	b.n	80103fa <_printf_common+0x3e>
 801046c:	18e1      	adds	r1, r4, r3
 801046e:	1c5a      	adds	r2, r3, #1
 8010470:	2030      	movs	r0, #48	@ 0x30
 8010472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010476:	4422      	add	r2, r4
 8010478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801047c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010480:	3302      	adds	r3, #2
 8010482:	e7c7      	b.n	8010414 <_printf_common+0x58>
 8010484:	2301      	movs	r3, #1
 8010486:	4622      	mov	r2, r4
 8010488:	4641      	mov	r1, r8
 801048a:	4638      	mov	r0, r7
 801048c:	47c8      	blx	r9
 801048e:	3001      	adds	r0, #1
 8010490:	d0e6      	beq.n	8010460 <_printf_common+0xa4>
 8010492:	3601      	adds	r6, #1
 8010494:	e7d9      	b.n	801044a <_printf_common+0x8e>
	...

08010498 <_printf_i>:
 8010498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801049c:	7e0f      	ldrb	r7, [r1, #24]
 801049e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80104a0:	2f78      	cmp	r7, #120	@ 0x78
 80104a2:	4691      	mov	r9, r2
 80104a4:	4680      	mov	r8, r0
 80104a6:	460c      	mov	r4, r1
 80104a8:	469a      	mov	sl, r3
 80104aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104ae:	d807      	bhi.n	80104c0 <_printf_i+0x28>
 80104b0:	2f62      	cmp	r7, #98	@ 0x62
 80104b2:	d80a      	bhi.n	80104ca <_printf_i+0x32>
 80104b4:	2f00      	cmp	r7, #0
 80104b6:	f000 80d2 	beq.w	801065e <_printf_i+0x1c6>
 80104ba:	2f58      	cmp	r7, #88	@ 0x58
 80104bc:	f000 80b9 	beq.w	8010632 <_printf_i+0x19a>
 80104c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80104c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80104c8:	e03a      	b.n	8010540 <_printf_i+0xa8>
 80104ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80104ce:	2b15      	cmp	r3, #21
 80104d0:	d8f6      	bhi.n	80104c0 <_printf_i+0x28>
 80104d2:	a101      	add	r1, pc, #4	@ (adr r1, 80104d8 <_printf_i+0x40>)
 80104d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80104d8:	08010531 	.word	0x08010531
 80104dc:	08010545 	.word	0x08010545
 80104e0:	080104c1 	.word	0x080104c1
 80104e4:	080104c1 	.word	0x080104c1
 80104e8:	080104c1 	.word	0x080104c1
 80104ec:	080104c1 	.word	0x080104c1
 80104f0:	08010545 	.word	0x08010545
 80104f4:	080104c1 	.word	0x080104c1
 80104f8:	080104c1 	.word	0x080104c1
 80104fc:	080104c1 	.word	0x080104c1
 8010500:	080104c1 	.word	0x080104c1
 8010504:	08010645 	.word	0x08010645
 8010508:	0801056f 	.word	0x0801056f
 801050c:	080105ff 	.word	0x080105ff
 8010510:	080104c1 	.word	0x080104c1
 8010514:	080104c1 	.word	0x080104c1
 8010518:	08010667 	.word	0x08010667
 801051c:	080104c1 	.word	0x080104c1
 8010520:	0801056f 	.word	0x0801056f
 8010524:	080104c1 	.word	0x080104c1
 8010528:	080104c1 	.word	0x080104c1
 801052c:	08010607 	.word	0x08010607
 8010530:	6833      	ldr	r3, [r6, #0]
 8010532:	1d1a      	adds	r2, r3, #4
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6032      	str	r2, [r6, #0]
 8010538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801053c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010540:	2301      	movs	r3, #1
 8010542:	e09d      	b.n	8010680 <_printf_i+0x1e8>
 8010544:	6833      	ldr	r3, [r6, #0]
 8010546:	6820      	ldr	r0, [r4, #0]
 8010548:	1d19      	adds	r1, r3, #4
 801054a:	6031      	str	r1, [r6, #0]
 801054c:	0606      	lsls	r6, r0, #24
 801054e:	d501      	bpl.n	8010554 <_printf_i+0xbc>
 8010550:	681d      	ldr	r5, [r3, #0]
 8010552:	e003      	b.n	801055c <_printf_i+0xc4>
 8010554:	0645      	lsls	r5, r0, #25
 8010556:	d5fb      	bpl.n	8010550 <_printf_i+0xb8>
 8010558:	f9b3 5000 	ldrsh.w	r5, [r3]
 801055c:	2d00      	cmp	r5, #0
 801055e:	da03      	bge.n	8010568 <_printf_i+0xd0>
 8010560:	232d      	movs	r3, #45	@ 0x2d
 8010562:	426d      	negs	r5, r5
 8010564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010568:	4859      	ldr	r0, [pc, #356]	@ (80106d0 <_printf_i+0x238>)
 801056a:	230a      	movs	r3, #10
 801056c:	e011      	b.n	8010592 <_printf_i+0xfa>
 801056e:	6821      	ldr	r1, [r4, #0]
 8010570:	6833      	ldr	r3, [r6, #0]
 8010572:	0608      	lsls	r0, r1, #24
 8010574:	f853 5b04 	ldr.w	r5, [r3], #4
 8010578:	d402      	bmi.n	8010580 <_printf_i+0xe8>
 801057a:	0649      	lsls	r1, r1, #25
 801057c:	bf48      	it	mi
 801057e:	b2ad      	uxthmi	r5, r5
 8010580:	2f6f      	cmp	r7, #111	@ 0x6f
 8010582:	4853      	ldr	r0, [pc, #332]	@ (80106d0 <_printf_i+0x238>)
 8010584:	6033      	str	r3, [r6, #0]
 8010586:	bf14      	ite	ne
 8010588:	230a      	movne	r3, #10
 801058a:	2308      	moveq	r3, #8
 801058c:	2100      	movs	r1, #0
 801058e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010592:	6866      	ldr	r6, [r4, #4]
 8010594:	60a6      	str	r6, [r4, #8]
 8010596:	2e00      	cmp	r6, #0
 8010598:	bfa2      	ittt	ge
 801059a:	6821      	ldrge	r1, [r4, #0]
 801059c:	f021 0104 	bicge.w	r1, r1, #4
 80105a0:	6021      	strge	r1, [r4, #0]
 80105a2:	b90d      	cbnz	r5, 80105a8 <_printf_i+0x110>
 80105a4:	2e00      	cmp	r6, #0
 80105a6:	d04b      	beq.n	8010640 <_printf_i+0x1a8>
 80105a8:	4616      	mov	r6, r2
 80105aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80105ae:	fb03 5711 	mls	r7, r3, r1, r5
 80105b2:	5dc7      	ldrb	r7, [r0, r7]
 80105b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105b8:	462f      	mov	r7, r5
 80105ba:	42bb      	cmp	r3, r7
 80105bc:	460d      	mov	r5, r1
 80105be:	d9f4      	bls.n	80105aa <_printf_i+0x112>
 80105c0:	2b08      	cmp	r3, #8
 80105c2:	d10b      	bne.n	80105dc <_printf_i+0x144>
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	07df      	lsls	r7, r3, #31
 80105c8:	d508      	bpl.n	80105dc <_printf_i+0x144>
 80105ca:	6923      	ldr	r3, [r4, #16]
 80105cc:	6861      	ldr	r1, [r4, #4]
 80105ce:	4299      	cmp	r1, r3
 80105d0:	bfde      	ittt	le
 80105d2:	2330      	movle	r3, #48	@ 0x30
 80105d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80105d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80105dc:	1b92      	subs	r2, r2, r6
 80105de:	6122      	str	r2, [r4, #16]
 80105e0:	f8cd a000 	str.w	sl, [sp]
 80105e4:	464b      	mov	r3, r9
 80105e6:	aa03      	add	r2, sp, #12
 80105e8:	4621      	mov	r1, r4
 80105ea:	4640      	mov	r0, r8
 80105ec:	f7ff fee6 	bl	80103bc <_printf_common>
 80105f0:	3001      	adds	r0, #1
 80105f2:	d14a      	bne.n	801068a <_printf_i+0x1f2>
 80105f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105f8:	b004      	add	sp, #16
 80105fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105fe:	6823      	ldr	r3, [r4, #0]
 8010600:	f043 0320 	orr.w	r3, r3, #32
 8010604:	6023      	str	r3, [r4, #0]
 8010606:	4833      	ldr	r0, [pc, #204]	@ (80106d4 <_printf_i+0x23c>)
 8010608:	2778      	movs	r7, #120	@ 0x78
 801060a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801060e:	6823      	ldr	r3, [r4, #0]
 8010610:	6831      	ldr	r1, [r6, #0]
 8010612:	061f      	lsls	r7, r3, #24
 8010614:	f851 5b04 	ldr.w	r5, [r1], #4
 8010618:	d402      	bmi.n	8010620 <_printf_i+0x188>
 801061a:	065f      	lsls	r7, r3, #25
 801061c:	bf48      	it	mi
 801061e:	b2ad      	uxthmi	r5, r5
 8010620:	6031      	str	r1, [r6, #0]
 8010622:	07d9      	lsls	r1, r3, #31
 8010624:	bf44      	itt	mi
 8010626:	f043 0320 	orrmi.w	r3, r3, #32
 801062a:	6023      	strmi	r3, [r4, #0]
 801062c:	b11d      	cbz	r5, 8010636 <_printf_i+0x19e>
 801062e:	2310      	movs	r3, #16
 8010630:	e7ac      	b.n	801058c <_printf_i+0xf4>
 8010632:	4827      	ldr	r0, [pc, #156]	@ (80106d0 <_printf_i+0x238>)
 8010634:	e7e9      	b.n	801060a <_printf_i+0x172>
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	f023 0320 	bic.w	r3, r3, #32
 801063c:	6023      	str	r3, [r4, #0]
 801063e:	e7f6      	b.n	801062e <_printf_i+0x196>
 8010640:	4616      	mov	r6, r2
 8010642:	e7bd      	b.n	80105c0 <_printf_i+0x128>
 8010644:	6833      	ldr	r3, [r6, #0]
 8010646:	6825      	ldr	r5, [r4, #0]
 8010648:	6961      	ldr	r1, [r4, #20]
 801064a:	1d18      	adds	r0, r3, #4
 801064c:	6030      	str	r0, [r6, #0]
 801064e:	062e      	lsls	r6, r5, #24
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	d501      	bpl.n	8010658 <_printf_i+0x1c0>
 8010654:	6019      	str	r1, [r3, #0]
 8010656:	e002      	b.n	801065e <_printf_i+0x1c6>
 8010658:	0668      	lsls	r0, r5, #25
 801065a:	d5fb      	bpl.n	8010654 <_printf_i+0x1bc>
 801065c:	8019      	strh	r1, [r3, #0]
 801065e:	2300      	movs	r3, #0
 8010660:	6123      	str	r3, [r4, #16]
 8010662:	4616      	mov	r6, r2
 8010664:	e7bc      	b.n	80105e0 <_printf_i+0x148>
 8010666:	6833      	ldr	r3, [r6, #0]
 8010668:	1d1a      	adds	r2, r3, #4
 801066a:	6032      	str	r2, [r6, #0]
 801066c:	681e      	ldr	r6, [r3, #0]
 801066e:	6862      	ldr	r2, [r4, #4]
 8010670:	2100      	movs	r1, #0
 8010672:	4630      	mov	r0, r6
 8010674:	f7ef fdac 	bl	80001d0 <memchr>
 8010678:	b108      	cbz	r0, 801067e <_printf_i+0x1e6>
 801067a:	1b80      	subs	r0, r0, r6
 801067c:	6060      	str	r0, [r4, #4]
 801067e:	6863      	ldr	r3, [r4, #4]
 8010680:	6123      	str	r3, [r4, #16]
 8010682:	2300      	movs	r3, #0
 8010684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010688:	e7aa      	b.n	80105e0 <_printf_i+0x148>
 801068a:	6923      	ldr	r3, [r4, #16]
 801068c:	4632      	mov	r2, r6
 801068e:	4649      	mov	r1, r9
 8010690:	4640      	mov	r0, r8
 8010692:	47d0      	blx	sl
 8010694:	3001      	adds	r0, #1
 8010696:	d0ad      	beq.n	80105f4 <_printf_i+0x15c>
 8010698:	6823      	ldr	r3, [r4, #0]
 801069a:	079b      	lsls	r3, r3, #30
 801069c:	d413      	bmi.n	80106c6 <_printf_i+0x22e>
 801069e:	68e0      	ldr	r0, [r4, #12]
 80106a0:	9b03      	ldr	r3, [sp, #12]
 80106a2:	4298      	cmp	r0, r3
 80106a4:	bfb8      	it	lt
 80106a6:	4618      	movlt	r0, r3
 80106a8:	e7a6      	b.n	80105f8 <_printf_i+0x160>
 80106aa:	2301      	movs	r3, #1
 80106ac:	4632      	mov	r2, r6
 80106ae:	4649      	mov	r1, r9
 80106b0:	4640      	mov	r0, r8
 80106b2:	47d0      	blx	sl
 80106b4:	3001      	adds	r0, #1
 80106b6:	d09d      	beq.n	80105f4 <_printf_i+0x15c>
 80106b8:	3501      	adds	r5, #1
 80106ba:	68e3      	ldr	r3, [r4, #12]
 80106bc:	9903      	ldr	r1, [sp, #12]
 80106be:	1a5b      	subs	r3, r3, r1
 80106c0:	42ab      	cmp	r3, r5
 80106c2:	dcf2      	bgt.n	80106aa <_printf_i+0x212>
 80106c4:	e7eb      	b.n	801069e <_printf_i+0x206>
 80106c6:	2500      	movs	r5, #0
 80106c8:	f104 0619 	add.w	r6, r4, #25
 80106cc:	e7f5      	b.n	80106ba <_printf_i+0x222>
 80106ce:	bf00      	nop
 80106d0:	08013f1a 	.word	0x08013f1a
 80106d4:	08013f2b 	.word	0x08013f2b

080106d8 <std>:
 80106d8:	2300      	movs	r3, #0
 80106da:	b510      	push	{r4, lr}
 80106dc:	4604      	mov	r4, r0
 80106de:	e9c0 3300 	strd	r3, r3, [r0]
 80106e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106e6:	6083      	str	r3, [r0, #8]
 80106e8:	8181      	strh	r1, [r0, #12]
 80106ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80106ec:	81c2      	strh	r2, [r0, #14]
 80106ee:	6183      	str	r3, [r0, #24]
 80106f0:	4619      	mov	r1, r3
 80106f2:	2208      	movs	r2, #8
 80106f4:	305c      	adds	r0, #92	@ 0x5c
 80106f6:	f000 f8d1 	bl	801089c <memset>
 80106fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010730 <std+0x58>)
 80106fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80106fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010734 <std+0x5c>)
 8010700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010702:	4b0d      	ldr	r3, [pc, #52]	@ (8010738 <std+0x60>)
 8010704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010706:	4b0d      	ldr	r3, [pc, #52]	@ (801073c <std+0x64>)
 8010708:	6323      	str	r3, [r4, #48]	@ 0x30
 801070a:	4b0d      	ldr	r3, [pc, #52]	@ (8010740 <std+0x68>)
 801070c:	6224      	str	r4, [r4, #32]
 801070e:	429c      	cmp	r4, r3
 8010710:	d006      	beq.n	8010720 <std+0x48>
 8010712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010716:	4294      	cmp	r4, r2
 8010718:	d002      	beq.n	8010720 <std+0x48>
 801071a:	33d0      	adds	r3, #208	@ 0xd0
 801071c:	429c      	cmp	r4, r3
 801071e:	d105      	bne.n	801072c <std+0x54>
 8010720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010728:	f000 b944 	b.w	80109b4 <__retarget_lock_init_recursive>
 801072c:	bd10      	pop	{r4, pc}
 801072e:	bf00      	nop
 8010730:	0801237d 	.word	0x0801237d
 8010734:	0801239f 	.word	0x0801239f
 8010738:	080123d7 	.word	0x080123d7
 801073c:	080123fb 	.word	0x080123fb
 8010740:	200059fc 	.word	0x200059fc

08010744 <stdio_exit_handler>:
 8010744:	4a02      	ldr	r2, [pc, #8]	@ (8010750 <stdio_exit_handler+0xc>)
 8010746:	4903      	ldr	r1, [pc, #12]	@ (8010754 <stdio_exit_handler+0x10>)
 8010748:	4803      	ldr	r0, [pc, #12]	@ (8010758 <stdio_exit_handler+0x14>)
 801074a:	f000 b869 	b.w	8010820 <_fwalk_sglue>
 801074e:	bf00      	nop
 8010750:	200000b4 	.word	0x200000b4
 8010754:	08011c11 	.word	0x08011c11
 8010758:	200000c4 	.word	0x200000c4

0801075c <cleanup_stdio>:
 801075c:	6841      	ldr	r1, [r0, #4]
 801075e:	4b0c      	ldr	r3, [pc, #48]	@ (8010790 <cleanup_stdio+0x34>)
 8010760:	4299      	cmp	r1, r3
 8010762:	b510      	push	{r4, lr}
 8010764:	4604      	mov	r4, r0
 8010766:	d001      	beq.n	801076c <cleanup_stdio+0x10>
 8010768:	f001 fa52 	bl	8011c10 <_fflush_r>
 801076c:	68a1      	ldr	r1, [r4, #8]
 801076e:	4b09      	ldr	r3, [pc, #36]	@ (8010794 <cleanup_stdio+0x38>)
 8010770:	4299      	cmp	r1, r3
 8010772:	d002      	beq.n	801077a <cleanup_stdio+0x1e>
 8010774:	4620      	mov	r0, r4
 8010776:	f001 fa4b 	bl	8011c10 <_fflush_r>
 801077a:	68e1      	ldr	r1, [r4, #12]
 801077c:	4b06      	ldr	r3, [pc, #24]	@ (8010798 <cleanup_stdio+0x3c>)
 801077e:	4299      	cmp	r1, r3
 8010780:	d004      	beq.n	801078c <cleanup_stdio+0x30>
 8010782:	4620      	mov	r0, r4
 8010784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010788:	f001 ba42 	b.w	8011c10 <_fflush_r>
 801078c:	bd10      	pop	{r4, pc}
 801078e:	bf00      	nop
 8010790:	200059fc 	.word	0x200059fc
 8010794:	20005a64 	.word	0x20005a64
 8010798:	20005acc 	.word	0x20005acc

0801079c <global_stdio_init.part.0>:
 801079c:	b510      	push	{r4, lr}
 801079e:	4b0b      	ldr	r3, [pc, #44]	@ (80107cc <global_stdio_init.part.0+0x30>)
 80107a0:	4c0b      	ldr	r4, [pc, #44]	@ (80107d0 <global_stdio_init.part.0+0x34>)
 80107a2:	4a0c      	ldr	r2, [pc, #48]	@ (80107d4 <global_stdio_init.part.0+0x38>)
 80107a4:	601a      	str	r2, [r3, #0]
 80107a6:	4620      	mov	r0, r4
 80107a8:	2200      	movs	r2, #0
 80107aa:	2104      	movs	r1, #4
 80107ac:	f7ff ff94 	bl	80106d8 <std>
 80107b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80107b4:	2201      	movs	r2, #1
 80107b6:	2109      	movs	r1, #9
 80107b8:	f7ff ff8e 	bl	80106d8 <std>
 80107bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80107c0:	2202      	movs	r2, #2
 80107c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107c6:	2112      	movs	r1, #18
 80107c8:	f7ff bf86 	b.w	80106d8 <std>
 80107cc:	20005b34 	.word	0x20005b34
 80107d0:	200059fc 	.word	0x200059fc
 80107d4:	08010745 	.word	0x08010745

080107d8 <__sfp_lock_acquire>:
 80107d8:	4801      	ldr	r0, [pc, #4]	@ (80107e0 <__sfp_lock_acquire+0x8>)
 80107da:	f000 b8ec 	b.w	80109b6 <__retarget_lock_acquire_recursive>
 80107de:	bf00      	nop
 80107e0:	20005b3d 	.word	0x20005b3d

080107e4 <__sfp_lock_release>:
 80107e4:	4801      	ldr	r0, [pc, #4]	@ (80107ec <__sfp_lock_release+0x8>)
 80107e6:	f000 b8e7 	b.w	80109b8 <__retarget_lock_release_recursive>
 80107ea:	bf00      	nop
 80107ec:	20005b3d 	.word	0x20005b3d

080107f0 <__sinit>:
 80107f0:	b510      	push	{r4, lr}
 80107f2:	4604      	mov	r4, r0
 80107f4:	f7ff fff0 	bl	80107d8 <__sfp_lock_acquire>
 80107f8:	6a23      	ldr	r3, [r4, #32]
 80107fa:	b11b      	cbz	r3, 8010804 <__sinit+0x14>
 80107fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010800:	f7ff bff0 	b.w	80107e4 <__sfp_lock_release>
 8010804:	4b04      	ldr	r3, [pc, #16]	@ (8010818 <__sinit+0x28>)
 8010806:	6223      	str	r3, [r4, #32]
 8010808:	4b04      	ldr	r3, [pc, #16]	@ (801081c <__sinit+0x2c>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d1f5      	bne.n	80107fc <__sinit+0xc>
 8010810:	f7ff ffc4 	bl	801079c <global_stdio_init.part.0>
 8010814:	e7f2      	b.n	80107fc <__sinit+0xc>
 8010816:	bf00      	nop
 8010818:	0801075d 	.word	0x0801075d
 801081c:	20005b34 	.word	0x20005b34

08010820 <_fwalk_sglue>:
 8010820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010824:	4607      	mov	r7, r0
 8010826:	4688      	mov	r8, r1
 8010828:	4614      	mov	r4, r2
 801082a:	2600      	movs	r6, #0
 801082c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010830:	f1b9 0901 	subs.w	r9, r9, #1
 8010834:	d505      	bpl.n	8010842 <_fwalk_sglue+0x22>
 8010836:	6824      	ldr	r4, [r4, #0]
 8010838:	2c00      	cmp	r4, #0
 801083a:	d1f7      	bne.n	801082c <_fwalk_sglue+0xc>
 801083c:	4630      	mov	r0, r6
 801083e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010842:	89ab      	ldrh	r3, [r5, #12]
 8010844:	2b01      	cmp	r3, #1
 8010846:	d907      	bls.n	8010858 <_fwalk_sglue+0x38>
 8010848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801084c:	3301      	adds	r3, #1
 801084e:	d003      	beq.n	8010858 <_fwalk_sglue+0x38>
 8010850:	4629      	mov	r1, r5
 8010852:	4638      	mov	r0, r7
 8010854:	47c0      	blx	r8
 8010856:	4306      	orrs	r6, r0
 8010858:	3568      	adds	r5, #104	@ 0x68
 801085a:	e7e9      	b.n	8010830 <_fwalk_sglue+0x10>

0801085c <_vsiprintf_r>:
 801085c:	b500      	push	{lr}
 801085e:	b09b      	sub	sp, #108	@ 0x6c
 8010860:	9100      	str	r1, [sp, #0]
 8010862:	9104      	str	r1, [sp, #16]
 8010864:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010868:	9105      	str	r1, [sp, #20]
 801086a:	9102      	str	r1, [sp, #8]
 801086c:	4905      	ldr	r1, [pc, #20]	@ (8010884 <_vsiprintf_r+0x28>)
 801086e:	9103      	str	r1, [sp, #12]
 8010870:	4669      	mov	r1, sp
 8010872:	f000 ffa3 	bl	80117bc <_svfiprintf_r>
 8010876:	9b00      	ldr	r3, [sp, #0]
 8010878:	2200      	movs	r2, #0
 801087a:	701a      	strb	r2, [r3, #0]
 801087c:	b01b      	add	sp, #108	@ 0x6c
 801087e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010882:	bf00      	nop
 8010884:	ffff0208 	.word	0xffff0208

08010888 <vsiprintf>:
 8010888:	4613      	mov	r3, r2
 801088a:	460a      	mov	r2, r1
 801088c:	4601      	mov	r1, r0
 801088e:	4802      	ldr	r0, [pc, #8]	@ (8010898 <vsiprintf+0x10>)
 8010890:	6800      	ldr	r0, [r0, #0]
 8010892:	f7ff bfe3 	b.w	801085c <_vsiprintf_r>
 8010896:	bf00      	nop
 8010898:	200000c0 	.word	0x200000c0

0801089c <memset>:
 801089c:	4402      	add	r2, r0
 801089e:	4603      	mov	r3, r0
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d100      	bne.n	80108a6 <memset+0xa>
 80108a4:	4770      	bx	lr
 80108a6:	f803 1b01 	strb.w	r1, [r3], #1
 80108aa:	e7f9      	b.n	80108a0 <memset+0x4>

080108ac <_localeconv_r>:
 80108ac:	4800      	ldr	r0, [pc, #0]	@ (80108b0 <_localeconv_r+0x4>)
 80108ae:	4770      	bx	lr
 80108b0:	20000200 	.word	0x20000200

080108b4 <_reclaim_reent>:
 80108b4:	4b29      	ldr	r3, [pc, #164]	@ (801095c <_reclaim_reent+0xa8>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4283      	cmp	r3, r0
 80108ba:	b570      	push	{r4, r5, r6, lr}
 80108bc:	4604      	mov	r4, r0
 80108be:	d04b      	beq.n	8010958 <_reclaim_reent+0xa4>
 80108c0:	69c3      	ldr	r3, [r0, #28]
 80108c2:	b1ab      	cbz	r3, 80108f0 <_reclaim_reent+0x3c>
 80108c4:	68db      	ldr	r3, [r3, #12]
 80108c6:	b16b      	cbz	r3, 80108e4 <_reclaim_reent+0x30>
 80108c8:	2500      	movs	r5, #0
 80108ca:	69e3      	ldr	r3, [r4, #28]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	5959      	ldr	r1, [r3, r5]
 80108d0:	2900      	cmp	r1, #0
 80108d2:	d13b      	bne.n	801094c <_reclaim_reent+0x98>
 80108d4:	3504      	adds	r5, #4
 80108d6:	2d80      	cmp	r5, #128	@ 0x80
 80108d8:	d1f7      	bne.n	80108ca <_reclaim_reent+0x16>
 80108da:	69e3      	ldr	r3, [r4, #28]
 80108dc:	4620      	mov	r0, r4
 80108de:	68d9      	ldr	r1, [r3, #12]
 80108e0:	f000 fec6 	bl	8011670 <_free_r>
 80108e4:	69e3      	ldr	r3, [r4, #28]
 80108e6:	6819      	ldr	r1, [r3, #0]
 80108e8:	b111      	cbz	r1, 80108f0 <_reclaim_reent+0x3c>
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 fec0 	bl	8011670 <_free_r>
 80108f0:	6961      	ldr	r1, [r4, #20]
 80108f2:	b111      	cbz	r1, 80108fa <_reclaim_reent+0x46>
 80108f4:	4620      	mov	r0, r4
 80108f6:	f000 febb 	bl	8011670 <_free_r>
 80108fa:	69e1      	ldr	r1, [r4, #28]
 80108fc:	b111      	cbz	r1, 8010904 <_reclaim_reent+0x50>
 80108fe:	4620      	mov	r0, r4
 8010900:	f000 feb6 	bl	8011670 <_free_r>
 8010904:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010906:	b111      	cbz	r1, 801090e <_reclaim_reent+0x5a>
 8010908:	4620      	mov	r0, r4
 801090a:	f000 feb1 	bl	8011670 <_free_r>
 801090e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010910:	b111      	cbz	r1, 8010918 <_reclaim_reent+0x64>
 8010912:	4620      	mov	r0, r4
 8010914:	f000 feac 	bl	8011670 <_free_r>
 8010918:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801091a:	b111      	cbz	r1, 8010922 <_reclaim_reent+0x6e>
 801091c:	4620      	mov	r0, r4
 801091e:	f000 fea7 	bl	8011670 <_free_r>
 8010922:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010924:	b111      	cbz	r1, 801092c <_reclaim_reent+0x78>
 8010926:	4620      	mov	r0, r4
 8010928:	f000 fea2 	bl	8011670 <_free_r>
 801092c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801092e:	b111      	cbz	r1, 8010936 <_reclaim_reent+0x82>
 8010930:	4620      	mov	r0, r4
 8010932:	f000 fe9d 	bl	8011670 <_free_r>
 8010936:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010938:	b111      	cbz	r1, 8010940 <_reclaim_reent+0x8c>
 801093a:	4620      	mov	r0, r4
 801093c:	f000 fe98 	bl	8011670 <_free_r>
 8010940:	6a23      	ldr	r3, [r4, #32]
 8010942:	b14b      	cbz	r3, 8010958 <_reclaim_reent+0xa4>
 8010944:	4620      	mov	r0, r4
 8010946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801094a:	4718      	bx	r3
 801094c:	680e      	ldr	r6, [r1, #0]
 801094e:	4620      	mov	r0, r4
 8010950:	f000 fe8e 	bl	8011670 <_free_r>
 8010954:	4631      	mov	r1, r6
 8010956:	e7bb      	b.n	80108d0 <_reclaim_reent+0x1c>
 8010958:	bd70      	pop	{r4, r5, r6, pc}
 801095a:	bf00      	nop
 801095c:	200000c0 	.word	0x200000c0

08010960 <__errno>:
 8010960:	4b01      	ldr	r3, [pc, #4]	@ (8010968 <__errno+0x8>)
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop
 8010968:	200000c0 	.word	0x200000c0

0801096c <__libc_init_array>:
 801096c:	b570      	push	{r4, r5, r6, lr}
 801096e:	4d0d      	ldr	r5, [pc, #52]	@ (80109a4 <__libc_init_array+0x38>)
 8010970:	4c0d      	ldr	r4, [pc, #52]	@ (80109a8 <__libc_init_array+0x3c>)
 8010972:	1b64      	subs	r4, r4, r5
 8010974:	10a4      	asrs	r4, r4, #2
 8010976:	2600      	movs	r6, #0
 8010978:	42a6      	cmp	r6, r4
 801097a:	d109      	bne.n	8010990 <__libc_init_array+0x24>
 801097c:	4d0b      	ldr	r5, [pc, #44]	@ (80109ac <__libc_init_array+0x40>)
 801097e:	4c0c      	ldr	r4, [pc, #48]	@ (80109b0 <__libc_init_array+0x44>)
 8010980:	f003 f972 	bl	8013c68 <_init>
 8010984:	1b64      	subs	r4, r4, r5
 8010986:	10a4      	asrs	r4, r4, #2
 8010988:	2600      	movs	r6, #0
 801098a:	42a6      	cmp	r6, r4
 801098c:	d105      	bne.n	801099a <__libc_init_array+0x2e>
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	f855 3b04 	ldr.w	r3, [r5], #4
 8010994:	4798      	blx	r3
 8010996:	3601      	adds	r6, #1
 8010998:	e7ee      	b.n	8010978 <__libc_init_array+0xc>
 801099a:	f855 3b04 	ldr.w	r3, [r5], #4
 801099e:	4798      	blx	r3
 80109a0:	3601      	adds	r6, #1
 80109a2:	e7f2      	b.n	801098a <__libc_init_array+0x1e>
 80109a4:	08014458 	.word	0x08014458
 80109a8:	08014458 	.word	0x08014458
 80109ac:	08014458 	.word	0x08014458
 80109b0:	0801445c 	.word	0x0801445c

080109b4 <__retarget_lock_init_recursive>:
 80109b4:	4770      	bx	lr

080109b6 <__retarget_lock_acquire_recursive>:
 80109b6:	4770      	bx	lr

080109b8 <__retarget_lock_release_recursive>:
 80109b8:	4770      	bx	lr

080109ba <memcpy>:
 80109ba:	440a      	add	r2, r1
 80109bc:	4291      	cmp	r1, r2
 80109be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80109c2:	d100      	bne.n	80109c6 <memcpy+0xc>
 80109c4:	4770      	bx	lr
 80109c6:	b510      	push	{r4, lr}
 80109c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109d0:	4291      	cmp	r1, r2
 80109d2:	d1f9      	bne.n	80109c8 <memcpy+0xe>
 80109d4:	bd10      	pop	{r4, pc}

080109d6 <quorem>:
 80109d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109da:	6903      	ldr	r3, [r0, #16]
 80109dc:	690c      	ldr	r4, [r1, #16]
 80109de:	42a3      	cmp	r3, r4
 80109e0:	4607      	mov	r7, r0
 80109e2:	db7e      	blt.n	8010ae2 <quorem+0x10c>
 80109e4:	3c01      	subs	r4, #1
 80109e6:	f101 0814 	add.w	r8, r1, #20
 80109ea:	00a3      	lsls	r3, r4, #2
 80109ec:	f100 0514 	add.w	r5, r0, #20
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109f6:	9301      	str	r3, [sp, #4]
 80109f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80109fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a00:	3301      	adds	r3, #1
 8010a02:	429a      	cmp	r2, r3
 8010a04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a08:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a0c:	d32e      	bcc.n	8010a6c <quorem+0x96>
 8010a0e:	f04f 0a00 	mov.w	sl, #0
 8010a12:	46c4      	mov	ip, r8
 8010a14:	46ae      	mov	lr, r5
 8010a16:	46d3      	mov	fp, sl
 8010a18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010a1c:	b298      	uxth	r0, r3
 8010a1e:	fb06 a000 	mla	r0, r6, r0, sl
 8010a22:	0c02      	lsrs	r2, r0, #16
 8010a24:	0c1b      	lsrs	r3, r3, #16
 8010a26:	fb06 2303 	mla	r3, r6, r3, r2
 8010a2a:	f8de 2000 	ldr.w	r2, [lr]
 8010a2e:	b280      	uxth	r0, r0
 8010a30:	b292      	uxth	r2, r2
 8010a32:	1a12      	subs	r2, r2, r0
 8010a34:	445a      	add	r2, fp
 8010a36:	f8de 0000 	ldr.w	r0, [lr]
 8010a3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010a44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010a48:	b292      	uxth	r2, r2
 8010a4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010a4e:	45e1      	cmp	r9, ip
 8010a50:	f84e 2b04 	str.w	r2, [lr], #4
 8010a54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010a58:	d2de      	bcs.n	8010a18 <quorem+0x42>
 8010a5a:	9b00      	ldr	r3, [sp, #0]
 8010a5c:	58eb      	ldr	r3, [r5, r3]
 8010a5e:	b92b      	cbnz	r3, 8010a6c <quorem+0x96>
 8010a60:	9b01      	ldr	r3, [sp, #4]
 8010a62:	3b04      	subs	r3, #4
 8010a64:	429d      	cmp	r5, r3
 8010a66:	461a      	mov	r2, r3
 8010a68:	d32f      	bcc.n	8010aca <quorem+0xf4>
 8010a6a:	613c      	str	r4, [r7, #16]
 8010a6c:	4638      	mov	r0, r7
 8010a6e:	f001 fb7d 	bl	801216c <__mcmp>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	db25      	blt.n	8010ac2 <quorem+0xec>
 8010a76:	4629      	mov	r1, r5
 8010a78:	2000      	movs	r0, #0
 8010a7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a7e:	f8d1 c000 	ldr.w	ip, [r1]
 8010a82:	fa1f fe82 	uxth.w	lr, r2
 8010a86:	fa1f f38c 	uxth.w	r3, ip
 8010a8a:	eba3 030e 	sub.w	r3, r3, lr
 8010a8e:	4403      	add	r3, r0
 8010a90:	0c12      	lsrs	r2, r2, #16
 8010a92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010a96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010aa0:	45c1      	cmp	r9, r8
 8010aa2:	f841 3b04 	str.w	r3, [r1], #4
 8010aa6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010aaa:	d2e6      	bcs.n	8010a7a <quorem+0xa4>
 8010aac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ab4:	b922      	cbnz	r2, 8010ac0 <quorem+0xea>
 8010ab6:	3b04      	subs	r3, #4
 8010ab8:	429d      	cmp	r5, r3
 8010aba:	461a      	mov	r2, r3
 8010abc:	d30b      	bcc.n	8010ad6 <quorem+0x100>
 8010abe:	613c      	str	r4, [r7, #16]
 8010ac0:	3601      	adds	r6, #1
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	b003      	add	sp, #12
 8010ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aca:	6812      	ldr	r2, [r2, #0]
 8010acc:	3b04      	subs	r3, #4
 8010ace:	2a00      	cmp	r2, #0
 8010ad0:	d1cb      	bne.n	8010a6a <quorem+0x94>
 8010ad2:	3c01      	subs	r4, #1
 8010ad4:	e7c6      	b.n	8010a64 <quorem+0x8e>
 8010ad6:	6812      	ldr	r2, [r2, #0]
 8010ad8:	3b04      	subs	r3, #4
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	d1ef      	bne.n	8010abe <quorem+0xe8>
 8010ade:	3c01      	subs	r4, #1
 8010ae0:	e7ea      	b.n	8010ab8 <quorem+0xe2>
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	e7ee      	b.n	8010ac4 <quorem+0xee>
	...

08010ae8 <_dtoa_r>:
 8010ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aec:	69c7      	ldr	r7, [r0, #28]
 8010aee:	b099      	sub	sp, #100	@ 0x64
 8010af0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010af4:	ec55 4b10 	vmov	r4, r5, d0
 8010af8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8010afc:	4683      	mov	fp, r0
 8010afe:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b02:	b97f      	cbnz	r7, 8010b24 <_dtoa_r+0x3c>
 8010b04:	2010      	movs	r0, #16
 8010b06:	f000 ff55 	bl	80119b4 <malloc>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010b10:	b920      	cbnz	r0, 8010b1c <_dtoa_r+0x34>
 8010b12:	4ba7      	ldr	r3, [pc, #668]	@ (8010db0 <_dtoa_r+0x2c8>)
 8010b14:	21ef      	movs	r1, #239	@ 0xef
 8010b16:	48a7      	ldr	r0, [pc, #668]	@ (8010db4 <_dtoa_r+0x2cc>)
 8010b18:	f001 fd12 	bl	8012540 <__assert_func>
 8010b1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010b20:	6007      	str	r7, [r0, #0]
 8010b22:	60c7      	str	r7, [r0, #12]
 8010b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010b28:	6819      	ldr	r1, [r3, #0]
 8010b2a:	b159      	cbz	r1, 8010b44 <_dtoa_r+0x5c>
 8010b2c:	685a      	ldr	r2, [r3, #4]
 8010b2e:	604a      	str	r2, [r1, #4]
 8010b30:	2301      	movs	r3, #1
 8010b32:	4093      	lsls	r3, r2
 8010b34:	608b      	str	r3, [r1, #8]
 8010b36:	4658      	mov	r0, fp
 8010b38:	f001 f8de 	bl	8011cf8 <_Bfree>
 8010b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010b40:	2200      	movs	r2, #0
 8010b42:	601a      	str	r2, [r3, #0]
 8010b44:	1e2b      	subs	r3, r5, #0
 8010b46:	bfb9      	ittee	lt
 8010b48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010b4c:	9303      	strlt	r3, [sp, #12]
 8010b4e:	2300      	movge	r3, #0
 8010b50:	6033      	strge	r3, [r6, #0]
 8010b52:	9f03      	ldr	r7, [sp, #12]
 8010b54:	4b98      	ldr	r3, [pc, #608]	@ (8010db8 <_dtoa_r+0x2d0>)
 8010b56:	bfbc      	itt	lt
 8010b58:	2201      	movlt	r2, #1
 8010b5a:	6032      	strlt	r2, [r6, #0]
 8010b5c:	43bb      	bics	r3, r7
 8010b5e:	d112      	bne.n	8010b86 <_dtoa_r+0x9e>
 8010b60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010b62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010b6c:	4323      	orrs	r3, r4
 8010b6e:	f000 854d 	beq.w	801160c <_dtoa_r+0xb24>
 8010b72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010dcc <_dtoa_r+0x2e4>
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f000 854f 	beq.w	801161c <_dtoa_r+0xb34>
 8010b7e:	f10a 0303 	add.w	r3, sl, #3
 8010b82:	f000 bd49 	b.w	8011618 <_dtoa_r+0xb30>
 8010b86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	ec51 0b17 	vmov	r0, r1, d7
 8010b90:	2300      	movs	r3, #0
 8010b92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010b96:	f7ef ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b9a:	4680      	mov	r8, r0
 8010b9c:	b158      	cbz	r0, 8010bb6 <_dtoa_r+0xce>
 8010b9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	6013      	str	r3, [r2, #0]
 8010ba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ba6:	b113      	cbz	r3, 8010bae <_dtoa_r+0xc6>
 8010ba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010baa:	4b84      	ldr	r3, [pc, #528]	@ (8010dbc <_dtoa_r+0x2d4>)
 8010bac:	6013      	str	r3, [r2, #0]
 8010bae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010dd0 <_dtoa_r+0x2e8>
 8010bb2:	f000 bd33 	b.w	801161c <_dtoa_r+0xb34>
 8010bb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010bba:	aa16      	add	r2, sp, #88	@ 0x58
 8010bbc:	a917      	add	r1, sp, #92	@ 0x5c
 8010bbe:	4658      	mov	r0, fp
 8010bc0:	f001 fb84 	bl	80122cc <__d2b>
 8010bc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010bc8:	4681      	mov	r9, r0
 8010bca:	2e00      	cmp	r6, #0
 8010bcc:	d077      	beq.n	8010cbe <_dtoa_r+0x1d6>
 8010bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010bd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010bdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010be0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010be4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010be8:	4619      	mov	r1, r3
 8010bea:	2200      	movs	r2, #0
 8010bec:	4b74      	ldr	r3, [pc, #464]	@ (8010dc0 <_dtoa_r+0x2d8>)
 8010bee:	f7ef fb4b 	bl	8000288 <__aeabi_dsub>
 8010bf2:	a369      	add	r3, pc, #420	@ (adr r3, 8010d98 <_dtoa_r+0x2b0>)
 8010bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf8:	f7ef fcfe 	bl	80005f8 <__aeabi_dmul>
 8010bfc:	a368      	add	r3, pc, #416	@ (adr r3, 8010da0 <_dtoa_r+0x2b8>)
 8010bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c02:	f7ef fb43 	bl	800028c <__adddf3>
 8010c06:	4604      	mov	r4, r0
 8010c08:	4630      	mov	r0, r6
 8010c0a:	460d      	mov	r5, r1
 8010c0c:	f7ef fc8a 	bl	8000524 <__aeabi_i2d>
 8010c10:	a365      	add	r3, pc, #404	@ (adr r3, 8010da8 <_dtoa_r+0x2c0>)
 8010c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c16:	f7ef fcef 	bl	80005f8 <__aeabi_dmul>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	4620      	mov	r0, r4
 8010c20:	4629      	mov	r1, r5
 8010c22:	f7ef fb33 	bl	800028c <__adddf3>
 8010c26:	4604      	mov	r4, r0
 8010c28:	460d      	mov	r5, r1
 8010c2a:	f7ef ff95 	bl	8000b58 <__aeabi_d2iz>
 8010c2e:	2200      	movs	r2, #0
 8010c30:	4607      	mov	r7, r0
 8010c32:	2300      	movs	r3, #0
 8010c34:	4620      	mov	r0, r4
 8010c36:	4629      	mov	r1, r5
 8010c38:	f7ef ff50 	bl	8000adc <__aeabi_dcmplt>
 8010c3c:	b140      	cbz	r0, 8010c50 <_dtoa_r+0x168>
 8010c3e:	4638      	mov	r0, r7
 8010c40:	f7ef fc70 	bl	8000524 <__aeabi_i2d>
 8010c44:	4622      	mov	r2, r4
 8010c46:	462b      	mov	r3, r5
 8010c48:	f7ef ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c4c:	b900      	cbnz	r0, 8010c50 <_dtoa_r+0x168>
 8010c4e:	3f01      	subs	r7, #1
 8010c50:	2f16      	cmp	r7, #22
 8010c52:	d851      	bhi.n	8010cf8 <_dtoa_r+0x210>
 8010c54:	4b5b      	ldr	r3, [pc, #364]	@ (8010dc4 <_dtoa_r+0x2dc>)
 8010c56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c62:	f7ef ff3b 	bl	8000adc <__aeabi_dcmplt>
 8010c66:	2800      	cmp	r0, #0
 8010c68:	d048      	beq.n	8010cfc <_dtoa_r+0x214>
 8010c6a:	3f01      	subs	r7, #1
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010c70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010c72:	1b9b      	subs	r3, r3, r6
 8010c74:	1e5a      	subs	r2, r3, #1
 8010c76:	bf44      	itt	mi
 8010c78:	f1c3 0801 	rsbmi	r8, r3, #1
 8010c7c:	2300      	movmi	r3, #0
 8010c7e:	9208      	str	r2, [sp, #32]
 8010c80:	bf54      	ite	pl
 8010c82:	f04f 0800 	movpl.w	r8, #0
 8010c86:	9308      	strmi	r3, [sp, #32]
 8010c88:	2f00      	cmp	r7, #0
 8010c8a:	db39      	blt.n	8010d00 <_dtoa_r+0x218>
 8010c8c:	9b08      	ldr	r3, [sp, #32]
 8010c8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010c90:	443b      	add	r3, r7
 8010c92:	9308      	str	r3, [sp, #32]
 8010c94:	2300      	movs	r3, #0
 8010c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c9a:	2b09      	cmp	r3, #9
 8010c9c:	d864      	bhi.n	8010d68 <_dtoa_r+0x280>
 8010c9e:	2b05      	cmp	r3, #5
 8010ca0:	bfc4      	itt	gt
 8010ca2:	3b04      	subgt	r3, #4
 8010ca4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8010cac:	bfcc      	ite	gt
 8010cae:	2400      	movgt	r4, #0
 8010cb0:	2401      	movle	r4, #1
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d863      	bhi.n	8010d7e <_dtoa_r+0x296>
 8010cb6:	e8df f003 	tbb	[pc, r3]
 8010cba:	372a      	.short	0x372a
 8010cbc:	5535      	.short	0x5535
 8010cbe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010cc2:	441e      	add	r6, r3
 8010cc4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010cc8:	2b20      	cmp	r3, #32
 8010cca:	bfc1      	itttt	gt
 8010ccc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010cd0:	409f      	lslgt	r7, r3
 8010cd2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010cd6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010cda:	bfd6      	itet	le
 8010cdc:	f1c3 0320 	rsble	r3, r3, #32
 8010ce0:	ea47 0003 	orrgt.w	r0, r7, r3
 8010ce4:	fa04 f003 	lslle.w	r0, r4, r3
 8010ce8:	f7ef fc0c 	bl	8000504 <__aeabi_ui2d>
 8010cec:	2201      	movs	r2, #1
 8010cee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010cf2:	3e01      	subs	r6, #1
 8010cf4:	9214      	str	r2, [sp, #80]	@ 0x50
 8010cf6:	e777      	b.n	8010be8 <_dtoa_r+0x100>
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e7b8      	b.n	8010c6e <_dtoa_r+0x186>
 8010cfc:	9012      	str	r0, [sp, #72]	@ 0x48
 8010cfe:	e7b7      	b.n	8010c70 <_dtoa_r+0x188>
 8010d00:	427b      	negs	r3, r7
 8010d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d04:	2300      	movs	r3, #0
 8010d06:	eba8 0807 	sub.w	r8, r8, r7
 8010d0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d0c:	e7c4      	b.n	8010c98 <_dtoa_r+0x1b0>
 8010d0e:	2300      	movs	r3, #0
 8010d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	dc35      	bgt.n	8010d84 <_dtoa_r+0x29c>
 8010d18:	2301      	movs	r3, #1
 8010d1a:	9300      	str	r3, [sp, #0]
 8010d1c:	9307      	str	r3, [sp, #28]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d22:	e00b      	b.n	8010d3c <_dtoa_r+0x254>
 8010d24:	2301      	movs	r3, #1
 8010d26:	e7f3      	b.n	8010d10 <_dtoa_r+0x228>
 8010d28:	2300      	movs	r3, #0
 8010d2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d2e:	18fb      	adds	r3, r7, r3
 8010d30:	9300      	str	r3, [sp, #0]
 8010d32:	3301      	adds	r3, #1
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	9307      	str	r3, [sp, #28]
 8010d38:	bfb8      	it	lt
 8010d3a:	2301      	movlt	r3, #1
 8010d3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010d40:	2100      	movs	r1, #0
 8010d42:	2204      	movs	r2, #4
 8010d44:	f102 0514 	add.w	r5, r2, #20
 8010d48:	429d      	cmp	r5, r3
 8010d4a:	d91f      	bls.n	8010d8c <_dtoa_r+0x2a4>
 8010d4c:	6041      	str	r1, [r0, #4]
 8010d4e:	4658      	mov	r0, fp
 8010d50:	f000 ff92 	bl	8011c78 <_Balloc>
 8010d54:	4682      	mov	sl, r0
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d13c      	bne.n	8010dd4 <_dtoa_r+0x2ec>
 8010d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8010dc8 <_dtoa_r+0x2e0>)
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010d62:	e6d8      	b.n	8010b16 <_dtoa_r+0x2e>
 8010d64:	2301      	movs	r3, #1
 8010d66:	e7e0      	b.n	8010d2a <_dtoa_r+0x242>
 8010d68:	2401      	movs	r4, #1
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	9307      	str	r3, [sp, #28]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	2312      	movs	r3, #18
 8010d7c:	e7d0      	b.n	8010d20 <_dtoa_r+0x238>
 8010d7e:	2301      	movs	r3, #1
 8010d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d82:	e7f5      	b.n	8010d70 <_dtoa_r+0x288>
 8010d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d86:	9300      	str	r3, [sp, #0]
 8010d88:	9307      	str	r3, [sp, #28]
 8010d8a:	e7d7      	b.n	8010d3c <_dtoa_r+0x254>
 8010d8c:	3101      	adds	r1, #1
 8010d8e:	0052      	lsls	r2, r2, #1
 8010d90:	e7d8      	b.n	8010d44 <_dtoa_r+0x25c>
 8010d92:	bf00      	nop
 8010d94:	f3af 8000 	nop.w
 8010d98:	636f4361 	.word	0x636f4361
 8010d9c:	3fd287a7 	.word	0x3fd287a7
 8010da0:	8b60c8b3 	.word	0x8b60c8b3
 8010da4:	3fc68a28 	.word	0x3fc68a28
 8010da8:	509f79fb 	.word	0x509f79fb
 8010dac:	3fd34413 	.word	0x3fd34413
 8010db0:	08013f49 	.word	0x08013f49
 8010db4:	08013f60 	.word	0x08013f60
 8010db8:	7ff00000 	.word	0x7ff00000
 8010dbc:	08013f19 	.word	0x08013f19
 8010dc0:	3ff80000 	.word	0x3ff80000
 8010dc4:	08014068 	.word	0x08014068
 8010dc8:	08013fb8 	.word	0x08013fb8
 8010dcc:	08013f45 	.word	0x08013f45
 8010dd0:	08013f18 	.word	0x08013f18
 8010dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010dd8:	6018      	str	r0, [r3, #0]
 8010dda:	9b07      	ldr	r3, [sp, #28]
 8010ddc:	2b0e      	cmp	r3, #14
 8010dde:	f200 80a4 	bhi.w	8010f2a <_dtoa_r+0x442>
 8010de2:	2c00      	cmp	r4, #0
 8010de4:	f000 80a1 	beq.w	8010f2a <_dtoa_r+0x442>
 8010de8:	2f00      	cmp	r7, #0
 8010dea:	dd33      	ble.n	8010e54 <_dtoa_r+0x36c>
 8010dec:	4bad      	ldr	r3, [pc, #692]	@ (80110a4 <_dtoa_r+0x5bc>)
 8010dee:	f007 020f 	and.w	r2, r7, #15
 8010df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010df6:	ed93 7b00 	vldr	d7, [r3]
 8010dfa:	05f8      	lsls	r0, r7, #23
 8010dfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010e04:	d516      	bpl.n	8010e34 <_dtoa_r+0x34c>
 8010e06:	4ba8      	ldr	r3, [pc, #672]	@ (80110a8 <_dtoa_r+0x5c0>)
 8010e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e10:	f7ef fd1c 	bl	800084c <__aeabi_ddiv>
 8010e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e18:	f004 040f 	and.w	r4, r4, #15
 8010e1c:	2603      	movs	r6, #3
 8010e1e:	4da2      	ldr	r5, [pc, #648]	@ (80110a8 <_dtoa_r+0x5c0>)
 8010e20:	b954      	cbnz	r4, 8010e38 <_dtoa_r+0x350>
 8010e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e2a:	f7ef fd0f 	bl	800084c <__aeabi_ddiv>
 8010e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e32:	e028      	b.n	8010e86 <_dtoa_r+0x39e>
 8010e34:	2602      	movs	r6, #2
 8010e36:	e7f2      	b.n	8010e1e <_dtoa_r+0x336>
 8010e38:	07e1      	lsls	r1, r4, #31
 8010e3a:	d508      	bpl.n	8010e4e <_dtoa_r+0x366>
 8010e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e44:	f7ef fbd8 	bl	80005f8 <__aeabi_dmul>
 8010e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e4c:	3601      	adds	r6, #1
 8010e4e:	1064      	asrs	r4, r4, #1
 8010e50:	3508      	adds	r5, #8
 8010e52:	e7e5      	b.n	8010e20 <_dtoa_r+0x338>
 8010e54:	f000 80d2 	beq.w	8010ffc <_dtoa_r+0x514>
 8010e58:	427c      	negs	r4, r7
 8010e5a:	4b92      	ldr	r3, [pc, #584]	@ (80110a4 <_dtoa_r+0x5bc>)
 8010e5c:	4d92      	ldr	r5, [pc, #584]	@ (80110a8 <_dtoa_r+0x5c0>)
 8010e5e:	f004 020f 	and.w	r2, r4, #15
 8010e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e6e:	f7ef fbc3 	bl	80005f8 <__aeabi_dmul>
 8010e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e76:	1124      	asrs	r4, r4, #4
 8010e78:	2300      	movs	r3, #0
 8010e7a:	2602      	movs	r6, #2
 8010e7c:	2c00      	cmp	r4, #0
 8010e7e:	f040 80b2 	bne.w	8010fe6 <_dtoa_r+0x4fe>
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1d3      	bne.n	8010e2e <_dtoa_r+0x346>
 8010e86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f000 80b7 	beq.w	8011000 <_dtoa_r+0x518>
 8010e92:	4b86      	ldr	r3, [pc, #536]	@ (80110ac <_dtoa_r+0x5c4>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	4620      	mov	r0, r4
 8010e98:	4629      	mov	r1, r5
 8010e9a:	f7ef fe1f 	bl	8000adc <__aeabi_dcmplt>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	f000 80ae 	beq.w	8011000 <_dtoa_r+0x518>
 8010ea4:	9b07      	ldr	r3, [sp, #28]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	f000 80aa 	beq.w	8011000 <_dtoa_r+0x518>
 8010eac:	9b00      	ldr	r3, [sp, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	dd37      	ble.n	8010f22 <_dtoa_r+0x43a>
 8010eb2:	1e7b      	subs	r3, r7, #1
 8010eb4:	9304      	str	r3, [sp, #16]
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	4b7d      	ldr	r3, [pc, #500]	@ (80110b0 <_dtoa_r+0x5c8>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	f7ef fb9b 	bl	80005f8 <__aeabi_dmul>
 8010ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ec6:	9c00      	ldr	r4, [sp, #0]
 8010ec8:	3601      	adds	r6, #1
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f7ef fb2a 	bl	8000524 <__aeabi_i2d>
 8010ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ed4:	f7ef fb90 	bl	80005f8 <__aeabi_dmul>
 8010ed8:	4b76      	ldr	r3, [pc, #472]	@ (80110b4 <_dtoa_r+0x5cc>)
 8010eda:	2200      	movs	r2, #0
 8010edc:	f7ef f9d6 	bl	800028c <__adddf3>
 8010ee0:	4605      	mov	r5, r0
 8010ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010ee6:	2c00      	cmp	r4, #0
 8010ee8:	f040 808d 	bne.w	8011006 <_dtoa_r+0x51e>
 8010eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ef0:	4b71      	ldr	r3, [pc, #452]	@ (80110b8 <_dtoa_r+0x5d0>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	f7ef f9c8 	bl	8000288 <__aeabi_dsub>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	460b      	mov	r3, r1
 8010efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f00:	462a      	mov	r2, r5
 8010f02:	4633      	mov	r3, r6
 8010f04:	f7ef fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	f040 828b 	bne.w	8011424 <_dtoa_r+0x93c>
 8010f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f12:	462a      	mov	r2, r5
 8010f14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010f18:	f7ef fde0 	bl	8000adc <__aeabi_dcmplt>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	f040 8128 	bne.w	8011172 <_dtoa_r+0x68a>
 8010f22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010f26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f2c0 815a 	blt.w	80111e6 <_dtoa_r+0x6fe>
 8010f32:	2f0e      	cmp	r7, #14
 8010f34:	f300 8157 	bgt.w	80111e6 <_dtoa_r+0x6fe>
 8010f38:	4b5a      	ldr	r3, [pc, #360]	@ (80110a4 <_dtoa_r+0x5bc>)
 8010f3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f3e:	ed93 7b00 	vldr	d7, [r3]
 8010f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	ed8d 7b00 	vstr	d7, [sp]
 8010f4a:	da03      	bge.n	8010f54 <_dtoa_r+0x46c>
 8010f4c:	9b07      	ldr	r3, [sp, #28]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f340 8101 	ble.w	8011156 <_dtoa_r+0x66e>
 8010f54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010f58:	4656      	mov	r6, sl
 8010f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f5e:	4620      	mov	r0, r4
 8010f60:	4629      	mov	r1, r5
 8010f62:	f7ef fc73 	bl	800084c <__aeabi_ddiv>
 8010f66:	f7ef fdf7 	bl	8000b58 <__aeabi_d2iz>
 8010f6a:	4680      	mov	r8, r0
 8010f6c:	f7ef fada 	bl	8000524 <__aeabi_i2d>
 8010f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f74:	f7ef fb40 	bl	80005f8 <__aeabi_dmul>
 8010f78:	4602      	mov	r2, r0
 8010f7a:	460b      	mov	r3, r1
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	4629      	mov	r1, r5
 8010f80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010f84:	f7ef f980 	bl	8000288 <__aeabi_dsub>
 8010f88:	f806 4b01 	strb.w	r4, [r6], #1
 8010f8c:	9d07      	ldr	r5, [sp, #28]
 8010f8e:	eba6 040a 	sub.w	r4, r6, sl
 8010f92:	42a5      	cmp	r5, r4
 8010f94:	4602      	mov	r2, r0
 8010f96:	460b      	mov	r3, r1
 8010f98:	f040 8117 	bne.w	80111ca <_dtoa_r+0x6e2>
 8010f9c:	f7ef f976 	bl	800028c <__adddf3>
 8010fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	f7ef fdb6 	bl	8000b18 <__aeabi_dcmpgt>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	f040 80f9 	bne.w	80111a4 <_dtoa_r+0x6bc>
 8010fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	4629      	mov	r1, r5
 8010fba:	f7ef fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fbe:	b118      	cbz	r0, 8010fc8 <_dtoa_r+0x4e0>
 8010fc0:	f018 0f01 	tst.w	r8, #1
 8010fc4:	f040 80ee 	bne.w	80111a4 <_dtoa_r+0x6bc>
 8010fc8:	4649      	mov	r1, r9
 8010fca:	4658      	mov	r0, fp
 8010fcc:	f000 fe94 	bl	8011cf8 <_Bfree>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	7033      	strb	r3, [r6, #0]
 8010fd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010fd6:	3701      	adds	r7, #1
 8010fd8:	601f      	str	r7, [r3, #0]
 8010fda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f000 831d 	beq.w	801161c <_dtoa_r+0xb34>
 8010fe2:	601e      	str	r6, [r3, #0]
 8010fe4:	e31a      	b.n	801161c <_dtoa_r+0xb34>
 8010fe6:	07e2      	lsls	r2, r4, #31
 8010fe8:	d505      	bpl.n	8010ff6 <_dtoa_r+0x50e>
 8010fea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010fee:	f7ef fb03 	bl	80005f8 <__aeabi_dmul>
 8010ff2:	3601      	adds	r6, #1
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	1064      	asrs	r4, r4, #1
 8010ff8:	3508      	adds	r5, #8
 8010ffa:	e73f      	b.n	8010e7c <_dtoa_r+0x394>
 8010ffc:	2602      	movs	r6, #2
 8010ffe:	e742      	b.n	8010e86 <_dtoa_r+0x39e>
 8011000:	9c07      	ldr	r4, [sp, #28]
 8011002:	9704      	str	r7, [sp, #16]
 8011004:	e761      	b.n	8010eca <_dtoa_r+0x3e2>
 8011006:	4b27      	ldr	r3, [pc, #156]	@ (80110a4 <_dtoa_r+0x5bc>)
 8011008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801100a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801100e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011012:	4454      	add	r4, sl
 8011014:	2900      	cmp	r1, #0
 8011016:	d053      	beq.n	80110c0 <_dtoa_r+0x5d8>
 8011018:	4928      	ldr	r1, [pc, #160]	@ (80110bc <_dtoa_r+0x5d4>)
 801101a:	2000      	movs	r0, #0
 801101c:	f7ef fc16 	bl	800084c <__aeabi_ddiv>
 8011020:	4633      	mov	r3, r6
 8011022:	462a      	mov	r2, r5
 8011024:	f7ef f930 	bl	8000288 <__aeabi_dsub>
 8011028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801102c:	4656      	mov	r6, sl
 801102e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011032:	f7ef fd91 	bl	8000b58 <__aeabi_d2iz>
 8011036:	4605      	mov	r5, r0
 8011038:	f7ef fa74 	bl	8000524 <__aeabi_i2d>
 801103c:	4602      	mov	r2, r0
 801103e:	460b      	mov	r3, r1
 8011040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011044:	f7ef f920 	bl	8000288 <__aeabi_dsub>
 8011048:	3530      	adds	r5, #48	@ 0x30
 801104a:	4602      	mov	r2, r0
 801104c:	460b      	mov	r3, r1
 801104e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011052:	f806 5b01 	strb.w	r5, [r6], #1
 8011056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801105a:	f7ef fd3f 	bl	8000adc <__aeabi_dcmplt>
 801105e:	2800      	cmp	r0, #0
 8011060:	d171      	bne.n	8011146 <_dtoa_r+0x65e>
 8011062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011066:	4911      	ldr	r1, [pc, #68]	@ (80110ac <_dtoa_r+0x5c4>)
 8011068:	2000      	movs	r0, #0
 801106a:	f7ef f90d 	bl	8000288 <__aeabi_dsub>
 801106e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011072:	f7ef fd33 	bl	8000adc <__aeabi_dcmplt>
 8011076:	2800      	cmp	r0, #0
 8011078:	f040 8095 	bne.w	80111a6 <_dtoa_r+0x6be>
 801107c:	42a6      	cmp	r6, r4
 801107e:	f43f af50 	beq.w	8010f22 <_dtoa_r+0x43a>
 8011082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011086:	4b0a      	ldr	r3, [pc, #40]	@ (80110b0 <_dtoa_r+0x5c8>)
 8011088:	2200      	movs	r2, #0
 801108a:	f7ef fab5 	bl	80005f8 <__aeabi_dmul>
 801108e:	4b08      	ldr	r3, [pc, #32]	@ (80110b0 <_dtoa_r+0x5c8>)
 8011090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011094:	2200      	movs	r2, #0
 8011096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801109a:	f7ef faad 	bl	80005f8 <__aeabi_dmul>
 801109e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110a2:	e7c4      	b.n	801102e <_dtoa_r+0x546>
 80110a4:	08014068 	.word	0x08014068
 80110a8:	08014040 	.word	0x08014040
 80110ac:	3ff00000 	.word	0x3ff00000
 80110b0:	40240000 	.word	0x40240000
 80110b4:	401c0000 	.word	0x401c0000
 80110b8:	40140000 	.word	0x40140000
 80110bc:	3fe00000 	.word	0x3fe00000
 80110c0:	4631      	mov	r1, r6
 80110c2:	4628      	mov	r0, r5
 80110c4:	f7ef fa98 	bl	80005f8 <__aeabi_dmul>
 80110c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80110cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80110ce:	4656      	mov	r6, sl
 80110d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110d4:	f7ef fd40 	bl	8000b58 <__aeabi_d2iz>
 80110d8:	4605      	mov	r5, r0
 80110da:	f7ef fa23 	bl	8000524 <__aeabi_i2d>
 80110de:	4602      	mov	r2, r0
 80110e0:	460b      	mov	r3, r1
 80110e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110e6:	f7ef f8cf 	bl	8000288 <__aeabi_dsub>
 80110ea:	3530      	adds	r5, #48	@ 0x30
 80110ec:	f806 5b01 	strb.w	r5, [r6], #1
 80110f0:	4602      	mov	r2, r0
 80110f2:	460b      	mov	r3, r1
 80110f4:	42a6      	cmp	r6, r4
 80110f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80110fa:	f04f 0200 	mov.w	r2, #0
 80110fe:	d124      	bne.n	801114a <_dtoa_r+0x662>
 8011100:	4bac      	ldr	r3, [pc, #688]	@ (80113b4 <_dtoa_r+0x8cc>)
 8011102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011106:	f7ef f8c1 	bl	800028c <__adddf3>
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011112:	f7ef fd01 	bl	8000b18 <__aeabi_dcmpgt>
 8011116:	2800      	cmp	r0, #0
 8011118:	d145      	bne.n	80111a6 <_dtoa_r+0x6be>
 801111a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801111e:	49a5      	ldr	r1, [pc, #660]	@ (80113b4 <_dtoa_r+0x8cc>)
 8011120:	2000      	movs	r0, #0
 8011122:	f7ef f8b1 	bl	8000288 <__aeabi_dsub>
 8011126:	4602      	mov	r2, r0
 8011128:	460b      	mov	r3, r1
 801112a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801112e:	f7ef fcd5 	bl	8000adc <__aeabi_dcmplt>
 8011132:	2800      	cmp	r0, #0
 8011134:	f43f aef5 	beq.w	8010f22 <_dtoa_r+0x43a>
 8011138:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801113a:	1e73      	subs	r3, r6, #1
 801113c:	9315      	str	r3, [sp, #84]	@ 0x54
 801113e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011142:	2b30      	cmp	r3, #48	@ 0x30
 8011144:	d0f8      	beq.n	8011138 <_dtoa_r+0x650>
 8011146:	9f04      	ldr	r7, [sp, #16]
 8011148:	e73e      	b.n	8010fc8 <_dtoa_r+0x4e0>
 801114a:	4b9b      	ldr	r3, [pc, #620]	@ (80113b8 <_dtoa_r+0x8d0>)
 801114c:	f7ef fa54 	bl	80005f8 <__aeabi_dmul>
 8011150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011154:	e7bc      	b.n	80110d0 <_dtoa_r+0x5e8>
 8011156:	d10c      	bne.n	8011172 <_dtoa_r+0x68a>
 8011158:	4b98      	ldr	r3, [pc, #608]	@ (80113bc <_dtoa_r+0x8d4>)
 801115a:	2200      	movs	r2, #0
 801115c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011160:	f7ef fa4a 	bl	80005f8 <__aeabi_dmul>
 8011164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011168:	f7ef fccc 	bl	8000b04 <__aeabi_dcmpge>
 801116c:	2800      	cmp	r0, #0
 801116e:	f000 8157 	beq.w	8011420 <_dtoa_r+0x938>
 8011172:	2400      	movs	r4, #0
 8011174:	4625      	mov	r5, r4
 8011176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011178:	43db      	mvns	r3, r3
 801117a:	9304      	str	r3, [sp, #16]
 801117c:	4656      	mov	r6, sl
 801117e:	2700      	movs	r7, #0
 8011180:	4621      	mov	r1, r4
 8011182:	4658      	mov	r0, fp
 8011184:	f000 fdb8 	bl	8011cf8 <_Bfree>
 8011188:	2d00      	cmp	r5, #0
 801118a:	d0dc      	beq.n	8011146 <_dtoa_r+0x65e>
 801118c:	b12f      	cbz	r7, 801119a <_dtoa_r+0x6b2>
 801118e:	42af      	cmp	r7, r5
 8011190:	d003      	beq.n	801119a <_dtoa_r+0x6b2>
 8011192:	4639      	mov	r1, r7
 8011194:	4658      	mov	r0, fp
 8011196:	f000 fdaf 	bl	8011cf8 <_Bfree>
 801119a:	4629      	mov	r1, r5
 801119c:	4658      	mov	r0, fp
 801119e:	f000 fdab 	bl	8011cf8 <_Bfree>
 80111a2:	e7d0      	b.n	8011146 <_dtoa_r+0x65e>
 80111a4:	9704      	str	r7, [sp, #16]
 80111a6:	4633      	mov	r3, r6
 80111a8:	461e      	mov	r6, r3
 80111aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111ae:	2a39      	cmp	r2, #57	@ 0x39
 80111b0:	d107      	bne.n	80111c2 <_dtoa_r+0x6da>
 80111b2:	459a      	cmp	sl, r3
 80111b4:	d1f8      	bne.n	80111a8 <_dtoa_r+0x6c0>
 80111b6:	9a04      	ldr	r2, [sp, #16]
 80111b8:	3201      	adds	r2, #1
 80111ba:	9204      	str	r2, [sp, #16]
 80111bc:	2230      	movs	r2, #48	@ 0x30
 80111be:	f88a 2000 	strb.w	r2, [sl]
 80111c2:	781a      	ldrb	r2, [r3, #0]
 80111c4:	3201      	adds	r2, #1
 80111c6:	701a      	strb	r2, [r3, #0]
 80111c8:	e7bd      	b.n	8011146 <_dtoa_r+0x65e>
 80111ca:	4b7b      	ldr	r3, [pc, #492]	@ (80113b8 <_dtoa_r+0x8d0>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	f7ef fa13 	bl	80005f8 <__aeabi_dmul>
 80111d2:	2200      	movs	r2, #0
 80111d4:	2300      	movs	r3, #0
 80111d6:	4604      	mov	r4, r0
 80111d8:	460d      	mov	r5, r1
 80111da:	f7ef fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80111de:	2800      	cmp	r0, #0
 80111e0:	f43f aebb 	beq.w	8010f5a <_dtoa_r+0x472>
 80111e4:	e6f0      	b.n	8010fc8 <_dtoa_r+0x4e0>
 80111e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80111e8:	2a00      	cmp	r2, #0
 80111ea:	f000 80db 	beq.w	80113a4 <_dtoa_r+0x8bc>
 80111ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111f0:	2a01      	cmp	r2, #1
 80111f2:	f300 80bf 	bgt.w	8011374 <_dtoa_r+0x88c>
 80111f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80111f8:	2a00      	cmp	r2, #0
 80111fa:	f000 80b7 	beq.w	801136c <_dtoa_r+0x884>
 80111fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011202:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011204:	4646      	mov	r6, r8
 8011206:	9a08      	ldr	r2, [sp, #32]
 8011208:	2101      	movs	r1, #1
 801120a:	441a      	add	r2, r3
 801120c:	4658      	mov	r0, fp
 801120e:	4498      	add	r8, r3
 8011210:	9208      	str	r2, [sp, #32]
 8011212:	f000 fe25 	bl	8011e60 <__i2b>
 8011216:	4605      	mov	r5, r0
 8011218:	b15e      	cbz	r6, 8011232 <_dtoa_r+0x74a>
 801121a:	9b08      	ldr	r3, [sp, #32]
 801121c:	2b00      	cmp	r3, #0
 801121e:	dd08      	ble.n	8011232 <_dtoa_r+0x74a>
 8011220:	42b3      	cmp	r3, r6
 8011222:	9a08      	ldr	r2, [sp, #32]
 8011224:	bfa8      	it	ge
 8011226:	4633      	movge	r3, r6
 8011228:	eba8 0803 	sub.w	r8, r8, r3
 801122c:	1af6      	subs	r6, r6, r3
 801122e:	1ad3      	subs	r3, r2, r3
 8011230:	9308      	str	r3, [sp, #32]
 8011232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011234:	b1f3      	cbz	r3, 8011274 <_dtoa_r+0x78c>
 8011236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011238:	2b00      	cmp	r3, #0
 801123a:	f000 80b7 	beq.w	80113ac <_dtoa_r+0x8c4>
 801123e:	b18c      	cbz	r4, 8011264 <_dtoa_r+0x77c>
 8011240:	4629      	mov	r1, r5
 8011242:	4622      	mov	r2, r4
 8011244:	4658      	mov	r0, fp
 8011246:	f000 fecb 	bl	8011fe0 <__pow5mult>
 801124a:	464a      	mov	r2, r9
 801124c:	4601      	mov	r1, r0
 801124e:	4605      	mov	r5, r0
 8011250:	4658      	mov	r0, fp
 8011252:	f000 fe1b 	bl	8011e8c <__multiply>
 8011256:	4649      	mov	r1, r9
 8011258:	9004      	str	r0, [sp, #16]
 801125a:	4658      	mov	r0, fp
 801125c:	f000 fd4c 	bl	8011cf8 <_Bfree>
 8011260:	9b04      	ldr	r3, [sp, #16]
 8011262:	4699      	mov	r9, r3
 8011264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011266:	1b1a      	subs	r2, r3, r4
 8011268:	d004      	beq.n	8011274 <_dtoa_r+0x78c>
 801126a:	4649      	mov	r1, r9
 801126c:	4658      	mov	r0, fp
 801126e:	f000 feb7 	bl	8011fe0 <__pow5mult>
 8011272:	4681      	mov	r9, r0
 8011274:	2101      	movs	r1, #1
 8011276:	4658      	mov	r0, fp
 8011278:	f000 fdf2 	bl	8011e60 <__i2b>
 801127c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801127e:	4604      	mov	r4, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 81cf 	beq.w	8011624 <_dtoa_r+0xb3c>
 8011286:	461a      	mov	r2, r3
 8011288:	4601      	mov	r1, r0
 801128a:	4658      	mov	r0, fp
 801128c:	f000 fea8 	bl	8011fe0 <__pow5mult>
 8011290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011292:	2b01      	cmp	r3, #1
 8011294:	4604      	mov	r4, r0
 8011296:	f300 8095 	bgt.w	80113c4 <_dtoa_r+0x8dc>
 801129a:	9b02      	ldr	r3, [sp, #8]
 801129c:	2b00      	cmp	r3, #0
 801129e:	f040 8087 	bne.w	80113b0 <_dtoa_r+0x8c8>
 80112a2:	9b03      	ldr	r3, [sp, #12]
 80112a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f040 8089 	bne.w	80113c0 <_dtoa_r+0x8d8>
 80112ae:	9b03      	ldr	r3, [sp, #12]
 80112b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80112b4:	0d1b      	lsrs	r3, r3, #20
 80112b6:	051b      	lsls	r3, r3, #20
 80112b8:	b12b      	cbz	r3, 80112c6 <_dtoa_r+0x7de>
 80112ba:	9b08      	ldr	r3, [sp, #32]
 80112bc:	3301      	adds	r3, #1
 80112be:	9308      	str	r3, [sp, #32]
 80112c0:	f108 0801 	add.w	r8, r8, #1
 80112c4:	2301      	movs	r3, #1
 80112c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80112c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 81b0 	beq.w	8011630 <_dtoa_r+0xb48>
 80112d0:	6923      	ldr	r3, [r4, #16]
 80112d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80112d6:	6918      	ldr	r0, [r3, #16]
 80112d8:	f000 fd76 	bl	8011dc8 <__hi0bits>
 80112dc:	f1c0 0020 	rsb	r0, r0, #32
 80112e0:	9b08      	ldr	r3, [sp, #32]
 80112e2:	4418      	add	r0, r3
 80112e4:	f010 001f 	ands.w	r0, r0, #31
 80112e8:	d077      	beq.n	80113da <_dtoa_r+0x8f2>
 80112ea:	f1c0 0320 	rsb	r3, r0, #32
 80112ee:	2b04      	cmp	r3, #4
 80112f0:	dd6b      	ble.n	80113ca <_dtoa_r+0x8e2>
 80112f2:	9b08      	ldr	r3, [sp, #32]
 80112f4:	f1c0 001c 	rsb	r0, r0, #28
 80112f8:	4403      	add	r3, r0
 80112fa:	4480      	add	r8, r0
 80112fc:	4406      	add	r6, r0
 80112fe:	9308      	str	r3, [sp, #32]
 8011300:	f1b8 0f00 	cmp.w	r8, #0
 8011304:	dd05      	ble.n	8011312 <_dtoa_r+0x82a>
 8011306:	4649      	mov	r1, r9
 8011308:	4642      	mov	r2, r8
 801130a:	4658      	mov	r0, fp
 801130c:	f000 fec2 	bl	8012094 <__lshift>
 8011310:	4681      	mov	r9, r0
 8011312:	9b08      	ldr	r3, [sp, #32]
 8011314:	2b00      	cmp	r3, #0
 8011316:	dd05      	ble.n	8011324 <_dtoa_r+0x83c>
 8011318:	4621      	mov	r1, r4
 801131a:	461a      	mov	r2, r3
 801131c:	4658      	mov	r0, fp
 801131e:	f000 feb9 	bl	8012094 <__lshift>
 8011322:	4604      	mov	r4, r0
 8011324:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011326:	2b00      	cmp	r3, #0
 8011328:	d059      	beq.n	80113de <_dtoa_r+0x8f6>
 801132a:	4621      	mov	r1, r4
 801132c:	4648      	mov	r0, r9
 801132e:	f000 ff1d 	bl	801216c <__mcmp>
 8011332:	2800      	cmp	r0, #0
 8011334:	da53      	bge.n	80113de <_dtoa_r+0x8f6>
 8011336:	1e7b      	subs	r3, r7, #1
 8011338:	9304      	str	r3, [sp, #16]
 801133a:	4649      	mov	r1, r9
 801133c:	2300      	movs	r3, #0
 801133e:	220a      	movs	r2, #10
 8011340:	4658      	mov	r0, fp
 8011342:	f000 fcfb 	bl	8011d3c <__multadd>
 8011346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011348:	4681      	mov	r9, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	f000 8172 	beq.w	8011634 <_dtoa_r+0xb4c>
 8011350:	2300      	movs	r3, #0
 8011352:	4629      	mov	r1, r5
 8011354:	220a      	movs	r2, #10
 8011356:	4658      	mov	r0, fp
 8011358:	f000 fcf0 	bl	8011d3c <__multadd>
 801135c:	9b00      	ldr	r3, [sp, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	4605      	mov	r5, r0
 8011362:	dc67      	bgt.n	8011434 <_dtoa_r+0x94c>
 8011364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011366:	2b02      	cmp	r3, #2
 8011368:	dc41      	bgt.n	80113ee <_dtoa_r+0x906>
 801136a:	e063      	b.n	8011434 <_dtoa_r+0x94c>
 801136c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801136e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011372:	e746      	b.n	8011202 <_dtoa_r+0x71a>
 8011374:	9b07      	ldr	r3, [sp, #28]
 8011376:	1e5c      	subs	r4, r3, #1
 8011378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801137a:	42a3      	cmp	r3, r4
 801137c:	bfbf      	itttt	lt
 801137e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011380:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011382:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011384:	1ae3      	sublt	r3, r4, r3
 8011386:	bfb4      	ite	lt
 8011388:	18d2      	addlt	r2, r2, r3
 801138a:	1b1c      	subge	r4, r3, r4
 801138c:	9b07      	ldr	r3, [sp, #28]
 801138e:	bfbc      	itt	lt
 8011390:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011392:	2400      	movlt	r4, #0
 8011394:	2b00      	cmp	r3, #0
 8011396:	bfb5      	itete	lt
 8011398:	eba8 0603 	sublt.w	r6, r8, r3
 801139c:	9b07      	ldrge	r3, [sp, #28]
 801139e:	2300      	movlt	r3, #0
 80113a0:	4646      	movge	r6, r8
 80113a2:	e730      	b.n	8011206 <_dtoa_r+0x71e>
 80113a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80113a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80113a8:	4646      	mov	r6, r8
 80113aa:	e735      	b.n	8011218 <_dtoa_r+0x730>
 80113ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113ae:	e75c      	b.n	801126a <_dtoa_r+0x782>
 80113b0:	2300      	movs	r3, #0
 80113b2:	e788      	b.n	80112c6 <_dtoa_r+0x7de>
 80113b4:	3fe00000 	.word	0x3fe00000
 80113b8:	40240000 	.word	0x40240000
 80113bc:	40140000 	.word	0x40140000
 80113c0:	9b02      	ldr	r3, [sp, #8]
 80113c2:	e780      	b.n	80112c6 <_dtoa_r+0x7de>
 80113c4:	2300      	movs	r3, #0
 80113c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80113c8:	e782      	b.n	80112d0 <_dtoa_r+0x7e8>
 80113ca:	d099      	beq.n	8011300 <_dtoa_r+0x818>
 80113cc:	9a08      	ldr	r2, [sp, #32]
 80113ce:	331c      	adds	r3, #28
 80113d0:	441a      	add	r2, r3
 80113d2:	4498      	add	r8, r3
 80113d4:	441e      	add	r6, r3
 80113d6:	9208      	str	r2, [sp, #32]
 80113d8:	e792      	b.n	8011300 <_dtoa_r+0x818>
 80113da:	4603      	mov	r3, r0
 80113dc:	e7f6      	b.n	80113cc <_dtoa_r+0x8e4>
 80113de:	9b07      	ldr	r3, [sp, #28]
 80113e0:	9704      	str	r7, [sp, #16]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	dc20      	bgt.n	8011428 <_dtoa_r+0x940>
 80113e6:	9300      	str	r3, [sp, #0]
 80113e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113ea:	2b02      	cmp	r3, #2
 80113ec:	dd1e      	ble.n	801142c <_dtoa_r+0x944>
 80113ee:	9b00      	ldr	r3, [sp, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f47f aec0 	bne.w	8011176 <_dtoa_r+0x68e>
 80113f6:	4621      	mov	r1, r4
 80113f8:	2205      	movs	r2, #5
 80113fa:	4658      	mov	r0, fp
 80113fc:	f000 fc9e 	bl	8011d3c <__multadd>
 8011400:	4601      	mov	r1, r0
 8011402:	4604      	mov	r4, r0
 8011404:	4648      	mov	r0, r9
 8011406:	f000 feb1 	bl	801216c <__mcmp>
 801140a:	2800      	cmp	r0, #0
 801140c:	f77f aeb3 	ble.w	8011176 <_dtoa_r+0x68e>
 8011410:	4656      	mov	r6, sl
 8011412:	2331      	movs	r3, #49	@ 0x31
 8011414:	f806 3b01 	strb.w	r3, [r6], #1
 8011418:	9b04      	ldr	r3, [sp, #16]
 801141a:	3301      	adds	r3, #1
 801141c:	9304      	str	r3, [sp, #16]
 801141e:	e6ae      	b.n	801117e <_dtoa_r+0x696>
 8011420:	9c07      	ldr	r4, [sp, #28]
 8011422:	9704      	str	r7, [sp, #16]
 8011424:	4625      	mov	r5, r4
 8011426:	e7f3      	b.n	8011410 <_dtoa_r+0x928>
 8011428:	9b07      	ldr	r3, [sp, #28]
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 8104 	beq.w	801163c <_dtoa_r+0xb54>
 8011434:	2e00      	cmp	r6, #0
 8011436:	dd05      	ble.n	8011444 <_dtoa_r+0x95c>
 8011438:	4629      	mov	r1, r5
 801143a:	4632      	mov	r2, r6
 801143c:	4658      	mov	r0, fp
 801143e:	f000 fe29 	bl	8012094 <__lshift>
 8011442:	4605      	mov	r5, r0
 8011444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011446:	2b00      	cmp	r3, #0
 8011448:	d05a      	beq.n	8011500 <_dtoa_r+0xa18>
 801144a:	6869      	ldr	r1, [r5, #4]
 801144c:	4658      	mov	r0, fp
 801144e:	f000 fc13 	bl	8011c78 <_Balloc>
 8011452:	4606      	mov	r6, r0
 8011454:	b928      	cbnz	r0, 8011462 <_dtoa_r+0x97a>
 8011456:	4b84      	ldr	r3, [pc, #528]	@ (8011668 <_dtoa_r+0xb80>)
 8011458:	4602      	mov	r2, r0
 801145a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801145e:	f7ff bb5a 	b.w	8010b16 <_dtoa_r+0x2e>
 8011462:	692a      	ldr	r2, [r5, #16]
 8011464:	3202      	adds	r2, #2
 8011466:	0092      	lsls	r2, r2, #2
 8011468:	f105 010c 	add.w	r1, r5, #12
 801146c:	300c      	adds	r0, #12
 801146e:	f7ff faa4 	bl	80109ba <memcpy>
 8011472:	2201      	movs	r2, #1
 8011474:	4631      	mov	r1, r6
 8011476:	4658      	mov	r0, fp
 8011478:	f000 fe0c 	bl	8012094 <__lshift>
 801147c:	f10a 0301 	add.w	r3, sl, #1
 8011480:	9307      	str	r3, [sp, #28]
 8011482:	9b00      	ldr	r3, [sp, #0]
 8011484:	4453      	add	r3, sl
 8011486:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011488:	9b02      	ldr	r3, [sp, #8]
 801148a:	f003 0301 	and.w	r3, r3, #1
 801148e:	462f      	mov	r7, r5
 8011490:	930a      	str	r3, [sp, #40]	@ 0x28
 8011492:	4605      	mov	r5, r0
 8011494:	9b07      	ldr	r3, [sp, #28]
 8011496:	4621      	mov	r1, r4
 8011498:	3b01      	subs	r3, #1
 801149a:	4648      	mov	r0, r9
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	f7ff fa9a 	bl	80109d6 <quorem>
 80114a2:	4639      	mov	r1, r7
 80114a4:	9002      	str	r0, [sp, #8]
 80114a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80114aa:	4648      	mov	r0, r9
 80114ac:	f000 fe5e 	bl	801216c <__mcmp>
 80114b0:	462a      	mov	r2, r5
 80114b2:	9008      	str	r0, [sp, #32]
 80114b4:	4621      	mov	r1, r4
 80114b6:	4658      	mov	r0, fp
 80114b8:	f000 fe74 	bl	80121a4 <__mdiff>
 80114bc:	68c2      	ldr	r2, [r0, #12]
 80114be:	4606      	mov	r6, r0
 80114c0:	bb02      	cbnz	r2, 8011504 <_dtoa_r+0xa1c>
 80114c2:	4601      	mov	r1, r0
 80114c4:	4648      	mov	r0, r9
 80114c6:	f000 fe51 	bl	801216c <__mcmp>
 80114ca:	4602      	mov	r2, r0
 80114cc:	4631      	mov	r1, r6
 80114ce:	4658      	mov	r0, fp
 80114d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80114d2:	f000 fc11 	bl	8011cf8 <_Bfree>
 80114d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114da:	9e07      	ldr	r6, [sp, #28]
 80114dc:	ea43 0102 	orr.w	r1, r3, r2
 80114e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114e2:	4319      	orrs	r1, r3
 80114e4:	d110      	bne.n	8011508 <_dtoa_r+0xa20>
 80114e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80114ea:	d029      	beq.n	8011540 <_dtoa_r+0xa58>
 80114ec:	9b08      	ldr	r3, [sp, #32]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	dd02      	ble.n	80114f8 <_dtoa_r+0xa10>
 80114f2:	9b02      	ldr	r3, [sp, #8]
 80114f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80114f8:	9b00      	ldr	r3, [sp, #0]
 80114fa:	f883 8000 	strb.w	r8, [r3]
 80114fe:	e63f      	b.n	8011180 <_dtoa_r+0x698>
 8011500:	4628      	mov	r0, r5
 8011502:	e7bb      	b.n	801147c <_dtoa_r+0x994>
 8011504:	2201      	movs	r2, #1
 8011506:	e7e1      	b.n	80114cc <_dtoa_r+0x9e4>
 8011508:	9b08      	ldr	r3, [sp, #32]
 801150a:	2b00      	cmp	r3, #0
 801150c:	db04      	blt.n	8011518 <_dtoa_r+0xa30>
 801150e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011510:	430b      	orrs	r3, r1
 8011512:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011514:	430b      	orrs	r3, r1
 8011516:	d120      	bne.n	801155a <_dtoa_r+0xa72>
 8011518:	2a00      	cmp	r2, #0
 801151a:	dded      	ble.n	80114f8 <_dtoa_r+0xa10>
 801151c:	4649      	mov	r1, r9
 801151e:	2201      	movs	r2, #1
 8011520:	4658      	mov	r0, fp
 8011522:	f000 fdb7 	bl	8012094 <__lshift>
 8011526:	4621      	mov	r1, r4
 8011528:	4681      	mov	r9, r0
 801152a:	f000 fe1f 	bl	801216c <__mcmp>
 801152e:	2800      	cmp	r0, #0
 8011530:	dc03      	bgt.n	801153a <_dtoa_r+0xa52>
 8011532:	d1e1      	bne.n	80114f8 <_dtoa_r+0xa10>
 8011534:	f018 0f01 	tst.w	r8, #1
 8011538:	d0de      	beq.n	80114f8 <_dtoa_r+0xa10>
 801153a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801153e:	d1d8      	bne.n	80114f2 <_dtoa_r+0xa0a>
 8011540:	9a00      	ldr	r2, [sp, #0]
 8011542:	2339      	movs	r3, #57	@ 0x39
 8011544:	7013      	strb	r3, [r2, #0]
 8011546:	4633      	mov	r3, r6
 8011548:	461e      	mov	r6, r3
 801154a:	3b01      	subs	r3, #1
 801154c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011550:	2a39      	cmp	r2, #57	@ 0x39
 8011552:	d052      	beq.n	80115fa <_dtoa_r+0xb12>
 8011554:	3201      	adds	r2, #1
 8011556:	701a      	strb	r2, [r3, #0]
 8011558:	e612      	b.n	8011180 <_dtoa_r+0x698>
 801155a:	2a00      	cmp	r2, #0
 801155c:	dd07      	ble.n	801156e <_dtoa_r+0xa86>
 801155e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011562:	d0ed      	beq.n	8011540 <_dtoa_r+0xa58>
 8011564:	9a00      	ldr	r2, [sp, #0]
 8011566:	f108 0301 	add.w	r3, r8, #1
 801156a:	7013      	strb	r3, [r2, #0]
 801156c:	e608      	b.n	8011180 <_dtoa_r+0x698>
 801156e:	9b07      	ldr	r3, [sp, #28]
 8011570:	9a07      	ldr	r2, [sp, #28]
 8011572:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011578:	4293      	cmp	r3, r2
 801157a:	d028      	beq.n	80115ce <_dtoa_r+0xae6>
 801157c:	4649      	mov	r1, r9
 801157e:	2300      	movs	r3, #0
 8011580:	220a      	movs	r2, #10
 8011582:	4658      	mov	r0, fp
 8011584:	f000 fbda 	bl	8011d3c <__multadd>
 8011588:	42af      	cmp	r7, r5
 801158a:	4681      	mov	r9, r0
 801158c:	f04f 0300 	mov.w	r3, #0
 8011590:	f04f 020a 	mov.w	r2, #10
 8011594:	4639      	mov	r1, r7
 8011596:	4658      	mov	r0, fp
 8011598:	d107      	bne.n	80115aa <_dtoa_r+0xac2>
 801159a:	f000 fbcf 	bl	8011d3c <__multadd>
 801159e:	4607      	mov	r7, r0
 80115a0:	4605      	mov	r5, r0
 80115a2:	9b07      	ldr	r3, [sp, #28]
 80115a4:	3301      	adds	r3, #1
 80115a6:	9307      	str	r3, [sp, #28]
 80115a8:	e774      	b.n	8011494 <_dtoa_r+0x9ac>
 80115aa:	f000 fbc7 	bl	8011d3c <__multadd>
 80115ae:	4629      	mov	r1, r5
 80115b0:	4607      	mov	r7, r0
 80115b2:	2300      	movs	r3, #0
 80115b4:	220a      	movs	r2, #10
 80115b6:	4658      	mov	r0, fp
 80115b8:	f000 fbc0 	bl	8011d3c <__multadd>
 80115bc:	4605      	mov	r5, r0
 80115be:	e7f0      	b.n	80115a2 <_dtoa_r+0xaba>
 80115c0:	9b00      	ldr	r3, [sp, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	bfcc      	ite	gt
 80115c6:	461e      	movgt	r6, r3
 80115c8:	2601      	movle	r6, #1
 80115ca:	4456      	add	r6, sl
 80115cc:	2700      	movs	r7, #0
 80115ce:	4649      	mov	r1, r9
 80115d0:	2201      	movs	r2, #1
 80115d2:	4658      	mov	r0, fp
 80115d4:	f000 fd5e 	bl	8012094 <__lshift>
 80115d8:	4621      	mov	r1, r4
 80115da:	4681      	mov	r9, r0
 80115dc:	f000 fdc6 	bl	801216c <__mcmp>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	dcb0      	bgt.n	8011546 <_dtoa_r+0xa5e>
 80115e4:	d102      	bne.n	80115ec <_dtoa_r+0xb04>
 80115e6:	f018 0f01 	tst.w	r8, #1
 80115ea:	d1ac      	bne.n	8011546 <_dtoa_r+0xa5e>
 80115ec:	4633      	mov	r3, r6
 80115ee:	461e      	mov	r6, r3
 80115f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115f4:	2a30      	cmp	r2, #48	@ 0x30
 80115f6:	d0fa      	beq.n	80115ee <_dtoa_r+0xb06>
 80115f8:	e5c2      	b.n	8011180 <_dtoa_r+0x698>
 80115fa:	459a      	cmp	sl, r3
 80115fc:	d1a4      	bne.n	8011548 <_dtoa_r+0xa60>
 80115fe:	9b04      	ldr	r3, [sp, #16]
 8011600:	3301      	adds	r3, #1
 8011602:	9304      	str	r3, [sp, #16]
 8011604:	2331      	movs	r3, #49	@ 0x31
 8011606:	f88a 3000 	strb.w	r3, [sl]
 801160a:	e5b9      	b.n	8011180 <_dtoa_r+0x698>
 801160c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801160e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801166c <_dtoa_r+0xb84>
 8011612:	b11b      	cbz	r3, 801161c <_dtoa_r+0xb34>
 8011614:	f10a 0308 	add.w	r3, sl, #8
 8011618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801161a:	6013      	str	r3, [r2, #0]
 801161c:	4650      	mov	r0, sl
 801161e:	b019      	add	sp, #100	@ 0x64
 8011620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011626:	2b01      	cmp	r3, #1
 8011628:	f77f ae37 	ble.w	801129a <_dtoa_r+0x7b2>
 801162c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801162e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011630:	2001      	movs	r0, #1
 8011632:	e655      	b.n	80112e0 <_dtoa_r+0x7f8>
 8011634:	9b00      	ldr	r3, [sp, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	f77f aed6 	ble.w	80113e8 <_dtoa_r+0x900>
 801163c:	4656      	mov	r6, sl
 801163e:	4621      	mov	r1, r4
 8011640:	4648      	mov	r0, r9
 8011642:	f7ff f9c8 	bl	80109d6 <quorem>
 8011646:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801164a:	f806 8b01 	strb.w	r8, [r6], #1
 801164e:	9b00      	ldr	r3, [sp, #0]
 8011650:	eba6 020a 	sub.w	r2, r6, sl
 8011654:	4293      	cmp	r3, r2
 8011656:	ddb3      	ble.n	80115c0 <_dtoa_r+0xad8>
 8011658:	4649      	mov	r1, r9
 801165a:	2300      	movs	r3, #0
 801165c:	220a      	movs	r2, #10
 801165e:	4658      	mov	r0, fp
 8011660:	f000 fb6c 	bl	8011d3c <__multadd>
 8011664:	4681      	mov	r9, r0
 8011666:	e7ea      	b.n	801163e <_dtoa_r+0xb56>
 8011668:	08013fb8 	.word	0x08013fb8
 801166c:	08013f3c 	.word	0x08013f3c

08011670 <_free_r>:
 8011670:	b538      	push	{r3, r4, r5, lr}
 8011672:	4605      	mov	r5, r0
 8011674:	2900      	cmp	r1, #0
 8011676:	d041      	beq.n	80116fc <_free_r+0x8c>
 8011678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801167c:	1f0c      	subs	r4, r1, #4
 801167e:	2b00      	cmp	r3, #0
 8011680:	bfb8      	it	lt
 8011682:	18e4      	addlt	r4, r4, r3
 8011684:	f000 faec 	bl	8011c60 <__malloc_lock>
 8011688:	4a1d      	ldr	r2, [pc, #116]	@ (8011700 <_free_r+0x90>)
 801168a:	6813      	ldr	r3, [r2, #0]
 801168c:	b933      	cbnz	r3, 801169c <_free_r+0x2c>
 801168e:	6063      	str	r3, [r4, #4]
 8011690:	6014      	str	r4, [r2, #0]
 8011692:	4628      	mov	r0, r5
 8011694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011698:	f000 bae8 	b.w	8011c6c <__malloc_unlock>
 801169c:	42a3      	cmp	r3, r4
 801169e:	d908      	bls.n	80116b2 <_free_r+0x42>
 80116a0:	6820      	ldr	r0, [r4, #0]
 80116a2:	1821      	adds	r1, r4, r0
 80116a4:	428b      	cmp	r3, r1
 80116a6:	bf01      	itttt	eq
 80116a8:	6819      	ldreq	r1, [r3, #0]
 80116aa:	685b      	ldreq	r3, [r3, #4]
 80116ac:	1809      	addeq	r1, r1, r0
 80116ae:	6021      	streq	r1, [r4, #0]
 80116b0:	e7ed      	b.n	801168e <_free_r+0x1e>
 80116b2:	461a      	mov	r2, r3
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	b10b      	cbz	r3, 80116bc <_free_r+0x4c>
 80116b8:	42a3      	cmp	r3, r4
 80116ba:	d9fa      	bls.n	80116b2 <_free_r+0x42>
 80116bc:	6811      	ldr	r1, [r2, #0]
 80116be:	1850      	adds	r0, r2, r1
 80116c0:	42a0      	cmp	r0, r4
 80116c2:	d10b      	bne.n	80116dc <_free_r+0x6c>
 80116c4:	6820      	ldr	r0, [r4, #0]
 80116c6:	4401      	add	r1, r0
 80116c8:	1850      	adds	r0, r2, r1
 80116ca:	4283      	cmp	r3, r0
 80116cc:	6011      	str	r1, [r2, #0]
 80116ce:	d1e0      	bne.n	8011692 <_free_r+0x22>
 80116d0:	6818      	ldr	r0, [r3, #0]
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	6053      	str	r3, [r2, #4]
 80116d6:	4408      	add	r0, r1
 80116d8:	6010      	str	r0, [r2, #0]
 80116da:	e7da      	b.n	8011692 <_free_r+0x22>
 80116dc:	d902      	bls.n	80116e4 <_free_r+0x74>
 80116de:	230c      	movs	r3, #12
 80116e0:	602b      	str	r3, [r5, #0]
 80116e2:	e7d6      	b.n	8011692 <_free_r+0x22>
 80116e4:	6820      	ldr	r0, [r4, #0]
 80116e6:	1821      	adds	r1, r4, r0
 80116e8:	428b      	cmp	r3, r1
 80116ea:	bf04      	itt	eq
 80116ec:	6819      	ldreq	r1, [r3, #0]
 80116ee:	685b      	ldreq	r3, [r3, #4]
 80116f0:	6063      	str	r3, [r4, #4]
 80116f2:	bf04      	itt	eq
 80116f4:	1809      	addeq	r1, r1, r0
 80116f6:	6021      	streq	r1, [r4, #0]
 80116f8:	6054      	str	r4, [r2, #4]
 80116fa:	e7ca      	b.n	8011692 <_free_r+0x22>
 80116fc:	bd38      	pop	{r3, r4, r5, pc}
 80116fe:	bf00      	nop
 8011700:	20005b44 	.word	0x20005b44

08011704 <__ssputs_r>:
 8011704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011708:	688e      	ldr	r6, [r1, #8]
 801170a:	461f      	mov	r7, r3
 801170c:	42be      	cmp	r6, r7
 801170e:	680b      	ldr	r3, [r1, #0]
 8011710:	4682      	mov	sl, r0
 8011712:	460c      	mov	r4, r1
 8011714:	4690      	mov	r8, r2
 8011716:	d82d      	bhi.n	8011774 <__ssputs_r+0x70>
 8011718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801171c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011720:	d026      	beq.n	8011770 <__ssputs_r+0x6c>
 8011722:	6965      	ldr	r5, [r4, #20]
 8011724:	6909      	ldr	r1, [r1, #16]
 8011726:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801172a:	eba3 0901 	sub.w	r9, r3, r1
 801172e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011732:	1c7b      	adds	r3, r7, #1
 8011734:	444b      	add	r3, r9
 8011736:	106d      	asrs	r5, r5, #1
 8011738:	429d      	cmp	r5, r3
 801173a:	bf38      	it	cc
 801173c:	461d      	movcc	r5, r3
 801173e:	0553      	lsls	r3, r2, #21
 8011740:	d527      	bpl.n	8011792 <__ssputs_r+0x8e>
 8011742:	4629      	mov	r1, r5
 8011744:	f000 f960 	bl	8011a08 <_malloc_r>
 8011748:	4606      	mov	r6, r0
 801174a:	b360      	cbz	r0, 80117a6 <__ssputs_r+0xa2>
 801174c:	6921      	ldr	r1, [r4, #16]
 801174e:	464a      	mov	r2, r9
 8011750:	f7ff f933 	bl	80109ba <memcpy>
 8011754:	89a3      	ldrh	r3, [r4, #12]
 8011756:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801175a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801175e:	81a3      	strh	r3, [r4, #12]
 8011760:	6126      	str	r6, [r4, #16]
 8011762:	6165      	str	r5, [r4, #20]
 8011764:	444e      	add	r6, r9
 8011766:	eba5 0509 	sub.w	r5, r5, r9
 801176a:	6026      	str	r6, [r4, #0]
 801176c:	60a5      	str	r5, [r4, #8]
 801176e:	463e      	mov	r6, r7
 8011770:	42be      	cmp	r6, r7
 8011772:	d900      	bls.n	8011776 <__ssputs_r+0x72>
 8011774:	463e      	mov	r6, r7
 8011776:	6820      	ldr	r0, [r4, #0]
 8011778:	4632      	mov	r2, r6
 801177a:	4641      	mov	r1, r8
 801177c:	f000 fe6f 	bl	801245e <memmove>
 8011780:	68a3      	ldr	r3, [r4, #8]
 8011782:	1b9b      	subs	r3, r3, r6
 8011784:	60a3      	str	r3, [r4, #8]
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	4433      	add	r3, r6
 801178a:	6023      	str	r3, [r4, #0]
 801178c:	2000      	movs	r0, #0
 801178e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011792:	462a      	mov	r2, r5
 8011794:	f000 fe35 	bl	8012402 <_realloc_r>
 8011798:	4606      	mov	r6, r0
 801179a:	2800      	cmp	r0, #0
 801179c:	d1e0      	bne.n	8011760 <__ssputs_r+0x5c>
 801179e:	6921      	ldr	r1, [r4, #16]
 80117a0:	4650      	mov	r0, sl
 80117a2:	f7ff ff65 	bl	8011670 <_free_r>
 80117a6:	230c      	movs	r3, #12
 80117a8:	f8ca 3000 	str.w	r3, [sl]
 80117ac:	89a3      	ldrh	r3, [r4, #12]
 80117ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117b2:	81a3      	strh	r3, [r4, #12]
 80117b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117b8:	e7e9      	b.n	801178e <__ssputs_r+0x8a>
	...

080117bc <_svfiprintf_r>:
 80117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c0:	4698      	mov	r8, r3
 80117c2:	898b      	ldrh	r3, [r1, #12]
 80117c4:	061b      	lsls	r3, r3, #24
 80117c6:	b09d      	sub	sp, #116	@ 0x74
 80117c8:	4607      	mov	r7, r0
 80117ca:	460d      	mov	r5, r1
 80117cc:	4614      	mov	r4, r2
 80117ce:	d510      	bpl.n	80117f2 <_svfiprintf_r+0x36>
 80117d0:	690b      	ldr	r3, [r1, #16]
 80117d2:	b973      	cbnz	r3, 80117f2 <_svfiprintf_r+0x36>
 80117d4:	2140      	movs	r1, #64	@ 0x40
 80117d6:	f000 f917 	bl	8011a08 <_malloc_r>
 80117da:	6028      	str	r0, [r5, #0]
 80117dc:	6128      	str	r0, [r5, #16]
 80117de:	b930      	cbnz	r0, 80117ee <_svfiprintf_r+0x32>
 80117e0:	230c      	movs	r3, #12
 80117e2:	603b      	str	r3, [r7, #0]
 80117e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117e8:	b01d      	add	sp, #116	@ 0x74
 80117ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ee:	2340      	movs	r3, #64	@ 0x40
 80117f0:	616b      	str	r3, [r5, #20]
 80117f2:	2300      	movs	r3, #0
 80117f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80117f6:	2320      	movs	r3, #32
 80117f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011800:	2330      	movs	r3, #48	@ 0x30
 8011802:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80119a0 <_svfiprintf_r+0x1e4>
 8011806:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801180a:	f04f 0901 	mov.w	r9, #1
 801180e:	4623      	mov	r3, r4
 8011810:	469a      	mov	sl, r3
 8011812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011816:	b10a      	cbz	r2, 801181c <_svfiprintf_r+0x60>
 8011818:	2a25      	cmp	r2, #37	@ 0x25
 801181a:	d1f9      	bne.n	8011810 <_svfiprintf_r+0x54>
 801181c:	ebba 0b04 	subs.w	fp, sl, r4
 8011820:	d00b      	beq.n	801183a <_svfiprintf_r+0x7e>
 8011822:	465b      	mov	r3, fp
 8011824:	4622      	mov	r2, r4
 8011826:	4629      	mov	r1, r5
 8011828:	4638      	mov	r0, r7
 801182a:	f7ff ff6b 	bl	8011704 <__ssputs_r>
 801182e:	3001      	adds	r0, #1
 8011830:	f000 80a7 	beq.w	8011982 <_svfiprintf_r+0x1c6>
 8011834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011836:	445a      	add	r2, fp
 8011838:	9209      	str	r2, [sp, #36]	@ 0x24
 801183a:	f89a 3000 	ldrb.w	r3, [sl]
 801183e:	2b00      	cmp	r3, #0
 8011840:	f000 809f 	beq.w	8011982 <_svfiprintf_r+0x1c6>
 8011844:	2300      	movs	r3, #0
 8011846:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801184a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801184e:	f10a 0a01 	add.w	sl, sl, #1
 8011852:	9304      	str	r3, [sp, #16]
 8011854:	9307      	str	r3, [sp, #28]
 8011856:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801185a:	931a      	str	r3, [sp, #104]	@ 0x68
 801185c:	4654      	mov	r4, sl
 801185e:	2205      	movs	r2, #5
 8011860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011864:	484e      	ldr	r0, [pc, #312]	@ (80119a0 <_svfiprintf_r+0x1e4>)
 8011866:	f7ee fcb3 	bl	80001d0 <memchr>
 801186a:	9a04      	ldr	r2, [sp, #16]
 801186c:	b9d8      	cbnz	r0, 80118a6 <_svfiprintf_r+0xea>
 801186e:	06d0      	lsls	r0, r2, #27
 8011870:	bf44      	itt	mi
 8011872:	2320      	movmi	r3, #32
 8011874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011878:	0711      	lsls	r1, r2, #28
 801187a:	bf44      	itt	mi
 801187c:	232b      	movmi	r3, #43	@ 0x2b
 801187e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011882:	f89a 3000 	ldrb.w	r3, [sl]
 8011886:	2b2a      	cmp	r3, #42	@ 0x2a
 8011888:	d015      	beq.n	80118b6 <_svfiprintf_r+0xfa>
 801188a:	9a07      	ldr	r2, [sp, #28]
 801188c:	4654      	mov	r4, sl
 801188e:	2000      	movs	r0, #0
 8011890:	f04f 0c0a 	mov.w	ip, #10
 8011894:	4621      	mov	r1, r4
 8011896:	f811 3b01 	ldrb.w	r3, [r1], #1
 801189a:	3b30      	subs	r3, #48	@ 0x30
 801189c:	2b09      	cmp	r3, #9
 801189e:	d94b      	bls.n	8011938 <_svfiprintf_r+0x17c>
 80118a0:	b1b0      	cbz	r0, 80118d0 <_svfiprintf_r+0x114>
 80118a2:	9207      	str	r2, [sp, #28]
 80118a4:	e014      	b.n	80118d0 <_svfiprintf_r+0x114>
 80118a6:	eba0 0308 	sub.w	r3, r0, r8
 80118aa:	fa09 f303 	lsl.w	r3, r9, r3
 80118ae:	4313      	orrs	r3, r2
 80118b0:	9304      	str	r3, [sp, #16]
 80118b2:	46a2      	mov	sl, r4
 80118b4:	e7d2      	b.n	801185c <_svfiprintf_r+0xa0>
 80118b6:	9b03      	ldr	r3, [sp, #12]
 80118b8:	1d19      	adds	r1, r3, #4
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	9103      	str	r1, [sp, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	bfbb      	ittet	lt
 80118c2:	425b      	neglt	r3, r3
 80118c4:	f042 0202 	orrlt.w	r2, r2, #2
 80118c8:	9307      	strge	r3, [sp, #28]
 80118ca:	9307      	strlt	r3, [sp, #28]
 80118cc:	bfb8      	it	lt
 80118ce:	9204      	strlt	r2, [sp, #16]
 80118d0:	7823      	ldrb	r3, [r4, #0]
 80118d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80118d4:	d10a      	bne.n	80118ec <_svfiprintf_r+0x130>
 80118d6:	7863      	ldrb	r3, [r4, #1]
 80118d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80118da:	d132      	bne.n	8011942 <_svfiprintf_r+0x186>
 80118dc:	9b03      	ldr	r3, [sp, #12]
 80118de:	1d1a      	adds	r2, r3, #4
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	9203      	str	r2, [sp, #12]
 80118e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80118e8:	3402      	adds	r4, #2
 80118ea:	9305      	str	r3, [sp, #20]
 80118ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80119b0 <_svfiprintf_r+0x1f4>
 80118f0:	7821      	ldrb	r1, [r4, #0]
 80118f2:	2203      	movs	r2, #3
 80118f4:	4650      	mov	r0, sl
 80118f6:	f7ee fc6b 	bl	80001d0 <memchr>
 80118fa:	b138      	cbz	r0, 801190c <_svfiprintf_r+0x150>
 80118fc:	9b04      	ldr	r3, [sp, #16]
 80118fe:	eba0 000a 	sub.w	r0, r0, sl
 8011902:	2240      	movs	r2, #64	@ 0x40
 8011904:	4082      	lsls	r2, r0
 8011906:	4313      	orrs	r3, r2
 8011908:	3401      	adds	r4, #1
 801190a:	9304      	str	r3, [sp, #16]
 801190c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011910:	4824      	ldr	r0, [pc, #144]	@ (80119a4 <_svfiprintf_r+0x1e8>)
 8011912:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011916:	2206      	movs	r2, #6
 8011918:	f7ee fc5a 	bl	80001d0 <memchr>
 801191c:	2800      	cmp	r0, #0
 801191e:	d036      	beq.n	801198e <_svfiprintf_r+0x1d2>
 8011920:	4b21      	ldr	r3, [pc, #132]	@ (80119a8 <_svfiprintf_r+0x1ec>)
 8011922:	bb1b      	cbnz	r3, 801196c <_svfiprintf_r+0x1b0>
 8011924:	9b03      	ldr	r3, [sp, #12]
 8011926:	3307      	adds	r3, #7
 8011928:	f023 0307 	bic.w	r3, r3, #7
 801192c:	3308      	adds	r3, #8
 801192e:	9303      	str	r3, [sp, #12]
 8011930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011932:	4433      	add	r3, r6
 8011934:	9309      	str	r3, [sp, #36]	@ 0x24
 8011936:	e76a      	b.n	801180e <_svfiprintf_r+0x52>
 8011938:	fb0c 3202 	mla	r2, ip, r2, r3
 801193c:	460c      	mov	r4, r1
 801193e:	2001      	movs	r0, #1
 8011940:	e7a8      	b.n	8011894 <_svfiprintf_r+0xd8>
 8011942:	2300      	movs	r3, #0
 8011944:	3401      	adds	r4, #1
 8011946:	9305      	str	r3, [sp, #20]
 8011948:	4619      	mov	r1, r3
 801194a:	f04f 0c0a 	mov.w	ip, #10
 801194e:	4620      	mov	r0, r4
 8011950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011954:	3a30      	subs	r2, #48	@ 0x30
 8011956:	2a09      	cmp	r2, #9
 8011958:	d903      	bls.n	8011962 <_svfiprintf_r+0x1a6>
 801195a:	2b00      	cmp	r3, #0
 801195c:	d0c6      	beq.n	80118ec <_svfiprintf_r+0x130>
 801195e:	9105      	str	r1, [sp, #20]
 8011960:	e7c4      	b.n	80118ec <_svfiprintf_r+0x130>
 8011962:	fb0c 2101 	mla	r1, ip, r1, r2
 8011966:	4604      	mov	r4, r0
 8011968:	2301      	movs	r3, #1
 801196a:	e7f0      	b.n	801194e <_svfiprintf_r+0x192>
 801196c:	ab03      	add	r3, sp, #12
 801196e:	9300      	str	r3, [sp, #0]
 8011970:	462a      	mov	r2, r5
 8011972:	4b0e      	ldr	r3, [pc, #56]	@ (80119ac <_svfiprintf_r+0x1f0>)
 8011974:	a904      	add	r1, sp, #16
 8011976:	4638      	mov	r0, r7
 8011978:	f7fe faf6 	bl	800ff68 <_printf_float>
 801197c:	1c42      	adds	r2, r0, #1
 801197e:	4606      	mov	r6, r0
 8011980:	d1d6      	bne.n	8011930 <_svfiprintf_r+0x174>
 8011982:	89ab      	ldrh	r3, [r5, #12]
 8011984:	065b      	lsls	r3, r3, #25
 8011986:	f53f af2d 	bmi.w	80117e4 <_svfiprintf_r+0x28>
 801198a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801198c:	e72c      	b.n	80117e8 <_svfiprintf_r+0x2c>
 801198e:	ab03      	add	r3, sp, #12
 8011990:	9300      	str	r3, [sp, #0]
 8011992:	462a      	mov	r2, r5
 8011994:	4b05      	ldr	r3, [pc, #20]	@ (80119ac <_svfiprintf_r+0x1f0>)
 8011996:	a904      	add	r1, sp, #16
 8011998:	4638      	mov	r0, r7
 801199a:	f7fe fd7d 	bl	8010498 <_printf_i>
 801199e:	e7ed      	b.n	801197c <_svfiprintf_r+0x1c0>
 80119a0:	08013fc9 	.word	0x08013fc9
 80119a4:	08013fd3 	.word	0x08013fd3
 80119a8:	0800ff69 	.word	0x0800ff69
 80119ac:	08011705 	.word	0x08011705
 80119b0:	08013fcf 	.word	0x08013fcf

080119b4 <malloc>:
 80119b4:	4b02      	ldr	r3, [pc, #8]	@ (80119c0 <malloc+0xc>)
 80119b6:	4601      	mov	r1, r0
 80119b8:	6818      	ldr	r0, [r3, #0]
 80119ba:	f000 b825 	b.w	8011a08 <_malloc_r>
 80119be:	bf00      	nop
 80119c0:	200000c0 	.word	0x200000c0

080119c4 <sbrk_aligned>:
 80119c4:	b570      	push	{r4, r5, r6, lr}
 80119c6:	4e0f      	ldr	r6, [pc, #60]	@ (8011a04 <sbrk_aligned+0x40>)
 80119c8:	460c      	mov	r4, r1
 80119ca:	6831      	ldr	r1, [r6, #0]
 80119cc:	4605      	mov	r5, r0
 80119ce:	b911      	cbnz	r1, 80119d6 <sbrk_aligned+0x12>
 80119d0:	f000 fd94 	bl	80124fc <_sbrk_r>
 80119d4:	6030      	str	r0, [r6, #0]
 80119d6:	4621      	mov	r1, r4
 80119d8:	4628      	mov	r0, r5
 80119da:	f000 fd8f 	bl	80124fc <_sbrk_r>
 80119de:	1c43      	adds	r3, r0, #1
 80119e0:	d103      	bne.n	80119ea <sbrk_aligned+0x26>
 80119e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80119e6:	4620      	mov	r0, r4
 80119e8:	bd70      	pop	{r4, r5, r6, pc}
 80119ea:	1cc4      	adds	r4, r0, #3
 80119ec:	f024 0403 	bic.w	r4, r4, #3
 80119f0:	42a0      	cmp	r0, r4
 80119f2:	d0f8      	beq.n	80119e6 <sbrk_aligned+0x22>
 80119f4:	1a21      	subs	r1, r4, r0
 80119f6:	4628      	mov	r0, r5
 80119f8:	f000 fd80 	bl	80124fc <_sbrk_r>
 80119fc:	3001      	adds	r0, #1
 80119fe:	d1f2      	bne.n	80119e6 <sbrk_aligned+0x22>
 8011a00:	e7ef      	b.n	80119e2 <sbrk_aligned+0x1e>
 8011a02:	bf00      	nop
 8011a04:	20005b40 	.word	0x20005b40

08011a08 <_malloc_r>:
 8011a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a0c:	1ccd      	adds	r5, r1, #3
 8011a0e:	f025 0503 	bic.w	r5, r5, #3
 8011a12:	3508      	adds	r5, #8
 8011a14:	2d0c      	cmp	r5, #12
 8011a16:	bf38      	it	cc
 8011a18:	250c      	movcc	r5, #12
 8011a1a:	2d00      	cmp	r5, #0
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	db01      	blt.n	8011a24 <_malloc_r+0x1c>
 8011a20:	42a9      	cmp	r1, r5
 8011a22:	d904      	bls.n	8011a2e <_malloc_r+0x26>
 8011a24:	230c      	movs	r3, #12
 8011a26:	6033      	str	r3, [r6, #0]
 8011a28:	2000      	movs	r0, #0
 8011a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b04 <_malloc_r+0xfc>
 8011a32:	f000 f915 	bl	8011c60 <__malloc_lock>
 8011a36:	f8d8 3000 	ldr.w	r3, [r8]
 8011a3a:	461c      	mov	r4, r3
 8011a3c:	bb44      	cbnz	r4, 8011a90 <_malloc_r+0x88>
 8011a3e:	4629      	mov	r1, r5
 8011a40:	4630      	mov	r0, r6
 8011a42:	f7ff ffbf 	bl	80119c4 <sbrk_aligned>
 8011a46:	1c43      	adds	r3, r0, #1
 8011a48:	4604      	mov	r4, r0
 8011a4a:	d158      	bne.n	8011afe <_malloc_r+0xf6>
 8011a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8011a50:	4627      	mov	r7, r4
 8011a52:	2f00      	cmp	r7, #0
 8011a54:	d143      	bne.n	8011ade <_malloc_r+0xd6>
 8011a56:	2c00      	cmp	r4, #0
 8011a58:	d04b      	beq.n	8011af2 <_malloc_r+0xea>
 8011a5a:	6823      	ldr	r3, [r4, #0]
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	4630      	mov	r0, r6
 8011a60:	eb04 0903 	add.w	r9, r4, r3
 8011a64:	f000 fd4a 	bl	80124fc <_sbrk_r>
 8011a68:	4581      	cmp	r9, r0
 8011a6a:	d142      	bne.n	8011af2 <_malloc_r+0xea>
 8011a6c:	6821      	ldr	r1, [r4, #0]
 8011a6e:	1a6d      	subs	r5, r5, r1
 8011a70:	4629      	mov	r1, r5
 8011a72:	4630      	mov	r0, r6
 8011a74:	f7ff ffa6 	bl	80119c4 <sbrk_aligned>
 8011a78:	3001      	adds	r0, #1
 8011a7a:	d03a      	beq.n	8011af2 <_malloc_r+0xea>
 8011a7c:	6823      	ldr	r3, [r4, #0]
 8011a7e:	442b      	add	r3, r5
 8011a80:	6023      	str	r3, [r4, #0]
 8011a82:	f8d8 3000 	ldr.w	r3, [r8]
 8011a86:	685a      	ldr	r2, [r3, #4]
 8011a88:	bb62      	cbnz	r2, 8011ae4 <_malloc_r+0xdc>
 8011a8a:	f8c8 7000 	str.w	r7, [r8]
 8011a8e:	e00f      	b.n	8011ab0 <_malloc_r+0xa8>
 8011a90:	6822      	ldr	r2, [r4, #0]
 8011a92:	1b52      	subs	r2, r2, r5
 8011a94:	d420      	bmi.n	8011ad8 <_malloc_r+0xd0>
 8011a96:	2a0b      	cmp	r2, #11
 8011a98:	d917      	bls.n	8011aca <_malloc_r+0xc2>
 8011a9a:	1961      	adds	r1, r4, r5
 8011a9c:	42a3      	cmp	r3, r4
 8011a9e:	6025      	str	r5, [r4, #0]
 8011aa0:	bf18      	it	ne
 8011aa2:	6059      	strne	r1, [r3, #4]
 8011aa4:	6863      	ldr	r3, [r4, #4]
 8011aa6:	bf08      	it	eq
 8011aa8:	f8c8 1000 	streq.w	r1, [r8]
 8011aac:	5162      	str	r2, [r4, r5]
 8011aae:	604b      	str	r3, [r1, #4]
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	f000 f8db 	bl	8011c6c <__malloc_unlock>
 8011ab6:	f104 000b 	add.w	r0, r4, #11
 8011aba:	1d23      	adds	r3, r4, #4
 8011abc:	f020 0007 	bic.w	r0, r0, #7
 8011ac0:	1ac2      	subs	r2, r0, r3
 8011ac2:	bf1c      	itt	ne
 8011ac4:	1a1b      	subne	r3, r3, r0
 8011ac6:	50a3      	strne	r3, [r4, r2]
 8011ac8:	e7af      	b.n	8011a2a <_malloc_r+0x22>
 8011aca:	6862      	ldr	r2, [r4, #4]
 8011acc:	42a3      	cmp	r3, r4
 8011ace:	bf0c      	ite	eq
 8011ad0:	f8c8 2000 	streq.w	r2, [r8]
 8011ad4:	605a      	strne	r2, [r3, #4]
 8011ad6:	e7eb      	b.n	8011ab0 <_malloc_r+0xa8>
 8011ad8:	4623      	mov	r3, r4
 8011ada:	6864      	ldr	r4, [r4, #4]
 8011adc:	e7ae      	b.n	8011a3c <_malloc_r+0x34>
 8011ade:	463c      	mov	r4, r7
 8011ae0:	687f      	ldr	r7, [r7, #4]
 8011ae2:	e7b6      	b.n	8011a52 <_malloc_r+0x4a>
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	42a3      	cmp	r3, r4
 8011aea:	d1fb      	bne.n	8011ae4 <_malloc_r+0xdc>
 8011aec:	2300      	movs	r3, #0
 8011aee:	6053      	str	r3, [r2, #4]
 8011af0:	e7de      	b.n	8011ab0 <_malloc_r+0xa8>
 8011af2:	230c      	movs	r3, #12
 8011af4:	6033      	str	r3, [r6, #0]
 8011af6:	4630      	mov	r0, r6
 8011af8:	f000 f8b8 	bl	8011c6c <__malloc_unlock>
 8011afc:	e794      	b.n	8011a28 <_malloc_r+0x20>
 8011afe:	6005      	str	r5, [r0, #0]
 8011b00:	e7d6      	b.n	8011ab0 <_malloc_r+0xa8>
 8011b02:	bf00      	nop
 8011b04:	20005b44 	.word	0x20005b44

08011b08 <__sflush_r>:
 8011b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b10:	0716      	lsls	r6, r2, #28
 8011b12:	4605      	mov	r5, r0
 8011b14:	460c      	mov	r4, r1
 8011b16:	d454      	bmi.n	8011bc2 <__sflush_r+0xba>
 8011b18:	684b      	ldr	r3, [r1, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	dc02      	bgt.n	8011b24 <__sflush_r+0x1c>
 8011b1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	dd48      	ble.n	8011bb6 <__sflush_r+0xae>
 8011b24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b26:	2e00      	cmp	r6, #0
 8011b28:	d045      	beq.n	8011bb6 <__sflush_r+0xae>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b30:	682f      	ldr	r7, [r5, #0]
 8011b32:	6a21      	ldr	r1, [r4, #32]
 8011b34:	602b      	str	r3, [r5, #0]
 8011b36:	d030      	beq.n	8011b9a <__sflush_r+0x92>
 8011b38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	0759      	lsls	r1, r3, #29
 8011b3e:	d505      	bpl.n	8011b4c <__sflush_r+0x44>
 8011b40:	6863      	ldr	r3, [r4, #4]
 8011b42:	1ad2      	subs	r2, r2, r3
 8011b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b46:	b10b      	cbz	r3, 8011b4c <__sflush_r+0x44>
 8011b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b4a:	1ad2      	subs	r2, r2, r3
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b50:	6a21      	ldr	r1, [r4, #32]
 8011b52:	4628      	mov	r0, r5
 8011b54:	47b0      	blx	r6
 8011b56:	1c43      	adds	r3, r0, #1
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	d106      	bne.n	8011b6a <__sflush_r+0x62>
 8011b5c:	6829      	ldr	r1, [r5, #0]
 8011b5e:	291d      	cmp	r1, #29
 8011b60:	d82b      	bhi.n	8011bba <__sflush_r+0xb2>
 8011b62:	4a2a      	ldr	r2, [pc, #168]	@ (8011c0c <__sflush_r+0x104>)
 8011b64:	410a      	asrs	r2, r1
 8011b66:	07d6      	lsls	r6, r2, #31
 8011b68:	d427      	bmi.n	8011bba <__sflush_r+0xb2>
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	6062      	str	r2, [r4, #4]
 8011b6e:	04d9      	lsls	r1, r3, #19
 8011b70:	6922      	ldr	r2, [r4, #16]
 8011b72:	6022      	str	r2, [r4, #0]
 8011b74:	d504      	bpl.n	8011b80 <__sflush_r+0x78>
 8011b76:	1c42      	adds	r2, r0, #1
 8011b78:	d101      	bne.n	8011b7e <__sflush_r+0x76>
 8011b7a:	682b      	ldr	r3, [r5, #0]
 8011b7c:	b903      	cbnz	r3, 8011b80 <__sflush_r+0x78>
 8011b7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b82:	602f      	str	r7, [r5, #0]
 8011b84:	b1b9      	cbz	r1, 8011bb6 <__sflush_r+0xae>
 8011b86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b8a:	4299      	cmp	r1, r3
 8011b8c:	d002      	beq.n	8011b94 <__sflush_r+0x8c>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	f7ff fd6e 	bl	8011670 <_free_r>
 8011b94:	2300      	movs	r3, #0
 8011b96:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b98:	e00d      	b.n	8011bb6 <__sflush_r+0xae>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	47b0      	blx	r6
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	1c50      	adds	r0, r2, #1
 8011ba4:	d1c9      	bne.n	8011b3a <__sflush_r+0x32>
 8011ba6:	682b      	ldr	r3, [r5, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d0c6      	beq.n	8011b3a <__sflush_r+0x32>
 8011bac:	2b1d      	cmp	r3, #29
 8011bae:	d001      	beq.n	8011bb4 <__sflush_r+0xac>
 8011bb0:	2b16      	cmp	r3, #22
 8011bb2:	d11e      	bne.n	8011bf2 <__sflush_r+0xea>
 8011bb4:	602f      	str	r7, [r5, #0]
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	e022      	b.n	8011c00 <__sflush_r+0xf8>
 8011bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bbe:	b21b      	sxth	r3, r3
 8011bc0:	e01b      	b.n	8011bfa <__sflush_r+0xf2>
 8011bc2:	690f      	ldr	r7, [r1, #16]
 8011bc4:	2f00      	cmp	r7, #0
 8011bc6:	d0f6      	beq.n	8011bb6 <__sflush_r+0xae>
 8011bc8:	0793      	lsls	r3, r2, #30
 8011bca:	680e      	ldr	r6, [r1, #0]
 8011bcc:	bf08      	it	eq
 8011bce:	694b      	ldreq	r3, [r1, #20]
 8011bd0:	600f      	str	r7, [r1, #0]
 8011bd2:	bf18      	it	ne
 8011bd4:	2300      	movne	r3, #0
 8011bd6:	eba6 0807 	sub.w	r8, r6, r7
 8011bda:	608b      	str	r3, [r1, #8]
 8011bdc:	f1b8 0f00 	cmp.w	r8, #0
 8011be0:	dde9      	ble.n	8011bb6 <__sflush_r+0xae>
 8011be2:	6a21      	ldr	r1, [r4, #32]
 8011be4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011be6:	4643      	mov	r3, r8
 8011be8:	463a      	mov	r2, r7
 8011bea:	4628      	mov	r0, r5
 8011bec:	47b0      	blx	r6
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	dc08      	bgt.n	8011c04 <__sflush_r+0xfc>
 8011bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bfa:	81a3      	strh	r3, [r4, #12]
 8011bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c04:	4407      	add	r7, r0
 8011c06:	eba8 0800 	sub.w	r8, r8, r0
 8011c0a:	e7e7      	b.n	8011bdc <__sflush_r+0xd4>
 8011c0c:	dfbffffe 	.word	0xdfbffffe

08011c10 <_fflush_r>:
 8011c10:	b538      	push	{r3, r4, r5, lr}
 8011c12:	690b      	ldr	r3, [r1, #16]
 8011c14:	4605      	mov	r5, r0
 8011c16:	460c      	mov	r4, r1
 8011c18:	b913      	cbnz	r3, 8011c20 <_fflush_r+0x10>
 8011c1a:	2500      	movs	r5, #0
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	bd38      	pop	{r3, r4, r5, pc}
 8011c20:	b118      	cbz	r0, 8011c2a <_fflush_r+0x1a>
 8011c22:	6a03      	ldr	r3, [r0, #32]
 8011c24:	b90b      	cbnz	r3, 8011c2a <_fflush_r+0x1a>
 8011c26:	f7fe fde3 	bl	80107f0 <__sinit>
 8011c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d0f3      	beq.n	8011c1a <_fflush_r+0xa>
 8011c32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c34:	07d0      	lsls	r0, r2, #31
 8011c36:	d404      	bmi.n	8011c42 <_fflush_r+0x32>
 8011c38:	0599      	lsls	r1, r3, #22
 8011c3a:	d402      	bmi.n	8011c42 <_fflush_r+0x32>
 8011c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c3e:	f7fe feba 	bl	80109b6 <__retarget_lock_acquire_recursive>
 8011c42:	4628      	mov	r0, r5
 8011c44:	4621      	mov	r1, r4
 8011c46:	f7ff ff5f 	bl	8011b08 <__sflush_r>
 8011c4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c4c:	07da      	lsls	r2, r3, #31
 8011c4e:	4605      	mov	r5, r0
 8011c50:	d4e4      	bmi.n	8011c1c <_fflush_r+0xc>
 8011c52:	89a3      	ldrh	r3, [r4, #12]
 8011c54:	059b      	lsls	r3, r3, #22
 8011c56:	d4e1      	bmi.n	8011c1c <_fflush_r+0xc>
 8011c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c5a:	f7fe fead 	bl	80109b8 <__retarget_lock_release_recursive>
 8011c5e:	e7dd      	b.n	8011c1c <_fflush_r+0xc>

08011c60 <__malloc_lock>:
 8011c60:	4801      	ldr	r0, [pc, #4]	@ (8011c68 <__malloc_lock+0x8>)
 8011c62:	f7fe bea8 	b.w	80109b6 <__retarget_lock_acquire_recursive>
 8011c66:	bf00      	nop
 8011c68:	20005b3c 	.word	0x20005b3c

08011c6c <__malloc_unlock>:
 8011c6c:	4801      	ldr	r0, [pc, #4]	@ (8011c74 <__malloc_unlock+0x8>)
 8011c6e:	f7fe bea3 	b.w	80109b8 <__retarget_lock_release_recursive>
 8011c72:	bf00      	nop
 8011c74:	20005b3c 	.word	0x20005b3c

08011c78 <_Balloc>:
 8011c78:	b570      	push	{r4, r5, r6, lr}
 8011c7a:	69c6      	ldr	r6, [r0, #28]
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	460d      	mov	r5, r1
 8011c80:	b976      	cbnz	r6, 8011ca0 <_Balloc+0x28>
 8011c82:	2010      	movs	r0, #16
 8011c84:	f7ff fe96 	bl	80119b4 <malloc>
 8011c88:	4602      	mov	r2, r0
 8011c8a:	61e0      	str	r0, [r4, #28]
 8011c8c:	b920      	cbnz	r0, 8011c98 <_Balloc+0x20>
 8011c8e:	4b18      	ldr	r3, [pc, #96]	@ (8011cf0 <_Balloc+0x78>)
 8011c90:	4818      	ldr	r0, [pc, #96]	@ (8011cf4 <_Balloc+0x7c>)
 8011c92:	216b      	movs	r1, #107	@ 0x6b
 8011c94:	f000 fc54 	bl	8012540 <__assert_func>
 8011c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c9c:	6006      	str	r6, [r0, #0]
 8011c9e:	60c6      	str	r6, [r0, #12]
 8011ca0:	69e6      	ldr	r6, [r4, #28]
 8011ca2:	68f3      	ldr	r3, [r6, #12]
 8011ca4:	b183      	cbz	r3, 8011cc8 <_Balloc+0x50>
 8011ca6:	69e3      	ldr	r3, [r4, #28]
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cae:	b9b8      	cbnz	r0, 8011ce0 <_Balloc+0x68>
 8011cb0:	2101      	movs	r1, #1
 8011cb2:	fa01 f605 	lsl.w	r6, r1, r5
 8011cb6:	1d72      	adds	r2, r6, #5
 8011cb8:	0092      	lsls	r2, r2, #2
 8011cba:	4620      	mov	r0, r4
 8011cbc:	f000 fc5e 	bl	801257c <_calloc_r>
 8011cc0:	b160      	cbz	r0, 8011cdc <_Balloc+0x64>
 8011cc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cc6:	e00e      	b.n	8011ce6 <_Balloc+0x6e>
 8011cc8:	2221      	movs	r2, #33	@ 0x21
 8011cca:	2104      	movs	r1, #4
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f000 fc55 	bl	801257c <_calloc_r>
 8011cd2:	69e3      	ldr	r3, [r4, #28]
 8011cd4:	60f0      	str	r0, [r6, #12]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1e4      	bne.n	8011ca6 <_Balloc+0x2e>
 8011cdc:	2000      	movs	r0, #0
 8011cde:	bd70      	pop	{r4, r5, r6, pc}
 8011ce0:	6802      	ldr	r2, [r0, #0]
 8011ce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011cec:	e7f7      	b.n	8011cde <_Balloc+0x66>
 8011cee:	bf00      	nop
 8011cf0:	08013f49 	.word	0x08013f49
 8011cf4:	08013fda 	.word	0x08013fda

08011cf8 <_Bfree>:
 8011cf8:	b570      	push	{r4, r5, r6, lr}
 8011cfa:	69c6      	ldr	r6, [r0, #28]
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	460c      	mov	r4, r1
 8011d00:	b976      	cbnz	r6, 8011d20 <_Bfree+0x28>
 8011d02:	2010      	movs	r0, #16
 8011d04:	f7ff fe56 	bl	80119b4 <malloc>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	61e8      	str	r0, [r5, #28]
 8011d0c:	b920      	cbnz	r0, 8011d18 <_Bfree+0x20>
 8011d0e:	4b09      	ldr	r3, [pc, #36]	@ (8011d34 <_Bfree+0x3c>)
 8011d10:	4809      	ldr	r0, [pc, #36]	@ (8011d38 <_Bfree+0x40>)
 8011d12:	218f      	movs	r1, #143	@ 0x8f
 8011d14:	f000 fc14 	bl	8012540 <__assert_func>
 8011d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d1c:	6006      	str	r6, [r0, #0]
 8011d1e:	60c6      	str	r6, [r0, #12]
 8011d20:	b13c      	cbz	r4, 8011d32 <_Bfree+0x3a>
 8011d22:	69eb      	ldr	r3, [r5, #28]
 8011d24:	6862      	ldr	r2, [r4, #4]
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d2c:	6021      	str	r1, [r4, #0]
 8011d2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d32:	bd70      	pop	{r4, r5, r6, pc}
 8011d34:	08013f49 	.word	0x08013f49
 8011d38:	08013fda 	.word	0x08013fda

08011d3c <__multadd>:
 8011d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d40:	690d      	ldr	r5, [r1, #16]
 8011d42:	4607      	mov	r7, r0
 8011d44:	460c      	mov	r4, r1
 8011d46:	461e      	mov	r6, r3
 8011d48:	f101 0c14 	add.w	ip, r1, #20
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	f8dc 3000 	ldr.w	r3, [ip]
 8011d52:	b299      	uxth	r1, r3
 8011d54:	fb02 6101 	mla	r1, r2, r1, r6
 8011d58:	0c1e      	lsrs	r6, r3, #16
 8011d5a:	0c0b      	lsrs	r3, r1, #16
 8011d5c:	fb02 3306 	mla	r3, r2, r6, r3
 8011d60:	b289      	uxth	r1, r1
 8011d62:	3001      	adds	r0, #1
 8011d64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011d68:	4285      	cmp	r5, r0
 8011d6a:	f84c 1b04 	str.w	r1, [ip], #4
 8011d6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011d72:	dcec      	bgt.n	8011d4e <__multadd+0x12>
 8011d74:	b30e      	cbz	r6, 8011dba <__multadd+0x7e>
 8011d76:	68a3      	ldr	r3, [r4, #8]
 8011d78:	42ab      	cmp	r3, r5
 8011d7a:	dc19      	bgt.n	8011db0 <__multadd+0x74>
 8011d7c:	6861      	ldr	r1, [r4, #4]
 8011d7e:	4638      	mov	r0, r7
 8011d80:	3101      	adds	r1, #1
 8011d82:	f7ff ff79 	bl	8011c78 <_Balloc>
 8011d86:	4680      	mov	r8, r0
 8011d88:	b928      	cbnz	r0, 8011d96 <__multadd+0x5a>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8011dc0 <__multadd+0x84>)
 8011d8e:	480d      	ldr	r0, [pc, #52]	@ (8011dc4 <__multadd+0x88>)
 8011d90:	21ba      	movs	r1, #186	@ 0xba
 8011d92:	f000 fbd5 	bl	8012540 <__assert_func>
 8011d96:	6922      	ldr	r2, [r4, #16]
 8011d98:	3202      	adds	r2, #2
 8011d9a:	f104 010c 	add.w	r1, r4, #12
 8011d9e:	0092      	lsls	r2, r2, #2
 8011da0:	300c      	adds	r0, #12
 8011da2:	f7fe fe0a 	bl	80109ba <memcpy>
 8011da6:	4621      	mov	r1, r4
 8011da8:	4638      	mov	r0, r7
 8011daa:	f7ff ffa5 	bl	8011cf8 <_Bfree>
 8011dae:	4644      	mov	r4, r8
 8011db0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011db4:	3501      	adds	r5, #1
 8011db6:	615e      	str	r6, [r3, #20]
 8011db8:	6125      	str	r5, [r4, #16]
 8011dba:	4620      	mov	r0, r4
 8011dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc0:	08013fb8 	.word	0x08013fb8
 8011dc4:	08013fda 	.word	0x08013fda

08011dc8 <__hi0bits>:
 8011dc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011dcc:	4603      	mov	r3, r0
 8011dce:	bf36      	itet	cc
 8011dd0:	0403      	lslcc	r3, r0, #16
 8011dd2:	2000      	movcs	r0, #0
 8011dd4:	2010      	movcc	r0, #16
 8011dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011dda:	bf3c      	itt	cc
 8011ddc:	021b      	lslcc	r3, r3, #8
 8011dde:	3008      	addcc	r0, #8
 8011de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011de4:	bf3c      	itt	cc
 8011de6:	011b      	lslcc	r3, r3, #4
 8011de8:	3004      	addcc	r0, #4
 8011dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011dee:	bf3c      	itt	cc
 8011df0:	009b      	lslcc	r3, r3, #2
 8011df2:	3002      	addcc	r0, #2
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	db05      	blt.n	8011e04 <__hi0bits+0x3c>
 8011df8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011dfc:	f100 0001 	add.w	r0, r0, #1
 8011e00:	bf08      	it	eq
 8011e02:	2020      	moveq	r0, #32
 8011e04:	4770      	bx	lr

08011e06 <__lo0bits>:
 8011e06:	6803      	ldr	r3, [r0, #0]
 8011e08:	4602      	mov	r2, r0
 8011e0a:	f013 0007 	ands.w	r0, r3, #7
 8011e0e:	d00b      	beq.n	8011e28 <__lo0bits+0x22>
 8011e10:	07d9      	lsls	r1, r3, #31
 8011e12:	d421      	bmi.n	8011e58 <__lo0bits+0x52>
 8011e14:	0798      	lsls	r0, r3, #30
 8011e16:	bf49      	itett	mi
 8011e18:	085b      	lsrmi	r3, r3, #1
 8011e1a:	089b      	lsrpl	r3, r3, #2
 8011e1c:	2001      	movmi	r0, #1
 8011e1e:	6013      	strmi	r3, [r2, #0]
 8011e20:	bf5c      	itt	pl
 8011e22:	6013      	strpl	r3, [r2, #0]
 8011e24:	2002      	movpl	r0, #2
 8011e26:	4770      	bx	lr
 8011e28:	b299      	uxth	r1, r3
 8011e2a:	b909      	cbnz	r1, 8011e30 <__lo0bits+0x2a>
 8011e2c:	0c1b      	lsrs	r3, r3, #16
 8011e2e:	2010      	movs	r0, #16
 8011e30:	b2d9      	uxtb	r1, r3
 8011e32:	b909      	cbnz	r1, 8011e38 <__lo0bits+0x32>
 8011e34:	3008      	adds	r0, #8
 8011e36:	0a1b      	lsrs	r3, r3, #8
 8011e38:	0719      	lsls	r1, r3, #28
 8011e3a:	bf04      	itt	eq
 8011e3c:	091b      	lsreq	r3, r3, #4
 8011e3e:	3004      	addeq	r0, #4
 8011e40:	0799      	lsls	r1, r3, #30
 8011e42:	bf04      	itt	eq
 8011e44:	089b      	lsreq	r3, r3, #2
 8011e46:	3002      	addeq	r0, #2
 8011e48:	07d9      	lsls	r1, r3, #31
 8011e4a:	d403      	bmi.n	8011e54 <__lo0bits+0x4e>
 8011e4c:	085b      	lsrs	r3, r3, #1
 8011e4e:	f100 0001 	add.w	r0, r0, #1
 8011e52:	d003      	beq.n	8011e5c <__lo0bits+0x56>
 8011e54:	6013      	str	r3, [r2, #0]
 8011e56:	4770      	bx	lr
 8011e58:	2000      	movs	r0, #0
 8011e5a:	4770      	bx	lr
 8011e5c:	2020      	movs	r0, #32
 8011e5e:	4770      	bx	lr

08011e60 <__i2b>:
 8011e60:	b510      	push	{r4, lr}
 8011e62:	460c      	mov	r4, r1
 8011e64:	2101      	movs	r1, #1
 8011e66:	f7ff ff07 	bl	8011c78 <_Balloc>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	b928      	cbnz	r0, 8011e7a <__i2b+0x1a>
 8011e6e:	4b05      	ldr	r3, [pc, #20]	@ (8011e84 <__i2b+0x24>)
 8011e70:	4805      	ldr	r0, [pc, #20]	@ (8011e88 <__i2b+0x28>)
 8011e72:	f240 1145 	movw	r1, #325	@ 0x145
 8011e76:	f000 fb63 	bl	8012540 <__assert_func>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	6144      	str	r4, [r0, #20]
 8011e7e:	6103      	str	r3, [r0, #16]
 8011e80:	bd10      	pop	{r4, pc}
 8011e82:	bf00      	nop
 8011e84:	08013fb8 	.word	0x08013fb8
 8011e88:	08013fda 	.word	0x08013fda

08011e8c <__multiply>:
 8011e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e90:	4614      	mov	r4, r2
 8011e92:	690a      	ldr	r2, [r1, #16]
 8011e94:	6923      	ldr	r3, [r4, #16]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	bfa8      	it	ge
 8011e9a:	4623      	movge	r3, r4
 8011e9c:	460f      	mov	r7, r1
 8011e9e:	bfa4      	itt	ge
 8011ea0:	460c      	movge	r4, r1
 8011ea2:	461f      	movge	r7, r3
 8011ea4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011ea8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011eac:	68a3      	ldr	r3, [r4, #8]
 8011eae:	6861      	ldr	r1, [r4, #4]
 8011eb0:	eb0a 0609 	add.w	r6, sl, r9
 8011eb4:	42b3      	cmp	r3, r6
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	bfb8      	it	lt
 8011eba:	3101      	addlt	r1, #1
 8011ebc:	f7ff fedc 	bl	8011c78 <_Balloc>
 8011ec0:	b930      	cbnz	r0, 8011ed0 <__multiply+0x44>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	4b44      	ldr	r3, [pc, #272]	@ (8011fd8 <__multiply+0x14c>)
 8011ec6:	4845      	ldr	r0, [pc, #276]	@ (8011fdc <__multiply+0x150>)
 8011ec8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011ecc:	f000 fb38 	bl	8012540 <__assert_func>
 8011ed0:	f100 0514 	add.w	r5, r0, #20
 8011ed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011ed8:	462b      	mov	r3, r5
 8011eda:	2200      	movs	r2, #0
 8011edc:	4543      	cmp	r3, r8
 8011ede:	d321      	bcc.n	8011f24 <__multiply+0x98>
 8011ee0:	f107 0114 	add.w	r1, r7, #20
 8011ee4:	f104 0214 	add.w	r2, r4, #20
 8011ee8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011eec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011ef0:	9302      	str	r3, [sp, #8]
 8011ef2:	1b13      	subs	r3, r2, r4
 8011ef4:	3b15      	subs	r3, #21
 8011ef6:	f023 0303 	bic.w	r3, r3, #3
 8011efa:	3304      	adds	r3, #4
 8011efc:	f104 0715 	add.w	r7, r4, #21
 8011f00:	42ba      	cmp	r2, r7
 8011f02:	bf38      	it	cc
 8011f04:	2304      	movcc	r3, #4
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	9b02      	ldr	r3, [sp, #8]
 8011f0a:	9103      	str	r1, [sp, #12]
 8011f0c:	428b      	cmp	r3, r1
 8011f0e:	d80c      	bhi.n	8011f2a <__multiply+0x9e>
 8011f10:	2e00      	cmp	r6, #0
 8011f12:	dd03      	ble.n	8011f1c <__multiply+0x90>
 8011f14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d05b      	beq.n	8011fd4 <__multiply+0x148>
 8011f1c:	6106      	str	r6, [r0, #16]
 8011f1e:	b005      	add	sp, #20
 8011f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f24:	f843 2b04 	str.w	r2, [r3], #4
 8011f28:	e7d8      	b.n	8011edc <__multiply+0x50>
 8011f2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8011f2e:	f1ba 0f00 	cmp.w	sl, #0
 8011f32:	d024      	beq.n	8011f7e <__multiply+0xf2>
 8011f34:	f104 0e14 	add.w	lr, r4, #20
 8011f38:	46a9      	mov	r9, r5
 8011f3a:	f04f 0c00 	mov.w	ip, #0
 8011f3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f42:	f8d9 3000 	ldr.w	r3, [r9]
 8011f46:	fa1f fb87 	uxth.w	fp, r7
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011f50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011f54:	f8d9 7000 	ldr.w	r7, [r9]
 8011f58:	4463      	add	r3, ip
 8011f5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f5e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011f62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011f6c:	4572      	cmp	r2, lr
 8011f6e:	f849 3b04 	str.w	r3, [r9], #4
 8011f72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f76:	d8e2      	bhi.n	8011f3e <__multiply+0xb2>
 8011f78:	9b01      	ldr	r3, [sp, #4]
 8011f7a:	f845 c003 	str.w	ip, [r5, r3]
 8011f7e:	9b03      	ldr	r3, [sp, #12]
 8011f80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011f84:	3104      	adds	r1, #4
 8011f86:	f1b9 0f00 	cmp.w	r9, #0
 8011f8a:	d021      	beq.n	8011fd0 <__multiply+0x144>
 8011f8c:	682b      	ldr	r3, [r5, #0]
 8011f8e:	f104 0c14 	add.w	ip, r4, #20
 8011f92:	46ae      	mov	lr, r5
 8011f94:	f04f 0a00 	mov.w	sl, #0
 8011f98:	f8bc b000 	ldrh.w	fp, [ip]
 8011f9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011fa0:	fb09 770b 	mla	r7, r9, fp, r7
 8011fa4:	4457      	add	r7, sl
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011fac:	f84e 3b04 	str.w	r3, [lr], #4
 8011fb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011fb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011fb8:	f8be 3000 	ldrh.w	r3, [lr]
 8011fbc:	fb09 330a 	mla	r3, r9, sl, r3
 8011fc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011fc4:	4562      	cmp	r2, ip
 8011fc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011fca:	d8e5      	bhi.n	8011f98 <__multiply+0x10c>
 8011fcc:	9f01      	ldr	r7, [sp, #4]
 8011fce:	51eb      	str	r3, [r5, r7]
 8011fd0:	3504      	adds	r5, #4
 8011fd2:	e799      	b.n	8011f08 <__multiply+0x7c>
 8011fd4:	3e01      	subs	r6, #1
 8011fd6:	e79b      	b.n	8011f10 <__multiply+0x84>
 8011fd8:	08013fb8 	.word	0x08013fb8
 8011fdc:	08013fda 	.word	0x08013fda

08011fe0 <__pow5mult>:
 8011fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fe4:	4615      	mov	r5, r2
 8011fe6:	f012 0203 	ands.w	r2, r2, #3
 8011fea:	4607      	mov	r7, r0
 8011fec:	460e      	mov	r6, r1
 8011fee:	d007      	beq.n	8012000 <__pow5mult+0x20>
 8011ff0:	4c25      	ldr	r4, [pc, #148]	@ (8012088 <__pow5mult+0xa8>)
 8011ff2:	3a01      	subs	r2, #1
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011ffa:	f7ff fe9f 	bl	8011d3c <__multadd>
 8011ffe:	4606      	mov	r6, r0
 8012000:	10ad      	asrs	r5, r5, #2
 8012002:	d03d      	beq.n	8012080 <__pow5mult+0xa0>
 8012004:	69fc      	ldr	r4, [r7, #28]
 8012006:	b97c      	cbnz	r4, 8012028 <__pow5mult+0x48>
 8012008:	2010      	movs	r0, #16
 801200a:	f7ff fcd3 	bl	80119b4 <malloc>
 801200e:	4602      	mov	r2, r0
 8012010:	61f8      	str	r0, [r7, #28]
 8012012:	b928      	cbnz	r0, 8012020 <__pow5mult+0x40>
 8012014:	4b1d      	ldr	r3, [pc, #116]	@ (801208c <__pow5mult+0xac>)
 8012016:	481e      	ldr	r0, [pc, #120]	@ (8012090 <__pow5mult+0xb0>)
 8012018:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801201c:	f000 fa90 	bl	8012540 <__assert_func>
 8012020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012024:	6004      	str	r4, [r0, #0]
 8012026:	60c4      	str	r4, [r0, #12]
 8012028:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801202c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012030:	b94c      	cbnz	r4, 8012046 <__pow5mult+0x66>
 8012032:	f240 2171 	movw	r1, #625	@ 0x271
 8012036:	4638      	mov	r0, r7
 8012038:	f7ff ff12 	bl	8011e60 <__i2b>
 801203c:	2300      	movs	r3, #0
 801203e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012042:	4604      	mov	r4, r0
 8012044:	6003      	str	r3, [r0, #0]
 8012046:	f04f 0900 	mov.w	r9, #0
 801204a:	07eb      	lsls	r3, r5, #31
 801204c:	d50a      	bpl.n	8012064 <__pow5mult+0x84>
 801204e:	4631      	mov	r1, r6
 8012050:	4622      	mov	r2, r4
 8012052:	4638      	mov	r0, r7
 8012054:	f7ff ff1a 	bl	8011e8c <__multiply>
 8012058:	4631      	mov	r1, r6
 801205a:	4680      	mov	r8, r0
 801205c:	4638      	mov	r0, r7
 801205e:	f7ff fe4b 	bl	8011cf8 <_Bfree>
 8012062:	4646      	mov	r6, r8
 8012064:	106d      	asrs	r5, r5, #1
 8012066:	d00b      	beq.n	8012080 <__pow5mult+0xa0>
 8012068:	6820      	ldr	r0, [r4, #0]
 801206a:	b938      	cbnz	r0, 801207c <__pow5mult+0x9c>
 801206c:	4622      	mov	r2, r4
 801206e:	4621      	mov	r1, r4
 8012070:	4638      	mov	r0, r7
 8012072:	f7ff ff0b 	bl	8011e8c <__multiply>
 8012076:	6020      	str	r0, [r4, #0]
 8012078:	f8c0 9000 	str.w	r9, [r0]
 801207c:	4604      	mov	r4, r0
 801207e:	e7e4      	b.n	801204a <__pow5mult+0x6a>
 8012080:	4630      	mov	r0, r6
 8012082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012086:	bf00      	nop
 8012088:	08014034 	.word	0x08014034
 801208c:	08013f49 	.word	0x08013f49
 8012090:	08013fda 	.word	0x08013fda

08012094 <__lshift>:
 8012094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012098:	460c      	mov	r4, r1
 801209a:	6849      	ldr	r1, [r1, #4]
 801209c:	6923      	ldr	r3, [r4, #16]
 801209e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120a2:	68a3      	ldr	r3, [r4, #8]
 80120a4:	4607      	mov	r7, r0
 80120a6:	4691      	mov	r9, r2
 80120a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120ac:	f108 0601 	add.w	r6, r8, #1
 80120b0:	42b3      	cmp	r3, r6
 80120b2:	db0b      	blt.n	80120cc <__lshift+0x38>
 80120b4:	4638      	mov	r0, r7
 80120b6:	f7ff fddf 	bl	8011c78 <_Balloc>
 80120ba:	4605      	mov	r5, r0
 80120bc:	b948      	cbnz	r0, 80120d2 <__lshift+0x3e>
 80120be:	4602      	mov	r2, r0
 80120c0:	4b28      	ldr	r3, [pc, #160]	@ (8012164 <__lshift+0xd0>)
 80120c2:	4829      	ldr	r0, [pc, #164]	@ (8012168 <__lshift+0xd4>)
 80120c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80120c8:	f000 fa3a 	bl	8012540 <__assert_func>
 80120cc:	3101      	adds	r1, #1
 80120ce:	005b      	lsls	r3, r3, #1
 80120d0:	e7ee      	b.n	80120b0 <__lshift+0x1c>
 80120d2:	2300      	movs	r3, #0
 80120d4:	f100 0114 	add.w	r1, r0, #20
 80120d8:	f100 0210 	add.w	r2, r0, #16
 80120dc:	4618      	mov	r0, r3
 80120de:	4553      	cmp	r3, sl
 80120e0:	db33      	blt.n	801214a <__lshift+0xb6>
 80120e2:	6920      	ldr	r0, [r4, #16]
 80120e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80120e8:	f104 0314 	add.w	r3, r4, #20
 80120ec:	f019 091f 	ands.w	r9, r9, #31
 80120f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80120f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80120f8:	d02b      	beq.n	8012152 <__lshift+0xbe>
 80120fa:	f1c9 0e20 	rsb	lr, r9, #32
 80120fe:	468a      	mov	sl, r1
 8012100:	2200      	movs	r2, #0
 8012102:	6818      	ldr	r0, [r3, #0]
 8012104:	fa00 f009 	lsl.w	r0, r0, r9
 8012108:	4310      	orrs	r0, r2
 801210a:	f84a 0b04 	str.w	r0, [sl], #4
 801210e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012112:	459c      	cmp	ip, r3
 8012114:	fa22 f20e 	lsr.w	r2, r2, lr
 8012118:	d8f3      	bhi.n	8012102 <__lshift+0x6e>
 801211a:	ebac 0304 	sub.w	r3, ip, r4
 801211e:	3b15      	subs	r3, #21
 8012120:	f023 0303 	bic.w	r3, r3, #3
 8012124:	3304      	adds	r3, #4
 8012126:	f104 0015 	add.w	r0, r4, #21
 801212a:	4584      	cmp	ip, r0
 801212c:	bf38      	it	cc
 801212e:	2304      	movcc	r3, #4
 8012130:	50ca      	str	r2, [r1, r3]
 8012132:	b10a      	cbz	r2, 8012138 <__lshift+0xa4>
 8012134:	f108 0602 	add.w	r6, r8, #2
 8012138:	3e01      	subs	r6, #1
 801213a:	4638      	mov	r0, r7
 801213c:	612e      	str	r6, [r5, #16]
 801213e:	4621      	mov	r1, r4
 8012140:	f7ff fdda 	bl	8011cf8 <_Bfree>
 8012144:	4628      	mov	r0, r5
 8012146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801214a:	f842 0f04 	str.w	r0, [r2, #4]!
 801214e:	3301      	adds	r3, #1
 8012150:	e7c5      	b.n	80120de <__lshift+0x4a>
 8012152:	3904      	subs	r1, #4
 8012154:	f853 2b04 	ldr.w	r2, [r3], #4
 8012158:	f841 2f04 	str.w	r2, [r1, #4]!
 801215c:	459c      	cmp	ip, r3
 801215e:	d8f9      	bhi.n	8012154 <__lshift+0xc0>
 8012160:	e7ea      	b.n	8012138 <__lshift+0xa4>
 8012162:	bf00      	nop
 8012164:	08013fb8 	.word	0x08013fb8
 8012168:	08013fda 	.word	0x08013fda

0801216c <__mcmp>:
 801216c:	690a      	ldr	r2, [r1, #16]
 801216e:	4603      	mov	r3, r0
 8012170:	6900      	ldr	r0, [r0, #16]
 8012172:	1a80      	subs	r0, r0, r2
 8012174:	b530      	push	{r4, r5, lr}
 8012176:	d10e      	bne.n	8012196 <__mcmp+0x2a>
 8012178:	3314      	adds	r3, #20
 801217a:	3114      	adds	r1, #20
 801217c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012180:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012184:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012188:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801218c:	4295      	cmp	r5, r2
 801218e:	d003      	beq.n	8012198 <__mcmp+0x2c>
 8012190:	d205      	bcs.n	801219e <__mcmp+0x32>
 8012192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012196:	bd30      	pop	{r4, r5, pc}
 8012198:	42a3      	cmp	r3, r4
 801219a:	d3f3      	bcc.n	8012184 <__mcmp+0x18>
 801219c:	e7fb      	b.n	8012196 <__mcmp+0x2a>
 801219e:	2001      	movs	r0, #1
 80121a0:	e7f9      	b.n	8012196 <__mcmp+0x2a>
	...

080121a4 <__mdiff>:
 80121a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a8:	4689      	mov	r9, r1
 80121aa:	4606      	mov	r6, r0
 80121ac:	4611      	mov	r1, r2
 80121ae:	4648      	mov	r0, r9
 80121b0:	4614      	mov	r4, r2
 80121b2:	f7ff ffdb 	bl	801216c <__mcmp>
 80121b6:	1e05      	subs	r5, r0, #0
 80121b8:	d112      	bne.n	80121e0 <__mdiff+0x3c>
 80121ba:	4629      	mov	r1, r5
 80121bc:	4630      	mov	r0, r6
 80121be:	f7ff fd5b 	bl	8011c78 <_Balloc>
 80121c2:	4602      	mov	r2, r0
 80121c4:	b928      	cbnz	r0, 80121d2 <__mdiff+0x2e>
 80121c6:	4b3f      	ldr	r3, [pc, #252]	@ (80122c4 <__mdiff+0x120>)
 80121c8:	f240 2137 	movw	r1, #567	@ 0x237
 80121cc:	483e      	ldr	r0, [pc, #248]	@ (80122c8 <__mdiff+0x124>)
 80121ce:	f000 f9b7 	bl	8012540 <__assert_func>
 80121d2:	2301      	movs	r3, #1
 80121d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80121d8:	4610      	mov	r0, r2
 80121da:	b003      	add	sp, #12
 80121dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e0:	bfbc      	itt	lt
 80121e2:	464b      	movlt	r3, r9
 80121e4:	46a1      	movlt	r9, r4
 80121e6:	4630      	mov	r0, r6
 80121e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80121ec:	bfba      	itte	lt
 80121ee:	461c      	movlt	r4, r3
 80121f0:	2501      	movlt	r5, #1
 80121f2:	2500      	movge	r5, #0
 80121f4:	f7ff fd40 	bl	8011c78 <_Balloc>
 80121f8:	4602      	mov	r2, r0
 80121fa:	b918      	cbnz	r0, 8012204 <__mdiff+0x60>
 80121fc:	4b31      	ldr	r3, [pc, #196]	@ (80122c4 <__mdiff+0x120>)
 80121fe:	f240 2145 	movw	r1, #581	@ 0x245
 8012202:	e7e3      	b.n	80121cc <__mdiff+0x28>
 8012204:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012208:	6926      	ldr	r6, [r4, #16]
 801220a:	60c5      	str	r5, [r0, #12]
 801220c:	f109 0310 	add.w	r3, r9, #16
 8012210:	f109 0514 	add.w	r5, r9, #20
 8012214:	f104 0e14 	add.w	lr, r4, #20
 8012218:	f100 0b14 	add.w	fp, r0, #20
 801221c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012220:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012224:	9301      	str	r3, [sp, #4]
 8012226:	46d9      	mov	r9, fp
 8012228:	f04f 0c00 	mov.w	ip, #0
 801222c:	9b01      	ldr	r3, [sp, #4]
 801222e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012232:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012236:	9301      	str	r3, [sp, #4]
 8012238:	fa1f f38a 	uxth.w	r3, sl
 801223c:	4619      	mov	r1, r3
 801223e:	b283      	uxth	r3, r0
 8012240:	1acb      	subs	r3, r1, r3
 8012242:	0c00      	lsrs	r0, r0, #16
 8012244:	4463      	add	r3, ip
 8012246:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801224a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801224e:	b29b      	uxth	r3, r3
 8012250:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012254:	4576      	cmp	r6, lr
 8012256:	f849 3b04 	str.w	r3, [r9], #4
 801225a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801225e:	d8e5      	bhi.n	801222c <__mdiff+0x88>
 8012260:	1b33      	subs	r3, r6, r4
 8012262:	3b15      	subs	r3, #21
 8012264:	f023 0303 	bic.w	r3, r3, #3
 8012268:	3415      	adds	r4, #21
 801226a:	3304      	adds	r3, #4
 801226c:	42a6      	cmp	r6, r4
 801226e:	bf38      	it	cc
 8012270:	2304      	movcc	r3, #4
 8012272:	441d      	add	r5, r3
 8012274:	445b      	add	r3, fp
 8012276:	461e      	mov	r6, r3
 8012278:	462c      	mov	r4, r5
 801227a:	4544      	cmp	r4, r8
 801227c:	d30e      	bcc.n	801229c <__mdiff+0xf8>
 801227e:	f108 0103 	add.w	r1, r8, #3
 8012282:	1b49      	subs	r1, r1, r5
 8012284:	f021 0103 	bic.w	r1, r1, #3
 8012288:	3d03      	subs	r5, #3
 801228a:	45a8      	cmp	r8, r5
 801228c:	bf38      	it	cc
 801228e:	2100      	movcc	r1, #0
 8012290:	440b      	add	r3, r1
 8012292:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012296:	b191      	cbz	r1, 80122be <__mdiff+0x11a>
 8012298:	6117      	str	r7, [r2, #16]
 801229a:	e79d      	b.n	80121d8 <__mdiff+0x34>
 801229c:	f854 1b04 	ldr.w	r1, [r4], #4
 80122a0:	46e6      	mov	lr, ip
 80122a2:	0c08      	lsrs	r0, r1, #16
 80122a4:	fa1c fc81 	uxtah	ip, ip, r1
 80122a8:	4471      	add	r1, lr
 80122aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80122ae:	b289      	uxth	r1, r1
 80122b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80122b4:	f846 1b04 	str.w	r1, [r6], #4
 80122b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80122bc:	e7dd      	b.n	801227a <__mdiff+0xd6>
 80122be:	3f01      	subs	r7, #1
 80122c0:	e7e7      	b.n	8012292 <__mdiff+0xee>
 80122c2:	bf00      	nop
 80122c4:	08013fb8 	.word	0x08013fb8
 80122c8:	08013fda 	.word	0x08013fda

080122cc <__d2b>:
 80122cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122d0:	460f      	mov	r7, r1
 80122d2:	2101      	movs	r1, #1
 80122d4:	ec59 8b10 	vmov	r8, r9, d0
 80122d8:	4616      	mov	r6, r2
 80122da:	f7ff fccd 	bl	8011c78 <_Balloc>
 80122de:	4604      	mov	r4, r0
 80122e0:	b930      	cbnz	r0, 80122f0 <__d2b+0x24>
 80122e2:	4602      	mov	r2, r0
 80122e4:	4b23      	ldr	r3, [pc, #140]	@ (8012374 <__d2b+0xa8>)
 80122e6:	4824      	ldr	r0, [pc, #144]	@ (8012378 <__d2b+0xac>)
 80122e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80122ec:	f000 f928 	bl	8012540 <__assert_func>
 80122f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80122f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80122f8:	b10d      	cbz	r5, 80122fe <__d2b+0x32>
 80122fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80122fe:	9301      	str	r3, [sp, #4]
 8012300:	f1b8 0300 	subs.w	r3, r8, #0
 8012304:	d023      	beq.n	801234e <__d2b+0x82>
 8012306:	4668      	mov	r0, sp
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	f7ff fd7c 	bl	8011e06 <__lo0bits>
 801230e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012312:	b1d0      	cbz	r0, 801234a <__d2b+0x7e>
 8012314:	f1c0 0320 	rsb	r3, r0, #32
 8012318:	fa02 f303 	lsl.w	r3, r2, r3
 801231c:	430b      	orrs	r3, r1
 801231e:	40c2      	lsrs	r2, r0
 8012320:	6163      	str	r3, [r4, #20]
 8012322:	9201      	str	r2, [sp, #4]
 8012324:	9b01      	ldr	r3, [sp, #4]
 8012326:	61a3      	str	r3, [r4, #24]
 8012328:	2b00      	cmp	r3, #0
 801232a:	bf0c      	ite	eq
 801232c:	2201      	moveq	r2, #1
 801232e:	2202      	movne	r2, #2
 8012330:	6122      	str	r2, [r4, #16]
 8012332:	b1a5      	cbz	r5, 801235e <__d2b+0x92>
 8012334:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012338:	4405      	add	r5, r0
 801233a:	603d      	str	r5, [r7, #0]
 801233c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012340:	6030      	str	r0, [r6, #0]
 8012342:	4620      	mov	r0, r4
 8012344:	b003      	add	sp, #12
 8012346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801234a:	6161      	str	r1, [r4, #20]
 801234c:	e7ea      	b.n	8012324 <__d2b+0x58>
 801234e:	a801      	add	r0, sp, #4
 8012350:	f7ff fd59 	bl	8011e06 <__lo0bits>
 8012354:	9b01      	ldr	r3, [sp, #4]
 8012356:	6163      	str	r3, [r4, #20]
 8012358:	3020      	adds	r0, #32
 801235a:	2201      	movs	r2, #1
 801235c:	e7e8      	b.n	8012330 <__d2b+0x64>
 801235e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012362:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012366:	6038      	str	r0, [r7, #0]
 8012368:	6918      	ldr	r0, [r3, #16]
 801236a:	f7ff fd2d 	bl	8011dc8 <__hi0bits>
 801236e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012372:	e7e5      	b.n	8012340 <__d2b+0x74>
 8012374:	08013fb8 	.word	0x08013fb8
 8012378:	08013fda 	.word	0x08013fda

0801237c <__sread>:
 801237c:	b510      	push	{r4, lr}
 801237e:	460c      	mov	r4, r1
 8012380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012384:	f000 f8a8 	bl	80124d8 <_read_r>
 8012388:	2800      	cmp	r0, #0
 801238a:	bfab      	itete	ge
 801238c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801238e:	89a3      	ldrhlt	r3, [r4, #12]
 8012390:	181b      	addge	r3, r3, r0
 8012392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012396:	bfac      	ite	ge
 8012398:	6563      	strge	r3, [r4, #84]	@ 0x54
 801239a:	81a3      	strhlt	r3, [r4, #12]
 801239c:	bd10      	pop	{r4, pc}

0801239e <__swrite>:
 801239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a2:	461f      	mov	r7, r3
 80123a4:	898b      	ldrh	r3, [r1, #12]
 80123a6:	05db      	lsls	r3, r3, #23
 80123a8:	4605      	mov	r5, r0
 80123aa:	460c      	mov	r4, r1
 80123ac:	4616      	mov	r6, r2
 80123ae:	d505      	bpl.n	80123bc <__swrite+0x1e>
 80123b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123b4:	2302      	movs	r3, #2
 80123b6:	2200      	movs	r2, #0
 80123b8:	f000 f87c 	bl	80124b4 <_lseek_r>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80123c6:	81a3      	strh	r3, [r4, #12]
 80123c8:	4632      	mov	r2, r6
 80123ca:	463b      	mov	r3, r7
 80123cc:	4628      	mov	r0, r5
 80123ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123d2:	f000 b8a3 	b.w	801251c <_write_r>

080123d6 <__sseek>:
 80123d6:	b510      	push	{r4, lr}
 80123d8:	460c      	mov	r4, r1
 80123da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123de:	f000 f869 	bl	80124b4 <_lseek_r>
 80123e2:	1c43      	adds	r3, r0, #1
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	bf15      	itete	ne
 80123e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80123ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80123ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80123f2:	81a3      	strheq	r3, [r4, #12]
 80123f4:	bf18      	it	ne
 80123f6:	81a3      	strhne	r3, [r4, #12]
 80123f8:	bd10      	pop	{r4, pc}

080123fa <__sclose>:
 80123fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123fe:	f000 b849 	b.w	8012494 <_close_r>

08012402 <_realloc_r>:
 8012402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012406:	4680      	mov	r8, r0
 8012408:	4615      	mov	r5, r2
 801240a:	460c      	mov	r4, r1
 801240c:	b921      	cbnz	r1, 8012418 <_realloc_r+0x16>
 801240e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012412:	4611      	mov	r1, r2
 8012414:	f7ff baf8 	b.w	8011a08 <_malloc_r>
 8012418:	b92a      	cbnz	r2, 8012426 <_realloc_r+0x24>
 801241a:	f7ff f929 	bl	8011670 <_free_r>
 801241e:	2400      	movs	r4, #0
 8012420:	4620      	mov	r0, r4
 8012422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012426:	f000 f8cf 	bl	80125c8 <_malloc_usable_size_r>
 801242a:	4285      	cmp	r5, r0
 801242c:	4606      	mov	r6, r0
 801242e:	d802      	bhi.n	8012436 <_realloc_r+0x34>
 8012430:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012434:	d8f4      	bhi.n	8012420 <_realloc_r+0x1e>
 8012436:	4629      	mov	r1, r5
 8012438:	4640      	mov	r0, r8
 801243a:	f7ff fae5 	bl	8011a08 <_malloc_r>
 801243e:	4607      	mov	r7, r0
 8012440:	2800      	cmp	r0, #0
 8012442:	d0ec      	beq.n	801241e <_realloc_r+0x1c>
 8012444:	42b5      	cmp	r5, r6
 8012446:	462a      	mov	r2, r5
 8012448:	4621      	mov	r1, r4
 801244a:	bf28      	it	cs
 801244c:	4632      	movcs	r2, r6
 801244e:	f7fe fab4 	bl	80109ba <memcpy>
 8012452:	4621      	mov	r1, r4
 8012454:	4640      	mov	r0, r8
 8012456:	f7ff f90b 	bl	8011670 <_free_r>
 801245a:	463c      	mov	r4, r7
 801245c:	e7e0      	b.n	8012420 <_realloc_r+0x1e>

0801245e <memmove>:
 801245e:	4288      	cmp	r0, r1
 8012460:	b510      	push	{r4, lr}
 8012462:	eb01 0402 	add.w	r4, r1, r2
 8012466:	d902      	bls.n	801246e <memmove+0x10>
 8012468:	4284      	cmp	r4, r0
 801246a:	4623      	mov	r3, r4
 801246c:	d807      	bhi.n	801247e <memmove+0x20>
 801246e:	1e43      	subs	r3, r0, #1
 8012470:	42a1      	cmp	r1, r4
 8012472:	d008      	beq.n	8012486 <memmove+0x28>
 8012474:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012478:	f803 2f01 	strb.w	r2, [r3, #1]!
 801247c:	e7f8      	b.n	8012470 <memmove+0x12>
 801247e:	4402      	add	r2, r0
 8012480:	4601      	mov	r1, r0
 8012482:	428a      	cmp	r2, r1
 8012484:	d100      	bne.n	8012488 <memmove+0x2a>
 8012486:	bd10      	pop	{r4, pc}
 8012488:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801248c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012490:	e7f7      	b.n	8012482 <memmove+0x24>
	...

08012494 <_close_r>:
 8012494:	b538      	push	{r3, r4, r5, lr}
 8012496:	4d06      	ldr	r5, [pc, #24]	@ (80124b0 <_close_r+0x1c>)
 8012498:	2300      	movs	r3, #0
 801249a:	4604      	mov	r4, r0
 801249c:	4608      	mov	r0, r1
 801249e:	602b      	str	r3, [r5, #0]
 80124a0:	f7f4 fd02 	bl	8006ea8 <_close>
 80124a4:	1c43      	adds	r3, r0, #1
 80124a6:	d102      	bne.n	80124ae <_close_r+0x1a>
 80124a8:	682b      	ldr	r3, [r5, #0]
 80124aa:	b103      	cbz	r3, 80124ae <_close_r+0x1a>
 80124ac:	6023      	str	r3, [r4, #0]
 80124ae:	bd38      	pop	{r3, r4, r5, pc}
 80124b0:	20005b38 	.word	0x20005b38

080124b4 <_lseek_r>:
 80124b4:	b538      	push	{r3, r4, r5, lr}
 80124b6:	4d07      	ldr	r5, [pc, #28]	@ (80124d4 <_lseek_r+0x20>)
 80124b8:	4604      	mov	r4, r0
 80124ba:	4608      	mov	r0, r1
 80124bc:	4611      	mov	r1, r2
 80124be:	2200      	movs	r2, #0
 80124c0:	602a      	str	r2, [r5, #0]
 80124c2:	461a      	mov	r2, r3
 80124c4:	f7f4 fd17 	bl	8006ef6 <_lseek>
 80124c8:	1c43      	adds	r3, r0, #1
 80124ca:	d102      	bne.n	80124d2 <_lseek_r+0x1e>
 80124cc:	682b      	ldr	r3, [r5, #0]
 80124ce:	b103      	cbz	r3, 80124d2 <_lseek_r+0x1e>
 80124d0:	6023      	str	r3, [r4, #0]
 80124d2:	bd38      	pop	{r3, r4, r5, pc}
 80124d4:	20005b38 	.word	0x20005b38

080124d8 <_read_r>:
 80124d8:	b538      	push	{r3, r4, r5, lr}
 80124da:	4d07      	ldr	r5, [pc, #28]	@ (80124f8 <_read_r+0x20>)
 80124dc:	4604      	mov	r4, r0
 80124de:	4608      	mov	r0, r1
 80124e0:	4611      	mov	r1, r2
 80124e2:	2200      	movs	r2, #0
 80124e4:	602a      	str	r2, [r5, #0]
 80124e6:	461a      	mov	r2, r3
 80124e8:	f7f4 fca5 	bl	8006e36 <_read>
 80124ec:	1c43      	adds	r3, r0, #1
 80124ee:	d102      	bne.n	80124f6 <_read_r+0x1e>
 80124f0:	682b      	ldr	r3, [r5, #0]
 80124f2:	b103      	cbz	r3, 80124f6 <_read_r+0x1e>
 80124f4:	6023      	str	r3, [r4, #0]
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	20005b38 	.word	0x20005b38

080124fc <_sbrk_r>:
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	4d06      	ldr	r5, [pc, #24]	@ (8012518 <_sbrk_r+0x1c>)
 8012500:	2300      	movs	r3, #0
 8012502:	4604      	mov	r4, r0
 8012504:	4608      	mov	r0, r1
 8012506:	602b      	str	r3, [r5, #0]
 8012508:	f7f4 fd02 	bl	8006f10 <_sbrk>
 801250c:	1c43      	adds	r3, r0, #1
 801250e:	d102      	bne.n	8012516 <_sbrk_r+0x1a>
 8012510:	682b      	ldr	r3, [r5, #0]
 8012512:	b103      	cbz	r3, 8012516 <_sbrk_r+0x1a>
 8012514:	6023      	str	r3, [r4, #0]
 8012516:	bd38      	pop	{r3, r4, r5, pc}
 8012518:	20005b38 	.word	0x20005b38

0801251c <_write_r>:
 801251c:	b538      	push	{r3, r4, r5, lr}
 801251e:	4d07      	ldr	r5, [pc, #28]	@ (801253c <_write_r+0x20>)
 8012520:	4604      	mov	r4, r0
 8012522:	4608      	mov	r0, r1
 8012524:	4611      	mov	r1, r2
 8012526:	2200      	movs	r2, #0
 8012528:	602a      	str	r2, [r5, #0]
 801252a:	461a      	mov	r2, r3
 801252c:	f7f4 fca0 	bl	8006e70 <_write>
 8012530:	1c43      	adds	r3, r0, #1
 8012532:	d102      	bne.n	801253a <_write_r+0x1e>
 8012534:	682b      	ldr	r3, [r5, #0]
 8012536:	b103      	cbz	r3, 801253a <_write_r+0x1e>
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	bd38      	pop	{r3, r4, r5, pc}
 801253c:	20005b38 	.word	0x20005b38

08012540 <__assert_func>:
 8012540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012542:	4614      	mov	r4, r2
 8012544:	461a      	mov	r2, r3
 8012546:	4b09      	ldr	r3, [pc, #36]	@ (801256c <__assert_func+0x2c>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4605      	mov	r5, r0
 801254c:	68d8      	ldr	r0, [r3, #12]
 801254e:	b954      	cbnz	r4, 8012566 <__assert_func+0x26>
 8012550:	4b07      	ldr	r3, [pc, #28]	@ (8012570 <__assert_func+0x30>)
 8012552:	461c      	mov	r4, r3
 8012554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012558:	9100      	str	r1, [sp, #0]
 801255a:	462b      	mov	r3, r5
 801255c:	4905      	ldr	r1, [pc, #20]	@ (8012574 <__assert_func+0x34>)
 801255e:	f000 f83b 	bl	80125d8 <fiprintf>
 8012562:	f000 f858 	bl	8012616 <abort>
 8012566:	4b04      	ldr	r3, [pc, #16]	@ (8012578 <__assert_func+0x38>)
 8012568:	e7f4      	b.n	8012554 <__assert_func+0x14>
 801256a:	bf00      	nop
 801256c:	200000c0 	.word	0x200000c0
 8012570:	08014276 	.word	0x08014276
 8012574:	08014248 	.word	0x08014248
 8012578:	0801423b 	.word	0x0801423b

0801257c <_calloc_r>:
 801257c:	b570      	push	{r4, r5, r6, lr}
 801257e:	fba1 5402 	umull	r5, r4, r1, r2
 8012582:	b93c      	cbnz	r4, 8012594 <_calloc_r+0x18>
 8012584:	4629      	mov	r1, r5
 8012586:	f7ff fa3f 	bl	8011a08 <_malloc_r>
 801258a:	4606      	mov	r6, r0
 801258c:	b928      	cbnz	r0, 801259a <_calloc_r+0x1e>
 801258e:	2600      	movs	r6, #0
 8012590:	4630      	mov	r0, r6
 8012592:	bd70      	pop	{r4, r5, r6, pc}
 8012594:	220c      	movs	r2, #12
 8012596:	6002      	str	r2, [r0, #0]
 8012598:	e7f9      	b.n	801258e <_calloc_r+0x12>
 801259a:	462a      	mov	r2, r5
 801259c:	4621      	mov	r1, r4
 801259e:	f7fe f97d 	bl	801089c <memset>
 80125a2:	e7f5      	b.n	8012590 <_calloc_r+0x14>

080125a4 <__ascii_mbtowc>:
 80125a4:	b082      	sub	sp, #8
 80125a6:	b901      	cbnz	r1, 80125aa <__ascii_mbtowc+0x6>
 80125a8:	a901      	add	r1, sp, #4
 80125aa:	b142      	cbz	r2, 80125be <__ascii_mbtowc+0x1a>
 80125ac:	b14b      	cbz	r3, 80125c2 <__ascii_mbtowc+0x1e>
 80125ae:	7813      	ldrb	r3, [r2, #0]
 80125b0:	600b      	str	r3, [r1, #0]
 80125b2:	7812      	ldrb	r2, [r2, #0]
 80125b4:	1e10      	subs	r0, r2, #0
 80125b6:	bf18      	it	ne
 80125b8:	2001      	movne	r0, #1
 80125ba:	b002      	add	sp, #8
 80125bc:	4770      	bx	lr
 80125be:	4610      	mov	r0, r2
 80125c0:	e7fb      	b.n	80125ba <__ascii_mbtowc+0x16>
 80125c2:	f06f 0001 	mvn.w	r0, #1
 80125c6:	e7f8      	b.n	80125ba <__ascii_mbtowc+0x16>

080125c8 <_malloc_usable_size_r>:
 80125c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125cc:	1f18      	subs	r0, r3, #4
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	bfbc      	itt	lt
 80125d2:	580b      	ldrlt	r3, [r1, r0]
 80125d4:	18c0      	addlt	r0, r0, r3
 80125d6:	4770      	bx	lr

080125d8 <fiprintf>:
 80125d8:	b40e      	push	{r1, r2, r3}
 80125da:	b503      	push	{r0, r1, lr}
 80125dc:	4601      	mov	r1, r0
 80125de:	ab03      	add	r3, sp, #12
 80125e0:	4805      	ldr	r0, [pc, #20]	@ (80125f8 <fiprintf+0x20>)
 80125e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125e6:	6800      	ldr	r0, [r0, #0]
 80125e8:	9301      	str	r3, [sp, #4]
 80125ea:	f000 f845 	bl	8012678 <_vfiprintf_r>
 80125ee:	b002      	add	sp, #8
 80125f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80125f4:	b003      	add	sp, #12
 80125f6:	4770      	bx	lr
 80125f8:	200000c0 	.word	0x200000c0

080125fc <__ascii_wctomb>:
 80125fc:	4603      	mov	r3, r0
 80125fe:	4608      	mov	r0, r1
 8012600:	b141      	cbz	r1, 8012614 <__ascii_wctomb+0x18>
 8012602:	2aff      	cmp	r2, #255	@ 0xff
 8012604:	d904      	bls.n	8012610 <__ascii_wctomb+0x14>
 8012606:	228a      	movs	r2, #138	@ 0x8a
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801260e:	4770      	bx	lr
 8012610:	700a      	strb	r2, [r1, #0]
 8012612:	2001      	movs	r0, #1
 8012614:	4770      	bx	lr

08012616 <abort>:
 8012616:	b508      	push	{r3, lr}
 8012618:	2006      	movs	r0, #6
 801261a:	f000 fa85 	bl	8012b28 <raise>
 801261e:	2001      	movs	r0, #1
 8012620:	f7f4 fbfe 	bl	8006e20 <_exit>

08012624 <__sfputc_r>:
 8012624:	6893      	ldr	r3, [r2, #8]
 8012626:	3b01      	subs	r3, #1
 8012628:	2b00      	cmp	r3, #0
 801262a:	b410      	push	{r4}
 801262c:	6093      	str	r3, [r2, #8]
 801262e:	da08      	bge.n	8012642 <__sfputc_r+0x1e>
 8012630:	6994      	ldr	r4, [r2, #24]
 8012632:	42a3      	cmp	r3, r4
 8012634:	db01      	blt.n	801263a <__sfputc_r+0x16>
 8012636:	290a      	cmp	r1, #10
 8012638:	d103      	bne.n	8012642 <__sfputc_r+0x1e>
 801263a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801263e:	f000 b933 	b.w	80128a8 <__swbuf_r>
 8012642:	6813      	ldr	r3, [r2, #0]
 8012644:	1c58      	adds	r0, r3, #1
 8012646:	6010      	str	r0, [r2, #0]
 8012648:	7019      	strb	r1, [r3, #0]
 801264a:	4608      	mov	r0, r1
 801264c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012650:	4770      	bx	lr

08012652 <__sfputs_r>:
 8012652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012654:	4606      	mov	r6, r0
 8012656:	460f      	mov	r7, r1
 8012658:	4614      	mov	r4, r2
 801265a:	18d5      	adds	r5, r2, r3
 801265c:	42ac      	cmp	r4, r5
 801265e:	d101      	bne.n	8012664 <__sfputs_r+0x12>
 8012660:	2000      	movs	r0, #0
 8012662:	e007      	b.n	8012674 <__sfputs_r+0x22>
 8012664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012668:	463a      	mov	r2, r7
 801266a:	4630      	mov	r0, r6
 801266c:	f7ff ffda 	bl	8012624 <__sfputc_r>
 8012670:	1c43      	adds	r3, r0, #1
 8012672:	d1f3      	bne.n	801265c <__sfputs_r+0xa>
 8012674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012678 <_vfiprintf_r>:
 8012678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801267c:	460d      	mov	r5, r1
 801267e:	b09d      	sub	sp, #116	@ 0x74
 8012680:	4614      	mov	r4, r2
 8012682:	4698      	mov	r8, r3
 8012684:	4606      	mov	r6, r0
 8012686:	b118      	cbz	r0, 8012690 <_vfiprintf_r+0x18>
 8012688:	6a03      	ldr	r3, [r0, #32]
 801268a:	b90b      	cbnz	r3, 8012690 <_vfiprintf_r+0x18>
 801268c:	f7fe f8b0 	bl	80107f0 <__sinit>
 8012690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012692:	07d9      	lsls	r1, r3, #31
 8012694:	d405      	bmi.n	80126a2 <_vfiprintf_r+0x2a>
 8012696:	89ab      	ldrh	r3, [r5, #12]
 8012698:	059a      	lsls	r2, r3, #22
 801269a:	d402      	bmi.n	80126a2 <_vfiprintf_r+0x2a>
 801269c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801269e:	f7fe f98a 	bl	80109b6 <__retarget_lock_acquire_recursive>
 80126a2:	89ab      	ldrh	r3, [r5, #12]
 80126a4:	071b      	lsls	r3, r3, #28
 80126a6:	d501      	bpl.n	80126ac <_vfiprintf_r+0x34>
 80126a8:	692b      	ldr	r3, [r5, #16]
 80126aa:	b99b      	cbnz	r3, 80126d4 <_vfiprintf_r+0x5c>
 80126ac:	4629      	mov	r1, r5
 80126ae:	4630      	mov	r0, r6
 80126b0:	f000 f938 	bl	8012924 <__swsetup_r>
 80126b4:	b170      	cbz	r0, 80126d4 <_vfiprintf_r+0x5c>
 80126b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126b8:	07dc      	lsls	r4, r3, #31
 80126ba:	d504      	bpl.n	80126c6 <_vfiprintf_r+0x4e>
 80126bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126c0:	b01d      	add	sp, #116	@ 0x74
 80126c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c6:	89ab      	ldrh	r3, [r5, #12]
 80126c8:	0598      	lsls	r0, r3, #22
 80126ca:	d4f7      	bmi.n	80126bc <_vfiprintf_r+0x44>
 80126cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126ce:	f7fe f973 	bl	80109b8 <__retarget_lock_release_recursive>
 80126d2:	e7f3      	b.n	80126bc <_vfiprintf_r+0x44>
 80126d4:	2300      	movs	r3, #0
 80126d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80126d8:	2320      	movs	r3, #32
 80126da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80126de:	f8cd 800c 	str.w	r8, [sp, #12]
 80126e2:	2330      	movs	r3, #48	@ 0x30
 80126e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012894 <_vfiprintf_r+0x21c>
 80126e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126ec:	f04f 0901 	mov.w	r9, #1
 80126f0:	4623      	mov	r3, r4
 80126f2:	469a      	mov	sl, r3
 80126f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126f8:	b10a      	cbz	r2, 80126fe <_vfiprintf_r+0x86>
 80126fa:	2a25      	cmp	r2, #37	@ 0x25
 80126fc:	d1f9      	bne.n	80126f2 <_vfiprintf_r+0x7a>
 80126fe:	ebba 0b04 	subs.w	fp, sl, r4
 8012702:	d00b      	beq.n	801271c <_vfiprintf_r+0xa4>
 8012704:	465b      	mov	r3, fp
 8012706:	4622      	mov	r2, r4
 8012708:	4629      	mov	r1, r5
 801270a:	4630      	mov	r0, r6
 801270c:	f7ff ffa1 	bl	8012652 <__sfputs_r>
 8012710:	3001      	adds	r0, #1
 8012712:	f000 80a7 	beq.w	8012864 <_vfiprintf_r+0x1ec>
 8012716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012718:	445a      	add	r2, fp
 801271a:	9209      	str	r2, [sp, #36]	@ 0x24
 801271c:	f89a 3000 	ldrb.w	r3, [sl]
 8012720:	2b00      	cmp	r3, #0
 8012722:	f000 809f 	beq.w	8012864 <_vfiprintf_r+0x1ec>
 8012726:	2300      	movs	r3, #0
 8012728:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801272c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012730:	f10a 0a01 	add.w	sl, sl, #1
 8012734:	9304      	str	r3, [sp, #16]
 8012736:	9307      	str	r3, [sp, #28]
 8012738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801273c:	931a      	str	r3, [sp, #104]	@ 0x68
 801273e:	4654      	mov	r4, sl
 8012740:	2205      	movs	r2, #5
 8012742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012746:	4853      	ldr	r0, [pc, #332]	@ (8012894 <_vfiprintf_r+0x21c>)
 8012748:	f7ed fd42 	bl	80001d0 <memchr>
 801274c:	9a04      	ldr	r2, [sp, #16]
 801274e:	b9d8      	cbnz	r0, 8012788 <_vfiprintf_r+0x110>
 8012750:	06d1      	lsls	r1, r2, #27
 8012752:	bf44      	itt	mi
 8012754:	2320      	movmi	r3, #32
 8012756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801275a:	0713      	lsls	r3, r2, #28
 801275c:	bf44      	itt	mi
 801275e:	232b      	movmi	r3, #43	@ 0x2b
 8012760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012764:	f89a 3000 	ldrb.w	r3, [sl]
 8012768:	2b2a      	cmp	r3, #42	@ 0x2a
 801276a:	d015      	beq.n	8012798 <_vfiprintf_r+0x120>
 801276c:	9a07      	ldr	r2, [sp, #28]
 801276e:	4654      	mov	r4, sl
 8012770:	2000      	movs	r0, #0
 8012772:	f04f 0c0a 	mov.w	ip, #10
 8012776:	4621      	mov	r1, r4
 8012778:	f811 3b01 	ldrb.w	r3, [r1], #1
 801277c:	3b30      	subs	r3, #48	@ 0x30
 801277e:	2b09      	cmp	r3, #9
 8012780:	d94b      	bls.n	801281a <_vfiprintf_r+0x1a2>
 8012782:	b1b0      	cbz	r0, 80127b2 <_vfiprintf_r+0x13a>
 8012784:	9207      	str	r2, [sp, #28]
 8012786:	e014      	b.n	80127b2 <_vfiprintf_r+0x13a>
 8012788:	eba0 0308 	sub.w	r3, r0, r8
 801278c:	fa09 f303 	lsl.w	r3, r9, r3
 8012790:	4313      	orrs	r3, r2
 8012792:	9304      	str	r3, [sp, #16]
 8012794:	46a2      	mov	sl, r4
 8012796:	e7d2      	b.n	801273e <_vfiprintf_r+0xc6>
 8012798:	9b03      	ldr	r3, [sp, #12]
 801279a:	1d19      	adds	r1, r3, #4
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	9103      	str	r1, [sp, #12]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	bfbb      	ittet	lt
 80127a4:	425b      	neglt	r3, r3
 80127a6:	f042 0202 	orrlt.w	r2, r2, #2
 80127aa:	9307      	strge	r3, [sp, #28]
 80127ac:	9307      	strlt	r3, [sp, #28]
 80127ae:	bfb8      	it	lt
 80127b0:	9204      	strlt	r2, [sp, #16]
 80127b2:	7823      	ldrb	r3, [r4, #0]
 80127b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80127b6:	d10a      	bne.n	80127ce <_vfiprintf_r+0x156>
 80127b8:	7863      	ldrb	r3, [r4, #1]
 80127ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80127bc:	d132      	bne.n	8012824 <_vfiprintf_r+0x1ac>
 80127be:	9b03      	ldr	r3, [sp, #12]
 80127c0:	1d1a      	adds	r2, r3, #4
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	9203      	str	r2, [sp, #12]
 80127c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80127ca:	3402      	adds	r4, #2
 80127cc:	9305      	str	r3, [sp, #20]
 80127ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80128a4 <_vfiprintf_r+0x22c>
 80127d2:	7821      	ldrb	r1, [r4, #0]
 80127d4:	2203      	movs	r2, #3
 80127d6:	4650      	mov	r0, sl
 80127d8:	f7ed fcfa 	bl	80001d0 <memchr>
 80127dc:	b138      	cbz	r0, 80127ee <_vfiprintf_r+0x176>
 80127de:	9b04      	ldr	r3, [sp, #16]
 80127e0:	eba0 000a 	sub.w	r0, r0, sl
 80127e4:	2240      	movs	r2, #64	@ 0x40
 80127e6:	4082      	lsls	r2, r0
 80127e8:	4313      	orrs	r3, r2
 80127ea:	3401      	adds	r4, #1
 80127ec:	9304      	str	r3, [sp, #16]
 80127ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f2:	4829      	ldr	r0, [pc, #164]	@ (8012898 <_vfiprintf_r+0x220>)
 80127f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127f8:	2206      	movs	r2, #6
 80127fa:	f7ed fce9 	bl	80001d0 <memchr>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d03f      	beq.n	8012882 <_vfiprintf_r+0x20a>
 8012802:	4b26      	ldr	r3, [pc, #152]	@ (801289c <_vfiprintf_r+0x224>)
 8012804:	bb1b      	cbnz	r3, 801284e <_vfiprintf_r+0x1d6>
 8012806:	9b03      	ldr	r3, [sp, #12]
 8012808:	3307      	adds	r3, #7
 801280a:	f023 0307 	bic.w	r3, r3, #7
 801280e:	3308      	adds	r3, #8
 8012810:	9303      	str	r3, [sp, #12]
 8012812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012814:	443b      	add	r3, r7
 8012816:	9309      	str	r3, [sp, #36]	@ 0x24
 8012818:	e76a      	b.n	80126f0 <_vfiprintf_r+0x78>
 801281a:	fb0c 3202 	mla	r2, ip, r2, r3
 801281e:	460c      	mov	r4, r1
 8012820:	2001      	movs	r0, #1
 8012822:	e7a8      	b.n	8012776 <_vfiprintf_r+0xfe>
 8012824:	2300      	movs	r3, #0
 8012826:	3401      	adds	r4, #1
 8012828:	9305      	str	r3, [sp, #20]
 801282a:	4619      	mov	r1, r3
 801282c:	f04f 0c0a 	mov.w	ip, #10
 8012830:	4620      	mov	r0, r4
 8012832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012836:	3a30      	subs	r2, #48	@ 0x30
 8012838:	2a09      	cmp	r2, #9
 801283a:	d903      	bls.n	8012844 <_vfiprintf_r+0x1cc>
 801283c:	2b00      	cmp	r3, #0
 801283e:	d0c6      	beq.n	80127ce <_vfiprintf_r+0x156>
 8012840:	9105      	str	r1, [sp, #20]
 8012842:	e7c4      	b.n	80127ce <_vfiprintf_r+0x156>
 8012844:	fb0c 2101 	mla	r1, ip, r1, r2
 8012848:	4604      	mov	r4, r0
 801284a:	2301      	movs	r3, #1
 801284c:	e7f0      	b.n	8012830 <_vfiprintf_r+0x1b8>
 801284e:	ab03      	add	r3, sp, #12
 8012850:	9300      	str	r3, [sp, #0]
 8012852:	462a      	mov	r2, r5
 8012854:	4b12      	ldr	r3, [pc, #72]	@ (80128a0 <_vfiprintf_r+0x228>)
 8012856:	a904      	add	r1, sp, #16
 8012858:	4630      	mov	r0, r6
 801285a:	f7fd fb85 	bl	800ff68 <_printf_float>
 801285e:	4607      	mov	r7, r0
 8012860:	1c78      	adds	r0, r7, #1
 8012862:	d1d6      	bne.n	8012812 <_vfiprintf_r+0x19a>
 8012864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012866:	07d9      	lsls	r1, r3, #31
 8012868:	d405      	bmi.n	8012876 <_vfiprintf_r+0x1fe>
 801286a:	89ab      	ldrh	r3, [r5, #12]
 801286c:	059a      	lsls	r2, r3, #22
 801286e:	d402      	bmi.n	8012876 <_vfiprintf_r+0x1fe>
 8012870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012872:	f7fe f8a1 	bl	80109b8 <__retarget_lock_release_recursive>
 8012876:	89ab      	ldrh	r3, [r5, #12]
 8012878:	065b      	lsls	r3, r3, #25
 801287a:	f53f af1f 	bmi.w	80126bc <_vfiprintf_r+0x44>
 801287e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012880:	e71e      	b.n	80126c0 <_vfiprintf_r+0x48>
 8012882:	ab03      	add	r3, sp, #12
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	462a      	mov	r2, r5
 8012888:	4b05      	ldr	r3, [pc, #20]	@ (80128a0 <_vfiprintf_r+0x228>)
 801288a:	a904      	add	r1, sp, #16
 801288c:	4630      	mov	r0, r6
 801288e:	f7fd fe03 	bl	8010498 <_printf_i>
 8012892:	e7e4      	b.n	801285e <_vfiprintf_r+0x1e6>
 8012894:	08013fc9 	.word	0x08013fc9
 8012898:	08013fd3 	.word	0x08013fd3
 801289c:	0800ff69 	.word	0x0800ff69
 80128a0:	08012653 	.word	0x08012653
 80128a4:	08013fcf 	.word	0x08013fcf

080128a8 <__swbuf_r>:
 80128a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128aa:	460e      	mov	r6, r1
 80128ac:	4614      	mov	r4, r2
 80128ae:	4605      	mov	r5, r0
 80128b0:	b118      	cbz	r0, 80128ba <__swbuf_r+0x12>
 80128b2:	6a03      	ldr	r3, [r0, #32]
 80128b4:	b90b      	cbnz	r3, 80128ba <__swbuf_r+0x12>
 80128b6:	f7fd ff9b 	bl	80107f0 <__sinit>
 80128ba:	69a3      	ldr	r3, [r4, #24]
 80128bc:	60a3      	str	r3, [r4, #8]
 80128be:	89a3      	ldrh	r3, [r4, #12]
 80128c0:	071a      	lsls	r2, r3, #28
 80128c2:	d501      	bpl.n	80128c8 <__swbuf_r+0x20>
 80128c4:	6923      	ldr	r3, [r4, #16]
 80128c6:	b943      	cbnz	r3, 80128da <__swbuf_r+0x32>
 80128c8:	4621      	mov	r1, r4
 80128ca:	4628      	mov	r0, r5
 80128cc:	f000 f82a 	bl	8012924 <__swsetup_r>
 80128d0:	b118      	cbz	r0, 80128da <__swbuf_r+0x32>
 80128d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80128d6:	4638      	mov	r0, r7
 80128d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128da:	6823      	ldr	r3, [r4, #0]
 80128dc:	6922      	ldr	r2, [r4, #16]
 80128de:	1a98      	subs	r0, r3, r2
 80128e0:	6963      	ldr	r3, [r4, #20]
 80128e2:	b2f6      	uxtb	r6, r6
 80128e4:	4283      	cmp	r3, r0
 80128e6:	4637      	mov	r7, r6
 80128e8:	dc05      	bgt.n	80128f6 <__swbuf_r+0x4e>
 80128ea:	4621      	mov	r1, r4
 80128ec:	4628      	mov	r0, r5
 80128ee:	f7ff f98f 	bl	8011c10 <_fflush_r>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d1ed      	bne.n	80128d2 <__swbuf_r+0x2a>
 80128f6:	68a3      	ldr	r3, [r4, #8]
 80128f8:	3b01      	subs	r3, #1
 80128fa:	60a3      	str	r3, [r4, #8]
 80128fc:	6823      	ldr	r3, [r4, #0]
 80128fe:	1c5a      	adds	r2, r3, #1
 8012900:	6022      	str	r2, [r4, #0]
 8012902:	701e      	strb	r6, [r3, #0]
 8012904:	6962      	ldr	r2, [r4, #20]
 8012906:	1c43      	adds	r3, r0, #1
 8012908:	429a      	cmp	r2, r3
 801290a:	d004      	beq.n	8012916 <__swbuf_r+0x6e>
 801290c:	89a3      	ldrh	r3, [r4, #12]
 801290e:	07db      	lsls	r3, r3, #31
 8012910:	d5e1      	bpl.n	80128d6 <__swbuf_r+0x2e>
 8012912:	2e0a      	cmp	r6, #10
 8012914:	d1df      	bne.n	80128d6 <__swbuf_r+0x2e>
 8012916:	4621      	mov	r1, r4
 8012918:	4628      	mov	r0, r5
 801291a:	f7ff f979 	bl	8011c10 <_fflush_r>
 801291e:	2800      	cmp	r0, #0
 8012920:	d0d9      	beq.n	80128d6 <__swbuf_r+0x2e>
 8012922:	e7d6      	b.n	80128d2 <__swbuf_r+0x2a>

08012924 <__swsetup_r>:
 8012924:	b538      	push	{r3, r4, r5, lr}
 8012926:	4b29      	ldr	r3, [pc, #164]	@ (80129cc <__swsetup_r+0xa8>)
 8012928:	4605      	mov	r5, r0
 801292a:	6818      	ldr	r0, [r3, #0]
 801292c:	460c      	mov	r4, r1
 801292e:	b118      	cbz	r0, 8012938 <__swsetup_r+0x14>
 8012930:	6a03      	ldr	r3, [r0, #32]
 8012932:	b90b      	cbnz	r3, 8012938 <__swsetup_r+0x14>
 8012934:	f7fd ff5c 	bl	80107f0 <__sinit>
 8012938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801293c:	0719      	lsls	r1, r3, #28
 801293e:	d422      	bmi.n	8012986 <__swsetup_r+0x62>
 8012940:	06da      	lsls	r2, r3, #27
 8012942:	d407      	bmi.n	8012954 <__swsetup_r+0x30>
 8012944:	2209      	movs	r2, #9
 8012946:	602a      	str	r2, [r5, #0]
 8012948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801294c:	81a3      	strh	r3, [r4, #12]
 801294e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012952:	e033      	b.n	80129bc <__swsetup_r+0x98>
 8012954:	0758      	lsls	r0, r3, #29
 8012956:	d512      	bpl.n	801297e <__swsetup_r+0x5a>
 8012958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801295a:	b141      	cbz	r1, 801296e <__swsetup_r+0x4a>
 801295c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012960:	4299      	cmp	r1, r3
 8012962:	d002      	beq.n	801296a <__swsetup_r+0x46>
 8012964:	4628      	mov	r0, r5
 8012966:	f7fe fe83 	bl	8011670 <_free_r>
 801296a:	2300      	movs	r3, #0
 801296c:	6363      	str	r3, [r4, #52]	@ 0x34
 801296e:	89a3      	ldrh	r3, [r4, #12]
 8012970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012974:	81a3      	strh	r3, [r4, #12]
 8012976:	2300      	movs	r3, #0
 8012978:	6063      	str	r3, [r4, #4]
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	6023      	str	r3, [r4, #0]
 801297e:	89a3      	ldrh	r3, [r4, #12]
 8012980:	f043 0308 	orr.w	r3, r3, #8
 8012984:	81a3      	strh	r3, [r4, #12]
 8012986:	6923      	ldr	r3, [r4, #16]
 8012988:	b94b      	cbnz	r3, 801299e <__swsetup_r+0x7a>
 801298a:	89a3      	ldrh	r3, [r4, #12]
 801298c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012994:	d003      	beq.n	801299e <__swsetup_r+0x7a>
 8012996:	4621      	mov	r1, r4
 8012998:	4628      	mov	r0, r5
 801299a:	f000 f83f 	bl	8012a1c <__smakebuf_r>
 801299e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129a2:	f013 0201 	ands.w	r2, r3, #1
 80129a6:	d00a      	beq.n	80129be <__swsetup_r+0x9a>
 80129a8:	2200      	movs	r2, #0
 80129aa:	60a2      	str	r2, [r4, #8]
 80129ac:	6962      	ldr	r2, [r4, #20]
 80129ae:	4252      	negs	r2, r2
 80129b0:	61a2      	str	r2, [r4, #24]
 80129b2:	6922      	ldr	r2, [r4, #16]
 80129b4:	b942      	cbnz	r2, 80129c8 <__swsetup_r+0xa4>
 80129b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80129ba:	d1c5      	bne.n	8012948 <__swsetup_r+0x24>
 80129bc:	bd38      	pop	{r3, r4, r5, pc}
 80129be:	0799      	lsls	r1, r3, #30
 80129c0:	bf58      	it	pl
 80129c2:	6962      	ldrpl	r2, [r4, #20]
 80129c4:	60a2      	str	r2, [r4, #8]
 80129c6:	e7f4      	b.n	80129b2 <__swsetup_r+0x8e>
 80129c8:	2000      	movs	r0, #0
 80129ca:	e7f7      	b.n	80129bc <__swsetup_r+0x98>
 80129cc:	200000c0 	.word	0x200000c0

080129d0 <__swhatbuf_r>:
 80129d0:	b570      	push	{r4, r5, r6, lr}
 80129d2:	460c      	mov	r4, r1
 80129d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129d8:	2900      	cmp	r1, #0
 80129da:	b096      	sub	sp, #88	@ 0x58
 80129dc:	4615      	mov	r5, r2
 80129de:	461e      	mov	r6, r3
 80129e0:	da0d      	bge.n	80129fe <__swhatbuf_r+0x2e>
 80129e2:	89a3      	ldrh	r3, [r4, #12]
 80129e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80129e8:	f04f 0100 	mov.w	r1, #0
 80129ec:	bf14      	ite	ne
 80129ee:	2340      	movne	r3, #64	@ 0x40
 80129f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80129f4:	2000      	movs	r0, #0
 80129f6:	6031      	str	r1, [r6, #0]
 80129f8:	602b      	str	r3, [r5, #0]
 80129fa:	b016      	add	sp, #88	@ 0x58
 80129fc:	bd70      	pop	{r4, r5, r6, pc}
 80129fe:	466a      	mov	r2, sp
 8012a00:	f000 f848 	bl	8012a94 <_fstat_r>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	dbec      	blt.n	80129e2 <__swhatbuf_r+0x12>
 8012a08:	9901      	ldr	r1, [sp, #4]
 8012a0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a12:	4259      	negs	r1, r3
 8012a14:	4159      	adcs	r1, r3
 8012a16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a1a:	e7eb      	b.n	80129f4 <__swhatbuf_r+0x24>

08012a1c <__smakebuf_r>:
 8012a1c:	898b      	ldrh	r3, [r1, #12]
 8012a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a20:	079d      	lsls	r5, r3, #30
 8012a22:	4606      	mov	r6, r0
 8012a24:	460c      	mov	r4, r1
 8012a26:	d507      	bpl.n	8012a38 <__smakebuf_r+0x1c>
 8012a28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a2c:	6023      	str	r3, [r4, #0]
 8012a2e:	6123      	str	r3, [r4, #16]
 8012a30:	2301      	movs	r3, #1
 8012a32:	6163      	str	r3, [r4, #20]
 8012a34:	b003      	add	sp, #12
 8012a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a38:	ab01      	add	r3, sp, #4
 8012a3a:	466a      	mov	r2, sp
 8012a3c:	f7ff ffc8 	bl	80129d0 <__swhatbuf_r>
 8012a40:	9f00      	ldr	r7, [sp, #0]
 8012a42:	4605      	mov	r5, r0
 8012a44:	4639      	mov	r1, r7
 8012a46:	4630      	mov	r0, r6
 8012a48:	f7fe ffde 	bl	8011a08 <_malloc_r>
 8012a4c:	b948      	cbnz	r0, 8012a62 <__smakebuf_r+0x46>
 8012a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a52:	059a      	lsls	r2, r3, #22
 8012a54:	d4ee      	bmi.n	8012a34 <__smakebuf_r+0x18>
 8012a56:	f023 0303 	bic.w	r3, r3, #3
 8012a5a:	f043 0302 	orr.w	r3, r3, #2
 8012a5e:	81a3      	strh	r3, [r4, #12]
 8012a60:	e7e2      	b.n	8012a28 <__smakebuf_r+0xc>
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	6020      	str	r0, [r4, #0]
 8012a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a6a:	81a3      	strh	r3, [r4, #12]
 8012a6c:	9b01      	ldr	r3, [sp, #4]
 8012a6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012a72:	b15b      	cbz	r3, 8012a8c <__smakebuf_r+0x70>
 8012a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a78:	4630      	mov	r0, r6
 8012a7a:	f000 f81d 	bl	8012ab8 <_isatty_r>
 8012a7e:	b128      	cbz	r0, 8012a8c <__smakebuf_r+0x70>
 8012a80:	89a3      	ldrh	r3, [r4, #12]
 8012a82:	f023 0303 	bic.w	r3, r3, #3
 8012a86:	f043 0301 	orr.w	r3, r3, #1
 8012a8a:	81a3      	strh	r3, [r4, #12]
 8012a8c:	89a3      	ldrh	r3, [r4, #12]
 8012a8e:	431d      	orrs	r5, r3
 8012a90:	81a5      	strh	r5, [r4, #12]
 8012a92:	e7cf      	b.n	8012a34 <__smakebuf_r+0x18>

08012a94 <_fstat_r>:
 8012a94:	b538      	push	{r3, r4, r5, lr}
 8012a96:	4d07      	ldr	r5, [pc, #28]	@ (8012ab4 <_fstat_r+0x20>)
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	4608      	mov	r0, r1
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	602b      	str	r3, [r5, #0]
 8012aa2:	f7f4 fa0d 	bl	8006ec0 <_fstat>
 8012aa6:	1c43      	adds	r3, r0, #1
 8012aa8:	d102      	bne.n	8012ab0 <_fstat_r+0x1c>
 8012aaa:	682b      	ldr	r3, [r5, #0]
 8012aac:	b103      	cbz	r3, 8012ab0 <_fstat_r+0x1c>
 8012aae:	6023      	str	r3, [r4, #0]
 8012ab0:	bd38      	pop	{r3, r4, r5, pc}
 8012ab2:	bf00      	nop
 8012ab4:	20005b38 	.word	0x20005b38

08012ab8 <_isatty_r>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	4d06      	ldr	r5, [pc, #24]	@ (8012ad4 <_isatty_r+0x1c>)
 8012abc:	2300      	movs	r3, #0
 8012abe:	4604      	mov	r4, r0
 8012ac0:	4608      	mov	r0, r1
 8012ac2:	602b      	str	r3, [r5, #0]
 8012ac4:	f7f4 fa0c 	bl	8006ee0 <_isatty>
 8012ac8:	1c43      	adds	r3, r0, #1
 8012aca:	d102      	bne.n	8012ad2 <_isatty_r+0x1a>
 8012acc:	682b      	ldr	r3, [r5, #0]
 8012ace:	b103      	cbz	r3, 8012ad2 <_isatty_r+0x1a>
 8012ad0:	6023      	str	r3, [r4, #0]
 8012ad2:	bd38      	pop	{r3, r4, r5, pc}
 8012ad4:	20005b38 	.word	0x20005b38

08012ad8 <_raise_r>:
 8012ad8:	291f      	cmp	r1, #31
 8012ada:	b538      	push	{r3, r4, r5, lr}
 8012adc:	4605      	mov	r5, r0
 8012ade:	460c      	mov	r4, r1
 8012ae0:	d904      	bls.n	8012aec <_raise_r+0x14>
 8012ae2:	2316      	movs	r3, #22
 8012ae4:	6003      	str	r3, [r0, #0]
 8012ae6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012aea:	bd38      	pop	{r3, r4, r5, pc}
 8012aec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012aee:	b112      	cbz	r2, 8012af6 <_raise_r+0x1e>
 8012af0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012af4:	b94b      	cbnz	r3, 8012b0a <_raise_r+0x32>
 8012af6:	4628      	mov	r0, r5
 8012af8:	f000 f830 	bl	8012b5c <_getpid_r>
 8012afc:	4622      	mov	r2, r4
 8012afe:	4601      	mov	r1, r0
 8012b00:	4628      	mov	r0, r5
 8012b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b06:	f000 b817 	b.w	8012b38 <_kill_r>
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	d00a      	beq.n	8012b24 <_raise_r+0x4c>
 8012b0e:	1c59      	adds	r1, r3, #1
 8012b10:	d103      	bne.n	8012b1a <_raise_r+0x42>
 8012b12:	2316      	movs	r3, #22
 8012b14:	6003      	str	r3, [r0, #0]
 8012b16:	2001      	movs	r0, #1
 8012b18:	e7e7      	b.n	8012aea <_raise_r+0x12>
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012b20:	4620      	mov	r0, r4
 8012b22:	4798      	blx	r3
 8012b24:	2000      	movs	r0, #0
 8012b26:	e7e0      	b.n	8012aea <_raise_r+0x12>

08012b28 <raise>:
 8012b28:	4b02      	ldr	r3, [pc, #8]	@ (8012b34 <raise+0xc>)
 8012b2a:	4601      	mov	r1, r0
 8012b2c:	6818      	ldr	r0, [r3, #0]
 8012b2e:	f7ff bfd3 	b.w	8012ad8 <_raise_r>
 8012b32:	bf00      	nop
 8012b34:	200000c0 	.word	0x200000c0

08012b38 <_kill_r>:
 8012b38:	b538      	push	{r3, r4, r5, lr}
 8012b3a:	4d07      	ldr	r5, [pc, #28]	@ (8012b58 <_kill_r+0x20>)
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	4604      	mov	r4, r0
 8012b40:	4608      	mov	r0, r1
 8012b42:	4611      	mov	r1, r2
 8012b44:	602b      	str	r3, [r5, #0]
 8012b46:	f7f4 f95b 	bl	8006e00 <_kill>
 8012b4a:	1c43      	adds	r3, r0, #1
 8012b4c:	d102      	bne.n	8012b54 <_kill_r+0x1c>
 8012b4e:	682b      	ldr	r3, [r5, #0]
 8012b50:	b103      	cbz	r3, 8012b54 <_kill_r+0x1c>
 8012b52:	6023      	str	r3, [r4, #0]
 8012b54:	bd38      	pop	{r3, r4, r5, pc}
 8012b56:	bf00      	nop
 8012b58:	20005b38 	.word	0x20005b38

08012b5c <_getpid_r>:
 8012b5c:	f7f4 b948 	b.w	8006df0 <_getpid>

08012b60 <cos>:
 8012b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b62:	ec53 2b10 	vmov	r2, r3, d0
 8012b66:	4826      	ldr	r0, [pc, #152]	@ (8012c00 <cos+0xa0>)
 8012b68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012b6c:	4281      	cmp	r1, r0
 8012b6e:	d806      	bhi.n	8012b7e <cos+0x1e>
 8012b70:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012bf8 <cos+0x98>
 8012b74:	b005      	add	sp, #20
 8012b76:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b7a:	f000 bded 	b.w	8013758 <__kernel_cos>
 8012b7e:	4821      	ldr	r0, [pc, #132]	@ (8012c04 <cos+0xa4>)
 8012b80:	4281      	cmp	r1, r0
 8012b82:	d908      	bls.n	8012b96 <cos+0x36>
 8012b84:	4610      	mov	r0, r2
 8012b86:	4619      	mov	r1, r3
 8012b88:	f7ed fb7e 	bl	8000288 <__aeabi_dsub>
 8012b8c:	ec41 0b10 	vmov	d0, r0, r1
 8012b90:	b005      	add	sp, #20
 8012b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b96:	4668      	mov	r0, sp
 8012b98:	f000 f88a 	bl	8012cb0 <__ieee754_rem_pio2>
 8012b9c:	f000 0003 	and.w	r0, r0, #3
 8012ba0:	2801      	cmp	r0, #1
 8012ba2:	d00b      	beq.n	8012bbc <cos+0x5c>
 8012ba4:	2802      	cmp	r0, #2
 8012ba6:	d015      	beq.n	8012bd4 <cos+0x74>
 8012ba8:	b9d8      	cbnz	r0, 8012be2 <cos+0x82>
 8012baa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bae:	ed9d 0b00 	vldr	d0, [sp]
 8012bb2:	f000 fdd1 	bl	8013758 <__kernel_cos>
 8012bb6:	ec51 0b10 	vmov	r0, r1, d0
 8012bba:	e7e7      	b.n	8012b8c <cos+0x2c>
 8012bbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bc0:	ed9d 0b00 	vldr	d0, [sp]
 8012bc4:	f000 fe90 	bl	80138e8 <__kernel_sin>
 8012bc8:	ec53 2b10 	vmov	r2, r3, d0
 8012bcc:	4610      	mov	r0, r2
 8012bce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012bd2:	e7db      	b.n	8012b8c <cos+0x2c>
 8012bd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012bd8:	ed9d 0b00 	vldr	d0, [sp]
 8012bdc:	f000 fdbc 	bl	8013758 <__kernel_cos>
 8012be0:	e7f2      	b.n	8012bc8 <cos+0x68>
 8012be2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012be6:	ed9d 0b00 	vldr	d0, [sp]
 8012bea:	2001      	movs	r0, #1
 8012bec:	f000 fe7c 	bl	80138e8 <__kernel_sin>
 8012bf0:	e7e1      	b.n	8012bb6 <cos+0x56>
 8012bf2:	bf00      	nop
 8012bf4:	f3af 8000 	nop.w
	...
 8012c00:	3fe921fb 	.word	0x3fe921fb
 8012c04:	7fefffff 	.word	0x7fefffff

08012c08 <sin>:
 8012c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c0a:	ec53 2b10 	vmov	r2, r3, d0
 8012c0e:	4826      	ldr	r0, [pc, #152]	@ (8012ca8 <sin+0xa0>)
 8012c10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012c14:	4281      	cmp	r1, r0
 8012c16:	d807      	bhi.n	8012c28 <sin+0x20>
 8012c18:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012ca0 <sin+0x98>
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	b005      	add	sp, #20
 8012c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c24:	f000 be60 	b.w	80138e8 <__kernel_sin>
 8012c28:	4820      	ldr	r0, [pc, #128]	@ (8012cac <sin+0xa4>)
 8012c2a:	4281      	cmp	r1, r0
 8012c2c:	d908      	bls.n	8012c40 <sin+0x38>
 8012c2e:	4610      	mov	r0, r2
 8012c30:	4619      	mov	r1, r3
 8012c32:	f7ed fb29 	bl	8000288 <__aeabi_dsub>
 8012c36:	ec41 0b10 	vmov	d0, r0, r1
 8012c3a:	b005      	add	sp, #20
 8012c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c40:	4668      	mov	r0, sp
 8012c42:	f000 f835 	bl	8012cb0 <__ieee754_rem_pio2>
 8012c46:	f000 0003 	and.w	r0, r0, #3
 8012c4a:	2801      	cmp	r0, #1
 8012c4c:	d00c      	beq.n	8012c68 <sin+0x60>
 8012c4e:	2802      	cmp	r0, #2
 8012c50:	d011      	beq.n	8012c76 <sin+0x6e>
 8012c52:	b9e8      	cbnz	r0, 8012c90 <sin+0x88>
 8012c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c58:	ed9d 0b00 	vldr	d0, [sp]
 8012c5c:	2001      	movs	r0, #1
 8012c5e:	f000 fe43 	bl	80138e8 <__kernel_sin>
 8012c62:	ec51 0b10 	vmov	r0, r1, d0
 8012c66:	e7e6      	b.n	8012c36 <sin+0x2e>
 8012c68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c6c:	ed9d 0b00 	vldr	d0, [sp]
 8012c70:	f000 fd72 	bl	8013758 <__kernel_cos>
 8012c74:	e7f5      	b.n	8012c62 <sin+0x5a>
 8012c76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c7a:	ed9d 0b00 	vldr	d0, [sp]
 8012c7e:	2001      	movs	r0, #1
 8012c80:	f000 fe32 	bl	80138e8 <__kernel_sin>
 8012c84:	ec53 2b10 	vmov	r2, r3, d0
 8012c88:	4610      	mov	r0, r2
 8012c8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012c8e:	e7d2      	b.n	8012c36 <sin+0x2e>
 8012c90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012c94:	ed9d 0b00 	vldr	d0, [sp]
 8012c98:	f000 fd5e 	bl	8013758 <__kernel_cos>
 8012c9c:	e7f2      	b.n	8012c84 <sin+0x7c>
 8012c9e:	bf00      	nop
	...
 8012ca8:	3fe921fb 	.word	0x3fe921fb
 8012cac:	7fefffff 	.word	0x7fefffff

08012cb0 <__ieee754_rem_pio2>:
 8012cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb4:	ec57 6b10 	vmov	r6, r7, d0
 8012cb8:	4bc5      	ldr	r3, [pc, #788]	@ (8012fd0 <__ieee754_rem_pio2+0x320>)
 8012cba:	b08d      	sub	sp, #52	@ 0x34
 8012cbc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012cc0:	4598      	cmp	r8, r3
 8012cc2:	4604      	mov	r4, r0
 8012cc4:	9704      	str	r7, [sp, #16]
 8012cc6:	d807      	bhi.n	8012cd8 <__ieee754_rem_pio2+0x28>
 8012cc8:	2200      	movs	r2, #0
 8012cca:	2300      	movs	r3, #0
 8012ccc:	ed80 0b00 	vstr	d0, [r0]
 8012cd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012cd4:	2500      	movs	r5, #0
 8012cd6:	e028      	b.n	8012d2a <__ieee754_rem_pio2+0x7a>
 8012cd8:	4bbe      	ldr	r3, [pc, #760]	@ (8012fd4 <__ieee754_rem_pio2+0x324>)
 8012cda:	4598      	cmp	r8, r3
 8012cdc:	d878      	bhi.n	8012dd0 <__ieee754_rem_pio2+0x120>
 8012cde:	9b04      	ldr	r3, [sp, #16]
 8012ce0:	4dbd      	ldr	r5, [pc, #756]	@ (8012fd8 <__ieee754_rem_pio2+0x328>)
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012f98 <__ieee754_rem_pio2+0x2e8>)
 8012ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cec:	4639      	mov	r1, r7
 8012cee:	dd38      	ble.n	8012d62 <__ieee754_rem_pio2+0xb2>
 8012cf0:	f7ed faca 	bl	8000288 <__aeabi_dsub>
 8012cf4:	45a8      	cmp	r8, r5
 8012cf6:	4606      	mov	r6, r0
 8012cf8:	460f      	mov	r7, r1
 8012cfa:	d01a      	beq.n	8012d32 <__ieee754_rem_pio2+0x82>
 8012cfc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012fa0 <__ieee754_rem_pio2+0x2f0>)
 8012cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d02:	f7ed fac1 	bl	8000288 <__aeabi_dsub>
 8012d06:	4602      	mov	r2, r0
 8012d08:	460b      	mov	r3, r1
 8012d0a:	4680      	mov	r8, r0
 8012d0c:	4689      	mov	r9, r1
 8012d0e:	4630      	mov	r0, r6
 8012d10:	4639      	mov	r1, r7
 8012d12:	f7ed fab9 	bl	8000288 <__aeabi_dsub>
 8012d16:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012fa0 <__ieee754_rem_pio2+0x2f0>)
 8012d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1c:	f7ed fab4 	bl	8000288 <__aeabi_dsub>
 8012d20:	e9c4 8900 	strd	r8, r9, [r4]
 8012d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012d28:	2501      	movs	r5, #1
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	b00d      	add	sp, #52	@ 0x34
 8012d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d32:	a39d      	add	r3, pc, #628	@ (adr r3, 8012fa8 <__ieee754_rem_pio2+0x2f8>)
 8012d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d38:	f7ed faa6 	bl	8000288 <__aeabi_dsub>
 8012d3c:	a39c      	add	r3, pc, #624	@ (adr r3, 8012fb0 <__ieee754_rem_pio2+0x300>)
 8012d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d42:	4606      	mov	r6, r0
 8012d44:	460f      	mov	r7, r1
 8012d46:	f7ed fa9f 	bl	8000288 <__aeabi_dsub>
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	4680      	mov	r8, r0
 8012d50:	4689      	mov	r9, r1
 8012d52:	4630      	mov	r0, r6
 8012d54:	4639      	mov	r1, r7
 8012d56:	f7ed fa97 	bl	8000288 <__aeabi_dsub>
 8012d5a:	a395      	add	r3, pc, #596	@ (adr r3, 8012fb0 <__ieee754_rem_pio2+0x300>)
 8012d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d60:	e7dc      	b.n	8012d1c <__ieee754_rem_pio2+0x6c>
 8012d62:	f7ed fa93 	bl	800028c <__adddf3>
 8012d66:	45a8      	cmp	r8, r5
 8012d68:	4606      	mov	r6, r0
 8012d6a:	460f      	mov	r7, r1
 8012d6c:	d018      	beq.n	8012da0 <__ieee754_rem_pio2+0xf0>
 8012d6e:	a38c      	add	r3, pc, #560	@ (adr r3, 8012fa0 <__ieee754_rem_pio2+0x2f0>)
 8012d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d74:	f7ed fa8a 	bl	800028c <__adddf3>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	4680      	mov	r8, r0
 8012d7e:	4689      	mov	r9, r1
 8012d80:	4630      	mov	r0, r6
 8012d82:	4639      	mov	r1, r7
 8012d84:	f7ed fa80 	bl	8000288 <__aeabi_dsub>
 8012d88:	a385      	add	r3, pc, #532	@ (adr r3, 8012fa0 <__ieee754_rem_pio2+0x2f0>)
 8012d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8e:	f7ed fa7d 	bl	800028c <__adddf3>
 8012d92:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8012d96:	e9c4 8900 	strd	r8, r9, [r4]
 8012d9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012d9e:	e7c4      	b.n	8012d2a <__ieee754_rem_pio2+0x7a>
 8012da0:	a381      	add	r3, pc, #516	@ (adr r3, 8012fa8 <__ieee754_rem_pio2+0x2f8>)
 8012da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da6:	f7ed fa71 	bl	800028c <__adddf3>
 8012daa:	a381      	add	r3, pc, #516	@ (adr r3, 8012fb0 <__ieee754_rem_pio2+0x300>)
 8012dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db0:	4606      	mov	r6, r0
 8012db2:	460f      	mov	r7, r1
 8012db4:	f7ed fa6a 	bl	800028c <__adddf3>
 8012db8:	4602      	mov	r2, r0
 8012dba:	460b      	mov	r3, r1
 8012dbc:	4680      	mov	r8, r0
 8012dbe:	4689      	mov	r9, r1
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	4639      	mov	r1, r7
 8012dc4:	f7ed fa60 	bl	8000288 <__aeabi_dsub>
 8012dc8:	a379      	add	r3, pc, #484	@ (adr r3, 8012fb0 <__ieee754_rem_pio2+0x300>)
 8012dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dce:	e7de      	b.n	8012d8e <__ieee754_rem_pio2+0xde>
 8012dd0:	4b82      	ldr	r3, [pc, #520]	@ (8012fdc <__ieee754_rem_pio2+0x32c>)
 8012dd2:	4598      	cmp	r8, r3
 8012dd4:	f200 80d1 	bhi.w	8012f7a <__ieee754_rem_pio2+0x2ca>
 8012dd8:	f000 fe40 	bl	8013a5c <fabs>
 8012ddc:	ec57 6b10 	vmov	r6, r7, d0
 8012de0:	a375      	add	r3, pc, #468	@ (adr r3, 8012fb8 <__ieee754_rem_pio2+0x308>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	4630      	mov	r0, r6
 8012de8:	4639      	mov	r1, r7
 8012dea:	f7ed fc05 	bl	80005f8 <__aeabi_dmul>
 8012dee:	4b7c      	ldr	r3, [pc, #496]	@ (8012fe0 <__ieee754_rem_pio2+0x330>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	f7ed fa4b 	bl	800028c <__adddf3>
 8012df6:	f7ed feaf 	bl	8000b58 <__aeabi_d2iz>
 8012dfa:	4605      	mov	r5, r0
 8012dfc:	f7ed fb92 	bl	8000524 <__aeabi_i2d>
 8012e00:	4602      	mov	r2, r0
 8012e02:	460b      	mov	r3, r1
 8012e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e08:	a363      	add	r3, pc, #396	@ (adr r3, 8012f98 <__ieee754_rem_pio2+0x2e8>)
 8012e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0e:	f7ed fbf3 	bl	80005f8 <__aeabi_dmul>
 8012e12:	4602      	mov	r2, r0
 8012e14:	460b      	mov	r3, r1
 8012e16:	4630      	mov	r0, r6
 8012e18:	4639      	mov	r1, r7
 8012e1a:	f7ed fa35 	bl	8000288 <__aeabi_dsub>
 8012e1e:	a360      	add	r3, pc, #384	@ (adr r3, 8012fa0 <__ieee754_rem_pio2+0x2f0>)
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	4682      	mov	sl, r0
 8012e26:	468b      	mov	fp, r1
 8012e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e2c:	f7ed fbe4 	bl	80005f8 <__aeabi_dmul>
 8012e30:	2d1f      	cmp	r5, #31
 8012e32:	4606      	mov	r6, r0
 8012e34:	460f      	mov	r7, r1
 8012e36:	dc0c      	bgt.n	8012e52 <__ieee754_rem_pio2+0x1a2>
 8012e38:	4b6a      	ldr	r3, [pc, #424]	@ (8012fe4 <__ieee754_rem_pio2+0x334>)
 8012e3a:	1e6a      	subs	r2, r5, #1
 8012e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e40:	4543      	cmp	r3, r8
 8012e42:	d006      	beq.n	8012e52 <__ieee754_rem_pio2+0x1a2>
 8012e44:	4632      	mov	r2, r6
 8012e46:	463b      	mov	r3, r7
 8012e48:	4650      	mov	r0, sl
 8012e4a:	4659      	mov	r1, fp
 8012e4c:	f7ed fa1c 	bl	8000288 <__aeabi_dsub>
 8012e50:	e00e      	b.n	8012e70 <__ieee754_rem_pio2+0x1c0>
 8012e52:	463b      	mov	r3, r7
 8012e54:	4632      	mov	r2, r6
 8012e56:	4650      	mov	r0, sl
 8012e58:	4659      	mov	r1, fp
 8012e5a:	f7ed fa15 	bl	8000288 <__aeabi_dsub>
 8012e5e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012e62:	9305      	str	r3, [sp, #20]
 8012e64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012e68:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012e6c:	2b10      	cmp	r3, #16
 8012e6e:	dc02      	bgt.n	8012e76 <__ieee754_rem_pio2+0x1c6>
 8012e70:	e9c4 0100 	strd	r0, r1, [r4]
 8012e74:	e039      	b.n	8012eea <__ieee754_rem_pio2+0x23a>
 8012e76:	a34c      	add	r3, pc, #304	@ (adr r3, 8012fa8 <__ieee754_rem_pio2+0x2f8>)
 8012e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e80:	f7ed fbba 	bl	80005f8 <__aeabi_dmul>
 8012e84:	4606      	mov	r6, r0
 8012e86:	460f      	mov	r7, r1
 8012e88:	4602      	mov	r2, r0
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	4650      	mov	r0, sl
 8012e8e:	4659      	mov	r1, fp
 8012e90:	f7ed f9fa 	bl	8000288 <__aeabi_dsub>
 8012e94:	4602      	mov	r2, r0
 8012e96:	460b      	mov	r3, r1
 8012e98:	4680      	mov	r8, r0
 8012e9a:	4689      	mov	r9, r1
 8012e9c:	4650      	mov	r0, sl
 8012e9e:	4659      	mov	r1, fp
 8012ea0:	f7ed f9f2 	bl	8000288 <__aeabi_dsub>
 8012ea4:	4632      	mov	r2, r6
 8012ea6:	463b      	mov	r3, r7
 8012ea8:	f7ed f9ee 	bl	8000288 <__aeabi_dsub>
 8012eac:	a340      	add	r3, pc, #256	@ (adr r3, 8012fb0 <__ieee754_rem_pio2+0x300>)
 8012eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	460f      	mov	r7, r1
 8012eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eba:	f7ed fb9d 	bl	80005f8 <__aeabi_dmul>
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	463b      	mov	r3, r7
 8012ec2:	f7ed f9e1 	bl	8000288 <__aeabi_dsub>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4606      	mov	r6, r0
 8012ecc:	460f      	mov	r7, r1
 8012ece:	4640      	mov	r0, r8
 8012ed0:	4649      	mov	r1, r9
 8012ed2:	f7ed f9d9 	bl	8000288 <__aeabi_dsub>
 8012ed6:	9a05      	ldr	r2, [sp, #20]
 8012ed8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012edc:	1ad3      	subs	r3, r2, r3
 8012ede:	2b31      	cmp	r3, #49	@ 0x31
 8012ee0:	dc20      	bgt.n	8012f24 <__ieee754_rem_pio2+0x274>
 8012ee2:	e9c4 0100 	strd	r0, r1, [r4]
 8012ee6:	46c2      	mov	sl, r8
 8012ee8:	46cb      	mov	fp, r9
 8012eea:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012eee:	4650      	mov	r0, sl
 8012ef0:	4642      	mov	r2, r8
 8012ef2:	464b      	mov	r3, r9
 8012ef4:	4659      	mov	r1, fp
 8012ef6:	f7ed f9c7 	bl	8000288 <__aeabi_dsub>
 8012efa:	463b      	mov	r3, r7
 8012efc:	4632      	mov	r2, r6
 8012efe:	f7ed f9c3 	bl	8000288 <__aeabi_dsub>
 8012f02:	9b04      	ldr	r3, [sp, #16]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f0a:	f6bf af0e 	bge.w	8012d2a <__ieee754_rem_pio2+0x7a>
 8012f0e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012f12:	6063      	str	r3, [r4, #4]
 8012f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012f18:	f8c4 8000 	str.w	r8, [r4]
 8012f1c:	60a0      	str	r0, [r4, #8]
 8012f1e:	60e3      	str	r3, [r4, #12]
 8012f20:	426d      	negs	r5, r5
 8012f22:	e702      	b.n	8012d2a <__ieee754_rem_pio2+0x7a>
 8012f24:	a326      	add	r3, pc, #152	@ (adr r3, 8012fc0 <__ieee754_rem_pio2+0x310>)
 8012f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f2e:	f7ed fb63 	bl	80005f8 <__aeabi_dmul>
 8012f32:	4606      	mov	r6, r0
 8012f34:	460f      	mov	r7, r1
 8012f36:	4602      	mov	r2, r0
 8012f38:	460b      	mov	r3, r1
 8012f3a:	4640      	mov	r0, r8
 8012f3c:	4649      	mov	r1, r9
 8012f3e:	f7ed f9a3 	bl	8000288 <__aeabi_dsub>
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	4682      	mov	sl, r0
 8012f48:	468b      	mov	fp, r1
 8012f4a:	4640      	mov	r0, r8
 8012f4c:	4649      	mov	r1, r9
 8012f4e:	f7ed f99b 	bl	8000288 <__aeabi_dsub>
 8012f52:	4632      	mov	r2, r6
 8012f54:	463b      	mov	r3, r7
 8012f56:	f7ed f997 	bl	8000288 <__aeabi_dsub>
 8012f5a:	a31b      	add	r3, pc, #108	@ (adr r3, 8012fc8 <__ieee754_rem_pio2+0x318>)
 8012f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f60:	4606      	mov	r6, r0
 8012f62:	460f      	mov	r7, r1
 8012f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f68:	f7ed fb46 	bl	80005f8 <__aeabi_dmul>
 8012f6c:	4632      	mov	r2, r6
 8012f6e:	463b      	mov	r3, r7
 8012f70:	f7ed f98a 	bl	8000288 <__aeabi_dsub>
 8012f74:	4606      	mov	r6, r0
 8012f76:	460f      	mov	r7, r1
 8012f78:	e764      	b.n	8012e44 <__ieee754_rem_pio2+0x194>
 8012f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8012fe8 <__ieee754_rem_pio2+0x338>)
 8012f7c:	4598      	cmp	r8, r3
 8012f7e:	d935      	bls.n	8012fec <__ieee754_rem_pio2+0x33c>
 8012f80:	4632      	mov	r2, r6
 8012f82:	463b      	mov	r3, r7
 8012f84:	4630      	mov	r0, r6
 8012f86:	4639      	mov	r1, r7
 8012f88:	f7ed f97e 	bl	8000288 <__aeabi_dsub>
 8012f8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f90:	e9c4 0100 	strd	r0, r1, [r4]
 8012f94:	e69e      	b.n	8012cd4 <__ieee754_rem_pio2+0x24>
 8012f96:	bf00      	nop
 8012f98:	54400000 	.word	0x54400000
 8012f9c:	3ff921fb 	.word	0x3ff921fb
 8012fa0:	1a626331 	.word	0x1a626331
 8012fa4:	3dd0b461 	.word	0x3dd0b461
 8012fa8:	1a600000 	.word	0x1a600000
 8012fac:	3dd0b461 	.word	0x3dd0b461
 8012fb0:	2e037073 	.word	0x2e037073
 8012fb4:	3ba3198a 	.word	0x3ba3198a
 8012fb8:	6dc9c883 	.word	0x6dc9c883
 8012fbc:	3fe45f30 	.word	0x3fe45f30
 8012fc0:	2e000000 	.word	0x2e000000
 8012fc4:	3ba3198a 	.word	0x3ba3198a
 8012fc8:	252049c1 	.word	0x252049c1
 8012fcc:	397b839a 	.word	0x397b839a
 8012fd0:	3fe921fb 	.word	0x3fe921fb
 8012fd4:	4002d97b 	.word	0x4002d97b
 8012fd8:	3ff921fb 	.word	0x3ff921fb
 8012fdc:	413921fb 	.word	0x413921fb
 8012fe0:	3fe00000 	.word	0x3fe00000
 8012fe4:	08014278 	.word	0x08014278
 8012fe8:	7fefffff 	.word	0x7fefffff
 8012fec:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012ff0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8012ff4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	460f      	mov	r7, r1
 8012ffc:	f7ed fdac 	bl	8000b58 <__aeabi_d2iz>
 8013000:	f7ed fa90 	bl	8000524 <__aeabi_i2d>
 8013004:	4602      	mov	r2, r0
 8013006:	460b      	mov	r3, r1
 8013008:	4630      	mov	r0, r6
 801300a:	4639      	mov	r1, r7
 801300c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013010:	f7ed f93a 	bl	8000288 <__aeabi_dsub>
 8013014:	4b22      	ldr	r3, [pc, #136]	@ (80130a0 <__ieee754_rem_pio2+0x3f0>)
 8013016:	2200      	movs	r2, #0
 8013018:	f7ed faee 	bl	80005f8 <__aeabi_dmul>
 801301c:	460f      	mov	r7, r1
 801301e:	4606      	mov	r6, r0
 8013020:	f7ed fd9a 	bl	8000b58 <__aeabi_d2iz>
 8013024:	f7ed fa7e 	bl	8000524 <__aeabi_i2d>
 8013028:	4602      	mov	r2, r0
 801302a:	460b      	mov	r3, r1
 801302c:	4630      	mov	r0, r6
 801302e:	4639      	mov	r1, r7
 8013030:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013034:	f7ed f928 	bl	8000288 <__aeabi_dsub>
 8013038:	4b19      	ldr	r3, [pc, #100]	@ (80130a0 <__ieee754_rem_pio2+0x3f0>)
 801303a:	2200      	movs	r2, #0
 801303c:	f7ed fadc 	bl	80005f8 <__aeabi_dmul>
 8013040:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013044:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013048:	f04f 0803 	mov.w	r8, #3
 801304c:	2600      	movs	r6, #0
 801304e:	2700      	movs	r7, #0
 8013050:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013054:	4632      	mov	r2, r6
 8013056:	463b      	mov	r3, r7
 8013058:	46c2      	mov	sl, r8
 801305a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801305e:	f7ed fd33 	bl	8000ac8 <__aeabi_dcmpeq>
 8013062:	2800      	cmp	r0, #0
 8013064:	d1f4      	bne.n	8013050 <__ieee754_rem_pio2+0x3a0>
 8013066:	4b0f      	ldr	r3, [pc, #60]	@ (80130a4 <__ieee754_rem_pio2+0x3f4>)
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	2302      	movs	r3, #2
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	462a      	mov	r2, r5
 8013070:	4653      	mov	r3, sl
 8013072:	4621      	mov	r1, r4
 8013074:	a806      	add	r0, sp, #24
 8013076:	f000 f817 	bl	80130a8 <__kernel_rem_pio2>
 801307a:	9b04      	ldr	r3, [sp, #16]
 801307c:	2b00      	cmp	r3, #0
 801307e:	4605      	mov	r5, r0
 8013080:	f6bf ae53 	bge.w	8012d2a <__ieee754_rem_pio2+0x7a>
 8013084:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801308c:	e9c4 2300 	strd	r2, r3, [r4]
 8013090:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013094:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013098:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801309c:	e740      	b.n	8012f20 <__ieee754_rem_pio2+0x270>
 801309e:	bf00      	nop
 80130a0:	41700000 	.word	0x41700000
 80130a4:	080142f8 	.word	0x080142f8

080130a8 <__kernel_rem_pio2>:
 80130a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ac:	ed2d 8b02 	vpush	{d8}
 80130b0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80130b4:	f112 0f14 	cmn.w	r2, #20
 80130b8:	9306      	str	r3, [sp, #24]
 80130ba:	9104      	str	r1, [sp, #16]
 80130bc:	4bbe      	ldr	r3, [pc, #760]	@ (80133b8 <__kernel_rem_pio2+0x310>)
 80130be:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80130c0:	9008      	str	r0, [sp, #32]
 80130c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80130c6:	9300      	str	r3, [sp, #0]
 80130c8:	9b06      	ldr	r3, [sp, #24]
 80130ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80130ce:	bfa8      	it	ge
 80130d0:	1ed4      	subge	r4, r2, #3
 80130d2:	9305      	str	r3, [sp, #20]
 80130d4:	bfb2      	itee	lt
 80130d6:	2400      	movlt	r4, #0
 80130d8:	2318      	movge	r3, #24
 80130da:	fb94 f4f3 	sdivge	r4, r4, r3
 80130de:	f06f 0317 	mvn.w	r3, #23
 80130e2:	fb04 3303 	mla	r3, r4, r3, r3
 80130e6:	eb03 0b02 	add.w	fp, r3, r2
 80130ea:	9b00      	ldr	r3, [sp, #0]
 80130ec:	9a05      	ldr	r2, [sp, #20]
 80130ee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80133a8 <__kernel_rem_pio2+0x300>
 80130f2:	eb03 0802 	add.w	r8, r3, r2
 80130f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80130f8:	1aa7      	subs	r7, r4, r2
 80130fa:	ae20      	add	r6, sp, #128	@ 0x80
 80130fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013100:	2500      	movs	r5, #0
 8013102:	4545      	cmp	r5, r8
 8013104:	dd13      	ble.n	801312e <__kernel_rem_pio2+0x86>
 8013106:	9b06      	ldr	r3, [sp, #24]
 8013108:	aa20      	add	r2, sp, #128	@ 0x80
 801310a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801310e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013112:	f04f 0800 	mov.w	r8, #0
 8013116:	9b00      	ldr	r3, [sp, #0]
 8013118:	4598      	cmp	r8, r3
 801311a:	dc31      	bgt.n	8013180 <__kernel_rem_pio2+0xd8>
 801311c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80133a8 <__kernel_rem_pio2+0x300>
 8013120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013124:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013128:	462f      	mov	r7, r5
 801312a:	2600      	movs	r6, #0
 801312c:	e01b      	b.n	8013166 <__kernel_rem_pio2+0xbe>
 801312e:	42ef      	cmn	r7, r5
 8013130:	d407      	bmi.n	8013142 <__kernel_rem_pio2+0x9a>
 8013132:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013136:	f7ed f9f5 	bl	8000524 <__aeabi_i2d>
 801313a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801313e:	3501      	adds	r5, #1
 8013140:	e7df      	b.n	8013102 <__kernel_rem_pio2+0x5a>
 8013142:	ec51 0b18 	vmov	r0, r1, d8
 8013146:	e7f8      	b.n	801313a <__kernel_rem_pio2+0x92>
 8013148:	e9d7 2300 	ldrd	r2, r3, [r7]
 801314c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013150:	f7ed fa52 	bl	80005f8 <__aeabi_dmul>
 8013154:	4602      	mov	r2, r0
 8013156:	460b      	mov	r3, r1
 8013158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801315c:	f7ed f896 	bl	800028c <__adddf3>
 8013160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013164:	3601      	adds	r6, #1
 8013166:	9b05      	ldr	r3, [sp, #20]
 8013168:	429e      	cmp	r6, r3
 801316a:	f1a7 0708 	sub.w	r7, r7, #8
 801316e:	ddeb      	ble.n	8013148 <__kernel_rem_pio2+0xa0>
 8013170:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013174:	f108 0801 	add.w	r8, r8, #1
 8013178:	ecaa 7b02 	vstmia	sl!, {d7}
 801317c:	3508      	adds	r5, #8
 801317e:	e7ca      	b.n	8013116 <__kernel_rem_pio2+0x6e>
 8013180:	9b00      	ldr	r3, [sp, #0]
 8013182:	f8dd 8000 	ldr.w	r8, [sp]
 8013186:	aa0c      	add	r2, sp, #48	@ 0x30
 8013188:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801318c:	930a      	str	r3, [sp, #40]	@ 0x28
 801318e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013190:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013194:	9309      	str	r3, [sp, #36]	@ 0x24
 8013196:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801319a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801319c:	ab98      	add	r3, sp, #608	@ 0x260
 801319e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80131a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80131a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80131aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80131ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80131ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80131b2:	46a1      	mov	r9, r4
 80131b4:	46c2      	mov	sl, r8
 80131b6:	f1ba 0f00 	cmp.w	sl, #0
 80131ba:	f1a5 0508 	sub.w	r5, r5, #8
 80131be:	dc77      	bgt.n	80132b0 <__kernel_rem_pio2+0x208>
 80131c0:	4658      	mov	r0, fp
 80131c2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80131c6:	f000 fc53 	bl	8013a70 <scalbn>
 80131ca:	ec57 6b10 	vmov	r6, r7, d0
 80131ce:	2200      	movs	r2, #0
 80131d0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80131d4:	4630      	mov	r0, r6
 80131d6:	4639      	mov	r1, r7
 80131d8:	f7ed fa0e 	bl	80005f8 <__aeabi_dmul>
 80131dc:	ec41 0b10 	vmov	d0, r0, r1
 80131e0:	f000 fcc6 	bl	8013b70 <floor>
 80131e4:	4b75      	ldr	r3, [pc, #468]	@ (80133bc <__kernel_rem_pio2+0x314>)
 80131e6:	ec51 0b10 	vmov	r0, r1, d0
 80131ea:	2200      	movs	r2, #0
 80131ec:	f7ed fa04 	bl	80005f8 <__aeabi_dmul>
 80131f0:	4602      	mov	r2, r0
 80131f2:	460b      	mov	r3, r1
 80131f4:	4630      	mov	r0, r6
 80131f6:	4639      	mov	r1, r7
 80131f8:	f7ed f846 	bl	8000288 <__aeabi_dsub>
 80131fc:	460f      	mov	r7, r1
 80131fe:	4606      	mov	r6, r0
 8013200:	f7ed fcaa 	bl	8000b58 <__aeabi_d2iz>
 8013204:	9002      	str	r0, [sp, #8]
 8013206:	f7ed f98d 	bl	8000524 <__aeabi_i2d>
 801320a:	4602      	mov	r2, r0
 801320c:	460b      	mov	r3, r1
 801320e:	4630      	mov	r0, r6
 8013210:	4639      	mov	r1, r7
 8013212:	f7ed f839 	bl	8000288 <__aeabi_dsub>
 8013216:	f1bb 0f00 	cmp.w	fp, #0
 801321a:	4606      	mov	r6, r0
 801321c:	460f      	mov	r7, r1
 801321e:	dd6c      	ble.n	80132fa <__kernel_rem_pio2+0x252>
 8013220:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8013224:	ab0c      	add	r3, sp, #48	@ 0x30
 8013226:	9d02      	ldr	r5, [sp, #8]
 8013228:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801322c:	f1cb 0018 	rsb	r0, fp, #24
 8013230:	fa43 f200 	asr.w	r2, r3, r0
 8013234:	4415      	add	r5, r2
 8013236:	4082      	lsls	r2, r0
 8013238:	1a9b      	subs	r3, r3, r2
 801323a:	aa0c      	add	r2, sp, #48	@ 0x30
 801323c:	9502      	str	r5, [sp, #8]
 801323e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013242:	f1cb 0217 	rsb	r2, fp, #23
 8013246:	fa43 f902 	asr.w	r9, r3, r2
 801324a:	f1b9 0f00 	cmp.w	r9, #0
 801324e:	dd64      	ble.n	801331a <__kernel_rem_pio2+0x272>
 8013250:	9b02      	ldr	r3, [sp, #8]
 8013252:	2200      	movs	r2, #0
 8013254:	3301      	adds	r3, #1
 8013256:	9302      	str	r3, [sp, #8]
 8013258:	4615      	mov	r5, r2
 801325a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801325e:	4590      	cmp	r8, r2
 8013260:	f300 80b8 	bgt.w	80133d4 <__kernel_rem_pio2+0x32c>
 8013264:	f1bb 0f00 	cmp.w	fp, #0
 8013268:	dd07      	ble.n	801327a <__kernel_rem_pio2+0x1d2>
 801326a:	f1bb 0f01 	cmp.w	fp, #1
 801326e:	f000 80bf 	beq.w	80133f0 <__kernel_rem_pio2+0x348>
 8013272:	f1bb 0f02 	cmp.w	fp, #2
 8013276:	f000 80c6 	beq.w	8013406 <__kernel_rem_pio2+0x35e>
 801327a:	f1b9 0f02 	cmp.w	r9, #2
 801327e:	d14c      	bne.n	801331a <__kernel_rem_pio2+0x272>
 8013280:	4632      	mov	r2, r6
 8013282:	463b      	mov	r3, r7
 8013284:	494e      	ldr	r1, [pc, #312]	@ (80133c0 <__kernel_rem_pio2+0x318>)
 8013286:	2000      	movs	r0, #0
 8013288:	f7ec fffe 	bl	8000288 <__aeabi_dsub>
 801328c:	4606      	mov	r6, r0
 801328e:	460f      	mov	r7, r1
 8013290:	2d00      	cmp	r5, #0
 8013292:	d042      	beq.n	801331a <__kernel_rem_pio2+0x272>
 8013294:	4658      	mov	r0, fp
 8013296:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80133b0 <__kernel_rem_pio2+0x308>
 801329a:	f000 fbe9 	bl	8013a70 <scalbn>
 801329e:	4630      	mov	r0, r6
 80132a0:	4639      	mov	r1, r7
 80132a2:	ec53 2b10 	vmov	r2, r3, d0
 80132a6:	f7ec ffef 	bl	8000288 <__aeabi_dsub>
 80132aa:	4606      	mov	r6, r0
 80132ac:	460f      	mov	r7, r1
 80132ae:	e034      	b.n	801331a <__kernel_rem_pio2+0x272>
 80132b0:	4b44      	ldr	r3, [pc, #272]	@ (80133c4 <__kernel_rem_pio2+0x31c>)
 80132b2:	2200      	movs	r2, #0
 80132b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132b8:	f7ed f99e 	bl	80005f8 <__aeabi_dmul>
 80132bc:	f7ed fc4c 	bl	8000b58 <__aeabi_d2iz>
 80132c0:	f7ed f930 	bl	8000524 <__aeabi_i2d>
 80132c4:	4b40      	ldr	r3, [pc, #256]	@ (80133c8 <__kernel_rem_pio2+0x320>)
 80132c6:	2200      	movs	r2, #0
 80132c8:	4606      	mov	r6, r0
 80132ca:	460f      	mov	r7, r1
 80132cc:	f7ed f994 	bl	80005f8 <__aeabi_dmul>
 80132d0:	4602      	mov	r2, r0
 80132d2:	460b      	mov	r3, r1
 80132d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132d8:	f7ec ffd6 	bl	8000288 <__aeabi_dsub>
 80132dc:	f7ed fc3c 	bl	8000b58 <__aeabi_d2iz>
 80132e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80132e4:	f849 0b04 	str.w	r0, [r9], #4
 80132e8:	4639      	mov	r1, r7
 80132ea:	4630      	mov	r0, r6
 80132ec:	f7ec ffce 	bl	800028c <__adddf3>
 80132f0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80132f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132f8:	e75d      	b.n	80131b6 <__kernel_rem_pio2+0x10e>
 80132fa:	d107      	bne.n	801330c <__kernel_rem_pio2+0x264>
 80132fc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8013300:	aa0c      	add	r2, sp, #48	@ 0x30
 8013302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013306:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801330a:	e79e      	b.n	801324a <__kernel_rem_pio2+0x1a2>
 801330c:	4b2f      	ldr	r3, [pc, #188]	@ (80133cc <__kernel_rem_pio2+0x324>)
 801330e:	2200      	movs	r2, #0
 8013310:	f7ed fbf8 	bl	8000b04 <__aeabi_dcmpge>
 8013314:	2800      	cmp	r0, #0
 8013316:	d143      	bne.n	80133a0 <__kernel_rem_pio2+0x2f8>
 8013318:	4681      	mov	r9, r0
 801331a:	2200      	movs	r2, #0
 801331c:	2300      	movs	r3, #0
 801331e:	4630      	mov	r0, r6
 8013320:	4639      	mov	r1, r7
 8013322:	f7ed fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8013326:	2800      	cmp	r0, #0
 8013328:	f000 80bf 	beq.w	80134aa <__kernel_rem_pio2+0x402>
 801332c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8013330:	2200      	movs	r2, #0
 8013332:	9900      	ldr	r1, [sp, #0]
 8013334:	428b      	cmp	r3, r1
 8013336:	da6e      	bge.n	8013416 <__kernel_rem_pio2+0x36e>
 8013338:	2a00      	cmp	r2, #0
 801333a:	f000 8089 	beq.w	8013450 <__kernel_rem_pio2+0x3a8>
 801333e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013342:	ab0c      	add	r3, sp, #48	@ 0x30
 8013344:	f1ab 0b18 	sub.w	fp, fp, #24
 8013348:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d0f6      	beq.n	801333e <__kernel_rem_pio2+0x296>
 8013350:	4658      	mov	r0, fp
 8013352:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80133b0 <__kernel_rem_pio2+0x308>
 8013356:	f000 fb8b 	bl	8013a70 <scalbn>
 801335a:	f108 0301 	add.w	r3, r8, #1
 801335e:	00da      	lsls	r2, r3, #3
 8013360:	9205      	str	r2, [sp, #20]
 8013362:	ec55 4b10 	vmov	r4, r5, d0
 8013366:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013368:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80133c4 <__kernel_rem_pio2+0x31c>
 801336c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013370:	4646      	mov	r6, r8
 8013372:	f04f 0a00 	mov.w	sl, #0
 8013376:	2e00      	cmp	r6, #0
 8013378:	f280 80cf 	bge.w	801351a <__kernel_rem_pio2+0x472>
 801337c:	4644      	mov	r4, r8
 801337e:	2c00      	cmp	r4, #0
 8013380:	f2c0 80fd 	blt.w	801357e <__kernel_rem_pio2+0x4d6>
 8013384:	4b12      	ldr	r3, [pc, #72]	@ (80133d0 <__kernel_rem_pio2+0x328>)
 8013386:	461f      	mov	r7, r3
 8013388:	ab70      	add	r3, sp, #448	@ 0x1c0
 801338a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801338e:	9306      	str	r3, [sp, #24]
 8013390:	f04f 0a00 	mov.w	sl, #0
 8013394:	f04f 0b00 	mov.w	fp, #0
 8013398:	2600      	movs	r6, #0
 801339a:	eba8 0504 	sub.w	r5, r8, r4
 801339e:	e0e2      	b.n	8013566 <__kernel_rem_pio2+0x4be>
 80133a0:	f04f 0902 	mov.w	r9, #2
 80133a4:	e754      	b.n	8013250 <__kernel_rem_pio2+0x1a8>
 80133a6:	bf00      	nop
	...
 80133b4:	3ff00000 	.word	0x3ff00000
 80133b8:	08014440 	.word	0x08014440
 80133bc:	40200000 	.word	0x40200000
 80133c0:	3ff00000 	.word	0x3ff00000
 80133c4:	3e700000 	.word	0x3e700000
 80133c8:	41700000 	.word	0x41700000
 80133cc:	3fe00000 	.word	0x3fe00000
 80133d0:	08014400 	.word	0x08014400
 80133d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80133d8:	b945      	cbnz	r5, 80133ec <__kernel_rem_pio2+0x344>
 80133da:	b123      	cbz	r3, 80133e6 <__kernel_rem_pio2+0x33e>
 80133dc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80133e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80133e4:	2301      	movs	r3, #1
 80133e6:	3201      	adds	r2, #1
 80133e8:	461d      	mov	r5, r3
 80133ea:	e738      	b.n	801325e <__kernel_rem_pio2+0x1b6>
 80133ec:	1acb      	subs	r3, r1, r3
 80133ee:	e7f7      	b.n	80133e0 <__kernel_rem_pio2+0x338>
 80133f0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80133f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80133f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80133fe:	a90c      	add	r1, sp, #48	@ 0x30
 8013400:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013404:	e739      	b.n	801327a <__kernel_rem_pio2+0x1d2>
 8013406:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801340a:	ab0c      	add	r3, sp, #48	@ 0x30
 801340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013410:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013414:	e7f3      	b.n	80133fe <__kernel_rem_pio2+0x356>
 8013416:	a90c      	add	r1, sp, #48	@ 0x30
 8013418:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801341c:	3b01      	subs	r3, #1
 801341e:	430a      	orrs	r2, r1
 8013420:	e787      	b.n	8013332 <__kernel_rem_pio2+0x28a>
 8013422:	3401      	adds	r4, #1
 8013424:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013428:	2a00      	cmp	r2, #0
 801342a:	d0fa      	beq.n	8013422 <__kernel_rem_pio2+0x37a>
 801342c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801342e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013432:	eb0d 0503 	add.w	r5, sp, r3
 8013436:	9b06      	ldr	r3, [sp, #24]
 8013438:	aa20      	add	r2, sp, #128	@ 0x80
 801343a:	4443      	add	r3, r8
 801343c:	f108 0701 	add.w	r7, r8, #1
 8013440:	3d98      	subs	r5, #152	@ 0x98
 8013442:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013446:	4444      	add	r4, r8
 8013448:	42bc      	cmp	r4, r7
 801344a:	da04      	bge.n	8013456 <__kernel_rem_pio2+0x3ae>
 801344c:	46a0      	mov	r8, r4
 801344e:	e6a2      	b.n	8013196 <__kernel_rem_pio2+0xee>
 8013450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013452:	2401      	movs	r4, #1
 8013454:	e7e6      	b.n	8013424 <__kernel_rem_pio2+0x37c>
 8013456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013458:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801345c:	f7ed f862 	bl	8000524 <__aeabi_i2d>
 8013460:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8013728 <__kernel_rem_pio2+0x680>
 8013464:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013468:	ed8d 7b02 	vstr	d7, [sp, #8]
 801346c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013470:	46b2      	mov	sl, r6
 8013472:	f04f 0800 	mov.w	r8, #0
 8013476:	9b05      	ldr	r3, [sp, #20]
 8013478:	4598      	cmp	r8, r3
 801347a:	dd05      	ble.n	8013488 <__kernel_rem_pio2+0x3e0>
 801347c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013480:	3701      	adds	r7, #1
 8013482:	eca5 7b02 	vstmia	r5!, {d7}
 8013486:	e7df      	b.n	8013448 <__kernel_rem_pio2+0x3a0>
 8013488:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801348c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013490:	f7ed f8b2 	bl	80005f8 <__aeabi_dmul>
 8013494:	4602      	mov	r2, r0
 8013496:	460b      	mov	r3, r1
 8013498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801349c:	f7ec fef6 	bl	800028c <__adddf3>
 80134a0:	f108 0801 	add.w	r8, r8, #1
 80134a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134a8:	e7e5      	b.n	8013476 <__kernel_rem_pio2+0x3ce>
 80134aa:	f1cb 0000 	rsb	r0, fp, #0
 80134ae:	ec47 6b10 	vmov	d0, r6, r7
 80134b2:	f000 fadd 	bl	8013a70 <scalbn>
 80134b6:	ec55 4b10 	vmov	r4, r5, d0
 80134ba:	4b9d      	ldr	r3, [pc, #628]	@ (8013730 <__kernel_rem_pio2+0x688>)
 80134bc:	2200      	movs	r2, #0
 80134be:	4620      	mov	r0, r4
 80134c0:	4629      	mov	r1, r5
 80134c2:	f7ed fb1f 	bl	8000b04 <__aeabi_dcmpge>
 80134c6:	b300      	cbz	r0, 801350a <__kernel_rem_pio2+0x462>
 80134c8:	4b9a      	ldr	r3, [pc, #616]	@ (8013734 <__kernel_rem_pio2+0x68c>)
 80134ca:	2200      	movs	r2, #0
 80134cc:	4620      	mov	r0, r4
 80134ce:	4629      	mov	r1, r5
 80134d0:	f7ed f892 	bl	80005f8 <__aeabi_dmul>
 80134d4:	f7ed fb40 	bl	8000b58 <__aeabi_d2iz>
 80134d8:	4606      	mov	r6, r0
 80134da:	f7ed f823 	bl	8000524 <__aeabi_i2d>
 80134de:	4b94      	ldr	r3, [pc, #592]	@ (8013730 <__kernel_rem_pio2+0x688>)
 80134e0:	2200      	movs	r2, #0
 80134e2:	f7ed f889 	bl	80005f8 <__aeabi_dmul>
 80134e6:	460b      	mov	r3, r1
 80134e8:	4602      	mov	r2, r0
 80134ea:	4629      	mov	r1, r5
 80134ec:	4620      	mov	r0, r4
 80134ee:	f7ec fecb 	bl	8000288 <__aeabi_dsub>
 80134f2:	f7ed fb31 	bl	8000b58 <__aeabi_d2iz>
 80134f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80134f8:	f10b 0b18 	add.w	fp, fp, #24
 80134fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013500:	f108 0801 	add.w	r8, r8, #1
 8013504:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013508:	e722      	b.n	8013350 <__kernel_rem_pio2+0x2a8>
 801350a:	4620      	mov	r0, r4
 801350c:	4629      	mov	r1, r5
 801350e:	f7ed fb23 	bl	8000b58 <__aeabi_d2iz>
 8013512:	ab0c      	add	r3, sp, #48	@ 0x30
 8013514:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013518:	e71a      	b.n	8013350 <__kernel_rem_pio2+0x2a8>
 801351a:	ab0c      	add	r3, sp, #48	@ 0x30
 801351c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013520:	f7ed f800 	bl	8000524 <__aeabi_i2d>
 8013524:	4622      	mov	r2, r4
 8013526:	462b      	mov	r3, r5
 8013528:	f7ed f866 	bl	80005f8 <__aeabi_dmul>
 801352c:	4652      	mov	r2, sl
 801352e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013532:	465b      	mov	r3, fp
 8013534:	4620      	mov	r0, r4
 8013536:	4629      	mov	r1, r5
 8013538:	f7ed f85e 	bl	80005f8 <__aeabi_dmul>
 801353c:	3e01      	subs	r6, #1
 801353e:	4604      	mov	r4, r0
 8013540:	460d      	mov	r5, r1
 8013542:	e718      	b.n	8013376 <__kernel_rem_pio2+0x2ce>
 8013544:	9906      	ldr	r1, [sp, #24]
 8013546:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801354a:	9106      	str	r1, [sp, #24]
 801354c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013550:	f7ed f852 	bl	80005f8 <__aeabi_dmul>
 8013554:	4602      	mov	r2, r0
 8013556:	460b      	mov	r3, r1
 8013558:	4650      	mov	r0, sl
 801355a:	4659      	mov	r1, fp
 801355c:	f7ec fe96 	bl	800028c <__adddf3>
 8013560:	3601      	adds	r6, #1
 8013562:	4682      	mov	sl, r0
 8013564:	468b      	mov	fp, r1
 8013566:	9b00      	ldr	r3, [sp, #0]
 8013568:	429e      	cmp	r6, r3
 801356a:	dc01      	bgt.n	8013570 <__kernel_rem_pio2+0x4c8>
 801356c:	42b5      	cmp	r5, r6
 801356e:	dae9      	bge.n	8013544 <__kernel_rem_pio2+0x49c>
 8013570:	ab48      	add	r3, sp, #288	@ 0x120
 8013572:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013576:	e9c5 ab00 	strd	sl, fp, [r5]
 801357a:	3c01      	subs	r4, #1
 801357c:	e6ff      	b.n	801337e <__kernel_rem_pio2+0x2d6>
 801357e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013580:	2b02      	cmp	r3, #2
 8013582:	dc0b      	bgt.n	801359c <__kernel_rem_pio2+0x4f4>
 8013584:	2b00      	cmp	r3, #0
 8013586:	dc39      	bgt.n	80135fc <__kernel_rem_pio2+0x554>
 8013588:	d05d      	beq.n	8013646 <__kernel_rem_pio2+0x59e>
 801358a:	9b02      	ldr	r3, [sp, #8]
 801358c:	f003 0007 	and.w	r0, r3, #7
 8013590:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013594:	ecbd 8b02 	vpop	{d8}
 8013598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801359c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801359e:	2b03      	cmp	r3, #3
 80135a0:	d1f3      	bne.n	801358a <__kernel_rem_pio2+0x4e2>
 80135a2:	9b05      	ldr	r3, [sp, #20]
 80135a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80135a8:	eb0d 0403 	add.w	r4, sp, r3
 80135ac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80135b0:	4625      	mov	r5, r4
 80135b2:	46c2      	mov	sl, r8
 80135b4:	f1ba 0f00 	cmp.w	sl, #0
 80135b8:	f1a5 0508 	sub.w	r5, r5, #8
 80135bc:	dc6b      	bgt.n	8013696 <__kernel_rem_pio2+0x5ee>
 80135be:	4645      	mov	r5, r8
 80135c0:	2d01      	cmp	r5, #1
 80135c2:	f1a4 0408 	sub.w	r4, r4, #8
 80135c6:	f300 8087 	bgt.w	80136d8 <__kernel_rem_pio2+0x630>
 80135ca:	9c05      	ldr	r4, [sp, #20]
 80135cc:	ab48      	add	r3, sp, #288	@ 0x120
 80135ce:	441c      	add	r4, r3
 80135d0:	2000      	movs	r0, #0
 80135d2:	2100      	movs	r1, #0
 80135d4:	f1b8 0f01 	cmp.w	r8, #1
 80135d8:	f300 809c 	bgt.w	8013714 <__kernel_rem_pio2+0x66c>
 80135dc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80135e0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80135e4:	f1b9 0f00 	cmp.w	r9, #0
 80135e8:	f040 80a6 	bne.w	8013738 <__kernel_rem_pio2+0x690>
 80135ec:	9b04      	ldr	r3, [sp, #16]
 80135ee:	e9c3 7800 	strd	r7, r8, [r3]
 80135f2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80135f6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80135fa:	e7c6      	b.n	801358a <__kernel_rem_pio2+0x4e2>
 80135fc:	9d05      	ldr	r5, [sp, #20]
 80135fe:	ab48      	add	r3, sp, #288	@ 0x120
 8013600:	441d      	add	r5, r3
 8013602:	4644      	mov	r4, r8
 8013604:	2000      	movs	r0, #0
 8013606:	2100      	movs	r1, #0
 8013608:	2c00      	cmp	r4, #0
 801360a:	da35      	bge.n	8013678 <__kernel_rem_pio2+0x5d0>
 801360c:	f1b9 0f00 	cmp.w	r9, #0
 8013610:	d038      	beq.n	8013684 <__kernel_rem_pio2+0x5dc>
 8013612:	4602      	mov	r2, r0
 8013614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013618:	9c04      	ldr	r4, [sp, #16]
 801361a:	e9c4 2300 	strd	r2, r3, [r4]
 801361e:	4602      	mov	r2, r0
 8013620:	460b      	mov	r3, r1
 8013622:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013626:	f7ec fe2f 	bl	8000288 <__aeabi_dsub>
 801362a:	ad4a      	add	r5, sp, #296	@ 0x128
 801362c:	2401      	movs	r4, #1
 801362e:	45a0      	cmp	r8, r4
 8013630:	da2b      	bge.n	801368a <__kernel_rem_pio2+0x5e2>
 8013632:	f1b9 0f00 	cmp.w	r9, #0
 8013636:	d002      	beq.n	801363e <__kernel_rem_pio2+0x596>
 8013638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801363c:	4619      	mov	r1, r3
 801363e:	9b04      	ldr	r3, [sp, #16]
 8013640:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013644:	e7a1      	b.n	801358a <__kernel_rem_pio2+0x4e2>
 8013646:	9c05      	ldr	r4, [sp, #20]
 8013648:	ab48      	add	r3, sp, #288	@ 0x120
 801364a:	441c      	add	r4, r3
 801364c:	2000      	movs	r0, #0
 801364e:	2100      	movs	r1, #0
 8013650:	f1b8 0f00 	cmp.w	r8, #0
 8013654:	da09      	bge.n	801366a <__kernel_rem_pio2+0x5c2>
 8013656:	f1b9 0f00 	cmp.w	r9, #0
 801365a:	d002      	beq.n	8013662 <__kernel_rem_pio2+0x5ba>
 801365c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013660:	4619      	mov	r1, r3
 8013662:	9b04      	ldr	r3, [sp, #16]
 8013664:	e9c3 0100 	strd	r0, r1, [r3]
 8013668:	e78f      	b.n	801358a <__kernel_rem_pio2+0x4e2>
 801366a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801366e:	f7ec fe0d 	bl	800028c <__adddf3>
 8013672:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013676:	e7eb      	b.n	8013650 <__kernel_rem_pio2+0x5a8>
 8013678:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801367c:	f7ec fe06 	bl	800028c <__adddf3>
 8013680:	3c01      	subs	r4, #1
 8013682:	e7c1      	b.n	8013608 <__kernel_rem_pio2+0x560>
 8013684:	4602      	mov	r2, r0
 8013686:	460b      	mov	r3, r1
 8013688:	e7c6      	b.n	8013618 <__kernel_rem_pio2+0x570>
 801368a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801368e:	f7ec fdfd 	bl	800028c <__adddf3>
 8013692:	3401      	adds	r4, #1
 8013694:	e7cb      	b.n	801362e <__kernel_rem_pio2+0x586>
 8013696:	ed95 7b00 	vldr	d7, [r5]
 801369a:	ed8d 7b00 	vstr	d7, [sp]
 801369e:	ed95 7b02 	vldr	d7, [r5, #8]
 80136a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136a6:	ec53 2b17 	vmov	r2, r3, d7
 80136aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80136ae:	f7ec fded 	bl	800028c <__adddf3>
 80136b2:	4602      	mov	r2, r0
 80136b4:	460b      	mov	r3, r1
 80136b6:	4606      	mov	r6, r0
 80136b8:	460f      	mov	r7, r1
 80136ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136be:	f7ec fde3 	bl	8000288 <__aeabi_dsub>
 80136c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80136c6:	f7ec fde1 	bl	800028c <__adddf3>
 80136ca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80136ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80136d2:	e9c5 6700 	strd	r6, r7, [r5]
 80136d6:	e76d      	b.n	80135b4 <__kernel_rem_pio2+0x50c>
 80136d8:	ed94 7b00 	vldr	d7, [r4]
 80136dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80136e0:	ec51 0b17 	vmov	r0, r1, d7
 80136e4:	4652      	mov	r2, sl
 80136e6:	465b      	mov	r3, fp
 80136e8:	ed8d 7b00 	vstr	d7, [sp]
 80136ec:	f7ec fdce 	bl	800028c <__adddf3>
 80136f0:	4602      	mov	r2, r0
 80136f2:	460b      	mov	r3, r1
 80136f4:	4606      	mov	r6, r0
 80136f6:	460f      	mov	r7, r1
 80136f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136fc:	f7ec fdc4 	bl	8000288 <__aeabi_dsub>
 8013700:	4652      	mov	r2, sl
 8013702:	465b      	mov	r3, fp
 8013704:	f7ec fdc2 	bl	800028c <__adddf3>
 8013708:	3d01      	subs	r5, #1
 801370a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801370e:	e9c4 6700 	strd	r6, r7, [r4]
 8013712:	e755      	b.n	80135c0 <__kernel_rem_pio2+0x518>
 8013714:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013718:	f7ec fdb8 	bl	800028c <__adddf3>
 801371c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013720:	e758      	b.n	80135d4 <__kernel_rem_pio2+0x52c>
 8013722:	bf00      	nop
 8013724:	f3af 8000 	nop.w
	...
 8013730:	41700000 	.word	0x41700000
 8013734:	3e700000 	.word	0x3e700000
 8013738:	9b04      	ldr	r3, [sp, #16]
 801373a:	9a04      	ldr	r2, [sp, #16]
 801373c:	601f      	str	r7, [r3, #0]
 801373e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8013742:	605c      	str	r4, [r3, #4]
 8013744:	609d      	str	r5, [r3, #8]
 8013746:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801374a:	60d3      	str	r3, [r2, #12]
 801374c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013750:	6110      	str	r0, [r2, #16]
 8013752:	6153      	str	r3, [r2, #20]
 8013754:	e719      	b.n	801358a <__kernel_rem_pio2+0x4e2>
 8013756:	bf00      	nop

08013758 <__kernel_cos>:
 8013758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801375c:	ec57 6b10 	vmov	r6, r7, d0
 8013760:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013764:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8013768:	ed8d 1b00 	vstr	d1, [sp]
 801376c:	d206      	bcs.n	801377c <__kernel_cos+0x24>
 801376e:	4630      	mov	r0, r6
 8013770:	4639      	mov	r1, r7
 8013772:	f7ed f9f1 	bl	8000b58 <__aeabi_d2iz>
 8013776:	2800      	cmp	r0, #0
 8013778:	f000 8088 	beq.w	801388c <__kernel_cos+0x134>
 801377c:	4632      	mov	r2, r6
 801377e:	463b      	mov	r3, r7
 8013780:	4630      	mov	r0, r6
 8013782:	4639      	mov	r1, r7
 8013784:	f7ec ff38 	bl	80005f8 <__aeabi_dmul>
 8013788:	4b51      	ldr	r3, [pc, #324]	@ (80138d0 <__kernel_cos+0x178>)
 801378a:	2200      	movs	r2, #0
 801378c:	4604      	mov	r4, r0
 801378e:	460d      	mov	r5, r1
 8013790:	f7ec ff32 	bl	80005f8 <__aeabi_dmul>
 8013794:	a340      	add	r3, pc, #256	@ (adr r3, 8013898 <__kernel_cos+0x140>)
 8013796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379a:	4682      	mov	sl, r0
 801379c:	468b      	mov	fp, r1
 801379e:	4620      	mov	r0, r4
 80137a0:	4629      	mov	r1, r5
 80137a2:	f7ec ff29 	bl	80005f8 <__aeabi_dmul>
 80137a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80138a0 <__kernel_cos+0x148>)
 80137a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ac:	f7ec fd6e 	bl	800028c <__adddf3>
 80137b0:	4622      	mov	r2, r4
 80137b2:	462b      	mov	r3, r5
 80137b4:	f7ec ff20 	bl	80005f8 <__aeabi_dmul>
 80137b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80138a8 <__kernel_cos+0x150>)
 80137ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137be:	f7ec fd63 	bl	8000288 <__aeabi_dsub>
 80137c2:	4622      	mov	r2, r4
 80137c4:	462b      	mov	r3, r5
 80137c6:	f7ec ff17 	bl	80005f8 <__aeabi_dmul>
 80137ca:	a339      	add	r3, pc, #228	@ (adr r3, 80138b0 <__kernel_cos+0x158>)
 80137cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d0:	f7ec fd5c 	bl	800028c <__adddf3>
 80137d4:	4622      	mov	r2, r4
 80137d6:	462b      	mov	r3, r5
 80137d8:	f7ec ff0e 	bl	80005f8 <__aeabi_dmul>
 80137dc:	a336      	add	r3, pc, #216	@ (adr r3, 80138b8 <__kernel_cos+0x160>)
 80137de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e2:	f7ec fd51 	bl	8000288 <__aeabi_dsub>
 80137e6:	4622      	mov	r2, r4
 80137e8:	462b      	mov	r3, r5
 80137ea:	f7ec ff05 	bl	80005f8 <__aeabi_dmul>
 80137ee:	a334      	add	r3, pc, #208	@ (adr r3, 80138c0 <__kernel_cos+0x168>)
 80137f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f4:	f7ec fd4a 	bl	800028c <__adddf3>
 80137f8:	4622      	mov	r2, r4
 80137fa:	462b      	mov	r3, r5
 80137fc:	f7ec fefc 	bl	80005f8 <__aeabi_dmul>
 8013800:	4622      	mov	r2, r4
 8013802:	462b      	mov	r3, r5
 8013804:	f7ec fef8 	bl	80005f8 <__aeabi_dmul>
 8013808:	e9dd 2300 	ldrd	r2, r3, [sp]
 801380c:	4604      	mov	r4, r0
 801380e:	460d      	mov	r5, r1
 8013810:	4630      	mov	r0, r6
 8013812:	4639      	mov	r1, r7
 8013814:	f7ec fef0 	bl	80005f8 <__aeabi_dmul>
 8013818:	460b      	mov	r3, r1
 801381a:	4602      	mov	r2, r0
 801381c:	4629      	mov	r1, r5
 801381e:	4620      	mov	r0, r4
 8013820:	f7ec fd32 	bl	8000288 <__aeabi_dsub>
 8013824:	4b2b      	ldr	r3, [pc, #172]	@ (80138d4 <__kernel_cos+0x17c>)
 8013826:	4598      	cmp	r8, r3
 8013828:	4606      	mov	r6, r0
 801382a:	460f      	mov	r7, r1
 801382c:	d810      	bhi.n	8013850 <__kernel_cos+0xf8>
 801382e:	4602      	mov	r2, r0
 8013830:	460b      	mov	r3, r1
 8013832:	4650      	mov	r0, sl
 8013834:	4659      	mov	r1, fp
 8013836:	f7ec fd27 	bl	8000288 <__aeabi_dsub>
 801383a:	460b      	mov	r3, r1
 801383c:	4926      	ldr	r1, [pc, #152]	@ (80138d8 <__kernel_cos+0x180>)
 801383e:	4602      	mov	r2, r0
 8013840:	2000      	movs	r0, #0
 8013842:	f7ec fd21 	bl	8000288 <__aeabi_dsub>
 8013846:	ec41 0b10 	vmov	d0, r0, r1
 801384a:	b003      	add	sp, #12
 801384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013850:	4b22      	ldr	r3, [pc, #136]	@ (80138dc <__kernel_cos+0x184>)
 8013852:	4921      	ldr	r1, [pc, #132]	@ (80138d8 <__kernel_cos+0x180>)
 8013854:	4598      	cmp	r8, r3
 8013856:	bf8c      	ite	hi
 8013858:	4d21      	ldrhi	r5, [pc, #132]	@ (80138e0 <__kernel_cos+0x188>)
 801385a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801385e:	2400      	movs	r4, #0
 8013860:	4622      	mov	r2, r4
 8013862:	462b      	mov	r3, r5
 8013864:	2000      	movs	r0, #0
 8013866:	f7ec fd0f 	bl	8000288 <__aeabi_dsub>
 801386a:	4622      	mov	r2, r4
 801386c:	4680      	mov	r8, r0
 801386e:	4689      	mov	r9, r1
 8013870:	462b      	mov	r3, r5
 8013872:	4650      	mov	r0, sl
 8013874:	4659      	mov	r1, fp
 8013876:	f7ec fd07 	bl	8000288 <__aeabi_dsub>
 801387a:	4632      	mov	r2, r6
 801387c:	463b      	mov	r3, r7
 801387e:	f7ec fd03 	bl	8000288 <__aeabi_dsub>
 8013882:	4602      	mov	r2, r0
 8013884:	460b      	mov	r3, r1
 8013886:	4640      	mov	r0, r8
 8013888:	4649      	mov	r1, r9
 801388a:	e7da      	b.n	8013842 <__kernel_cos+0xea>
 801388c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80138c8 <__kernel_cos+0x170>
 8013890:	e7db      	b.n	801384a <__kernel_cos+0xf2>
 8013892:	bf00      	nop
 8013894:	f3af 8000 	nop.w
 8013898:	be8838d4 	.word	0xbe8838d4
 801389c:	bda8fae9 	.word	0xbda8fae9
 80138a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80138a4:	3e21ee9e 	.word	0x3e21ee9e
 80138a8:	809c52ad 	.word	0x809c52ad
 80138ac:	3e927e4f 	.word	0x3e927e4f
 80138b0:	19cb1590 	.word	0x19cb1590
 80138b4:	3efa01a0 	.word	0x3efa01a0
 80138b8:	16c15177 	.word	0x16c15177
 80138bc:	3f56c16c 	.word	0x3f56c16c
 80138c0:	5555554c 	.word	0x5555554c
 80138c4:	3fa55555 	.word	0x3fa55555
 80138c8:	00000000 	.word	0x00000000
 80138cc:	3ff00000 	.word	0x3ff00000
 80138d0:	3fe00000 	.word	0x3fe00000
 80138d4:	3fd33332 	.word	0x3fd33332
 80138d8:	3ff00000 	.word	0x3ff00000
 80138dc:	3fe90000 	.word	0x3fe90000
 80138e0:	3fd20000 	.word	0x3fd20000
 80138e4:	00000000 	.word	0x00000000

080138e8 <__kernel_sin>:
 80138e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ec:	ec55 4b10 	vmov	r4, r5, d0
 80138f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80138f4:	b085      	sub	sp, #20
 80138f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80138fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80138fe:	4680      	mov	r8, r0
 8013900:	d205      	bcs.n	801390e <__kernel_sin+0x26>
 8013902:	4620      	mov	r0, r4
 8013904:	4629      	mov	r1, r5
 8013906:	f7ed f927 	bl	8000b58 <__aeabi_d2iz>
 801390a:	2800      	cmp	r0, #0
 801390c:	d052      	beq.n	80139b4 <__kernel_sin+0xcc>
 801390e:	4622      	mov	r2, r4
 8013910:	462b      	mov	r3, r5
 8013912:	4620      	mov	r0, r4
 8013914:	4629      	mov	r1, r5
 8013916:	f7ec fe6f 	bl	80005f8 <__aeabi_dmul>
 801391a:	4682      	mov	sl, r0
 801391c:	468b      	mov	fp, r1
 801391e:	4602      	mov	r2, r0
 8013920:	460b      	mov	r3, r1
 8013922:	4620      	mov	r0, r4
 8013924:	4629      	mov	r1, r5
 8013926:	f7ec fe67 	bl	80005f8 <__aeabi_dmul>
 801392a:	a342      	add	r3, pc, #264	@ (adr r3, 8013a34 <__kernel_sin+0x14c>)
 801392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013930:	e9cd 0100 	strd	r0, r1, [sp]
 8013934:	4650      	mov	r0, sl
 8013936:	4659      	mov	r1, fp
 8013938:	f7ec fe5e 	bl	80005f8 <__aeabi_dmul>
 801393c:	a33f      	add	r3, pc, #252	@ (adr r3, 8013a3c <__kernel_sin+0x154>)
 801393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013942:	f7ec fca1 	bl	8000288 <__aeabi_dsub>
 8013946:	4652      	mov	r2, sl
 8013948:	465b      	mov	r3, fp
 801394a:	f7ec fe55 	bl	80005f8 <__aeabi_dmul>
 801394e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013a44 <__kernel_sin+0x15c>)
 8013950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013954:	f7ec fc9a 	bl	800028c <__adddf3>
 8013958:	4652      	mov	r2, sl
 801395a:	465b      	mov	r3, fp
 801395c:	f7ec fe4c 	bl	80005f8 <__aeabi_dmul>
 8013960:	a33a      	add	r3, pc, #232	@ (adr r3, 8013a4c <__kernel_sin+0x164>)
 8013962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013966:	f7ec fc8f 	bl	8000288 <__aeabi_dsub>
 801396a:	4652      	mov	r2, sl
 801396c:	465b      	mov	r3, fp
 801396e:	f7ec fe43 	bl	80005f8 <__aeabi_dmul>
 8013972:	a338      	add	r3, pc, #224	@ (adr r3, 8013a54 <__kernel_sin+0x16c>)
 8013974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013978:	f7ec fc88 	bl	800028c <__adddf3>
 801397c:	4606      	mov	r6, r0
 801397e:	460f      	mov	r7, r1
 8013980:	f1b8 0f00 	cmp.w	r8, #0
 8013984:	d11b      	bne.n	80139be <__kernel_sin+0xd6>
 8013986:	4602      	mov	r2, r0
 8013988:	460b      	mov	r3, r1
 801398a:	4650      	mov	r0, sl
 801398c:	4659      	mov	r1, fp
 801398e:	f7ec fe33 	bl	80005f8 <__aeabi_dmul>
 8013992:	a325      	add	r3, pc, #148	@ (adr r3, 8013a28 <__kernel_sin+0x140>)
 8013994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013998:	f7ec fc76 	bl	8000288 <__aeabi_dsub>
 801399c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139a0:	f7ec fe2a 	bl	80005f8 <__aeabi_dmul>
 80139a4:	4602      	mov	r2, r0
 80139a6:	460b      	mov	r3, r1
 80139a8:	4620      	mov	r0, r4
 80139aa:	4629      	mov	r1, r5
 80139ac:	f7ec fc6e 	bl	800028c <__adddf3>
 80139b0:	4604      	mov	r4, r0
 80139b2:	460d      	mov	r5, r1
 80139b4:	ec45 4b10 	vmov	d0, r4, r5
 80139b8:	b005      	add	sp, #20
 80139ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139c2:	4b1b      	ldr	r3, [pc, #108]	@ (8013a30 <__kernel_sin+0x148>)
 80139c4:	2200      	movs	r2, #0
 80139c6:	f7ec fe17 	bl	80005f8 <__aeabi_dmul>
 80139ca:	4632      	mov	r2, r6
 80139cc:	4680      	mov	r8, r0
 80139ce:	4689      	mov	r9, r1
 80139d0:	463b      	mov	r3, r7
 80139d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139d6:	f7ec fe0f 	bl	80005f8 <__aeabi_dmul>
 80139da:	4602      	mov	r2, r0
 80139dc:	460b      	mov	r3, r1
 80139de:	4640      	mov	r0, r8
 80139e0:	4649      	mov	r1, r9
 80139e2:	f7ec fc51 	bl	8000288 <__aeabi_dsub>
 80139e6:	4652      	mov	r2, sl
 80139e8:	465b      	mov	r3, fp
 80139ea:	f7ec fe05 	bl	80005f8 <__aeabi_dmul>
 80139ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139f2:	f7ec fc49 	bl	8000288 <__aeabi_dsub>
 80139f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8013a28 <__kernel_sin+0x140>)
 80139f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fc:	4606      	mov	r6, r0
 80139fe:	460f      	mov	r7, r1
 8013a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a04:	f7ec fdf8 	bl	80005f8 <__aeabi_dmul>
 8013a08:	4602      	mov	r2, r0
 8013a0a:	460b      	mov	r3, r1
 8013a0c:	4630      	mov	r0, r6
 8013a0e:	4639      	mov	r1, r7
 8013a10:	f7ec fc3c 	bl	800028c <__adddf3>
 8013a14:	4602      	mov	r2, r0
 8013a16:	460b      	mov	r3, r1
 8013a18:	4620      	mov	r0, r4
 8013a1a:	4629      	mov	r1, r5
 8013a1c:	f7ec fc34 	bl	8000288 <__aeabi_dsub>
 8013a20:	e7c6      	b.n	80139b0 <__kernel_sin+0xc8>
 8013a22:	bf00      	nop
 8013a24:	f3af 8000 	nop.w
 8013a28:	55555549 	.word	0x55555549
 8013a2c:	3fc55555 	.word	0x3fc55555
 8013a30:	3fe00000 	.word	0x3fe00000
 8013a34:	5acfd57c 	.word	0x5acfd57c
 8013a38:	3de5d93a 	.word	0x3de5d93a
 8013a3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013a40:	3e5ae5e6 	.word	0x3e5ae5e6
 8013a44:	57b1fe7d 	.word	0x57b1fe7d
 8013a48:	3ec71de3 	.word	0x3ec71de3
 8013a4c:	19c161d5 	.word	0x19c161d5
 8013a50:	3f2a01a0 	.word	0x3f2a01a0
 8013a54:	1110f8a6 	.word	0x1110f8a6
 8013a58:	3f811111 	.word	0x3f811111

08013a5c <fabs>:
 8013a5c:	ec51 0b10 	vmov	r0, r1, d0
 8013a60:	4602      	mov	r2, r0
 8013a62:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013a66:	ec43 2b10 	vmov	d0, r2, r3
 8013a6a:	4770      	bx	lr
 8013a6c:	0000      	movs	r0, r0
	...

08013a70 <scalbn>:
 8013a70:	b570      	push	{r4, r5, r6, lr}
 8013a72:	ec55 4b10 	vmov	r4, r5, d0
 8013a76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	462b      	mov	r3, r5
 8013a7e:	b991      	cbnz	r1, 8013aa6 <scalbn+0x36>
 8013a80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013a84:	4323      	orrs	r3, r4
 8013a86:	d03d      	beq.n	8013b04 <scalbn+0x94>
 8013a88:	4b35      	ldr	r3, [pc, #212]	@ (8013b60 <scalbn+0xf0>)
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	4629      	mov	r1, r5
 8013a8e:	2200      	movs	r2, #0
 8013a90:	f7ec fdb2 	bl	80005f8 <__aeabi_dmul>
 8013a94:	4b33      	ldr	r3, [pc, #204]	@ (8013b64 <scalbn+0xf4>)
 8013a96:	429e      	cmp	r6, r3
 8013a98:	4604      	mov	r4, r0
 8013a9a:	460d      	mov	r5, r1
 8013a9c:	da0f      	bge.n	8013abe <scalbn+0x4e>
 8013a9e:	a328      	add	r3, pc, #160	@ (adr r3, 8013b40 <scalbn+0xd0>)
 8013aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa4:	e01e      	b.n	8013ae4 <scalbn+0x74>
 8013aa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013aaa:	4291      	cmp	r1, r2
 8013aac:	d10b      	bne.n	8013ac6 <scalbn+0x56>
 8013aae:	4622      	mov	r2, r4
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	4629      	mov	r1, r5
 8013ab4:	f7ec fbea 	bl	800028c <__adddf3>
 8013ab8:	4604      	mov	r4, r0
 8013aba:	460d      	mov	r5, r1
 8013abc:	e022      	b.n	8013b04 <scalbn+0x94>
 8013abe:	460b      	mov	r3, r1
 8013ac0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013ac4:	3936      	subs	r1, #54	@ 0x36
 8013ac6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013aca:	4296      	cmp	r6, r2
 8013acc:	dd0d      	ble.n	8013aea <scalbn+0x7a>
 8013ace:	2d00      	cmp	r5, #0
 8013ad0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013b48 <scalbn+0xd8>)
 8013ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ad6:	da02      	bge.n	8013ade <scalbn+0x6e>
 8013ad8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013b50 <scalbn+0xe0>)
 8013ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ade:	a31a      	add	r3, pc, #104	@ (adr r3, 8013b48 <scalbn+0xd8>)
 8013ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae4:	f7ec fd88 	bl	80005f8 <__aeabi_dmul>
 8013ae8:	e7e6      	b.n	8013ab8 <scalbn+0x48>
 8013aea:	1872      	adds	r2, r6, r1
 8013aec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013af0:	428a      	cmp	r2, r1
 8013af2:	dcec      	bgt.n	8013ace <scalbn+0x5e>
 8013af4:	2a00      	cmp	r2, #0
 8013af6:	dd08      	ble.n	8013b0a <scalbn+0x9a>
 8013af8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013afc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013b00:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013b04:	ec45 4b10 	vmov	d0, r4, r5
 8013b08:	bd70      	pop	{r4, r5, r6, pc}
 8013b0a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013b0e:	da08      	bge.n	8013b22 <scalbn+0xb2>
 8013b10:	2d00      	cmp	r5, #0
 8013b12:	a10b      	add	r1, pc, #44	@ (adr r1, 8013b40 <scalbn+0xd0>)
 8013b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b18:	dac1      	bge.n	8013a9e <scalbn+0x2e>
 8013b1a:	a10f      	add	r1, pc, #60	@ (adr r1, 8013b58 <scalbn+0xe8>)
 8013b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b20:	e7bd      	b.n	8013a9e <scalbn+0x2e>
 8013b22:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013b26:	3236      	adds	r2, #54	@ 0x36
 8013b28:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013b2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013b30:	4620      	mov	r0, r4
 8013b32:	4b0d      	ldr	r3, [pc, #52]	@ (8013b68 <scalbn+0xf8>)
 8013b34:	4629      	mov	r1, r5
 8013b36:	2200      	movs	r2, #0
 8013b38:	e7d4      	b.n	8013ae4 <scalbn+0x74>
 8013b3a:	bf00      	nop
 8013b3c:	f3af 8000 	nop.w
 8013b40:	c2f8f359 	.word	0xc2f8f359
 8013b44:	01a56e1f 	.word	0x01a56e1f
 8013b48:	8800759c 	.word	0x8800759c
 8013b4c:	7e37e43c 	.word	0x7e37e43c
 8013b50:	8800759c 	.word	0x8800759c
 8013b54:	fe37e43c 	.word	0xfe37e43c
 8013b58:	c2f8f359 	.word	0xc2f8f359
 8013b5c:	81a56e1f 	.word	0x81a56e1f
 8013b60:	43500000 	.word	0x43500000
 8013b64:	ffff3cb0 	.word	0xffff3cb0
 8013b68:	3c900000 	.word	0x3c900000
 8013b6c:	00000000 	.word	0x00000000

08013b70 <floor>:
 8013b70:	ec51 0b10 	vmov	r0, r1, d0
 8013b74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b7c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013b80:	2e13      	cmp	r6, #19
 8013b82:	460c      	mov	r4, r1
 8013b84:	4605      	mov	r5, r0
 8013b86:	4680      	mov	r8, r0
 8013b88:	dc34      	bgt.n	8013bf4 <floor+0x84>
 8013b8a:	2e00      	cmp	r6, #0
 8013b8c:	da17      	bge.n	8013bbe <floor+0x4e>
 8013b8e:	a332      	add	r3, pc, #200	@ (adr r3, 8013c58 <floor+0xe8>)
 8013b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b94:	f7ec fb7a 	bl	800028c <__adddf3>
 8013b98:	2200      	movs	r2, #0
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	f7ec ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 8013ba0:	b150      	cbz	r0, 8013bb8 <floor+0x48>
 8013ba2:	2c00      	cmp	r4, #0
 8013ba4:	da55      	bge.n	8013c52 <floor+0xe2>
 8013ba6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013baa:	432c      	orrs	r4, r5
 8013bac:	2500      	movs	r5, #0
 8013bae:	42ac      	cmp	r4, r5
 8013bb0:	4c2b      	ldr	r4, [pc, #172]	@ (8013c60 <floor+0xf0>)
 8013bb2:	bf08      	it	eq
 8013bb4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013bb8:	4621      	mov	r1, r4
 8013bba:	4628      	mov	r0, r5
 8013bbc:	e023      	b.n	8013c06 <floor+0x96>
 8013bbe:	4f29      	ldr	r7, [pc, #164]	@ (8013c64 <floor+0xf4>)
 8013bc0:	4137      	asrs	r7, r6
 8013bc2:	ea01 0307 	and.w	r3, r1, r7
 8013bc6:	4303      	orrs	r3, r0
 8013bc8:	d01d      	beq.n	8013c06 <floor+0x96>
 8013bca:	a323      	add	r3, pc, #140	@ (adr r3, 8013c58 <floor+0xe8>)
 8013bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bd0:	f7ec fb5c 	bl	800028c <__adddf3>
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	f7ec ff9e 	bl	8000b18 <__aeabi_dcmpgt>
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d0eb      	beq.n	8013bb8 <floor+0x48>
 8013be0:	2c00      	cmp	r4, #0
 8013be2:	bfbe      	ittt	lt
 8013be4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013be8:	4133      	asrlt	r3, r6
 8013bea:	18e4      	addlt	r4, r4, r3
 8013bec:	ea24 0407 	bic.w	r4, r4, r7
 8013bf0:	2500      	movs	r5, #0
 8013bf2:	e7e1      	b.n	8013bb8 <floor+0x48>
 8013bf4:	2e33      	cmp	r6, #51	@ 0x33
 8013bf6:	dd0a      	ble.n	8013c0e <floor+0x9e>
 8013bf8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013bfc:	d103      	bne.n	8013c06 <floor+0x96>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	460b      	mov	r3, r1
 8013c02:	f7ec fb43 	bl	800028c <__adddf3>
 8013c06:	ec41 0b10 	vmov	d0, r0, r1
 8013c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c0e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013c12:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013c16:	40df      	lsrs	r7, r3
 8013c18:	4207      	tst	r7, r0
 8013c1a:	d0f4      	beq.n	8013c06 <floor+0x96>
 8013c1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013c58 <floor+0xe8>)
 8013c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c22:	f7ec fb33 	bl	800028c <__adddf3>
 8013c26:	2200      	movs	r2, #0
 8013c28:	2300      	movs	r3, #0
 8013c2a:	f7ec ff75 	bl	8000b18 <__aeabi_dcmpgt>
 8013c2e:	2800      	cmp	r0, #0
 8013c30:	d0c2      	beq.n	8013bb8 <floor+0x48>
 8013c32:	2c00      	cmp	r4, #0
 8013c34:	da0a      	bge.n	8013c4c <floor+0xdc>
 8013c36:	2e14      	cmp	r6, #20
 8013c38:	d101      	bne.n	8013c3e <floor+0xce>
 8013c3a:	3401      	adds	r4, #1
 8013c3c:	e006      	b.n	8013c4c <floor+0xdc>
 8013c3e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013c42:	2301      	movs	r3, #1
 8013c44:	40b3      	lsls	r3, r6
 8013c46:	441d      	add	r5, r3
 8013c48:	4545      	cmp	r5, r8
 8013c4a:	d3f6      	bcc.n	8013c3a <floor+0xca>
 8013c4c:	ea25 0507 	bic.w	r5, r5, r7
 8013c50:	e7b2      	b.n	8013bb8 <floor+0x48>
 8013c52:	2500      	movs	r5, #0
 8013c54:	462c      	mov	r4, r5
 8013c56:	e7af      	b.n	8013bb8 <floor+0x48>
 8013c58:	8800759c 	.word	0x8800759c
 8013c5c:	7e37e43c 	.word	0x7e37e43c
 8013c60:	bff00000 	.word	0xbff00000
 8013c64:	000fffff 	.word	0x000fffff

08013c68 <_init>:
 8013c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c6a:	bf00      	nop
 8013c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c6e:	bc08      	pop	{r3}
 8013c70:	469e      	mov	lr, r3
 8013c72:	4770      	bx	lr

08013c74 <_fini>:
 8013c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c76:	bf00      	nop
 8013c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c7a:	bc08      	pop	{r3}
 8013c7c:	469e      	mov	lr, r3
 8013c7e:	4770      	bx	lr
