
RMTemplateMay12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08013f60  08013f60  00014f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014780  08014780  0001632c  2**0
                  CONTENTS
  4 .ARM          00000008  08014780  08014780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014788  08014788  0001632c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014788  08014788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801478c  0801478c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  08014790  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001632c  2**0
                  CONTENTS
 10 .bss          000058d0  2000032c  2000032c  0001632c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005bfc  20005bfc  0001632c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001632c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002726a  00000000  00000000  0001635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a42  00000000  00000000  0003d5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002048  00000000  00000000  00043008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001925  00000000  00000000  00045050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278f1  00000000  00000000  00046975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002862b  00000000  00000000  0006e266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e35dd  00000000  00000000  00096891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00179e6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000099e0  00000000  00000000  00179eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00183894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000032c 	.word	0x2000032c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013f48 	.word	0x08013f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000330 	.word	0x20000330
 80001cc:	08013f48 	.word	0x08013f48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f000 b96a 	b.w	8001150 <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f806 	bl	8000e94 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__udivmoddi4>:
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	9d08      	ldr	r5, [sp, #32]
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d14e      	bne.n	8000f3e <__udivmoddi4+0xaa>
 8000ea0:	4694      	mov	ip, r2
 8000ea2:	458c      	cmp	ip, r1
 8000ea4:	4686      	mov	lr, r0
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	d962      	bls.n	8000f72 <__udivmoddi4+0xde>
 8000eac:	b14a      	cbz	r2, 8000ec2 <__udivmoddi4+0x2e>
 8000eae:	f1c2 0320 	rsb	r3, r2, #32
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	4319      	orrs	r1, r3
 8000ebe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec6:	fa1f f68c 	uxth.w	r6, ip
 8000eca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ece:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ed2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb04 f106 	mul.w	r1, r4, r6
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d90a      	bls.n	8000ef8 <__udivmoddi4+0x64>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000eea:	f080 8112 	bcs.w	8001112 <__udivmoddi4+0x27e>
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	f240 810f 	bls.w	8001112 <__udivmoddi4+0x27e>
 8000ef4:	3c02      	subs	r4, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1a59      	subs	r1, r3, r1
 8000efa:	fa1f f38e 	uxth.w	r3, lr
 8000efe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f02:	fb07 1110 	mls	r1, r7, r0, r1
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f606 	mul.w	r6, r0, r6
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	d90a      	bls.n	8000f28 <__udivmoddi4+0x94>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000f1a:	f080 80fc 	bcs.w	8001116 <__udivmoddi4+0x282>
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	f240 80f9 	bls.w	8001116 <__udivmoddi4+0x282>
 8000f24:	4463      	add	r3, ip
 8000f26:	3802      	subs	r0, #2
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f2e:	2100      	movs	r1, #0
 8000f30:	b11d      	cbz	r5, 8000f3a <__udivmoddi4+0xa6>
 8000f32:	40d3      	lsrs	r3, r2
 8000f34:	2200      	movs	r2, #0
 8000f36:	e9c5 3200 	strd	r3, r2, [r5]
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d905      	bls.n	8000f4e <__udivmoddi4+0xba>
 8000f42:	b10d      	cbz	r5, 8000f48 <__udivmoddi4+0xb4>
 8000f44:	e9c5 0100 	strd	r0, r1, [r5]
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e7f5      	b.n	8000f3a <__udivmoddi4+0xa6>
 8000f4e:	fab3 f183 	clz	r1, r3
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d146      	bne.n	8000fe4 <__udivmoddi4+0x150>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d302      	bcc.n	8000f60 <__udivmoddi4+0xcc>
 8000f5a:	4290      	cmp	r0, r2
 8000f5c:	f0c0 80f0 	bcc.w	8001140 <__udivmoddi4+0x2ac>
 8000f60:	1a86      	subs	r6, r0, r2
 8000f62:	eb64 0303 	sbc.w	r3, r4, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d0e6      	beq.n	8000f3a <__udivmoddi4+0xa6>
 8000f6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000f70:	e7e3      	b.n	8000f3a <__udivmoddi4+0xa6>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	f040 8090 	bne.w	8001098 <__udivmoddi4+0x204>
 8000f78:	eba1 040c 	sub.w	r4, r1, ip
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa1f f78c 	uxth.w	r7, ip
 8000f84:	2101      	movs	r1, #1
 8000f86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f96:	fb07 f006 	mul.w	r0, r7, r6
 8000f9a:	4298      	cmp	r0, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x11c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000fa6:	d202      	bcs.n	8000fae <__udivmoddi4+0x11a>
 8000fa8:	4298      	cmp	r0, r3
 8000faa:	f200 80cd 	bhi.w	8001148 <__udivmoddi4+0x2b4>
 8000fae:	4626      	mov	r6, r4
 8000fb0:	1a1c      	subs	r4, r3, r0
 8000fb2:	fa1f f38e 	uxth.w	r3, lr
 8000fb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000fba:	fb08 4410 	mls	r4, r8, r0, r4
 8000fbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fc2:	fb00 f707 	mul.w	r7, r0, r7
 8000fc6:	429f      	cmp	r7, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x148>
 8000fca:	eb1c 0303 	adds.w	r3, ip, r3
 8000fce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x146>
 8000fd4:	429f      	cmp	r7, r3
 8000fd6:	f200 80b0 	bhi.w	800113a <__udivmoddi4+0x2a6>
 8000fda:	4620      	mov	r0, r4
 8000fdc:	1bdb      	subs	r3, r3, r7
 8000fde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fe2:	e7a5      	b.n	8000f30 <__udivmoddi4+0x9c>
 8000fe4:	f1c1 0620 	rsb	r6, r1, #32
 8000fe8:	408b      	lsls	r3, r1
 8000fea:	fa22 f706 	lsr.w	r7, r2, r6
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ff4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ff8:	ea43 030c 	orr.w	r3, r3, ip
 8000ffc:	40f4      	lsrs	r4, r6
 8000ffe:	fa00 f801 	lsl.w	r8, r0, r1
 8001002:	0c38      	lsrs	r0, r7, #16
 8001004:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001008:	fbb4 fef0 	udiv	lr, r4, r0
 800100c:	fa1f fc87 	uxth.w	ip, r7
 8001010:	fb00 441e 	mls	r4, r0, lr, r4
 8001014:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001018:	fb0e f90c 	mul.w	r9, lr, ip
 800101c:	45a1      	cmp	r9, r4
 800101e:	fa02 f201 	lsl.w	r2, r2, r1
 8001022:	d90a      	bls.n	800103a <__udivmoddi4+0x1a6>
 8001024:	193c      	adds	r4, r7, r4
 8001026:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800102a:	f080 8084 	bcs.w	8001136 <__udivmoddi4+0x2a2>
 800102e:	45a1      	cmp	r9, r4
 8001030:	f240 8081 	bls.w	8001136 <__udivmoddi4+0x2a2>
 8001034:	f1ae 0e02 	sub.w	lr, lr, #2
 8001038:	443c      	add	r4, r7
 800103a:	eba4 0409 	sub.w	r4, r4, r9
 800103e:	fa1f f983 	uxth.w	r9, r3
 8001042:	fbb4 f3f0 	udiv	r3, r4, r0
 8001046:	fb00 4413 	mls	r4, r0, r3, r4
 800104a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800104e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001052:	45a4      	cmp	ip, r4
 8001054:	d907      	bls.n	8001066 <__udivmoddi4+0x1d2>
 8001056:	193c      	adds	r4, r7, r4
 8001058:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800105c:	d267      	bcs.n	800112e <__udivmoddi4+0x29a>
 800105e:	45a4      	cmp	ip, r4
 8001060:	d965      	bls.n	800112e <__udivmoddi4+0x29a>
 8001062:	3b02      	subs	r3, #2
 8001064:	443c      	add	r4, r7
 8001066:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800106a:	fba0 9302 	umull	r9, r3, r0, r2
 800106e:	eba4 040c 	sub.w	r4, r4, ip
 8001072:	429c      	cmp	r4, r3
 8001074:	46ce      	mov	lr, r9
 8001076:	469c      	mov	ip, r3
 8001078:	d351      	bcc.n	800111e <__udivmoddi4+0x28a>
 800107a:	d04e      	beq.n	800111a <__udivmoddi4+0x286>
 800107c:	b155      	cbz	r5, 8001094 <__udivmoddi4+0x200>
 800107e:	ebb8 030e 	subs.w	r3, r8, lr
 8001082:	eb64 040c 	sbc.w	r4, r4, ip
 8001086:	fa04 f606 	lsl.w	r6, r4, r6
 800108a:	40cb      	lsrs	r3, r1
 800108c:	431e      	orrs	r6, r3
 800108e:	40cc      	lsrs	r4, r1
 8001090:	e9c5 6400 	strd	r6, r4, [r5]
 8001094:	2100      	movs	r1, #0
 8001096:	e750      	b.n	8000f3a <__udivmoddi4+0xa6>
 8001098:	f1c2 0320 	rsb	r3, r2, #32
 800109c:	fa20 f103 	lsr.w	r1, r0, r3
 80010a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010a4:	fa24 f303 	lsr.w	r3, r4, r3
 80010a8:	4094      	lsls	r4, r2
 80010aa:	430c      	orrs	r4, r1
 80010ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80010b4:	fa1f f78c 	uxth.w	r7, ip
 80010b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010bc:	fb08 3110 	mls	r1, r8, r0, r3
 80010c0:	0c23      	lsrs	r3, r4, #16
 80010c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010c6:	fb00 f107 	mul.w	r1, r0, r7
 80010ca:	4299      	cmp	r1, r3
 80010cc:	d908      	bls.n	80010e0 <__udivmoddi4+0x24c>
 80010ce:	eb1c 0303 	adds.w	r3, ip, r3
 80010d2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80010d6:	d22c      	bcs.n	8001132 <__udivmoddi4+0x29e>
 80010d8:	4299      	cmp	r1, r3
 80010da:	d92a      	bls.n	8001132 <__udivmoddi4+0x29e>
 80010dc:	3802      	subs	r0, #2
 80010de:	4463      	add	r3, ip
 80010e0:	1a5b      	subs	r3, r3, r1
 80010e2:	b2a4      	uxth	r4, r4
 80010e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80010e8:	fb08 3311 	mls	r3, r8, r1, r3
 80010ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010f0:	fb01 f307 	mul.w	r3, r1, r7
 80010f4:	42a3      	cmp	r3, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x276>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001100:	d213      	bcs.n	800112a <__udivmoddi4+0x296>
 8001102:	42a3      	cmp	r3, r4
 8001104:	d911      	bls.n	800112a <__udivmoddi4+0x296>
 8001106:	3902      	subs	r1, #2
 8001108:	4464      	add	r4, ip
 800110a:	1ae4      	subs	r4, r4, r3
 800110c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001110:	e739      	b.n	8000f86 <__udivmoddi4+0xf2>
 8001112:	4604      	mov	r4, r0
 8001114:	e6f0      	b.n	8000ef8 <__udivmoddi4+0x64>
 8001116:	4608      	mov	r0, r1
 8001118:	e706      	b.n	8000f28 <__udivmoddi4+0x94>
 800111a:	45c8      	cmp	r8, r9
 800111c:	d2ae      	bcs.n	800107c <__udivmoddi4+0x1e8>
 800111e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001122:	eb63 0c07 	sbc.w	ip, r3, r7
 8001126:	3801      	subs	r0, #1
 8001128:	e7a8      	b.n	800107c <__udivmoddi4+0x1e8>
 800112a:	4631      	mov	r1, r6
 800112c:	e7ed      	b.n	800110a <__udivmoddi4+0x276>
 800112e:	4603      	mov	r3, r0
 8001130:	e799      	b.n	8001066 <__udivmoddi4+0x1d2>
 8001132:	4630      	mov	r0, r6
 8001134:	e7d4      	b.n	80010e0 <__udivmoddi4+0x24c>
 8001136:	46d6      	mov	lr, sl
 8001138:	e77f      	b.n	800103a <__udivmoddi4+0x1a6>
 800113a:	4463      	add	r3, ip
 800113c:	3802      	subs	r0, #2
 800113e:	e74d      	b.n	8000fdc <__udivmoddi4+0x148>
 8001140:	4606      	mov	r6, r0
 8001142:	4623      	mov	r3, r4
 8001144:	4608      	mov	r0, r1
 8001146:	e70f      	b.n	8000f68 <__udivmoddi4+0xd4>
 8001148:	3e02      	subs	r6, #2
 800114a:	4463      	add	r3, ip
 800114c:	e730      	b.n	8000fb0 <__udivmoddi4+0x11c>
 800114e:	bf00      	nop

08001150 <__aeabi_idiv0>:
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 800115e:	e003      	b.n	8001168 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001164:	f000 f80a 	bl	800117c <BMI088_delay_us>
    while(ms--)
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	80fa      	strh	r2, [r7, #6]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f6      	bne.n	8001160 <BMI088_delay_ms+0xc>
    }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <BMI088_delay_us+0x84>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	22a8      	movs	r2, #168	@ 0xa8
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <BMI088_delay_us+0x84>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <BMI088_delay_us+0x84>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d0f8      	beq.n	80011b0 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d206      	bcs.n	80011d4 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4413      	add	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
 80011d2:	e007      	b.n	80011e4 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad2      	subs	r2, r2, r3
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4413      	add	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d200      	bcs.n	80011f2 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 80011f0:	e7de      	b.n	80011b0 <BMI088_delay_us+0x34>
            {
                break;
 80011f2:	bf00      	nop
            }
        }
    }


}
 80011f4:	bf00      	nop
 80011f6:	3724      	adds	r7, #36	@ 0x24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e010 	.word	0xe000e010

08001204 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <BMI088_ACCEL_NS_L+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <BMI088_ACCEL_NS_L+0x1c>)
 800120e:	8811      	ldrh	r1, [r2, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f007 fe0e 	bl	8008e34 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004

08001224 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <BMI088_ACCEL_NS_H+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <BMI088_ACCEL_NS_H+0x1c>)
 800122e:	8811      	ldrh	r1, [r2, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	4618      	mov	r0, r3
 8001234:	f007 fdfe 	bl	8008e34 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004

08001244 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <BMI088_GYRO_NS_L+0x18>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <BMI088_GYRO_NS_L+0x1c>)
 800124e:	8811      	ldrh	r1, [r2, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fdee 	bl	8008e34 <HAL_GPIO_WritePin>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000008 	.word	0x20000008
 8001260:	2000000c 	.word	0x2000000c

08001264 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <BMI088_GYRO_NS_H+0x18>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <BMI088_GYRO_NS_H+0x1c>)
 800126e:	8811      	ldrh	r1, [r2, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fdde 	bl	8008e34 <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000008 	.word	0x20000008
 8001280:	2000000c 	.word	0x2000000c

08001284 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 800128e:	f107 020f 	add.w	r2, r7, #15
 8001292:	1df9      	adds	r1, r7, #7
 8001294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2301      	movs	r3, #1
 800129c:	4803      	ldr	r0, [pc, #12]	@ (80012ac <BMI088_read_write_byte+0x28>)
 800129e:	f009 fb27 	bl	800a8f0 <HAL_SPI_TransmitReceive>
    return rx_data;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000a30 	.word	0x20000a30

080012b0 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80012be:	f7ff ffa1 	bl	8001204 <BMI088_ACCEL_NS_L>
 80012c2:	2080      	movs	r0, #128	@ 0x80
 80012c4:	f7ff ffde 	bl	8001284 <BMI088_read_write_byte>
 80012c8:	2055      	movs	r0, #85	@ 0x55
 80012ca:	f7ff ffdb 	bl	8001284 <BMI088_read_write_byte>
 80012ce:	2055      	movs	r0, #85	@ 0x55
 80012d0:	f7ff ffd8 	bl	8001284 <BMI088_read_write_byte>
 80012d4:	4603      	mov	r3, r0
 80012d6:	71bb      	strb	r3, [r7, #6]
 80012d8:	f7ff ffa4 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012dc:	2096      	movs	r0, #150	@ 0x96
 80012de:	f7ff ff4d 	bl	800117c <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80012e2:	f7ff ff8f 	bl	8001204 <BMI088_ACCEL_NS_L>
 80012e6:	2080      	movs	r0, #128	@ 0x80
 80012e8:	f7ff ffcc 	bl	8001284 <BMI088_read_write_byte>
 80012ec:	2055      	movs	r0, #85	@ 0x55
 80012ee:	f7ff ffc9 	bl	8001284 <BMI088_read_write_byte>
 80012f2:	2055      	movs	r0, #85	@ 0x55
 80012f4:	f7ff ffc6 	bl	8001284 <BMI088_read_write_byte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	71bb      	strb	r3, [r7, #6]
 80012fc:	f7ff ff92 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001300:	2096      	movs	r0, #150	@ 0x96
 8001302:	f7ff ff3b 	bl	800117c <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001306:	f7ff ff7d 	bl	8001204 <BMI088_ACCEL_NS_L>
 800130a:	21b6      	movs	r1, #182	@ 0xb6
 800130c:	207e      	movs	r0, #126	@ 0x7e
 800130e:	f000 fa4d 	bl	80017ac <BMI088_write_single_reg>
 8001312:	f7ff ff87 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8001316:	2050      	movs	r0, #80	@ 0x50
 8001318:	f7ff ff1c 	bl	8001154 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800131c:	f7ff ff72 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001320:	2080      	movs	r0, #128	@ 0x80
 8001322:	f7ff ffaf 	bl	8001284 <BMI088_read_write_byte>
 8001326:	2055      	movs	r0, #85	@ 0x55
 8001328:	f7ff ffac 	bl	8001284 <BMI088_read_write_byte>
 800132c:	2055      	movs	r0, #85	@ 0x55
 800132e:	f7ff ffa9 	bl	8001284 <BMI088_read_write_byte>
 8001332:	4603      	mov	r3, r0
 8001334:	71bb      	strb	r3, [r7, #6]
 8001336:	f7ff ff75 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800133a:	2096      	movs	r0, #150	@ 0x96
 800133c:	f7ff ff1e 	bl	800117c <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001340:	f7ff ff60 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001344:	2080      	movs	r0, #128	@ 0x80
 8001346:	f7ff ff9d 	bl	8001284 <BMI088_read_write_byte>
 800134a:	2055      	movs	r0, #85	@ 0x55
 800134c:	f7ff ff9a 	bl	8001284 <BMI088_read_write_byte>
 8001350:	2055      	movs	r0, #85	@ 0x55
 8001352:	f7ff ff97 	bl	8001284 <BMI088_read_write_byte>
 8001356:	4603      	mov	r3, r0
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	f7ff ff63 	bl	8001224 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800135e:	2096      	movs	r0, #150	@ 0x96
 8001360:	f7ff ff0c 	bl	800117c <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	2b1e      	cmp	r3, #30
 8001368:	d001      	beq.n	800136e <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 800136a:	23ff      	movs	r3, #255	@ 0xff
 800136c:	e052      	b.n	8001414 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800136e:	2300      	movs	r3, #0
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e04b      	b.n	800140c <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 8001374:	f7ff ff46 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	4928      	ldr	r1, [pc, #160]	@ (800141c <BMI088_accel_init+0x16c>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	440b      	add	r3, r1
 8001384:	7818      	ldrb	r0, [r3, #0]
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	4924      	ldr	r1, [pc, #144]	@ (800141c <BMI088_accel_init+0x16c>)
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	440b      	add	r3, r1
 8001392:	3301      	adds	r3, #1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	f000 fa08 	bl	80017ac <BMI088_write_single_reg>
 800139c:	f7ff ff42 	bl	8001224 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80013a0:	2096      	movs	r0, #150	@ 0x96
 80013a2:	f7ff feeb 	bl	800117c <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80013a6:	f7ff ff2d 	bl	8001204 <BMI088_ACCEL_NS_L>
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	491b      	ldr	r1, [pc, #108]	@ (800141c <BMI088_accel_init+0x16c>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff60 	bl	8001284 <BMI088_read_write_byte>
 80013c4:	2055      	movs	r0, #85	@ 0x55
 80013c6:	f7ff ff5d 	bl	8001284 <BMI088_read_write_byte>
 80013ca:	2055      	movs	r0, #85	@ 0x55
 80013cc:	f7ff ff5a 	bl	8001284 <BMI088_read_write_byte>
 80013d0:	4603      	mov	r3, r0
 80013d2:	71bb      	strb	r3, [r7, #6]
 80013d4:	f7ff ff26 	bl	8001224 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80013d8:	2096      	movs	r0, #150	@ 0x96
 80013da:	f7ff fecf 	bl	800117c <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	490e      	ldr	r1, [pc, #56]	@ (800141c <BMI088_accel_init+0x16c>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	3301      	adds	r3, #1
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d008      	beq.n	8001406 <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4909      	ldr	r1, [pc, #36]	@ (800141c <BMI088_accel_init+0x16c>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	440b      	add	r3, r1
 8001400:	3302      	adds	r3, #2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	e006      	b.n	8001414 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	3301      	adds	r3, #1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d9b0      	bls.n	8001374 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000018 	.word	0x20000018

08001420 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800142e:	f7ff ff09 	bl	8001244 <BMI088_GYRO_NS_L>
 8001432:	1dbb      	adds	r3, r7, #6
 8001434:	4619      	mov	r1, r3
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f9cc 	bl	80017d4 <BMI088_read_single_reg>
 800143c:	f7ff ff12 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001440:	2096      	movs	r0, #150	@ 0x96
 8001442:	f7ff fe9b 	bl	800117c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001446:	f7ff fefd 	bl	8001244 <BMI088_GYRO_NS_L>
 800144a:	1dbb      	adds	r3, r7, #6
 800144c:	4619      	mov	r1, r3
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f9c0 	bl	80017d4 <BMI088_read_single_reg>
 8001454:	f7ff ff06 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001458:	2096      	movs	r0, #150	@ 0x96
 800145a:	f7ff fe8f 	bl	800117c <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800145e:	f7ff fef1 	bl	8001244 <BMI088_GYRO_NS_L>
 8001462:	21b6      	movs	r1, #182	@ 0xb6
 8001464:	2014      	movs	r0, #20
 8001466:	f000 f9a1 	bl	80017ac <BMI088_write_single_reg>
 800146a:	f7ff fefb 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800146e:	2050      	movs	r0, #80	@ 0x50
 8001470:	f7ff fe70 	bl	8001154 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001474:	f7ff fee6 	bl	8001244 <BMI088_GYRO_NS_L>
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	4619      	mov	r1, r3
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f9a9 	bl	80017d4 <BMI088_read_single_reg>
 8001482:	f7ff feef 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001486:	2096      	movs	r0, #150	@ 0x96
 8001488:	f7ff fe78 	bl	800117c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800148c:	f7ff feda 	bl	8001244 <BMI088_GYRO_NS_L>
 8001490:	1dbb      	adds	r3, r7, #6
 8001492:	4619      	mov	r1, r3
 8001494:	2000      	movs	r0, #0
 8001496:	f000 f99d 	bl	80017d4 <BMI088_read_single_reg>
 800149a:	f7ff fee3 	bl	8001264 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800149e:	2096      	movs	r0, #150	@ 0x96
 80014a0:	f7ff fe6c 	bl	800117c <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	d001      	beq.n	80014ae <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80014aa:	23ff      	movs	r3, #255	@ 0xff
 80014ac:	e049      	b.n	8001542 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e042      	b.n	800153a <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80014b4:	f7ff fec6 	bl	8001244 <BMI088_GYRO_NS_L>
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	4924      	ldr	r1, [pc, #144]	@ (800154c <BMI088_gyro_init+0x12c>)
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	7818      	ldrb	r0, [r3, #0]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	4920      	ldr	r1, [pc, #128]	@ (800154c <BMI088_gyro_init+0x12c>)
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	3301      	adds	r3, #1
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	f000 f968 	bl	80017ac <BMI088_write_single_reg>
 80014dc:	f7ff fec2 	bl	8001264 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80014e0:	2096      	movs	r0, #150	@ 0x96
 80014e2:	f7ff fe4b 	bl	800117c <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 80014e6:	f7ff fead 	bl	8001244 <BMI088_GYRO_NS_L>
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4917      	ldr	r1, [pc, #92]	@ (800154c <BMI088_gyro_init+0x12c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	1dba      	adds	r2, r7, #6
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f969 	bl	80017d4 <BMI088_read_single_reg>
 8001502:	f7ff feaf 	bl	8001264 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001506:	2096      	movs	r0, #150	@ 0x96
 8001508:	f7ff fe38 	bl	800117c <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	490f      	ldr	r1, [pc, #60]	@ (800154c <BMI088_gyro_init+0x12c>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	440b      	add	r3, r1
 8001518:	3301      	adds	r3, #1
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	429a      	cmp	r2, r3
 8001520:	d008      	beq.n	8001534 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	4909      	ldr	r1, [pc, #36]	@ (800154c <BMI088_gyro_init+0x12c>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	440b      	add	r3, r1
 800152e:	3302      	adds	r3, #2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	e006      	b.n	8001542 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	3301      	adds	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d9b9      	bls.n	80014b4 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000002c 	.word	0x2000002c

08001550 <IMU_get_gyro>:

float IMU_get_gyro(axis_t axis) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	BMI088_read(gyro, accel, &temp);
 800155a:	4a10      	ldr	r2, [pc, #64]	@ (800159c <IMU_get_gyro+0x4c>)
 800155c:	4910      	ldr	r1, [pc, #64]	@ (80015a0 <IMU_get_gyro+0x50>)
 800155e:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <IMU_get_gyro+0x54>)
 8001560:	f000 f836 	bl	80015d0 <BMI088_read>
	if(axis == x){
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <IMU_get_gyro+0x20>
		return gyro[0];
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <IMU_get_gyro+0x54>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	e00d      	b.n	800158c <IMU_get_gyro+0x3c>
	} else if (axis == y) {
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <IMU_get_gyro+0x2c>
		return gyro[1];
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <IMU_get_gyro+0x54>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	e007      	b.n	800158c <IMU_get_gyro+0x3c>
	} else if (axis == z) {
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d102      	bne.n	8001588 <IMU_get_gyro+0x38>
		return gyro[2];
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <IMU_get_gyro+0x54>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	e001      	b.n	800158c <IMU_get_gyro+0x3c>
	} else {
		return 0;
 8001588:	f04f 0300 	mov.w	r3, #0
	}
}
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000360 	.word	0x20000360
 80015a0:	20000354 	.word	0x20000354
 80015a4:	20000348 	.word	0x20000348

080015a8 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80015ac:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <IMU_get_temp+0x1c>)
 80015ae:	4906      	ldr	r1, [pc, #24]	@ (80015c8 <IMU_get_temp+0x20>)
 80015b0:	4806      	ldr	r0, [pc, #24]	@ (80015cc <IMU_get_temp+0x24>)
 80015b2:	f000 f80d 	bl	80015d0 <BMI088_read>
	return temp;
 80015b6:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <IMU_get_temp+0x1c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	ee07 3a90 	vmov	s15, r3
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000360 	.word	0x20000360
 80015c8:	20000354 	.word	0x20000354
 80015cc:	20000348 	.word	0x20000348

080015d0 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80015dc:	4a70      	ldr	r2, [pc, #448]	@ (80017a0 <BMI088_read+0x1d0>)
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e6:	6018      	str	r0, [r3, #0]
 80015e8:	3304      	adds	r3, #4
 80015ea:	8019      	strh	r1, [r3, #0]
 80015ec:	3302      	adds	r3, #2
 80015ee:	0c0a      	lsrs	r2, r1, #16
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80015f6:	f7ff fe05 	bl	8001204 <BMI088_ACCEL_NS_L>
 80015fa:	2092      	movs	r0, #146	@ 0x92
 80015fc:	f7ff fe42 	bl	8001284 <BMI088_read_write_byte>
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2206      	movs	r2, #6
 8001606:	4619      	mov	r1, r3
 8001608:	2012      	movs	r0, #18
 800160a:	f000 f8fb 	bl	8001804 <BMI088_read_muli_reg>
 800160e:	f7ff fe09 	bl	8001224 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8001612:	7d7b      	ldrb	r3, [r7, #21]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7d3b      	ldrb	r3, [r7, #20]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001620:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162c:	4b5d      	ldr	r3, [pc, #372]	@ (80017a4 <BMI088_read+0x1d4>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7dbb      	ldrb	r3, [r7, #22]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800164a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	4b53      	ldr	r3, [pc, #332]	@ (80017a4 <BMI088_read+0x1d4>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3304      	adds	r3, #4
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001668:	7e7b      	ldrb	r3, [r7, #25]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7e3b      	ldrb	r3, [r7, #24]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001676:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001682:	4b48      	ldr	r3, [pc, #288]	@ (80017a4 <BMI088_read+0x1d4>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3308      	adds	r3, #8
 800168c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001690:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8001694:	f7ff fdd6 	bl	8001244 <BMI088_GYRO_NS_L>
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2208      	movs	r2, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 f8af 	bl	8001804 <BMI088_read_muli_reg>
 80016a6:	f7ff fddd 	bl	8001264 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80016aa:	7d3b      	ldrb	r3, [r7, #20]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d140      	bne.n	8001732 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80016be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <BMI088_read+0x1d8>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80016da:	7e7b      	ldrb	r3, [r7, #25]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	7e3b      	ldrb	r3, [r7, #24]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <BMI088_read+0x1d8>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3304      	adds	r3, #4
 80016fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001702:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8001706:	7efb      	ldrb	r3, [r7, #27]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7ebb      	ldrb	r3, [r7, #26]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001714:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <BMI088_read+0x1d8>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3308      	adds	r3, #8
 800172a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172e:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001732:	f7ff fd67 	bl	8001204 <BMI088_ACCEL_NS_L>
 8001736:	20a2      	movs	r0, #162	@ 0xa2
 8001738:	f7ff fda4 	bl	8001284 <BMI088_read_write_byte>
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2202      	movs	r2, #2
 8001742:	4619      	mov	r1, r3
 8001744:	2022      	movs	r0, #34	@ 0x22
 8001746:	f000 f85d 	bl	8001804 <BMI088_read_muli_reg>
 800174a:	f7ff fd6b 	bl	8001224 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 800174e:	7d3b      	ldrb	r3, [r7, #20]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	b21a      	sxth	r2, r3
 8001754:	7d7b      	ldrb	r3, [r7, #21]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	b2db      	uxtb	r3, r3
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001760:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001768:	db04      	blt.n	8001774 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 800176a:	8bfb      	ldrh	r3, [r7, #30]
 800176c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001770:	b29b      	uxth	r3, r3
 8001772:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001774:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001788:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800178c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	edc3 7a00 	vstr	s15, [r3]
}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	08013f60 	.word	0x08013f60
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000014 	.word	0x20000014

080017ac <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	460a      	mov	r2, r1
 80017b6:	71fb      	strb	r3, [r7, #7]
 80017b8:	4613      	mov	r3, r2
 80017ba:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fd60 	bl	8001284 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fd5c 	bl	8001284 <BMI088_read_write_byte>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fd4b 	bl	8001284 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80017ee:	2055      	movs	r0, #85	@ 0x55
 80017f0:	f7ff fd48 	bl	8001284 <BMI088_read_write_byte>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	701a      	strb	r2, [r3, #0]
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fd31 	bl	8001284 <BMI088_read_write_byte>

    while (len != 0)
 8001822:	e00c      	b.n	800183e <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001824:	2055      	movs	r0, #85	@ 0x55
 8001826:	f7ff fd2d 	bl	8001284 <BMI088_read_write_byte>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	701a      	strb	r2, [r3, #0]
        buf++;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	603b      	str	r3, [r7, #0]
        len--;
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	3b01      	subs	r3, #1
 800183c:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ef      	bne.n	8001824 <BMI088_read_muli_reg+0x20>
    }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001858:	f107 0308 	add.w	r3, r7, #8
 800185c:	f107 0210 	add.w	r2, r7, #16
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f006 f8be 	bl	80079e4 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800186e:	d813      	bhi.n	8001898 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8001870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001874:	f240 809c 	bls.w	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8001878:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800187c:	2b03      	cmp	r3, #3
 800187e:	f200 8097 	bhi.w	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	0800198d 	.word	0x0800198d
 800188c:	0800199f 	.word	0x0800199f
 8001890:	080019b1 	.word	0x080019b1
 8001894:	080019b1 	.word	0x080019b1
 8001898:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 800189c:	2b0a      	cmp	r3, #10
 800189e:	f200 8087 	bhi.w	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a44      	ldr	r2, [pc, #272]	@ (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d131      	bne.n	8001918 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 80018b4:	7a3b      	ldrb	r3, [r7, #8]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	7a7b      	ldrb	r3, [r7, #9]
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018c6:	b291      	uxth	r1, r2
 80018c8:	4a3e      	ldr	r2, [pc, #248]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80018ca:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80018ce:	7abb      	ldrb	r3, [r7, #10]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b219      	sxth	r1, r3
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018dc:	430a      	orrs	r2, r1
 80018de:	b211      	sxth	r1, r2
 80018e0:	4a38      	ldr	r2, [pc, #224]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	460a      	mov	r2, r1
 80018e8:	805a      	strh	r2, [r3, #2]
 80018ea:	7b3b      	ldrb	r3, [r7, #12]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b219      	sxth	r1, r3
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018f8:	430a      	orrs	r2, r1
 80018fa:	b211      	sxth	r1, r2
 80018fc:	4a31      	ldr	r2, [pc, #196]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	460a      	mov	r2, r1
 8001904:	809a      	strh	r2, [r3, #4]
 8001906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800190a:	7bb9      	ldrb	r1, [r7, #14]
 800190c:	4a2d      	ldr	r2, [pc, #180]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	460a      	mov	r2, r1
 8001914:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8001916:	e04d      	b.n	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a2b      	ldr	r2, [pc, #172]	@ (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d149      	bne.n	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001920:	7a3b      	ldrb	r3, [r7, #8]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	7a7b      	ldrb	r3, [r7, #9]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001932:	b291      	uxth	r1, r2
 8001934:	4a23      	ldr	r2, [pc, #140]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001936:	330b      	adds	r3, #11
 8001938:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800193c:	7abb      	ldrb	r3, [r7, #10]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b219      	sxth	r1, r3
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	b21a      	sxth	r2, r3
 8001946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800194a:	430a      	orrs	r2, r1
 800194c:	b211      	sxth	r1, r2
 800194e:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001950:	330b      	adds	r3, #11
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	805a      	strh	r2, [r3, #2]
 800195a:	7b3b      	ldrb	r3, [r7, #12]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b219      	sxth	r1, r3
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	b21a      	sxth	r2, r3
 8001964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001968:	430a      	orrs	r2, r1
 800196a:	b211      	sxth	r1, r2
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800196e:	330b      	adds	r3, #11
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	460a      	mov	r2, r1
 8001976:	809a      	strh	r2, [r3, #4]
 8001978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800197c:	7bb9      	ldrb	r1, [r7, #14]
 800197e:	4a11      	ldr	r2, [pc, #68]	@ (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001980:	330b      	adds	r3, #11
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	460a      	mov	r2, r1
 8001988:	719a      	strb	r2, [r3, #6]
            break;
 800198a:	e013      	b.n	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800198e:	461a      	mov	r2, r3
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001998:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 800199c:	e00b      	b.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80019a0:	3308      	adds	r3, #8
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019aa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80019ae:	e002      	b.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 80019b4:	bf00      	nop
        }
    }
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	@ 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000098c 	.word	0x2000098c
 80019c4:	200003b4 	.word	0x200003b4
 80019c8:	200009b4 	.word	0x200009b4
 80019cc:	200007c4 	.word	0x200007c4

080019d0 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4604      	mov	r4, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	4611      	mov	r1, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	4603      	mov	r3, r0
 80019e4:	80bb      	strh	r3, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
 80019ea:	4613      	mov	r3, r2
 80019ec:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	4a27      	ldr	r2, [pc, #156]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 80019f2:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 80019f4:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 80019fa:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8001a06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a0a:	121b      	asrs	r3, r3, #8
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a12:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a1a:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8001a1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a20:	121b      	asrs	r3, r3, #8
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a28:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8001a2a:	883b      	ldrh	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a30:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8001a32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a36:	121b      	asrs	r3, r3, #8
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a3e:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001a40:	8c3b      	ldrh	r3, [r7, #32]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a46:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8001a48:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001a4c:	121b      	asrs	r3, r3, #8
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a54:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8001a56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a5c:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a6a:	4909      	ldr	r1, [pc, #36]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 8001a6c:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <CAN_DriveMotor+0xc8>)
 8001a6e:	f005 fee9 	bl	8007844 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8001a72:	e009      	b.n	8001a88 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d106      	bne.n	8001a88 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <CAN_DriveMotor+0xc4>)
 8001a80:	4903      	ldr	r1, [pc, #12]	@ (8001a90 <CAN_DriveMotor+0xc0>)
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <CAN_DriveMotor+0xcc>)
 8001a84:	f005 fede 	bl	8007844 <HAL_CAN_AddTxMessage>
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	20000364 	.word	0x20000364
 8001a94:	2000037c 	.word	0x2000037c
 8001a98:	2000098c 	.word	0x2000098c
 8001a9c:	200009b4 	.word	0x200009b4

08001aa0 <CAN_defineMotor>:

void CAN_defineMotor(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	71bb      	strb	r3, [r7, #6]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	717b      	strb	r3, [r7, #5]
	switch(motorType) {
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	dc02      	bgt.n	8001abe <CAN_defineMotor+0x1e>
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	dc03      	bgt.n	8001ac4 <CAN_defineMotor+0x24>
 8001abc:	e082      	b.n	8001bc4 <CAN_defineMotor+0x124>
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d03a      	beq.n	8001b38 <CAN_defineMotor+0x98>
 8001ac2:	e07f      	b.n	8001bc4 <CAN_defineMotor+0x124>
		case (1) :
		case (2) : {
			switch(motorID) {
 8001ac4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	dc02      	bgt.n	8001ad2 <CAN_defineMotor+0x32>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dc04      	bgt.n	8001ada <CAN_defineMotor+0x3a>
 8001ad0:	e02a      	b.n	8001b28 <CAN_defineMotor+0x88>
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d827      	bhi.n	8001b28 <CAN_defineMotor+0x88>
 8001ad8:	e012      	b.n	8001b00 <CAN_defineMotor+0x60>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group1[motorID - 1], motorType);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ae2:	1e59      	subs	r1, r3, #1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	4a39      	ldr	r2, [pc, #228]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001af2:	4413      	add	r3, r2
 8001af4:	79ba      	ldrb	r2, [r7, #6]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f875 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001afe:	e01a      	b.n	8001b36 <CAN_defineMotor+0x96>
				}
				case (5):
				case (6):
				case (7):
				case (8): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	1e5a      	subs	r2, r3, #1
 8001b04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b08:	1e59      	subs	r1, r3, #1
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	4a30      	ldr	r2, [pc, #192]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	79ba      	ldrb	r2, [r7, #6]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f861 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001b26:	e006      	b.n	8001b36 <CAN_defineMotor+0x96>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001b28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482b      	ldr	r0, [pc, #172]	@ (8001bdc <CAN_defineMotor+0x13c>)
 8001b30:	f000 fee2 	bl	80028f8 <usart_printf>
					break;
 8001b34:	bf00      	nop
				}
			}
			break;
 8001b36:	e04b      	b.n	8001bd0 <CAN_defineMotor+0x130>
		}
		case (3): {
			switch(motorID) {
 8001b38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d032      	beq.n	8001ba6 <CAN_defineMotor+0x106>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	dc37      	bgt.n	8001bb4 <CAN_defineMotor+0x114>
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	dc02      	bgt.n	8001b4e <CAN_defineMotor+0xae>
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	dc04      	bgt.n	8001b56 <CAN_defineMotor+0xb6>
 8001b4c:	e032      	b.n	8001bb4 <CAN_defineMotor+0x114>
 8001b4e:	3b05      	subs	r3, #5
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d82f      	bhi.n	8001bb4 <CAN_defineMotor+0x114>
 8001b54:	e013      	b.n	8001b7e <CAN_defineMotor+0xde>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b5e:	1e59      	subs	r1, r3, #1
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	3304      	adds	r3, #4
 8001b72:	79ba      	ldrb	r2, [r7, #6]
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f836 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001b7c:	e021      	b.n	8001bc2 <CAN_defineMotor+0x122>
				}
				case (5):
				case (6):
				case (7): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group3[motorID - 5], motorType);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b86:	1f59      	subs	r1, r3, #5
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	3308      	adds	r3, #8
 8001b96:	4a10      	ldr	r2, [pc, #64]	@ (8001bd8 <CAN_defineMotor+0x138>)
 8001b98:	4413      	add	r3, r2
 8001b9a:	79ba      	ldrb	r2, [r7, #6]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f822 	bl	8001be8 <CAN_setMotorDefinition>
					break;
 8001ba4:	e00d      	b.n	8001bc2 <CAN_defineMotor+0x122>
				}
				case (8): {               // call the user a dumbass for spawning an ID 8 on 0x2FF
					usart_printf("WARNING - motor ID 8 is not available for GM6020s according to DJI's CAN protocols \r\n", motorID);
 8001ba6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001baa:	4619      	mov	r1, r3
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <CAN_defineMotor+0x140>)
 8001bae:	f000 fea3 	bl	80028f8 <usart_printf>
					break;
 8001bb2:	e006      	b.n	8001bc2 <CAN_defineMotor+0x122>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001bb4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <CAN_defineMotor+0x13c>)
 8001bbc:	f000 fe9c 	bl	80028f8 <usart_printf>
					break;
 8001bc0:	bf00      	nop
				}
			}
			break;
 8001bc2:	e005      	b.n	8001bd0 <CAN_defineMotor+0x130>
		}
		default: {
			usart_printf("WARNING - motor type %d does not match any registered motors \r\n", motorType);
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4806      	ldr	r0, [pc, #24]	@ (8001be4 <CAN_defineMotor+0x144>)
 8001bca:	f000 fe95 	bl	80028f8 <usart_printf>
			break;
 8001bce:	bf00      	nop
		}
	}
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000040 	.word	0x20000040
 8001bdc:	08013f68 	.word	0x08013f68
 8001be0:	08013fa8 	.word	0x08013fa8
 8001be4:	08014000 	.word	0x08014000

08001be8 <CAN_setMotorDefinition>:

void CAN_setMotorDefinition(int8_t *Declaration, MotorType_ID motorType) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
	if (*Declaration == -1) {    // ok
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bfe:	d104      	bne.n	8001c0a <CAN_setMotorDefinition+0x22>
		*Declaration = motorType;
 8001c00:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	701a      	strb	r2, [r3, #0]
	} else {                           // repeat definition, do nothing
		usart_printf("WARNING - motor ID has already been set \r\n");
	}
}
 8001c08:	e002      	b.n	8001c10 <CAN_setMotorDefinition+0x28>
		usart_printf("WARNING - motor ID has already been set \r\n");
 8001c0a:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <CAN_setMotorDefinition+0x30>)
 8001c0c:	f000 fe74 	bl	80028f8 <usart_printf>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	08014040 	.word	0x08014040

08001c1c <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001c1c:	b5b0      	push	{r4, r5, r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	4604      	mov	r4, r0
 8001c24:	4608      	mov	r0, r1
 8001c26:	4611      	mov	r1, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4623      	mov	r3, r4
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	460b      	mov	r3, r1
 8001c34:	717b      	strb	r3, [r7, #5]
 8001c36:	4613      	mov	r3, r2
 8001c38:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	f000 8142 	beq.w	8001ec6 <CAN_setMotorCtrlVal+0x2aa>
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	f300 81e1 	bgt.w	800200a <CAN_setMotorCtrlVal+0x3ee>
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	dc02      	bgt.n	8001c52 <CAN_setMotorCtrlVal+0x36>
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dc04      	bgt.n	8001c5a <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8001c50:	e1db      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	f000 8097 	beq.w	8001d86 <CAN_setMotorCtrlVal+0x16a>
}
 8001c58:	e1d7      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001c5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	dc02      	bgt.n	8001c68 <CAN_setMotorCtrlVal+0x4c>
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dc05      	bgt.n	8001c72 <CAN_setMotorCtrlVal+0x56>
					break;
 8001c66:	e08c      	b.n	8001d82 <CAN_setMotorCtrlVal+0x166>
 8001c68:	3b05      	subs	r3, #5
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	f200 8089 	bhi.w	8001d82 <CAN_setMotorCtrlVal+0x166>
 8001c70:	e042      	b.n	8001cf8 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	1e5a      	subs	r2, r3, #1
 8001c76:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c7a:	1e59      	subs	r1, r3, #1
 8001c7c:	48bd      	ldr	r0, [pc, #756]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	887a      	ldrh	r2, [r7, #2]
 8001c8a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	1e5a      	subs	r2, r3, #1
 8001c92:	49b8      	ldr	r1, [pc, #736]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	49b3      	ldr	r1, [pc, #716]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	49ad      	ldr	r1, [pc, #692]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3304      	adds	r3, #4
 8001cca:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	48a8      	ldr	r0, [pc, #672]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4403      	add	r3, r0
 8001cde:	3306      	adds	r3, #6
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	79f8      	ldrb	r0, [r7, #7]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	9100      	str	r1, [sp, #0]
 8001cea:	462b      	mov	r3, r5
 8001cec:	4622      	mov	r2, r4
 8001cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cf2:	f7ff fe6d 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001cf6:	e045      	b.n	8001d84 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d00:	1f59      	subs	r1, r3, #5
 8001d02:	489c      	ldr	r0, [pc, #624]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3304      	adds	r3, #4
 8001d10:	887a      	ldrh	r2, [r7, #2]
 8001d12:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	4996      	ldr	r1, [pc, #600]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	3308      	adds	r3, #8
 8001d28:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	1e5a      	subs	r2, r3, #1
 8001d30:	4990      	ldr	r1, [pc, #576]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	330a      	adds	r3, #10
 8001d3e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	498b      	ldr	r1, [pc, #556]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	330c      	adds	r3, #12
 8001d54:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	4885      	ldr	r0, [pc, #532]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4403      	add	r3, r0
 8001d68:	330e      	adds	r3, #14
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	79f8      	ldrb	r0, [r7, #7]
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	9100      	str	r1, [sp, #0]
 8001d74:	462b      	mov	r3, r5
 8001d76:	4622      	mov	r2, r4
 8001d78:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001d7c:	f7ff fe28 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001d80:	e000      	b.n	8001d84 <CAN_setMotorCtrlVal+0x168>
					break;
 8001d82:	bf00      	nop
			break;
 8001d84:	e141      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001d86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	f000 8097 	beq.w	8001ebe <CAN_setMotorCtrlVal+0x2a2>
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	f300 8096 	bgt.w	8001ec2 <CAN_setMotorCtrlVal+0x2a6>
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	dc02      	bgt.n	8001da0 <CAN_setMotorCtrlVal+0x184>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	dc05      	bgt.n	8001daa <CAN_setMotorCtrlVal+0x18e>
					break;
 8001d9e:	e090      	b.n	8001ec2 <CAN_setMotorCtrlVal+0x2a6>
 8001da0:	3b05      	subs	r3, #5
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	f200 808d 	bhi.w	8001ec2 <CAN_setMotorCtrlVal+0x2a6>
 8001da8:	e044      	b.n	8001e34 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001db2:	1e59      	subs	r1, r3, #1
 8001db4:	486f      	ldr	r0, [pc, #444]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	4969      	ldr	r1, [pc, #420]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3308      	adds	r3, #8
 8001dda:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	4964      	ldr	r1, [pc, #400]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	330a      	adds	r3, #10
 8001df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	1e5a      	subs	r2, r3, #1
 8001df8:	495e      	ldr	r1, [pc, #376]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	330c      	adds	r3, #12
 8001e06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	4859      	ldr	r0, [pc, #356]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4403      	add	r3, r0
 8001e1a:	330e      	adds	r3, #14
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	79f8      	ldrb	r0, [r7, #7]
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	9100      	str	r1, [sp, #0]
 8001e26:	462b      	mov	r3, r5
 8001e28:	4622      	mov	r2, r4
 8001e2a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001e2e:	f7ff fdcf 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001e32:	e047      	b.n	8001ec4 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e3c:	1f59      	subs	r1, r3, #5
 8001e3e:	484d      	ldr	r0, [pc, #308]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	4947      	ldr	r1, [pc, #284]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3310      	adds	r3, #16
 8001e64:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	4941      	ldr	r1, [pc, #260]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3312      	adds	r3, #18
 8001e7a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	493c      	ldr	r1, [pc, #240]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3314      	adds	r3, #20
 8001e90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	4836      	ldr	r0, [pc, #216]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4403      	add	r3, r0
 8001ea4:	3316      	adds	r3, #22
 8001ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eaa:	79f8      	ldrb	r0, [r7, #7]
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	9100      	str	r1, [sp, #0]
 8001eb0:	462b      	mov	r3, r5
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001eb8:	f7ff fd8a 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001ebc:	e002      	b.n	8001ec4 <CAN_setMotorCtrlVal+0x2a8>
					break;
 8001ebe:	bf00      	nop
 8001ec0:	e0a3      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
					break;
 8001ec2:	bf00      	nop
			break;
 8001ec4:	e0a1      	b.n	800200a <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001ec6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	f000 8099 	beq.w	8002002 <CAN_setMotorCtrlVal+0x3e6>
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	f300 8098 	bgt.w	8002006 <CAN_setMotorCtrlVal+0x3ea>
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	dc02      	bgt.n	8001ee0 <CAN_setMotorCtrlVal+0x2c4>
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dc05      	bgt.n	8001eea <CAN_setMotorCtrlVal+0x2ce>
					break;
 8001ede:	e092      	b.n	8002006 <CAN_setMotorCtrlVal+0x3ea>
 8001ee0:	3b05      	subs	r3, #5
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	f200 808f 	bhi.w	8002006 <CAN_setMotorCtrlVal+0x3ea>
 8001ee8:	e046      	b.n	8001f78 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ef2:	1e59      	subs	r1, r3, #1
 8001ef4:	481f      	ldr	r0, [pc, #124]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3304      	adds	r3, #4
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	1e5a      	subs	r2, r3, #1
 8001f0c:	4919      	ldr	r1, [pc, #100]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	3308      	adds	r3, #8
 8001f1a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	4914      	ldr	r1, [pc, #80]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	330a      	adds	r3, #10
 8001f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	1e5a      	subs	r2, r3, #1
 8001f38:	490e      	ldr	r1, [pc, #56]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	330c      	adds	r3, #12
 8001f46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	4809      	ldr	r0, [pc, #36]	@ (8001f74 <CAN_setMotorCtrlVal+0x358>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4403      	add	r3, r0
 8001f5a:	330e      	adds	r3, #14
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	79f8      	ldrb	r0, [r7, #7]
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	9100      	str	r1, [sp, #0]
 8001f66:	462b      	mov	r3, r5
 8001f68:	4622      	mov	r2, r4
 8001f6a:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001f6e:	f7ff fd2f 	bl	80019d0 <CAN_DriveMotor>
					break;
 8001f72:	e049      	b.n	8002008 <CAN_setMotorCtrlVal+0x3ec>
 8001f74:	20000384 	.word	0x20000384
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f80:	1f59      	subs	r1, r3, #5
 8001f82:	4824      	ldr	r0, [pc, #144]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3308      	adds	r3, #8
 8001f90:	887a      	ldrh	r2, [r7, #2]
 8001f92:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	491e      	ldr	r1, [pc, #120]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3310      	adds	r3, #16
 8001fa8:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	4918      	ldr	r1, [pc, #96]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	3312      	adds	r3, #18
 8001fbe:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	4913      	ldr	r1, [pc, #76]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	1e5a      	subs	r2, r3, #1
 8001fdc:	480d      	ldr	r0, [pc, #52]	@ (8002014 <CAN_setMotorCtrlVal+0x3f8>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4403      	add	r3, r0
 8001fe8:	3316      	adds	r3, #22
 8001fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fee:	79f8      	ldrb	r0, [r7, #7]
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	9100      	str	r1, [sp, #0]
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001ffc:	f7ff fce8 	bl	80019d0 <CAN_DriveMotor>
					break;
 8002000:	e002      	b.n	8002008 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002002:	bf00      	nop
 8002004:	e000      	b.n	8002008 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002006:	bf00      	nop
			break;
 8002008:	bf00      	nop
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bdb0      	pop	{r4, r5, r7, pc}
 8002012:	bf00      	nop
 8002014:	20000384 	.word	0x20000384

08002018 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b08b      	sub	sp, #44	@ 0x2c
 800201c:	af00      	add	r7, sp, #0
 800201e:	4604      	mov	r4, r0
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	eef0 6a40 	vmov.f32	s13, s0
 800202a:	eeb0 7a60 	vmov.f32	s14, s1
 800202e:	eef0 7a41 	vmov.f32	s15, s2
 8002032:	4623      	mov	r3, r4
 8002034:	75fb      	strb	r3, [r7, #23]
 8002036:	4603      	mov	r3, r0
 8002038:	75bb      	strb	r3, [r7, #22]
 800203a:	460b      	mov	r3, r1
 800203c:	757b      	strb	r3, [r7, #21]
 800203e:	4613      	mov	r3, r2
 8002040:	827b      	strh	r3, [r7, #18]
 8002042:	edc7 6a01 	vstr	s13, [r7, #4]
 8002046:	ed87 7a02 	vstr	s14, [r7, #8]
 800204a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	3b01      	subs	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8002058:	7dbb      	ldrb	r3, [r7, #22]
 800205a:	2b02      	cmp	r3, #2
 800205c:	dc02      	bgt.n	8002064 <calcRPM_PID+0x4c>
 800205e:	2b00      	cmp	r3, #0
 8002060:	dc04      	bgt.n	800206c <calcRPM_PID+0x54>
 8002062:	e00d      	b.n	8002080 <calcRPM_PID+0x68>
 8002064:	3b03      	subs	r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d80a      	bhi.n	8002080 <calcRPM_PID+0x68>
 800206a:	e004      	b.n	8002076 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 800206c:	7d7b      	ldrb	r3, [r7, #21]
 800206e:	3b01      	subs	r3, #1
 8002070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002074:	e009      	b.n	800208a <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8002076:	7d7b      	ldrb	r3, [r7, #21]
 8002078:	3303      	adds	r3, #3
 800207a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800207e:	e004      	b.n	800208a <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8002080:	7d7b      	ldrb	r3, [r7, #21]
 8002082:	3b01      	subs	r3, #1
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002088:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 800208a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800208e:	7ffa      	ldrb	r2, [r7, #31]
 8002090:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002094:	4c70      	ldr	r4, [pc, #448]	@ (8002258 <calcRPM_PID+0x240>)
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	4403      	add	r3, r0
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4423      	add	r3, r4
 80020a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020aa:	7ffa      	ldrb	r2, [r7, #31]
 80020ac:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020b0:	1ac9      	subs	r1, r1, r3
 80020b2:	4c6a      	ldr	r4, [pc, #424]	@ (800225c <calcRPM_PID+0x244>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	4403      	add	r3, r0
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4423      	add	r3, r4
 80020c4:	3304      	adds	r3, #4
 80020c6:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80020c8:	7ffa      	ldrb	r2, [r7, #31]
 80020ca:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80020ce:	4863      	ldr	r0, [pc, #396]	@ (800225c <calcRPM_PID+0x244>)
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	440b      	add	r3, r1
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4403      	add	r3, r0
 80020e0:	3308      	adds	r3, #8
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	7ffa      	ldrb	r2, [r7, #31]
 80020e6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020ea:	4c5c      	ldr	r4, [pc, #368]	@ (800225c <calcRPM_PID+0x244>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	4403      	add	r3, r0
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4423      	add	r3, r4
 80020fc:	3304      	adds	r3, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	7ffa      	ldrb	r2, [r7, #31]
 8002102:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002106:	4419      	add	r1, r3
 8002108:	4c54      	ldr	r4, [pc, #336]	@ (800225c <calcRPM_PID+0x244>)
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	4403      	add	r3, r0
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4423      	add	r3, r4
 800211a:	3308      	adds	r3, #8
 800211c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 800211e:	7ffa      	ldrb	r2, [r7, #31]
 8002120:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002124:	484d      	ldr	r0, [pc, #308]	@ (800225c <calcRPM_PID+0x244>)
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	440b      	add	r3, r1
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	4403      	add	r3, r0
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	7ffa      	ldrb	r2, [r7, #31]
 800213a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800213e:	4c46      	ldr	r4, [pc, #280]	@ (8002258 <calcRPM_PID+0x240>)
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	4403      	add	r3, r0
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4423      	add	r3, r4
 8002150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002154:	7ffa      	ldrb	r2, [r7, #31]
 8002156:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800215a:	1ac9      	subs	r1, r1, r3
 800215c:	4c3f      	ldr	r4, [pc, #252]	@ (800225c <calcRPM_PID+0x244>)
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	4403      	add	r3, r0
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	4423      	add	r3, r4
 800216e:	330c      	adds	r3, #12
 8002170:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8002172:	7ffa      	ldrb	r2, [r7, #31]
 8002174:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002178:	4837      	ldr	r0, [pc, #220]	@ (8002258 <calcRPM_PID+0x240>)
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	440b      	add	r3, r1
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4403      	add	r3, r0
 800218a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800218e:	7ffa      	ldrb	r2, [r7, #31]
 8002190:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002194:	461c      	mov	r4, r3
 8002196:	4831      	ldr	r0, [pc, #196]	@ (800225c <calcRPM_PID+0x244>)
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	4403      	add	r3, r0
 80021a8:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80021aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80021ae:	7ffa      	ldrb	r2, [r7, #31]
 80021b0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021b4:	4829      	ldr	r0, [pc, #164]	@ (800225c <calcRPM_PID+0x244>)
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4403      	add	r3, r0
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80021da:	7ffa      	ldrb	r2, [r7, #31]
 80021dc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021e0:	481e      	ldr	r0, [pc, #120]	@ (800225c <calcRPM_PID+0x244>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4403      	add	r3, r0
 80021f2:	3308      	adds	r3, #8
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002206:	edd7 6a03 	vldr	s13, [r7, #12]
 800220a:	7ffa      	ldrb	r2, [r7, #31]
 800220c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002210:	4812      	ldr	r0, [pc, #72]	@ (800225c <calcRPM_PID+0x244>)
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	440b      	add	r3, r1
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4403      	add	r3, r0
 8002222:	330c      	adds	r3, #12
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223a:	ee17 3a90 	vmov	r3, s15
 800223e:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8002240:	7dbb      	ldrb	r3, [r7, #22]
 8002242:	6a39      	ldr	r1, [r7, #32]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f997 	bl	8002578 <applyCtrlLimit>
 800224a:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 800224c:	6a3b      	ldr	r3, [r7, #32]
}
 800224e:	4618      	mov	r0, r3
 8002250:	372c      	adds	r7, #44	@ 0x2c
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop
 8002258:	200003b4 	.word	0x200003b4
 800225c:	20000464 	.word	0x20000464

08002260 <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b08b      	sub	sp, #44	@ 0x2c
 8002264:	af00      	add	r7, sp, #0
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	eef0 6a40 	vmov.f32	s13, s0
 8002272:	eeb0 7a60 	vmov.f32	s14, s1
 8002276:	eef0 7a41 	vmov.f32	s15, s2
 800227a:	4623      	mov	r3, r4
 800227c:	75fb      	strb	r3, [r7, #23]
 800227e:	4603      	mov	r3, r0
 8002280:	75bb      	strb	r3, [r7, #22]
 8002282:	460b      	mov	r3, r1
 8002284:	757b      	strb	r3, [r7, #21]
 8002286:	4613      	mov	r3, r2
 8002288:	827b      	strh	r3, [r7, #18]
 800228a:	edc7 6a01 	vstr	s13, [r7, #4]
 800228e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002292:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
 800229c:	3b01      	subs	r3, #1
 800229e:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 80022a8:	7dbb      	ldrb	r3, [r7, #22]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	dc02      	bgt.n	80022b4 <calcPosition_PID+0x54>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	dc04      	bgt.n	80022bc <calcPosition_PID+0x5c>
 80022b2:	e00d      	b.n	80022d0 <calcPosition_PID+0x70>
 80022b4:	3b03      	subs	r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d80a      	bhi.n	80022d0 <calcPosition_PID+0x70>
 80022ba:	e004      	b.n	80022c6 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 80022bc:	7d7b      	ldrb	r3, [r7, #21]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022c4:	e009      	b.n	80022da <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80022c6:	7d7b      	ldrb	r3, [r7, #21]
 80022c8:	3303      	adds	r3, #3
 80022ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022ce:	e004      	b.n	80022da <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 80022d0:	7d7b      	ldrb	r3, [r7, #21]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022d8:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 80022da:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80022de:	7ffa      	ldrb	r2, [r7, #31]
 80022e0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80022e4:	4ca2      	ldr	r4, [pc, #648]	@ (8002570 <calcPosition_PID+0x310>)
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	4403      	add	r3, r0
 80022f2:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80022f6:	1acb      	subs	r3, r1, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db10      	blt.n	800231e <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 80022fc:	8a79      	ldrh	r1, [r7, #18]
 80022fe:	7ffa      	ldrb	r2, [r7, #31]
 8002300:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002304:	4c9a      	ldr	r4, [pc, #616]	@ (8002570 <calcPosition_PID+0x310>)
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	4403      	add	r3, r0
 8002312:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002316:	1acb      	subs	r3, r1, r3
 8002318:	b29b      	uxth	r3, r3
 800231a:	83bb      	strh	r3, [r7, #28]
 800231c:	e012      	b.n	8002344 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 800231e:	8a79      	ldrh	r1, [r7, #18]
 8002320:	7ffa      	ldrb	r2, [r7, #31]
 8002322:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002326:	4c92      	ldr	r4, [pc, #584]	@ (8002570 <calcPosition_PID+0x310>)
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	4403      	add	r3, r0
 8002334:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002338:	1acb      	subs	r3, r1, r3
 800233a:	b29b      	uxth	r3, r3
 800233c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002340:	b29b      	uxth	r3, r3
 8002342:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8002344:	7ffa      	ldrb	r2, [r7, #31]
 8002346:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800234a:	4889      	ldr	r0, [pc, #548]	@ (8002570 <calcPosition_PID+0x310>)
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	440b      	add	r3, r1
 8002358:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800235c:	461a      	mov	r2, r3
 800235e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	db10      	blt.n	800238a <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8002368:	7ffa      	ldrb	r2, [r7, #31]
 800236a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800236e:	4880      	ldr	r0, [pc, #512]	@ (8002570 <calcPosition_PID+0x310>)
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	440b      	add	r3, r1
 800237c:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002380:	8a7b      	ldrh	r3, [r7, #18]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	837b      	strh	r3, [r7, #26]
 8002388:	e012      	b.n	80023b0 <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 800238a:	7ffa      	ldrb	r2, [r7, #31]
 800238c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002390:	4877      	ldr	r0, [pc, #476]	@ (8002570 <calcPosition_PID+0x310>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	440b      	add	r3, r1
 800239e:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 80023a2:	8a7b      	ldrh	r3, [r7, #18]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 80023b0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80023b4:	7ffa      	ldrb	r2, [r7, #31]
 80023b6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80023ba:	4c6d      	ldr	r4, [pc, #436]	@ (8002570 <calcPosition_PID+0x310>)
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	4403      	add	r3, r0
 80023c8:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80023cc:	7ffa      	ldrb	r2, [r7, #31]
 80023ce:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80023d2:	1ac9      	subs	r1, r1, r3
 80023d4:	4c67      	ldr	r4, [pc, #412]	@ (8002574 <calcPosition_PID+0x314>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	4403      	add	r3, r0
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4423      	add	r3, r4
 80023e6:	3304      	adds	r3, #4
 80023e8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80023ea:	7ffa      	ldrb	r2, [r7, #31]
 80023ec:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80023f0:	4860      	ldr	r0, [pc, #384]	@ (8002574 <calcPosition_PID+0x314>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4403      	add	r3, r0
 8002402:	3308      	adds	r3, #8
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	7ffa      	ldrb	r2, [r7, #31]
 8002408:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800240c:	4c59      	ldr	r4, [pc, #356]	@ (8002574 <calcPosition_PID+0x314>)
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	4403      	add	r3, r0
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	4423      	add	r3, r4
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	7ffa      	ldrb	r2, [r7, #31]
 8002424:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002428:	4419      	add	r1, r3
 800242a:	4c52      	ldr	r4, [pc, #328]	@ (8002574 <calcPosition_PID+0x314>)
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	4403      	add	r3, r0
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4423      	add	r3, r4
 800243c:	3308      	adds	r3, #8
 800243e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 8002440:	7ffa      	ldrb	r2, [r7, #31]
 8002442:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002446:	484b      	ldr	r0, [pc, #300]	@ (8002574 <calcPosition_PID+0x314>)
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	440b      	add	r3, r1
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	4403      	add	r3, r0
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	7ffa      	ldrb	r2, [r7, #31]
 800245c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002460:	4c43      	ldr	r4, [pc, #268]	@ (8002570 <calcPosition_PID+0x310>)
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	4403      	add	r3, r0
 800246e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002472:	7ffa      	ldrb	r2, [r7, #31]
 8002474:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002478:	1ac9      	subs	r1, r1, r3
 800247a:	4c3e      	ldr	r4, [pc, #248]	@ (8002574 <calcPosition_PID+0x314>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	4403      	add	r3, r0
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4423      	add	r3, r4
 800248c:	330c      	adds	r3, #12
 800248e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8002490:	7ffa      	ldrb	r2, [r7, #31]
 8002492:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002496:	4836      	ldr	r0, [pc, #216]	@ (8002570 <calcPosition_PID+0x310>)
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80024a8:	7ffa      	ldrb	r2, [r7, #31]
 80024aa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024ae:	461c      	mov	r4, r3
 80024b0:	4830      	ldr	r0, [pc, #192]	@ (8002574 <calcPosition_PID+0x314>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	440b      	add	r3, r1
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4403      	add	r3, r0
 80024c2:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80024c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80024c8:	7ffa      	ldrb	r2, [r7, #31]
 80024ca:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024ce:	4829      	ldr	r0, [pc, #164]	@ (8002574 <calcPosition_PID+0x314>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	440b      	add	r3, r1
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	4403      	add	r3, r0
 80024e0:	3304      	adds	r3, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f0:	edd7 6a02 	vldr	s13, [r7, #8]
 80024f4:	7ffa      	ldrb	r2, [r7, #31]
 80024f6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024fa:	481e      	ldr	r0, [pc, #120]	@ (8002574 <calcPosition_PID+0x314>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4413      	add	r3, r2
 8002506:	440b      	add	r3, r1
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4403      	add	r3, r0
 800250c:	3308      	adds	r3, #8
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002520:	edd7 6a03 	vldr	s13, [r7, #12]
 8002524:	7ffa      	ldrb	r2, [r7, #31]
 8002526:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800252a:	4812      	ldr	r0, [pc, #72]	@ (8002574 <calcPosition_PID+0x314>)
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	440b      	add	r3, r1
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4403      	add	r3, r0
 800253c:	330c      	adds	r3, #12
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002554:	ee17 3a90 	vmov	r3, s15
 8002558:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 800255a:	7dbb      	ldrb	r3, [r7, #22]
 800255c:	6a39      	ldr	r1, [r7, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f80a 	bl	8002578 <applyCtrlLimit>
 8002564:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8002566:	6a3b      	ldr	r3, [r7, #32]
}
 8002568:	4618      	mov	r0, r3
 800256a:	372c      	adds	r7, #44	@ 0x2c
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	200003b4 	.word	0x200003b4
 8002574:	20000464 	.word	0x20000464

08002578 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b04      	cmp	r3, #4
 8002588:	d009      	beq.n	800259e <applyCtrlLimit+0x26>
 800258a:	2b04      	cmp	r3, #4
 800258c:	dc29      	bgt.n	80025e2 <applyCtrlLimit+0x6a>
 800258e:	2b02      	cmp	r3, #2
 8002590:	dc02      	bgt.n	8002598 <applyCtrlLimit+0x20>
 8002592:	2b00      	cmp	r3, #0
 8002594:	dc03      	bgt.n	800259e <applyCtrlLimit+0x26>
 8002596:	e024      	b.n	80025e2 <applyCtrlLimit+0x6a>
 8002598:	2b03      	cmp	r3, #3
 800259a:	d00f      	beq.n	80025bc <applyCtrlLimit+0x44>
 800259c:	e021      	b.n	80025e2 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025a4:	dd03      	ble.n	80025ae <applyCtrlLimit+0x36>
				val = 16384;
 80025a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025aa:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 80025ac:	e016      	b.n	80025dc <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80025b4:	da12      	bge.n	80025dc <applyCtrlLimit+0x64>
				val = -16384;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <applyCtrlLimit+0x78>)
 80025b8:	603b      	str	r3, [r7, #0]
			break;
 80025ba:	e00f      	b.n	80025dc <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80025c2:	4293      	cmp	r3, r2
 80025c4:	dd03      	ble.n	80025ce <applyCtrlLimit+0x56>
				val = 25000;
 80025c6:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80025ca:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 80025cc:	e008      	b.n	80025e0 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <applyCtrlLimit+0x7c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	da04      	bge.n	80025e0 <applyCtrlLimit+0x68>
				val = -25000;
 80025d6:	4b07      	ldr	r3, [pc, #28]	@ (80025f4 <applyCtrlLimit+0x7c>)
 80025d8:	603b      	str	r3, [r7, #0]
			break;
 80025da:	e001      	b.n	80025e0 <applyCtrlLimit+0x68>
			break;
 80025dc:	bf00      	nop
 80025de:	e000      	b.n	80025e2 <applyCtrlLimit+0x6a>
			break;
 80025e0:	bf00      	nop
		}
	}
	return val;
 80025e2:	683b      	ldr	r3, [r7, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	ffffc000 	.word	0xffffc000
 80025f4:	ffff9e58 	.word	0xffff9e58

080025f8 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4604      	mov	r4, r0
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	eef0 6a40 	vmov.f32	s13, s0
 800260a:	eeb0 7a60 	vmov.f32	s14, s1
 800260e:	eef0 7a41 	vmov.f32	s15, s2
 8002612:	4623      	mov	r3, r4
 8002614:	75fb      	strb	r3, [r7, #23]
 8002616:	4603      	mov	r3, r0
 8002618:	75bb      	strb	r3, [r7, #22]
 800261a:	460b      	mov	r3, r1
 800261c:	757b      	strb	r3, [r7, #21]
 800261e:	4613      	mov	r3, r2
 8002620:	827b      	strh	r3, [r7, #18]
 8002622:	edc7 6a01 	vstr	s13, [r7, #4]
 8002626:	ed87 7a02 	vstr	s14, [r7, #8]
 800262a:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 800262e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002632:	ed97 7a02 	vldr	s14, [r7, #8]
 8002636:	edd7 7a03 	vldr	s15, [r7, #12]
 800263a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800263e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002642:	7db9      	ldrb	r1, [r7, #22]
 8002644:	7df8      	ldrb	r0, [r7, #23]
 8002646:	eeb0 0a66 	vmov.f32	s0, s13
 800264a:	eef0 0a47 	vmov.f32	s1, s14
 800264e:	eeb0 1a67 	vmov.f32	s2, s15
 8002652:	f7ff fce1 	bl	8002018 <calcRPM_PID>
 8002656:	4603      	mov	r3, r0
 8002658:	b21b      	sxth	r3, r3
 800265a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800265e:	7db9      	ldrb	r1, [r7, #22]
 8002660:	7df8      	ldrb	r0, [r7, #23]
 8002662:	f7ff fadb 	bl	8001c1c <CAN_setMotorCtrlVal>
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}

0800266e <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 800266e:	b590      	push	{r4, r7, lr}
 8002670:	b087      	sub	sp, #28
 8002672:	af00      	add	r7, sp, #0
 8002674:	4604      	mov	r4, r0
 8002676:	4608      	mov	r0, r1
 8002678:	4611      	mov	r1, r2
 800267a:	461a      	mov	r2, r3
 800267c:	eef0 6a40 	vmov.f32	s13, s0
 8002680:	eeb0 7a60 	vmov.f32	s14, s1
 8002684:	eef0 7a41 	vmov.f32	s15, s2
 8002688:	4623      	mov	r3, r4
 800268a:	75fb      	strb	r3, [r7, #23]
 800268c:	4603      	mov	r3, r0
 800268e:	75bb      	strb	r3, [r7, #22]
 8002690:	460b      	mov	r3, r1
 8002692:	757b      	strb	r3, [r7, #21]
 8002694:	4613      	mov	r3, r2
 8002696:	827b      	strh	r3, [r7, #18]
 8002698:	edc7 6a01 	vstr	s13, [r7, #4]
 800269c:	ed87 7a02 	vstr	s14, [r7, #8]
 80026a0:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 80026a4:	edd7 6a01 	vldr	s13, [r7, #4]
 80026a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80026ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026b4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80026b8:	7db9      	ldrb	r1, [r7, #22]
 80026ba:	7df8      	ldrb	r0, [r7, #23]
 80026bc:	eeb0 0a66 	vmov.f32	s0, s13
 80026c0:	eef0 0a47 	vmov.f32	s1, s14
 80026c4:	eeb0 1a67 	vmov.f32	s2, s15
 80026c8:	f7ff fdca 	bl	8002260 <calcPosition_PID>
 80026cc:	4603      	mov	r3, r0
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80026d4:	7db9      	ldrb	r1, [r7, #22]
 80026d6:	7df8      	ldrb	r0, [r7, #23]
 80026d8:	f7ff faa0 	bl	8001c1c <CAN_setMotorCtrlVal>
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}

080026e4 <getRotorPosition>:

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
 80026ee:	460b      	mov	r3, r1
 80026f0:	71bb      	strb	r3, [r7, #6]
 80026f2:	4613      	mov	r3, r2
 80026f4:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80026f6:	79bb      	ldrb	r3, [r7, #6]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	dc02      	bgt.n	8002702 <getRotorPosition+0x1e>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	dc04      	bgt.n	800270a <getRotorPosition+0x26>
 8002700:	e034      	b.n	800276c <getRotorPosition+0x88>
 8002702:	3b03      	subs	r3, #3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d831      	bhi.n	800276c <getRotorPosition+0x88>
 8002708:	e016      	b.n	8002738 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 800270a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800270e:	2b00      	cmp	r3, #0
 8002710:	dd29      	ble.n	8002766 <getRotorPosition+0x82>
 8002712:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002716:	2b08      	cmp	r3, #8
 8002718:	dc25      	bgt.n	8002766 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002722:	1e59      	subs	r1, r3, #1
 8002724:	4815      	ldr	r0, [pc, #84]	@ (800277c <getRotorPosition+0x98>)
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	440b      	add	r3, r1
 8002732:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002736:	e01b      	b.n	8002770 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002738:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800273c:	2b00      	cmp	r3, #0
 800273e:	dd14      	ble.n	800276a <getRotorPosition+0x86>
 8002740:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002744:	2b07      	cmp	r3, #7
 8002746:	dc10      	bgt.n	800276a <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	1e5a      	subs	r2, r3, #1
 800274c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002750:	1cd9      	adds	r1, r3, #3
 8002752:	480a      	ldr	r0, [pc, #40]	@ (800277c <getRotorPosition+0x98>)
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	440b      	add	r3, r1
 8002760:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002764:	e004      	b.n	8002770 <getRotorPosition+0x8c>
			break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <getRotorPosition+0x88>
			}
			break;
 800276a:	bf00      	nop
		}
	}
	return -1;
 800276c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	200003b4 	.word	0x200003b4

08002780 <getMotorRPM>:

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	460b      	mov	r3, r1
 800278c:	71bb      	strb	r3, [r7, #6]
 800278e:	4613      	mov	r3, r2
 8002790:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002792:	79bb      	ldrb	r3, [r7, #6]
 8002794:	2b02      	cmp	r3, #2
 8002796:	dc02      	bgt.n	800279e <getMotorRPM+0x1e>
 8002798:	2b00      	cmp	r3, #0
 800279a:	dc04      	bgt.n	80027a6 <getMotorRPM+0x26>
 800279c:	e038      	b.n	8002810 <getMotorRPM+0x90>
 800279e:	3b03      	subs	r3, #3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d835      	bhi.n	8002810 <getMotorRPM+0x90>
 80027a4:	e018      	b.n	80027d8 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 80027a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	dd2d      	ble.n	800280a <getMotorRPM+0x8a>
 80027ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	dc29      	bgt.n	800280a <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	4817      	ldr	r0, [pc, #92]	@ (8002820 <getMotorRPM+0xa0>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4403      	add	r3, r0
 80027d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027d6:	e01d      	b.n	8002814 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 80027d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dd16      	ble.n	800280e <getMotorRPM+0x8e>
 80027e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027e4:	2b07      	cmp	r3, #7
 80027e6:	dc12      	bgt.n	800280e <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	1e5a      	subs	r2, r3, #1
 80027ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027f0:	1cd9      	adds	r1, r3, #3
 80027f2:	480b      	ldr	r0, [pc, #44]	@ (8002820 <getMotorRPM+0xa0>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	440b      	add	r3, r1
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4403      	add	r3, r0
 8002804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002808:	e004      	b.n	8002814 <getMotorRPM+0x94>
			break;
 800280a:	bf00      	nop
 800280c:	e000      	b.n	8002810 <getMotorRPM+0x90>
			}
			break;
 800280e:	bf00      	nop
		}
	}
	return -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	200003b4 	.word	0x200003b4

08002824 <getMotorCurrent>:

int16_t getMotorCurrent(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
 800282e:	460b      	mov	r3, r1
 8002830:	71bb      	strb	r3, [r7, #6]
 8002832:	4613      	mov	r3, r2
 8002834:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002836:	79bb      	ldrb	r3, [r7, #6]
 8002838:	2b02      	cmp	r3, #2
 800283a:	dc02      	bgt.n	8002842 <getMotorCurrent+0x1e>
 800283c:	2b00      	cmp	r3, #0
 800283e:	dc04      	bgt.n	800284a <getMotorCurrent+0x26>
 8002840:	e038      	b.n	80028b4 <getMotorCurrent+0x90>
 8002842:	3b03      	subs	r3, #3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d835      	bhi.n	80028b4 <getMotorCurrent+0x90>
 8002848:	e018      	b.n	800287c <getMotorCurrent+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 800284a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800284e:	2b00      	cmp	r3, #0
 8002850:	dd2d      	ble.n	80028ae <getMotorCurrent+0x8a>
 8002852:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002856:	2b08      	cmp	r3, #8
 8002858:	dc29      	bgt.n	80028ae <getMotorCurrent+0x8a>
				return motorFeedback[bus - 1][motorID - 1].torque_current;
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002862:	1e59      	subs	r1, r3, #1
 8002864:	4817      	ldr	r0, [pc, #92]	@ (80028c4 <getMotorCurrent+0xa0>)
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	440b      	add	r3, r1
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4403      	add	r3, r0
 8002876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800287a:	e01d      	b.n	80028b8 <getMotorCurrent+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 800287c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002880:	2b00      	cmp	r3, #0
 8002882:	dd16      	ble.n	80028b2 <getMotorCurrent+0x8e>
 8002884:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002888:	2b07      	cmp	r3, #7
 800288a:	dc12      	bgt.n	80028b2 <getMotorCurrent+0x8e>
				return motorFeedback[bus - 1][motorID + 3].torque_current;
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002894:	1cd9      	adds	r1, r3, #3
 8002896:	480b      	ldr	r0, [pc, #44]	@ (80028c4 <getMotorCurrent+0xa0>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4403      	add	r3, r0
 80028a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028ac:	e004      	b.n	80028b8 <getMotorCurrent+0x94>
			break;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <getMotorCurrent+0x90>
			}
			break;
 80028b2:	bf00      	nop
		}
	}
	return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	200003b4 	.word	0x200003b4

080028c8 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 80028cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d0:	4905      	ldr	r1, [pc, #20]	@ (80028e8 <usart_Init+0x20>)
 80028d2:	4806      	ldr	r0, [pc, #24]	@ (80028ec <usart_Init+0x24>)
 80028d4:	f009 fb0c 	bl	800bef0 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80028d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028dc:	4904      	ldr	r1, [pc, #16]	@ (80028f0 <usart_Init+0x28>)
 80028de:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <usart_Init+0x2c>)
 80028e0:	f009 fb06 	bl	800bef0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200005c4 	.word	0x200005c4
 80028ec:	20000d10 	.word	0x20000d10
 80028f0:	200006c4 	.word	0x200006c4
 80028f4:	20000da0 	.word	0x20000da0

080028f8 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80028f8:	b40f      	push	{r0, r1, r2, r3}
 80028fa:	b580      	push	{r7, lr}
 80028fc:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80028fe:	f107 030c 	add.w	r3, r7, #12
 8002902:	4a0c      	ldr	r2, [pc, #48]	@ (8002934 <usart_printf+0x3c>)
 8002904:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <usart_printf+0x3c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	480a      	ldr	r0, [pc, #40]	@ (8002938 <usart_printf+0x40>)
 800290e:	f00e f92b 	bl	8010b68 <vsiprintf>
 8002912:	4603      	mov	r3, r0
 8002914:	b29a      	uxth	r2, r3
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <usart_printf+0x44>)
 8002918:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800291a:	4b08      	ldr	r3, [pc, #32]	@ (800293c <usart_printf+0x44>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4905      	ldr	r1, [pc, #20]	@ (8002938 <usart_printf+0x40>)
 8002922:	4807      	ldr	r0, [pc, #28]	@ (8002940 <usart_printf+0x48>)
 8002924:	f009 fa74 	bl	800be10 <HAL_UART_Transmit_DMA>
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002930:	b004      	add	sp, #16
 8002932:	4770      	bx	lr
 8002934:	200007f0 	.word	0x200007f0
 8002938:	200007f4 	.word	0x200007f4
 800293c:	200008f4 	.word	0x200008f4
 8002940:	20000d10 	.word	0x20000d10

08002944 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8002986:	463b      	mov	r3, r7
 8002988:	4619      	mov	r1, r3
 800298a:	480f      	ldr	r0, [pc, #60]	@ (80029c8 <can_filter_init+0x6c>)
 800298c:	f004 fe36 	bl	80075fc <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002990:	480d      	ldr	r0, [pc, #52]	@ (80029c8 <can_filter_init+0x6c>)
 8002992:	f004 ff13 	bl	80077bc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002996:	2102      	movs	r1, #2
 8002998:	480b      	ldr	r0, [pc, #44]	@ (80029c8 <can_filter_init+0x6c>)
 800299a:	f005 f945 	bl	8007c28 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 800299e:	230e      	movs	r3, #14
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80029a2:	230e      	movs	r3, #14
 80029a4:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80029a6:	463b      	mov	r3, r7
 80029a8:	4619      	mov	r1, r3
 80029aa:	4808      	ldr	r0, [pc, #32]	@ (80029cc <can_filter_init+0x70>)
 80029ac:	f004 fe26 	bl	80075fc <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80029b0:	4806      	ldr	r0, [pc, #24]	@ (80029cc <can_filter_init+0x70>)
 80029b2:	f004 ff03 	bl	80077bc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029b6:	2102      	movs	r1, #2
 80029b8:	4804      	ldr	r0, [pc, #16]	@ (80029cc <can_filter_init+0x70>)
 80029ba:	f005 f935 	bl	8007c28 <HAL_CAN_ActivateNotification>
}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	@ 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000098c 	.word	0x2000098c
 80029cc:	200009b4 	.word	0x200009b4

080029d0 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80029da:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <imu_pwm_set+0x1c>)
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40014400 	.word	0x40014400

080029f0 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <RC_init+0xac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <RC_init+0xac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a0c:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8002a0e:	4b23      	ldr	r3, [pc, #140]	@ (8002a9c <RC_init+0xac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <RC_init+0xac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0210 	orr.w	r2, r2, #16
 8002a1c:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <RC_init+0xb0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <RC_init+0xb0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002a2e:	e007      	b.n	8002a40 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002a30:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <RC_init+0xb0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <RC_init+0xb0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002a40:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <RC_init+0xb0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002a4e:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <RC_init+0xb0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <RC_init+0xb4>)
 8002a54:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <RC_init+0xb0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <RC_init+0xb0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002a66:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <RC_init+0xb0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <RC_init+0xb0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <RC_init+0xb0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002a7c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <RC_init+0xb0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <RC_init+0xb0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000d58 	.word	0x20000d58
 8002aa0:	20000ea8 	.word	0x20000ea8
 8002aa4:	40004804 	.word	0x40004804

08002aa8 <findingKIScaler>:
float maxPowerLimitor = 0;
float powerScaler = 0;
int16_t M3508Current[4] = {0, 0, 0, 0};
int16_t M3508ScaledCurrent[4] = {0, 0, 0, 0};

void findingKIScaler() {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	e019      	b.n	8002aec <findingKIScaler+0x44>
		if (M3508Current[i] > 0) {
 8002ab8:	4a25      	ldr	r2, [pc, #148]	@ (8002b50 <findingKIScaler+0xa8>)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	dd08      	ble.n	8002ad6 <findingKIScaler+0x2e>
			sum += M3508Current[i];
 8002ac4:	4a22      	ldr	r2, [pc, #136]	@ (8002b50 <findingKIScaler+0xa8>)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	e007      	b.n	8002ae6 <findingKIScaler+0x3e>
		} else {
			sum -= M3508Current[i];
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b50 <findingKIScaler+0xa8>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	dde2      	ble.n	8002ab8 <findingKIScaler+0x10>
		}
	}
	powerScaler = maxPowerLimitor/sum;
 8002af2:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <findingKIScaler+0xac>)
 8002af4:	edd3 6a00 	vldr	s13, [r3]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
	if (powerScaler > 1) {
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	dd04      	ble.n	8002b2a <findingKIScaler+0x82>
		powerScaler = 1;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b26:	601a      	str	r2, [r3, #0]
	} else if (powerScaler < 0) {
		powerScaler = 0;
	}
	// usart_printf("%f/%d = %f\r\n", maxPowerLimitor, sum, powerScaler);
}
 8002b28:	e00c      	b.n	8002b44 <findingKIScaler+0x9c>
	} else if (powerScaler < 0) {
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d400      	bmi.n	8002b3c <findingKIScaler+0x94>
}
 8002b3a:	e003      	b.n	8002b44 <findingKIScaler+0x9c>
		powerScaler = 0;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <findingKIScaler+0xb0>)
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000900 	.word	0x20000900
 8002b54:	200008f8 	.word	0x200008f8
 8002b58:	200008fc 	.word	0x200008fc
 8002b5c:	00000000 	.word	0x00000000

08002b60 <settingMaxCurrentVal>:

void settingMaxCurrentVal (float bufferValFromPMM, uint16_t powerLimit, uint8_t shift) {
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]

	// uint16_t adjustedPowerLimit = powerLimit - 6;
	uint8_t shiftedValue = shift+1;
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	3301      	adds	r3, #1
 8002b78:	72fb      	strb	r3, [r7, #11]
	float maxPowerForRobot = 0;
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
	if (powerLimit > 100) {
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	2b64      	cmp	r3, #100	@ 0x64
 8002b84:	d907      	bls.n	8002b96 <settingMaxCurrentVal+0x36>
		maxPowerForRobot = 4*shiftedValue;
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b92:	edc7 7a03 	vstr	s15, [r7, #12]
	} if (powerLimit >= 60 && powerLimit <=100) {
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	2b3b      	cmp	r3, #59	@ 0x3b
 8002b9a:	d92a      	bls.n	8002bf2 <settingMaxCurrentVal+0x92>
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d827      	bhi.n	8002bf2 <settingMaxCurrentVal+0x92>
		maxPowerForRobot = ((0.05*powerLimit)-1)*shiftedValue;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fcbd 	bl	8000524 <__aeabi_i2d>
 8002baa:	a348      	add	r3, pc, #288	@ (adr r3, 8002ccc <settingMaxCurrentVal+0x16c>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f7fd fd22 	bl	80005f8 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb8 <settingMaxCurrentVal+0x158>)
 8002bc2:	f7fd fb61 	bl	8000288 <__aeabi_dsub>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4614      	mov	r4, r2
 8002bcc:	461d      	mov	r5, r3
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fca7 	bl	8000524 <__aeabi_i2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f7fd fd0b 	bl	80005f8 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fd ffdd 	bl	8000ba8 <__aeabi_d2f>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	60fb      	str	r3, [r7, #12]
	} if (powerLimit < 60) {
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	2b3b      	cmp	r3, #59	@ 0x3b
 8002bf6:	d807      	bhi.n	8002c08 <settingMaxCurrentVal+0xa8>
		maxPowerForRobot = 2*shiftedValue;
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c04:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if (bufferValFromPMM > 50) {
 8002c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c0c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002cbc <settingMaxCurrentVal+0x15c>
 8002c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	dd03      	ble.n	8002c22 <settingMaxCurrentVal+0xc2>
		maxPowerLimitor = 8192;
 8002c1a:	4b29      	ldr	r3, [pc, #164]	@ (8002cc0 <settingMaxCurrentVal+0x160>)
 8002c1c:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002c20:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 50) {
 8002c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c26:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c32:	dd22      	ble.n	8002c7a <settingMaxCurrentVal+0x11a>
 8002c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c38:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002cbc <settingMaxCurrentVal+0x15c>
 8002c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c44:	d819      	bhi.n	8002c7a <settingMaxCurrentVal+0x11a>
		maxPowerLimitor = (179.8*bufferValFromPMM) - 798.0f;
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd fc7e 	bl	8000548 <__aeabi_f2d>
 8002c4c:	a318      	add	r3, pc, #96	@ (adr r3, 8002cb0 <settingMaxCurrentVal+0x150>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd fcd1 	bl	80005f8 <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <settingMaxCurrentVal+0x164>)
 8002c64:	f7fd fb10 	bl	8000288 <__aeabi_dsub>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7fd ff9a 	bl	8000ba8 <__aeabi_d2f>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <settingMaxCurrentVal+0x160>)
 8002c78:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 8002c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c7e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d802      	bhi.n	8002c92 <settingMaxCurrentVal+0x132>
		maxPowerLimitor = 0.00001;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <settingMaxCurrentVal+0x160>)
 8002c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc8 <settingMaxCurrentVal+0x168>)
 8002c90:	601a      	str	r2, [r3, #0]
	}
	maxPowerLimitor = maxPowerLimitor * maxPowerForRobot;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <settingMaxCurrentVal+0x160>)
 8002c94:	ed93 7a00 	vldr	s14, [r3]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca0:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <settingMaxCurrentVal+0x160>)
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
	// maxPowerLimitor = 8192*8;
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bdb0      	pop	{r4, r5, r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	9999999a 	.word	0x9999999a
 8002cb4:	40667999 	.word	0x40667999
 8002cb8:	3ff00000 	.word	0x3ff00000
 8002cbc:	42480000 	.word	0x42480000
 8002cc0:	200008f8 	.word	0x200008f8
 8002cc4:	4088f000 	.word	0x4088f000
 8002cc8:	3727c5ac 	.word	0x3727c5ac
 8002ccc:	9999999a 	.word	0x9999999a
 8002cd0:	3fa99999 	.word	0x3fa99999

08002cd4 <driveMotorRPM>:

void driveMotorRPM (int16_t RPMtarget[], PID_preset_t preset) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	eef0 6a40 	vmov.f32	s13, s0
 8002ce0:	eeb0 7a60 	vmov.f32	s14, s1
 8002ce4:	eef0 7a41 	vmov.f32	s15, s2
 8002ce8:	edc7 6a00 	vstr	s13, [r7]
 8002cec:	ed87 7a01 	vstr	s14, [r7, #4]
 8002cf0:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < 4; i++) {
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	e024      	b.n	8002d44 <driveMotorRPM+0x70>
		M3508Current[i] = calcRPM_PID(Bus1, M3508, i+1, RPMtarget[i], preset);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	b259      	sxtb	r1, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d10:	edd7 6a00 	vldr	s13, [r7]
 8002d14:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d1c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d20:	eef0 0a47 	vmov.f32	s1, s14
 8002d24:	eeb0 1a67 	vmov.f32	s2, s15
 8002d28:	460a      	mov	r2, r1
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f7ff f973 	bl	8002018 <calcRPM_PID>
 8002d32:	4603      	mov	r3, r0
 8002d34:	b219      	sxth	r1, r3
 8002d36:	4a07      	ldr	r2, [pc, #28]	@ (8002d54 <driveMotorRPM+0x80>)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3301      	adds	r3, #1
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	ddd7      	ble.n	8002cfa <driveMotorRPM+0x26>
	}
	// M3508Current[motorID-1] = calcRPM_PID(Bus2, M3508, motorID, RPMtarget, preset);
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000900 	.word	0x20000900

08002d58 <ScaleAllCurrentValuesForDriveMotors>:

void ScaleAllCurrentValuesForDriveMotors () {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
	findingKIScaler();
 8002d5e:	f7ff fea3 	bl	8002aa8 <findingKIScaler>
	for (int i = 0; i < 4; i++) {
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	e018      	b.n	8002d9a <ScaleAllCurrentValuesForDriveMotors+0x42>
		M3508ScaledCurrent[i] = M3508Current[i] * powerScaler;
 8002d68:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <ScaleAllCurrentValuesForDriveMotors+0x54>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d70:	ee07 3a90 	vmov	s15, r3
 8002d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d78:	4b0d      	ldr	r3, [pc, #52]	@ (8002db0 <ScaleAllCurrentValuesForDriveMotors+0x58>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d86:	ee17 3a90 	vmov	r3, s15
 8002d8a:	b219      	sxth	r1, r3
 8002d8c:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <ScaleAllCurrentValuesForDriveMotors+0x5c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3301      	adds	r3, #1
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	dde3      	ble.n	8002d68 <ScaleAllCurrentValuesForDriveMotors+0x10>
	}
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000900 	.word	0x20000900
 8002db0:	200008fc 	.word	0x200008fc
 8002db4:	20000908 	.word	0x20000908

08002db8 <createDriveMotorCAN>:

void createDriveMotorCAN() {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
	for (int j = 0; j < 4; j++) {
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	e00f      	b.n	8002de4 <createDriveMotorCAN+0x2c>
		CAN_setMotorCtrlVal(Bus1, M3508, j+1, M3508ScaledCurrent[j]);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	b25a      	sxtb	r2, r3
 8002dce:	4909      	ldr	r1, [pc, #36]	@ (8002df4 <createDriveMotorCAN+0x3c>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f7fe ff1f 	bl	8001c1c <CAN_setMotorCtrlVal>
	for (int j = 0; j < 4; j++) {
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3301      	adds	r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	ddec      	ble.n	8002dc4 <createDriveMotorCAN+0xc>
	}
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000908 	.word	0x20000908

08002df8 <bufferLimitedDriveMode>:

void bufferLimitedDriveMode(int16_t RPMtarget[], PID_preset_t preset) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	eef0 6a40 	vmov.f32	s13, s0
 8002e04:	eeb0 7a60 	vmov.f32	s14, s1
 8002e08:	eef0 7a41 	vmov.f32	s15, s2
 8002e0c:	edc7 6a00 	vstr	s13, [r7]
 8002e10:	ed87 7a01 	vstr	s14, [r7, #4]
 8002e14:	edc7 7a02 	vstr	s15, [r7, #8]
	driveMotorRPM(RPMtarget, preset);
 8002e18:	edd7 6a00 	vldr	s13, [r7]
 8002e1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e24:	eeb0 0a66 	vmov.f32	s0, s13
 8002e28:	eef0 0a47 	vmov.f32	s1, s14
 8002e2c:	eeb0 1a67 	vmov.f32	s2, s15
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7ff ff4f 	bl	8002cd4 <driveMotorRPM>
	findingKIScaler();
 8002e36:	f7ff fe37 	bl	8002aa8 <findingKIScaler>
	ScaleAllCurrentValuesForDriveMotors();
 8002e3a:	f7ff ff8d 	bl	8002d58 <ScaleAllCurrentValuesForDriveMotors>
	createDriveMotorCAN();
 8002e3e:	f7ff ffbb 	bl	8002db8 <createDriveMotorCAN>
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <graphingFunction>:
int8_t qButtonDown = 0;
int8_t eButtonDown = 0;
int8_t rButtonDown = 0;
float movementCounter[6] = {0, 0, 0, 0, 0, 0};

float graphingFunction (float x) {
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = x;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	60fb      	str	r3, [r7, #12]
	return y;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	ee07 3a90 	vmov	s15, r3
}
 8002e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <graphingFunctionEdgeCase>:

float graphingFunctionEdgeCase (float x) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = graphingFunction(x);
 8002e76:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e7a:	f7ff ffe6 	bl	8002e4a <graphingFunction>
 8002e7e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (x <= 0) {
 8002e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8e:	d803      	bhi.n	8002e98 <graphingFunctionEdgeCase+0x2c>
		y = 0;
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e00e      	b.n	8002eb6 <graphingFunctionEdgeCase+0x4a>
	} else if (x > 1) {
 8002e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	dd05      	ble.n	8002eb6 <graphingFunctionEdgeCase+0x4a>
		y = graphingFunction(1.0);
 8002eaa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002eae:	f7ff ffcc 	bl	8002e4a <graphingFunction>
 8002eb2:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	return y;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	ee07 3a90 	vmov	s15, r3
}
 8002ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <allCheShit>:

void allCheShit(uint8_t w, uint8_t a, uint8_t s, uint8_t d, uint8_t q, uint8_t e, uint8_t r, int16_t rcRPM[], int8_t chassisVsTurretDrive, float convertedAngle, PID_preset_t chassisPreset) {
 8002ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ecc:	b094      	sub	sp, #80	@ 0x50
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	4608      	mov	r0, r1
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002edc:	eef0 6a60 	vmov.f32	s13, s1
 8002ee0:	eeb0 7a41 	vmov.f32	s14, s2
 8002ee4:	eef0 7a61 	vmov.f32	s15, s3
 8002ee8:	4623      	mov	r3, r4
 8002eea:	75fb      	strb	r3, [r7, #23]
 8002eec:	4603      	mov	r3, r0
 8002eee:	75bb      	strb	r3, [r7, #22]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	757b      	strb	r3, [r7, #21]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	753b      	strb	r3, [r7, #20]
 8002ef8:	edc7 6a01 	vstr	s13, [r7, #4]
 8002efc:	ed87 7a02 	vstr	s14, [r7, #8]
 8002f00:	edc7 7a03 	vstr	s15, [r7, #12]
	float scaledMovementCounter[6] = {0, 0, 0, 0, 0, 0};
 8002f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	615a      	str	r2, [r3, #20]
	int16_t xJoystickDirection = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t yJoystickDirection = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t rotationOfChassis = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]

	if (w == 1) {
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10a      	bne.n	8002f4e <allCheShit+0x86>
		movementCounter[0]+= increaseSpeed;
 8002f38:	4b93      	ldr	r3, [pc, #588]	@ (8003188 <allCheShit+0x2c0>)
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800318c <allCheShit+0x2c4>
 8002f42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f46:	4b90      	ldr	r3, [pc, #576]	@ (8003188 <allCheShit+0x2c0>)
 8002f48:	edc3 7a00 	vstr	s15, [r3]
 8002f4c:	e009      	b.n	8002f62 <allCheShit+0x9a>
	} else {
		movementCounter[0]-= decreaseSpeed;
 8002f4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003188 <allCheShit+0x2c0>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8003190 <allCheShit+0x2c8>
 8002f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8003188 <allCheShit+0x2c0>)
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
	}
	if (a == 1) {
 8002f62:	7dbb      	ldrb	r3, [r7, #22]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10a      	bne.n	8002f7e <allCheShit+0xb6>
		movementCounter[1]+= increaseSpeed;
 8002f68:	4b87      	ldr	r3, [pc, #540]	@ (8003188 <allCheShit+0x2c0>)
 8002f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f6e:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800318c <allCheShit+0x2c4>
 8002f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f76:	4b84      	ldr	r3, [pc, #528]	@ (8003188 <allCheShit+0x2c0>)
 8002f78:	edc3 7a01 	vstr	s15, [r3, #4]
 8002f7c:	e009      	b.n	8002f92 <allCheShit+0xca>
	} else {
		movementCounter[1]-= decreaseSpeed;
 8002f7e:	4b82      	ldr	r3, [pc, #520]	@ (8003188 <allCheShit+0x2c0>)
 8002f80:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f84:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003190 <allCheShit+0x2c8>
 8002f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003188 <allCheShit+0x2c0>)
 8002f8e:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if (s == 1) {
 8002f92:	7d7b      	ldrb	r3, [r7, #21]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10a      	bne.n	8002fae <allCheShit+0xe6>
		movementCounter[2]+= increaseSpeed;
 8002f98:	4b7b      	ldr	r3, [pc, #492]	@ (8003188 <allCheShit+0x2c0>)
 8002f9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f9e:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800318c <allCheShit+0x2c4>
 8002fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fa6:	4b78      	ldr	r3, [pc, #480]	@ (8003188 <allCheShit+0x2c0>)
 8002fa8:	edc3 7a02 	vstr	s15, [r3, #8]
 8002fac:	e009      	b.n	8002fc2 <allCheShit+0xfa>
	} else {
		movementCounter[2]-= decreaseSpeed;
 8002fae:	4b76      	ldr	r3, [pc, #472]	@ (8003188 <allCheShit+0x2c0>)
 8002fb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fb4:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003190 <allCheShit+0x2c8>
 8002fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fbc:	4b72      	ldr	r3, [pc, #456]	@ (8003188 <allCheShit+0x2c0>)
 8002fbe:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (d == 1) {
 8002fc2:	7d3b      	ldrb	r3, [r7, #20]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10a      	bne.n	8002fde <allCheShit+0x116>
		movementCounter[3]+= increaseSpeed;
 8002fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003188 <allCheShit+0x2c0>)
 8002fca:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fce:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800318c <allCheShit+0x2c4>
 8002fd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003188 <allCheShit+0x2c0>)
 8002fd8:	edc3 7a03 	vstr	s15, [r3, #12]
 8002fdc:	e009      	b.n	8002ff2 <allCheShit+0x12a>
	} else {
		movementCounter[3]-= decreaseSpeed;
 8002fde:	4b6a      	ldr	r3, [pc, #424]	@ (8003188 <allCheShit+0x2c0>)
 8002fe0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fe4:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8003190 <allCheShit+0x2c8>
 8002fe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fec:	4b66      	ldr	r3, [pc, #408]	@ (8003188 <allCheShit+0x2c0>)
 8002fee:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	if (q == 1) {
 8002ff2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10a      	bne.n	8003010 <allCheShit+0x148>
		movementCounter[4]+= increaseSpeed;
 8002ffa:	4b63      	ldr	r3, [pc, #396]	@ (8003188 <allCheShit+0x2c0>)
 8002ffc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003000:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800318c <allCheShit+0x2c4>
 8003004:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003008:	4b5f      	ldr	r3, [pc, #380]	@ (8003188 <allCheShit+0x2c0>)
 800300a:	edc3 7a04 	vstr	s15, [r3, #16]
 800300e:	e009      	b.n	8003024 <allCheShit+0x15c>
	} else {
		movementCounter[4]-= decreaseSpeed;
 8003010:	4b5d      	ldr	r3, [pc, #372]	@ (8003188 <allCheShit+0x2c0>)
 8003012:	edd3 7a04 	vldr	s15, [r3, #16]
 8003016:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003190 <allCheShit+0x2c8>
 800301a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800301e:	4b5a      	ldr	r3, [pc, #360]	@ (8003188 <allCheShit+0x2c0>)
 8003020:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	if (e == 1) {
 8003024:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003028:	2b01      	cmp	r3, #1
 800302a:	d10a      	bne.n	8003042 <allCheShit+0x17a>
		movementCounter[5]+= increaseSpeed;
 800302c:	4b56      	ldr	r3, [pc, #344]	@ (8003188 <allCheShit+0x2c0>)
 800302e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003032:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800318c <allCheShit+0x2c4>
 8003036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800303a:	4b53      	ldr	r3, [pc, #332]	@ (8003188 <allCheShit+0x2c0>)
 800303c:	edc3 7a05 	vstr	s15, [r3, #20]
 8003040:	e009      	b.n	8003056 <allCheShit+0x18e>
	} else {
		movementCounter[5]-= decreaseSpeed;
 8003042:	4b51      	ldr	r3, [pc, #324]	@ (8003188 <allCheShit+0x2c0>)
 8003044:	edd3 7a05 	vldr	s15, [r3, #20]
 8003048:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003190 <allCheShit+0x2c8>
 800304c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003050:	4b4d      	ldr	r3, [pc, #308]	@ (8003188 <allCheShit+0x2c0>)
 8003052:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	usart_printf("1\r\n");
 8003056:	484f      	ldr	r0, [pc, #316]	@ (8003194 <allCheShit+0x2cc>)
 8003058:	f7ff fc4e 	bl	80028f8 <usart_printf>

	if (q == 1 && qButtonDown == 0) {
 800305c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003060:	2b01      	cmp	r3, #1
 8003062:	d111      	bne.n	8003088 <allCheShit+0x1c0>
 8003064:	4b4c      	ldr	r3, [pc, #304]	@ (8003198 <allCheShit+0x2d0>)
 8003066:	f993 3000 	ldrsb.w	r3, [r3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <allCheShit+0x1c0>
		qButtonDown = 1;
 800306e:	4b4a      	ldr	r3, [pc, #296]	@ (8003198 <allCheShit+0x2d0>)
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
		qeRotationWOWS--;
 8003074:	4b49      	ldr	r3, [pc, #292]	@ (800319c <allCheShit+0x2d4>)
 8003076:	f993 3000 	ldrsb.w	r3, [r3]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	b25a      	sxtb	r2, r3
 8003082:	4b46      	ldr	r3, [pc, #280]	@ (800319c <allCheShit+0x2d4>)
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e00b      	b.n	80030a0 <allCheShit+0x1d8>
	} else if (q == 0 && qButtonDown == 1) {
 8003088:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <allCheShit+0x1d8>
 8003090:	4b41      	ldr	r3, [pc, #260]	@ (8003198 <allCheShit+0x2d0>)
 8003092:	f993 3000 	ldrsb.w	r3, [r3]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <allCheShit+0x1d8>
		qButtonDown = 0;
 800309a:	4b3f      	ldr	r3, [pc, #252]	@ (8003198 <allCheShit+0x2d0>)
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
	}
	if (e == 1 && eButtonDown == 0) {
 80030a0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d111      	bne.n	80030cc <allCheShit+0x204>
 80030a8:	4b3d      	ldr	r3, [pc, #244]	@ (80031a0 <allCheShit+0x2d8>)
 80030aa:	f993 3000 	ldrsb.w	r3, [r3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <allCheShit+0x204>
		eButtonDown = 1;
 80030b2:	4b3b      	ldr	r3, [pc, #236]	@ (80031a0 <allCheShit+0x2d8>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
		qeRotationWOWS++;
 80030b8:	4b38      	ldr	r3, [pc, #224]	@ (800319c <allCheShit+0x2d4>)
 80030ba:	f993 3000 	ldrsb.w	r3, [r3]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	4b35      	ldr	r3, [pc, #212]	@ (800319c <allCheShit+0x2d4>)
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e00b      	b.n	80030e4 <allCheShit+0x21c>
	} else if (e == 0 && eButtonDown == 1) {
 80030cc:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <allCheShit+0x21c>
 80030d4:	4b32      	ldr	r3, [pc, #200]	@ (80031a0 <allCheShit+0x2d8>)
 80030d6:	f993 3000 	ldrsb.w	r3, [r3]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <allCheShit+0x21c>
		eButtonDown = 0;
 80030de:	4b30      	ldr	r3, [pc, #192]	@ (80031a0 <allCheShit+0x2d8>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
	}
	if (qeRotationWOWS > maxQEVal) {
 80030e4:	4b2d      	ldr	r3, [pc, #180]	@ (800319c <allCheShit+0x2d4>)
 80030e6:	f993 3000 	ldrsb.w	r3, [r3]
 80030ea:	2203      	movs	r2, #3
 80030ec:	4293      	cmp	r3, r2
 80030ee:	dd03      	ble.n	80030f8 <allCheShit+0x230>
		qeRotationWOWS = 3;
 80030f0:	4b2a      	ldr	r3, [pc, #168]	@ (800319c <allCheShit+0x2d4>)
 80030f2:	2203      	movs	r2, #3
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e00a      	b.n	800310e <allCheShit+0x246>
	} else if (qeRotationWOWS < (-1*maxQEVal)) {
 80030f8:	4b28      	ldr	r3, [pc, #160]	@ (800319c <allCheShit+0x2d4>)
 80030fa:	f993 3000 	ldrsb.w	r3, [r3]
 80030fe:	461a      	mov	r2, r3
 8003100:	2303      	movs	r3, #3
 8003102:	425b      	negs	r3, r3
 8003104:	429a      	cmp	r2, r3
 8003106:	da02      	bge.n	800310e <allCheShit+0x246>
		qeRotationWOWS = -3;
 8003108:	4b24      	ldr	r3, [pc, #144]	@ (800319c <allCheShit+0x2d4>)
 800310a:	22fd      	movs	r2, #253	@ 0xfd
 800310c:	701a      	strb	r2, [r3, #0]
	}
	if (r == 1 && rButtonDown == 0) {
 800310e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003112:	2b01      	cmp	r3, #1
 8003114:	d111      	bne.n	800313a <allCheShit+0x272>
 8003116:	4b23      	ldr	r3, [pc, #140]	@ (80031a4 <allCheShit+0x2dc>)
 8003118:	f993 3000 	ldrsb.w	r3, [r3]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10c      	bne.n	800313a <allCheShit+0x272>
		qeRotationWOWS = -1*qeRotationWOWS;
 8003120:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <allCheShit+0x2d4>)
 8003122:	f993 3000 	ldrsb.w	r3, [r3]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	425b      	negs	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	b25a      	sxtb	r2, r3
 800312e:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <allCheShit+0x2d4>)
 8003130:	701a      	strb	r2, [r3, #0]
		rButtonDown = 1;
 8003132:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <allCheShit+0x2dc>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e00b      	b.n	8003152 <allCheShit+0x28a>
	} else if (r == 0 && rButtonDown == 1) {
 800313a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800313e:	2b00      	cmp	r3, #0
 8003140:	d107      	bne.n	8003152 <allCheShit+0x28a>
 8003142:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <allCheShit+0x2dc>)
 8003144:	f993 3000 	ldrsb.w	r3, [r3]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d102      	bne.n	8003152 <allCheShit+0x28a>
		rButtonDown = 0;
 800314c:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <allCheShit+0x2dc>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
	}
	usart_printf("2\r\n");
 8003152:	4815      	ldr	r0, [pc, #84]	@ (80031a8 <allCheShit+0x2e0>)
 8003154:	f7ff fbd0 	bl	80028f8 <usart_printf>
	for (int i = 0; i < 6; i++) {
 8003158:	2300      	movs	r3, #0
 800315a:	647b      	str	r3, [r7, #68]	@ 0x44
 800315c:	e04e      	b.n	80031fc <allCheShit+0x334>
		if (movementCounter[i] > 1) {
 800315e:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <allCheShit+0x2c0>)
 8003160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800316e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003176:	dd19      	ble.n	80031ac <allCheShit+0x2e4>
			movementCounter[i] = 1;
 8003178:	4a03      	ldr	r2, [pc, #12]	@ (8003188 <allCheShit+0x2c0>)
 800317a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e023      	b.n	80031d0 <allCheShit+0x308>
 8003188:	20000914 	.word	0x20000914
 800318c:	3c03126f 	.word	0x3c03126f
 8003190:	3ca3d70a 	.word	0x3ca3d70a
 8003194:	0801406c 	.word	0x0801406c
 8003198:	20000911 	.word	0x20000911
 800319c:	20000910 	.word	0x20000910
 80031a0:	20000912 	.word	0x20000912
 80031a4:	20000913 	.word	0x20000913
 80031a8:	08014070 	.word	0x08014070
		} else if (movementCounter[i] < 0) {
 80031ac:	4ac6      	ldr	r2, [pc, #792]	@ (80034c8 <allCheShit+0x600>)
 80031ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d506      	bpl.n	80031d0 <allCheShit+0x308>
			movementCounter[i] = 0;
 80031c2:	4ac1      	ldr	r2, [pc, #772]	@ (80034c8 <allCheShit+0x600>)
 80031c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
		}
		scaledMovementCounter[i] = graphingFunctionEdgeCase(movementCounter[i]);
 80031d0:	4abd      	ldr	r2, [pc, #756]	@ (80034c8 <allCheShit+0x600>)
 80031d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	f7ff fe44 	bl	8002e6c <graphingFunctionEdgeCase>
 80031e4:	eef0 7a40 	vmov.f32	s15, s0
 80031e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3350      	adds	r3, #80	@ 0x50
 80031ee:	443b      	add	r3, r7
 80031f0:	3b2c      	subs	r3, #44	@ 0x2c
 80031f2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 6; i++) {
 80031f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f8:	3301      	adds	r3, #1
 80031fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031fe:	2b05      	cmp	r3, #5
 8003200:	ddad      	ble.n	800315e <allCheShit+0x296>
	}

	int16_t rcWS = 9005.7*((scaledMovementCounter[0]-scaledMovementCounter[2]));
 8003202:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003206:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800320a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320e:	ee17 0a90 	vmov	r0, s15
 8003212:	f7fd f999 	bl	8000548 <__aeabi_f2d>
 8003216:	a3aa      	add	r3, pc, #680	@ (adr r3, 80034c0 <allCheShit+0x5f8>)
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f7fd f9ec 	bl	80005f8 <__aeabi_dmul>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fc96 	bl	8000b58 <__aeabi_d2iz>
 800322c:	4603      	mov	r3, r0
 800322e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	int16_t rcAD = 9005.7*((scaledMovementCounter[3]-scaledMovementCounter[1]));
 8003232:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003236:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800323a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323e:	ee17 0a90 	vmov	r0, s15
 8003242:	f7fd f981 	bl	8000548 <__aeabi_f2d>
 8003246:	a39e      	add	r3, pc, #632	@ (adr r3, 80034c0 <allCheShit+0x5f8>)
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f7fd f9d4 	bl	80005f8 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	f7fd fc7e 	bl	8000b58 <__aeabi_d2iz>
 800325c:	4603      	mov	r3, r0
 800325e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	int16_t rcQE = 9005.7*((scaledMovementCounter[5]-scaledMovementCounter[4]));
 8003262:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003266:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800326a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326e:	ee17 0a90 	vmov	r0, s15
 8003272:	f7fd f969 	bl	8000548 <__aeabi_f2d>
 8003276:	a392      	add	r3, pc, #584	@ (adr r3, 80034c0 <allCheShit+0x5f8>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd f9bc 	bl	80005f8 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	f7fd fc66 	bl	8000b58 <__aeabi_d2iz>
 800328c:	4603      	mov	r3, r0
 800328e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	if (chassisVsTurretDrive == 1) {
 8003290:	f997 3080 	ldrsb.w	r3, [r7, #128]	@ 0x80
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 811b 	bne.w	80034d0 <allCheShit+0x608>
		xJoystickDirection = (rcRPM[2]*cos(convertedAngle) - rcRPM[3]*sin(convertedAngle) + (rcAD*cos(convertedAngle) - rcWS*sin(convertedAngle)));
 800329a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800329c:	3304      	adds	r3, #4
 800329e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f93e 	bl	8000524 <__aeabi_i2d>
 80032a8:	4604      	mov	r4, r0
 80032aa:	460d      	mov	r5, r1
 80032ac:	6938      	ldr	r0, [r7, #16]
 80032ae:	f7fd f94b 	bl	8000548 <__aeabi_f2d>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	ec43 2b10 	vmov	d0, r2, r3
 80032ba:	f00f fdc1 	bl	8012e40 <cos>
 80032be:	ec53 2b10 	vmov	r2, r3, d0
 80032c2:	4620      	mov	r0, r4
 80032c4:	4629      	mov	r1, r5
 80032c6:	f7fd f997 	bl	80005f8 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4690      	mov	r8, r2
 80032d0:	4699      	mov	r9, r3
 80032d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032d4:	3306      	adds	r3, #6
 80032d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f922 	bl	8000524 <__aeabi_i2d>
 80032e0:	4604      	mov	r4, r0
 80032e2:	460d      	mov	r5, r1
 80032e4:	6938      	ldr	r0, [r7, #16]
 80032e6:	f7fd f92f 	bl	8000548 <__aeabi_f2d>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	ec43 2b10 	vmov	d0, r2, r3
 80032f2:	f00f fdf9 	bl	8012ee8 <sin>
 80032f6:	ec53 2b10 	vmov	r2, r3, d0
 80032fa:	4620      	mov	r0, r4
 80032fc:	4629      	mov	r1, r5
 80032fe:	f7fd f97b 	bl	80005f8 <__aeabi_dmul>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4640      	mov	r0, r8
 8003308:	4649      	mov	r1, r9
 800330a:	f7fc ffbd 	bl	8000288 <__aeabi_dsub>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4690      	mov	r8, r2
 8003314:	4699      	mov	r9, r3
 8003316:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f902 	bl	8000524 <__aeabi_i2d>
 8003320:	4604      	mov	r4, r0
 8003322:	460d      	mov	r5, r1
 8003324:	6938      	ldr	r0, [r7, #16]
 8003326:	f7fd f90f 	bl	8000548 <__aeabi_f2d>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	ec43 2b10 	vmov	d0, r2, r3
 8003332:	f00f fd85 	bl	8012e40 <cos>
 8003336:	ec53 2b10 	vmov	r2, r3, d0
 800333a:	4620      	mov	r0, r4
 800333c:	4629      	mov	r1, r5
 800333e:	f7fd f95b 	bl	80005f8 <__aeabi_dmul>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4692      	mov	sl, r2
 8003348:	469b      	mov	fp, r3
 800334a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f8e8 	bl	8000524 <__aeabi_i2d>
 8003354:	4604      	mov	r4, r0
 8003356:	460d      	mov	r5, r1
 8003358:	6938      	ldr	r0, [r7, #16]
 800335a:	f7fd f8f5 	bl	8000548 <__aeabi_f2d>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	ec43 2b10 	vmov	d0, r2, r3
 8003366:	f00f fdbf 	bl	8012ee8 <sin>
 800336a:	ec53 2b10 	vmov	r2, r3, d0
 800336e:	4620      	mov	r0, r4
 8003370:	4629      	mov	r1, r5
 8003372:	f7fd f941 	bl	80005f8 <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4650      	mov	r0, sl
 800337c:	4659      	mov	r1, fp
 800337e:	f7fc ff83 	bl	8000288 <__aeabi_dsub>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4640      	mov	r0, r8
 8003388:	4649      	mov	r1, r9
 800338a:	f7fc ff7f 	bl	800028c <__adddf3>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fbdf 	bl	8000b58 <__aeabi_d2iz>
 800339a:	4603      	mov	r3, r0
 800339c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		yJoystickDirection = (rcRPM[2]*sin(convertedAngle) + rcRPM[3]*cos(convertedAngle) + (rcAD*sin(convertedAngle) + rcWS*cos(convertedAngle)));
 80033a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033a2:	3304      	adds	r3, #4
 80033a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f8bb 	bl	8000524 <__aeabi_i2d>
 80033ae:	4604      	mov	r4, r0
 80033b0:	460d      	mov	r5, r1
 80033b2:	6938      	ldr	r0, [r7, #16]
 80033b4:	f7fd f8c8 	bl	8000548 <__aeabi_f2d>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	ec43 2b10 	vmov	d0, r2, r3
 80033c0:	f00f fd92 	bl	8012ee8 <sin>
 80033c4:	ec53 2b10 	vmov	r2, r3, d0
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	f7fd f914 	bl	80005f8 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4690      	mov	r8, r2
 80033d6:	4699      	mov	r9, r3
 80033d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033da:	3306      	adds	r3, #6
 80033dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd f89f 	bl	8000524 <__aeabi_i2d>
 80033e6:	4604      	mov	r4, r0
 80033e8:	460d      	mov	r5, r1
 80033ea:	6938      	ldr	r0, [r7, #16]
 80033ec:	f7fd f8ac 	bl	8000548 <__aeabi_f2d>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	ec43 2b10 	vmov	d0, r2, r3
 80033f8:	f00f fd22 	bl	8012e40 <cos>
 80033fc:	ec53 2b10 	vmov	r2, r3, d0
 8003400:	4620      	mov	r0, r4
 8003402:	4629      	mov	r1, r5
 8003404:	f7fd f8f8 	bl	80005f8 <__aeabi_dmul>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4640      	mov	r0, r8
 800340e:	4649      	mov	r1, r9
 8003410:	f7fc ff3c 	bl	800028c <__adddf3>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4690      	mov	r8, r2
 800341a:	4699      	mov	r9, r3
 800341c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd f87f 	bl	8000524 <__aeabi_i2d>
 8003426:	4604      	mov	r4, r0
 8003428:	460d      	mov	r5, r1
 800342a:	6938      	ldr	r0, [r7, #16]
 800342c:	f7fd f88c 	bl	8000548 <__aeabi_f2d>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	ec43 2b10 	vmov	d0, r2, r3
 8003438:	f00f fd56 	bl	8012ee8 <sin>
 800343c:	ec53 2b10 	vmov	r2, r3, d0
 8003440:	4620      	mov	r0, r4
 8003442:	4629      	mov	r1, r5
 8003444:	f7fd f8d8 	bl	80005f8 <__aeabi_dmul>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4692      	mov	sl, r2
 800344e:	469b      	mov	fp, r3
 8003450:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f865 	bl	8000524 <__aeabi_i2d>
 800345a:	4604      	mov	r4, r0
 800345c:	460d      	mov	r5, r1
 800345e:	6938      	ldr	r0, [r7, #16]
 8003460:	f7fd f872 	bl	8000548 <__aeabi_f2d>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	ec43 2b10 	vmov	d0, r2, r3
 800346c:	f00f fce8 	bl	8012e40 <cos>
 8003470:	ec53 2b10 	vmov	r2, r3, d0
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f8be 	bl	80005f8 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4650      	mov	r0, sl
 8003482:	4659      	mov	r1, fp
 8003484:	f7fc ff02 	bl	800028c <__adddf3>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4640      	mov	r0, r8
 800348e:	4649      	mov	r1, r9
 8003490:	f7fc fefc 	bl	800028c <__adddf3>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	f7fd fb5c 	bl	8000b58 <__aeabi_d2iz>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		rotationOfChassis = rotationSpeedOfChassis * qeRotationWOWS;
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <allCheShit+0x604>)
 80034a8:	f993 3000 	ldrsb.w	r3, [r3]
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	fb12 f303 	smulbb	r3, r2, r3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80034be:	e026      	b.n	800350e <allCheShit+0x646>
 80034c0:	9999999a 	.word	0x9999999a
 80034c4:	40c196d9 	.word	0x40c196d9
 80034c8:	20000914 	.word	0x20000914
 80034cc:	20000910 	.word	0x20000910
	} else {
		xJoystickDirection = (rcRPM[2] + rcWS);
 80034d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034d2:	3304      	adds	r3, #4
 80034d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80034de:	4413      	add	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		yJoystickDirection = (rcRPM[3] + rcQE);
 80034e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034e8:	3306      	adds	r3, #6
 80034ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80034f2:	4413      	add	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		rotationOfChassis = (rcRPM[0] + rcAD);
 80034fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003500:	b29a      	uxth	r2, r3
 8003502:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003506:	4413      	add	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	}

	usart_printf("3\r\n");
 800350e:	4824      	ldr	r0, [pc, #144]	@ (80035a0 <allCheShit+0x6d8>)
 8003510:	f7ff f9f2 	bl	80028f8 <usart_printf>
    chassisTargetRPM[0] = yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003514:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003518:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800351c:	4413      	add	r3, r2
 800351e:	b29a      	uxth	r2, r3
 8003520:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003524:	4413      	add	r3, r2
 8003526:	b29b      	uxth	r3, r3
 8003528:	b21b      	sxth	r3, r3
 800352a:	83bb      	strh	r3, [r7, #28]
    chassisTargetRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
 800352c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003530:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003534:	4413      	add	r3, r2
 8003536:	b29a      	uxth	r2, r3
 8003538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	b29b      	uxth	r3, r3
 8003540:	b21b      	sxth	r3, r3
 8003542:	83fb      	strh	r3, [r7, #30]
    chassisTargetRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003544:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003548:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	b29a      	uxth	r2, r3
 8003550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	b29b      	uxth	r3, r3
 8003558:	b21b      	sxth	r3, r3
 800355a:	843b      	strh	r3, [r7, #32]
    chassisTargetRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
 800355c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003560:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	b29a      	uxth	r2, r3
 8003568:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800356c:	4413      	add	r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	b21b      	sxth	r3, r3
 8003572:	847b      	strh	r3, [r7, #34]	@ 0x22

    bufferLimitedDriveMode(chassisTargetRPM, chassisPreset);
 8003574:	edd7 6a01 	vldr	s13, [r7, #4]
 8003578:	ed97 7a02 	vldr	s14, [r7, #8]
 800357c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	eeb0 0a66 	vmov.f32	s0, s13
 8003588:	eef0 0a47 	vmov.f32	s1, s14
 800358c:	eeb0 1a67 	vmov.f32	s2, s15
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fc31 	bl	8002df8 <bufferLimitedDriveMode>

}
 8003596:	bf00      	nop
 8003598:	3750      	adds	r7, #80	@ 0x50
 800359a:	46bd      	mov	sp, r7
 800359c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a0:	08014074 	.word	0x08014074

080035a4 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80035ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035b0:	f009 fefe 	bl	800d3b0 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80035b4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003658 <imu_temp_control_task+0xb4>
 80035b8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800365c <imu_temp_control_task+0xb8>
 80035bc:	4a28      	ldr	r2, [pc, #160]	@ (8003660 <imu_temp_control_task+0xbc>)
 80035be:	2100      	movs	r1, #0
 80035c0:	4828      	ldr	r0, [pc, #160]	@ (8003664 <imu_temp_control_task+0xc0>)
 80035c2:	f001 fe73 	bl	80052ac <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80035c6:	4b28      	ldr	r3, [pc, #160]	@ (8003668 <imu_temp_control_task+0xc4>)
 80035c8:	2210      	movs	r2, #16
 80035ca:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035cc:	4826      	ldr	r0, [pc, #152]	@ (8003668 <imu_temp_control_task+0xc4>)
 80035ce:	f007 f906 	bl	800a7de <HAL_SPI_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80035d8:	f001 fe62 	bl	80052a0 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80035dc:	2000      	movs	r0, #0
 80035de:	f00b f805 	bl	800e5ec <pcTaskGetName>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f00b f895 	bl	800e714 <xTaskGetHandle>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a1f      	ldr	r2, [pc, #124]	@ (800366c <imu_temp_control_task+0xc8>)
 80035ee:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80035f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003670 <imu_temp_control_task+0xcc>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80035f6:	bf00      	nop
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035fc:	2001      	movs	r0, #1
 80035fe:	f00b fcb5 	bl	800ef6c <ulTaskNotifyTake>
 8003602:	4603      	mov	r3, r0
 8003604:	2b01      	cmp	r3, #1
 8003606:	d1f7      	bne.n	80035f8 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8003608:	f7fd ffce 	bl	80015a8 <IMU_get_temp>
 800360c:	eef0 7a40 	vmov.f32	s15, s0
 8003610:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8003674 <imu_temp_control_task+0xd0>
 8003614:	eeb0 0a67 	vmov.f32	s0, s15
 8003618:	4812      	ldr	r0, [pc, #72]	@ (8003664 <imu_temp_control_task+0xc0>)
 800361a:	f001 fe9e 	bl	800535a <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <imu_temp_control_task+0xc0>)
 8003620:	edd3 7a08 	vldr	s15, [r3, #32]
 8003624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362c:	d503      	bpl.n	8003636 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <imu_temp_control_task+0xc0>)
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8003636:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <imu_temp_control_task+0xc0>)
 8003638:	edd3 7a08 	vldr	s15, [r3, #32]
 800363c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f9c1 	bl	80029d0 <imu_pwm_set>
        osDelay(5);
 800364e:	2005      	movs	r0, #5
 8003650:	f009 feae 	bl	800d3b0 <osDelay>
    {
 8003654:	e7cf      	b.n	80035f6 <imu_temp_control_task+0x52>
 8003656:	bf00      	nop
 8003658:	45898000 	.word	0x45898000
 800365c:	458ca000 	.word	0x458ca000
 8003660:	0801416c 	.word	0x0801416c
 8003664:	20000934 	.word	0x20000934
 8003668:	20000a30 	.word	0x20000a30
 800366c:	2000092c 	.word	0x2000092c
 8003670:	20000930 	.word	0x20000930
 8003674:	42200000 	.word	0x42200000

08003678 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8003682:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_GPIO_EXTI_Callback+0x54>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	429a      	cmp	r2, r3
 800368a:	d11b      	bne.n	80036c4 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 800368c:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <HAL_GPIO_EXTI_Callback+0x58>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003696:	f00b fbdb 	bl	800ee50 <xTaskGetSchedulerState>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d011      	beq.n	80036c4 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 80036a0:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	490c      	ldr	r1, [pc, #48]	@ (80036d8 <HAL_GPIO_EXTI_Callback+0x60>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	f00b fcac 	bl	800f004 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80036ac:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <HAL_GPIO_EXTI_Callback+0x60>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <HAL_GPIO_EXTI_Callback+0x4c>
 80036b4:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <HAL_GPIO_EXTI_Callback+0x64>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	2000000e 	.word	0x2000000e
 80036d0:	20000930 	.word	0x20000930
 80036d4:	2000092c 	.word	0x2000092c
 80036d8:	2000097c 	.word	0x2000097c
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80036ee:	f000 f8bd 	bl	800386c <ist8310_GPIO_init>
    ist8310_com_init();
 80036f2:	f000 f8c2 	bl	800387a <ist8310_com_init>

    ist8310_RST_L();
 80036f6:	f000 f97b 	bl	80039f0 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 80036fa:	4b30      	ldr	r3, [pc, #192]	@ (80037bc <ist8310_init+0xdc>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f916 	bl	8003930 <ist8310_delay_ms>
    ist8310_RST_H();
 8003704:	f000 f968 	bl	80039d8 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8003708:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <ist8310_init+0xdc>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f90f 	bl	8003930 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8003712:	2000      	movs	r0, #0
 8003714:	f000 f8b8 	bl	8003888 <ist8310_IIC_read_single_reg>
 8003718:	4603      	mov	r3, r0
 800371a:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 800371c:	79bb      	ldrb	r3, [r7, #6]
 800371e:	2b10      	cmp	r3, #16
 8003720:	d001      	beq.n	8003726 <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 8003722:	2340      	movs	r3, #64	@ 0x40
 8003724:	e045      	b.n	80037b2 <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8003726:	2300      	movs	r3, #0
 8003728:	71fb      	strb	r3, [r7, #7]
 800372a:	e03e      	b.n	80037aa <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 800372c:	79fa      	ldrb	r2, [r7, #7]
 800372e:	4924      	ldr	r1, [pc, #144]	@ (80037c0 <ist8310_init+0xe0>)
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	440b      	add	r3, r1
 8003738:	7818      	ldrb	r0, [r3, #0]
 800373a:	79fa      	ldrb	r2, [r7, #7]
 800373c:	4920      	ldr	r1, [pc, #128]	@ (80037c0 <ist8310_init+0xe0>)
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	440b      	add	r3, r1
 8003746:	3301      	adds	r3, #1
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	4619      	mov	r1, r3
 800374c:	f000 f8b8 	bl	80038c0 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8003750:	4b1c      	ldr	r3, [pc, #112]	@ (80037c4 <ist8310_init+0xe4>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f8f9 	bl	800394c <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 800375a:	79fa      	ldrb	r2, [r7, #7]
 800375c:	4918      	ldr	r1, [pc, #96]	@ (80037c0 <ist8310_init+0xe0>)
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	440b      	add	r3, r1
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f88d 	bl	8003888 <ist8310_IIC_read_single_reg>
 800376e:	4603      	mov	r3, r0
 8003770:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8003772:	4b14      	ldr	r3, [pc, #80]	@ (80037c4 <ist8310_init+0xe4>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f8e8 	bl	800394c <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 800377c:	79fa      	ldrb	r2, [r7, #7]
 800377e:	4910      	ldr	r1, [pc, #64]	@ (80037c0 <ist8310_init+0xe0>)
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	440b      	add	r3, r1
 8003788:	3301      	adds	r3, #1
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	79ba      	ldrb	r2, [r7, #6]
 800378e:	429a      	cmp	r2, r3
 8003790:	d008      	beq.n	80037a4 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 8003792:	79fa      	ldrb	r2, [r7, #7]
 8003794:	490a      	ldr	r1, [pc, #40]	@ (80037c0 <ist8310_init+0xe0>)
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	440b      	add	r3, r1
 800379e:	3302      	adds	r3, #2
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	e006      	b.n	80037b2 <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	3301      	adds	r3, #1
 80037a8:	71fb      	strb	r3, [r7, #7]
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d9bd      	bls.n	800372c <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	08014184 	.word	0x08014184
 80037c0:	08014178 	.word	0x08014178
 80037c4:	08014185 	.word	0x08014185

080037c8 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80037d4:	f107 0308 	add.w	r3, r7, #8
 80037d8:	2206      	movs	r2, #6
 80037da:	4619      	mov	r1, r3
 80037dc:	2003      	movs	r0, #3
 80037de:	f000 f88b 	bl	80038f8 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80037e2:	7a7b      	ldrb	r3, [r7, #9]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	b21a      	sxth	r2, r3
 80037e8:	7a3b      	ldrb	r3, [r7, #8]
 80037ea:	b21b      	sxth	r3, r3
 80037ec:	4313      	orrs	r3, r2
 80037ee:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80037f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037fc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003868 <ist8310_read_mag+0xa0>
 8003800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	b21a      	sxth	r2, r3
 8003810:	7abb      	ldrb	r3, [r7, #10]
 8003812:	b21b      	sxth	r3, r3
 8003814:	4313      	orrs	r3, r2
 8003816:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8003818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003868 <ist8310_read_mag+0xa0>
 800382c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003830:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8003834:	7b7b      	ldrb	r3, [r7, #13]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	b21a      	sxth	r2, r3
 800383a:	7b3b      	ldrb	r3, [r7, #12]
 800383c:	b21b      	sxth	r3, r3
 800383e:	4313      	orrs	r3, r2
 8003840:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8003842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3308      	adds	r3, #8
 8003852:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003868 <ist8310_read_mag+0xa0>
 8003856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385a:	edc3 7a00 	vstr	s15, [r3]
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	3e99999a 	.word	0x3e99999a

0800386c <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0

}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af04      	add	r7, sp, #16
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	b29a      	uxth	r2, r3
 800389a:	230a      	movs	r3, #10
 800389c:	9302      	str	r3, [sp, #8]
 800389e:	2301      	movs	r3, #1
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	f107 030f 	add.w	r3, r7, #15
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2301      	movs	r3, #1
 80038aa:	211c      	movs	r1, #28
 80038ac:	4803      	ldr	r0, [pc, #12]	@ (80038bc <ist8310_IIC_read_single_reg+0x34>)
 80038ae:	f005 fd31 	bl	8009314 <HAL_I2C_Mem_Read>
    return res;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200009dc 	.word	0x200009dc

080038c0 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af04      	add	r7, sp, #16
 80038c6:	4603      	mov	r3, r0
 80038c8:	460a      	mov	r2, r1
 80038ca:	71fb      	strb	r3, [r7, #7]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	230a      	movs	r3, #10
 80038d6:	9302      	str	r3, [sp, #8]
 80038d8:	2301      	movs	r3, #1
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2301      	movs	r3, #1
 80038e2:	211c      	movs	r1, #28
 80038e4:	4803      	ldr	r0, [pc, #12]	@ (80038f4 <ist8310_IIC_write_single_reg+0x34>)
 80038e6:	f005 fc1b 	bl	8009120 <HAL_I2C_Mem_Write>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200009dc 	.word	0x200009dc

080038f8 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af04      	add	r7, sp, #16
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
 8003904:	4613      	mov	r3, r2
 8003906:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	b29a      	uxth	r2, r3
 800390c:	79bb      	ldrb	r3, [r7, #6]
 800390e:	b29b      	uxth	r3, r3
 8003910:	210a      	movs	r1, #10
 8003912:	9102      	str	r1, [sp, #8]
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2301      	movs	r3, #1
 800391c:	211c      	movs	r1, #28
 800391e:	4803      	ldr	r0, [pc, #12]	@ (800392c <ist8310_IIC_read_muli_reg+0x34>)
 8003920:	f005 fcf8 	bl	8009314 <HAL_I2C_Mem_Read>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200009dc 	.word	0x200009dc

08003930 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	4618      	mov	r0, r3
 800393e:	f003 fd3d 	bl	80073bc <HAL_Delay>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	@ 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800396a:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <ist8310_delay_us+0x88>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 800397c:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <ist8310_delay_us+0x88>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8003982:	4b14      	ldr	r3, [pc, #80]	@ (80039d4 <ist8310_delay_us+0x88>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	d0f8      	beq.n	8003982 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	429a      	cmp	r2, r3
 8003996:	d206      	bcs.n	80039a6 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4413      	add	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e007      	b.n	80039b6 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad2      	subs	r2, r2, r3
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4413      	add	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d200      	bcs.n	80039c4 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 80039c2:	e7de      	b.n	8003982 <ist8310_delay_us+0x36>
            {
                break;
 80039c4:	bf00      	nop
            }
        }
    }
}
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	@ 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e010 	.word	0xe000e010

080039d8 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80039dc:	2201      	movs	r2, #1
 80039de:	2140      	movs	r1, #64	@ 0x40
 80039e0:	4802      	ldr	r0, [pc, #8]	@ (80039ec <ist8310_RST_H+0x14>)
 80039e2:	f005 fa27 	bl	8008e34 <HAL_GPIO_WritePin>
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40021800 	.word	0x40021800

080039f0 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2140      	movs	r1, #64	@ 0x40
 80039f8:	4802      	ldr	r0, [pc, #8]	@ (8003a04 <ist8310_RST_L+0x14>)
 80039fa:	f005 fa1b 	bl	8008e34 <HAL_GPIO_WritePin>
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021800 	.word	0x40021800

08003a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a0c:	f003 fc64 	bl	80072d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a10:	f000 f868 	bl	8003ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a14:	f000 fd02 	bl	800441c <MX_GPIO_Init>
  MX_DMA_Init();
 8003a18:	f000 fc9a 	bl	8004350 <MX_DMA_Init>
  MX_CAN1_Init();
 8003a1c:	f000 f8ce 	bl	8003bbc <MX_CAN1_Init>
  MX_CAN2_Init();
 8003a20:	f000 f902 	bl	8003c28 <MX_CAN2_Init>
  MX_SPI1_Init();
 8003a24:	f000 f964 	bl	8003cf0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8003a28:	f000 fa40 	bl	8003eac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003a2c:	f000 fc10 	bl	8004250 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003a30:	f000 fc64 	bl	80042fc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003a34:	f000 f992 	bl	8003d5c <MX_TIM1_Init>
  MX_TIM8_Init();
 8003a38:	f000 fb20 	bl	800407c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8003a3c:	f000 fc32 	bl	80042a4 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003a40:	f000 fbb8 	bl	80041b4 <MX_TIM10_Init>
  MX_I2C3_Init();
 8003a44:	f000 f926 	bl	8003c94 <MX_I2C3_Init>
  MX_TIM5_Init();
 8003a48:	f000 faa8 	bl	8003f9c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8003a4c:	f7fe ff86 	bl	800295c <can_filter_init>
  remote_control_init();
 8003a50:	f002 f996 	bl	8005d80 <remote_control_init>
  usart_Init();
 8003a54:	f7fe ff38 	bl	80028c8 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8003a58:	f002 f9a0 	bl	8005d9c <get_remote_control_point>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a14      	ldr	r2, [pc, #80]	@ (8003ab0 <main+0xa8>)
 8003a60:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003a62:	f009 fbc9 	bl	800d1f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8003a66:	4a13      	ldr	r2, [pc, #76]	@ (8003ab4 <main+0xac>)
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4813      	ldr	r0, [pc, #76]	@ (8003ab8 <main+0xb0>)
 8003a6c:	f009 fc0e 	bl	800d28c <osThreadNew>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a12      	ldr	r2, [pc, #72]	@ (8003abc <main+0xb4>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <main+0xb8>)
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4812      	ldr	r0, [pc, #72]	@ (8003ac4 <main+0xbc>)
 8003a7c:	f009 fc06 	bl	800d28c <osThreadNew>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <main+0xc0>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8003a86:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <main+0xc4>)
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4811      	ldr	r0, [pc, #68]	@ (8003ad0 <main+0xc8>)
 8003a8c:	f009 fbfe 	bl	800d28c <osThreadNew>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4a10      	ldr	r2, [pc, #64]	@ (8003ad4 <main+0xcc>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8003a96:	4a10      	ldr	r2, [pc, #64]	@ (8003ad8 <main+0xd0>)
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4810      	ldr	r0, [pc, #64]	@ (8003adc <main+0xd4>)
 8003a9c:	f009 fbf6 	bl	800d28c <osThreadNew>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <main+0xd8>)
 8003aa4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003aa6:	f009 fbcb 	bl	800d240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003aaa:	bf00      	nop
 8003aac:	e7fd      	b.n	8003aaa <main+0xa2>
 8003aae:	bf00      	nop
 8003ab0:	20000fd8 	.word	0x20000fd8
 8003ab4:	08014188 	.word	0x08014188
 8003ab8:	08004611 	.word	0x08004611
 8003abc:	20000fc8 	.word	0x20000fc8
 8003ac0:	080141ac 	.word	0x080141ac
 8003ac4:	080046d9 	.word	0x080046d9
 8003ac8:	20000fcc 	.word	0x20000fcc
 8003acc:	080141d0 	.word	0x080141d0
 8003ad0:	080035a5 	.word	0x080035a5
 8003ad4:	20000fd0 	.word	0x20000fd0
 8003ad8:	080141f4 	.word	0x080141f4
 8003adc:	08005291 	.word	0x08005291
 8003ae0:	20000fd4 	.word	0x20000fd4

08003ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b094      	sub	sp, #80	@ 0x50
 8003ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aea:	f107 0320 	add.w	r3, r7, #32
 8003aee:	2230      	movs	r2, #48	@ 0x30
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00d f842 	bl	8010b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	4b29      	ldr	r3, [pc, #164]	@ (8003bb4 <SystemClock_Config+0xd0>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	4a28      	ldr	r2, [pc, #160]	@ (8003bb4 <SystemClock_Config+0xd0>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b18:	4b26      	ldr	r3, [pc, #152]	@ (8003bb4 <SystemClock_Config+0xd0>)
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b24:	2300      	movs	r3, #0
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <SystemClock_Config+0xd4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	@ (8003bb8 <SystemClock_Config+0xd4>)
 8003b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <SystemClock_Config+0xd4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003b54:	2306      	movs	r3, #6
 8003b56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b58:	23a8      	movs	r3, #168	@ 0xa8
 8003b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b60:	2304      	movs	r3, #4
 8003b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b64:	f107 0320 	add.w	r3, r7, #32
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f006 f9b9 	bl	8009ee0 <HAL_RCC_OscConfig>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003b74:	f001 fb94 	bl	80052a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b78:	230f      	movs	r3, #15
 8003b7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	2105      	movs	r1, #5
 8003b96:	4618      	mov	r0, r3
 8003b98:	f006 fc1a 	bl	800a3d0 <HAL_RCC_ClockConfig>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003ba2:	f001 fb7d 	bl	80052a0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003ba6:	f006 fcf9 	bl	800a59c <HAL_RCC_EnableCSS>
}
 8003baa:	bf00      	nop
 8003bac:	3750      	adds	r7, #80	@ 0x50
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000

08003bbc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003bc0:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bc2:	4a18      	ldr	r2, [pc, #96]	@ (8003c24 <MX_CAN1_Init+0x68>)
 8003bc4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8003bc6:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bc8:	2203      	movs	r2, #3
 8003bca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003bcc:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bda:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003bde:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003be0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003be2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003be6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003be8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003bee:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003c00:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003c0c:	4804      	ldr	r0, [pc, #16]	@ (8003c20 <MX_CAN1_Init+0x64>)
 8003c0e:	f003 fbf9 	bl	8007404 <HAL_CAN_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003c18:	f001 fb42 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	2000098c 	.word	0x2000098c
 8003c24:	40006400 	.word	0x40006400

08003c28 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003c2c:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c2e:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <MX_CAN2_Init+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8003c32:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c34:	2203      	movs	r2, #3
 8003c36:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003c38:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003c44:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c46:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003c4a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c4e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003c52:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003c54:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003c60:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003c78:	4804      	ldr	r0, [pc, #16]	@ (8003c8c <MX_CAN2_Init+0x64>)
 8003c7a:	f003 fbc3 	bl	8007404 <HAL_CAN_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003c84:	f001 fb0c 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200009b4 	.word	0x200009b4
 8003c90:	40006800 	.word	0x40006800

08003c94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003c98:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003c9a:	4a13      	ldr	r2, [pc, #76]	@ (8003ce8 <MX_I2C3_Init+0x54>)
 8003c9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003c9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003ca0:	4a12      	ldr	r2, [pc, #72]	@ (8003cec <MX_I2C3_Init+0x58>)
 8003ca2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003caa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003cb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003cb6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cc4:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003cd0:	4804      	ldr	r0, [pc, #16]	@ (8003ce4 <MX_I2C3_Init+0x50>)
 8003cd2:	f005 f8e1 	bl	8008e98 <HAL_I2C_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003cdc:	f001 fae0 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	200009dc 	.word	0x200009dc
 8003ce8:	40005c00 	.word	0x40005c00
 8003cec:	00061a80 	.word	0x00061a80

08003cf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003cf6:	4a18      	ldr	r2, [pc, #96]	@ (8003d58 <MX_SPI1_Init+0x68>)
 8003cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cfa:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003cfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d02:	4b14      	ldr	r3, [pc, #80]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d08:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003d0e:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d10:	2202      	movs	r2, #2
 8003d12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d14:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d24:	2238      	movs	r2, #56	@ 0x38
 8003d26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d28:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d2e:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d34:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d3c:	220a      	movs	r2, #10
 8003d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d40:	4804      	ldr	r0, [pc, #16]	@ (8003d54 <MX_SPI1_Init+0x64>)
 8003d42:	f006 fd4c 	bl	800a7de <HAL_SPI_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003d4c:	f001 faa8 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000a30 	.word	0x20000a30
 8003d58:	40013000 	.word	0x40013000

08003d5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b092      	sub	sp, #72	@ 0x48
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	611a      	str	r2, [r3, #16]
 8003d7c:	615a      	str	r2, [r3, #20]
 8003d7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d80:	1d3b      	adds	r3, r7, #4
 8003d82:	2220      	movs	r2, #32
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f00c fef8 	bl	8010b7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d8c:	4b45      	ldr	r3, [pc, #276]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003d8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ea8 <MX_TIM1_Init+0x14c>)
 8003d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8003d92:	4b44      	ldr	r3, [pc, #272]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003d94:	2253      	movs	r2, #83	@ 0x53
 8003d96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d98:	4b42      	ldr	r3, [pc, #264]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003d9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003da0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003da4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003dac:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003db8:	483a      	ldr	r0, [pc, #232]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003dba:	f007 f8dd 	bl	800af78 <HAL_TIM_PWM_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003dc4:	f001 fa6c 	bl	80052a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4833      	ldr	r0, [pc, #204]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003dd8:	f007 fefc 	bl	800bbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003de2:	f001 fa5d 	bl	80052a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de6:	2360      	movs	r3, #96	@ 0x60
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003df2:	2300      	movs	r3, #0
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e06:	2200      	movs	r2, #0
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4826      	ldr	r0, [pc, #152]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003e0c:	f007 fa3c 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003e16:	f001 fa43 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e1e:	2204      	movs	r2, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4820      	ldr	r0, [pc, #128]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003e24:	f007 fa30 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003e2e:	f001 fa37 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e36:	2208      	movs	r2, #8
 8003e38:	4619      	mov	r1, r3
 8003e3a:	481a      	ldr	r0, [pc, #104]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003e3c:	f007 fa24 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003e46:	f001 fa2b 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e4e:	220c      	movs	r2, #12
 8003e50:	4619      	mov	r1, r3
 8003e52:	4814      	ldr	r0, [pc, #80]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003e54:	f007 fa18 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003e5e:	f001 fa1f 	bl	80052a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4807      	ldr	r0, [pc, #28]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003e86:	f007 ff21 	bl	800bccc <HAL_TIMEx_ConfigBreakDeadTime>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003e90:	f001 fa06 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e94:	4803      	ldr	r0, [pc, #12]	@ (8003ea4 <MX_TIM1_Init+0x148>)
 8003e96:	f002 fd77 	bl	8006988 <HAL_TIM_MspPostInit>

}
 8003e9a:	bf00      	nop
 8003e9c:	3748      	adds	r7, #72	@ 0x48
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000a88 	.word	0x20000a88
 8003ea8:	40010000 	.word	0x40010000

08003eac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	@ 0x38
 8003eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ec0:	f107 0320 	add.w	r3, r7, #32
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
 8003ed8:	615a      	str	r2, [r3, #20]
 8003eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003ede:	4a2e      	ldr	r2, [pc, #184]	@ (8003f98 <MX_TIM4_Init+0xec>)
 8003ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003ee4:	2253      	movs	r2, #83	@ 0x53
 8003ee6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8003eee:	4b29      	ldr	r3, [pc, #164]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003ef0:	f245 2207 	movw	r2, #20999	@ 0x5207
 8003ef4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef6:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003efe:	2280      	movs	r2, #128	@ 0x80
 8003f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003f02:	4824      	ldr	r0, [pc, #144]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003f04:	f006 ff80 	bl	800ae08 <HAL_TIM_Base_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003f0e:	f001 f9c7 	bl	80052a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	481d      	ldr	r0, [pc, #116]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003f20:	f007 fa74 	bl	800b40c <HAL_TIM_ConfigClockSource>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003f2a:	f001 f9b9 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003f2e:	4819      	ldr	r0, [pc, #100]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003f30:	f007 f822 	bl	800af78 <HAL_TIM_PWM_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003f3a:	f001 f9b1 	bl	80052a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f46:	f107 0320 	add.w	r3, r7, #32
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4811      	ldr	r0, [pc, #68]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003f4e:	f007 fe41 	bl	800bbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003f58:	f001 f9a2 	bl	80052a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f5c:	2360      	movs	r3, #96	@ 0x60
 8003f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8003f60:	f642 1303 	movw	r3, #10499	@ 0x2903
 8003f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	2208      	movs	r2, #8
 8003f72:	4619      	mov	r1, r3
 8003f74:	4807      	ldr	r0, [pc, #28]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003f76:	f007 f987 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003f80:	f001 f98e 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003f84:	4803      	ldr	r0, [pc, #12]	@ (8003f94 <MX_TIM4_Init+0xe8>)
 8003f86:	f002 fcff 	bl	8006988 <HAL_TIM_MspPostInit>

}
 8003f8a:	bf00      	nop
 8003f8c:	3738      	adds	r7, #56	@ 0x38
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000ad0 	.word	0x20000ad0
 8003f98:	40000800 	.word	0x40000800

08003f9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa2:	f107 0320 	add.w	r3, r7, #32
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	611a      	str	r2, [r3, #16]
 8003fba:	615a      	str	r2, [r3, #20]
 8003fbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004078 <MX_TIM5_Init+0xdc>)
 8003fc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8003fc6:	2253      	movs	r2, #83	@ 0x53
 8003fc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fca:	4b2a      	ldr	r3, [pc, #168]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8003fd0:	4b28      	ldr	r3, [pc, #160]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8003fd2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8003fd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd8:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fde:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003fe4:	4823      	ldr	r0, [pc, #140]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8003fe6:	f006 ffc7 	bl	800af78 <HAL_TIM_PWM_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003ff0:	f001 f956 	bl	80052a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ffc:	f107 0320 	add.w	r3, r7, #32
 8004000:	4619      	mov	r1, r3
 8004002:	481c      	ldr	r0, [pc, #112]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8004004:	f007 fde6 	bl	800bbd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800400e:	f001 f947 	bl	80052a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004012:	2360      	movs	r3, #96	@ 0x60
 8004014:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	2200      	movs	r2, #0
 8004026:	4619      	mov	r1, r3
 8004028:	4812      	ldr	r0, [pc, #72]	@ (8004074 <MX_TIM5_Init+0xd8>)
 800402a:	f007 f92d 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8004034:	f001 f934 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	2204      	movs	r2, #4
 800403c:	4619      	mov	r1, r3
 800403e:	480d      	ldr	r0, [pc, #52]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8004040:	f007 f922 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800404a:	f001 f929 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	2208      	movs	r2, #8
 8004052:	4619      	mov	r1, r3
 8004054:	4807      	ldr	r0, [pc, #28]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8004056:	f007 f917 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8004060:	f001 f91e 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004064:	4803      	ldr	r0, [pc, #12]	@ (8004074 <MX_TIM5_Init+0xd8>)
 8004066:	f002 fc8f 	bl	8006988 <HAL_TIM_MspPostInit>

}
 800406a:	bf00      	nop
 800406c:	3728      	adds	r7, #40	@ 0x28
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000b18 	.word	0x20000b18
 8004078:	40000c00 	.word	0x40000c00

0800407c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b092      	sub	sp, #72	@ 0x48
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004082:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800408c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
 800409c:	615a      	str	r2, [r3, #20]
 800409e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	2220      	movs	r2, #32
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f00c fd68 	bl	8010b7c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80040ac:	4b3f      	ldr	r3, [pc, #252]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040ae:	4a40      	ldr	r2, [pc, #256]	@ (80041b0 <MX_TIM8_Init+0x134>)
 80040b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80040b2:	4b3e      	ldr	r3, [pc, #248]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040b4:	2253      	movs	r2, #83	@ 0x53
 80040b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b8:	4b3c      	ldr	r3, [pc, #240]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80040be:	4b3b      	ldr	r3, [pc, #236]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040c0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80040c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c6:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80040cc:	4b37      	ldr	r3, [pc, #220]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040d2:	4b36      	ldr	r3, [pc, #216]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040d4:	2280      	movs	r2, #128	@ 0x80
 80040d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80040d8:	4834      	ldr	r0, [pc, #208]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040da:	f006 ff4d 	bl	800af78 <HAL_TIM_PWM_Init>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80040e4:	f001 f8dc 	bl	80052a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80040f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80040f4:	4619      	mov	r1, r3
 80040f6:	482d      	ldr	r0, [pc, #180]	@ (80041ac <MX_TIM8_Init+0x130>)
 80040f8:	f007 fd6c 	bl	800bbd4 <HAL_TIMEx_MasterConfigSynchronization>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004102:	f001 f8cd 	bl	80052a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004106:	2360      	movs	r3, #96	@ 0x60
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800410e:	2300      	movs	r3, #0
 8004110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004112:	2300      	movs	r3, #0
 8004114:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004126:	2200      	movs	r2, #0
 8004128:	4619      	mov	r1, r3
 800412a:	4820      	ldr	r0, [pc, #128]	@ (80041ac <MX_TIM8_Init+0x130>)
 800412c:	f007 f8ac 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004136:	f001 f8b3 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800413a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800413e:	2204      	movs	r2, #4
 8004140:	4619      	mov	r1, r3
 8004142:	481a      	ldr	r0, [pc, #104]	@ (80041ac <MX_TIM8_Init+0x130>)
 8004144:	f007 f8a0 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800414e:	f001 f8a7 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004156:	2208      	movs	r2, #8
 8004158:	4619      	mov	r1, r3
 800415a:	4814      	ldr	r0, [pc, #80]	@ (80041ac <MX_TIM8_Init+0x130>)
 800415c:	f007 f894 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8004166:	f001 f89b 	bl	80052a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800417e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004182:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4807      	ldr	r0, [pc, #28]	@ (80041ac <MX_TIM8_Init+0x130>)
 800418e:	f007 fd9d 	bl	800bccc <HAL_TIMEx_ConfigBreakDeadTime>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8004198:	f001 f882 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800419c:	4803      	ldr	r0, [pc, #12]	@ (80041ac <MX_TIM8_Init+0x130>)
 800419e:	f002 fbf3 	bl	8006988 <HAL_TIM_MspPostInit>

}
 80041a2:	bf00      	nop
 80041a4:	3748      	adds	r7, #72	@ 0x48
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000b60 	.word	0x20000b60
 80041b0:	40010400 	.word	0x40010400

080041b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]
 80041c8:	615a      	str	r2, [r3, #20]
 80041ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <MX_TIM10_Init+0x94>)
 80041ce:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <MX_TIM10_Init+0x98>)
 80041d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80041d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004248 <MX_TIM10_Init+0x94>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <MX_TIM10_Init+0x94>)
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 80041de:	4b1a      	ldr	r3, [pc, #104]	@ (8004248 <MX_TIM10_Init+0x94>)
 80041e0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80041e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041e6:	4b18      	ldr	r3, [pc, #96]	@ (8004248 <MX_TIM10_Init+0x94>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ec:	4b16      	ldr	r3, [pc, #88]	@ (8004248 <MX_TIM10_Init+0x94>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80041f2:	4815      	ldr	r0, [pc, #84]	@ (8004248 <MX_TIM10_Init+0x94>)
 80041f4:	f006 fe08 	bl	800ae08 <HAL_TIM_Base_Init>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80041fe:	f001 f84f 	bl	80052a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004202:	4811      	ldr	r0, [pc, #68]	@ (8004248 <MX_TIM10_Init+0x94>)
 8004204:	f006 feb8 	bl	800af78 <HAL_TIM_PWM_Init>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800420e:	f001 f847 	bl	80052a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004212:	2360      	movs	r3, #96	@ 0x60
 8004214:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	2200      	movs	r2, #0
 8004226:	4619      	mov	r1, r3
 8004228:	4807      	ldr	r0, [pc, #28]	@ (8004248 <MX_TIM10_Init+0x94>)
 800422a:	f007 f82d 	bl	800b288 <HAL_TIM_PWM_ConfigChannel>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004234:	f001 f834 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004238:	4803      	ldr	r0, [pc, #12]	@ (8004248 <MX_TIM10_Init+0x94>)
 800423a:	f002 fba5 	bl	8006988 <HAL_TIM_MspPostInit>

}
 800423e:	bf00      	nop
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000ba8 	.word	0x20000ba8
 800424c:	40014400 	.word	0x40014400

08004250 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 8004256:	4a12      	ldr	r2, [pc, #72]	@ (80042a0 <MX_USART1_UART_Init+0x50>)
 8004258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800425a:	4b10      	ldr	r3, [pc, #64]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 800425c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004262:	4b0e      	ldr	r3, [pc, #56]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 8004264:	2200      	movs	r2, #0
 8004266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 800426a:	2200      	movs	r2, #0
 800426c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800426e:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 8004270:	2200      	movs	r2, #0
 8004272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004274:	4b09      	ldr	r3, [pc, #36]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 8004276:	220c      	movs	r2, #12
 8004278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427a:	4b08      	ldr	r3, [pc, #32]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004280:	4b06      	ldr	r3, [pc, #24]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 8004282:	2200      	movs	r2, #0
 8004284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004286:	4805      	ldr	r0, [pc, #20]	@ (800429c <MX_USART1_UART_Init+0x4c>)
 8004288:	f007 fd72 	bl	800bd70 <HAL_UART_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004292:	f001 f805 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000d10 	.word	0x20000d10
 80042a0:	40011000 	.word	0x40011000

080042a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042a8:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042aa:	4a12      	ldr	r2, [pc, #72]	@ (80042f4 <MX_USART3_UART_Init+0x50>)
 80042ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042b0:	4a11      	ldr	r2, [pc, #68]	@ (80042f8 <MX_USART3_UART_Init+0x54>)
 80042b2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042b4:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042c8:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042ca:	220c      	movs	r2, #12
 80042cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ce:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042da:	4805      	ldr	r0, [pc, #20]	@ (80042f0 <MX_USART3_UART_Init+0x4c>)
 80042dc:	f007 fd48 	bl	800bd70 <HAL_UART_Init>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80042e6:	f000 ffdb 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000d58 	.word	0x20000d58
 80042f4:	40004800 	.word	0x40004800
 80042f8:	000186a0 	.word	0x000186a0

080042fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 8004302:	4a12      	ldr	r2, [pc, #72]	@ (800434c <MX_USART6_UART_Init+0x50>)
 8004304:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 8004308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800430c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800430e:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004314:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 8004316:	2200      	movs	r2, #0
 8004318:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 800431c:	2200      	movs	r2, #0
 800431e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004320:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 8004322:	220c      	movs	r2, #12
 8004324:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004326:	4b08      	ldr	r3, [pc, #32]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 800432e:	2200      	movs	r2, #0
 8004330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004332:	4805      	ldr	r0, [pc, #20]	@ (8004348 <MX_USART6_UART_Init+0x4c>)
 8004334:	f007 fd1c 	bl	800bd70 <HAL_UART_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800433e:	f000 ffaf 	bl	80052a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000da0 	.word	0x20000da0
 800434c:	40011400 	.word	0x40011400

08004350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	4b2f      	ldr	r3, [pc, #188]	@ (8004418 <MX_DMA_Init+0xc8>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <MX_DMA_Init+0xc8>)
 8004360:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004364:	6313      	str	r3, [r2, #48]	@ 0x30
 8004366:	4b2c      	ldr	r3, [pc, #176]	@ (8004418 <MX_DMA_Init+0xc8>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4b28      	ldr	r3, [pc, #160]	@ (8004418 <MX_DMA_Init+0xc8>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <MX_DMA_Init+0xc8>)
 800437c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004380:	6313      	str	r3, [r2, #48]	@ 0x30
 8004382:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <MX_DMA_Init+0xc8>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	2105      	movs	r1, #5
 8004392:	200c      	movs	r0, #12
 8004394:	f003 ff79 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004398:	200c      	movs	r0, #12
 800439a:	f003 ff92 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2105      	movs	r1, #5
 80043a2:	200d      	movs	r0, #13
 80043a4:	f003 ff71 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80043a8:	200d      	movs	r0, #13
 80043aa:	f003 ff8a 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2105      	movs	r1, #5
 80043b2:	200f      	movs	r0, #15
 80043b4:	f003 ff69 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80043b8:	200f      	movs	r0, #15
 80043ba:	f003 ff82 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80043be:	2200      	movs	r2, #0
 80043c0:	2105      	movs	r1, #5
 80043c2:	202f      	movs	r0, #47	@ 0x2f
 80043c4:	f003 ff61 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80043c8:	202f      	movs	r0, #47	@ 0x2f
 80043ca:	f003 ff7a 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2105      	movs	r1, #5
 80043d2:	2039      	movs	r0, #57	@ 0x39
 80043d4:	f003 ff59 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80043d8:	2039      	movs	r0, #57	@ 0x39
 80043da:	f003 ff72 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2105      	movs	r1, #5
 80043e2:	203a      	movs	r0, #58	@ 0x3a
 80043e4:	f003 ff51 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80043e8:	203a      	movs	r0, #58	@ 0x3a
 80043ea:	f003 ff6a 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2105      	movs	r1, #5
 80043f2:	2045      	movs	r0, #69	@ 0x45
 80043f4:	f003 ff49 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80043f8:	2045      	movs	r0, #69	@ 0x45
 80043fa:	f003 ff62 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80043fe:	2200      	movs	r2, #0
 8004400:	2105      	movs	r1, #5
 8004402:	2046      	movs	r0, #70	@ 0x46
 8004404:	f003 ff41 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004408:	2046      	movs	r0, #70	@ 0x46
 800440a:	f003 ff5a 	bl	80082c2 <HAL_NVIC_EnableIRQ>

}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800

0800441c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	@ 0x38
 8004420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	4b71      	ldr	r3, [pc, #452]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4a70      	ldr	r2, [pc, #448]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 800443c:	f043 0302 	orr.w	r3, r3, #2
 8004440:	6313      	str	r3, [r2, #48]	@ 0x30
 8004442:	4b6e      	ldr	r3, [pc, #440]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	4b6a      	ldr	r3, [pc, #424]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	4a69      	ldr	r2, [pc, #420]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800445c:	6313      	str	r3, [r2, #48]	@ 0x30
 800445e:	4b67      	ldr	r3, [pc, #412]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	4a62      	ldr	r2, [pc, #392]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	6313      	str	r3, [r2, #48]	@ 0x30
 800447a:	4b60      	ldr	r3, [pc, #384]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	4b5c      	ldr	r3, [pc, #368]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	4a5b      	ldr	r2, [pc, #364]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004490:	f043 0308 	orr.w	r3, r3, #8
 8004494:	6313      	str	r3, [r2, #48]	@ 0x30
 8004496:	4b59      	ldr	r3, [pc, #356]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	4b55      	ldr	r3, [pc, #340]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	4a54      	ldr	r2, [pc, #336]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044ac:	f043 0304 	orr.w	r3, r3, #4
 80044b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b2:	4b52      	ldr	r3, [pc, #328]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	4b4e      	ldr	r3, [pc, #312]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	4a4d      	ldr	r2, [pc, #308]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ce:	4b4b      	ldr	r3, [pc, #300]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	4b47      	ldr	r3, [pc, #284]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	4a46      	ldr	r2, [pc, #280]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ea:	4b44      	ldr	r3, [pc, #272]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044f6:	2300      	movs	r3, #0
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	4b40      	ldr	r3, [pc, #256]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	4a3f      	ldr	r2, [pc, #252]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004500:	f043 0320 	orr.w	r3, r3, #32
 8004504:	6313      	str	r3, [r2, #48]	@ 0x30
 8004506:	4b3d      	ldr	r3, [pc, #244]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	4b39      	ldr	r3, [pc, #228]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	4a38      	ldr	r2, [pc, #224]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 800451c:	f043 0310 	orr.w	r3, r3, #16
 8004520:	6313      	str	r3, [r2, #48]	@ 0x30
 8004522:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <MX_GPIO_Init+0x1e0>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800452e:	2200      	movs	r2, #0
 8004530:	2140      	movs	r1, #64	@ 0x40
 8004532:	4833      	ldr	r0, [pc, #204]	@ (8004600 <MX_GPIO_Init+0x1e4>)
 8004534:	f004 fc7e 	bl	8008e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004538:	2200      	movs	r2, #0
 800453a:	2110      	movs	r1, #16
 800453c:	4831      	ldr	r0, [pc, #196]	@ (8004604 <MX_GPIO_Init+0x1e8>)
 800453e:	f004 fc79 	bl	8008e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8004542:	2200      	movs	r2, #0
 8004544:	2101      	movs	r1, #1
 8004546:	4830      	ldr	r0, [pc, #192]	@ (8004608 <MX_GPIO_Init+0x1ec>)
 8004548:	f004 fc74 	bl	8008e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800454c:	2340      	movs	r3, #64	@ 0x40
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004550:	2301      	movs	r3, #1
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	2300      	movs	r3, #0
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800455c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004560:	4619      	mov	r1, r3
 8004562:	4827      	ldr	r0, [pc, #156]	@ (8004600 <MX_GPIO_Init+0x1e4>)
 8004564:	f004 faca 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004568:	2308      	movs	r3, #8
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800456c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	2300      	movs	r3, #0
 8004574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800457a:	4619      	mov	r1, r3
 800457c:	4820      	ldr	r0, [pc, #128]	@ (8004600 <MX_GPIO_Init+0x1e4>)
 800457e:	f004 fabd 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004582:	2310      	movs	r3, #16
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004586:	2301      	movs	r3, #1
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458a:	2300      	movs	r3, #0
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458e:	2300      	movs	r3, #0
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004596:	4619      	mov	r1, r3
 8004598:	481a      	ldr	r0, [pc, #104]	@ (8004604 <MX_GPIO_Init+0x1e8>)
 800459a:	f004 faaf 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 800459e:	2330      	movs	r3, #48	@ 0x30
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045b0:	4619      	mov	r1, r3
 80045b2:	4816      	ldr	r0, [pc, #88]	@ (800460c <MX_GPIO_Init+0x1f0>)
 80045b4:	f004 faa2 	bl	8008afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045b8:	2301      	movs	r3, #1
 80045ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045bc:	2301      	movs	r3, #1
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	2300      	movs	r3, #0
 80045c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045cc:	4619      	mov	r1, r3
 80045ce:	480e      	ldr	r0, [pc, #56]	@ (8004608 <MX_GPIO_Init+0x1ec>)
 80045d0:	f004 fa94 	bl	8008afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2105      	movs	r1, #5
 80045d8:	2009      	movs	r0, #9
 80045da:	f003 fe56 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045de:	2009      	movs	r0, #9
 80045e0:	f003 fe6f 	bl	80082c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80045e4:	2200      	movs	r2, #0
 80045e6:	2105      	movs	r1, #5
 80045e8:	200a      	movs	r0, #10
 80045ea:	f003 fe4e 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045ee:	200a      	movs	r0, #10
 80045f0:	f003 fe67 	bl	80082c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80045f4:	bf00      	nop
 80045f6:	3738      	adds	r7, #56	@ 0x38
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	40021800 	.word	0x40021800
 8004604:	40020000 	.word	0x40020000
 8004608:	40020400 	.word	0x40020400
 800460c:	40020800 	.word	0x40020800

08004610 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	// LED_PWM_Start();
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8004618:	2201      	movs	r2, #1
 800461a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800461e:	4825      	ldr	r0, [pc, #148]	@ (80046b4 <TaskMain+0xa4>)
 8004620:	f004 fc08 	bl	8008e34 <HAL_GPIO_WritePin>
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8004624:	f7fc fe44 	bl	80012b0 <BMI088_accel_init>
		//usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8004628:	f7fc fefa 	bl	8001420 <BMI088_gyro_init>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <TaskMain+0x28>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 8004632:	4821      	ldr	r0, [pc, #132]	@ (80046b8 <TaskMain+0xa8>)
 8004634:	f7fe f960 	bl	80028f8 <usart_printf>
	}
	if (ist8310_init()) {
 8004638:	f7ff f852 	bl	80036e0 <ist8310_init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <TaskMain+0x38>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 8004642:	481e      	ldr	r0, [pc, #120]	@ (80046bc <TaskMain+0xac>)
 8004644:	f7fe f958 	bl	80028f8 <usart_printf>
	}
	CAN_defineMotor(Bus2, M3508, 1);
 8004648:	2201      	movs	r2, #1
 800464a:	2101      	movs	r1, #1
 800464c:	2002      	movs	r0, #2
 800464e:	f7fd fa27 	bl	8001aa0 <CAN_defineMotor>
	CAN_defineMotor(Bus2, M2006, 2);
 8004652:	2202      	movs	r2, #2
 8004654:	2102      	movs	r1, #2
 8004656:	2002      	movs	r0, #2
 8004658:	f7fd fa22 	bl	8001aa0 <CAN_defineMotor>
	CAN_defineMotor(Bus2, GM6020, 1);
 800465c:	2201      	movs	r2, #1
 800465e:	2103      	movs	r1, #3
 8004660:	2002      	movs	r0, #2
 8004662:	f7fd fa1d 	bl	8001aa0 <CAN_defineMotor>

	osDelay(150);
 8004666:	2096      	movs	r0, #150	@ 0x96
 8004668:	f008 fea2 	bl	800d3b0 <osDelay>
	PWMOutput(LED, 2, 500);
 800466c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004670:	2102      	movs	r1, #2
 8004672:	2001      	movs	r0, #1
 8004674:	f001 f9f0 	bl	8005a58 <PWMOutput>
	PWMInitialize(LED, FR, 2, 0.9);
 8004678:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80046c0 <TaskMain+0xb0>
 800467c:	2202      	movs	r2, #2
 800467e:	2101      	movs	r1, #1
 8004680:	2001      	movs	r0, #1
 8004682:	f001 f8d1 	bl	8005828 <PWMInitialize>
	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
	JoulesBuffer = 60;
 8004686:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <TaskMain+0xb4>)
 8004688:	4a0f      	ldr	r2, [pc, #60]	@ (80046c8 <TaskMain+0xb8>)
 800468a:	601a      	str	r2, [r3, #0]
		}
		settingMaxCurrentVal(JoulesBuffer, PowerLimitor);
		osDelay(100);
		*/
		// usart_printf("%d\r\n", power_heat_data.buffer_energy);
		settingMaxCurrentVal((float)power_heat_data.buffer_energy,100, pc_control.shift);
 800468c:	4b0f      	ldr	r3, [pc, #60]	@ (80046cc <TaskMain+0xbc>)
 800468e:	891b      	ldrh	r3, [r3, #8]
 8004690:	ee07 3a90 	vmov	s15, r3
 8004694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004698:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <TaskMain+0xc0>)
 800469a:	7c1b      	ldrb	r3, [r3, #16]
 800469c:	4619      	mov	r1, r3
 800469e:	2064      	movs	r0, #100	@ 0x64
 80046a0:	eeb0 0a67 	vmov.f32	s0, s15
 80046a4:	f7fe fa5c 	bl	8002b60 <settingMaxCurrentVal>
		osDelay(5);
 80046a8:	2005      	movs	r0, #5
 80046aa:	f008 fe81 	bl	800d3b0 <osDelay>
		settingMaxCurrentVal((float)power_heat_data.buffer_energy,100, pc_control.shift);
 80046ae:	bf00      	nop
 80046b0:	e7ec      	b.n	800468c <TaskMain+0x7c>
 80046b2:	bf00      	nop
 80046b4:	40021c00 	.word	0x40021c00
 80046b8:	080140ac 	.word	0x080140ac
 80046bc:	080140d8 	.word	0x080140d8
 80046c0:	3f666666 	.word	0x3f666666
 80046c4:	20000094 	.word	0x20000094
 80046c8:	42700000 	.word	0x42700000
 80046cc:	200007c4 	.word	0x200007c4
 80046d0:	200007d4 	.word	0x200007d4
 80046d4:	00000000 	.word	0x00000000

080046d8 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	b0cb      	sub	sp, #300	@ 0x12c
 80046de:	af06      	add	r7, sp, #24
 80046e0:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN TaskChassis */



	PWMInit(&htim1, &htim4, &htim5, &htim8);
 80046e2:	4bbc      	ldr	r3, [pc, #752]	@ (80049d4 <TaskChassis+0x2fc>)
 80046e4:	4abc      	ldr	r2, [pc, #752]	@ (80049d8 <TaskChassis+0x300>)
 80046e6:	49bd      	ldr	r1, [pc, #756]	@ (80049dc <TaskChassis+0x304>)
 80046e8:	48bd      	ldr	r0, [pc, #756]	@ (80049e0 <TaskChassis+0x308>)
 80046ea:	f000 ff7f 	bl	80055ec <PWMInit>
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 80046ee:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
    int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 80046f8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]


    int16_t rcYaw = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
    int16_t chassisrcYaw = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    int16_t previousVal = getRotorPosition(Bus2, GM6020, 5);
    float prevGyroVal = 0;
    */

    // int16_t rcPitch = 0;   	                    // range: 2204 ~ 4726
    int8_t jammed = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    int8_t indexerStopped = 1;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    int8_t indexerTargetReached = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d

    int8_t previousC = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c

    int8_t bufferDead = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    int8_t M3508Voltage = 24;
 800472c:	2318      	movs	r3, #24
 800472e:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
    int8_t songToggle = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce

    maxPower = 0;
 8004738:	4baa      	ldr	r3, [pc, #680]	@ (80049e4 <TaskChassis+0x30c>)
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
    float scuffedMaxedPower = 0;
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    // float percentagePowerLimit = 1;

    float gyroidValue = 0;
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

    // int8_t switchForShooter = 0;
    int8_t motorOn = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

    float MC[4] = {0, 0, 0, 0};
 8004756:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	60da      	str	r2, [r3, #12]
    int8_t wasShooting = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
    int8_t reverseCounter = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
	*/

    // int8_t switcherForBuzzer = 0;
    // int16_t counterForBuzzer = 0;

    int16_t turretPitchNew = 2735;
 8004770:	f640 23af 	movw	r3, #2735	@ 0xaaf
 8004774:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa

    // int32_t actualTurretAngle = 0;
    double convertedAngle = 0;
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
    int16_t rotationSpeedOfChassis = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    // int16_t 你是一个奴隶 = 5;

    int8_t chassisVsTurretDrive = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    int32_t motorRotationCounter = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	int64_t turretMotorPosition = 0;
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	int16_t initialTurretPosition = getRotorPosition(Bus2, GM6020, 1);
 80047a2:	2201      	movs	r2, #1
 80047a4:	2103      	movs	r1, #3
 80047a6:	2002      	movs	r0, #2
 80047a8:	f7fd ff9c 	bl	80026e4 <getRotorPosition>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
	int16_t currentMotorPosition = getRotorPosition(Bus2, GM6020, 1);
 80047b2:	2201      	movs	r2, #1
 80047b4:	2103      	movs	r1, #3
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7fd ff94 	bl	80026e4 <getRotorPosition>
 80047bc:	4603      	mov	r3, r0
 80047be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
	int16_t previousMotorPosition = getRotorPosition(Bus2, GM6020, 1);
 80047c2:	2201      	movs	r2, #1
 80047c4:	2103      	movs	r1, #3
 80047c6:	2002      	movs	r0, #2
 80047c8:	f7fd ff8c 	bl	80026e4 <getRotorPosition>
 80047cc:	4603      	mov	r3, r0
 80047ce:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
	int16_t barrelHeatingMaxVal[2][10] = {{200, 250, 300, 350, 400, 450, 500, 550, 600, 650}, {50, 85, 120, 155, 190, 225, 260, 295, 330, 400}};
 80047d2:	4b85      	ldr	r3, [pc, #532]	@ (80049e8 <TaskChassis+0x310>)
 80047d4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80047d8:	461d      	mov	r5, r3
 80047da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047e6:	e884 0003 	stmia.w	r4, {r0, r1}

	int16_t firingHeatTemp = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
	int8_t firingType = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
	int8_t level = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
	int8_t previouslyPressedZ = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
	int8_t previouslyPressedX = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9

	int8_t cantShoot = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8

	int16_t xJoystickDirection = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	int16_t yJoystickDirection = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
	int16_t rotationOfChassis = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    //int16_t targetRPM[4] = {0,0,0,0};

  /* Infinite loop */
    for(;;) {

    	int8_t rightSwitch = getRCswitch(0);
 8004820:	2000      	movs	r0, #0
 8004822:	f001 fc85 	bl	8006130 <getRCswitch>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
    	int8_t leftSwitch = getRCswitch(1);
 800482c:	2001      	movs	r0, #1
 800482e:	f001 fc7f 	bl	8006130 <getRCswitch>
 8004832:	4603      	mov	r3, r0
 8004834:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0

    	currentMotorPosition = getRotorPosition(Bus1, GM6020, 1);
 8004838:	2201      	movs	r2, #1
 800483a:	2103      	movs	r1, #3
 800483c:	2001      	movs	r0, #1
 800483e:	f7fd ff51 	bl	80026e4 <getRotorPosition>
 8004842:	4603      	mov	r3, r0
 8004844:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    	if ((currentMotorPosition - previousMotorPosition) < -6000) {
 8004848:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	@ 0xbe
 800484c:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	@ 0xe4
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	4a66      	ldr	r2, [pc, #408]	@ (80049ec <TaskChassis+0x314>)
 8004854:	4293      	cmp	r3, r2
 8004856:	da05      	bge.n	8004864 <TaskChassis+0x18c>
    		motorRotationCounter++;
 8004858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800485c:	3301      	adds	r3, #1
 800485e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004862:	e00d      	b.n	8004880 <TaskChassis+0x1a8>
    	} else if ((currentMotorPosition - previousMotorPosition) > 6000) {
 8004864:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	@ 0xbe
 8004868:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	@ 0xe4
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8004872:	4293      	cmp	r3, r2
 8004874:	dd04      	ble.n	8004880 <TaskChassis+0x1a8>
    		motorRotationCounter--;
 8004876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800487a:	3b01      	subs	r3, #1
 800487c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    	}

    	turretMotorPosition = currentMotorPosition + (8191 * motorRotationCounter);
 8004880:	f9b7 10be 	ldrsh.w	r1, [r7, #190]	@ 0xbe
 8004884:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8004888:	4613      	mov	r3, r2
 800488a:	035b      	lsls	r3, r3, #13
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	440b      	add	r3, r1
 8004890:	17da      	asrs	r2, r3, #31
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	60fa      	str	r2, [r7, #12]
 8004896:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800489a:	e9c7 3430 	strd	r3, r4, [r7, #192]	@ 0xc0

    	// actualTurretAngle = ((turretMotorPosition - initialTurretPosition)*0.025408f);
    	convertedAngle = ((turretMotorPosition - initialTurretPosition)* 0.0004434705f);
 800489e:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	@ 0xe6
 80048a2:	17da      	asrs	r2, r3, #31
 80048a4:	469a      	mov	sl, r3
 80048a6:	4693      	mov	fp, r2
 80048a8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 80048ac:	ebb2 010a 	subs.w	r1, r2, sl
 80048b0:	6139      	str	r1, [r7, #16]
 80048b2:	eb63 030b 	sbc.w	r3, r3, fp
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048bc:	f7fc fa94 	bl	8000de8 <__aeabi_l2f>
 80048c0:	ee07 0a10 	vmov	s14, r0
 80048c4:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80049f0 <TaskChassis+0x318>
 80048c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048cc:	ee17 0a90 	vmov	r0, s15
 80048d0:	f7fb fe3a 	bl	8000548 <__aeabi_f2d>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0


    	// usart_printf("%d %d %d\r\n", turretMotorPosition, initialTurretPosition, actualTurretAngle);
    	previousMotorPosition = getRotorPosition(Bus1, GM6020, 1);
 80048dc:	2201      	movs	r2, #1
 80048de:	2103      	movs	r1, #3
 80048e0:	2001      	movs	r0, #1
 80048e2:	f7fd feff 	bl	80026e4 <getRotorPosition>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4


    	if (leftSwitch == 1) {
 80048ec:	f997 30b0 	ldrsb.w	r3, [r7, #176]	@ 0xb0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d104      	bne.n	80048fe <TaskChassis+0x226>
    		rotationSpeedOfChassis = 2000;
 80048f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80048f8:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 80048fc:	e00b      	b.n	8004916 <TaskChassis+0x23e>
    	} else if (leftSwitch == 2) {
 80048fe:	f997 30b0 	ldrsb.w	r3, [r7, #176]	@ 0xb0
 8004902:	2b02      	cmp	r3, #2
 8004904:	d104      	bne.n	8004910 <TaskChassis+0x238>
    		rotationSpeedOfChassis = -2000;
 8004906:	f64f 0330 	movw	r3, #63536	@ 0xf830
 800490a:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
 800490e:	e002      	b.n	8004916 <TaskChassis+0x23e>
    	} else {
    		rotationSpeedOfChassis = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    	}


	    for (int i = 0; i < 4; i++) {
 8004916:	2300      	movs	r3, #0
 8004918:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800491c:	e021      	b.n	8004962 <TaskChassis+0x28a>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 800491e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004922:	b25b      	sxtb	r3, r3
 8004924:	4618      	mov	r0, r3
 8004926:	f001 fbef 	bl	8006108 <getRCchannel>
 800492a:	4603      	mov	r3, r0
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004934:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80049f4 <TaskChassis+0x31c>
 8004938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004940:	ee17 3a90 	vmov	r3, s15
 8004944:	b21a      	sxth	r2, r3
 8004946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	33f8      	adds	r3, #248	@ 0xf8
 800494e:	f107 0118 	add.w	r1, r7, #24
 8004952:	440b      	add	r3, r1
 8004954:	f823 2c78 	strh.w	r2, [r3, #-120]
	    for (int i = 0; i < 4; i++) {
 8004958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800495c:	3301      	adds	r3, #1
 800495e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004966:	2b03      	cmp	r3, #3
 8004968:	ddd9      	ble.n	800491e <TaskChassis+0x246>
	    }

	    rcYaw = getRCchannel(4) * 0.85f;
 800496a:	2004      	movs	r0, #4
 800496c:	f001 fbcc 	bl	8006108 <getRCchannel>
 8004970:	4603      	mov	r3, r0
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80049f8 <TaskChassis+0x320>
 800497e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004986:	ee17 3a90 	vmov	r3, s15
 800498a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	    chassisrcYaw = getRCchannel(0)*0.85f;
 800498e:	2000      	movs	r0, #0
 8004990:	f001 fbba 	bl	8006108 <getRCchannel>
 8004994:	4603      	mov	r3, r0
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800499e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80049f8 <TaskChassis+0x320>
 80049a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049aa:	ee17 3a90 	vmov	r3, s15
 80049ae:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
	    	rotationSpeedOfChassis = 0;
	    }
	    */
	    // usart_printf("%d\r\n", getRCchannel(4));

	    if ((previousC == 0) && (pc_control.c == 1) && (chassisVsTurretDrive == 1)) {
 80049b2:	f997 310c 	ldrsb.w	r3, [r7, #268]	@ 0x10c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d122      	bne.n	8004a00 <TaskChassis+0x328>
 80049ba:	4b10      	ldr	r3, [pc, #64]	@ (80049fc <TaskChassis+0x324>)
 80049bc:	7e5b      	ldrb	r3, [r3, #25]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d11e      	bne.n	8004a00 <TaskChassis+0x328>
 80049c2:	f997 30ef 	ldrsb.w	r3, [r7, #239]	@ 0xef
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d11a      	bne.n	8004a00 <TaskChassis+0x328>
	    	chassisVsTurretDrive = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 80049d0:	e025      	b.n	8004a1e <TaskChassis+0x346>
 80049d2:	bf00      	nop
 80049d4:	20000b60 	.word	0x20000b60
 80049d8:	20000b18 	.word	0x20000b18
 80049dc:	20000ad0 	.word	0x20000ad0
 80049e0:	20000a88 	.word	0x20000a88
 80049e4:	20000fdc 	.word	0x20000fdc
 80049e8:	08014104 	.word	0x08014104
 80049ec:	ffffe890 	.word	0xffffe890
 80049f0:	39e8819a 	.word	0x39e8819a
 80049f4:	415a51ec 	.word	0x415a51ec
 80049f8:	3f59999a 	.word	0x3f59999a
 80049fc:	200007d4 	.word	0x200007d4
	    } else if ((previousC == 0) && (pc_control.v == 1) && (chassisVsTurretDrive == 0)) {
 8004a00:	f997 310c 	ldrsb.w	r3, [r7, #268]	@ 0x10c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <TaskChassis+0x346>
 8004a08:	4b87      	ldr	r3, [pc, #540]	@ (8004c28 <TaskChassis+0x550>)
 8004a0a:	7e9b      	ldrb	r3, [r3, #26]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d106      	bne.n	8004a1e <TaskChassis+0x346>
 8004a10:	f997 30ef 	ldrsb.w	r3, [r7, #239]	@ 0xef
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <TaskChassis+0x346>
	    	chassisVsTurretDrive = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	    }

	    previousC = pc_control.c;
 8004a1e:	4b82      	ldr	r3, [pc, #520]	@ (8004c28 <TaskChassis+0x550>)
 8004a20:	7e5b      	ldrb	r3, [r3, #25]
 8004a22:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
	        // actualTurretAngle = 0;
	        convertedAngle = 0;
	    }
	    */

		int16_t barrelHeatingMaxVal[2][10] = {{50, 85, 120, 155, 190, 225, 260, 295, 330, 400}, {200, 250, 300, 350, 400, 450, 500, 550, 600, 650}};
 8004a26:	4b81      	ldr	r3, [pc, #516]	@ (8004c2c <TaskChassis+0x554>)
 8004a28:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004a2c:	461d      	mov	r5, r3
 8004a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a3a:	e884 0003 	stmia.w	r4, {r0, r1}

		int16_t firingHeatTemp = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
		int8_t firingType = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
		int8_t previouslyPressedZ = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
		int8_t previouslyPressedX = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

	    if ((pc_control.z == 1) && (previouslyPressedZ == 0)) {
 8004a56:	4b74      	ldr	r3, [pc, #464]	@ (8004c28 <TaskChassis+0x550>)
 8004a58:	7ddb      	ldrb	r3, [r3, #23]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d10e      	bne.n	8004a7c <TaskChassis+0x3a4>
 8004a5e:	f997 30ac 	ldrsb.w	r3, [r7, #172]	@ 0xac
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <TaskChassis+0x3a4>
	    	previouslyPressedZ = 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
	    	level--;
 8004a6c:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8004a7a:	e006      	b.n	8004a8a <TaskChassis+0x3b2>

	    } else if (pc_control.z == 0) {
 8004a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004c28 <TaskChassis+0x550>)
 8004a7e:	7ddb      	ldrb	r3, [r3, #23]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <TaskChassis+0x3b2>
	    	previouslyPressedZ = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
	    }
	    if ((pc_control.x == 1) && (previouslyPressedX == 0)) {
 8004a8a:	4b67      	ldr	r3, [pc, #412]	@ (8004c28 <TaskChassis+0x550>)
 8004a8c:	7e1b      	ldrb	r3, [r3, #24]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10e      	bne.n	8004ab0 <TaskChassis+0x3d8>
 8004a92:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <TaskChassis+0x3d8>
	    	previouslyPressedX = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	    	level++;
 8004aa0:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8004aae:	e006      	b.n	8004abe <TaskChassis+0x3e6>
	    } else if (pc_control.x == 0) {
 8004ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8004c28 <TaskChassis+0x550>)
 8004ab2:	7e1b      	ldrb	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <TaskChassis+0x3e6>
	    	previouslyPressedX = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	    }

	    if (level > 10) {
 8004abe:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8004ac2:	2b0a      	cmp	r3, #10
 8004ac4:	dd03      	ble.n	8004ace <TaskChassis+0x3f6>
	    	level = 9;
 8004ac6:	2309      	movs	r3, #9
 8004ac8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8004acc:	e006      	b.n	8004adc <TaskChassis+0x404>
	    } else if (level < 0) {
 8004ace:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da02      	bge.n	8004adc <TaskChassis+0x404>
	    	level = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
	    }

	    if (pc_control.g == 1) {
 8004adc:	4b52      	ldr	r3, [pc, #328]	@ (8004c28 <TaskChassis+0x550>)
 8004ade:	7d9b      	ldrb	r3, [r3, #22]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d103      	bne.n	8004aec <TaskChassis+0x414>
	    	firingType = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 8004aea:	e006      	b.n	8004afa <TaskChassis+0x422>
	    } else if (pc_control.b == 1) {
 8004aec:	4b4e      	ldr	r3, [pc, #312]	@ (8004c28 <TaskChassis+0x550>)
 8004aee:	7edb      	ldrb	r3, [r3, #27]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d102      	bne.n	8004afa <TaskChassis+0x422>
	    	firingType = 1;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
	    }

	    firingHeatTemp = power_heat_data.shooter_17mm_1_barrel_heat;
 8004afa:	4b4d      	ldr	r3, [pc, #308]	@ (8004c30 <TaskChassis+0x558>)
 8004afc:	895b      	ldrh	r3, [r3, #10]
 8004afe:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
	    	} else {
	    		cantshoot = 0;
	    	}
	    }
	    */
	    cantShoot = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8

	    if (pc_control.f == 1) {
 8004b08:	4b47      	ldr	r3, [pc, #284]	@ (8004c28 <TaskChassis+0x550>)
 8004b0a:	7d5b      	ldrb	r3, [r3, #21]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d116      	bne.n	8004b3e <TaskChassis+0x466>
	        motorRotationCounter = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	    	turretMotorPosition = 0;
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
	    	initialTurretPosition = getRotorPosition(Bus1, GM6020, 1);
 8004b22:	2201      	movs	r2, #1
 8004b24:	2103      	movs	r1, #3
 8004b26:	2001      	movs	r0, #1
 8004b28:	f7fd fddc 	bl	80026e4 <getRotorPosition>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
	        // actualTurretAngle = 0;
	        convertedAngle = 0;
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	    //CAN_setMotorCurrent(1, M3508, 7, 2000);
	    //rcPitch = getRotorPosition(1, 1, 2);

	    // int16_t turretPitch = (getRCchannel(1)*0.63f)+2640;

	    int16_t turretPitch = getRCchannel(1)* 0.85f;
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f001 fae2 	bl	8006108 <getRCchannel>
 8004b44:	4603      	mov	r3, r0
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b4e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8004c34 <TaskChassis+0x55c>
 8004b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b5a:	ee17 3a90 	vmov	r3, s15
 8004b5e:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
	    chassisTargetRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
	    chassisTargetRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
	    chassisTargetRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
		*/

	    allCheShit(pc_control.w, pc_control.a, pc_control.s, pc_control.d, pc_control.q, pc_control.e, pc_control.r, rcRPM, chassisVsTurretDrive, convertedAngle, chassisPreset);
 8004b62:	4b31      	ldr	r3, [pc, #196]	@ (8004c28 <TaskChassis+0x550>)
 8004b64:	7b1b      	ldrb	r3, [r3, #12]
 8004b66:	fa4f f883 	sxtb.w	r8, r3
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c28 <TaskChassis+0x550>)
 8004b6c:	7b9b      	ldrb	r3, [r3, #14]
 8004b6e:	fa4f f983 	sxtb.w	r9, r3
 8004b72:	4b2d      	ldr	r3, [pc, #180]	@ (8004c28 <TaskChassis+0x550>)
 8004b74:	7b5b      	ldrb	r3, [r3, #13]
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004c28 <TaskChassis+0x550>)
 8004b7c:	7bdb      	ldrb	r3, [r3, #15]
 8004b7e:	b259      	sxtb	r1, r3
 8004b80:	61b9      	str	r1, [r7, #24]
 8004b82:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <TaskChassis+0x550>)
 8004b84:	7c9b      	ldrb	r3, [r3, #18]
 8004b86:	b25c      	sxtb	r4, r3
 8004b88:	4b27      	ldr	r3, [pc, #156]	@ (8004c28 <TaskChassis+0x550>)
 8004b8a:	7cdb      	ldrb	r3, [r3, #19]
 8004b8c:	b25d      	sxtb	r5, r3
 8004b8e:	4b26      	ldr	r3, [pc, #152]	@ (8004c28 <TaskChassis+0x550>)
 8004b90:	7d1b      	ldrb	r3, [r3, #20]
 8004b92:	b25e      	sxtb	r6, r3
 8004b94:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 8004b98:	f7fc f806 	bl	8000ba8 <__aeabi_d2f>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b26      	ldr	r3, [pc, #152]	@ (8004c38 <TaskChassis+0x560>)
 8004ba0:	edd3 6a00 	vldr	s13, [r3]
 8004ba4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ba8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bac:	f997 30ef 	ldrsb.w	r3, [r7, #239]	@ 0xef
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8004bb6:	9303      	str	r3, [sp, #12]
 8004bb8:	9602      	str	r6, [sp, #8]
 8004bba:	9501      	str	r5, [sp, #4]
 8004bbc:	9400      	str	r4, [sp, #0]
 8004bbe:	eef0 0a66 	vmov.f32	s1, s13
 8004bc2:	eeb0 1a47 	vmov.f32	s2, s14
 8004bc6:	eef0 1a67 	vmov.f32	s3, s15
 8004bca:	ee00 2a10 	vmov	s0, r2
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	f7fe f977 	bl	8002ec8 <allCheShit>
	    	setMotorRPM(Bus1, M3508, i+1, chassisTargetRPM[i], chassisPreset);
	    }
	    */

	    // turretPitchNew += (int16_t)((float)(turretPitch)* mouseYScaler);
	    turretPitchNew -= (int16_t)((float)(pc_control.mouse_y)* mouseYScaler) + (turretPitch);
 8004bda:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	@ 0xfa
 8004bde:	4b12      	ldr	r3, [pc, #72]	@ (8004c28 <TaskChassis+0x550>)
 8004be0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bec:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <TaskChassis+0x564>)
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bfa:	ee17 3a90 	vmov	r3, s15
 8004bfe:	b21b      	sxth	r3, r3
 8004c00:	b299      	uxth	r1, r3
 8004c02:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8004c06:	440b      	add	r3, r1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa

	    if (turretPitchNew > 4000) {
 8004c12:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8004c16:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8004c1a:	dd11      	ble.n	8004c40 <TaskChassis+0x568>
	    	turretPitchNew = 4000;
 8004c1c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8004c20:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
 8004c24:	e016      	b.n	8004c54 <TaskChassis+0x57c>
 8004c26:	bf00      	nop
 8004c28:	200007d4 	.word	0x200007d4
 8004c2c:	0801412c 	.word	0x0801412c
 8004c30:	200007c4 	.word	0x200007c4
 8004c34:	3f59999a 	.word	0x3f59999a
 8004c38:	20000058 	.word	0x20000058
 8004c3c:	2000009c 	.word	0x2000009c
	    } else if (turretPitchNew < 2299) {
 8004c40:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8004c44:	f640 02fa 	movw	r2, #2298	@ 0x8fa
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	dc03      	bgt.n	8004c54 <TaskChassis+0x57c>
	    	turretPitchNew = 2299;
 8004c4c:	f640 03fb 	movw	r3, #2299	@ 0x8fb
 8004c50:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa

	    // setMotorPosition(Bus2, GM6020, 5, (randomNumbers[currentNumber]*1701)+3000, pitchPresetVoltagePosition);
	    // usart_printf("%d %d %d\r\n", (int16_t)((randomNumbers[currentNumber]*1701)+3000), turretCurrentPitch, getRCchannel(1)*10);

	    // usart_printf("%d %d\r\n", (int16_t)((randomNumbers[currentNumber]-0.5)*200.0), RPMTHING);
	    setMotorPosition(Bus2, GM6020, 5, turretPitchNew, pitchPresetVoltagePosition);
 8004c54:	4bb2      	ldr	r3, [pc, #712]	@ (8004f20 <TaskChassis+0x848>)
 8004c56:	edd3 6a00 	vldr	s13, [r3]
 8004c5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c62:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8004c66:	eeb0 0a66 	vmov.f32	s0, s13
 8004c6a:	eef0 0a47 	vmov.f32	s1, s14
 8004c6e:	eeb0 1a67 	vmov.f32	s2, s15
 8004c72:	2205      	movs	r2, #5
 8004c74:	2103      	movs	r1, #3
 8004c76:	2002      	movs	r0, #2
 8004c78:	f7fd fcf9 	bl	800266e <setMotorPosition>

	    // usart_printf("%d %d\r\n", turretPitchNew, getRotorPosition(Bus1, GM6020, 5));
	    // setMotorRPM(Bus2, GM6020, 5, chassisTargetRPM[0], chassisPreset);

	    //CAN_DriveMotor(Bus1, 0x2FF, 2000, 0, 0, 0);
	    osDelay(2);
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f008 fb97 	bl	800d3b0 <osDelay>

	    //setMotorRPM(Bus2, M3508, 8, 50, shooterPreset);
	    float gyroVel[3] = {IMU_get_gyro(x), IMU_get_gyro(y), IMU_get_gyro(z)};
 8004c82:	2000      	movs	r0, #0
 8004c84:	f7fc fc64 	bl	8001550 <IMU_get_gyro>
 8004c88:	eef0 7a40 	vmov.f32	s15, s0
 8004c8c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7fc fc5d 	bl	8001550 <IMU_get_gyro>
 8004c96:	eef0 7a40 	vmov.f32	s15, s0
 8004c9a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8004c9e:	2002      	movs	r0, #2
 8004ca0:	f7fc fc56 	bl	8001550 <IMU_get_gyro>
 8004ca4:	eef0 7a40 	vmov.f32	s15, s0
 8004ca8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	    if (chassisVsTurretDrive == 1) {
 8004cac:	f997 30ef 	ldrsb.w	r3, [r7, #239]	@ 0xef
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	f040 8083 	bne.w	8004dbc <TaskChassis+0x6e4>
	    	// usart_printf("%f, %f, %f\r\n", gyroVel[0], gyroVel[1], gyroVel[2]);
	    	// gyroidValue += gyroVel[2]*0.005;
	    	if (((gyroVel[2] > -0.02) && (gyroVel[2] < 0.02))) {
 8004cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fc45 	bl	8000548 <__aeabi_f2d>
 8004cbe:	a390      	add	r3, pc, #576	@ (adr r3, 8004f00 <TaskChassis+0x828>)
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f7fb ff28 	bl	8000b18 <__aeabi_dcmpgt>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00e      	beq.n	8004cec <TaskChassis+0x614>
 8004cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fc39 	bl	8000548 <__aeabi_f2d>
 8004cd6:	a38c      	add	r3, pc, #560	@ (adr r3, 8004f08 <TaskChassis+0x830>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fefe 	bl	8000adc <__aeabi_dcmplt>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <TaskChassis+0x614>
	    		gyroVel[2] = 0;
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	657b      	str	r3, [r7, #84]	@ 0x54
	    	}

	    	// gyroidValue += (gyroVel[2] + 0.008*((float)(chassisrcYaw)))*0.01* mouseXScaler;
	    	gyroidValue += gyroVel[2] + (0.008*((float)(pc_control.mouse_x)))*0.4* mouseXScaler;
 8004cec:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8004cf0:	f7fb fc2a 	bl	8000548 <__aeabi_f2d>
 8004cf4:	e9c7 0100 	strd	r0, r1, [r7]
 8004cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fb fc24 	bl	8000548 <__aeabi_f2d>
 8004d00:	4680      	mov	r8, r0
 8004d02:	4689      	mov	r9, r1
 8004d04:	4b87      	ldr	r3, [pc, #540]	@ (8004f24 <TaskChassis+0x84c>)
 8004d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d12:	ee17 0a90 	vmov	r0, s15
 8004d16:	f7fb fc17 	bl	8000548 <__aeabi_f2d>
 8004d1a:	a37d      	add	r3, pc, #500	@ (adr r3, 8004f10 <TaskChassis+0x838>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fc6a 	bl	80005f8 <__aeabi_dmul>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4610      	mov	r0, r2
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	a37a      	add	r3, pc, #488	@ (adr r3, 8004f18 <TaskChassis+0x840>)
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	f7fb fc61 	bl	80005f8 <__aeabi_dmul>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	461d      	mov	r5, r3
 8004d3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f28 <TaskChassis+0x850>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fc00 	bl	8000548 <__aeabi_f2d>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4629      	mov	r1, r5
 8004d50:	f7fb fc52 	bl	80005f8 <__aeabi_dmul>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4640      	mov	r0, r8
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	f7fb fa96 	bl	800028c <__adddf3>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d68:	f7fb fa90 	bl	800028c <__adddf3>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4610      	mov	r0, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	f7fb ff18 	bl	8000ba8 <__aeabi_d2f>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	    	setMotorRPM(Bus1, GM6020, 1, (int16_t)(-20*gyroidValue), yawPresetVoltageRPM);
 8004d7e:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8004d82:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8004d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d8e:	ee17 3a90 	vmov	r3, s15
 8004d92:	b21a      	sxth	r2, r3
 8004d94:	4b65      	ldr	r3, [pc, #404]	@ (8004f2c <TaskChassis+0x854>)
 8004d96:	edd3 6a00 	vldr	s13, [r3]
 8004d9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004da2:	eeb0 0a66 	vmov.f32	s0, s13
 8004da6:	eef0 0a47 	vmov.f32	s1, s14
 8004daa:	eeb0 1a67 	vmov.f32	s2, s15
 8004dae:	4613      	mov	r3, r2
 8004db0:	2201      	movs	r2, #1
 8004db2:	2103      	movs	r1, #3
 8004db4:	2001      	movs	r0, #1
 8004db6:	f7fd fc1f 	bl	80025f8 <setMotorRPM>
 8004dba:	e042      	b.n	8004e42 <TaskChassis+0x76a>
	    	/*
	        motorRotationCounter = 0;
	    	turretMotorPosition = 0;
	    	*/
	    	// setMotorRPM(Bus1, GM6020, 1, (int16_t)(mouseXScaler*(float)(rcYaw)), yawPresetVoltageRPM);
	    	setMotorRPM(Bus1, GM6020, 1, -0.5*(int16_t)(mouseXScaler*(float)(pc_control.mouse_x)) + rcYaw, yawPresetVoltageRPM);
 8004dbc:	4b59      	ldr	r3, [pc, #356]	@ (8004f24 <TaskChassis+0x84c>)
 8004dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dca:	4b57      	ldr	r3, [pc, #348]	@ (8004f28 <TaskChassis+0x850>)
 8004dcc:	edd3 7a00 	vldr	s15, [r3]
 8004dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd8:	ee17 3a90 	vmov	r3, s15
 8004ddc:	b21b      	sxth	r3, r3
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fb fba0 	bl	8000524 <__aeabi_i2d>
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	4b51      	ldr	r3, [pc, #324]	@ (8004f30 <TaskChassis+0x858>)
 8004dea:	f7fb fc05 	bl	80005f8 <__aeabi_dmul>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4614      	mov	r4, r2
 8004df4:	461d      	mov	r5, r3
 8004df6:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fb fb92 	bl	8000524 <__aeabi_i2d>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4620      	mov	r0, r4
 8004e06:	4629      	mov	r1, r5
 8004e08:	f7fb fa40 	bl	800028c <__adddf3>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	f7fb fea0 	bl	8000b58 <__aeabi_d2iz>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	b21a      	sxth	r2, r3
 8004e1c:	4b43      	ldr	r3, [pc, #268]	@ (8004f2c <TaskChassis+0x854>)
 8004e1e:	edd3 6a00 	vldr	s13, [r3]
 8004e22:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e26:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e2a:	eeb0 0a66 	vmov.f32	s0, s13
 8004e2e:	eef0 0a47 	vmov.f32	s1, s14
 8004e32:	eeb0 1a67 	vmov.f32	s2, s15
 8004e36:	4613      	mov	r3, r2
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2103      	movs	r1, #3
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	f7fd fbdb 	bl	80025f8 <setMotorRPM>



	    // usart_printf("%d %d\r\n",pc_control.mouse_x, pc_control.mouse_y);

	    for (int i = 0; i < 4; i++) {
 8004e42:	2300      	movs	r3, #0
 8004e44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e48:	e047      	b.n	8004eda <TaskChassis+0x802>
	    	MC[i] = getMotorCurrent(Bus2, M3508, (i+1)) * 0.0012207f;
 8004e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	2101      	movs	r1, #1
 8004e5a:	2002      	movs	r0, #2
 8004e5c:	f7fd fce2 	bl	8002824 <getMotorCurrent>
 8004e60:	4603      	mov	r3, r0
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e6a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004f34 <TaskChassis+0x85c>
 8004e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	33f8      	adds	r3, #248	@ 0xf8
 8004e7a:	f107 0218 	add.w	r2, r7, #24
 8004e7e:	4413      	add	r3, r2
 8004e80:	3b90      	subs	r3, #144	@ 0x90
 8004e82:	edc3 7a00 	vstr	s15, [r3]
	    	if (MC[i] < 0) {
 8004e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	33f8      	adds	r3, #248	@ 0xf8
 8004e8e:	f107 0218 	add.w	r2, r7, #24
 8004e92:	4413      	add	r3, r2
 8004e94:	3b90      	subs	r3, #144	@ 0x90
 8004e96:	edd3 7a00 	vldr	s15, [r3]
 8004e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea2:	d515      	bpl.n	8004ed0 <TaskChassis+0x7f8>
	    		MC[i] = -1* MC[i];
 8004ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	33f8      	adds	r3, #248	@ 0xf8
 8004eac:	f107 0218 	add.w	r2, r7, #24
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3b90      	subs	r3, #144	@ 0x90
 8004eb4:	edd3 7a00 	vldr	s15, [r3]
 8004eb8:	eef1 7a67 	vneg.f32	s15, s15
 8004ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	33f8      	adds	r3, #248	@ 0xf8
 8004ec4:	f107 0218 	add.w	r2, r7, #24
 8004ec8:	4413      	add	r3, r2
 8004eca:	3b90      	subs	r3, #144	@ 0x90
 8004ecc:	edc3 7a00 	vstr	s15, [r3]
	    for (int i = 0; i < 4; i++) {
 8004ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	ddb3      	ble.n	8004e4a <TaskChassis+0x772>
	    	}
	    }
	    maxPower = 0;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <TaskChassis+0x860>)
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
	    scuffedMaxedPower = 0;
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	    for (int i = 0; i < 4; i++) {
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ef8:	e04f      	b.n	8004f9a <TaskChassis+0x8c2>
 8004efa:	bf00      	nop
 8004efc:	f3af 8000 	nop.w
 8004f00:	47ae147b 	.word	0x47ae147b
 8004f04:	bf947ae1 	.word	0xbf947ae1
 8004f08:	47ae147b 	.word	0x47ae147b
 8004f0c:	3f947ae1 	.word	0x3f947ae1
 8004f10:	d2f1a9fc 	.word	0xd2f1a9fc
 8004f14:	3f80624d 	.word	0x3f80624d
 8004f18:	9999999a 	.word	0x9999999a
 8004f1c:	3fd99999 	.word	0x3fd99999
 8004f20:	20000070 	.word	0x20000070
 8004f24:	200007d4 	.word	0x200007d4
 8004f28:	20000098 	.word	0x20000098
 8004f2c:	20000064 	.word	0x20000064
 8004f30:	bfe00000 	.word	0xbfe00000
 8004f34:	3a9fffe5 	.word	0x3a9fffe5
 8004f38:	20000fdc 	.word	0x20000fdc
	    	maxPower += ((MC[i])) * M3508Voltage;
 8004f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	33f8      	adds	r3, #248	@ 0xf8
 8004f44:	f107 0218 	add.w	r2, r7, #24
 8004f48:	4413      	add	r3, r2
 8004f4a:	3b90      	subs	r3, #144	@ 0x90
 8004f4c:	ed93 7a00 	vldr	s14, [r3]
 8004f50:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f60:	4bc4      	ldr	r3, [pc, #784]	@ (8005274 <TaskChassis+0xb9c>)
 8004f62:	edd3 7a00 	vldr	s15, [r3]
 8004f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f6a:	4bc2      	ldr	r3, [pc, #776]	@ (8005274 <TaskChassis+0xb9c>)
 8004f6c:	edc3 7a00 	vstr	s15, [r3]
	    	scuffedMaxedPower += MC[i];
 8004f70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	33f8      	adds	r3, #248	@ 0xf8
 8004f78:	f107 0218 	add.w	r2, r7, #24
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3b90      	subs	r3, #144	@ 0x90
 8004f80:	edd3 7a00 	vldr	s15, [r3]
 8004f84:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8004f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f8c:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
	    for (int i = 0; i < 4; i++) {
 8004f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f94:	3301      	adds	r3, #1
 8004f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	ddcc      	ble.n	8004f3c <TaskChassis+0x864>
	    }

	    // usart_printf("%f, %f, %f, %f, %f, %f, %f\r\n", MC[0], MC[1], MC[2], MC[3], scuffedMaxedPower, PowerLimitor*0.04166, JoulesBuffer);


	    PWMOutput(LED, 1, 500);
 8004fa2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f000 fd55 	bl	8005a58 <PWMOutput>
	    PWMOutput(LED, 3, 500);
 8004fae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004fb2:	2103      	movs	r1, #3
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f000 fd4f 	bl	8005a58 <PWMOutput>
	    PWMInitialize(LED, FR, 1, 0.9);
 8004fba:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8005278 <TaskChassis+0xba0>
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	f000 fc30 	bl	8005828 <PWMInitialize>
	    PWMInitialize(LED, FR, 3, 0.9);
 8004fc8:	ed9f 0aab 	vldr	s0, [pc, #684]	@ 8005278 <TaskChassis+0xba0>
 8004fcc:	2203      	movs	r2, #3
 8004fce:	2101      	movs	r1, #1
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f000 fc29 	bl	8005828 <PWMInitialize>
	    if (JoulesBuffer < 1) {
 8004fd6:	4ba9      	ldr	r3, [pc, #676]	@ (800527c <TaskChassis+0xba4>)
 8004fd8:	edd3 7a00 	vldr	s15, [r3]
 8004fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe8:	d502      	bpl.n	8004ff0 <TaskChassis+0x918>
	    	bufferDead = 1;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
	    }
	    if (bufferDead == 1) {
 8004ff0:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d104      	bne.n	8005002 <TaskChassis+0x92a>
	    	PWMOn(LED, 3);
 8004ff8:	2103      	movs	r1, #3
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f000 fd5c 	bl	8005ab8 <PWMOn>
 8005000:	e003      	b.n	800500a <TaskChassis+0x932>
	    } else {
	    	PWMOff(LED, 3);
 8005002:	2103      	movs	r1, #3
 8005004:	2001      	movs	r0, #1
 8005006:	f000 fd83 	bl	8005b10 <PWMOff>


	    // uint32_t notes = CountryRoadsNotes();


		uint32_t notes = NeverGonnaGiveYouUpNotes();
 800500a:	f001 f9b7 	bl	800637c <NeverGonnaGiveYouUpNotes>
 800500e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		PWMOutput(Buzzer, 1, notes);
 8005012:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005016:	2101      	movs	r1, #1
 8005018:	2002      	movs	r0, #2
 800501a:	f000 fd1d 	bl	8005a58 <PWMOutput>
		PWMInitialize(Buzzer, FR, 1, 0.5);
 800501e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8005022:	2201      	movs	r2, #1
 8005024:	2101      	movs	r1, #1
 8005026:	2002      	movs	r0, #2
 8005028:	f000 fbfe 	bl	8005828 <PWMInitialize>
		PWMOn(Buzzer, 1);
 800502c:	2101      	movs	r1, #1
 800502e:	2002      	movs	r0, #2
 8005030:	f000 fd42 	bl	8005ab8 <PWMOn>
	    if (rightSwitch == 3) {
	    	switchForShooter = 0;
	    }
	    */

	    int16_t flywheelSpeed = getMotorRPM(Bus2, M3508, 8);
 8005034:	2208      	movs	r2, #8
 8005036:	2101      	movs	r1, #1
 8005038:	2002      	movs	r0, #2
 800503a:	f7fd fba1 	bl	8002780 <getMotorRPM>
 800503e:	4603      	mov	r3, r0
 8005040:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
	    	motorOn = 1;
	    }
	    */


	    if (((pc_control.right_button_down == 1) || (pc_control.left_button_down == 1)) || (rightSwitch == 3) || (rightSwitch == 1)) {
 8005044:	4b8e      	ldr	r3, [pc, #568]	@ (8005280 <TaskChassis+0xba8>)
 8005046:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d00c      	beq.n	8005068 <TaskChassis+0x990>
 800504e:	4b8c      	ldr	r3, [pc, #560]	@ (8005280 <TaskChassis+0xba8>)
 8005050:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d007      	beq.n	8005068 <TaskChassis+0x990>
 8005058:	f997 30b1 	ldrsb.w	r3, [r7, #177]	@ 0xb1
 800505c:	2b03      	cmp	r3, #3
 800505e:	d003      	beq.n	8005068 <TaskChassis+0x990>
 8005060:	f997 30b1 	ldrsb.w	r3, [r7, #177]	@ 0xb1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d103      	bne.n	8005070 <TaskChassis+0x998>
	    	motorOn = 1;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800506e:	e00a      	b.n	8005086 <TaskChassis+0x9ae>
	    } else if (reverseCounter > 0) {
 8005070:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 8005074:	2b00      	cmp	r3, #0
 8005076:	dd03      	ble.n	8005080 <TaskChassis+0x9a8>
	    	motorOn = -1;
 8005078:	23ff      	movs	r3, #255	@ 0xff
 800507a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800507e:	e002      	b.n	8005086 <TaskChassis+0x9ae>
	    } else {
	    	motorOn = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	    }

		if ((wasShooting == 1) && (pc_control.left_button_down == 0) && (pc_control.right_button_down == 0)) {
 8005086:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 800508a:	2b01      	cmp	r3, #1
 800508c:	d10c      	bne.n	80050a8 <TaskChassis+0x9d0>
 800508e:	4b7c      	ldr	r3, [pc, #496]	@ (8005280 <TaskChassis+0xba8>)
 8005090:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <TaskChassis+0x9d0>
 8005098:	4b79      	ldr	r3, [pc, #484]	@ (8005280 <TaskChassis+0xba8>)
 800509a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <TaskChassis+0x9d0>
			reverseCounter = 5;
 80050a2:	2305      	movs	r3, #5
 80050a4:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
		}

	    if (((pc_control.left_button_down == 1) && (flywheelSpeed > 7000) && (cantShoot == 0)) || (rightSwitch == 1)) {
 80050a8:	4b75      	ldr	r3, [pc, #468]	@ (8005280 <TaskChassis+0xba8>)
 80050aa:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d109      	bne.n	80050c6 <TaskChassis+0x9ee>
 80050b2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 80050b6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80050ba:	4293      	cmp	r3, r2
 80050bc:	dd03      	ble.n	80050c6 <TaskChassis+0x9ee>
 80050be:	f997 30b8 	ldrsb.w	r3, [r7, #184]	@ 0xb8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <TaskChassis+0x9f6>
 80050c6:	f997 30b1 	ldrsb.w	r3, [r7, #177]	@ 0xb1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d161      	bne.n	8005192 <TaskChassis+0xaba>
	    	// setMotorRPM(Bus2, M2006, 6, (100), indexerPreset);
	    	wasShooting = 1;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe

			if (jammed > 0 && indexerStopped == 0) {
 80050d4:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dd1f      	ble.n	800511c <TaskChassis+0xa44>
 80050dc:	f997 310e 	ldrsb.w	r3, [r7, #270]	@ 0x10e
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d11b      	bne.n	800511c <TaskChassis+0xa44>
				setMotorRPM(Bus2, M2006, 6, 15000, indexerPreset);
 80050e4:	4b67      	ldr	r3, [pc, #412]	@ (8005284 <TaskChassis+0xbac>)
 80050e6:	edd3 6a00 	vldr	s13, [r3]
 80050ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80050ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80050f2:	eeb0 0a66 	vmov.f32	s0, s13
 80050f6:	eef0 0a47 	vmov.f32	s1, s14
 80050fa:	eeb0 1a67 	vmov.f32	s2, s15
 80050fe:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8005102:	2206      	movs	r2, #6
 8005104:	2102      	movs	r1, #2
 8005106:	2002      	movs	r0, #2
 8005108:	f7fd fa76 	bl	80025f8 <setMotorRPM>
				jammed--;
 800510c:	f997 310f 	ldrsb.w	r3, [r7, #271]	@ 0x10f
 8005110:	b2db      	uxtb	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b2db      	uxtb	r3, r3
 8005116:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800511a:	e039      	b.n	8005190 <TaskChassis+0xab8>
			} else {
				indexerStopped = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
				setMotorRPM(Bus2, M2006, 6, -270*16, indexerPreset);
 8005122:	4b58      	ldr	r3, [pc, #352]	@ (8005284 <TaskChassis+0xbac>)
 8005124:	edd3 6a00 	vldr	s13, [r3]
 8005128:	ed93 7a01 	vldr	s14, [r3, #4]
 800512c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005130:	eeb0 0a66 	vmov.f32	s0, s13
 8005134:	eef0 0a47 	vmov.f32	s1, s14
 8005138:	eeb0 1a67 	vmov.f32	s2, s15
 800513c:	4b52      	ldr	r3, [pc, #328]	@ (8005288 <TaskChassis+0xbb0>)
 800513e:	2206      	movs	r2, #6
 8005140:	2102      	movs	r1, #2
 8005142:	2002      	movs	r0, #2
 8005144:	f7fd fa58 	bl	80025f8 <setMotorRPM>
				if (indexerTargetReached == 0 && getMotorRPM(Bus2, M2006, 6) <= -10) {
 8005148:	f997 310d 	ldrsb.w	r3, [r7, #269]	@ 0x10d
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10c      	bne.n	800516a <TaskChassis+0xa92>
 8005150:	2206      	movs	r2, #6
 8005152:	2102      	movs	r1, #2
 8005154:	2002      	movs	r0, #2
 8005156:	f7fd fb13 	bl	8002780 <getMotorRPM>
 800515a:	4603      	mov	r3, r0
 800515c:	f113 0f09 	cmn.w	r3, #9
 8005160:	da03      	bge.n	800516a <TaskChassis+0xa92>
					indexerTargetReached = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 8005168:	e012      	b.n	8005190 <TaskChassis+0xab8>
				} else if (getMotorRPM(Bus2, M2006, 6) > -1 && indexerTargetReached == 1) {         // jammed
 800516a:	2206      	movs	r2, #6
 800516c:	2102      	movs	r1, #2
 800516e:	2002      	movs	r0, #2
 8005170:	f7fd fb06 	bl	8002780 <getMotorRPM>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	db28      	blt.n	80051cc <TaskChassis+0xaf4>
 800517a:	f997 310d 	ldrsb.w	r3, [r7, #269]	@ 0x10d
 800517e:	2b01      	cmp	r3, #1
 8005180:	d124      	bne.n	80051cc <TaskChassis+0xaf4>
					jammed = 12;
 8005182:	230c      	movs	r3, #12
 8005184:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
					indexerTargetReached = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
			if (jammed > 0 && indexerStopped == 0) {
 800518e:	e01d      	b.n	80051cc <TaskChassis+0xaf4>
 8005190:	e01c      	b.n	80051cc <TaskChassis+0xaf4>
				}
			}
	    } else {
	    	wasShooting = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
			indexerStopped = 1;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
			indexerTargetReached = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	    	setMotorRPM(Bus2, M2006, 6, 0, indexerPreset);
 80051a4:	4b37      	ldr	r3, [pc, #220]	@ (8005284 <TaskChassis+0xbac>)
 80051a6:	edd3 6a00 	vldr	s13, [r3]
 80051aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80051ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80051b2:	eeb0 0a66 	vmov.f32	s0, s13
 80051b6:	eef0 0a47 	vmov.f32	s1, s14
 80051ba:	eeb0 1a67 	vmov.f32	s2, s15
 80051be:	2300      	movs	r3, #0
 80051c0:	2206      	movs	r2, #6
 80051c2:	2102      	movs	r1, #2
 80051c4:	2002      	movs	r0, #2
 80051c6:	f7fd fa17 	bl	80025f8 <setMotorRPM>
 80051ca:	e000      	b.n	80051ce <TaskChassis+0xaf6>
			if (jammed > 0 && indexerStopped == 0) {
 80051cc:	bf00      	nop
	    }
	    if (reverseCounter > 0) {
 80051ce:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dd06      	ble.n	80051e4 <TaskChassis+0xb0c>
	    	reverseCounter--;
 80051d6:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
	    	setMotorRPM(Bus2, M2006, 6, 0, indexerPreset);
	    }
	    */

	    // PWMOff(Buzzer, 1);
		setMotorRPM(Bus2, M3508, 7, -8000*motorOn, flywheel);
 80051e4:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	00d2      	lsls	r2, r2, #3
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	0092      	lsls	r2, r2, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	461a      	mov	r2, r3
 80051f6:	0152      	lsls	r2, r2, #5
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	019b      	lsls	r3, r3, #6
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	b21a      	sxth	r2, r3
 8005200:	4b22      	ldr	r3, [pc, #136]	@ (800528c <TaskChassis+0xbb4>)
 8005202:	edd3 6a00 	vldr	s13, [r3]
 8005206:	ed93 7a01 	vldr	s14, [r3, #4]
 800520a:	edd3 7a02 	vldr	s15, [r3, #8]
 800520e:	eeb0 0a66 	vmov.f32	s0, s13
 8005212:	eef0 0a47 	vmov.f32	s1, s14
 8005216:	eeb0 1a67 	vmov.f32	s2, s15
 800521a:	4613      	mov	r3, r2
 800521c:	2207      	movs	r2, #7
 800521e:	2101      	movs	r1, #1
 8005220:	2002      	movs	r0, #2
 8005222:	f7fd f9e9 	bl	80025f8 <setMotorRPM>
		setMotorRPM(Bus2, M3508, 8, 8000*motorOn, flywheel);
 8005226:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 800522a:	b29b      	uxth	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	0152      	lsls	r2, r2, #5
 8005230:	1ad2      	subs	r2, r2, r3
 8005232:	0092      	lsls	r2, r2, #2
 8005234:	4413      	add	r3, r2
 8005236:	019b      	lsls	r3, r3, #6
 8005238:	b29b      	uxth	r3, r3
 800523a:	b21a      	sxth	r2, r3
 800523c:	4b13      	ldr	r3, [pc, #76]	@ (800528c <TaskChassis+0xbb4>)
 800523e:	edd3 6a00 	vldr	s13, [r3]
 8005242:	ed93 7a01 	vldr	s14, [r3, #4]
 8005246:	edd3 7a02 	vldr	s15, [r3, #8]
 800524a:	eeb0 0a66 	vmov.f32	s0, s13
 800524e:	eef0 0a47 	vmov.f32	s1, s14
 8005252:	eeb0 1a67 	vmov.f32	s2, s15
 8005256:	4613      	mov	r3, r2
 8005258:	2208      	movs	r2, #8
 800525a:	2101      	movs	r1, #1
 800525c:	2002      	movs	r0, #2
 800525e:	f7fd f9cb 	bl	80025f8 <setMotorRPM>
			indexerStopped = 1;
			indexerTargetReached = 0;
		}
		*/
		// usart_printf("%f\r\n", JoulesBuffer);
		PWMTimerStarter();
 8005262:	f000 fc81 	bl	8005b68 <PWMTimerStarter>
		RCkeysRefresh();
 8005266:	f000 ff77 	bl	8006158 <RCkeysRefresh>
        osDelay(10);
 800526a:	200a      	movs	r0, #10
 800526c:	f008 f8a0 	bl	800d3b0 <osDelay>
    for(;;) {
 8005270:	f7ff bad6 	b.w	8004820 <TaskChassis+0x148>
 8005274:	20000fdc 	.word	0x20000fdc
 8005278:	3f666666 	.word	0x3f666666
 800527c:	20000094 	.word	0x20000094
 8005280:	200007d4 	.word	0x200007d4
 8005284:	2000007c 	.word	0x2000007c
 8005288:	ffffef20 	.word	0xffffef20
 800528c:	20000088 	.word	0x20000088

08005290 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8005298:	2005      	movs	r0, #5
 800529a:	f008 f889 	bl	800d3b0 <osDelay>
 800529e:	e7fb      	b.n	8005298 <TaskTurret+0x8>

080052a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052a4:	b672      	cpsid	i
}
 80052a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <Error_Handler+0x8>

080052ac <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6178      	str	r0, [r7, #20]
 80052b4:	460b      	mov	r3, r1
 80052b6:	60fa      	str	r2, [r7, #12]
 80052b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80052bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80052c0:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d042      	beq.n	800534e <PID_init+0xa2>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d03f      	beq.n	800534e <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	7cfa      	ldrb	r2, [r7, #19]
 80052d2:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3304      	adds	r3, #4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3308      	adds	r3, #8
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	635a      	str	r2, [r3, #52]	@ 0x34
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	621a      	str	r2, [r3, #32]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	629a      	str	r2, [r3, #40]	@ 0x28
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	625a      	str	r2, [r3, #36]	@ 0x24
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	645a      	str	r2, [r3, #68]	@ 0x44
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800534c:	e000      	b.n	8005350 <PID_init+0xa4>
        return;
 800534e:	bf00      	nop
}
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	ed87 0a02 	vstr	s0, [r7, #8]
 8005366:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <PID_calc+0x1c>
    {
        return 0.0f;
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	e130      	b.n	80055d8 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005392:	ed97 7a01 	vldr	s14, [r7, #4]
 8005396:	edd7 7a02 	vldr	s15, [r7, #8]
 800539a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 8095 	bne.w	80054d8 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80053d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	edd3 7a05 	vldr	s15, [r3, #20]
 800542c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005434:	dd04      	ble.n	8005440 <PID_calc+0xe6>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	629a      	str	r2, [r3, #40]	@ 0x28
 800543e:	e014      	b.n	800546a <PID_calc+0x110>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	edd3 7a05 	vldr	s15, [r3, #20]
 800544c:	eef1 7a67 	vneg.f32	s15, s15
 8005450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005458:	d507      	bpl.n	800546a <PID_calc+0x110>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005460:	eef1 7a67 	vneg.f32	s15, s15
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	edd3 7a04 	vldr	s15, [r3, #16]
 8005496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800549a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800549e:	dd04      	ble.n	80054aa <PID_calc+0x150>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	621a      	str	r2, [r3, #32]
 80054a8:	e094      	b.n	80055d4 <PID_calc+0x27a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80054b6:	eef1 7a67 	vneg.f32	s15, s15
 80054ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	f140 8087 	bpl.w	80055d4 <PID_calc+0x27a>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80054cc:	eef1 7a67 	vneg.f32	s15, s15
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	edc3 7a08 	vstr	s15, [r3, #32]
 80054d6:	e07d      	b.n	80055d4 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d179      	bne.n	80055d4 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80054f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	ed93 7a02 	vldr	s14, [r3, #8]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800550c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005532:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005536:	ee37 7a67 	vsub.f32	s14, s14, s15
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	ed93 7a08 	vldr	s14, [r3, #32]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005572:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800557c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	edd3 7a04 	vldr	s15, [r3, #16]
 8005596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559e:	dd04      	ble.n	80055aa <PID_calc+0x250>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	621a      	str	r2, [r3, #32]
 80055a8:	e014      	b.n	80055d4 <PID_calc+0x27a>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80055b6:	eef1 7a67 	vneg.f32	s15, s15
 80055ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c2:	d507      	bpl.n	80055d4 <PID_calc+0x27a>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80055ca:	eef1 7a67 	vneg.f32	s15, s15
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
}
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eeb0 0a67 	vmov.f32	s0, s15
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 80055fa:	4a12      	ldr	r2, [pc, #72]	@ (8005644 <PWMInit+0x58>)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8005600:	4a11      	ldr	r2, [pc, #68]	@ (8005648 <PWMInit+0x5c>)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8005606:	4a11      	ldr	r2, [pc, #68]	@ (800564c <PWMInit+0x60>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 800560c:	4a10      	ldr	r2, [pc, #64]	@ (8005650 <PWMInit+0x64>)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8005612:	4b0c      	ldr	r3, [pc, #48]	@ (8005644 <PWMInit+0x58>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f005 fc46 	bl	800aea8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 800561c:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <PWMInit+0x5c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f005 fc41 	bl	800aea8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8005626:	4b09      	ldr	r3, [pc, #36]	@ (800564c <PWMInit+0x60>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f005 fc3c 	bl	800aea8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8005630:	4b07      	ldr	r3, [pc, #28]	@ (8005650 <PWMInit+0x64>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f005 fc37 	bl	800aea8 <HAL_TIM_Base_Start>
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000fe0 	.word	0x20000fe0
 8005648:	20000fe4 	.word	0x20000fe4
 800564c:	20000fe8 	.word	0x20000fe8
 8005650:	20000fec 	.word	0x20000fec

08005654 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d02c      	beq.n	80056c4 <calculateOutputPeriodToGetFrequency+0x70>
 800566a:	2b02      	cmp	r3, #2
 800566c:	dc3d      	bgt.n	80056ea <calculateOutputPeriodToGetFrequency+0x96>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <calculateOutputPeriodToGetFrequency+0x24>
 8005672:	2b01      	cmp	r3, #1
 8005674:	d013      	beq.n	800569e <calculateOutputPeriodToGetFrequency+0x4a>
 8005676:	e038      	b.n	80056ea <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80056f8 <calculateOutputPeriodToGetFrequency+0xa4>
 8005686:	ee27 7a87 	vmul.f32	s14, s15, s14
 800568a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005696:	ee17 3a90 	vmov	r3, s15
 800569a:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 800569c:	e025      	b.n	80056ea <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80056fc <calculateOutputPeriodToGetFrequency+0xa8>
 80056ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056bc:	ee17 3a90 	vmov	r3, s15
 80056c0:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80056c2:	e012      	b.n	80056ea <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80056fc <calculateOutputPeriodToGetFrequency+0xa8>
 80056d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e2:	ee17 3a90 	vmov	r3, s15
 80056e6:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80056e8:	bf00      	nop
	}

	return finalVal;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	360637bd 	.word	0x360637bd
 80056fc:	358637bd 	.word	0x358637bd

08005700 <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005716:	edd7 7a00 	vldr	s15, [r7]
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005722:	ee17 3a90 	vmov	r3, s15
 8005726:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d902      	bls.n	8005736 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e004      	b.n	8005740 <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 800573c:	2301      	movs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 8005740:	68fb      	ldr	r3, [r7, #12]

}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	ed87 0a00 	vstr	s0, [r7]
 800575c:	71fb      	strb	r3, [r7, #7]
 800575e:	460b      	mov	r3, r1
 8005760:	71bb      	strb	r3, [r7, #6]
 8005762:	4613      	mov	r3, r2
 8005764:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d03c      	beq.n	80057ea <calculateOutputPeriodValue+0x9a>
 8005770:	2b02      	cmp	r3, #2
 8005772:	dc51      	bgt.n	8005818 <calculateOutputPeriodValue+0xc8>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <calculateOutputPeriodValue+0x2e>
 8005778:	2b01      	cmp	r3, #1
 800577a:	d01b      	beq.n	80057b4 <calculateOutputPeriodValue+0x64>
 800577c:	e04c      	b.n	8005818 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 800577e:	79bb      	ldrb	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8005784:	edd7 7a00 	vldr	s15, [r7]
 8005788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578c:	ee17 2a90 	vmov	r2, s15
 8005790:	2302      	movs	r3, #2
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8005798:	e03e      	b.n	8005818 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 800579a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800579e:	3b01      	subs	r3, #1
 80057a0:	4a20      	ldr	r2, [pc, #128]	@ (8005824 <calculateOutputPeriodValue+0xd4>)
 80057a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a6:	ed97 0a00 	vldr	s0, [r7]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff ffa8 	bl	8005700 <safeOutputPeriodValueCalculator>
 80057b0:	60f8      	str	r0, [r7, #12]
			break;
 80057b2:	e031      	b.n	8005818 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 80057b4:	79bb      	ldrb	r3, [r7, #6]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 80057ba:	edd7 7a00 	vldr	s15, [r7]
 80057be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c2:	ee17 2a90 	vmov	r2, s15
 80057c6:	2301      	movs	r3, #1
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 80057ce:	e023      	b.n	8005818 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 80057d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80057d4:	3306      	adds	r3, #6
 80057d6:	4a13      	ldr	r2, [pc, #76]	@ (8005824 <calculateOutputPeriodValue+0xd4>)
 80057d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057dc:	ed97 0a00 	vldr	s0, [r7]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff ff8d 	bl	8005700 <safeOutputPeriodValueCalculator>
 80057e6:	60f8      	str	r0, [r7, #12]
			break;
 80057e8:	e016      	b.n	8005818 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 80057ea:	79bb      	ldrb	r3, [r7, #6]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 80057f0:	edd7 7a00 	vldr	s15, [r7]
 80057f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057f8:	ee17 2a90 	vmov	r2, s15
 80057fc:	2301      	movs	r3, #1
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8005804:	e007      	b.n	8005816 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8005806:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <calculateOutputPeriodValue+0xd4>)
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	ed97 0a00 	vldr	s0, [r7]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff ff76 	bl	8005700 <safeOutputPeriodValueCalculator>
 8005814:	60f8      	str	r0, [r7, #12]
			break;
 8005816:	bf00      	nop
		default:
	}
	return returnVal;
 8005818:	68fb      	ldr	r3, [r7, #12]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20001028 	.word	0x20001028

08005828 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	ed87 0a00 	vstr	s0, [r7]
 8005834:	71fb      	strb	r3, [r7, #7]
 8005836:	460b      	mov	r3, r1
 8005838:	71bb      	strb	r3, [r7, #6]
 800583a:	4613      	mov	r3, r2
 800583c:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 800583e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8005842:	79b9      	ldrb	r1, [r7, #6]
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	ed97 0a00 	vldr	s0, [r7]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff ff80 	bl	8005750 <calculateOutputPeriodValue>
 8005850:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d076      	beq.n	8005946 <PWMInitialize+0x11e>
 8005858:	2b02      	cmp	r3, #2
 800585a:	dc7e      	bgt.n	800595a <PWMInitialize+0x132>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <PWMInitialize+0x3e>
 8005860:	2b01      	cmp	r3, #1
 8005862:	d04a      	beq.n	80058fa <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 8005864:	e079      	b.n	800595a <PWMInitialize+0x132>
		switch (position) {
 8005866:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800586a:	3b01      	subs	r3, #1
 800586c:	2b06      	cmp	r3, #6
 800586e:	d83b      	bhi.n	80058e8 <PWMInitialize+0xc0>
 8005870:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <PWMInitialize+0x50>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005895 	.word	0x08005895
 800587c:	080058a1 	.word	0x080058a1
 8005880:	080058ad 	.word	0x080058ad
 8005884:	080058b9 	.word	0x080058b9
 8005888:	080058c5 	.word	0x080058c5
 800588c:	080058d1 	.word	0x080058d1
 8005890:	080058dd 	.word	0x080058dd
			(*tim1).Instance->CCR1=value;
 8005894:	4b33      	ldr	r3, [pc, #204]	@ (8005964 <PWMInitialize+0x13c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800589e:	e024      	b.n	80058ea <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 80058a0:	4b30      	ldr	r3, [pc, #192]	@ (8005964 <PWMInitialize+0x13c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80058aa:	e01e      	b.n	80058ea <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 80058ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005964 <PWMInitialize+0x13c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80058b6:	e018      	b.n	80058ea <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 80058b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005964 <PWMInitialize+0x13c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80058c2:	e012      	b.n	80058ea <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 80058c4:	4b28      	ldr	r3, [pc, #160]	@ (8005968 <PWMInitialize+0x140>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80058ce:	e00c      	b.n	80058ea <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 80058d0:	4b25      	ldr	r3, [pc, #148]	@ (8005968 <PWMInitialize+0x140>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80058da:	e006      	b.n	80058ea <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 80058dc:	4b22      	ldr	r3, [pc, #136]	@ (8005968 <PWMInitialize+0x140>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80058e6:	e000      	b.n	80058ea <PWMInitialize+0xc2>
			break;
 80058e8:	bf00      	nop
		subPeriod[position-1] = value;
 80058ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	491e      	ldr	r1, [pc, #120]	@ (800596c <PWMInitialize+0x144>)
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80058f8:	e02e      	b.n	8005958 <PWMInitialize+0x130>
		switch (position) {
 80058fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d012      	beq.n	8005928 <PWMInitialize+0x100>
 8005902:	2b03      	cmp	r3, #3
 8005904:	dc16      	bgt.n	8005934 <PWMInitialize+0x10c>
 8005906:	2b01      	cmp	r3, #1
 8005908:	d002      	beq.n	8005910 <PWMInitialize+0xe8>
 800590a:	2b02      	cmp	r3, #2
 800590c:	d006      	beq.n	800591c <PWMInitialize+0xf4>
			break;
 800590e:	e011      	b.n	8005934 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8005910:	4b17      	ldr	r3, [pc, #92]	@ (8005970 <PWMInitialize+0x148>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800591a:	e00c      	b.n	8005936 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 800591c:	4b14      	ldr	r3, [pc, #80]	@ (8005970 <PWMInitialize+0x148>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8005926:	e006      	b.n	8005936 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8005928:	4b11      	ldr	r3, [pc, #68]	@ (8005970 <PWMInitialize+0x148>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8005932:	e000      	b.n	8005936 <PWMInitialize+0x10e>
			break;
 8005934:	bf00      	nop
		subPeriod[position+6] = value;
 8005936:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800593a:	3306      	adds	r3, #6
 800593c:	490b      	ldr	r1, [pc, #44]	@ (800596c <PWMInitialize+0x144>)
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8005944:	e008      	b.n	8005958 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <PWMInitialize+0x14c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8005950:	4a06      	ldr	r2, [pc, #24]	@ (800596c <PWMInitialize+0x144>)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8005956:	bf00      	nop
	return;
 8005958:	bf00      	nop
 800595a:	bf00      	nop
}
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	20000fe0 	.word	0x20000fe0
 8005968:	20000fec 	.word	0x20000fec
 800596c:	20000ffc 	.word	0x20000ffc
 8005970:	20000fe8 	.word	0x20000fe8
 8005974:	20000fe4 	.word	0x20000fe4

08005978 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	6039      	str	r1, [r7, #0]
 8005982:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8005984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005988:	2b04      	cmp	r3, #4
 800598a:	dc0c      	bgt.n	80059a6 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 800598c:	4b0f      	ldr	r3, [pc, #60]	@ (80059cc <MotorPositionForInitializingPeriod+0x54>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8005996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599a:	3b01      	subs	r3, #1
 800599c:	490c      	ldr	r1, [pc, #48]	@ (80059d0 <MotorPositionForInitializingPeriod+0x58>)
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 80059a4:	e00b      	b.n	80059be <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 80059a6:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <MotorPositionForInitializingPeriod+0x5c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 80059b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	4906      	ldr	r1, [pc, #24]	@ (80059d0 <MotorPositionForInitializingPeriod+0x58>)
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000fe0 	.word	0x20000fe0
 80059d0:	20001028 	.word	0x20001028
 80059d4:	20000fec 	.word	0x20000fec

080059d8 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	603a      	str	r2, [r7, #0]
 80059e2:	71fb      	strb	r3, [r7, #7]
 80059e4:	460b      	mov	r3, r1
 80059e6:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fe31 	bl	8005654 <calculateOutputPeriodToGetFrequency>
 80059f2:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d01a      	beq.n	8005a30 <initializePeriod+0x58>
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	dc22      	bgt.n	8005a44 <initializePeriod+0x6c>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <initializePeriod+0x30>
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d007      	beq.n	8005a16 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 8005a06:	e01d      	b.n	8005a44 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8005a08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a0c:	68f9      	ldr	r1, [r7, #12]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff ffb2 	bl	8005978 <MotorPositionForInitializingPeriod>
		break;
 8005a14:	e015      	b.n	8005a42 <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 8005a16:	4b0d      	ldr	r3, [pc, #52]	@ (8005a4c <initializePeriod+0x74>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 8005a20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a24:	3306      	adds	r3, #6
 8005a26:	490a      	ldr	r1, [pc, #40]	@ (8005a50 <initializePeriod+0x78>)
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8005a2e:	e008      	b.n	8005a42 <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 8005a30:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <initializePeriod+0x7c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 8005a3a:	4a05      	ldr	r2, [pc, #20]	@ (8005a50 <initializePeriod+0x78>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8005a40:	bf00      	nop
	return;
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
}
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000fe8 	.word	0x20000fe8
 8005a50:	20001028 	.word	0x20001028
 8005a54:	20000fe4 	.word	0x20000fe4

08005a58 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	603a      	str	r2, [r7, #0]
 8005a62:	71fb      	strb	r3, [r7, #7]
 8005a64:	460b      	mov	r3, r1
 8005a66:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8005a68:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ffb1 	bl	80059d8 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d014      	beq.n	8005aa6 <PWMOutput+0x4e>
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	dc16      	bgt.n	8005aae <PWMOutput+0x56>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <PWMOutput+0x32>
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d007      	beq.n	8005a98 <PWMOutput+0x40>
 8005a88:	e011      	b.n	8005aae <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8005a8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	4a08      	ldr	r2, [pc, #32]	@ (8005ab4 <PWMOutput+0x5c>)
 8005a92:	2101      	movs	r1, #1
 8005a94:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005a96:	e00a      	b.n	8005aae <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8005a98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a9c:	3306      	adds	r3, #6
 8005a9e:	4a05      	ldr	r2, [pc, #20]	@ (8005ab4 <PWMOutput+0x5c>)
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005aa4:	e003      	b.n	8005aae <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8005aa6:	4b03      	ldr	r3, [pc, #12]	@ (8005ab4 <PWMOutput+0x5c>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8005aac:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000ff0 	.word	0x20000ff0

08005ab8 <PWMOn>:

void PWMOn(TypesThatUsePWM_t Type, int8_t Position) {
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	71fb      	strb	r3, [r7, #7]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d014      	beq.n	8005af8 <PWMOn+0x40>
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	dc16      	bgt.n	8005b00 <PWMOn+0x48>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <PWMOn+0x24>
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d007      	beq.n	8005aea <PWMOn+0x32>
 8005ada:	e011      	b.n	8005b00 <PWMOn+0x48>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8005adc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8005b0c <PWMOn+0x54>)
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005ae8:	e00a      	b.n	8005b00 <PWMOn+0x48>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8005aea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005aee:	3306      	adds	r3, #6
 8005af0:	4a06      	ldr	r2, [pc, #24]	@ (8005b0c <PWMOn+0x54>)
 8005af2:	2101      	movs	r1, #1
 8005af4:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005af6:	e003      	b.n	8005b00 <PWMOn+0x48>
	case 2:
		whichPWMisOn[10] = 1;
 8005af8:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <PWMOn+0x54>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8005afe:	bf00      	nop
	}
}
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000ff0 	.word	0x20000ff0

08005b10 <PWMOff>:

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	460a      	mov	r2, r1
 8005b1a:	71fb      	strb	r3, [r7, #7]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d014      	beq.n	8005b50 <PWMOff+0x40>
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	dc16      	bgt.n	8005b58 <PWMOff+0x48>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <PWMOff+0x24>
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d007      	beq.n	8005b42 <PWMOff+0x32>
 8005b32:	e011      	b.n	8005b58 <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 8005b34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b64 <PWMOff+0x54>)
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005b40:	e00a      	b.n	8005b58 <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 8005b42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b46:	3306      	adds	r3, #6
 8005b48:	4a06      	ldr	r2, [pc, #24]	@ (8005b64 <PWMOff+0x54>)
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005b4e:	e003      	b.n	8005b58 <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <PWMOff+0x54>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8005b56:	bf00      	nop
	}
}
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000ff0 	.word	0x20000ff0

08005b68 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8005b6e:	2300      	movs	r3, #0
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	e0f1      	b.n	8005d58 <PWMTimerStarter+0x1f0>
		switch (i) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b0a      	cmp	r3, #10
 8005b78:	f200 80eb 	bhi.w	8005d52 <PWMTimerStarter+0x1ea>
 8005b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b84 <PWMTimerStarter+0x1c>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	08005bd7 	.word	0x08005bd7
 8005b8c:	08005bfd 	.word	0x08005bfd
 8005b90:	08005c23 	.word	0x08005c23
 8005b94:	08005c49 	.word	0x08005c49
 8005b98:	08005c6f 	.word	0x08005c6f
 8005b9c:	08005c95 	.word	0x08005c95
 8005ba0:	08005cbb 	.word	0x08005cbb
 8005ba4:	08005ce1 	.word	0x08005ce1
 8005ba8:	08005d07 	.word	0x08005d07
 8005bac:	08005d2d 	.word	0x08005d2d
		case 0:
			if (whichPWMisOn[0] == 1) {
 8005bb0:	4b6e      	ldr	r3, [pc, #440]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d106      	bne.n	8005bc8 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8005bba:	4b6d      	ldr	r3, [pc, #436]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f005 fa29 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8005bc6:	e0c4      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8005bc8:	4b69      	ldr	r3, [pc, #420]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f005 faea 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005bd4:	e0bd      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8005bd6:	4b65      	ldr	r3, [pc, #404]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005bd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d106      	bne.n	8005bee <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8005be0:	4b63      	ldr	r3, [pc, #396]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2104      	movs	r1, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f005 fa16 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8005bec:	e0b1      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8005bee:	4b60      	ldr	r3, [pc, #384]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2104      	movs	r1, #4
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f005 fad7 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005bfa:	e0aa      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8005bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005bfe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d106      	bne.n	8005c14 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8005c06:	4b5a      	ldr	r3, [pc, #360]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2108      	movs	r1, #8
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f005 fa03 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8005c12:	e09e      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8005c14:	4b56      	ldr	r3, [pc, #344]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2108      	movs	r1, #8
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f005 fac4 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005c20:	e097      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8005c22:	4b52      	ldr	r3, [pc, #328]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005c24:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d106      	bne.n	8005c3a <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8005c2c:	4b50      	ldr	r3, [pc, #320]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	210c      	movs	r1, #12
 8005c32:	4618      	mov	r0, r3
 8005c34:	f005 f9f0 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8005c38:	e08b      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8005c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d70 <PWMTimerStarter+0x208>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	210c      	movs	r1, #12
 8005c40:	4618      	mov	r0, r3
 8005c42:	f005 fab1 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005c46:	e084      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8005c48:	4b48      	ldr	r3, [pc, #288]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005c4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d106      	bne.n	8005c60 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8005c52:	4b48      	ldr	r3, [pc, #288]	@ (8005d74 <PWMTimerStarter+0x20c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f005 f9dd 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8005c5e:	e078      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8005c60:	4b44      	ldr	r3, [pc, #272]	@ (8005d74 <PWMTimerStarter+0x20c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f005 fa9e 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005c6c:	e071      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005c70:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d106      	bne.n	8005c86 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8005c78:	4b3e      	ldr	r3, [pc, #248]	@ (8005d74 <PWMTimerStarter+0x20c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f005 f9ca 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8005c84:	e065      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8005c86:	4b3b      	ldr	r3, [pc, #236]	@ (8005d74 <PWMTimerStarter+0x20c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2104      	movs	r1, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f005 fa8b 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005c92:	e05e      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8005c94:	4b35      	ldr	r3, [pc, #212]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005c96:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d106      	bne.n	8005cac <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8005c9e:	4b35      	ldr	r3, [pc, #212]	@ (8005d74 <PWMTimerStarter+0x20c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2108      	movs	r1, #8
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f005 f9b7 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8005caa:	e052      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8005cac:	4b31      	ldr	r3, [pc, #196]	@ (8005d74 <PWMTimerStarter+0x20c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2108      	movs	r1, #8
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f005 fa78 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005cb8:	e04b      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8005cba:	4b2c      	ldr	r3, [pc, #176]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005cbc:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d106      	bne.n	8005cd2 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8005cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005d78 <PWMTimerStarter+0x210>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f005 f9a4 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8005cd0:	e03f      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8005cd2:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <PWMTimerStarter+0x210>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f005 fa65 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005cde:	e038      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8005ce0:	4b22      	ldr	r3, [pc, #136]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005ce2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d106      	bne.n	8005cf8 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8005cea:	4b23      	ldr	r3, [pc, #140]	@ (8005d78 <PWMTimerStarter+0x210>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2104      	movs	r1, #4
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f005 f991 	bl	800b018 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8005cf6:	e02c      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8005cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d78 <PWMTimerStarter+0x210>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f005 fa52 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005d04:	e025      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8005d06:	4b19      	ldr	r3, [pc, #100]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005d08:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d106      	bne.n	8005d1e <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8005d10:	4b19      	ldr	r3, [pc, #100]	@ (8005d78 <PWMTimerStarter+0x210>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2108      	movs	r1, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f005 f97e 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8005d1c:	e019      	b.n	8005d52 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8005d1e:	4b16      	ldr	r3, [pc, #88]	@ (8005d78 <PWMTimerStarter+0x210>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2108      	movs	r1, #8
 8005d24:	4618      	mov	r0, r3
 8005d26:	f005 fa3f 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005d2a:	e012      	b.n	8005d52 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d6c <PWMTimerStarter+0x204>)
 8005d2e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d106      	bne.n	8005d44 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8005d36:	4b11      	ldr	r3, [pc, #68]	@ (8005d7c <PWMTimerStarter+0x214>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2108      	movs	r1, #8
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f005 f96b 	bl	800b018 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8005d42:	e005      	b.n	8005d50 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8005d44:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <PWMTimerStarter+0x214>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2108      	movs	r1, #8
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f005 fa2c 	bl	800b1a8 <HAL_TIM_PWM_Stop>
			break;
 8005d50:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3301      	adds	r3, #1
 8005d56:	607b      	str	r3, [r7, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b0a      	cmp	r3, #10
 8005d5c:	f77f af0a 	ble.w	8005b74 <PWMTimerStarter+0xc>
		}
	}
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000ff0 	.word	0x20000ff0
 8005d70:	20000fe0 	.word	0x20000fe0
 8005d74:	20000fec 	.word	0x20000fec
 8005d78:	20000fe8 	.word	0x20000fe8
 8005d7c:	20000fe4 	.word	0x20000fe4

08005d80 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8005d84:	2224      	movs	r2, #36	@ 0x24
 8005d86:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <remote_control_init+0x14>)
 8005d88:	4803      	ldr	r0, [pc, #12]	@ (8005d98 <remote_control_init+0x18>)
 8005d8a:	f7fc fe31 	bl	80029f0 <RC_init>
}
 8005d8e:	bf00      	nop
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20001090 	.word	0x20001090
 8005d98:	2000106c 	.word	0x2000106c

08005d9c <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8005da0:	4b02      	ldr	r3, [pc, #8]	@ (8005dac <get_remote_control_point+0x10>)
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20001054 	.word	0x20001054

08005db0 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8005db6:	4b44      	ldr	r3, [pc, #272]	@ (8005ec8 <USART3_IRQHandler+0x118>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ec8 <USART3_IRQHandler+0x118>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec8 <USART3_IRQHandler+0x118>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8005dda:	e070      	b.n	8005ebe <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ecc <USART3_IRQHandler+0x11c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d06a      	beq.n	8005ebe <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005de8:	2300      	movs	r3, #0
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4b36      	ldr	r3, [pc, #216]	@ (8005ec8 <USART3_IRQHandler+0x118>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4b34      	ldr	r3, [pc, #208]	@ (8005ec8 <USART3_IRQHandler+0x118>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8005dfe:	4b34      	ldr	r3, [pc, #208]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d12d      	bne.n	8005e68 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8005e0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8005e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed4 <USART3_IRQHandler+0x124>)
 8005e2c:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8005e2e:	4b28      	ldr	r3, [pc, #160]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2224      	movs	r2, #36	@ 0x24
 8005e34:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8005e36:	4b26      	ldr	r3, [pc, #152]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b24      	ldr	r3, [pc, #144]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8005e44:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8005e46:	4b22      	ldr	r3, [pc, #136]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b20      	ldr	r3, [pc, #128]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8005e56:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed4 <USART3_IRQHandler+0x124>)
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	2b12      	cmp	r3, #18
 8005e5c:	d12f      	bne.n	8005ebe <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8005e5e:	491e      	ldr	r1, [pc, #120]	@ (8005ed8 <USART3_IRQHandler+0x128>)
 8005e60:	481e      	ldr	r0, [pc, #120]	@ (8005edc <USART3_IRQHandler+0x12c>)
 8005e62:	f000 f841 	bl	8005ee8 <sbus_to_rc>
}
 8005e66:	e02a      	b.n	8005ebe <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8005e68:	4b19      	ldr	r3, [pc, #100]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b18      	ldr	r3, [pc, #96]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8005e78:	4b15      	ldr	r3, [pc, #84]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	4b13      	ldr	r3, [pc, #76]	@ (8005ed4 <USART3_IRQHandler+0x124>)
 8005e88:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8005e8a:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2224      	movs	r2, #36	@ 0x24
 8005e90:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8005e92:	4b13      	ldr	r3, [pc, #76]	@ (8005ee0 <USART3_IRQHandler+0x130>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a12      	ldr	r2, [pc, #72]	@ (8005ee0 <USART3_IRQHandler+0x130>)
 8005e98:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005e9c:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <USART3_IRQHandler+0x120>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8005eae:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <USART3_IRQHandler+0x124>)
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	2b12      	cmp	r3, #18
 8005eb4:	d103      	bne.n	8005ebe <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8005eb6:	4908      	ldr	r1, [pc, #32]	@ (8005ed8 <USART3_IRQHandler+0x128>)
 8005eb8:	480a      	ldr	r0, [pc, #40]	@ (8005ee4 <USART3_IRQHandler+0x134>)
 8005eba:	f000 f815 	bl	8005ee8 <sbus_to_rc>
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000d58 	.word	0x20000d58
 8005ecc:	40004800 	.word	0x40004800
 8005ed0:	20000ea8 	.word	0x20000ea8
 8005ed4:	200010b4 	.word	0x200010b4
 8005ed8:	20001054 	.word	0x20001054
 8005edc:	2000106c 	.word	0x2000106c
 8005ee0:	40026028 	.word	0x40026028
 8005ee4:	20001090 	.word	0x20001090

08005ee8 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8101 	beq.w	80060fc <sbus_to_rc+0x214>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80fd 	beq.w	80060fc <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	b21a      	sxth	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	b21b      	sxth	r3, r3
 8005f16:	4313      	orrs	r3, r2
 8005f18:	b21b      	sxth	r3, r3
 8005f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f1e:	b21a      	sxth	r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3301      	adds	r3, #1
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	08db      	lsrs	r3, r3, #3
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	b21a      	sxth	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3302      	adds	r3, #2
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	015b      	lsls	r3, r3, #5
 8005f3c:	b21b      	sxth	r3, r3
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b21b      	sxth	r3, r3
 8005f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f46:	b21a      	sxth	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3302      	adds	r3, #2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	099b      	lsrs	r3, r3, #6
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	b21a      	sxth	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3303      	adds	r3, #3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	b21b      	sxth	r3, r3
 8005f66:	4313      	orrs	r3, r2
 8005f68:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005f74:	b21b      	sxth	r3, r3
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8005f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f7e:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3304      	adds	r3, #4
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	b21a      	sxth	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3305      	adds	r3, #5
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	01db      	lsls	r3, r3, #7
 8005f9c:	b21b      	sxth	r3, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b21b      	sxth	r3, r3
 8005fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa6:	b21a      	sxth	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3305      	adds	r3, #5
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3305      	adds	r3, #5
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	109b      	asrs	r3, r3, #2
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3306      	adds	r3, #6
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	b21a      	sxth	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3307      	adds	r3, #7
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	b21b      	sxth	r3, r3
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	b21a      	sxth	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	b21a      	sxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3309      	adds	r3, #9
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	b21b      	sxth	r3, r3
 8006010:	4313      	orrs	r3, r2
 8006012:	b21a      	sxth	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	330a      	adds	r3, #10
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	b2db      	uxtb	r3, r3
 8006020:	b21a      	sxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	330b      	adds	r3, #11
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	b21b      	sxth	r3, r3
 800602e:	4313      	orrs	r3, r2
 8006030:	b21a      	sxth	r2, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	330c      	adds	r3, #12
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	330d      	adds	r3, #13
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b2da      	uxtb	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	330e      	adds	r3, #14
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	b21a      	sxth	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	330f      	adds	r3, #15
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	b2db      	uxtb	r3, r3
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	b21b      	sxth	r3, r3
 8006064:	4313      	orrs	r3, r2
 8006066:	b21b      	sxth	r3, r3
 8006068:	b29a      	uxth	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3310      	adds	r3, #16
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	b21a      	sxth	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3311      	adds	r3, #17
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	b21b      	sxth	r3, r3
 8006084:	4313      	orrs	r3, r2
 8006086:	b21a      	sxth	r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006092:	b21b      	sxth	r3, r3
 8006094:	b29b      	uxth	r3, r3
 8006096:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800609a:	b29b      	uxth	r3, r3
 800609c:	b21a      	sxth	r2, r3
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80060a8:	b21b      	sxth	r3, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	b21a      	sxth	r2, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80060be:	b21b      	sxth	r3, r3
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	b21a      	sxth	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80060d4:	b21b      	sxth	r3, r3
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80060dc:	b29b      	uxth	r3, r3
 80060de:	b21a      	sxth	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060ea:	b21b      	sxth	r3, r3
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	b21a      	sxth	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	811a      	strh	r2, [r3, #8]
 80060fa:	e000      	b.n	80060fe <sbus_to_rc+0x216>
        return;
 80060fc:	bf00      	nop
}
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8006112:	4b06      	ldr	r3, [pc, #24]	@ (800612c <getRCchannel+0x24>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800611a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800611e:	b21b      	sxth	r3, r3
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	200000a0 	.word	0x200000a0

08006130 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 800613a:	4b06      	ldr	r3, [pc, #24]	@ (8006154 <getRCswitch+0x24>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006142:	4413      	add	r3, r2
 8006144:	7a9b      	ldrb	r3, [r3, #10]
 8006146:	b25b      	sxtb	r3, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	200000a0 	.word	0x200000a0

08006158 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 800615e:	4b85      	ldr	r3, [pc, #532]	@ (8006374 <RCkeysRefresh+0x21c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	7d1a      	ldrb	r2, [r3, #20]
 8006164:	7d5b      	ldrb	r3, [r3, #21]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	4313      	orrs	r3, r2
 800616a:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 800616c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	da07      	bge.n	8006184 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8006174:	4b80      	ldr	r3, [pc, #512]	@ (8006378 <RCkeysRefresh+0x220>)
 8006176:	2201      	movs	r2, #1
 8006178:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006180:	80fb      	strh	r3, [r7, #6]
 8006182:	e002      	b.n	800618a <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8006184:	4b7c      	ldr	r3, [pc, #496]	@ (8006378 <RCkeysRefresh+0x220>)
 8006186:	2200      	movs	r2, #0
 8006188:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006190:	d307      	bcc.n	80061a2 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8006192:	4b79      	ldr	r3, [pc, #484]	@ (8006378 <RCkeysRefresh+0x220>)
 8006194:	2201      	movs	r2, #1
 8006196:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800619e:	80fb      	strh	r3, [r7, #6]
 80061a0:	e002      	b.n	80061a8 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 80061a2:	4b75      	ldr	r3, [pc, #468]	@ (8006378 <RCkeysRefresh+0x220>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ae:	d307      	bcc.n	80061c0 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 80061b0:	4b71      	ldr	r3, [pc, #452]	@ (8006378 <RCkeysRefresh+0x220>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80061bc:	80fb      	strh	r3, [r7, #6]
 80061be:	e002      	b.n	80061c6 <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 80061c0:	4b6d      	ldr	r3, [pc, #436]	@ (8006378 <RCkeysRefresh+0x220>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061cc:	d307      	bcc.n	80061de <RCkeysRefresh+0x86>
		pc_control.x = 1;
 80061ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006378 <RCkeysRefresh+0x220>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80061da:	80fb      	strh	r3, [r7, #6]
 80061dc:	e002      	b.n	80061e4 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 80061de:	4b66      	ldr	r3, [pc, #408]	@ (8006378 <RCkeysRefresh+0x220>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ea:	d307      	bcc.n	80061fc <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 80061ec:	4b62      	ldr	r3, [pc, #392]	@ (8006378 <RCkeysRefresh+0x220>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80061f8:	80fb      	strh	r3, [r7, #6]
 80061fa:	e002      	b.n	8006202 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 80061fc:	4b5e      	ldr	r3, [pc, #376]	@ (8006378 <RCkeysRefresh+0x220>)
 80061fe:	2200      	movs	r2, #0
 8006200:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006208:	d307      	bcc.n	800621a <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 800620a:	4b5b      	ldr	r3, [pc, #364]	@ (8006378 <RCkeysRefresh+0x220>)
 800620c:	2201      	movs	r2, #1
 800620e:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8006216:	80fb      	strh	r3, [r7, #6]
 8006218:	e002      	b.n	8006220 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 800621a:	4b57      	ldr	r3, [pc, #348]	@ (8006378 <RCkeysRefresh+0x220>)
 800621c:	2200      	movs	r2, #0
 800621e:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8006220:	88fb      	ldrh	r3, [r7, #6]
 8006222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006226:	d307      	bcc.n	8006238 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8006228:	4b53      	ldr	r3, [pc, #332]	@ (8006378 <RCkeysRefresh+0x220>)
 800622a:	2201      	movs	r2, #1
 800622c:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8006234:	80fb      	strh	r3, [r7, #6]
 8006236:	e002      	b.n	800623e <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8006238:	4b4f      	ldr	r3, [pc, #316]	@ (8006378 <RCkeysRefresh+0x220>)
 800623a:	2200      	movs	r2, #0
 800623c:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 800623e:	88fb      	ldrh	r3, [r7, #6]
 8006240:	2bff      	cmp	r3, #255	@ 0xff
 8006242:	d907      	bls.n	8006254 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8006244:	4b4c      	ldr	r3, [pc, #304]	@ (8006378 <RCkeysRefresh+0x220>)
 8006246:	2201      	movs	r2, #1
 8006248:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006250:	80fb      	strh	r3, [r7, #6]
 8006252:	e002      	b.n	800625a <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8006254:	4b48      	ldr	r3, [pc, #288]	@ (8006378 <RCkeysRefresh+0x220>)
 8006256:	2200      	movs	r2, #0
 8006258:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b7f      	cmp	r3, #127	@ 0x7f
 800625e:	d906      	bls.n	800626e <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8006260:	4b45      	ldr	r3, [pc, #276]	@ (8006378 <RCkeysRefresh+0x220>)
 8006262:	2201      	movs	r2, #1
 8006264:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	3b80      	subs	r3, #128	@ 0x80
 800626a:	80fb      	strh	r3, [r7, #6]
 800626c:	e002      	b.n	8006274 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 800626e:	4b42      	ldr	r3, [pc, #264]	@ (8006378 <RCkeysRefresh+0x220>)
 8006270:	2200      	movs	r2, #0
 8006272:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	2b3f      	cmp	r3, #63	@ 0x3f
 8006278:	d906      	bls.n	8006288 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 800627a:	4b3f      	ldr	r3, [pc, #252]	@ (8006378 <RCkeysRefresh+0x220>)
 800627c:	2201      	movs	r2, #1
 800627e:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	3b40      	subs	r3, #64	@ 0x40
 8006284:	80fb      	strh	r3, [r7, #6]
 8006286:	e002      	b.n	800628e <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8006288:	4b3b      	ldr	r3, [pc, #236]	@ (8006378 <RCkeysRefresh+0x220>)
 800628a:	2200      	movs	r2, #0
 800628c:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	2b1f      	cmp	r3, #31
 8006292:	d906      	bls.n	80062a2 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8006294:	4b38      	ldr	r3, [pc, #224]	@ (8006378 <RCkeysRefresh+0x220>)
 8006296:	2201      	movs	r2, #1
 8006298:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	3b20      	subs	r3, #32
 800629e:	80fb      	strh	r3, [r7, #6]
 80062a0:	e002      	b.n	80062a8 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 80062a2:	4b35      	ldr	r3, [pc, #212]	@ (8006378 <RCkeysRefresh+0x220>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	2b0f      	cmp	r3, #15
 80062ac:	d906      	bls.n	80062bc <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 80062ae:	4b32      	ldr	r3, [pc, #200]	@ (8006378 <RCkeysRefresh+0x220>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	3b10      	subs	r3, #16
 80062b8:	80fb      	strh	r3, [r7, #6]
 80062ba:	e002      	b.n	80062c2 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 80062bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006378 <RCkeysRefresh+0x220>)
 80062be:	2200      	movs	r2, #0
 80062c0:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	2b07      	cmp	r3, #7
 80062c6:	d906      	bls.n	80062d6 <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 80062c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006378 <RCkeysRefresh+0x220>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	3b08      	subs	r3, #8
 80062d2:	80fb      	strh	r3, [r7, #6]
 80062d4:	e002      	b.n	80062dc <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 80062d6:	4b28      	ldr	r3, [pc, #160]	@ (8006378 <RCkeysRefresh+0x220>)
 80062d8:	2200      	movs	r2, #0
 80062da:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d906      	bls.n	80062f0 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 80062e2:	4b25      	ldr	r3, [pc, #148]	@ (8006378 <RCkeysRefresh+0x220>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	3b04      	subs	r3, #4
 80062ec:	80fb      	strh	r3, [r7, #6]
 80062ee:	e002      	b.n	80062f6 <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 80062f0:	4b21      	ldr	r3, [pc, #132]	@ (8006378 <RCkeysRefresh+0x220>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d906      	bls.n	800630a <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 80062fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006378 <RCkeysRefresh+0x220>)
 80062fe:	2201      	movs	r2, #1
 8006300:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	3b02      	subs	r3, #2
 8006306:	80fb      	strh	r3, [r7, #6]
 8006308:	e002      	b.n	8006310 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 800630a:	4b1b      	ldr	r3, [pc, #108]	@ (8006378 <RCkeysRefresh+0x220>)
 800630c:	2200      	movs	r2, #0
 800630e:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 8006316:	4b18      	ldr	r3, [pc, #96]	@ (8006378 <RCkeysRefresh+0x220>)
 8006318:	2201      	movs	r2, #1
 800631a:	731a      	strb	r2, [r3, #12]
 800631c:	e002      	b.n	8006324 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 800631e:	4b16      	ldr	r3, [pc, #88]	@ (8006378 <RCkeysRefresh+0x220>)
 8006320:	2200      	movs	r2, #0
 8006322:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8006324:	4b13      	ldr	r3, [pc, #76]	@ (8006374 <RCkeysRefresh+0x21c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800632c:	b21a      	sxth	r2, r3
 800632e:	4b12      	ldr	r3, [pc, #72]	@ (8006378 <RCkeysRefresh+0x220>)
 8006330:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 8006332:	4b10      	ldr	r3, [pc, #64]	@ (8006374 <RCkeysRefresh+0x21c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800633a:	b21a      	sxth	r2, r3
 800633c:	4b0e      	ldr	r3, [pc, #56]	@ (8006378 <RCkeysRefresh+0x220>)
 800633e:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8006340:	4b0c      	ldr	r3, [pc, #48]	@ (8006374 <RCkeysRefresh+0x21c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006348:	b21a      	sxth	r2, r3
 800634a:	4b0b      	ldr	r3, [pc, #44]	@ (8006378 <RCkeysRefresh+0x220>)
 800634c:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 800634e:	4b09      	ldr	r3, [pc, #36]	@ (8006374 <RCkeysRefresh+0x21c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	7c9b      	ldrb	r3, [r3, #18]
 8006354:	b25a      	sxtb	r2, r3
 8006356:	4b08      	ldr	r3, [pc, #32]	@ (8006378 <RCkeysRefresh+0x220>)
 8006358:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 800635a:	4b06      	ldr	r3, [pc, #24]	@ (8006374 <RCkeysRefresh+0x21c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	7cdb      	ldrb	r3, [r3, #19]
 8006360:	b25a      	sxtb	r2, r3
 8006362:	4b05      	ldr	r3, [pc, #20]	@ (8006378 <RCkeysRefresh+0x220>)
 8006364:	71da      	strb	r2, [r3, #7]
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	200000a0 	.word	0x200000a0
 8006378:	200007d4 	.word	0x200007d4

0800637c <NeverGonnaGiveYouUpNotes>:

	return  actualFrequency;
}


uint32_t NeverGonnaGiveYouUpNotes() {
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
	if (timeTracker > NeverGoingToGiveYouUpRests[noteTracker]) {
 8006380:	4b16      	ldr	r3, [pc, #88]	@ (80063dc <NeverGonnaGiveYouUpNotes+0x60>)
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <NeverGonnaGiveYouUpNotes+0x64>)
 8006388:	5c9b      	ldrb	r3, [r3, r2]
 800638a:	461a      	mov	r2, r3
 800638c:	4b15      	ldr	r3, [pc, #84]	@ (80063e4 <NeverGonnaGiveYouUpNotes+0x68>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d208      	bcs.n	80063a6 <NeverGonnaGiveYouUpNotes+0x2a>
		noteTracker++;
 8006394:	4b11      	ldr	r3, [pc, #68]	@ (80063dc <NeverGonnaGiveYouUpNotes+0x60>)
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	4b0f      	ldr	r3, [pc, #60]	@ (80063dc <NeverGonnaGiveYouUpNotes+0x60>)
 800639e:	801a      	strh	r2, [r3, #0]
		timeTracker = 0;
 80063a0:	4b10      	ldr	r3, [pc, #64]	@ (80063e4 <NeverGonnaGiveYouUpNotes+0x68>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	801a      	strh	r2, [r3, #0]
	}

	if (noteTracker > 60) {
 80063a6:	4b0d      	ldr	r3, [pc, #52]	@ (80063dc <NeverGonnaGiveYouUpNotes+0x60>)
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	2b3c      	cmp	r3, #60	@ 0x3c
 80063ac:	d902      	bls.n	80063b4 <NeverGonnaGiveYouUpNotes+0x38>
		noteTracker = 0;
 80063ae:	4b0b      	ldr	r3, [pc, #44]	@ (80063dc <NeverGonnaGiveYouUpNotes+0x60>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	801a      	strh	r2, [r3, #0]
	}
	// usart_printf();
	// PWMOutput(Buzzer, 1, frequenciesAtA4[NeverGoingToGiveYouUpNotes[noteTracker]]);

	timeTracker++;
 80063b4:	4b0b      	ldr	r3, [pc, #44]	@ (80063e4 <NeverGonnaGiveYouUpNotes+0x68>)
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	4b09      	ldr	r3, [pc, #36]	@ (80063e4 <NeverGonnaGiveYouUpNotes+0x68>)
 80063be:	801a      	strh	r2, [r3, #0]

	return  frequenciesAtA4[NeverGoingToGiveYouUpNotes[noteTracker]];
 80063c0:	4b06      	ldr	r3, [pc, #24]	@ (80063dc <NeverGonnaGiveYouUpNotes+0x60>)
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	4b08      	ldr	r3, [pc, #32]	@ (80063e8 <NeverGonnaGiveYouUpNotes+0x6c>)
 80063c8:	5c9b      	ldrb	r3, [r3, r2]
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <NeverGonnaGiveYouUpNotes+0x70>)
 80063ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	200010b8 	.word	0x200010b8
 80063e0:	20000114 	.word	0x20000114
 80063e4:	200010b6 	.word	0x200010b6
 80063e8:	200000d4 	.word	0x200000d4
 80063ec:	200000a4 	.word	0x200000a4

080063f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063f6:	2300      	movs	r3, #0
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <HAL_MspInit+0x54>)
 80063fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fe:	4a11      	ldr	r2, [pc, #68]	@ (8006444 <HAL_MspInit+0x54>)
 8006400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006404:	6453      	str	r3, [r2, #68]	@ 0x44
 8006406:	4b0f      	ldr	r3, [pc, #60]	@ (8006444 <HAL_MspInit+0x54>)
 8006408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006412:	2300      	movs	r3, #0
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <HAL_MspInit+0x54>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	4a0a      	ldr	r2, [pc, #40]	@ (8006444 <HAL_MspInit+0x54>)
 800641c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006420:	6413      	str	r3, [r2, #64]	@ 0x40
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <HAL_MspInit+0x54>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800642e:	2200      	movs	r2, #0
 8006430:	210f      	movs	r1, #15
 8006432:	f06f 0001 	mvn.w	r0, #1
 8006436:	f001 ff28 	bl	800828a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800

08006448 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08c      	sub	sp, #48	@ 0x30
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006450:	f107 031c 	add.w	r3, r7, #28
 8006454:	2200      	movs	r2, #0
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a4a      	ldr	r2, [pc, #296]	@ (8006590 <HAL_CAN_MspInit+0x148>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d13d      	bne.n	80064e6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800646a:	4b4a      	ldr	r3, [pc, #296]	@ (8006594 <HAL_CAN_MspInit+0x14c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	4a48      	ldr	r2, [pc, #288]	@ (8006594 <HAL_CAN_MspInit+0x14c>)
 8006472:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006474:	4b47      	ldr	r3, [pc, #284]	@ (8006594 <HAL_CAN_MspInit+0x14c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d10d      	bne.n	8006498 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800647c:	2300      	movs	r3, #0
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	4b45      	ldr	r3, [pc, #276]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006484:	4a44      	ldr	r2, [pc, #272]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006486:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800648a:	6413      	str	r3, [r2, #64]	@ 0x40
 800648c:	4b42      	ldr	r3, [pc, #264]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 800648e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	4b3e      	ldr	r3, [pc, #248]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 800649e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a0:	4a3d      	ldr	r2, [pc, #244]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 80064a2:	f043 0308 	orr.w	r3, r3, #8
 80064a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80064a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 80064aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064b4:	2303      	movs	r3, #3
 80064b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b8:	2302      	movs	r3, #2
 80064ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064c0:	2303      	movs	r3, #3
 80064c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80064c4:	2309      	movs	r3, #9
 80064c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064c8:	f107 031c 	add.w	r3, r7, #28
 80064cc:	4619      	mov	r1, r3
 80064ce:	4833      	ldr	r0, [pc, #204]	@ (800659c <HAL_CAN_MspInit+0x154>)
 80064d0:	f002 fb14 	bl	8008afc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80064d4:	2200      	movs	r2, #0
 80064d6:	2105      	movs	r1, #5
 80064d8:	2014      	movs	r0, #20
 80064da:	f001 fed6 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80064de:	2014      	movs	r0, #20
 80064e0:	f001 feef 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80064e4:	e04f      	b.n	8006586 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2d      	ldr	r2, [pc, #180]	@ (80065a0 <HAL_CAN_MspInit+0x158>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d14a      	bne.n	8006586 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80064f0:	2300      	movs	r3, #0
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	4b28      	ldr	r3, [pc, #160]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 80064f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f8:	4a27      	ldr	r2, [pc, #156]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 80064fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8006500:	4b25      	ldr	r3, [pc, #148]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006504:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800650c:	4b21      	ldr	r3, [pc, #132]	@ (8006594 <HAL_CAN_MspInit+0x14c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	4a20      	ldr	r2, [pc, #128]	@ (8006594 <HAL_CAN_MspInit+0x14c>)
 8006514:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006516:	4b1f      	ldr	r3, [pc, #124]	@ (8006594 <HAL_CAN_MspInit+0x14c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10d      	bne.n	800653a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	4a1c      	ldr	r2, [pc, #112]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800652c:	6413      	str	r3, [r2, #64]	@ 0x40
 800652e:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	4b16      	ldr	r3, [pc, #88]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006542:	4a15      	ldr	r2, [pc, #84]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 8006544:	f043 0302 	orr.w	r3, r3, #2
 8006548:	6313      	str	r3, [r2, #48]	@ 0x30
 800654a:	4b13      	ldr	r3, [pc, #76]	@ (8006598 <HAL_CAN_MspInit+0x150>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006556:	2360      	movs	r3, #96	@ 0x60
 8006558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800655a:	2302      	movs	r3, #2
 800655c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655e:	2300      	movs	r3, #0
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006562:	2303      	movs	r3, #3
 8006564:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006566:	2309      	movs	r3, #9
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800656a:	f107 031c 	add.w	r3, r7, #28
 800656e:	4619      	mov	r1, r3
 8006570:	480c      	ldr	r0, [pc, #48]	@ (80065a4 <HAL_CAN_MspInit+0x15c>)
 8006572:	f002 fac3 	bl	8008afc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8006576:	2200      	movs	r2, #0
 8006578:	2105      	movs	r1, #5
 800657a:	2040      	movs	r0, #64	@ 0x40
 800657c:	f001 fe85 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8006580:	2040      	movs	r0, #64	@ 0x40
 8006582:	f001 fe9e 	bl	80082c2 <HAL_NVIC_EnableIRQ>
}
 8006586:	bf00      	nop
 8006588:	3730      	adds	r7, #48	@ 0x30
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40006400 	.word	0x40006400
 8006594:	200010bc 	.word	0x200010bc
 8006598:	40023800 	.word	0x40023800
 800659c:	40020c00 	.word	0x40020c00
 80065a0:	40006800 	.word	0x40006800
 80065a4:	40020400 	.word	0x40020400

080065a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	@ 0x28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b0:	f107 0314 	add.w	r3, r7, #20
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a29      	ldr	r2, [pc, #164]	@ (800666c <HAL_I2C_MspInit+0xc4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d14b      	bne.n	8006662 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	4b28      	ldr	r3, [pc, #160]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d2:	4a27      	ldr	r2, [pc, #156]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 80065d4:	f043 0304 	orr.w	r3, r3, #4
 80065d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80065da:	4b25      	ldr	r3, [pc, #148]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 80065dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	4b21      	ldr	r3, [pc, #132]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	4a20      	ldr	r2, [pc, #128]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80065f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006602:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006608:	2312      	movs	r3, #18
 800660a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660c:	2300      	movs	r3, #0
 800660e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006610:	2303      	movs	r3, #3
 8006612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006614:	2304      	movs	r3, #4
 8006616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	4619      	mov	r1, r3
 800661e:	4815      	ldr	r0, [pc, #84]	@ (8006674 <HAL_I2C_MspInit+0xcc>)
 8006620:	f002 fa6c 	bl	8008afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800662a:	2312      	movs	r3, #18
 800662c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006632:	2303      	movs	r3, #3
 8006634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006636:	2304      	movs	r3, #4
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800663a:	f107 0314 	add.w	r3, r7, #20
 800663e:	4619      	mov	r1, r3
 8006640:	480d      	ldr	r0, [pc, #52]	@ (8006678 <HAL_I2C_MspInit+0xd0>)
 8006642:	f002 fa5b 	bl	8008afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	4a08      	ldr	r2, [pc, #32]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 8006650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006654:	6413      	str	r3, [r2, #64]	@ 0x40
 8006656:	4b06      	ldr	r3, [pc, #24]	@ (8006670 <HAL_I2C_MspInit+0xc8>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006662:	bf00      	nop
 8006664:	3728      	adds	r7, #40	@ 0x28
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40005c00 	.word	0x40005c00
 8006670:	40023800 	.word	0x40023800
 8006674:	40020800 	.word	0x40020800
 8006678:	40020000 	.word	0x40020000

0800667c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	@ 0x28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006684:	f107 0314 	add.w	r3, r7, #20
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a28      	ldr	r2, [pc, #160]	@ (800673c <HAL_SPI_MspInit+0xc0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d149      	bne.n	8006732 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	4b27      	ldr	r3, [pc, #156]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a6:	4a26      	ldr	r2, [pc, #152]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80066ae:	4b24      	ldr	r3, [pc, #144]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	4b20      	ldr	r3, [pc, #128]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066c4:	f043 0302 	orr.w	r3, r3, #2
 80066c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80066ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	4b19      	ldr	r3, [pc, #100]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80066e6:	4b16      	ldr	r3, [pc, #88]	@ (8006740 <HAL_SPI_MspInit+0xc4>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80066f2:	2318      	movs	r3, #24
 80066f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f6:	2302      	movs	r3, #2
 80066f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066fe:	2303      	movs	r3, #3
 8006700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006702:	2305      	movs	r3, #5
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006706:	f107 0314 	add.w	r3, r7, #20
 800670a:	4619      	mov	r1, r3
 800670c:	480d      	ldr	r0, [pc, #52]	@ (8006744 <HAL_SPI_MspInit+0xc8>)
 800670e:	f002 f9f5 	bl	8008afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006712:	2380      	movs	r3, #128	@ 0x80
 8006714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006716:	2302      	movs	r3, #2
 8006718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800671e:	2303      	movs	r3, #3
 8006720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006722:	2305      	movs	r3, #5
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006726:	f107 0314 	add.w	r3, r7, #20
 800672a:	4619      	mov	r1, r3
 800672c:	4806      	ldr	r0, [pc, #24]	@ (8006748 <HAL_SPI_MspInit+0xcc>)
 800672e:	f002 f9e5 	bl	8008afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006732:	bf00      	nop
 8006734:	3728      	adds	r7, #40	@ 0x28
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40013000 	.word	0x40013000
 8006740:	40023800 	.word	0x40023800
 8006744:	40020400 	.word	0x40020400
 8006748:	40020000 	.word	0x40020000

0800674c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a4e      	ldr	r2, [pc, #312]	@ (8006894 <HAL_TIM_PWM_MspInit+0x148>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10e      	bne.n	800677c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	4b4d      	ldr	r3, [pc, #308]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	4a4c      	ldr	r2, [pc, #304]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	6453      	str	r3, [r2, #68]	@ 0x44
 800676e:	4b4a      	ldr	r3, [pc, #296]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800677a:	e086      	b.n	800688a <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a46      	ldr	r2, [pc, #280]	@ (800689c <HAL_TIM_PWM_MspInit+0x150>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d16e      	bne.n	8006864 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	4b43      	ldr	r3, [pc, #268]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	4a42      	ldr	r2, [pc, #264]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006790:	f043 0308 	orr.w	r3, r3, #8
 8006794:	6413      	str	r3, [r2, #64]	@ 0x40
 8006796:	4b40      	ldr	r3, [pc, #256]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80067a2:	4b3f      	ldr	r3, [pc, #252]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067a4:	4a3f      	ldr	r2, [pc, #252]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x158>)
 80067a6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80067a8:	4b3d      	ldr	r3, [pc, #244]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067aa:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80067ae:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067b0:	4b3b      	ldr	r3, [pc, #236]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067b6:	4b3a      	ldr	r3, [pc, #232]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80067bc:	4b38      	ldr	r3, [pc, #224]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067c2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067c4:	4b36      	ldr	r3, [pc, #216]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80067ca:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80067cc:	4b34      	ldr	r3, [pc, #208]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80067d2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 80067d4:	4b32      	ldr	r3, [pc, #200]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80067da:	4b31      	ldr	r3, [pc, #196]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067dc:	2200      	movs	r2, #0
 80067de:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067e0:	4b2f      	ldr	r3, [pc, #188]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80067e6:	482e      	ldr	r0, [pc, #184]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067e8:	f001 fd86 	bl	80082f8 <HAL_DMA_Init>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 80067f2:	f7fe fd55 	bl	80052a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a29      	ldr	r2, [pc, #164]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80067fc:	4a28      	ldr	r2, [pc, #160]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x154>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8006802:	4b29      	ldr	r3, [pc, #164]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 8006804:	4a29      	ldr	r2, [pc, #164]	@ (80068ac <HAL_TIM_PWM_MspInit+0x160>)
 8006806:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8006808:	4b27      	ldr	r3, [pc, #156]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 800680a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800680e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006810:	4b25      	ldr	r3, [pc, #148]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 8006812:	2200      	movs	r2, #0
 8006814:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006816:	4b24      	ldr	r3, [pc, #144]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 8006818:	2200      	movs	r2, #0
 800681a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800681c:	4b22      	ldr	r3, [pc, #136]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 800681e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006822:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006824:	4b20      	ldr	r3, [pc, #128]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 8006826:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800682a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800682c:	4b1e      	ldr	r3, [pc, #120]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 800682e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006832:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8006834:	4b1c      	ldr	r3, [pc, #112]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 8006836:	2200      	movs	r2, #0
 8006838:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800683a:	4b1b      	ldr	r3, [pc, #108]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 800683c:	2200      	movs	r2, #0
 800683e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006840:	4b19      	ldr	r3, [pc, #100]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 8006842:	2200      	movs	r2, #0
 8006844:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8006846:	4818      	ldr	r0, [pc, #96]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 8006848:	f001 fd56 	bl	80082f8 <HAL_DMA_Init>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8006852:	f7fe fd25 	bl	80052a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a13      	ldr	r2, [pc, #76]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 800685a:	629a      	str	r2, [r3, #40]	@ 0x28
 800685c:	4a12      	ldr	r2, [pc, #72]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x15c>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006862:	e012      	b.n	800688a <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a11      	ldr	r2, [pc, #68]	@ (80068b0 <HAL_TIM_PWM_MspInit+0x164>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10d      	bne.n	800688a <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	4b09      	ldr	r3, [pc, #36]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006876:	4a08      	ldr	r2, [pc, #32]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	6453      	str	r3, [r2, #68]	@ 0x44
 800687e:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <HAL_TIM_PWM_MspInit+0x14c>)
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
}
 800688a:	bf00      	nop
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40023800 	.word	0x40023800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	20000c50 	.word	0x20000c50
 80068a4:	40026040 	.word	0x40026040
 80068a8:	20000cb0 	.word	0x20000cb0
 80068ac:	40026070 	.word	0x40026070
 80068b0:	40010400 	.word	0x40010400

080068b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <HAL_TIM_Base_MspInit+0xc0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d13e      	bne.n	8006944 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006978 <HAL_TIM_Base_MspInit+0xc4>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <HAL_TIM_Base_MspInit+0xc4>)
 80068d0:	f043 0304 	orr.w	r3, r3, #4
 80068d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80068d6:	4b28      	ldr	r3, [pc, #160]	@ (8006978 <HAL_TIM_Base_MspInit+0xc4>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80068e2:	4b26      	ldr	r3, [pc, #152]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 80068e4:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <HAL_TIM_Base_MspInit+0xcc>)
 80068e6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80068e8:	4b24      	ldr	r3, [pc, #144]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 80068ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80068ee:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068f0:	4b22      	ldr	r3, [pc, #136]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80068f6:	4b21      	ldr	r3, [pc, #132]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80068fc:	4b1f      	ldr	r3, [pc, #124]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 80068fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006902:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006904:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 8006906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800690a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800690c:	4b1b      	ldr	r3, [pc, #108]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 800690e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006912:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8006914:	4b19      	ldr	r3, [pc, #100]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 8006916:	2200      	movs	r2, #0
 8006918:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800691a:	4b18      	ldr	r3, [pc, #96]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 800691c:	2200      	movs	r2, #0
 800691e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006920:	4b16      	ldr	r3, [pc, #88]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 8006922:	2200      	movs	r2, #0
 8006924:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8006926:	4815      	ldr	r0, [pc, #84]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 8006928:	f001 fce6 	bl	80082f8 <HAL_DMA_Init>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8006932:	f7fe fcb5 	bl	80052a0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a10      	ldr	r2, [pc, #64]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 800693a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800693c:	4a0f      	ldr	r2, [pc, #60]	@ (800697c <HAL_TIM_Base_MspInit+0xc8>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006942:	e012      	b.n	800696a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a0e      	ldr	r2, [pc, #56]	@ (8006984 <HAL_TIM_Base_MspInit+0xd0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10d      	bne.n	800696a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	4b09      	ldr	r3, [pc, #36]	@ (8006978 <HAL_TIM_Base_MspInit+0xc4>)
 8006954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006956:	4a08      	ldr	r2, [pc, #32]	@ (8006978 <HAL_TIM_Base_MspInit+0xc4>)
 8006958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800695c:	6453      	str	r3, [r2, #68]	@ 0x44
 800695e:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <HAL_TIM_Base_MspInit+0xc4>)
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006966:	60bb      	str	r3, [r7, #8]
 8006968:	68bb      	ldr	r3, [r7, #8]
}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40000800 	.word	0x40000800
 8006978:	40023800 	.word	0x40023800
 800697c:	20000bf0 	.word	0x20000bf0
 8006980:	400260b8 	.word	0x400260b8
 8006984:	40014400 	.word	0x40014400

08006988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08e      	sub	sp, #56	@ 0x38
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	605a      	str	r2, [r3, #4]
 800699a:	609a      	str	r2, [r3, #8]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a6a      	ldr	r2, [pc, #424]	@ (8006b50 <HAL_TIM_MspPostInit+0x1c8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d11f      	bne.n	80069ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069aa:	2300      	movs	r3, #0
 80069ac:	623b      	str	r3, [r7, #32]
 80069ae:	4b69      	ldr	r3, [pc, #420]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b2:	4a68      	ldr	r2, [pc, #416]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 80069b4:	f043 0310 	orr.w	r3, r3, #16
 80069b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80069ba:	4b66      	ldr	r3, [pc, #408]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	623b      	str	r3, [r7, #32]
 80069c4:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80069c6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069cc:	2302      	movs	r3, #2
 80069ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069d4:	2300      	movs	r3, #0
 80069d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80069d8:	2301      	movs	r3, #1
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069e0:	4619      	mov	r1, r3
 80069e2:	485d      	ldr	r0, [pc, #372]	@ (8006b58 <HAL_TIM_MspPostInit+0x1d0>)
 80069e4:	f002 f88a 	bl	8008afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80069e8:	e0ae      	b.n	8006b48 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5b      	ldr	r2, [pc, #364]	@ (8006b5c <HAL_TIM_MspPostInit+0x1d4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d11f      	bne.n	8006a34 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	4b56      	ldr	r3, [pc, #344]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 80069fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fc:	4a55      	ldr	r2, [pc, #340]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 80069fe:	f043 0308 	orr.w	r3, r3, #8
 8006a02:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a04:	4b53      	ldr	r3, [pc, #332]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006a10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a16:	2302      	movs	r3, #2
 8006a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a22:	2302      	movs	r3, #2
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	484c      	ldr	r0, [pc, #304]	@ (8006b60 <HAL_TIM_MspPostInit+0x1d8>)
 8006a2e:	f002 f865 	bl	8008afc <HAL_GPIO_Init>
}
 8006a32:	e089      	b.n	8006b48 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a4a      	ldr	r2, [pc, #296]	@ (8006b64 <HAL_TIM_MspPostInit+0x1dc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d11f      	bne.n	8006a7e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	4b44      	ldr	r3, [pc, #272]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a46:	4a43      	ldr	r2, [pc, #268]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a4e:	4b41      	ldr	r3, [pc, #260]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a56:	61bb      	str	r3, [r7, #24]
 8006a58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8006a5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a60:	2302      	movs	r3, #2
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a74:	4619      	mov	r1, r3
 8006a76:	483c      	ldr	r0, [pc, #240]	@ (8006b68 <HAL_TIM_MspPostInit+0x1e0>)
 8006a78:	f002 f840 	bl	8008afc <HAL_GPIO_Init>
}
 8006a7c:	e064      	b.n	8006b48 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a3a      	ldr	r2, [pc, #232]	@ (8006b6c <HAL_TIM_MspPostInit+0x1e4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d13c      	bne.n	8006b02 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	4b31      	ldr	r3, [pc, #196]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a90:	4a30      	ldr	r2, [pc, #192]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a98:	4b2e      	ldr	r3, [pc, #184]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aac:	4a29      	ldr	r2, [pc, #164]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006aae:	f043 0304 	orr.w	r3, r3, #4
 8006ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ab4:	4b27      	ldr	r3, [pc, #156]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8006ac0:	23c0      	movs	r3, #192	@ 0xc0
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006acc:	2300      	movs	r3, #0
 8006ace:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4825      	ldr	r0, [pc, #148]	@ (8006b70 <HAL_TIM_MspPostInit+0x1e8>)
 8006adc:	f002 f80e 	bl	8008afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006ae0:	2340      	movs	r3, #64	@ 0x40
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aec:	2300      	movs	r3, #0
 8006aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006af0:	2303      	movs	r3, #3
 8006af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006af8:	4619      	mov	r1, r3
 8006afa:	481e      	ldr	r0, [pc, #120]	@ (8006b74 <HAL_TIM_MspPostInit+0x1ec>)
 8006afc:	f001 fffe 	bl	8008afc <HAL_GPIO_Init>
}
 8006b00:	e022      	b.n	8006b48 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	@ (8006b78 <HAL_TIM_MspPostInit+0x1f0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d11d      	bne.n	8006b48 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	4b10      	ldr	r3, [pc, #64]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b14:	4a0f      	ldr	r2, [pc, #60]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006b16:	f043 0320 	orr.w	r3, r3, #32
 8006b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <HAL_TIM_MspPostInit+0x1cc>)
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b28:	2340      	movs	r3, #64	@ 0x40
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b30:	2301      	movs	r3, #1
 8006b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b34:	2302      	movs	r3, #2
 8006b36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b40:	4619      	mov	r1, r3
 8006b42:	480e      	ldr	r0, [pc, #56]	@ (8006b7c <HAL_TIM_MspPostInit+0x1f4>)
 8006b44:	f001 ffda 	bl	8008afc <HAL_GPIO_Init>
}
 8006b48:	bf00      	nop
 8006b4a:	3738      	adds	r7, #56	@ 0x38
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40000800 	.word	0x40000800
 8006b60:	40020c00 	.word	0x40020c00
 8006b64:	40000c00 	.word	0x40000c00
 8006b68:	40021c00 	.word	0x40021c00
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40022000 	.word	0x40022000
 8006b74:	40020800 	.word	0x40020800
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40021400 	.word	0x40021400

08006b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08e      	sub	sp, #56	@ 0x38
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a90      	ldr	r2, [pc, #576]	@ (8006de0 <HAL_UART_MspInit+0x260>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	f040 80b2 	bne.w	8006d08 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	623b      	str	r3, [r7, #32]
 8006ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bac:	4a8d      	ldr	r2, [pc, #564]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006bae:	f043 0310 	orr.w	r3, r3, #16
 8006bb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bb4:	4b8b      	ldr	r3, [pc, #556]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	4b87      	ldr	r3, [pc, #540]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	4a86      	ldr	r2, [pc, #536]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006bca:	f043 0302 	orr.w	r3, r3, #2
 8006bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bd0:	4b84      	ldr	r3, [pc, #528]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61bb      	str	r3, [r7, #24]
 8006be0:	4b80      	ldr	r3, [pc, #512]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be4:	4a7f      	ldr	r2, [pc, #508]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bec:	4b7d      	ldr	r3, [pc, #500]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006bf8:	2380      	movs	r3, #128	@ 0x80
 8006bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c04:	2303      	movs	r3, #3
 8006c06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c08:	2307      	movs	r3, #7
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c10:	4619      	mov	r1, r3
 8006c12:	4875      	ldr	r0, [pc, #468]	@ (8006de8 <HAL_UART_MspInit+0x268>)
 8006c14:	f001 ff72 	bl	8008afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c26:	2303      	movs	r3, #3
 8006c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c2a:	2307      	movs	r3, #7
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c32:	4619      	mov	r1, r3
 8006c34:	486d      	ldr	r0, [pc, #436]	@ (8006dec <HAL_UART_MspInit+0x26c>)
 8006c36:	f001 ff61 	bl	8008afc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c3c:	4a6d      	ldr	r2, [pc, #436]	@ (8006df4 <HAL_UART_MspInit+0x274>)
 8006c3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006c40:	4b6b      	ldr	r3, [pc, #428]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006c46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c48:	4b69      	ldr	r3, [pc, #420]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c4a:	2240      	movs	r2, #64	@ 0x40
 8006c4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c4e:	4b68      	ldr	r3, [pc, #416]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c54:	4b66      	ldr	r3, [pc, #408]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c5c:	4b64      	ldr	r3, [pc, #400]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c62:	4b63      	ldr	r3, [pc, #396]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006c68:	4b61      	ldr	r3, [pc, #388]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006c6e:	4b60      	ldr	r3, [pc, #384]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006c74:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c76:	4b5e      	ldr	r3, [pc, #376]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006c7c:	485c      	ldr	r0, [pc, #368]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c7e:	f001 fb3b 	bl	80082f8 <HAL_DMA_Init>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8006c88:	f7fe fb0a 	bl	80052a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a58      	ldr	r2, [pc, #352]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c90:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c92:	4a57      	ldr	r2, [pc, #348]	@ (8006df0 <HAL_UART_MspInit+0x270>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006c98:	4b57      	ldr	r3, [pc, #348]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006c9a:	4a58      	ldr	r2, [pc, #352]	@ (8006dfc <HAL_UART_MspInit+0x27c>)
 8006c9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006c9e:	4b56      	ldr	r3, [pc, #344]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006ca0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006ca4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ca6:	4b54      	ldr	r3, [pc, #336]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cac:	4b52      	ldr	r3, [pc, #328]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cb2:	4b51      	ldr	r3, [pc, #324]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cb8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cba:	4b4f      	ldr	r3, [pc, #316]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006cd2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cd4:	4b48      	ldr	r3, [pc, #288]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006cda:	4847      	ldr	r0, [pc, #284]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cdc:	f001 fb0c 	bl	80082f8 <HAL_DMA_Init>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8006ce6:	f7fe fadb 	bl	80052a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a42      	ldr	r2, [pc, #264]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006cf0:	4a41      	ldr	r2, [pc, #260]	@ (8006df8 <HAL_UART_MspInit+0x278>)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2105      	movs	r1, #5
 8006cfa:	2025      	movs	r0, #37	@ 0x25
 8006cfc:	f001 fac5 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006d00:	2025      	movs	r0, #37	@ 0x25
 8006d02:	f001 fade 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006d06:	e11c      	b.n	8006f42 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e00 <HAL_UART_MspInit+0x280>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d17e      	bne.n	8006e10 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	4b33      	ldr	r3, [pc, #204]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	4a32      	ldr	r2, [pc, #200]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d22:	4b30      	ldr	r3, [pc, #192]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d2e:	2300      	movs	r3, #0
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	4b2c      	ldr	r3, [pc, #176]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d36:	4a2b      	ldr	r2, [pc, #172]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006d38:	f043 0304 	orr.w	r3, r3, #4
 8006d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d3e:	4b29      	ldr	r3, [pc, #164]	@ (8006de4 <HAL_UART_MspInit+0x264>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8006d4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d50:	2302      	movs	r3, #2
 8006d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d5c:	2307      	movs	r3, #7
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d64:	4619      	mov	r1, r3
 8006d66:	4827      	ldr	r0, [pc, #156]	@ (8006e04 <HAL_UART_MspInit+0x284>)
 8006d68:	f001 fec8 	bl	8008afc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006d6c:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d6e:	4a27      	ldr	r2, [pc, #156]	@ (8006e0c <HAL_UART_MspInit+0x28c>)
 8006d70:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006d72:	4b25      	ldr	r3, [pc, #148]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006d78:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d7a:	4b23      	ldr	r3, [pc, #140]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d80:	4b21      	ldr	r3, [pc, #132]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d86:	4b20      	ldr	r3, [pc, #128]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d8c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d94:	4b1c      	ldr	r3, [pc, #112]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006d9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006da0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006da2:	4b19      	ldr	r3, [pc, #100]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006da4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006da8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006daa:	4b17      	ldr	r3, [pc, #92]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006db0:	4815      	ldr	r0, [pc, #84]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006db2:	f001 faa1 	bl	80082f8 <HAL_DMA_Init>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8006dbc:	f7fe fa70 	bl	80052a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a11      	ldr	r2, [pc, #68]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006dc6:	4a10      	ldr	r2, [pc, #64]	@ (8006e08 <HAL_UART_MspInit+0x288>)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2105      	movs	r1, #5
 8006dd0:	2027      	movs	r0, #39	@ 0x27
 8006dd2:	f001 fa5a 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006dd6:	2027      	movs	r0, #39	@ 0x27
 8006dd8:	f001 fa73 	bl	80082c2 <HAL_NVIC_EnableIRQ>
}
 8006ddc:	e0b1      	b.n	8006f42 <HAL_UART_MspInit+0x3c2>
 8006dde:	bf00      	nop
 8006de0:	40011000 	.word	0x40011000
 8006de4:	40023800 	.word	0x40023800
 8006de8:	40020400 	.word	0x40020400
 8006dec:	40020000 	.word	0x40020000
 8006df0:	20000de8 	.word	0x20000de8
 8006df4:	400264b8 	.word	0x400264b8
 8006df8:	20000e48 	.word	0x20000e48
 8006dfc:	40026440 	.word	0x40026440
 8006e00:	40004800 	.word	0x40004800
 8006e04:	40020800 	.word	0x40020800
 8006e08:	20000ea8 	.word	0x20000ea8
 8006e0c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a4d      	ldr	r2, [pc, #308]	@ (8006f4c <HAL_UART_MspInit+0x3cc>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f040 8093 	bne.w	8006f42 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	4b4b      	ldr	r3, [pc, #300]	@ (8006f50 <HAL_UART_MspInit+0x3d0>)
 8006e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e24:	4a4a      	ldr	r2, [pc, #296]	@ (8006f50 <HAL_UART_MspInit+0x3d0>)
 8006e26:	f043 0320 	orr.w	r3, r3, #32
 8006e2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e2c:	4b48      	ldr	r3, [pc, #288]	@ (8006f50 <HAL_UART_MspInit+0x3d0>)
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60bb      	str	r3, [r7, #8]
 8006e3c:	4b44      	ldr	r3, [pc, #272]	@ (8006f50 <HAL_UART_MspInit+0x3d0>)
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e40:	4a43      	ldr	r2, [pc, #268]	@ (8006f50 <HAL_UART_MspInit+0x3d0>)
 8006e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e46:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e48:	4b41      	ldr	r3, [pc, #260]	@ (8006f50 <HAL_UART_MspInit+0x3d0>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8006e54:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8006e58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e62:	2303      	movs	r3, #3
 8006e64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006e66:	2308      	movs	r3, #8
 8006e68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4838      	ldr	r0, [pc, #224]	@ (8006f54 <HAL_UART_MspInit+0x3d4>)
 8006e72:	f001 fe43 	bl	8008afc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006e76:	4b38      	ldr	r3, [pc, #224]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006e78:	4a38      	ldr	r2, [pc, #224]	@ (8006f5c <HAL_UART_MspInit+0x3dc>)
 8006e7a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006e7c:	4b36      	ldr	r3, [pc, #216]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006e7e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006e82:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e84:	4b34      	ldr	r3, [pc, #208]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e8a:	4b33      	ldr	r3, [pc, #204]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e90:	4b31      	ldr	r3, [pc, #196]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e96:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e98:	4b2f      	ldr	r3, [pc, #188]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006eac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006eb0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006eb2:	4b29      	ldr	r3, [pc, #164]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006eb8:	4827      	ldr	r0, [pc, #156]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006eba:	f001 fa1d 	bl	80082f8 <HAL_DMA_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8006ec4:	f7fe f9ec 	bl	80052a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a23      	ldr	r2, [pc, #140]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ece:	4a22      	ldr	r2, [pc, #136]	@ (8006f58 <HAL_UART_MspInit+0x3d8>)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006ed4:	4b22      	ldr	r3, [pc, #136]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006ed6:	4a23      	ldr	r2, [pc, #140]	@ (8006f64 <HAL_UART_MspInit+0x3e4>)
 8006ed8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006eda:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006edc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006ee0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006ee4:	2240      	movs	r2, #64	@ 0x40
 8006ee6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006eee:	4b1c      	ldr	r3, [pc, #112]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ef4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006efc:	4b18      	ldr	r3, [pc, #96]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006f02:	4b17      	ldr	r3, [pc, #92]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006f08:	4b15      	ldr	r3, [pc, #84]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006f0a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006f0e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f10:	4b13      	ldr	r3, [pc, #76]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006f16:	4812      	ldr	r0, [pc, #72]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006f18:	f001 f9ee 	bl	80082f8 <HAL_DMA_Init>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8006f22:	f7fe f9bd 	bl	80052a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a0d      	ldr	r2, [pc, #52]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006f2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006f60 <HAL_UART_MspInit+0x3e0>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006f32:	2200      	movs	r2, #0
 8006f34:	2105      	movs	r1, #5
 8006f36:	2047      	movs	r0, #71	@ 0x47
 8006f38:	f001 f9a7 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006f3c:	2047      	movs	r0, #71	@ 0x47
 8006f3e:	f001 f9c0 	bl	80082c2 <HAL_NVIC_EnableIRQ>
}
 8006f42:	bf00      	nop
 8006f44:	3738      	adds	r7, #56	@ 0x38
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40011400 	.word	0x40011400
 8006f50:	40023800 	.word	0x40023800
 8006f54:	40021800 	.word	0x40021800
 8006f58:	20000f08 	.word	0x20000f08
 8006f5c:	40026428 	.word	0x40026428
 8006f60:	20000f68 	.word	0x20000f68
 8006f64:	400264a0 	.word	0x400264a0

08006f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006f6c:	f003 fc1c 	bl	800a7a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <NMI_Handler+0x8>

08006f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f78:	bf00      	nop
 8006f7a:	e7fd      	b.n	8006f78 <HardFault_Handler+0x4>

08006f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f80:	bf00      	nop
 8006f82:	e7fd      	b.n	8006f80 <MemManage_Handler+0x4>

08006f84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <BusFault_Handler+0x4>

08006f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f90:	bf00      	nop
 8006f92:	e7fd      	b.n	8006f90 <UsageFault_Handler+0x4>

08006f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f98:	bf00      	nop
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fa6:	f000 f9e9 	bl	800737c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006faa:	f007 ff51 	bl	800ee50 <xTaskGetSchedulerState>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d001      	beq.n	8006fb8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006fb4:	f008 fe28 	bl	800fc08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fb8:	bf00      	nop
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006fc0:	2008      	movs	r0, #8
 8006fc2:	f001 ff51 	bl	8008e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8006fc6:	4802      	ldr	r0, [pc, #8]	@ (8006fd0 <EXTI3_IRQHandler+0x14>)
 8006fc8:	f7fc fbfe 	bl	80037c8 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8006fcc:	bf00      	nop
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000980 	.word	0x20000980

08006fd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8006fd8:	2010      	movs	r0, #16
 8006fda:	f001 ff45 	bl	8008e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006fe8:	4802      	ldr	r0, [pc, #8]	@ (8006ff4 <DMA1_Stream1_IRQHandler+0x10>)
 8006fea:	f001 fb1d 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006fee:	bf00      	nop
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000ea8 	.word	0x20000ea8

08006ff8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8006ffc:	4802      	ldr	r0, [pc, #8]	@ (8007008 <DMA1_Stream2_IRQHandler+0x10>)
 8006ffe:	f001 fb13 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007002:	bf00      	nop
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000c50 	.word	0x20000c50

0800700c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8007010:	4802      	ldr	r0, [pc, #8]	@ (800701c <DMA1_Stream4_IRQHandler+0x10>)
 8007012:	f001 fb09 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007016:	bf00      	nop
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000cb0 	.word	0x20000cb0

08007020 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007024:	4802      	ldr	r0, [pc, #8]	@ (8007030 <CAN1_RX0_IRQHandler+0x10>)
 8007026:	f000 fe25 	bl	8007c74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800702a:	bf00      	nop
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	2000098c 	.word	0x2000098c

08007034 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007038:	4802      	ldr	r0, [pc, #8]	@ (8007044 <USART1_IRQHandler+0x10>)
 800703a:	f004 ffb7 	bl	800bfac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800703e:	bf00      	nop
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000d10 	.word	0x20000d10

08007048 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800704c:	4802      	ldr	r0, [pc, #8]	@ (8007058 <DMA1_Stream7_IRQHandler+0x10>)
 800704e:	f001 faeb 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8007052:	bf00      	nop
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000bf0 	.word	0x20000bf0

0800705c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007060:	4802      	ldr	r0, [pc, #8]	@ (800706c <DMA2_Stream1_IRQHandler+0x10>)
 8007062:	f001 fae1 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007066:	bf00      	nop
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000f08 	.word	0x20000f08

08007070 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007074:	4802      	ldr	r0, [pc, #8]	@ (8007080 <DMA2_Stream2_IRQHandler+0x10>)
 8007076:	f001 fad7 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800707a:	bf00      	nop
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000e48 	.word	0x20000e48

08007084 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007088:	4802      	ldr	r0, [pc, #8]	@ (8007094 <CAN2_RX0_IRQHandler+0x10>)
 800708a:	f000 fdf3 	bl	8007c74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800708e:	bf00      	nop
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200009b4 	.word	0x200009b4

08007098 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800709c:	4802      	ldr	r0, [pc, #8]	@ (80070a8 <DMA2_Stream6_IRQHandler+0x10>)
 800709e:	f001 fac3 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80070a2:	bf00      	nop
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000f68 	.word	0x20000f68

080070ac <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80070b0:	4802      	ldr	r0, [pc, #8]	@ (80070bc <DMA2_Stream7_IRQHandler+0x10>)
 80070b2:	f001 fab9 	bl	8008628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80070b6:	bf00      	nop
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000de8 	.word	0x20000de8

080070c0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80070c4:	4802      	ldr	r0, [pc, #8]	@ (80070d0 <USART6_IRQHandler+0x10>)
 80070c6:	f004 ff71 	bl	800bfac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80070ca:	bf00      	nop
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000da0 	.word	0x20000da0

080070d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return 1;
 80070d8:	2301      	movs	r3, #1
}
 80070da:	4618      	mov	r0, r3
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <_kill>:

int _kill(int pid, int sig)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80070ee:	f009 fda7 	bl	8010c40 <__errno>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2216      	movs	r2, #22
 80070f6:	601a      	str	r2, [r3, #0]
  return -1;
 80070f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <_exit>:

void _exit (int status)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800710c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff ffe7 	bl	80070e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <_exit+0x12>

0800711a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b086      	sub	sp, #24
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	e00a      	b.n	8007142 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800712c:	f3af 8000 	nop.w
 8007130:	4601      	mov	r1, r0
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	60ba      	str	r2, [r7, #8]
 8007138:	b2ca      	uxtb	r2, r1
 800713a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	3301      	adds	r3, #1
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	429a      	cmp	r2, r3
 8007148:	dbf0      	blt.n	800712c <_read+0x12>
  }

  return len;
 800714a:	687b      	ldr	r3, [r7, #4]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	e009      	b.n	800717a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	60ba      	str	r2, [r7, #8]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3301      	adds	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	429a      	cmp	r2, r3
 8007180:	dbf1      	blt.n	8007166 <_write+0x12>
  }
  return len;
 8007182:	687b      	ldr	r3, [r7, #4]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <_close>:

int _close(int file)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80071b4:	605a      	str	r2, [r3, #4]
  return 0;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <_isatty>:

int _isatty(int file)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80071cc:	2301      	movs	r3, #1
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071fc:	4a14      	ldr	r2, [pc, #80]	@ (8007250 <_sbrk+0x5c>)
 80071fe:	4b15      	ldr	r3, [pc, #84]	@ (8007254 <_sbrk+0x60>)
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007208:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <_sbrk+0x64>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007210:	4b11      	ldr	r3, [pc, #68]	@ (8007258 <_sbrk+0x64>)
 8007212:	4a12      	ldr	r2, [pc, #72]	@ (800725c <_sbrk+0x68>)
 8007214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007216:	4b10      	ldr	r3, [pc, #64]	@ (8007258 <_sbrk+0x64>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4413      	add	r3, r2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	d207      	bcs.n	8007234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007224:	f009 fd0c 	bl	8010c40 <__errno>
 8007228:	4603      	mov	r3, r0
 800722a:	220c      	movs	r2, #12
 800722c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800722e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007232:	e009      	b.n	8007248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007234:	4b08      	ldr	r3, [pc, #32]	@ (8007258 <_sbrk+0x64>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <_sbrk+0x64>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4413      	add	r3, r2
 8007242:	4a05      	ldr	r2, [pc, #20]	@ (8007258 <_sbrk+0x64>)
 8007244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20020000 	.word	0x20020000
 8007254:	00000400 	.word	0x00000400
 8007258:	200010c0 	.word	0x200010c0
 800725c:	20005c00 	.word	0x20005c00

08007260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007264:	4b06      	ldr	r3, [pc, #24]	@ (8007280 <SystemInit+0x20>)
 8007266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800726a:	4a05      	ldr	r2, [pc, #20]	@ (8007280 <SystemInit+0x20>)
 800726c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	e000ed00 	.word	0xe000ed00

08007284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80072bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007288:	480d      	ldr	r0, [pc, #52]	@ (80072c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800728a:	490e      	ldr	r1, [pc, #56]	@ (80072c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800728c:	4a0e      	ldr	r2, [pc, #56]	@ (80072c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800728e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007290:	e002      	b.n	8007298 <LoopCopyDataInit>

08007292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007296:	3304      	adds	r3, #4

08007298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800729a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800729c:	d3f9      	bcc.n	8007292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800729e:	4a0b      	ldr	r2, [pc, #44]	@ (80072cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80072a0:	4c0b      	ldr	r4, [pc, #44]	@ (80072d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80072a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072a4:	e001      	b.n	80072aa <LoopFillZerobss>

080072a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072a8:	3204      	adds	r2, #4

080072aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072ac:	d3fb      	bcc.n	80072a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80072ae:	f7ff ffd7 	bl	8007260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072b2:	f009 fccb 	bl	8010c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072b6:	f7fc fba7 	bl	8003a08 <main>
  bx  lr    
 80072ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80072bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80072c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072c4:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 80072c8:	08014790 	.word	0x08014790
  ldr r2, =_sbss
 80072cc:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 80072d0:	20005bfc 	.word	0x20005bfc

080072d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072d4:	e7fe      	b.n	80072d4 <ADC_IRQHandler>
	...

080072d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007318 <HAL_Init+0x40>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007318 <HAL_Init+0x40>)
 80072e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <HAL_Init+0x40>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007318 <HAL_Init+0x40>)
 80072ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072f4:	4b08      	ldr	r3, [pc, #32]	@ (8007318 <HAL_Init+0x40>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a07      	ldr	r2, [pc, #28]	@ (8007318 <HAL_Init+0x40>)
 80072fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007300:	2003      	movs	r0, #3
 8007302:	f000 ffb7 	bl	8008274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007306:	200f      	movs	r0, #15
 8007308:	f000 f808 	bl	800731c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800730c:	f7ff f870 	bl	80063f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40023c00 	.word	0x40023c00

0800731c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007324:	4b12      	ldr	r3, [pc, #72]	@ (8007370 <HAL_InitTick+0x54>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	4b12      	ldr	r3, [pc, #72]	@ (8007374 <HAL_InitTick+0x58>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007332:	fbb3 f3f1 	udiv	r3, r3, r1
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	4618      	mov	r0, r3
 800733c:	f000 ffcf 	bl	80082de <HAL_SYSTICK_Config>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e00e      	b.n	8007368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b0f      	cmp	r3, #15
 800734e:	d80a      	bhi.n	8007366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007350:	2200      	movs	r2, #0
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007358:	f000 ff97 	bl	800828a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800735c:	4a06      	ldr	r2, [pc, #24]	@ (8007378 <HAL_InitTick+0x5c>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000154 	.word	0x20000154
 8007374:	2000015c 	.word	0x2000015c
 8007378:	20000158 	.word	0x20000158

0800737c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007380:	4b06      	ldr	r3, [pc, #24]	@ (800739c <HAL_IncTick+0x20>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	4b06      	ldr	r3, [pc, #24]	@ (80073a0 <HAL_IncTick+0x24>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4413      	add	r3, r2
 800738c:	4a04      	ldr	r2, [pc, #16]	@ (80073a0 <HAL_IncTick+0x24>)
 800738e:	6013      	str	r3, [r2, #0]
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	2000015c 	.word	0x2000015c
 80073a0:	200010c4 	.word	0x200010c4

080073a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  return uwTick;
 80073a8:	4b03      	ldr	r3, [pc, #12]	@ (80073b8 <HAL_GetTick+0x14>)
 80073aa:	681b      	ldr	r3, [r3, #0]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	200010c4 	.word	0x200010c4

080073bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073c4:	f7ff ffee 	bl	80073a4 <HAL_GetTick>
 80073c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073d4:	d005      	beq.n	80073e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007400 <HAL_Delay+0x44>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80073e2:	bf00      	nop
 80073e4:	f7ff ffde 	bl	80073a4 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d8f7      	bhi.n	80073e4 <HAL_Delay+0x28>
  {
  }
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	2000015c 	.word	0x2000015c

08007404 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e0ed      	b.n	80075f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff f810 	bl	8006448 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007438:	f7ff ffb4 	bl	80073a4 <HAL_GetTick>
 800743c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800743e:	e012      	b.n	8007466 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007440:	f7ff ffb0 	bl	80073a4 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b0a      	cmp	r3, #10
 800744c:	d90b      	bls.n	8007466 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007452:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2205      	movs	r2, #5
 800745e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e0c5      	b.n	80075f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0e5      	beq.n	8007440 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0202 	bic.w	r2, r2, #2
 8007482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007484:	f7ff ff8e 	bl	80073a4 <HAL_GetTick>
 8007488:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800748a:	e012      	b.n	80074b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800748c:	f7ff ff8a 	bl	80073a4 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b0a      	cmp	r3, #10
 8007498:	d90b      	bls.n	80074b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2205      	movs	r2, #5
 80074aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e09f      	b.n	80075f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7e1b      	ldrb	r3, [r3, #24]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d108      	bne.n	80074da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e007      	b.n	80074ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	7e5b      	ldrb	r3, [r3, #25]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d108      	bne.n	8007504 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	e007      	b.n	8007514 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007512:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7e9b      	ldrb	r3, [r3, #26]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d108      	bne.n	800752e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0220 	orr.w	r2, r2, #32
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	e007      	b.n	800753e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0220 	bic.w	r2, r2, #32
 800753c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	7edb      	ldrb	r3, [r3, #27]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d108      	bne.n	8007558 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0210 	bic.w	r2, r2, #16
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e007      	b.n	8007568 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0210 	orr.w	r2, r2, #16
 8007566:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	7f1b      	ldrb	r3, [r3, #28]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d108      	bne.n	8007582 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0208 	orr.w	r2, r2, #8
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e007      	b.n	8007592 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0208 	bic.w	r2, r2, #8
 8007590:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7f5b      	ldrb	r3, [r3, #29]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d108      	bne.n	80075ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0204 	orr.w	r2, r2, #4
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e007      	b.n	80075bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0204 	bic.w	r2, r2, #4
 80075ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	ea42 0103 	orr.w	r1, r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	1e5a      	subs	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007612:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007614:	7cfb      	ldrb	r3, [r7, #19]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d003      	beq.n	8007622 <HAL_CAN_ConfigFilter+0x26>
 800761a:	7cfb      	ldrb	r3, [r7, #19]
 800761c:	2b02      	cmp	r3, #2
 800761e:	f040 80be 	bne.w	800779e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007622:	4b65      	ldr	r3, [pc, #404]	@ (80077b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8007624:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800762c:	f043 0201 	orr.w	r2, r3, #1
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800763c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	431a      	orrs	r2, r3
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	2201      	movs	r2, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	43db      	mvns	r3, r3
 8007674:	401a      	ands	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d123      	bne.n	80076cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	43db      	mvns	r3, r3
 800768e:	401a      	ands	r2, r3
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80076a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3248      	adds	r2, #72	@ 0x48
 80076ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80076c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	3348      	adds	r3, #72	@ 0x48
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	440b      	add	r3, r1
 80076ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d122      	bne.n	800771a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	431a      	orrs	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80076f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	3248      	adds	r2, #72	@ 0x48
 80076fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800770e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007710:	6979      	ldr	r1, [r7, #20]
 8007712:	3348      	adds	r3, #72	@ 0x48
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	440b      	add	r3, r1
 8007718:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	43db      	mvns	r3, r3
 800772c:	401a      	ands	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8007734:	e007      	b.n	8007746 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	431a      	orrs	r2, r3
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	43db      	mvns	r3, r3
 8007758:	401a      	ands	r2, r3
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8007760:	e007      	b.n	8007772 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	431a      	orrs	r2, r3
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d107      	bne.n	800778a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	431a      	orrs	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007790:	f023 0201 	bic.w	r2, r3, #1
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e006      	b.n	80077ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40006400 	.word	0x40006400

080077bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d12e      	bne.n	800782e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0201 	bic.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077e8:	f7ff fddc 	bl	80073a4 <HAL_GetTick>
 80077ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80077ee:	e012      	b.n	8007816 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80077f0:	f7ff fdd8 	bl	80073a4 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b0a      	cmp	r3, #10
 80077fc:	d90b      	bls.n	8007816 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007802:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2205      	movs	r2, #5
 800780e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e012      	b.n	800783c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e5      	bne.n	80077f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	e006      	b.n	800783c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007832:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
  }
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	@ 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007858:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007862:	7ffb      	ldrb	r3, [r7, #31]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d003      	beq.n	8007870 <HAL_CAN_AddTxMessage+0x2c>
 8007868:	7ffb      	ldrb	r3, [r7, #31]
 800786a:	2b02      	cmp	r3, #2
 800786c:	f040 80ad 	bne.w	80079ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007880:	2b00      	cmp	r3, #0
 8007882:	d105      	bne.n	8007890 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8095 	beq.w	80079ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	0e1b      	lsrs	r3, r3, #24
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800789a:	2201      	movs	r2, #1
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	409a      	lsls	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10d      	bne.n	80078c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	6809      	ldr	r1, [r1, #0]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	3318      	adds	r3, #24
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	440b      	add	r3, r1
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e00f      	b.n	80078e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078d8:	68f9      	ldr	r1, [r7, #12]
 80078da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80078dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	3318      	adds	r3, #24
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	440b      	add	r3, r1
 80078e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6819      	ldr	r1, [r3, #0]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	3318      	adds	r3, #24
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	440b      	add	r3, r1
 80078f8:	3304      	adds	r3, #4
 80078fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	7d1b      	ldrb	r3, [r3, #20]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d111      	bne.n	8007928 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3318      	adds	r3, #24
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	4413      	add	r3, r2
 8007910:	3304      	adds	r3, #4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	6811      	ldr	r1, [r2, #0]
 8007918:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	3318      	adds	r3, #24
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	440b      	add	r3, r1
 8007924:	3304      	adds	r3, #4
 8007926:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3307      	adds	r3, #7
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	061a      	lsls	r2, r3, #24
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3306      	adds	r3, #6
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3305      	adds	r3, #5
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	4313      	orrs	r3, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	3204      	adds	r2, #4
 8007948:	7812      	ldrb	r2, [r2, #0]
 800794a:	4610      	mov	r0, r2
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	6811      	ldr	r1, [r2, #0]
 8007950:	ea43 0200 	orr.w	r2, r3, r0
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	440b      	add	r3, r1
 800795a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800795e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3303      	adds	r3, #3
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	061a      	lsls	r2, r3, #24
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3302      	adds	r3, #2
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3301      	adds	r3, #1
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	4313      	orrs	r3, r2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7812      	ldrb	r2, [r2, #0]
 8007980:	4610      	mov	r0, r2
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	6811      	ldr	r1, [r2, #0]
 8007986:	ea43 0200 	orr.w	r2, r3, r0
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	440b      	add	r3, r1
 8007990:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8007994:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	3318      	adds	r3, #24
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	4413      	add	r3, r2
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	6811      	ldr	r1, [r2, #0]
 80079a8:	f043 0201 	orr.w	r2, r3, #1
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	3318      	adds	r3, #24
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	440b      	add	r3, r1
 80079b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e00e      	b.n	80079d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e006      	b.n	80079d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3724      	adds	r7, #36	@ 0x24
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d003      	beq.n	8007a08 <HAL_CAN_GetRxMessage+0x24>
 8007a00:	7dfb      	ldrb	r3, [r7, #23]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	f040 8103 	bne.w	8007c0e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10e      	bne.n	8007a2c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d116      	bne.n	8007a4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e0f7      	b.n	8007c1c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d107      	bne.n	8007a4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e0e8      	b.n	8007c1c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	331b      	adds	r3, #27
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	4413      	add	r3, r2
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0204 	and.w	r2, r3, #4
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	331b      	adds	r3, #27
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	4413      	add	r3, r2
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	0d5b      	lsrs	r3, r3, #21
 8007a78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e00b      	b.n	8007a9a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	331b      	adds	r3, #27
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	4413      	add	r3, r2
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	08db      	lsrs	r3, r3, #3
 8007a92:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	331b      	adds	r3, #27
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	4413      	add	r3, r2
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0202 	and.w	r2, r3, #2
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	331b      	adds	r3, #27
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	4413      	add	r3, r2
 8007abc:	3304      	adds	r3, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2208      	movs	r2, #8
 8007acc:	611a      	str	r2, [r3, #16]
 8007ace:	e00b      	b.n	8007ae8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	331b      	adds	r3, #27
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	4413      	add	r3, r2
 8007adc:	3304      	adds	r3, #4
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	331b      	adds	r3, #27
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	4413      	add	r3, r2
 8007af4:	3304      	adds	r3, #4
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	0a1b      	lsrs	r3, r3, #8
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	331b      	adds	r3, #27
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	0a1a      	lsrs	r2, r3, #8
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	4413      	add	r3, r2
 8007b52:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	0c1a      	lsrs	r2, r3, #16
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	0e1a      	lsrs	r2, r3, #24
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	3303      	adds	r3, #3
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	0a1a      	lsrs	r2, r3, #8
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	3305      	adds	r3, #5
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	0c1a      	lsrs	r2, r3, #16
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	3306      	adds	r3, #6
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	0e1a      	lsrs	r2, r3, #24
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	3307      	adds	r3, #7
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d108      	bne.n	8007bfa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0220 	orr.w	r2, r2, #32
 8007bf6:	60da      	str	r2, [r3, #12]
 8007bf8:	e007      	b.n	8007c0a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f042 0220 	orr.w	r2, r2, #32
 8007c08:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e006      	b.n	8007c1c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
  }
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c38:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d002      	beq.n	8007c46 <HAL_CAN_ActivateNotification+0x1e>
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d109      	bne.n	8007c5a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6959      	ldr	r1, [r3, #20]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e006      	b.n	8007c68 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
  }
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	@ 0x28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d07c      	beq.n	8007db4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d023      	beq.n	8007d0c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f983 	bl	8007fe2 <HAL_CAN_TxMailbox0CompleteCallback>
 8007cdc:	e016      	b.n	8007d0c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d004      	beq.n	8007cf2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cf0:	e00c      	b.n	8007d0c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d04:	e002      	b.n	8007d0c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f989 	bl	800801e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d024      	beq.n	8007d60 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f963 	bl	8007ff6 <HAL_CAN_TxMailbox1CompleteCallback>
 8007d30:	e016      	b.n	8007d60 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d44:	e00c      	b.n	8007d60 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d58:	e002      	b.n	8007d60 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f969 	bl	8008032 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d024      	beq.n	8007db4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007d72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f943 	bl	800800a <HAL_CAN_TxMailbox2CompleteCallback>
 8007d84:	e016      	b.n	8007db4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d98:	e00c      	b.n	8007db4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dac:	e002      	b.n	8007db4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f949 	bl	8008046 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00c      	beq.n	8007dd8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007dce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2210      	movs	r2, #16
 8007dd6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2208      	movs	r2, #8
 8007df2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f930 	bl	800805a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d009      	beq.n	8007e18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7f9 fd1c 	bl	8001850 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00c      	beq.n	8007e3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00b      	beq.n	8007e5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d006      	beq.n	8007e5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2208      	movs	r2, #8
 8007e56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f912 	bl	8008082 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d009      	beq.n	8007e7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8f9 	bl	800806e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f003 0310 	and.w	r3, r3, #16
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d006      	beq.n	8007e9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2210      	movs	r2, #16
 8007e96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f8fc 	bl	8008096 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d006      	beq.n	8007ec0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2208      	movs	r2, #8
 8007eb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f8f5 	bl	80080aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d07b      	beq.n	8007fc2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d072      	beq.n	8007fba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	f043 0302 	orr.w	r3, r3, #2
 8007f0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d008      	beq.n	8007f28 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	f043 0304 	orr.w	r3, r3, #4
 8007f26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d043      	beq.n	8007fba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d03e      	beq.n	8007fba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f42:	2b60      	cmp	r3, #96	@ 0x60
 8007f44:	d02b      	beq.n	8007f9e <HAL_CAN_IRQHandler+0x32a>
 8007f46:	2b60      	cmp	r3, #96	@ 0x60
 8007f48:	d82e      	bhi.n	8007fa8 <HAL_CAN_IRQHandler+0x334>
 8007f4a:	2b50      	cmp	r3, #80	@ 0x50
 8007f4c:	d022      	beq.n	8007f94 <HAL_CAN_IRQHandler+0x320>
 8007f4e:	2b50      	cmp	r3, #80	@ 0x50
 8007f50:	d82a      	bhi.n	8007fa8 <HAL_CAN_IRQHandler+0x334>
 8007f52:	2b40      	cmp	r3, #64	@ 0x40
 8007f54:	d019      	beq.n	8007f8a <HAL_CAN_IRQHandler+0x316>
 8007f56:	2b40      	cmp	r3, #64	@ 0x40
 8007f58:	d826      	bhi.n	8007fa8 <HAL_CAN_IRQHandler+0x334>
 8007f5a:	2b30      	cmp	r3, #48	@ 0x30
 8007f5c:	d010      	beq.n	8007f80 <HAL_CAN_IRQHandler+0x30c>
 8007f5e:	2b30      	cmp	r3, #48	@ 0x30
 8007f60:	d822      	bhi.n	8007fa8 <HAL_CAN_IRQHandler+0x334>
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d002      	beq.n	8007f6c <HAL_CAN_IRQHandler+0x2f8>
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d005      	beq.n	8007f76 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007f6a:	e01d      	b.n	8007fa8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	f043 0308 	orr.w	r3, r3, #8
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007f74:	e019      	b.n	8007faa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	f043 0310 	orr.w	r3, r3, #16
 8007f7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007f7e:	e014      	b.n	8007faa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	f043 0320 	orr.w	r3, r3, #32
 8007f86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007f88:	e00f      	b.n	8007faa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007f92:	e00a      	b.n	8007faa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007f9c:	e005      	b.n	8007faa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007fa6:	e000      	b.n	8007faa <HAL_CAN_IRQHandler+0x336>
            break;
 8007fa8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007fb8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f872 	bl	80080be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3728      	adds	r7, #40	@ 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80080b2:	bf00      	nop
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <__NVIC_SetPriorityGrouping+0x44>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80080f0:	4013      	ands	r3, r2
 80080f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80080fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008106:	4a04      	ldr	r2, [pc, #16]	@ (8008118 <__NVIC_SetPriorityGrouping+0x44>)
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	60d3      	str	r3, [r2, #12]
}
 800810c:	bf00      	nop
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	e000ed00 	.word	0xe000ed00

0800811c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008120:	4b04      	ldr	r3, [pc, #16]	@ (8008134 <__NVIC_GetPriorityGrouping+0x18>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	0a1b      	lsrs	r3, r3, #8
 8008126:	f003 0307 	and.w	r3, r3, #7
}
 800812a:	4618      	mov	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	e000ed00 	.word	0xe000ed00

08008138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008146:	2b00      	cmp	r3, #0
 8008148:	db0b      	blt.n	8008162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	f003 021f 	and.w	r2, r3, #31
 8008150:	4907      	ldr	r1, [pc, #28]	@ (8008170 <__NVIC_EnableIRQ+0x38>)
 8008152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008156:	095b      	lsrs	r3, r3, #5
 8008158:	2001      	movs	r0, #1
 800815a:	fa00 f202 	lsl.w	r2, r0, r2
 800815e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	e000e100 	.word	0xe000e100

08008174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008184:	2b00      	cmp	r3, #0
 8008186:	db0a      	blt.n	800819e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	b2da      	uxtb	r2, r3
 800818c:	490c      	ldr	r1, [pc, #48]	@ (80081c0 <__NVIC_SetPriority+0x4c>)
 800818e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008192:	0112      	lsls	r2, r2, #4
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	440b      	add	r3, r1
 8008198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800819c:	e00a      	b.n	80081b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	4908      	ldr	r1, [pc, #32]	@ (80081c4 <__NVIC_SetPriority+0x50>)
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	3b04      	subs	r3, #4
 80081ac:	0112      	lsls	r2, r2, #4
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	440b      	add	r3, r1
 80081b2:	761a      	strb	r2, [r3, #24]
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	e000e100 	.word	0xe000e100
 80081c4:	e000ed00 	.word	0xe000ed00

080081c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b089      	sub	sp, #36	@ 0x24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f003 0307 	and.w	r3, r3, #7
 80081da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f1c3 0307 	rsb	r3, r3, #7
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	bf28      	it	cs
 80081e6:	2304      	movcs	r3, #4
 80081e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	3304      	adds	r3, #4
 80081ee:	2b06      	cmp	r3, #6
 80081f0:	d902      	bls.n	80081f8 <NVIC_EncodePriority+0x30>
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	3b03      	subs	r3, #3
 80081f6:	e000      	b.n	80081fa <NVIC_EncodePriority+0x32>
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	43da      	mvns	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	401a      	ands	r2, r3
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008210:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	fa01 f303 	lsl.w	r3, r1, r3
 800821a:	43d9      	mvns	r1, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008220:	4313      	orrs	r3, r2
         );
}
 8008222:	4618      	mov	r0, r3
 8008224:	3724      	adds	r7, #36	@ 0x24
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
	...

08008230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3b01      	subs	r3, #1
 800823c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008240:	d301      	bcc.n	8008246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008242:	2301      	movs	r3, #1
 8008244:	e00f      	b.n	8008266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008246:	4a0a      	ldr	r2, [pc, #40]	@ (8008270 <SysTick_Config+0x40>)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3b01      	subs	r3, #1
 800824c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800824e:	210f      	movs	r1, #15
 8008250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008254:	f7ff ff8e 	bl	8008174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <SysTick_Config+0x40>)
 800825a:	2200      	movs	r2, #0
 800825c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800825e:	4b04      	ldr	r3, [pc, #16]	@ (8008270 <SysTick_Config+0x40>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	e000e010 	.word	0xe000e010

08008274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff ff29 	bl	80080d4 <__NVIC_SetPriorityGrouping>
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800828a:	b580      	push	{r7, lr}
 800828c:	b086      	sub	sp, #24
 800828e:	af00      	add	r7, sp, #0
 8008290:	4603      	mov	r3, r0
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800829c:	f7ff ff3e 	bl	800811c <__NVIC_GetPriorityGrouping>
 80082a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	6978      	ldr	r0, [r7, #20]
 80082a8:	f7ff ff8e 	bl	80081c8 <NVIC_EncodePriority>
 80082ac:	4602      	mov	r2, r0
 80082ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082b2:	4611      	mov	r1, r2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff ff5d 	bl	8008174 <__NVIC_SetPriority>
}
 80082ba:	bf00      	nop
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	4603      	mov	r3, r0
 80082ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80082cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff ff31 	bl	8008138 <__NVIC_EnableIRQ>
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ffa2 	bl	8008230 <SysTick_Config>
 80082ec:	4603      	mov	r3, r0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008304:	f7ff f84e 	bl	80073a4 <HAL_GetTick>
 8008308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e099      	b.n	8008448 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0201 	bic.w	r2, r2, #1
 8008332:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008334:	e00f      	b.n	8008356 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008336:	f7ff f835 	bl	80073a4 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b05      	cmp	r3, #5
 8008342:	d908      	bls.n	8008356 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2203      	movs	r2, #3
 800834e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e078      	b.n	8008448 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e8      	bne.n	8008336 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4b38      	ldr	r3, [pc, #224]	@ (8008450 <HAL_DMA_Init+0x158>)
 8008370:	4013      	ands	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008382:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800838e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800839a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d107      	bne.n	80083c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b8:	4313      	orrs	r3, r2
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f023 0307 	bic.w	r3, r3, #7
 80083d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d117      	bne.n	800841a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fb01 	bl	8008a04 <DMA_CheckFifoParam>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2240      	movs	r2, #64	@ 0x40
 800840c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008416:	2301      	movs	r3, #1
 8008418:	e016      	b.n	8008448 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fab8 	bl	8008998 <DMA_CalcBaseAndBitshift>
 8008428:	4603      	mov	r3, r0
 800842a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008430:	223f      	movs	r2, #63	@ 0x3f
 8008432:	409a      	lsls	r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	f010803f 	.word	0xf010803f

08008454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800846a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <HAL_DMA_Start_IT+0x26>
 8008476:	2302      	movs	r3, #2
 8008478:	e040      	b.n	80084fc <HAL_DMA_Start_IT+0xa8>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b01      	cmp	r3, #1
 800848c:	d12f      	bne.n	80084ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2202      	movs	r2, #2
 8008492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fa4a 	bl	800893c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ac:	223f      	movs	r2, #63	@ 0x3f
 80084ae:	409a      	lsls	r2, r3
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0216 	orr.w	r2, r2, #22
 80084c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d007      	beq.n	80084dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0208 	orr.w	r2, r2, #8
 80084da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0201 	orr.w	r2, r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	e005      	b.n	80084fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80084f6:	2302      	movs	r3, #2
 80084f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008512:	f7fe ff47 	bl	80073a4 <HAL_GetTick>
 8008516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d008      	beq.n	8008536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2280      	movs	r2, #128	@ 0x80
 8008528:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e052      	b.n	80085dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0216 	bic.w	r2, r2, #22
 8008544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	695a      	ldr	r2, [r3, #20]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <HAL_DMA_Abort+0x62>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008562:	2b00      	cmp	r3, #0
 8008564:	d007      	beq.n	8008576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0208 	bic.w	r2, r2, #8
 8008574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0201 	bic.w	r2, r2, #1
 8008584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008586:	e013      	b.n	80085b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008588:	f7fe ff0c 	bl	80073a4 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b05      	cmp	r3, #5
 8008594:	d90c      	bls.n	80085b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2203      	movs	r2, #3
 80085a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e015      	b.n	80085dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e4      	bne.n	8008588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c2:	223f      	movs	r2, #63	@ 0x3f
 80085c4:	409a      	lsls	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d004      	beq.n	8008602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2280      	movs	r2, #128	@ 0x80
 80085fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e00c      	b.n	800861c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2205      	movs	r2, #5
 8008606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f022 0201 	bic.w	r2, r2, #1
 8008618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008634:	4b8e      	ldr	r3, [pc, #568]	@ (8008870 <HAL_DMA_IRQHandler+0x248>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a8e      	ldr	r2, [pc, #568]	@ (8008874 <HAL_DMA_IRQHandler+0x24c>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	0a9b      	lsrs	r3, r3, #10
 8008640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008652:	2208      	movs	r2, #8
 8008654:	409a      	lsls	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01a      	beq.n	8008694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d013      	beq.n	8008694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0204 	bic.w	r2, r2, #4
 800867a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008680:	2208      	movs	r2, #8
 8008682:	409a      	lsls	r2, r3
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800868c:	f043 0201 	orr.w	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008698:	2201      	movs	r2, #1
 800869a:	409a      	lsls	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4013      	ands	r3, r2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d012      	beq.n	80086ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b6:	2201      	movs	r2, #1
 80086b8:	409a      	lsls	r2, r3
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c2:	f043 0202 	orr.w	r2, r3, #2
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ce:	2204      	movs	r2, #4
 80086d0:	409a      	lsls	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4013      	ands	r3, r2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d012      	beq.n	8008700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00b      	beq.n	8008700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ec:	2204      	movs	r2, #4
 80086ee:	409a      	lsls	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f8:	f043 0204 	orr.w	r2, r3, #4
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008704:	2210      	movs	r2, #16
 8008706:	409a      	lsls	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d043      	beq.n	8008798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d03c      	beq.n	8008798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008722:	2210      	movs	r2, #16
 8008724:	409a      	lsls	r2, r3
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d018      	beq.n	800876a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d108      	bne.n	8008758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d024      	beq.n	8008798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
 8008756:	e01f      	b.n	8008798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01b      	beq.n	8008798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
 8008768:	e016      	b.n	8008798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008774:	2b00      	cmp	r3, #0
 8008776:	d107      	bne.n	8008788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f022 0208 	bic.w	r2, r2, #8
 8008786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800879c:	2220      	movs	r2, #32
 800879e:	409a      	lsls	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 808f 	beq.w	80088c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8087 	beq.w	80088c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087be:	2220      	movs	r2, #32
 80087c0:	409a      	lsls	r2, r3
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d136      	bne.n	8008840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0216 	bic.w	r2, r2, #22
 80087e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	695a      	ldr	r2, [r3, #20]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <HAL_DMA_IRQHandler+0x1da>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d007      	beq.n	8008812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0208 	bic.w	r2, r2, #8
 8008810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008816:	223f      	movs	r2, #63	@ 0x3f
 8008818:	409a      	lsls	r2, r3
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008832:	2b00      	cmp	r3, #0
 8008834:	d07e      	beq.n	8008934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
        }
        return;
 800883e:	e079      	b.n	8008934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01d      	beq.n	800888a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10d      	bne.n	8008878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008860:	2b00      	cmp	r3, #0
 8008862:	d031      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	4798      	blx	r3
 800886c:	e02c      	b.n	80088c8 <HAL_DMA_IRQHandler+0x2a0>
 800886e:	bf00      	nop
 8008870:	20000154 	.word	0x20000154
 8008874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d023      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
 8008888:	e01e      	b.n	80088c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10f      	bne.n	80088b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0210 	bic.w	r2, r2, #16
 80088a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d032      	beq.n	8008936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d022      	beq.n	8008922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2205      	movs	r2, #5
 80088e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	3301      	adds	r3, #1
 80088f8:	60bb      	str	r3, [r7, #8]
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d307      	bcc.n	8008910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f2      	bne.n	80088f4 <HAL_DMA_IRQHandler+0x2cc>
 800890e:	e000      	b.n	8008912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
 8008932:	e000      	b.n	8008936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008934:	bf00      	nop
    }
  }
}
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b40      	cmp	r3, #64	@ 0x40
 8008968:	d108      	bne.n	800897c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800897a:	e007      	b.n	800898c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	60da      	str	r2, [r3, #12]
}
 800898c:	bf00      	nop
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	3b10      	subs	r3, #16
 80089a8:	4a14      	ldr	r2, [pc, #80]	@ (80089fc <DMA_CalcBaseAndBitshift+0x64>)
 80089aa:	fba2 2303 	umull	r2, r3, r2, r3
 80089ae:	091b      	lsrs	r3, r3, #4
 80089b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80089b2:	4a13      	ldr	r2, [pc, #76]	@ (8008a00 <DMA_CalcBaseAndBitshift+0x68>)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d909      	bls.n	80089da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	1d1a      	adds	r2, r3, #4
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80089d8:	e007      	b.n	80089ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80089e2:	f023 0303 	bic.w	r3, r3, #3
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	aaaaaaab 	.word	0xaaaaaaab
 8008a00:	08014230 	.word	0x08014230

08008a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d11f      	bne.n	8008a5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d856      	bhi.n	8008ad2 <DMA_CheckFifoParam+0xce>
 8008a24:	a201      	add	r2, pc, #4	@ (adr r2, 8008a2c <DMA_CheckFifoParam+0x28>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008a3d 	.word	0x08008a3d
 8008a30:	08008a4f 	.word	0x08008a4f
 8008a34:	08008a3d 	.word	0x08008a3d
 8008a38:	08008ad3 	.word	0x08008ad3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d046      	beq.n	8008ad6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a4c:	e043      	b.n	8008ad6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008a56:	d140      	bne.n	8008ada <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a5c:	e03d      	b.n	8008ada <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a66:	d121      	bne.n	8008aac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d837      	bhi.n	8008ade <DMA_CheckFifoParam+0xda>
 8008a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a74 <DMA_CheckFifoParam+0x70>)
 8008a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008a8b 	.word	0x08008a8b
 8008a7c:	08008a85 	.word	0x08008a85
 8008a80:	08008a9d 	.word	0x08008a9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
      break;
 8008a88:	e030      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d025      	beq.n	8008ae2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a9a:	e022      	b.n	8008ae2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008aa4:	d11f      	bne.n	8008ae6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008aaa:	e01c      	b.n	8008ae6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d903      	bls.n	8008aba <DMA_CheckFifoParam+0xb6>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d003      	beq.n	8008ac0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008ab8:	e018      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	73fb      	strb	r3, [r7, #15]
      break;
 8008abe:	e015      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00e      	beq.n	8008aea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad0:	e00b      	b.n	8008aea <DMA_CheckFifoParam+0xe6>
      break;
 8008ad2:	bf00      	nop
 8008ad4:	e00a      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      break;
 8008ad6:	bf00      	nop
 8008ad8:	e008      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      break;
 8008ada:	bf00      	nop
 8008adc:	e006      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      break;
 8008ade:	bf00      	nop
 8008ae0:	e004      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      break;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      break;   
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <DMA_CheckFifoParam+0xe8>
      break;
 8008aea:	bf00      	nop
    }
  } 
  
  return status; 
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop

08008afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	@ 0x24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b12:	2300      	movs	r3, #0
 8008b14:	61fb      	str	r3, [r7, #28]
 8008b16:	e16b      	b.n	8008df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b18:	2201      	movs	r2, #1
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	f040 815a 	bne.w	8008dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d005      	beq.n	8008b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d130      	bne.n	8008bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	2203      	movs	r2, #3
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	43db      	mvns	r3, r3
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	4013      	ands	r3, r2
 8008b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b84:	2201      	movs	r2, #1
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8c:	43db      	mvns	r3, r3
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	4013      	ands	r3, r2
 8008b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	091b      	lsrs	r3, r3, #4
 8008b9a:	f003 0201 	and.w	r2, r3, #1
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d017      	beq.n	8008bec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bcc:	43db      	mvns	r3, r3
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d123      	bne.n	8008c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	08da      	lsrs	r2, r3, #3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3208      	adds	r2, #8
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	220f      	movs	r2, #15
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	43db      	mvns	r3, r3
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	691a      	ldr	r2, [r3, #16]
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	08da      	lsrs	r2, r3, #3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3208      	adds	r2, #8
 8008c3a:	69b9      	ldr	r1, [r7, #24]
 8008c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c50:	43db      	mvns	r3, r3
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	4013      	ands	r3, r2
 8008c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f003 0203 	and.w	r2, r3, #3
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	fa02 f303 	lsl.w	r3, r2, r3
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80b4 	beq.w	8008dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	4b60      	ldr	r3, [pc, #384]	@ (8008e08 <HAL_GPIO_Init+0x30c>)
 8008c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8a:	4a5f      	ldr	r2, [pc, #380]	@ (8008e08 <HAL_GPIO_Init+0x30c>)
 8008c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c92:	4b5d      	ldr	r3, [pc, #372]	@ (8008e08 <HAL_GPIO_Init+0x30c>)
 8008c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8008e0c <HAL_GPIO_Init+0x310>)
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	089b      	lsrs	r3, r3, #2
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	220f      	movs	r2, #15
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a52      	ldr	r2, [pc, #328]	@ (8008e10 <HAL_GPIO_Init+0x314>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d02b      	beq.n	8008d22 <HAL_GPIO_Init+0x226>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a51      	ldr	r2, [pc, #324]	@ (8008e14 <HAL_GPIO_Init+0x318>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d025      	beq.n	8008d1e <HAL_GPIO_Init+0x222>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a50      	ldr	r2, [pc, #320]	@ (8008e18 <HAL_GPIO_Init+0x31c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d01f      	beq.n	8008d1a <HAL_GPIO_Init+0x21e>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8008e1c <HAL_GPIO_Init+0x320>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d019      	beq.n	8008d16 <HAL_GPIO_Init+0x21a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8008e20 <HAL_GPIO_Init+0x324>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d013      	beq.n	8008d12 <HAL_GPIO_Init+0x216>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a4d      	ldr	r2, [pc, #308]	@ (8008e24 <HAL_GPIO_Init+0x328>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00d      	beq.n	8008d0e <HAL_GPIO_Init+0x212>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8008e28 <HAL_GPIO_Init+0x32c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d007      	beq.n	8008d0a <HAL_GPIO_Init+0x20e>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8008e2c <HAL_GPIO_Init+0x330>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d101      	bne.n	8008d06 <HAL_GPIO_Init+0x20a>
 8008d02:	2307      	movs	r3, #7
 8008d04:	e00e      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d06:	2308      	movs	r3, #8
 8008d08:	e00c      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d0a:	2306      	movs	r3, #6
 8008d0c:	e00a      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d0e:	2305      	movs	r3, #5
 8008d10:	e008      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d12:	2304      	movs	r3, #4
 8008d14:	e006      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d16:	2303      	movs	r3, #3
 8008d18:	e004      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e002      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <HAL_GPIO_Init+0x228>
 8008d22:	2300      	movs	r3, #0
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	f002 0203 	and.w	r2, r2, #3
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	4093      	lsls	r3, r2
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d34:	4935      	ldr	r1, [pc, #212]	@ (8008e0c <HAL_GPIO_Init+0x310>)
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	089b      	lsrs	r3, r3, #2
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d42:	4b3b      	ldr	r3, [pc, #236]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	43db      	mvns	r3, r3
 8008d4c:	69ba      	ldr	r2, [r7, #24]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d66:	4a32      	ldr	r2, [pc, #200]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d6c:	4b30      	ldr	r3, [pc, #192]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	43db      	mvns	r3, r3
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	4013      	ands	r3, r2
 8008d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d90:	4a27      	ldr	r2, [pc, #156]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008d96:	4b26      	ldr	r3, [pc, #152]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	43db      	mvns	r3, r3
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	4013      	ands	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008dba:	4a1d      	ldr	r2, [pc, #116]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	43db      	mvns	r3, r3
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008ddc:	69ba      	ldr	r2, [r7, #24]
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008de4:	4a12      	ldr	r2, [pc, #72]	@ (8008e30 <HAL_GPIO_Init+0x334>)
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	3301      	adds	r3, #1
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	2b0f      	cmp	r3, #15
 8008df4:	f67f ae90 	bls.w	8008b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	3724      	adds	r7, #36	@ 0x24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	40023800 	.word	0x40023800
 8008e0c:	40013800 	.word	0x40013800
 8008e10:	40020000 	.word	0x40020000
 8008e14:	40020400 	.word	0x40020400
 8008e18:	40020800 	.word	0x40020800
 8008e1c:	40020c00 	.word	0x40020c00
 8008e20:	40021000 	.word	0x40021000
 8008e24:	40021400 	.word	0x40021400
 8008e28:	40021800 	.word	0x40021800
 8008e2c:	40021c00 	.word	0x40021c00
 8008e30:	40013c00 	.word	0x40013c00

08008e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
 8008e40:	4613      	mov	r3, r2
 8008e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e44:	787b      	ldrb	r3, [r7, #1]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e4a:	887a      	ldrh	r2, [r7, #2]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e50:	e003      	b.n	8008e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e52:	887b      	ldrh	r3, [r7, #2]
 8008e54:	041a      	lsls	r2, r3, #16
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	619a      	str	r2, [r3, #24]
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
	...

08008e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e72:	4b08      	ldr	r3, [pc, #32]	@ (8008e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d006      	beq.n	8008e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e7e:	4a05      	ldr	r2, [pc, #20]	@ (8008e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e80:	88fb      	ldrh	r3, [r7, #6]
 8008e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e84:	88fb      	ldrh	r3, [r7, #6]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fa fbf6 	bl	8003678 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	40013c00 	.word	0x40013c00

08008e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e12b      	b.n	8009102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d106      	bne.n	8008ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7fd fb72 	bl	80065a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2224      	movs	r2, #36	@ 0x24
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0201 	bic.w	r2, r2, #1
 8008eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008efc:	f001 fc2c 	bl	800a758 <HAL_RCC_GetPCLK1Freq>
 8008f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	4a81      	ldr	r2, [pc, #516]	@ (800910c <HAL_I2C_Init+0x274>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d807      	bhi.n	8008f1c <HAL_I2C_Init+0x84>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4a80      	ldr	r2, [pc, #512]	@ (8009110 <HAL_I2C_Init+0x278>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	bf94      	ite	ls
 8008f14:	2301      	movls	r3, #1
 8008f16:	2300      	movhi	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	e006      	b.n	8008f2a <HAL_I2C_Init+0x92>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a7d      	ldr	r2, [pc, #500]	@ (8009114 <HAL_I2C_Init+0x27c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	bf94      	ite	ls
 8008f24:	2301      	movls	r3, #1
 8008f26:	2300      	movhi	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e0e7      	b.n	8009102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4a78      	ldr	r2, [pc, #480]	@ (8009118 <HAL_I2C_Init+0x280>)
 8008f36:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3a:	0c9b      	lsrs	r3, r3, #18
 8008f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	4a6a      	ldr	r2, [pc, #424]	@ (800910c <HAL_I2C_Init+0x274>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d802      	bhi.n	8008f6c <HAL_I2C_Init+0xd4>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	e009      	b.n	8008f80 <HAL_I2C_Init+0xe8>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008f72:	fb02 f303 	mul.w	r3, r2, r3
 8008f76:	4a69      	ldr	r2, [pc, #420]	@ (800911c <HAL_I2C_Init+0x284>)
 8008f78:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7c:	099b      	lsrs	r3, r3, #6
 8008f7e:	3301      	adds	r3, #1
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	430b      	orrs	r3, r1
 8008f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008f92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	495c      	ldr	r1, [pc, #368]	@ (800910c <HAL_I2C_Init+0x274>)
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	d819      	bhi.n	8008fd4 <HAL_I2C_Init+0x13c>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	1e59      	subs	r1, r3, #1
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fae:	1c59      	adds	r1, r3, #1
 8008fb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008fb4:	400b      	ands	r3, r1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_I2C_Init+0x138>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	1e59      	subs	r1, r3, #1
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fc8:	3301      	adds	r3, #1
 8008fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fce:	e051      	b.n	8009074 <HAL_I2C_Init+0x1dc>
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	e04f      	b.n	8009074 <HAL_I2C_Init+0x1dc>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d111      	bne.n	8009000 <HAL_I2C_Init+0x168>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	1e58      	subs	r0, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6859      	ldr	r1, [r3, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	440b      	add	r3, r1
 8008fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fee:	3301      	adds	r3, #1
 8008ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2301      	moveq	r3, #1
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	e012      	b.n	8009026 <HAL_I2C_Init+0x18e>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	1e58      	subs	r0, r3, #1
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6859      	ldr	r1, [r3, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	440b      	add	r3, r1
 800900e:	0099      	lsls	r1, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	fbb0 f3f3 	udiv	r3, r0, r3
 8009016:	3301      	adds	r3, #1
 8009018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800901c:	2b00      	cmp	r3, #0
 800901e:	bf0c      	ite	eq
 8009020:	2301      	moveq	r3, #1
 8009022:	2300      	movne	r3, #0
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <HAL_I2C_Init+0x196>
 800902a:	2301      	movs	r3, #1
 800902c:	e022      	b.n	8009074 <HAL_I2C_Init+0x1dc>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10e      	bne.n	8009054 <HAL_I2C_Init+0x1bc>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1e58      	subs	r0, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6859      	ldr	r1, [r3, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	005b      	lsls	r3, r3, #1
 8009042:	440b      	add	r3, r1
 8009044:	fbb0 f3f3 	udiv	r3, r0, r3
 8009048:	3301      	adds	r3, #1
 800904a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800904e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009052:	e00f      	b.n	8009074 <HAL_I2C_Init+0x1dc>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	1e58      	subs	r0, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6859      	ldr	r1, [r3, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	440b      	add	r3, r1
 8009062:	0099      	lsls	r1, r3, #2
 8009064:	440b      	add	r3, r1
 8009066:	fbb0 f3f3 	udiv	r3, r0, r3
 800906a:	3301      	adds	r3, #1
 800906c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	6809      	ldr	r1, [r1, #0]
 8009078:	4313      	orrs	r3, r2
 800907a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	69da      	ldr	r2, [r3, #28]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	431a      	orrs	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80090a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6911      	ldr	r1, [r2, #16]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68d2      	ldr	r2, [r2, #12]
 80090ae:	4311      	orrs	r1, r2
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	430b      	orrs	r3, r1
 80090b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	695a      	ldr	r2, [r3, #20]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	000186a0 	.word	0x000186a0
 8009110:	001e847f 	.word	0x001e847f
 8009114:	003d08ff 	.word	0x003d08ff
 8009118:	431bde83 	.word	0x431bde83
 800911c:	10624dd3 	.word	0x10624dd3

08009120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af02      	add	r7, sp, #8
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	461a      	mov	r2, r3
 800912e:	4603      	mov	r3, r0
 8009130:	817b      	strh	r3, [r7, #10]
 8009132:	460b      	mov	r3, r1
 8009134:	813b      	strh	r3, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800913a:	f7fe f933 	bl	80073a4 <HAL_GetTick>
 800913e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b20      	cmp	r3, #32
 800914a:	f040 80d9 	bne.w	8009300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	2319      	movs	r3, #25
 8009154:	2201      	movs	r2, #1
 8009156:	496d      	ldr	r1, [pc, #436]	@ (800930c <HAL_I2C_Mem_Write+0x1ec>)
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 fc8b 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009164:	2302      	movs	r3, #2
 8009166:	e0cc      	b.n	8009302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <HAL_I2C_Mem_Write+0x56>
 8009172:	2302      	movs	r3, #2
 8009174:	e0c5      	b.n	8009302 <HAL_I2C_Mem_Write+0x1e2>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b01      	cmp	r3, #1
 800918a:	d007      	beq.n	800919c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2221      	movs	r2, #33	@ 0x21
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2240      	movs	r2, #64	@ 0x40
 80091b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a3a      	ldr	r2, [r7, #32]
 80091c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80091cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4a4d      	ldr	r2, [pc, #308]	@ (8009310 <HAL_I2C_Mem_Write+0x1f0>)
 80091dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091de:	88f8      	ldrh	r0, [r7, #6]
 80091e0:	893a      	ldrh	r2, [r7, #8]
 80091e2:	8979      	ldrh	r1, [r7, #10]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	4603      	mov	r3, r0
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 fac2 	bl	8009778 <I2C_RequestMemoryWrite>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d052      	beq.n	80092a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e081      	b.n	8009302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 fd50 	bl	8009ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00d      	beq.n	800922a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009212:	2b04      	cmp	r3, #4
 8009214:	d107      	bne.n	8009226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e06b      	b.n	8009302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009250:	b29b      	uxth	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	b29a      	uxth	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b04      	cmp	r3, #4
 8009266:	d11b      	bne.n	80092a0 <HAL_I2C_Mem_Write+0x180>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800926c:	2b00      	cmp	r3, #0
 800926e:	d017      	beq.n	80092a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	781a      	ldrb	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800928a:	3b01      	subs	r3, #1
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1aa      	bne.n	80091fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 fd43 	bl	8009d38 <I2C_WaitOnBTFFlagUntilTimeout>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00d      	beq.n	80092d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d107      	bne.n	80092d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e016      	b.n	8009302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	e000      	b.n	8009302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009300:	2302      	movs	r3, #2
  }
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	00100002 	.word	0x00100002
 8009310:	ffff0000 	.word	0xffff0000

08009314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08c      	sub	sp, #48	@ 0x30
 8009318:	af02      	add	r7, sp, #8
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	4608      	mov	r0, r1
 800931e:	4611      	mov	r1, r2
 8009320:	461a      	mov	r2, r3
 8009322:	4603      	mov	r3, r0
 8009324:	817b      	strh	r3, [r7, #10]
 8009326:	460b      	mov	r3, r1
 8009328:	813b      	strh	r3, [r7, #8]
 800932a:	4613      	mov	r3, r2
 800932c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800932e:	f7fe f839 	bl	80073a4 <HAL_GetTick>
 8009332:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b20      	cmp	r3, #32
 800933e:	f040 8214 	bne.w	800976a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	2319      	movs	r3, #25
 8009348:	2201      	movs	r2, #1
 800934a:	497b      	ldr	r1, [pc, #492]	@ (8009538 <HAL_I2C_Mem_Read+0x224>)
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 fb91 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009358:	2302      	movs	r3, #2
 800935a:	e207      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <HAL_I2C_Mem_Read+0x56>
 8009366:	2302      	movs	r3, #2
 8009368:	e200      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b01      	cmp	r3, #1
 800937e:	d007      	beq.n	8009390 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0201 	orr.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800939e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2222      	movs	r2, #34	@ 0x22
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2240      	movs	r2, #64	@ 0x40
 80093ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80093c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4a5b      	ldr	r2, [pc, #364]	@ (800953c <HAL_I2C_Mem_Read+0x228>)
 80093d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093d2:	88f8      	ldrh	r0, [r7, #6]
 80093d4:	893a      	ldrh	r2, [r7, #8]
 80093d6:	8979      	ldrh	r1, [r7, #10]
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4603      	mov	r3, r0
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fa5e 	bl	80098a4 <I2C_RequestMemoryRead>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e1bc      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d113      	bne.n	8009422 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093fa:	2300      	movs	r3, #0
 80093fc:	623b      	str	r3, [r7, #32]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	623b      	str	r3, [r7, #32]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	623b      	str	r3, [r7, #32]
 800940e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	e190      	b.n	8009744 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009426:	2b01      	cmp	r3, #1
 8009428:	d11b      	bne.n	8009462 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800943a:	2300      	movs	r3, #0
 800943c:	61fb      	str	r3, [r7, #28]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	61fb      	str	r3, [r7, #28]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	61fb      	str	r3, [r7, #28]
 800944e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	e170      	b.n	8009744 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009466:	2b02      	cmp	r3, #2
 8009468:	d11b      	bne.n	80094a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009478:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800948a:	2300      	movs	r3, #0
 800948c:	61bb      	str	r3, [r7, #24]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	61bb      	str	r3, [r7, #24]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	e150      	b.n	8009744 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80094b8:	e144      	b.n	8009744 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094be:	2b03      	cmp	r3, #3
 80094c0:	f200 80f1 	bhi.w	80096a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d123      	bne.n	8009514 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fc79 	bl	8009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e145      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ea:	b2d2      	uxtb	r2, r2
 80094ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009512:	e117      	b.n	8009744 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009518:	2b02      	cmp	r3, #2
 800951a:	d14e      	bne.n	80095ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800951c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009522:	2200      	movs	r2, #0
 8009524:	4906      	ldr	r1, [pc, #24]	@ (8009540 <HAL_I2C_Mem_Read+0x22c>)
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 faa4 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d008      	beq.n	8009544 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e11a      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
 8009536:	bf00      	nop
 8009538:	00100002 	.word	0x00100002
 800953c:	ffff0000 	.word	0xffff0000
 8009540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009570:	3b01      	subs	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80095b8:	e0c4      	b.n	8009744 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c0:	2200      	movs	r2, #0
 80095c2:	496c      	ldr	r1, [pc, #432]	@ (8009774 <HAL_I2C_Mem_Read+0x460>)
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 fa55 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0cb      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691a      	ldr	r2, [r3, #16]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	2200      	movs	r2, #0
 800961e:	4955      	ldr	r1, [pc, #340]	@ (8009774 <HAL_I2C_Mem_Read+0x460>)
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 fa27 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e09d      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800963e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691a      	ldr	r2, [r3, #16]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	b29a      	uxth	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	691a      	ldr	r2, [r3, #16]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800968e:	3b01      	subs	r3, #1
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80096a4:	e04e      	b.n	8009744 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 fb8c 	bl	8009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e058      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691a      	ldr	r2, [r3, #16]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c4:	b2d2      	uxtb	r2, r2
 80096c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	d124      	bne.n	8009744 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d107      	bne.n	8009712 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009710:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009748:	2b00      	cmp	r3, #0
 800974a:	f47f aeb6 	bne.w	80094ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2220      	movs	r2, #32
 8009752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e000      	b.n	800976c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800976a:	2302      	movs	r3, #2
  }
}
 800976c:	4618      	mov	r0, r3
 800976e:	3728      	adds	r7, #40	@ 0x28
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	00010004 	.word	0x00010004

08009778 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	4608      	mov	r0, r1
 8009782:	4611      	mov	r1, r2
 8009784:	461a      	mov	r2, r3
 8009786:	4603      	mov	r3, r0
 8009788:	817b      	strh	r3, [r7, #10]
 800978a:	460b      	mov	r3, r1
 800978c:	813b      	strh	r3, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f960 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00d      	beq.n	80097d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097c8:	d103      	bne.n	80097d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e05f      	b.n	8009896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097d6:	897b      	ldrh	r3, [r7, #10]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	461a      	mov	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80097e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	6a3a      	ldr	r2, [r7, #32]
 80097ea:	492d      	ldr	r1, [pc, #180]	@ (80098a0 <I2C_RequestMemoryWrite+0x128>)
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 f9bb 	bl	8009b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e04c      	b.n	8009896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097fc:	2300      	movs	r3, #0
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	617b      	str	r3, [r7, #20]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009814:	6a39      	ldr	r1, [r7, #32]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fa46 	bl	8009ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00d      	beq.n	800983e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009826:	2b04      	cmp	r3, #4
 8009828:	d107      	bne.n	800983a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e02b      	b.n	8009896 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d105      	bne.n	8009850 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009844:	893b      	ldrh	r3, [r7, #8]
 8009846:	b2da      	uxtb	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	611a      	str	r2, [r3, #16]
 800984e:	e021      	b.n	8009894 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009850:	893b      	ldrh	r3, [r7, #8]
 8009852:	0a1b      	lsrs	r3, r3, #8
 8009854:	b29b      	uxth	r3, r3
 8009856:	b2da      	uxtb	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800985e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009860:	6a39      	ldr	r1, [r7, #32]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fa20 	bl	8009ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00d      	beq.n	800988a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009872:	2b04      	cmp	r3, #4
 8009874:	d107      	bne.n	8009886 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e005      	b.n	8009896 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800988a:	893b      	ldrh	r3, [r7, #8]
 800988c:	b2da      	uxtb	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	00010002 	.word	0x00010002

080098a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af02      	add	r7, sp, #8
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	4608      	mov	r0, r1
 80098ae:	4611      	mov	r1, r2
 80098b0:	461a      	mov	r2, r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	817b      	strh	r3, [r7, #10]
 80098b6:	460b      	mov	r3, r1
 80098b8:	813b      	strh	r3, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f8c2 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00d      	beq.n	8009912 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009904:	d103      	bne.n	800990e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800990c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e0aa      	b.n	8009a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009912:	897b      	ldrh	r3, [r7, #10]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009920:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	6a3a      	ldr	r2, [r7, #32]
 8009926:	4952      	ldr	r1, [pc, #328]	@ (8009a70 <I2C_RequestMemoryRead+0x1cc>)
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 f91d 	bl	8009b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e097      	b.n	8009a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800994e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009950:	6a39      	ldr	r1, [r7, #32]
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f9a8 	bl	8009ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00d      	beq.n	800997a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009962:	2b04      	cmp	r3, #4
 8009964:	d107      	bne.n	8009976 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009974:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e076      	b.n	8009a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800997a:	88fb      	ldrh	r3, [r7, #6]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d105      	bne.n	800998c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009980:	893b      	ldrh	r3, [r7, #8]
 8009982:	b2da      	uxtb	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	611a      	str	r2, [r3, #16]
 800998a:	e021      	b.n	80099d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800998c:	893b      	ldrh	r3, [r7, #8]
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	b29b      	uxth	r3, r3
 8009992:	b2da      	uxtb	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800999a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800999c:	6a39      	ldr	r1, [r7, #32]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 f982 	bl	8009ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00d      	beq.n	80099c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d107      	bne.n	80099c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e050      	b.n	8009a68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099c6:	893b      	ldrh	r3, [r7, #8]
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d2:	6a39      	ldr	r1, [r7, #32]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f967 	bl	8009ca8 <I2C_WaitOnTXEFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00d      	beq.n	80099fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d107      	bne.n	80099f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e035      	b.n	8009a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 f82b 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00d      	beq.n	8009a40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a32:	d103      	bne.n	8009a3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e013      	b.n	8009a68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009a40:	897b      	ldrh	r3, [r7, #10]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	f043 0301 	orr.w	r3, r3, #1
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	4906      	ldr	r1, [pc, #24]	@ (8009a70 <I2C_RequestMemoryRead+0x1cc>)
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f886 	bl	8009b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	00010002 	.word	0x00010002

08009a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	4613      	mov	r3, r2
 8009a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a84:	e048      	b.n	8009b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a8c:	d044      	beq.n	8009b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a8e:	f7fd fc89 	bl	80073a4 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d302      	bcc.n	8009aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d139      	bne.n	8009b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	0c1b      	lsrs	r3, r3, #16
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d10d      	bne.n	8009aca <I2C_WaitOnFlagUntilTimeout+0x56>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	43da      	mvns	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bf0c      	ite	eq
 8009ac0:	2301      	moveq	r3, #1
 8009ac2:	2300      	movne	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	e00c      	b.n	8009ae4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	43da      	mvns	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	bf0c      	ite	eq
 8009adc:	2301      	moveq	r3, #1
 8009ade:	2300      	movne	r3, #0
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d116      	bne.n	8009b18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2220      	movs	r2, #32
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b04:	f043 0220 	orr.w	r2, r3, #32
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e023      	b.n	8009b60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	0c1b      	lsrs	r3, r3, #16
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d10d      	bne.n	8009b3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	43da      	mvns	r2, r3
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	bf0c      	ite	eq
 8009b34:	2301      	moveq	r3, #1
 8009b36:	2300      	movne	r3, #0
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	e00c      	b.n	8009b58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	43da      	mvns	r2, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4013      	ands	r3, r2
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bf0c      	ite	eq
 8009b50:	2301      	moveq	r3, #1
 8009b52:	2300      	movne	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	461a      	mov	r2, r3
 8009b58:	79fb      	ldrb	r3, [r7, #7]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d093      	beq.n	8009a86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b76:	e071      	b.n	8009c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b86:	d123      	bne.n	8009bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bbc:	f043 0204 	orr.w	r2, r3, #4
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e067      	b.n	8009ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bd6:	d041      	beq.n	8009c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd8:	f7fd fbe4 	bl	80073a4 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d302      	bcc.n	8009bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d136      	bne.n	8009c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	0c1b      	lsrs	r3, r3, #16
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d10c      	bne.n	8009c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	43da      	mvns	r2, r3
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	4013      	ands	r3, r2
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	bf14      	ite	ne
 8009c0a:	2301      	movne	r3, #1
 8009c0c:	2300      	moveq	r3, #0
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	e00b      	b.n	8009c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	43da      	mvns	r2, r3
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	bf14      	ite	ne
 8009c24:	2301      	movne	r3, #1
 8009c26:	2300      	moveq	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d016      	beq.n	8009c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c48:	f043 0220 	orr.w	r2, r3, #32
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e021      	b.n	8009ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	0c1b      	lsrs	r3, r3, #16
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d10c      	bne.n	8009c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	695b      	ldr	r3, [r3, #20]
 8009c6c:	43da      	mvns	r2, r3
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4013      	ands	r3, r2
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	bf14      	ite	ne
 8009c78:	2301      	movne	r3, #1
 8009c7a:	2300      	moveq	r3, #0
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	e00b      	b.n	8009c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	43da      	mvns	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	bf14      	ite	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	2300      	moveq	r3, #0
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f47f af6d 	bne.w	8009b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cb4:	e034      	b.n	8009d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 f8e3 	bl	8009e82 <I2C_IsAcknowledgeFailed>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e034      	b.n	8009d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ccc:	d028      	beq.n	8009d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cce:	f7fd fb69 	bl	80073a4 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d302      	bcc.n	8009ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d11d      	bne.n	8009d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cee:	2b80      	cmp	r3, #128	@ 0x80
 8009cf0:	d016      	beq.n	8009d20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0c:	f043 0220 	orr.w	r2, r3, #32
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e007      	b.n	8009d30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d2a:	2b80      	cmp	r3, #128	@ 0x80
 8009d2c:	d1c3      	bne.n	8009cb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d44:	e034      	b.n	8009db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f000 f89b 	bl	8009e82 <I2C_IsAcknowledgeFailed>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e034      	b.n	8009dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d5c:	d028      	beq.n	8009db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d5e:	f7fd fb21 	bl	80073a4 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d302      	bcc.n	8009d74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d11d      	bne.n	8009db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d016      	beq.n	8009db0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d9c:	f043 0220 	orr.w	r2, r3, #32
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e007      	b.n	8009dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d1c3      	bne.n	8009d46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dd4:	e049      	b.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	f003 0310 	and.w	r3, r3, #16
 8009de0:	2b10      	cmp	r3, #16
 8009de2:	d119      	bne.n	8009e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f06f 0210 	mvn.w	r2, #16
 8009dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e030      	b.n	8009e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e18:	f7fd fac4 	bl	80073a4 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d302      	bcc.n	8009e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d11d      	bne.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e38:	2b40      	cmp	r3, #64	@ 0x40
 8009e3a:	d016      	beq.n	8009e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e56:	f043 0220 	orr.w	r2, r3, #32
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e007      	b.n	8009e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e74:	2b40      	cmp	r3, #64	@ 0x40
 8009e76:	d1ae      	bne.n	8009dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e98:	d11b      	bne.n	8009ed2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ea2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ebe:	f043 0204 	orr.w	r2, r3, #4
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e267      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d075      	beq.n	8009fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009efe:	4b88      	ldr	r3, [pc, #544]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f003 030c 	and.w	r3, r3, #12
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d00c      	beq.n	8009f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f0a:	4b85      	ldr	r3, [pc, #532]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f12:	2b08      	cmp	r3, #8
 8009f14:	d112      	bne.n	8009f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f16:	4b82      	ldr	r3, [pc, #520]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f22:	d10b      	bne.n	8009f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f24:	4b7e      	ldr	r3, [pc, #504]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d05b      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x108>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d157      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e242      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f44:	d106      	bne.n	8009f54 <HAL_RCC_OscConfig+0x74>
 8009f46:	4b76      	ldr	r3, [pc, #472]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a75      	ldr	r2, [pc, #468]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	e01d      	b.n	8009f90 <HAL_RCC_OscConfig+0xb0>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f5c:	d10c      	bne.n	8009f78 <HAL_RCC_OscConfig+0x98>
 8009f5e:	4b70      	ldr	r3, [pc, #448]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a6f      	ldr	r2, [pc, #444]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	4b6d      	ldr	r3, [pc, #436]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a6c      	ldr	r2, [pc, #432]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	e00b      	b.n	8009f90 <HAL_RCC_OscConfig+0xb0>
 8009f78:	4b69      	ldr	r3, [pc, #420]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a68      	ldr	r2, [pc, #416]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f82:	6013      	str	r3, [r2, #0]
 8009f84:	4b66      	ldr	r3, [pc, #408]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a65      	ldr	r2, [pc, #404]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d013      	beq.n	8009fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f98:	f7fd fa04 	bl	80073a4 <HAL_GetTick>
 8009f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f9e:	e008      	b.n	8009fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fa0:	f7fd fa00 	bl	80073a4 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b64      	cmp	r3, #100	@ 0x64
 8009fac:	d901      	bls.n	8009fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e207      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fb2:	4b5b      	ldr	r3, [pc, #364]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0f0      	beq.n	8009fa0 <HAL_RCC_OscConfig+0xc0>
 8009fbe:	e014      	b.n	8009fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fc0:	f7fd f9f0 	bl	80073a4 <HAL_GetTick>
 8009fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fc6:	e008      	b.n	8009fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fc8:	f7fd f9ec 	bl	80073a4 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	2b64      	cmp	r3, #100	@ 0x64
 8009fd4:	d901      	bls.n	8009fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e1f3      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fda:	4b51      	ldr	r3, [pc, #324]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1f0      	bne.n	8009fc8 <HAL_RCC_OscConfig+0xe8>
 8009fe6:	e000      	b.n	8009fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d063      	beq.n	800a0be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ff6:	4b4a      	ldr	r3, [pc, #296]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 030c 	and.w	r3, r3, #12
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00b      	beq.n	800a01a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a002:	4b47      	ldr	r3, [pc, #284]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a00a:	2b08      	cmp	r3, #8
 800a00c:	d11c      	bne.n	800a048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a00e:	4b44      	ldr	r3, [pc, #272]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d116      	bne.n	800a048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a01a:	4b41      	ldr	r3, [pc, #260]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d005      	beq.n	800a032 <HAL_RCC_OscConfig+0x152>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d001      	beq.n	800a032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e1c7      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a032:	4b3b      	ldr	r3, [pc, #236]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	4937      	ldr	r1, [pc, #220]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a042:	4313      	orrs	r3, r2
 800a044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a046:	e03a      	b.n	800a0be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d020      	beq.n	800a092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a050:	4b34      	ldr	r3, [pc, #208]	@ (800a124 <HAL_RCC_OscConfig+0x244>)
 800a052:	2201      	movs	r2, #1
 800a054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a056:	f7fd f9a5 	bl	80073a4 <HAL_GetTick>
 800a05a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a05c:	e008      	b.n	800a070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a05e:	f7fd f9a1 	bl	80073a4 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e1a8      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a070:	4b2b      	ldr	r3, [pc, #172]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0f0      	beq.n	800a05e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a07c:	4b28      	ldr	r3, [pc, #160]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	00db      	lsls	r3, r3, #3
 800a08a:	4925      	ldr	r1, [pc, #148]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	600b      	str	r3, [r1, #0]
 800a090:	e015      	b.n	800a0be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a092:	4b24      	ldr	r3, [pc, #144]	@ (800a124 <HAL_RCC_OscConfig+0x244>)
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7fd f984 	bl	80073a4 <HAL_GetTick>
 800a09c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0a0:	f7fd f980 	bl	80073a4 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e187      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0302 	and.w	r3, r3, #2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1f0      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0308 	and.w	r3, r3, #8
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d036      	beq.n	800a138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d016      	beq.n	800a100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0d2:	4b15      	ldr	r3, [pc, #84]	@ (800a128 <HAL_RCC_OscConfig+0x248>)
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0d8:	f7fd f964 	bl	80073a4 <HAL_GetTick>
 800a0dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0de:	e008      	b.n	800a0f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0e0:	f7fd f960 	bl	80073a4 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e167      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a120 <HAL_RCC_OscConfig+0x240>)
 800a0f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0f0      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x200>
 800a0fe:	e01b      	b.n	800a138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a100:	4b09      	ldr	r3, [pc, #36]	@ (800a128 <HAL_RCC_OscConfig+0x248>)
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a106:	f7fd f94d 	bl	80073a4 <HAL_GetTick>
 800a10a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a10c:	e00e      	b.n	800a12c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a10e:	f7fd f949 	bl	80073a4 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d907      	bls.n	800a12c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e150      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
 800a120:	40023800 	.word	0x40023800
 800a124:	42470000 	.word	0x42470000
 800a128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a12c:	4b88      	ldr	r3, [pc, #544]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a12e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1ea      	bne.n	800a10e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 8097 	beq.w	800a274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a14a:	4b81      	ldr	r3, [pc, #516]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10f      	bne.n	800a176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a156:	2300      	movs	r3, #0
 800a158:	60bb      	str	r3, [r7, #8]
 800a15a:	4b7d      	ldr	r3, [pc, #500]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15e:	4a7c      	ldr	r2, [pc, #496]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a164:	6413      	str	r3, [r2, #64]	@ 0x40
 800a166:	4b7a      	ldr	r3, [pc, #488]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a16a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a16e:	60bb      	str	r3, [r7, #8]
 800a170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a172:	2301      	movs	r3, #1
 800a174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a176:	4b77      	ldr	r3, [pc, #476]	@ (800a354 <HAL_RCC_OscConfig+0x474>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d118      	bne.n	800a1b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a182:	4b74      	ldr	r3, [pc, #464]	@ (800a354 <HAL_RCC_OscConfig+0x474>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a73      	ldr	r2, [pc, #460]	@ (800a354 <HAL_RCC_OscConfig+0x474>)
 800a188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a18c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a18e:	f7fd f909 	bl	80073a4 <HAL_GetTick>
 800a192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a194:	e008      	b.n	800a1a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a196:	f7fd f905 	bl	80073a4 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e10c      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1a8:	4b6a      	ldr	r3, [pc, #424]	@ (800a354 <HAL_RCC_OscConfig+0x474>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0f0      	beq.n	800a196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d106      	bne.n	800a1ca <HAL_RCC_OscConfig+0x2ea>
 800a1bc:	4b64      	ldr	r3, [pc, #400]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1c0:	4a63      	ldr	r2, [pc, #396]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1c8:	e01c      	b.n	800a204 <HAL_RCC_OscConfig+0x324>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	2b05      	cmp	r3, #5
 800a1d0:	d10c      	bne.n	800a1ec <HAL_RCC_OscConfig+0x30c>
 800a1d2:	4b5f      	ldr	r3, [pc, #380]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1d6:	4a5e      	ldr	r2, [pc, #376]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1d8:	f043 0304 	orr.w	r3, r3, #4
 800a1dc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1de:	4b5c      	ldr	r3, [pc, #368]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1e2:	4a5b      	ldr	r2, [pc, #364]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1e4:	f043 0301 	orr.w	r3, r3, #1
 800a1e8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1ea:	e00b      	b.n	800a204 <HAL_RCC_OscConfig+0x324>
 800a1ec:	4b58      	ldr	r3, [pc, #352]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1f0:	4a57      	ldr	r2, [pc, #348]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1f2:	f023 0301 	bic.w	r3, r3, #1
 800a1f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1f8:	4b55      	ldr	r3, [pc, #340]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1fc:	4a54      	ldr	r2, [pc, #336]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a1fe:	f023 0304 	bic.w	r3, r3, #4
 800a202:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d015      	beq.n	800a238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a20c:	f7fd f8ca 	bl	80073a4 <HAL_GetTick>
 800a210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a212:	e00a      	b.n	800a22a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a214:	f7fd f8c6 	bl	80073a4 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a222:	4293      	cmp	r3, r2
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e0cb      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a22a:	4b49      	ldr	r3, [pc, #292]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a22e:	f003 0302 	and.w	r3, r3, #2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0ee      	beq.n	800a214 <HAL_RCC_OscConfig+0x334>
 800a236:	e014      	b.n	800a262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a238:	f7fd f8b4 	bl	80073a4 <HAL_GetTick>
 800a23c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a23e:	e00a      	b.n	800a256 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a240:	f7fd f8b0 	bl	80073a4 <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a24e:	4293      	cmp	r3, r2
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e0b5      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a256:	4b3e      	ldr	r3, [pc, #248]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1ee      	bne.n	800a240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a262:	7dfb      	ldrb	r3, [r7, #23]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d105      	bne.n	800a274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a268:	4b39      	ldr	r3, [pc, #228]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26c:	4a38      	ldr	r2, [pc, #224]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a26e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a272:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 80a1 	beq.w	800a3c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a27e:	4b34      	ldr	r3, [pc, #208]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 030c 	and.w	r3, r3, #12
 800a286:	2b08      	cmp	r3, #8
 800a288:	d05c      	beq.n	800a344 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d141      	bne.n	800a316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a292:	4b31      	ldr	r3, [pc, #196]	@ (800a358 <HAL_RCC_OscConfig+0x478>)
 800a294:	2200      	movs	r2, #0
 800a296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a298:	f7fd f884 	bl	80073a4 <HAL_GetTick>
 800a29c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a29e:	e008      	b.n	800a2b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2a0:	f7fd f880 	bl	80073a4 <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d901      	bls.n	800a2b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e087      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2b2:	4b27      	ldr	r3, [pc, #156]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1f0      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	69da      	ldr	r2, [r3, #28]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2cc:	019b      	lsls	r3, r3, #6
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d4:	085b      	lsrs	r3, r3, #1
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	041b      	lsls	r3, r3, #16
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e0:	061b      	lsls	r3, r3, #24
 800a2e2:	491b      	ldr	r1, [pc, #108]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a358 <HAL_RCC_OscConfig+0x478>)
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2ee:	f7fd f859 	bl	80073a4 <HAL_GetTick>
 800a2f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2f4:	e008      	b.n	800a308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2f6:	f7fd f855 	bl	80073a4 <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d901      	bls.n	800a308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e05c      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a308:	4b11      	ldr	r3, [pc, #68]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d0f0      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x416>
 800a314:	e054      	b.n	800a3c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a316:	4b10      	ldr	r3, [pc, #64]	@ (800a358 <HAL_RCC_OscConfig+0x478>)
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a31c:	f7fd f842 	bl	80073a4 <HAL_GetTick>
 800a320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a322:	e008      	b.n	800a336 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a324:	f7fd f83e 	bl	80073a4 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d901      	bls.n	800a336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e045      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a336:	4b06      	ldr	r3, [pc, #24]	@ (800a350 <HAL_RCC_OscConfig+0x470>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1f0      	bne.n	800a324 <HAL_RCC_OscConfig+0x444>
 800a342:	e03d      	b.n	800a3c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d107      	bne.n	800a35c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e038      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
 800a350:	40023800 	.word	0x40023800
 800a354:	40007000 	.word	0x40007000
 800a358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a35c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3cc <HAL_RCC_OscConfig+0x4ec>)
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d028      	beq.n	800a3bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a374:	429a      	cmp	r2, r3
 800a376:	d121      	bne.n	800a3bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a382:	429a      	cmp	r2, r3
 800a384:	d11a      	bne.n	800a3bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a38c:	4013      	ands	r3, r2
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a394:	4293      	cmp	r3, r2
 800a396:	d111      	bne.n	800a3bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a2:	085b      	lsrs	r3, r3, #1
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d107      	bne.n	800a3bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d001      	beq.n	800a3c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e000      	b.n	800a3c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	40023800 	.word	0x40023800

0800a3d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0cc      	b.n	800a57e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3e4:	4b68      	ldr	r3, [pc, #416]	@ (800a588 <HAL_RCC_ClockConfig+0x1b8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d90c      	bls.n	800a40c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3f2:	4b65      	ldr	r3, [pc, #404]	@ (800a588 <HAL_RCC_ClockConfig+0x1b8>)
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	b2d2      	uxtb	r2, r2
 800a3f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3fa:	4b63      	ldr	r3, [pc, #396]	@ (800a588 <HAL_RCC_ClockConfig+0x1b8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d001      	beq.n	800a40c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e0b8      	b.n	800a57e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d020      	beq.n	800a45a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a424:	4b59      	ldr	r3, [pc, #356]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	4a58      	ldr	r2, [pc, #352]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a42a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a42e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d005      	beq.n	800a448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a43c:	4b53      	ldr	r3, [pc, #332]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	4a52      	ldr	r2, [pc, #328]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a442:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a448:	4b50      	ldr	r3, [pc, #320]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	494d      	ldr	r1, [pc, #308]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a456:	4313      	orrs	r3, r2
 800a458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0301 	and.w	r3, r3, #1
 800a462:	2b00      	cmp	r3, #0
 800a464:	d044      	beq.n	800a4f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d107      	bne.n	800a47e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a46e:	4b47      	ldr	r3, [pc, #284]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d119      	bne.n	800a4ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e07f      	b.n	800a57e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	2b02      	cmp	r3, #2
 800a484:	d003      	beq.n	800a48e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d107      	bne.n	800a49e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a48e:	4b3f      	ldr	r3, [pc, #252]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d109      	bne.n	800a4ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e06f      	b.n	800a57e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a49e:	4b3b      	ldr	r3, [pc, #236]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e067      	b.n	800a57e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a4ae:	4b37      	ldr	r3, [pc, #220]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f023 0203 	bic.w	r2, r3, #3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	4934      	ldr	r1, [pc, #208]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a4c0:	f7fc ff70 	bl	80073a4 <HAL_GetTick>
 800a4c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4c6:	e00a      	b.n	800a4de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4c8:	f7fc ff6c 	bl	80073a4 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d901      	bls.n	800a4de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e04f      	b.n	800a57e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4de:	4b2b      	ldr	r3, [pc, #172]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f003 020c 	and.w	r2, r3, #12
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d1eb      	bne.n	800a4c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4f0:	4b25      	ldr	r3, [pc, #148]	@ (800a588 <HAL_RCC_ClockConfig+0x1b8>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0307 	and.w	r3, r3, #7
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d20c      	bcs.n	800a518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4fe:	4b22      	ldr	r3, [pc, #136]	@ (800a588 <HAL_RCC_ClockConfig+0x1b8>)
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	b2d2      	uxtb	r2, r2
 800a504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a506:	4b20      	ldr	r3, [pc, #128]	@ (800a588 <HAL_RCC_ClockConfig+0x1b8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0307 	and.w	r3, r3, #7
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	429a      	cmp	r2, r3
 800a512:	d001      	beq.n	800a518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e032      	b.n	800a57e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0304 	and.w	r3, r3, #4
 800a520:	2b00      	cmp	r3, #0
 800a522:	d008      	beq.n	800a536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a524:	4b19      	ldr	r3, [pc, #100]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	4916      	ldr	r1, [pc, #88]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a532:	4313      	orrs	r3, r2
 800a534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d009      	beq.n	800a556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a542:	4b12      	ldr	r3, [pc, #72]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	490e      	ldr	r1, [pc, #56]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a552:	4313      	orrs	r3, r2
 800a554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a556:	f000 f82d 	bl	800a5b4 <HAL_RCC_GetSysClockFreq>
 800a55a:	4602      	mov	r2, r0
 800a55c:	4b0b      	ldr	r3, [pc, #44]	@ (800a58c <HAL_RCC_ClockConfig+0x1bc>)
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	091b      	lsrs	r3, r3, #4
 800a562:	f003 030f 	and.w	r3, r3, #15
 800a566:	490a      	ldr	r1, [pc, #40]	@ (800a590 <HAL_RCC_ClockConfig+0x1c0>)
 800a568:	5ccb      	ldrb	r3, [r1, r3]
 800a56a:	fa22 f303 	lsr.w	r3, r2, r3
 800a56e:	4a09      	ldr	r2, [pc, #36]	@ (800a594 <HAL_RCC_ClockConfig+0x1c4>)
 800a570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a572:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <HAL_RCC_ClockConfig+0x1c8>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f7fc fed0 	bl	800731c <HAL_InitTick>

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	40023c00 	.word	0x40023c00
 800a58c:	40023800 	.word	0x40023800
 800a590:	08014218 	.word	0x08014218
 800a594:	20000154 	.word	0x20000154
 800a598:	20000158 	.word	0x20000158

0800a59c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a5a0:	4b03      	ldr	r3, [pc, #12]	@ (800a5b0 <HAL_RCC_EnableCSS+0x14>)
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
}
 800a5a6:	bf00      	nop
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	4247004c 	.word	0x4247004c

0800a5b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5b8:	b090      	sub	sp, #64	@ 0x40
 800a5ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5cc:	4b59      	ldr	r3, [pc, #356]	@ (800a734 <HAL_RCC_GetSysClockFreq+0x180>)
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f003 030c 	and.w	r3, r3, #12
 800a5d4:	2b08      	cmp	r3, #8
 800a5d6:	d00d      	beq.n	800a5f4 <HAL_RCC_GetSysClockFreq+0x40>
 800a5d8:	2b08      	cmp	r3, #8
 800a5da:	f200 80a1 	bhi.w	800a720 <HAL_RCC_GetSysClockFreq+0x16c>
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d002      	beq.n	800a5e8 <HAL_RCC_GetSysClockFreq+0x34>
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d003      	beq.n	800a5ee <HAL_RCC_GetSysClockFreq+0x3a>
 800a5e6:	e09b      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5e8:	4b53      	ldr	r3, [pc, #332]	@ (800a738 <HAL_RCC_GetSysClockFreq+0x184>)
 800a5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800a5ec:	e09b      	b.n	800a726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5ee:	4b53      	ldr	r3, [pc, #332]	@ (800a73c <HAL_RCC_GetSysClockFreq+0x188>)
 800a5f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a5f2:	e098      	b.n	800a726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5f4:	4b4f      	ldr	r3, [pc, #316]	@ (800a734 <HAL_RCC_GetSysClockFreq+0x180>)
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a5fe:	4b4d      	ldr	r3, [pc, #308]	@ (800a734 <HAL_RCC_GetSysClockFreq+0x180>)
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d028      	beq.n	800a65c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a60a:	4b4a      	ldr	r3, [pc, #296]	@ (800a734 <HAL_RCC_GetSysClockFreq+0x180>)
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	099b      	lsrs	r3, r3, #6
 800a610:	2200      	movs	r2, #0
 800a612:	623b      	str	r3, [r7, #32]
 800a614:	627a      	str	r2, [r7, #36]	@ 0x24
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a61c:	2100      	movs	r1, #0
 800a61e:	4b47      	ldr	r3, [pc, #284]	@ (800a73c <HAL_RCC_GetSysClockFreq+0x188>)
 800a620:	fb03 f201 	mul.w	r2, r3, r1
 800a624:	2300      	movs	r3, #0
 800a626:	fb00 f303 	mul.w	r3, r0, r3
 800a62a:	4413      	add	r3, r2
 800a62c:	4a43      	ldr	r2, [pc, #268]	@ (800a73c <HAL_RCC_GetSysClockFreq+0x188>)
 800a62e:	fba0 1202 	umull	r1, r2, r0, r2
 800a632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a634:	460a      	mov	r2, r1
 800a636:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a63a:	4413      	add	r3, r2
 800a63c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a640:	2200      	movs	r2, #0
 800a642:	61bb      	str	r3, [r7, #24]
 800a644:	61fa      	str	r2, [r7, #28]
 800a646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a64a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a64e:	f7f6 fc09 	bl	8000e64 <__aeabi_uldivmod>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4613      	mov	r3, r2
 800a658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a65a:	e053      	b.n	800a704 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a65c:	4b35      	ldr	r3, [pc, #212]	@ (800a734 <HAL_RCC_GetSysClockFreq+0x180>)
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	099b      	lsrs	r3, r3, #6
 800a662:	2200      	movs	r2, #0
 800a664:	613b      	str	r3, [r7, #16]
 800a666:	617a      	str	r2, [r7, #20]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a66e:	f04f 0b00 	mov.w	fp, #0
 800a672:	4652      	mov	r2, sl
 800a674:	465b      	mov	r3, fp
 800a676:	f04f 0000 	mov.w	r0, #0
 800a67a:	f04f 0100 	mov.w	r1, #0
 800a67e:	0159      	lsls	r1, r3, #5
 800a680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a684:	0150      	lsls	r0, r2, #5
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	ebb2 080a 	subs.w	r8, r2, sl
 800a68e:	eb63 090b 	sbc.w	r9, r3, fp
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	f04f 0300 	mov.w	r3, #0
 800a69a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a69e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a6a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a6a6:	ebb2 0408 	subs.w	r4, r2, r8
 800a6aa:	eb63 0509 	sbc.w	r5, r3, r9
 800a6ae:	f04f 0200 	mov.w	r2, #0
 800a6b2:	f04f 0300 	mov.w	r3, #0
 800a6b6:	00eb      	lsls	r3, r5, #3
 800a6b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a6bc:	00e2      	lsls	r2, r4, #3
 800a6be:	4614      	mov	r4, r2
 800a6c0:	461d      	mov	r5, r3
 800a6c2:	eb14 030a 	adds.w	r3, r4, sl
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	eb45 030b 	adc.w	r3, r5, fp
 800a6cc:	607b      	str	r3, [r7, #4]
 800a6ce:	f04f 0200 	mov.w	r2, #0
 800a6d2:	f04f 0300 	mov.w	r3, #0
 800a6d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a6da:	4629      	mov	r1, r5
 800a6dc:	028b      	lsls	r3, r1, #10
 800a6de:	4621      	mov	r1, r4
 800a6e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	028a      	lsls	r2, r1, #10
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	60bb      	str	r3, [r7, #8]
 800a6f2:	60fa      	str	r2, [r7, #12]
 800a6f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6f8:	f7f6 fbb4 	bl	8000e64 <__aeabi_uldivmod>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4613      	mov	r3, r2
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a704:	4b0b      	ldr	r3, [pc, #44]	@ (800a734 <HAL_RCC_GetSysClockFreq+0x180>)
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	0c1b      	lsrs	r3, r3, #16
 800a70a:	f003 0303 	and.w	r3, r3, #3
 800a70e:	3301      	adds	r3, #1
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800a714:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	fbb2 f3f3 	udiv	r3, r2, r3
 800a71c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a71e:	e002      	b.n	800a726 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a720:	4b05      	ldr	r3, [pc, #20]	@ (800a738 <HAL_RCC_GetSysClockFreq+0x184>)
 800a722:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a724:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3740      	adds	r7, #64	@ 0x40
 800a72c:	46bd      	mov	sp, r7
 800a72e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a732:	bf00      	nop
 800a734:	40023800 	.word	0x40023800
 800a738:	00f42400 	.word	0x00f42400
 800a73c:	00b71b00 	.word	0x00b71b00

0800a740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a744:	4b03      	ldr	r3, [pc, #12]	@ (800a754 <HAL_RCC_GetHCLKFreq+0x14>)
 800a746:	681b      	ldr	r3, [r3, #0]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	20000154 	.word	0x20000154

0800a758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a75c:	f7ff fff0 	bl	800a740 <HAL_RCC_GetHCLKFreq>
 800a760:	4602      	mov	r2, r0
 800a762:	4b05      	ldr	r3, [pc, #20]	@ (800a778 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	0a9b      	lsrs	r3, r3, #10
 800a768:	f003 0307 	and.w	r3, r3, #7
 800a76c:	4903      	ldr	r1, [pc, #12]	@ (800a77c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a76e:	5ccb      	ldrb	r3, [r1, r3]
 800a770:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a774:	4618      	mov	r0, r3
 800a776:	bd80      	pop	{r7, pc}
 800a778:	40023800 	.word	0x40023800
 800a77c:	08014228 	.word	0x08014228

0800a780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a784:	f7ff ffdc 	bl	800a740 <HAL_RCC_GetHCLKFreq>
 800a788:	4602      	mov	r2, r0
 800a78a:	4b05      	ldr	r3, [pc, #20]	@ (800a7a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	0b5b      	lsrs	r3, r3, #13
 800a790:	f003 0307 	and.w	r3, r3, #7
 800a794:	4903      	ldr	r1, [pc, #12]	@ (800a7a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a796:	5ccb      	ldrb	r3, [r1, r3]
 800a798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	40023800 	.word	0x40023800
 800a7a4:	08014228 	.word	0x08014228

0800a7a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7b4:	2b80      	cmp	r3, #128	@ 0x80
 800a7b6:	d104      	bne.n	800a7c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a7b8:	f000 f80a 	bl	800a7d0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a7bc:	4b03      	ldr	r3, [pc, #12]	@ (800a7cc <HAL_RCC_NMI_IRQHandler+0x24>)
 800a7be:	2280      	movs	r2, #128	@ 0x80
 800a7c0:	701a      	strb	r2, [r3, #0]
  }
}
 800a7c2:	bf00      	nop
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40023800 	.word	0x40023800
 800a7cc:	4002380e 	.word	0x4002380e

0800a7d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e07b      	b.n	800a8e8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d108      	bne.n	800a80a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a800:	d009      	beq.n	800a816 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	61da      	str	r2, [r3, #28]
 800a808:	e005      	b.n	800a816 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7fb ff23 	bl	800667c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2202      	movs	r2, #2
 800a83a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a84c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a85e:	431a      	orrs	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a868:	431a      	orrs	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	431a      	orrs	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	431a      	orrs	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a886:	431a      	orrs	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a890:	431a      	orrs	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a89a:	ea42 0103 	orr.w	r1, r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	0c1b      	lsrs	r3, r3, #16
 800a8b4:	f003 0104 	and.w	r1, r3, #4
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8bc:	f003 0210 	and.w	r2, r3, #16
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	69da      	ldr	r2, [r3, #28]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a8d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08c      	sub	sp, #48	@ 0x30
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a8fe:	2301      	movs	r3, #1
 800a900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d101      	bne.n	800a916 <HAL_SPI_TransmitReceive+0x26>
 800a912:	2302      	movs	r3, #2
 800a914:	e198      	b.n	800ac48 <HAL_SPI_TransmitReceive+0x358>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a91e:	f7fc fd41 	bl	80073a4 <HAL_GetTick>
 800a922:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a92a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a934:	887b      	ldrh	r3, [r7, #2]
 800a936:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a938:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d00f      	beq.n	800a960 <HAL_SPI_TransmitReceive+0x70>
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a946:	d107      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x68>
 800a950:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a954:	2b04      	cmp	r3, #4
 800a956:	d003      	beq.n	800a960 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a958:	2302      	movs	r3, #2
 800a95a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a95e:	e16d      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <HAL_SPI_TransmitReceive+0x82>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <HAL_SPI_TransmitReceive+0x82>
 800a96c:	887b      	ldrh	r3, [r7, #2]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d103      	bne.n	800a97a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a978:	e160      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b04      	cmp	r3, #4
 800a984:	d003      	beq.n	800a98e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2205      	movs	r2, #5
 800a98a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	887a      	ldrh	r2, [r7, #2]
 800a99e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	887a      	ldrh	r2, [r7, #2]
 800a9a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	887a      	ldrh	r2, [r7, #2]
 800a9b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	887a      	ldrh	r2, [r7, #2]
 800a9b6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ce:	2b40      	cmp	r3, #64	@ 0x40
 800a9d0:	d007      	beq.n	800a9e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9ea:	d17c      	bne.n	800aae6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <HAL_SPI_TransmitReceive+0x10a>
 800a9f4:	8b7b      	ldrh	r3, [r7, #26]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d16a      	bne.n	800aad0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9fe:	881a      	ldrh	r2, [r3, #0]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa0a:	1c9a      	adds	r2, r3, #2
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	3b01      	subs	r3, #1
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa1e:	e057      	b.n	800aad0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d11b      	bne.n	800aa66 <HAL_SPI_TransmitReceive+0x176>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d016      	beq.n	800aa66 <HAL_SPI_TransmitReceive+0x176>
 800aa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d113      	bne.n	800aa66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa42:	881a      	ldrh	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa4e:	1c9a      	adds	r2, r3, #2
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d119      	bne.n	800aaa8 <HAL_SPI_TransmitReceive+0x1b8>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d014      	beq.n	800aaa8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68da      	ldr	r2, [r3, #12]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa88:	b292      	uxth	r2, r2
 800aa8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa90:	1c9a      	adds	r2, r3, #2
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aaa8:	f7fc fc7c 	bl	80073a4 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d80b      	bhi.n	800aad0 <HAL_SPI_TransmitReceive+0x1e0>
 800aab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aabe:	d007      	beq.n	800aad0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800aac0:	2303      	movs	r3, #3
 800aac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800aace:	e0b5      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1a2      	bne.n	800aa20 <HAL_SPI_TransmitReceive+0x130>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aade:	b29b      	uxth	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d19d      	bne.n	800aa20 <HAL_SPI_TransmitReceive+0x130>
 800aae4:	e080      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <HAL_SPI_TransmitReceive+0x204>
 800aaee:	8b7b      	ldrh	r3, [r7, #26]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d16f      	bne.n	800abd4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	330c      	adds	r3, #12
 800aafe:	7812      	ldrb	r2, [r2, #0]
 800ab00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	3b01      	subs	r3, #1
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab1a:	e05b      	b.n	800abd4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d11c      	bne.n	800ab64 <HAL_SPI_TransmitReceive+0x274>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d017      	beq.n	800ab64 <HAL_SPI_TransmitReceive+0x274>
 800ab34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d114      	bne.n	800ab64 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	330c      	adds	r3, #12
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d119      	bne.n	800aba6 <HAL_SPI_TransmitReceive+0x2b6>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d014      	beq.n	800aba6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab86:	b2d2      	uxtb	r2, r2
 800ab88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aba2:	2301      	movs	r3, #1
 800aba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aba6:	f7fc fbfd 	bl	80073a4 <HAL_GetTick>
 800abaa:	4602      	mov	r2, r0
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d803      	bhi.n	800abbe <HAL_SPI_TransmitReceive+0x2ce>
 800abb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abbc:	d102      	bne.n	800abc4 <HAL_SPI_TransmitReceive+0x2d4>
 800abbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d107      	bne.n	800abd4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800abd2:	e033      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d19e      	bne.n	800ab1c <HAL_SPI_TransmitReceive+0x22c>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d199      	bne.n	800ab1c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f000 f8b7 	bl	800ad60 <SPI_EndRxTxTransaction>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d006      	beq.n	800ac06 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800ac04:	e01a      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	617b      	str	r3, [r7, #20]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac32:	e003      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ac44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3730      	adds	r7, #48	@ 0x30
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ac60:	f7fc fba0 	bl	80073a4 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac68:	1a9b      	subs	r3, r3, r2
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ac70:	f7fc fb98 	bl	80073a4 <HAL_GetTick>
 800ac74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac76:	4b39      	ldr	r3, [pc, #228]	@ (800ad5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	015b      	lsls	r3, r3, #5
 800ac7c:	0d1b      	lsrs	r3, r3, #20
 800ac7e:	69fa      	ldr	r2, [r7, #28]
 800ac80:	fb02 f303 	mul.w	r3, r2, r3
 800ac84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac86:	e054      	b.n	800ad32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac8e:	d050      	beq.n	800ad32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac90:	f7fc fb88 	bl	80073a4 <HAL_GetTick>
 800ac94:	4602      	mov	r2, r0
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d902      	bls.n	800aca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d13d      	bne.n	800ad22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800acb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800acbe:	d111      	bne.n	800ace4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acc8:	d004      	beq.n	800acd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acd2:	d107      	bne.n	800ace4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ace2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acec:	d10f      	bne.n	800ad0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ad0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	e017      	b.n	800ad52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	bf0c      	ite	eq
 800ad42:	2301      	moveq	r3, #1
 800ad44:	2300      	movne	r3, #0
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	461a      	mov	r2, r3
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d19b      	bne.n	800ac88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000154 	.word	0x20000154

0800ad60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2201      	movs	r2, #1
 800ad74:	2102      	movs	r1, #2
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff ff6a 	bl	800ac50 <SPI_WaitFlagStateUntilTimeout>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d007      	beq.n	800ad92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad86:	f043 0220 	orr.w	r2, r3, #32
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e032      	b.n	800adf8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ad92:	4b1b      	ldr	r3, [pc, #108]	@ (800ae00 <SPI_EndRxTxTransaction+0xa0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a1b      	ldr	r2, [pc, #108]	@ (800ae04 <SPI_EndRxTxTransaction+0xa4>)
 800ad98:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9c:	0d5b      	lsrs	r3, r3, #21
 800ad9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ada2:	fb02 f303 	mul.w	r3, r2, r3
 800ada6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800adb0:	d112      	bne.n	800add8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2200      	movs	r2, #0
 800adba:	2180      	movs	r1, #128	@ 0x80
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff ff47 	bl	800ac50 <SPI_WaitFlagStateUntilTimeout>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d016      	beq.n	800adf6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adcc:	f043 0220 	orr.w	r2, r3, #32
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e00f      	b.n	800adf8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adee:	2b80      	cmp	r3, #128	@ 0x80
 800adf0:	d0f2      	beq.n	800add8 <SPI_EndRxTxTransaction+0x78>
 800adf2:	e000      	b.n	800adf6 <SPI_EndRxTxTransaction+0x96>
        break;
 800adf4:	bf00      	nop
  }

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	20000154 	.word	0x20000154
 800ae04:	165e9f81 	.word	0x165e9f81

0800ae08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e041      	b.n	800ae9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d106      	bne.n	800ae34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7fb fd40 	bl	80068b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2202      	movs	r2, #2
 800ae38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3304      	adds	r3, #4
 800ae44:	4619      	mov	r1, r3
 800ae46:	4610      	mov	r0, r2
 800ae48:	f000 fba8 	bl	800b59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d001      	beq.n	800aec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e046      	b.n	800af4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2202      	movs	r2, #2
 800aec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a23      	ldr	r2, [pc, #140]	@ (800af5c <HAL_TIM_Base_Start+0xb4>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d022      	beq.n	800af18 <HAL_TIM_Base_Start+0x70>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeda:	d01d      	beq.n	800af18 <HAL_TIM_Base_Start+0x70>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1f      	ldr	r2, [pc, #124]	@ (800af60 <HAL_TIM_Base_Start+0xb8>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d018      	beq.n	800af18 <HAL_TIM_Base_Start+0x70>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1e      	ldr	r2, [pc, #120]	@ (800af64 <HAL_TIM_Base_Start+0xbc>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d013      	beq.n	800af18 <HAL_TIM_Base_Start+0x70>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a1c      	ldr	r2, [pc, #112]	@ (800af68 <HAL_TIM_Base_Start+0xc0>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00e      	beq.n	800af18 <HAL_TIM_Base_Start+0x70>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a1b      	ldr	r2, [pc, #108]	@ (800af6c <HAL_TIM_Base_Start+0xc4>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d009      	beq.n	800af18 <HAL_TIM_Base_Start+0x70>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a19      	ldr	r2, [pc, #100]	@ (800af70 <HAL_TIM_Base_Start+0xc8>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d004      	beq.n	800af18 <HAL_TIM_Base_Start+0x70>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a18      	ldr	r2, [pc, #96]	@ (800af74 <HAL_TIM_Base_Start+0xcc>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d111      	bne.n	800af3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f003 0307 	and.w	r3, r3, #7
 800af22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b06      	cmp	r3, #6
 800af28:	d010      	beq.n	800af4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f042 0201 	orr.w	r2, r2, #1
 800af38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af3a:	e007      	b.n	800af4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f042 0201 	orr.w	r2, r2, #1
 800af4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	40010000 	.word	0x40010000
 800af60:	40000400 	.word	0x40000400
 800af64:	40000800 	.word	0x40000800
 800af68:	40000c00 	.word	0x40000c00
 800af6c:	40010400 	.word	0x40010400
 800af70:	40014000 	.word	0x40014000
 800af74:	40001800 	.word	0x40001800

0800af78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e041      	b.n	800b00e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7fb fbd4 	bl	800674c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3304      	adds	r3, #4
 800afb4:	4619      	mov	r1, r3
 800afb6:	4610      	mov	r0, r2
 800afb8:	f000 faf0 	bl	800b59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <HAL_TIM_PWM_Start+0x24>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b01      	cmp	r3, #1
 800b032:	bf14      	ite	ne
 800b034:	2301      	movne	r3, #1
 800b036:	2300      	moveq	r3, #0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	e022      	b.n	800b082 <HAL_TIM_PWM_Start+0x6a>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d109      	bne.n	800b056 <HAL_TIM_PWM_Start+0x3e>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	bf14      	ite	ne
 800b04e:	2301      	movne	r3, #1
 800b050:	2300      	moveq	r3, #0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	e015      	b.n	800b082 <HAL_TIM_PWM_Start+0x6a>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d109      	bne.n	800b070 <HAL_TIM_PWM_Start+0x58>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b01      	cmp	r3, #1
 800b066:	bf14      	ite	ne
 800b068:	2301      	movne	r3, #1
 800b06a:	2300      	moveq	r3, #0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	e008      	b.n	800b082 <HAL_TIM_PWM_Start+0x6a>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b01      	cmp	r3, #1
 800b07a:	bf14      	ite	ne
 800b07c:	2301      	movne	r3, #1
 800b07e:	2300      	moveq	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e07c      	b.n	800b184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d104      	bne.n	800b09a <HAL_TIM_PWM_Start+0x82>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b098:	e013      	b.n	800b0c2 <HAL_TIM_PWM_Start+0xaa>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	d104      	bne.n	800b0aa <HAL_TIM_PWM_Start+0x92>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b0a8:	e00b      	b.n	800b0c2 <HAL_TIM_PWM_Start+0xaa>
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b08      	cmp	r3, #8
 800b0ae:	d104      	bne.n	800b0ba <HAL_TIM_PWM_Start+0xa2>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b0b8:	e003      	b.n	800b0c2 <HAL_TIM_PWM_Start+0xaa>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fd5c 	bl	800bb88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a2d      	ldr	r2, [pc, #180]	@ (800b18c <HAL_TIM_PWM_Start+0x174>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d004      	beq.n	800b0e4 <HAL_TIM_PWM_Start+0xcc>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a2c      	ldr	r2, [pc, #176]	@ (800b190 <HAL_TIM_PWM_Start+0x178>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d101      	bne.n	800b0e8 <HAL_TIM_PWM_Start+0xd0>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e000      	b.n	800b0ea <HAL_TIM_PWM_Start+0xd2>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d007      	beq.n	800b0fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b0fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a22      	ldr	r2, [pc, #136]	@ (800b18c <HAL_TIM_PWM_Start+0x174>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d022      	beq.n	800b14e <HAL_TIM_PWM_Start+0x136>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b110:	d01d      	beq.n	800b14e <HAL_TIM_PWM_Start+0x136>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a1f      	ldr	r2, [pc, #124]	@ (800b194 <HAL_TIM_PWM_Start+0x17c>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d018      	beq.n	800b14e <HAL_TIM_PWM_Start+0x136>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a1d      	ldr	r2, [pc, #116]	@ (800b198 <HAL_TIM_PWM_Start+0x180>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d013      	beq.n	800b14e <HAL_TIM_PWM_Start+0x136>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a1c      	ldr	r2, [pc, #112]	@ (800b19c <HAL_TIM_PWM_Start+0x184>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d00e      	beq.n	800b14e <HAL_TIM_PWM_Start+0x136>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a16      	ldr	r2, [pc, #88]	@ (800b190 <HAL_TIM_PWM_Start+0x178>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d009      	beq.n	800b14e <HAL_TIM_PWM_Start+0x136>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a18      	ldr	r2, [pc, #96]	@ (800b1a0 <HAL_TIM_PWM_Start+0x188>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d004      	beq.n	800b14e <HAL_TIM_PWM_Start+0x136>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a16      	ldr	r2, [pc, #88]	@ (800b1a4 <HAL_TIM_PWM_Start+0x18c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d111      	bne.n	800b172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f003 0307 	and.w	r3, r3, #7
 800b158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2b06      	cmp	r3, #6
 800b15e:	d010      	beq.n	800b182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f042 0201 	orr.w	r2, r2, #1
 800b16e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b170:	e007      	b.n	800b182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	40010000 	.word	0x40010000
 800b190:	40010400 	.word	0x40010400
 800b194:	40000400 	.word	0x40000400
 800b198:	40000800 	.word	0x40000800
 800b19c:	40000c00 	.word	0x40000c00
 800b1a0:	40014000 	.word	0x40014000
 800b1a4:	40001800 	.word	0x40001800

0800b1a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fce4 	bl	800bb88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a2e      	ldr	r2, [pc, #184]	@ (800b280 <HAL_TIM_PWM_Stop+0xd8>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d004      	beq.n	800b1d4 <HAL_TIM_PWM_Stop+0x2c>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a2d      	ldr	r2, [pc, #180]	@ (800b284 <HAL_TIM_PWM_Stop+0xdc>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d101      	bne.n	800b1d8 <HAL_TIM_PWM_Stop+0x30>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <HAL_TIM_PWM_Stop+0x32>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d017      	beq.n	800b20e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6a1a      	ldr	r2, [r3, #32]
 800b1e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10f      	bne.n	800b20e <HAL_TIM_PWM_Stop+0x66>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6a1a      	ldr	r2, [r3, #32]
 800b1f4:	f240 4344 	movw	r3, #1092	@ 0x444
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d107      	bne.n	800b20e <HAL_TIM_PWM_Stop+0x66>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b20c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	6a1a      	ldr	r2, [r3, #32]
 800b214:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b218:	4013      	ands	r3, r2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10f      	bne.n	800b23e <HAL_TIM_PWM_Stop+0x96>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	6a1a      	ldr	r2, [r3, #32]
 800b224:	f240 4344 	movw	r3, #1092	@ 0x444
 800b228:	4013      	ands	r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d107      	bne.n	800b23e <HAL_TIM_PWM_Stop+0x96>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f022 0201 	bic.w	r2, r2, #1
 800b23c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d104      	bne.n	800b24e <HAL_TIM_PWM_Stop+0xa6>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b24c:	e013      	b.n	800b276 <HAL_TIM_PWM_Stop+0xce>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b04      	cmp	r3, #4
 800b252:	d104      	bne.n	800b25e <HAL_TIM_PWM_Stop+0xb6>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b25c:	e00b      	b.n	800b276 <HAL_TIM_PWM_Stop+0xce>
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b08      	cmp	r3, #8
 800b262:	d104      	bne.n	800b26e <HAL_TIM_PWM_Stop+0xc6>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b26c:	e003      	b.n	800b276 <HAL_TIM_PWM_Stop+0xce>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	40010000 	.word	0x40010000
 800b284:	40010400 	.word	0x40010400

0800b288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d101      	bne.n	800b2a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e0ae      	b.n	800b404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b0c      	cmp	r3, #12
 800b2b2:	f200 809f 	bhi.w	800b3f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b2b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b2bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2bc:	0800b2f1 	.word	0x0800b2f1
 800b2c0:	0800b3f5 	.word	0x0800b3f5
 800b2c4:	0800b3f5 	.word	0x0800b3f5
 800b2c8:	0800b3f5 	.word	0x0800b3f5
 800b2cc:	0800b331 	.word	0x0800b331
 800b2d0:	0800b3f5 	.word	0x0800b3f5
 800b2d4:	0800b3f5 	.word	0x0800b3f5
 800b2d8:	0800b3f5 	.word	0x0800b3f5
 800b2dc:	0800b373 	.word	0x0800b373
 800b2e0:	0800b3f5 	.word	0x0800b3f5
 800b2e4:	0800b3f5 	.word	0x0800b3f5
 800b2e8:	0800b3f5 	.word	0x0800b3f5
 800b2ec:	0800b3b3 	.word	0x0800b3b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f9fc 	bl	800b6f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	699a      	ldr	r2, [r3, #24]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0208 	orr.w	r2, r2, #8
 800b30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	699a      	ldr	r2, [r3, #24]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0204 	bic.w	r2, r2, #4
 800b31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6999      	ldr	r1, [r3, #24]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	691a      	ldr	r2, [r3, #16]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	619a      	str	r2, [r3, #24]
      break;
 800b32e:	e064      	b.n	800b3fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68b9      	ldr	r1, [r7, #8]
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fa4c 	bl	800b7d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	699a      	ldr	r2, [r3, #24]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b34a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	699a      	ldr	r2, [r3, #24]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b35a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6999      	ldr	r1, [r3, #24]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	021a      	lsls	r2, r3, #8
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	430a      	orrs	r2, r1
 800b36e:	619a      	str	r2, [r3, #24]
      break;
 800b370:	e043      	b.n	800b3fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68b9      	ldr	r1, [r7, #8]
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 faa1 	bl	800b8c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	69da      	ldr	r2, [r3, #28]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f042 0208 	orr.w	r2, r2, #8
 800b38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	69da      	ldr	r2, [r3, #28]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f022 0204 	bic.w	r2, r2, #4
 800b39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	69d9      	ldr	r1, [r3, #28]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	691a      	ldr	r2, [r3, #16]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	61da      	str	r2, [r3, #28]
      break;
 800b3b0:	e023      	b.n	800b3fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 faf5 	bl	800b9a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	69da      	ldr	r2, [r3, #28]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b3cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	69da      	ldr	r2, [r3, #28]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	69d9      	ldr	r1, [r3, #28]
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	021a      	lsls	r2, r3, #8
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	430a      	orrs	r2, r1
 800b3f0:	61da      	str	r2, [r3, #28]
      break;
 800b3f2:	e002      	b.n	800b3fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b402:	7dfb      	ldrb	r3, [r7, #23]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_TIM_ConfigClockSource+0x1c>
 800b424:	2302      	movs	r3, #2
 800b426:	e0b4      	b.n	800b592 <HAL_TIM_ConfigClockSource+0x186>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2202      	movs	r2, #2
 800b434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b44e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b460:	d03e      	beq.n	800b4e0 <HAL_TIM_ConfigClockSource+0xd4>
 800b462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b466:	f200 8087 	bhi.w	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b46a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b46e:	f000 8086 	beq.w	800b57e <HAL_TIM_ConfigClockSource+0x172>
 800b472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b476:	d87f      	bhi.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b478:	2b70      	cmp	r3, #112	@ 0x70
 800b47a:	d01a      	beq.n	800b4b2 <HAL_TIM_ConfigClockSource+0xa6>
 800b47c:	2b70      	cmp	r3, #112	@ 0x70
 800b47e:	d87b      	bhi.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b480:	2b60      	cmp	r3, #96	@ 0x60
 800b482:	d050      	beq.n	800b526 <HAL_TIM_ConfigClockSource+0x11a>
 800b484:	2b60      	cmp	r3, #96	@ 0x60
 800b486:	d877      	bhi.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b488:	2b50      	cmp	r3, #80	@ 0x50
 800b48a:	d03c      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0xfa>
 800b48c:	2b50      	cmp	r3, #80	@ 0x50
 800b48e:	d873      	bhi.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b490:	2b40      	cmp	r3, #64	@ 0x40
 800b492:	d058      	beq.n	800b546 <HAL_TIM_ConfigClockSource+0x13a>
 800b494:	2b40      	cmp	r3, #64	@ 0x40
 800b496:	d86f      	bhi.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b498:	2b30      	cmp	r3, #48	@ 0x30
 800b49a:	d064      	beq.n	800b566 <HAL_TIM_ConfigClockSource+0x15a>
 800b49c:	2b30      	cmp	r3, #48	@ 0x30
 800b49e:	d86b      	bhi.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a0:	2b20      	cmp	r3, #32
 800b4a2:	d060      	beq.n	800b566 <HAL_TIM_ConfigClockSource+0x15a>
 800b4a4:	2b20      	cmp	r3, #32
 800b4a6:	d867      	bhi.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d05c      	beq.n	800b566 <HAL_TIM_ConfigClockSource+0x15a>
 800b4ac:	2b10      	cmp	r3, #16
 800b4ae:	d05a      	beq.n	800b566 <HAL_TIM_ConfigClockSource+0x15a>
 800b4b0:	e062      	b.n	800b578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4c2:	f000 fb41 	bl	800bb48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b4d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	609a      	str	r2, [r3, #8]
      break;
 800b4de:	e04f      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4f0:	f000 fb2a 	bl	800bb48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	689a      	ldr	r2, [r3, #8]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b502:	609a      	str	r2, [r3, #8]
      break;
 800b504:	e03c      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b512:	461a      	mov	r2, r3
 800b514:	f000 fa9e 	bl	800ba54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2150      	movs	r1, #80	@ 0x50
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 faf7 	bl	800bb12 <TIM_ITRx_SetConfig>
      break;
 800b524:	e02c      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b532:	461a      	mov	r2, r3
 800b534:	f000 fabd 	bl	800bab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2160      	movs	r1, #96	@ 0x60
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 fae7 	bl	800bb12 <TIM_ITRx_SetConfig>
      break;
 800b544:	e01c      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b552:	461a      	mov	r2, r3
 800b554:	f000 fa7e 	bl	800ba54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2140      	movs	r1, #64	@ 0x40
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 fad7 	bl	800bb12 <TIM_ITRx_SetConfig>
      break;
 800b564:	e00c      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4619      	mov	r1, r3
 800b570:	4610      	mov	r0, r2
 800b572:	f000 face 	bl	800bb12 <TIM_ITRx_SetConfig>
      break;
 800b576:	e003      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	73fb      	strb	r3, [r7, #15]
      break;
 800b57c:	e000      	b.n	800b580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b57e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b590:	7bfb      	ldrb	r3, [r7, #15]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a46      	ldr	r2, [pc, #280]	@ (800b6c8 <TIM_Base_SetConfig+0x12c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d013      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ba:	d00f      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a43      	ldr	r2, [pc, #268]	@ (800b6cc <TIM_Base_SetConfig+0x130>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d00b      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a42      	ldr	r2, [pc, #264]	@ (800b6d0 <TIM_Base_SetConfig+0x134>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d007      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a41      	ldr	r2, [pc, #260]	@ (800b6d4 <TIM_Base_SetConfig+0x138>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d003      	beq.n	800b5dc <TIM_Base_SetConfig+0x40>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a40      	ldr	r2, [pc, #256]	@ (800b6d8 <TIM_Base_SetConfig+0x13c>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d108      	bne.n	800b5ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a35      	ldr	r2, [pc, #212]	@ (800b6c8 <TIM_Base_SetConfig+0x12c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d02b      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5fc:	d027      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a32      	ldr	r2, [pc, #200]	@ (800b6cc <TIM_Base_SetConfig+0x130>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d023      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a31      	ldr	r2, [pc, #196]	@ (800b6d0 <TIM_Base_SetConfig+0x134>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d01f      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a30      	ldr	r2, [pc, #192]	@ (800b6d4 <TIM_Base_SetConfig+0x138>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d01b      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a2f      	ldr	r2, [pc, #188]	@ (800b6d8 <TIM_Base_SetConfig+0x13c>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d017      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a2e      	ldr	r2, [pc, #184]	@ (800b6dc <TIM_Base_SetConfig+0x140>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d013      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a2d      	ldr	r2, [pc, #180]	@ (800b6e0 <TIM_Base_SetConfig+0x144>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00f      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a2c      	ldr	r2, [pc, #176]	@ (800b6e4 <TIM_Base_SetConfig+0x148>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d00b      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a2b      	ldr	r2, [pc, #172]	@ (800b6e8 <TIM_Base_SetConfig+0x14c>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d007      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a2a      	ldr	r2, [pc, #168]	@ (800b6ec <TIM_Base_SetConfig+0x150>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d003      	beq.n	800b64e <TIM_Base_SetConfig+0xb2>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a29      	ldr	r2, [pc, #164]	@ (800b6f0 <TIM_Base_SetConfig+0x154>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d108      	bne.n	800b660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	695b      	ldr	r3, [r3, #20]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	689a      	ldr	r2, [r3, #8]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a10      	ldr	r2, [pc, #64]	@ (800b6c8 <TIM_Base_SetConfig+0x12c>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d003      	beq.n	800b694 <TIM_Base_SetConfig+0xf8>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a12      	ldr	r2, [pc, #72]	@ (800b6d8 <TIM_Base_SetConfig+0x13c>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d103      	bne.n	800b69c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	691a      	ldr	r2, [r3, #16]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d105      	bne.n	800b6ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f023 0201 	bic.w	r2, r3, #1
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	611a      	str	r2, [r3, #16]
  }
}
 800b6ba:	bf00      	nop
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	40010000 	.word	0x40010000
 800b6cc:	40000400 	.word	0x40000400
 800b6d0:	40000800 	.word	0x40000800
 800b6d4:	40000c00 	.word	0x40000c00
 800b6d8:	40010400 	.word	0x40010400
 800b6dc:	40014000 	.word	0x40014000
 800b6e0:	40014400 	.word	0x40014400
 800b6e4:	40014800 	.word	0x40014800
 800b6e8:	40001800 	.word	0x40001800
 800b6ec:	40001c00 	.word	0x40001c00
 800b6f0:	40002000 	.word	0x40002000

0800b6f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	f023 0201 	bic.w	r2, r3, #1
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f023 0303 	bic.w	r3, r3, #3
 800b72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	4313      	orrs	r3, r2
 800b734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f023 0302 	bic.w	r3, r3, #2
 800b73c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	4313      	orrs	r3, r2
 800b746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a20      	ldr	r2, [pc, #128]	@ (800b7cc <TIM_OC1_SetConfig+0xd8>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d003      	beq.n	800b758 <TIM_OC1_SetConfig+0x64>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a1f      	ldr	r2, [pc, #124]	@ (800b7d0 <TIM_OC1_SetConfig+0xdc>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d10c      	bne.n	800b772 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	f023 0308 	bic.w	r3, r3, #8
 800b75e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	4313      	orrs	r3, r2
 800b768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f023 0304 	bic.w	r3, r3, #4
 800b770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a15      	ldr	r2, [pc, #84]	@ (800b7cc <TIM_OC1_SetConfig+0xd8>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d003      	beq.n	800b782 <TIM_OC1_SetConfig+0x8e>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a14      	ldr	r2, [pc, #80]	@ (800b7d0 <TIM_OC1_SetConfig+0xdc>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d111      	bne.n	800b7a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	4313      	orrs	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	621a      	str	r2, [r3, #32]
}
 800b7c0:	bf00      	nop
 800b7c2:	371c      	adds	r7, #28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	40010000 	.word	0x40010000
 800b7d0:	40010400 	.word	0x40010400

0800b7d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	f023 0210 	bic.w	r2, r3, #16
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	021b      	lsls	r3, r3, #8
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f023 0320 	bic.w	r3, r3, #32
 800b81e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	011b      	lsls	r3, r3, #4
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	4313      	orrs	r3, r2
 800b82a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a22      	ldr	r2, [pc, #136]	@ (800b8b8 <TIM_OC2_SetConfig+0xe4>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d003      	beq.n	800b83c <TIM_OC2_SetConfig+0x68>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a21      	ldr	r2, [pc, #132]	@ (800b8bc <TIM_OC2_SetConfig+0xe8>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d10d      	bne.n	800b858 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	011b      	lsls	r3, r3, #4
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b856:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a17      	ldr	r2, [pc, #92]	@ (800b8b8 <TIM_OC2_SetConfig+0xe4>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d003      	beq.n	800b868 <TIM_OC2_SetConfig+0x94>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a16      	ldr	r2, [pc, #88]	@ (800b8bc <TIM_OC2_SetConfig+0xe8>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d113      	bne.n	800b890 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b86e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	4313      	orrs	r3, r2
 800b882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	621a      	str	r2, [r3, #32]
}
 800b8aa:	bf00      	nop
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	40010000 	.word	0x40010000
 800b8bc:	40010400 	.word	0x40010400

0800b8c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a1b      	ldr	r3, [r3, #32]
 800b8ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a1b      	ldr	r3, [r3, #32]
 800b8d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f023 0303 	bic.w	r3, r3, #3
 800b8f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	021b      	lsls	r3, r3, #8
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	4313      	orrs	r3, r2
 800b914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a21      	ldr	r2, [pc, #132]	@ (800b9a0 <TIM_OC3_SetConfig+0xe0>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d003      	beq.n	800b926 <TIM_OC3_SetConfig+0x66>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a20      	ldr	r2, [pc, #128]	@ (800b9a4 <TIM_OC3_SetConfig+0xe4>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d10d      	bne.n	800b942 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b92c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	021b      	lsls	r3, r3, #8
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	4313      	orrs	r3, r2
 800b938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a16      	ldr	r2, [pc, #88]	@ (800b9a0 <TIM_OC3_SetConfig+0xe0>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d003      	beq.n	800b952 <TIM_OC3_SetConfig+0x92>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a15      	ldr	r2, [pc, #84]	@ (800b9a4 <TIM_OC3_SetConfig+0xe4>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d113      	bne.n	800b97a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	011b      	lsls	r3, r3, #4
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	4313      	orrs	r3, r2
 800b978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	621a      	str	r2, [r3, #32]
}
 800b994:	bf00      	nop
 800b996:	371c      	adds	r7, #28
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	40010000 	.word	0x40010000
 800b9a4:	40010400 	.word	0x40010400

0800b9a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b087      	sub	sp, #28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a1b      	ldr	r3, [r3, #32]
 800b9b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	021b      	lsls	r3, r3, #8
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b9f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	031b      	lsls	r3, r3, #12
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a12      	ldr	r2, [pc, #72]	@ (800ba4c <TIM_OC4_SetConfig+0xa4>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d003      	beq.n	800ba10 <TIM_OC4_SetConfig+0x68>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a11      	ldr	r2, [pc, #68]	@ (800ba50 <TIM_OC4_SetConfig+0xa8>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d109      	bne.n	800ba24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	019b      	lsls	r3, r3, #6
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	621a      	str	r2, [r3, #32]
}
 800ba3e:	bf00      	nop
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	40010000 	.word	0x40010000
 800ba50:	40010400 	.word	0x40010400

0800ba54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6a1b      	ldr	r3, [r3, #32]
 800ba64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f023 0201 	bic.w	r2, r3, #1
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ba7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f023 030a 	bic.w	r3, r3, #10
 800ba90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	621a      	str	r2, [r3, #32]
}
 800baa6:	bf00      	nop
 800baa8:	371c      	adds	r7, #28
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b087      	sub	sp, #28
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	f023 0210 	bic.w	r2, r3, #16
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800badc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	031b      	lsls	r3, r3, #12
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800baee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	011b      	lsls	r3, r3, #4
 800baf4:	697a      	ldr	r2, [r7, #20]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	621a      	str	r2, [r3, #32]
}
 800bb06:	bf00      	nop
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b085      	sub	sp, #20
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	f043 0307 	orr.w	r3, r3, #7
 800bb34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	609a      	str	r2, [r3, #8]
}
 800bb3c:	bf00      	nop
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	021a      	lsls	r2, r3, #8
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	609a      	str	r2, [r3, #8]
}
 800bb7c:	bf00      	nop
 800bb7e:	371c      	adds	r7, #28
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	f003 031f 	and.w	r3, r3, #31
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6a1a      	ldr	r2, [r3, #32]
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	43db      	mvns	r3, r3
 800bbaa:	401a      	ands	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6a1a      	ldr	r2, [r3, #32]
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	f003 031f 	and.w	r3, r3, #31
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	fa01 f303 	lsl.w	r3, r1, r3
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	621a      	str	r2, [r3, #32]
}
 800bbc6:	bf00      	nop
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e05a      	b.n	800bca2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a21      	ldr	r2, [pc, #132]	@ (800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d022      	beq.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc38:	d01d      	beq.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a1d      	ldr	r2, [pc, #116]	@ (800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d018      	beq.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d013      	beq.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a1a      	ldr	r2, [pc, #104]	@ (800bcbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d00e      	beq.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a18      	ldr	r2, [pc, #96]	@ (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d009      	beq.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a17      	ldr	r2, [pc, #92]	@ (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d004      	beq.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a15      	ldr	r2, [pc, #84]	@ (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d10c      	bne.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	40010000 	.word	0x40010000
 800bcb4:	40000400 	.word	0x40000400
 800bcb8:	40000800 	.word	0x40000800
 800bcbc:	40000c00 	.word	0x40000c00
 800bcc0:	40010400 	.word	0x40010400
 800bcc4:	40014000 	.word	0x40014000
 800bcc8:	40001800 	.word	0x40001800

0800bccc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d101      	bne.n	800bce8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bce4:	2302      	movs	r3, #2
 800bce6:	e03d      	b.n	800bd64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	695b      	ldr	r3, [r3, #20]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e042      	b.n	800be08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7fa fef2 	bl	8006b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2224      	movs	r2, #36	@ 0x24
 800bda0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68da      	ldr	r2, [r3, #12]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bdb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 ff77 	bl	800cca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	691a      	ldr	r2, [r3, #16]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bdc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	695a      	ldr	r2, [r3, #20]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bdd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68da      	ldr	r2, [r3, #12]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bde8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08c      	sub	sp, #48	@ 0x30
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	4613      	mov	r3, r2
 800be1c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b20      	cmp	r3, #32
 800be28:	d156      	bne.n	800bed8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <HAL_UART_Transmit_DMA+0x26>
 800be30:	88fb      	ldrh	r3, [r7, #6]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e04f      	b.n	800beda <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	88fa      	ldrh	r2, [r7, #6]
 800be44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	88fa      	ldrh	r2, [r7, #6]
 800be4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2221      	movs	r2, #33	@ 0x21
 800be56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be5e:	4a21      	ldr	r2, [pc, #132]	@ (800bee4 <HAL_UART_Transmit_DMA+0xd4>)
 800be60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be66:	4a20      	ldr	r2, [pc, #128]	@ (800bee8 <HAL_UART_Transmit_DMA+0xd8>)
 800be68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be6e:	4a1f      	ldr	r2, [pc, #124]	@ (800beec <HAL_UART_Transmit_DMA+0xdc>)
 800be70:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be76:	2200      	movs	r2, #0
 800be78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800be7a:	f107 0308 	add.w	r3, r7, #8
 800be7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be86:	6819      	ldr	r1, [r3, #0]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3304      	adds	r3, #4
 800be8e:	461a      	mov	r2, r3
 800be90:	88fb      	ldrh	r3, [r7, #6]
 800be92:	f7fc fadf 	bl	8008454 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3314      	adds	r3, #20
 800bea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	e853 3f00 	ldrex	r3, [r3]
 800beae:	617b      	str	r3, [r7, #20]
   return(result);
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3314      	adds	r3, #20
 800bebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bec0:	627a      	str	r2, [r7, #36]	@ 0x24
 800bec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec4:	6a39      	ldr	r1, [r7, #32]
 800bec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bec8:	e841 2300 	strex	r3, r2, [r1]
 800becc:	61fb      	str	r3, [r7, #28]
   return(result);
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1e5      	bne.n	800bea0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	e000      	b.n	800beda <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800bed8:	2302      	movs	r3, #2
  }
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3730      	adds	r7, #48	@ 0x30
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	0800c535 	.word	0x0800c535
 800bee8:	0800c5cf 	.word	0x0800c5cf
 800beec:	0800c753 	.word	0x0800c753

0800bef0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08c      	sub	sp, #48	@ 0x30
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	4613      	mov	r3, r2
 800befc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b20      	cmp	r3, #32
 800bf08:	d14a      	bne.n	800bfa0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e043      	b.n	800bfa2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bf26:	88fb      	ldrh	r3, [r7, #6]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	68b9      	ldr	r1, [r7, #8]
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f000 fc5b 	bl	800c7e8 <UART_Start_Receive_DMA>
 800bf32:	4603      	mov	r3, r0
 800bf34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bf38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d12c      	bne.n	800bf9a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d125      	bne.n	800bf94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf48:	2300      	movs	r3, #0
 800bf4a:	613b      	str	r3, [r7, #16]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	613b      	str	r3, [r7, #16]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	613b      	str	r3, [r7, #16]
 800bf5c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	330c      	adds	r3, #12
 800bf64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	f043 0310 	orr.w	r3, r3, #16
 800bf74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	330c      	adds	r3, #12
 800bf7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf7e:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6a39      	ldr	r1, [r7, #32]
 800bf84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e5      	bne.n	800bf5e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800bf92:	e002      	b.n	800bf9a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800bf9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf9e:	e000      	b.n	800bfa2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800bfa0:	2302      	movs	r3, #2
  }
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3730      	adds	r7, #48	@ 0x30
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b0ba      	sub	sp, #232	@ 0xe8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bfde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfe2:	f003 030f 	and.w	r3, r3, #15
 800bfe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bfea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10f      	bne.n	800c012 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bff6:	f003 0320 	and.w	r3, r3, #32
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <HAL_UART_IRQHandler+0x66>
 800bffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c002:	f003 0320 	and.w	r3, r3, #32
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fd8d 	bl	800cb2a <UART_Receive_IT>
      return;
 800c010:	e25b      	b.n	800c4ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 80de 	beq.w	800c1d8 <HAL_UART_IRQHandler+0x22c>
 800c01c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	d106      	bne.n	800c036 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c02c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 80d1 	beq.w	800c1d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00b      	beq.n	800c05a <HAL_UART_IRQHandler+0xae>
 800c042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d005      	beq.n	800c05a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c052:	f043 0201 	orr.w	r2, r3, #1
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c05e:	f003 0304 	and.w	r3, r3, #4
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00b      	beq.n	800c07e <HAL_UART_IRQHandler+0xd2>
 800c066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d005      	beq.n	800c07e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c076:	f043 0202 	orr.w	r2, r3, #2
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	2b00      	cmp	r3, #0
 800c088:	d00b      	beq.n	800c0a2 <HAL_UART_IRQHandler+0xf6>
 800c08a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d005      	beq.n	800c0a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09a:	f043 0204 	orr.w	r2, r3, #4
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0a6:	f003 0308 	and.w	r3, r3, #8
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d011      	beq.n	800c0d2 <HAL_UART_IRQHandler+0x126>
 800c0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d105      	bne.n	800c0c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c0ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0be:	f003 0301 	and.w	r3, r3, #1
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d005      	beq.n	800c0d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ca:	f043 0208 	orr.w	r2, r3, #8
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 81f2 	beq.w	800c4c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e0:	f003 0320 	and.w	r3, r3, #32
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d008      	beq.n	800c0fa <HAL_UART_IRQHandler+0x14e>
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fd18 	bl	800cb2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c104:	2b40      	cmp	r3, #64	@ 0x40
 800c106:	bf0c      	ite	eq
 800c108:	2301      	moveq	r3, #1
 800c10a:	2300      	movne	r3, #0
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c116:	f003 0308 	and.w	r3, r3, #8
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <HAL_UART_IRQHandler+0x17a>
 800c11e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c122:	2b00      	cmp	r3, #0
 800c124:	d04f      	beq.n	800c1c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fc20 	bl	800c96c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c136:	2b40      	cmp	r3, #64	@ 0x40
 800c138:	d141      	bne.n	800c1be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3314      	adds	r3, #20
 800c140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c148:	e853 3f00 	ldrex	r3, [r3]
 800c14c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3314      	adds	r3, #20
 800c162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c16a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c176:	e841 2300 	strex	r3, r2, [r1]
 800c17a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c17e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1d9      	bne.n	800c13a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d013      	beq.n	800c1b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c192:	4a7e      	ldr	r2, [pc, #504]	@ (800c38c <HAL_UART_IRQHandler+0x3e0>)
 800c194:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fc fa22 	bl	80085e4 <HAL_DMA_Abort_IT>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d016      	beq.n	800c1d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1b4:	e00e      	b.n	800c1d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 f9b2 	bl	800c520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1bc:	e00a      	b.n	800c1d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f9ae 	bl	800c520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1c4:	e006      	b.n	800c1d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f9aa 	bl	800c520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c1d2:	e175      	b.n	800c4c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d4:	bf00      	nop
    return;
 800c1d6:	e173      	b.n	800c4c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	f040 814f 	bne.w	800c480 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1e6:	f003 0310 	and.w	r3, r3, #16
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f000 8148 	beq.w	800c480 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1f4:	f003 0310 	and.w	r3, r3, #16
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 8141 	beq.w	800c480 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1fe:	2300      	movs	r3, #0
 800c200:	60bb      	str	r3, [r7, #8]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	60bb      	str	r3, [r7, #8]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	60bb      	str	r3, [r7, #8]
 800c212:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c21e:	2b40      	cmp	r3, #64	@ 0x40
 800c220:	f040 80b6 	bne.w	800c390 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c234:	2b00      	cmp	r3, #0
 800c236:	f000 8145 	beq.w	800c4c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c23e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c242:	429a      	cmp	r2, r3
 800c244:	f080 813e 	bcs.w	800c4c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c24e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c254:	69db      	ldr	r3, [r3, #28]
 800c256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c25a:	f000 8088 	beq.w	800c36e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	330c      	adds	r3, #12
 800c264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c27c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	330c      	adds	r3, #12
 800c286:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c28a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c28e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c2a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1d9      	bne.n	800c25e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3314      	adds	r3, #20
 800c2b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2b4:	e853 3f00 	ldrex	r3, [r3]
 800c2b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c2ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c2bc:	f023 0301 	bic.w	r3, r3, #1
 800c2c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	3314      	adds	r3, #20
 800c2ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c2ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c2d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c2d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c2da:	e841 2300 	strex	r3, r2, [r1]
 800c2de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c2e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1e1      	bne.n	800c2aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3314      	adds	r3, #20
 800c2ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2f0:	e853 3f00 	ldrex	r3, [r3]
 800c2f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c2f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3314      	adds	r3, #20
 800c306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c30a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c30c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c312:	e841 2300 	strex	r3, r2, [r1]
 800c316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1e3      	bne.n	800c2e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2220      	movs	r2, #32
 800c322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	330c      	adds	r3, #12
 800c332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c336:	e853 3f00 	ldrex	r3, [r3]
 800c33a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c33c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c33e:	f023 0310 	bic.w	r3, r3, #16
 800c342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	330c      	adds	r3, #12
 800c34c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c350:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c352:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c358:	e841 2300 	strex	r3, r2, [r1]
 800c35c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e3      	bne.n	800c32c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fc f8cb 	bl	8008504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2202      	movs	r2, #2
 800c372:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	b29b      	uxth	r3, r3
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7f6 fadd 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c38a:	e09b      	b.n	800c4c4 <HAL_UART_IRQHandler+0x518>
 800c38c:	0800ca33 	.word	0x0800ca33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c398:	b29b      	uxth	r3, r3
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 808e 	beq.w	800c4c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c3ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 8089 	beq.w	800c4c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	330c      	adds	r3, #12
 800c3bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c0:	e853 3f00 	ldrex	r3, [r3]
 800c3c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	330c      	adds	r3, #12
 800c3d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c3da:	647a      	str	r2, [r7, #68]	@ 0x44
 800c3dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1e3      	bne.n	800c3b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3314      	adds	r3, #20
 800c3f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f8:	e853 3f00 	ldrex	r3, [r3]
 800c3fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	f023 0301 	bic.w	r3, r3, #1
 800c404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3314      	adds	r3, #20
 800c40e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c412:	633a      	str	r2, [r7, #48]	@ 0x30
 800c414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e3      	bne.n	800c3ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2220      	movs	r2, #32
 800c42a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	330c      	adds	r3, #12
 800c43a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	e853 3f00 	ldrex	r3, [r3]
 800c442:	60fb      	str	r3, [r7, #12]
   return(result);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 0310 	bic.w	r3, r3, #16
 800c44a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	330c      	adds	r3, #12
 800c454:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c458:	61fa      	str	r2, [r7, #28]
 800c45a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45c:	69b9      	ldr	r1, [r7, #24]
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	e841 2300 	strex	r3, r2, [r1]
 800c464:	617b      	str	r3, [r7, #20]
   return(result);
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1e3      	bne.n	800c434 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2202      	movs	r2, #2
 800c470:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c472:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7f6 fa63 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c47e:	e023      	b.n	800c4c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d009      	beq.n	800c4a0 <HAL_UART_IRQHandler+0x4f4>
 800c48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fade 	bl	800ca5a <UART_Transmit_IT>
    return;
 800c49e:	e014      	b.n	800c4ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00e      	beq.n	800c4ca <HAL_UART_IRQHandler+0x51e>
 800c4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d008      	beq.n	800c4ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fb1e 	bl	800cafa <UART_EndTransmit_IT>
    return;
 800c4be:	e004      	b.n	800c4ca <HAL_UART_IRQHandler+0x51e>
    return;
 800c4c0:	bf00      	nop
 800c4c2:	e002      	b.n	800c4ca <HAL_UART_IRQHandler+0x51e>
      return;
 800c4c4:	bf00      	nop
 800c4c6:	e000      	b.n	800c4ca <HAL_UART_IRQHandler+0x51e>
      return;
 800c4c8:	bf00      	nop
  }
}
 800c4ca:	37e8      	adds	r7, #232	@ 0xe8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b090      	sub	sp, #64	@ 0x40
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d137      	bne.n	800c5c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c552:	2200      	movs	r2, #0
 800c554:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3314      	adds	r3, #20
 800c55c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	e853 3f00 	ldrex	r3, [r3]
 800c564:	623b      	str	r3, [r7, #32]
   return(result);
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c56c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3314      	adds	r3, #20
 800c574:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c576:	633a      	str	r2, [r7, #48]	@ 0x30
 800c578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c57a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c57c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c57e:	e841 2300 	strex	r3, r2, [r1]
 800c582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1e5      	bne.n	800c556 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c58a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	330c      	adds	r3, #12
 800c590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	e853 3f00 	ldrex	r3, [r3]
 800c598:	60fb      	str	r3, [r7, #12]
   return(result);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	330c      	adds	r3, #12
 800c5a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5aa:	61fa      	str	r2, [r7, #28]
 800c5ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ae:	69b9      	ldr	r1, [r7, #24]
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	e841 2300 	strex	r3, r2, [r1]
 800c5b6:	617b      	str	r3, [r7, #20]
   return(result);
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1e5      	bne.n	800c58a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5be:	e002      	b.n	800c5c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c5c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5c2:	f7ff ff85 	bl	800c4d0 <HAL_UART_TxCpltCallback>
}
 800c5c6:	bf00      	nop
 800c5c8:	3740      	adds	r7, #64	@ 0x40
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c5dc:	68f8      	ldr	r0, [r7, #12]
 800c5de:	f7ff ff81 	bl	800c4e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b09c      	sub	sp, #112	@ 0x70
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c602:	2b00      	cmp	r3, #0
 800c604:	d172      	bne.n	800c6ec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c608:	2200      	movs	r2, #0
 800c60a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c60c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	330c      	adds	r3, #12
 800c612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c61c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c61e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c622:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	330c      	adds	r3, #12
 800c62a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c62c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c62e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c632:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c634:	e841 2300 	strex	r3, r2, [r1]
 800c638:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c63a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e5      	bne.n	800c60c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3314      	adds	r3, #20
 800c646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64a:	e853 3f00 	ldrex	r3, [r3]
 800c64e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c652:	f023 0301 	bic.w	r3, r3, #1
 800c656:	667b      	str	r3, [r7, #100]	@ 0x64
 800c658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3314      	adds	r3, #20
 800c65e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c660:	647a      	str	r2, [r7, #68]	@ 0x44
 800c662:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c668:	e841 2300 	strex	r3, r2, [r1]
 800c66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e5      	bne.n	800c640 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3314      	adds	r3, #20
 800c67a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67e:	e853 3f00 	ldrex	r3, [r3]
 800c682:	623b      	str	r3, [r7, #32]
   return(result);
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c68a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c68c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3314      	adds	r3, #20
 800c692:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c694:	633a      	str	r2, [r7, #48]	@ 0x30
 800c696:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c698:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c69a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c69c:	e841 2300 	strex	r3, r2, [r1]
 800c6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e5      	bne.n	800c674 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c6a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d119      	bne.n	800c6ec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	330c      	adds	r3, #12
 800c6be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	e853 3f00 	ldrex	r3, [r3]
 800c6c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f023 0310 	bic.w	r3, r3, #16
 800c6ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c6d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	330c      	adds	r3, #12
 800c6d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c6d8:	61fa      	str	r2, [r7, #28]
 800c6da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6dc:	69b9      	ldr	r1, [r7, #24]
 800c6de:	69fa      	ldr	r2, [r7, #28]
 800c6e0:	e841 2300 	strex	r3, r2, [r1]
 800c6e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1e5      	bne.n	800c6b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d106      	bne.n	800c708 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6fe:	4619      	mov	r1, r3
 800c700:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c702:	f7f6 f91f 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c706:	e002      	b.n	800c70e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c708:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c70a:	f7ff fef5 	bl	800c4f8 <HAL_UART_RxCpltCallback>
}
 800c70e:	bf00      	nop
 800c710:	3770      	adds	r7, #112	@ 0x70
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c722:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2201      	movs	r2, #1
 800c728:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d108      	bne.n	800c744 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c736:	085b      	lsrs	r3, r3, #1
 800c738:	b29b      	uxth	r3, r3
 800c73a:	4619      	mov	r1, r3
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7f6 f901 	bl	8002944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c742:	e002      	b.n	800c74a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f7ff fee1 	bl	800c50c <HAL_UART_RxHalfCpltCallback>
}
 800c74a:	bf00      	nop
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c75a:	2300      	movs	r3, #0
 800c75c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c762:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c76e:	2b80      	cmp	r3, #128	@ 0x80
 800c770:	bf0c      	ite	eq
 800c772:	2301      	moveq	r3, #1
 800c774:	2300      	movne	r3, #0
 800c776:	b2db      	uxtb	r3, r3
 800c778:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b21      	cmp	r3, #33	@ 0x21
 800c784:	d108      	bne.n	800c798 <UART_DMAError+0x46>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2200      	movs	r2, #0
 800c790:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c792:	68b8      	ldr	r0, [r7, #8]
 800c794:	f000 f8c2 	bl	800c91c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	695b      	ldr	r3, [r3, #20]
 800c79e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a2:	2b40      	cmp	r3, #64	@ 0x40
 800c7a4:	bf0c      	ite	eq
 800c7a6:	2301      	moveq	r3, #1
 800c7a8:	2300      	movne	r3, #0
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b22      	cmp	r3, #34	@ 0x22
 800c7b8:	d108      	bne.n	800c7cc <UART_DMAError+0x7a>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d005      	beq.n	800c7cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c7c6:	68b8      	ldr	r0, [r7, #8]
 800c7c8:	f000 f8d0 	bl	800c96c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7d0:	f043 0210 	orr.w	r2, r3, #16
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7d8:	68b8      	ldr	r0, [r7, #8]
 800c7da:	f7ff fea1 	bl	800c520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7de:	bf00      	nop
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
	...

0800c7e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b098      	sub	sp, #96	@ 0x60
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	88fa      	ldrh	r2, [r7, #6]
 800c800:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2222      	movs	r2, #34	@ 0x22
 800c80c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c814:	4a3e      	ldr	r2, [pc, #248]	@ (800c910 <UART_Start_Receive_DMA+0x128>)
 800c816:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c81c:	4a3d      	ldr	r2, [pc, #244]	@ (800c914 <UART_Start_Receive_DMA+0x12c>)
 800c81e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c824:	4a3c      	ldr	r2, [pc, #240]	@ (800c918 <UART_Start_Receive_DMA+0x130>)
 800c826:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c82c:	2200      	movs	r2, #0
 800c82e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c830:	f107 0308 	add.w	r3, r7, #8
 800c834:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	3304      	adds	r3, #4
 800c840:	4619      	mov	r1, r3
 800c842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	88fb      	ldrh	r3, [r7, #6]
 800c848:	f7fb fe04 	bl	8008454 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c84c:	2300      	movs	r3, #0
 800c84e:	613b      	str	r3, [r7, #16]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	613b      	str	r3, [r7, #16]
 800c860:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d019      	beq.n	800c89e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	330c      	adds	r3, #12
 800c870:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c874:	e853 3f00 	ldrex	r3, [r3]
 800c878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c87a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c880:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	330c      	adds	r3, #12
 800c888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c88a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c88c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e5      	bne.n	800c86a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3314      	adds	r3, #20
 800c8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a8:	e853 3f00 	ldrex	r3, [r3]
 800c8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b0:	f043 0301 	orr.w	r3, r3, #1
 800c8b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3314      	adds	r3, #20
 800c8bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c8be:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c8c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c8c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8c6:	e841 2300 	strex	r3, r2, [r1]
 800c8ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e5      	bne.n	800c89e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3314      	adds	r3, #20
 800c8d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	e853 3f00 	ldrex	r3, [r3]
 800c8e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3314      	adds	r3, #20
 800c8f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f6:	6a39      	ldr	r1, [r7, #32]
 800c8f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8fa:	e841 2300 	strex	r3, r2, [r1]
 800c8fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1e5      	bne.n	800c8d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3760      	adds	r7, #96	@ 0x60
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	0800c5eb 	.word	0x0800c5eb
 800c914:	0800c717 	.word	0x0800c717
 800c918:	0800c753 	.word	0x0800c753

0800c91c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b089      	sub	sp, #36	@ 0x24
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	330c      	adds	r3, #12
 800c92a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	e853 3f00 	ldrex	r3, [r3]
 800c932:	60bb      	str	r3, [r7, #8]
   return(result);
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c93a:	61fb      	str	r3, [r7, #28]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	330c      	adds	r3, #12
 800c942:	69fa      	ldr	r2, [r7, #28]
 800c944:	61ba      	str	r2, [r7, #24]
 800c946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c948:	6979      	ldr	r1, [r7, #20]
 800c94a:	69ba      	ldr	r2, [r7, #24]
 800c94c:	e841 2300 	strex	r3, r2, [r1]
 800c950:	613b      	str	r3, [r7, #16]
   return(result);
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1e5      	bne.n	800c924 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2220      	movs	r2, #32
 800c95c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c960:	bf00      	nop
 800c962:	3724      	adds	r7, #36	@ 0x24
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b095      	sub	sp, #84	@ 0x54
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	330c      	adds	r3, #12
 800c97a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c97e:	e853 3f00 	ldrex	r3, [r3]
 800c982:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c98a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	330c      	adds	r3, #12
 800c992:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c994:	643a      	str	r2, [r7, #64]	@ 0x40
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c99a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c99c:	e841 2300 	strex	r3, r2, [r1]
 800c9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e5      	bne.n	800c974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3314      	adds	r3, #20
 800c9ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	e853 3f00 	ldrex	r3, [r3]
 800c9b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	f023 0301 	bic.w	r3, r3, #1
 800c9be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3314      	adds	r3, #20
 800c9c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9d0:	e841 2300 	strex	r3, r2, [r1]
 800c9d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e5      	bne.n	800c9a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d119      	bne.n	800ca18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	330c      	adds	r3, #12
 800c9ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	e853 3f00 	ldrex	r3, [r3]
 800c9f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	f023 0310 	bic.w	r3, r3, #16
 800c9fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	330c      	adds	r3, #12
 800ca02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca04:	61ba      	str	r2, [r7, #24]
 800ca06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca08:	6979      	ldr	r1, [r7, #20]
 800ca0a:	69ba      	ldr	r2, [r7, #24]
 800ca0c:	e841 2300 	strex	r3, r2, [r1]
 800ca10:	613b      	str	r3, [r7, #16]
   return(result);
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1e5      	bne.n	800c9e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2220      	movs	r2, #32
 800ca1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ca26:	bf00      	nop
 800ca28:	3754      	adds	r7, #84	@ 0x54
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f7ff fd67 	bl	800c520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca52:	bf00      	nop
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b085      	sub	sp, #20
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b21      	cmp	r3, #33	@ 0x21
 800ca6c:	d13e      	bne.n	800caec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca76:	d114      	bne.n	800caa2 <UART_Transmit_IT+0x48>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d110      	bne.n	800caa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6a1b      	ldr	r3, [r3, #32]
 800ca84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	1c9a      	adds	r2, r3, #2
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	621a      	str	r2, [r3, #32]
 800caa0:	e008      	b.n	800cab4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	1c59      	adds	r1, r3, #1
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	6211      	str	r1, [r2, #32]
 800caac:	781a      	ldrb	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cab8:	b29b      	uxth	r3, r3
 800caba:	3b01      	subs	r3, #1
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4619      	mov	r1, r3
 800cac2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10f      	bne.n	800cae8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cad6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68da      	ldr	r2, [r3, #12]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cae6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	e000      	b.n	800caee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800caec:	2302      	movs	r3, #2
  }
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3714      	adds	r7, #20
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b082      	sub	sp, #8
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68da      	ldr	r2, [r3, #12]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2220      	movs	r2, #32
 800cb16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff fcd8 	bl	800c4d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b08c      	sub	sp, #48	@ 0x30
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b22      	cmp	r3, #34	@ 0x22
 800cb3c:	f040 80ae 	bne.w	800cc9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb48:	d117      	bne.n	800cb7a <UART_Receive_IT+0x50>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d113      	bne.n	800cb7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cb52:	2300      	movs	r3, #0
 800cb54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb68:	b29a      	uxth	r2, r3
 800cb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb72:	1c9a      	adds	r2, r3, #2
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	629a      	str	r2, [r3, #40]	@ 0x28
 800cb78:	e026      	b.n	800cbc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb8c:	d007      	beq.n	800cb9e <UART_Receive_IT+0x74>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10a      	bne.n	800cbac <UART_Receive_IT+0x82>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d106      	bne.n	800cbac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	e008      	b.n	800cbbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d15d      	bne.n	800cc98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68da      	ldr	r2, [r3, #12]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0220 	bic.w	r2, r2, #32
 800cbea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68da      	ldr	r2, [r3, #12]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cbfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	695a      	ldr	r2, [r3, #20]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f022 0201 	bic.w	r2, r2, #1
 800cc0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d135      	bne.n	800cc8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	330c      	adds	r3, #12
 800cc2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	e853 3f00 	ldrex	r3, [r3]
 800cc36:	613b      	str	r3, [r7, #16]
   return(result);
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	f023 0310 	bic.w	r3, r3, #16
 800cc3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	330c      	adds	r3, #12
 800cc46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc48:	623a      	str	r2, [r7, #32]
 800cc4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4c:	69f9      	ldr	r1, [r7, #28]
 800cc4e:	6a3a      	ldr	r2, [r7, #32]
 800cc50:	e841 2300 	strex	r3, r2, [r1]
 800cc54:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1e5      	bne.n	800cc28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0310 	and.w	r3, r3, #16
 800cc66:	2b10      	cmp	r3, #16
 800cc68:	d10a      	bne.n	800cc80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	60fb      	str	r3, [r7, #12]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	60fb      	str	r3, [r7, #12]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7f5 fe5c 	bl	8002944 <HAL_UARTEx_RxEventCallback>
 800cc8c:	e002      	b.n	800cc94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fc32 	bl	800c4f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e002      	b.n	800cc9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	e000      	b.n	800cc9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cc9c:	2302      	movs	r3, #2
  }
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3730      	adds	r7, #48	@ 0x30
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccac:	b0c0      	sub	sp, #256	@ 0x100
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ccb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ccc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccc4:	68d9      	ldr	r1, [r3, #12]
 800ccc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	ea40 0301 	orr.w	r3, r0, r1
 800ccd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ccd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccd6:	689a      	ldr	r2, [r3, #8]
 800ccd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	431a      	orrs	r2, r3
 800cce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	431a      	orrs	r2, r3
 800cce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccec:	69db      	ldr	r3, [r3, #28]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ccf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cd00:	f021 010c 	bic.w	r1, r1, #12
 800cd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cd0e:	430b      	orrs	r3, r1
 800cd10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cd1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd22:	6999      	ldr	r1, [r3, #24]
 800cd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	ea40 0301 	orr.w	r3, r0, r1
 800cd2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	4b8f      	ldr	r3, [pc, #572]	@ (800cf74 <UART_SetConfig+0x2cc>)
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d005      	beq.n	800cd48 <UART_SetConfig+0xa0>
 800cd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	4b8d      	ldr	r3, [pc, #564]	@ (800cf78 <UART_SetConfig+0x2d0>)
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d104      	bne.n	800cd52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd48:	f7fd fd1a 	bl	800a780 <HAL_RCC_GetPCLK2Freq>
 800cd4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cd50:	e003      	b.n	800cd5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd52:	f7fd fd01 	bl	800a758 <HAL_RCC_GetPCLK1Freq>
 800cd56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd64:	f040 810c 	bne.w	800cf80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cd68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cd72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cd76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cd7a:	4622      	mov	r2, r4
 800cd7c:	462b      	mov	r3, r5
 800cd7e:	1891      	adds	r1, r2, r2
 800cd80:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cd82:	415b      	adcs	r3, r3
 800cd84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	eb12 0801 	adds.w	r8, r2, r1
 800cd90:	4629      	mov	r1, r5
 800cd92:	eb43 0901 	adc.w	r9, r3, r1
 800cd96:	f04f 0200 	mov.w	r2, #0
 800cd9a:	f04f 0300 	mov.w	r3, #0
 800cd9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cda2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cda6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cdaa:	4690      	mov	r8, r2
 800cdac:	4699      	mov	r9, r3
 800cdae:	4623      	mov	r3, r4
 800cdb0:	eb18 0303 	adds.w	r3, r8, r3
 800cdb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cdb8:	462b      	mov	r3, r5
 800cdba:	eb49 0303 	adc.w	r3, r9, r3
 800cdbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cdc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cdce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cdd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	18db      	adds	r3, r3, r3
 800cdda:	653b      	str	r3, [r7, #80]	@ 0x50
 800cddc:	4613      	mov	r3, r2
 800cdde:	eb42 0303 	adc.w	r3, r2, r3
 800cde2:	657b      	str	r3, [r7, #84]	@ 0x54
 800cde4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cde8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cdec:	f7f4 f83a 	bl	8000e64 <__aeabi_uldivmod>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4b61      	ldr	r3, [pc, #388]	@ (800cf7c <UART_SetConfig+0x2d4>)
 800cdf6:	fba3 2302 	umull	r2, r3, r3, r2
 800cdfa:	095b      	lsrs	r3, r3, #5
 800cdfc:	011c      	lsls	r4, r3, #4
 800cdfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce02:	2200      	movs	r2, #0
 800ce04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ce0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ce10:	4642      	mov	r2, r8
 800ce12:	464b      	mov	r3, r9
 800ce14:	1891      	adds	r1, r2, r2
 800ce16:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ce18:	415b      	adcs	r3, r3
 800ce1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ce20:	4641      	mov	r1, r8
 800ce22:	eb12 0a01 	adds.w	sl, r2, r1
 800ce26:	4649      	mov	r1, r9
 800ce28:	eb43 0b01 	adc.w	fp, r3, r1
 800ce2c:	f04f 0200 	mov.w	r2, #0
 800ce30:	f04f 0300 	mov.w	r3, #0
 800ce34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ce38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ce3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce40:	4692      	mov	sl, r2
 800ce42:	469b      	mov	fp, r3
 800ce44:	4643      	mov	r3, r8
 800ce46:	eb1a 0303 	adds.w	r3, sl, r3
 800ce4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ce4e:	464b      	mov	r3, r9
 800ce50:	eb4b 0303 	adc.w	r3, fp, r3
 800ce54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ce58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ce68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	18db      	adds	r3, r3, r3
 800ce70:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce72:	4613      	mov	r3, r2
 800ce74:	eb42 0303 	adc.w	r3, r2, r3
 800ce78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ce7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ce82:	f7f3 ffef 	bl	8000e64 <__aeabi_uldivmod>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4b3b      	ldr	r3, [pc, #236]	@ (800cf7c <UART_SetConfig+0x2d4>)
 800ce8e:	fba3 2301 	umull	r2, r3, r3, r1
 800ce92:	095b      	lsrs	r3, r3, #5
 800ce94:	2264      	movs	r2, #100	@ 0x64
 800ce96:	fb02 f303 	mul.w	r3, r2, r3
 800ce9a:	1acb      	subs	r3, r1, r3
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cea2:	4b36      	ldr	r3, [pc, #216]	@ (800cf7c <UART_SetConfig+0x2d4>)
 800cea4:	fba3 2302 	umull	r2, r3, r3, r2
 800cea8:	095b      	lsrs	r3, r3, #5
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ceb0:	441c      	add	r4, r3
 800ceb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cebc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cec4:	4642      	mov	r2, r8
 800cec6:	464b      	mov	r3, r9
 800cec8:	1891      	adds	r1, r2, r2
 800ceca:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cecc:	415b      	adcs	r3, r3
 800cece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ced0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ced4:	4641      	mov	r1, r8
 800ced6:	1851      	adds	r1, r2, r1
 800ced8:	6339      	str	r1, [r7, #48]	@ 0x30
 800ceda:	4649      	mov	r1, r9
 800cedc:	414b      	adcs	r3, r1
 800cede:	637b      	str	r3, [r7, #52]	@ 0x34
 800cee0:	f04f 0200 	mov.w	r2, #0
 800cee4:	f04f 0300 	mov.w	r3, #0
 800cee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ceec:	4659      	mov	r1, fp
 800ceee:	00cb      	lsls	r3, r1, #3
 800cef0:	4651      	mov	r1, sl
 800cef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cef6:	4651      	mov	r1, sl
 800cef8:	00ca      	lsls	r2, r1, #3
 800cefa:	4610      	mov	r0, r2
 800cefc:	4619      	mov	r1, r3
 800cefe:	4603      	mov	r3, r0
 800cf00:	4642      	mov	r2, r8
 800cf02:	189b      	adds	r3, r3, r2
 800cf04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf08:	464b      	mov	r3, r9
 800cf0a:	460a      	mov	r2, r1
 800cf0c:	eb42 0303 	adc.w	r3, r2, r3
 800cf10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cf20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cf24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cf28:	460b      	mov	r3, r1
 800cf2a:	18db      	adds	r3, r3, r3
 800cf2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf2e:	4613      	mov	r3, r2
 800cf30:	eb42 0303 	adc.w	r3, r2, r3
 800cf34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cf3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cf3e:	f7f3 ff91 	bl	8000e64 <__aeabi_uldivmod>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4b0d      	ldr	r3, [pc, #52]	@ (800cf7c <UART_SetConfig+0x2d4>)
 800cf48:	fba3 1302 	umull	r1, r3, r3, r2
 800cf4c:	095b      	lsrs	r3, r3, #5
 800cf4e:	2164      	movs	r1, #100	@ 0x64
 800cf50:	fb01 f303 	mul.w	r3, r1, r3
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	3332      	adds	r3, #50	@ 0x32
 800cf5a:	4a08      	ldr	r2, [pc, #32]	@ (800cf7c <UART_SetConfig+0x2d4>)
 800cf5c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf60:	095b      	lsrs	r3, r3, #5
 800cf62:	f003 0207 	and.w	r2, r3, #7
 800cf66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4422      	add	r2, r4
 800cf6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cf70:	e106      	b.n	800d180 <UART_SetConfig+0x4d8>
 800cf72:	bf00      	nop
 800cf74:	40011000 	.word	0x40011000
 800cf78:	40011400 	.word	0x40011400
 800cf7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf84:	2200      	movs	r2, #0
 800cf86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cf8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800cf92:	4642      	mov	r2, r8
 800cf94:	464b      	mov	r3, r9
 800cf96:	1891      	adds	r1, r2, r2
 800cf98:	6239      	str	r1, [r7, #32]
 800cf9a:	415b      	adcs	r3, r3
 800cf9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cfa2:	4641      	mov	r1, r8
 800cfa4:	1854      	adds	r4, r2, r1
 800cfa6:	4649      	mov	r1, r9
 800cfa8:	eb43 0501 	adc.w	r5, r3, r1
 800cfac:	f04f 0200 	mov.w	r2, #0
 800cfb0:	f04f 0300 	mov.w	r3, #0
 800cfb4:	00eb      	lsls	r3, r5, #3
 800cfb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cfba:	00e2      	lsls	r2, r4, #3
 800cfbc:	4614      	mov	r4, r2
 800cfbe:	461d      	mov	r5, r3
 800cfc0:	4643      	mov	r3, r8
 800cfc2:	18e3      	adds	r3, r4, r3
 800cfc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cfc8:	464b      	mov	r3, r9
 800cfca:	eb45 0303 	adc.w	r3, r5, r3
 800cfce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cfd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cfe2:	f04f 0200 	mov.w	r2, #0
 800cfe6:	f04f 0300 	mov.w	r3, #0
 800cfea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cfee:	4629      	mov	r1, r5
 800cff0:	008b      	lsls	r3, r1, #2
 800cff2:	4621      	mov	r1, r4
 800cff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cff8:	4621      	mov	r1, r4
 800cffa:	008a      	lsls	r2, r1, #2
 800cffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d000:	f7f3 ff30 	bl	8000e64 <__aeabi_uldivmod>
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4b60      	ldr	r3, [pc, #384]	@ (800d18c <UART_SetConfig+0x4e4>)
 800d00a:	fba3 2302 	umull	r2, r3, r3, r2
 800d00e:	095b      	lsrs	r3, r3, #5
 800d010:	011c      	lsls	r4, r3, #4
 800d012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d016:	2200      	movs	r2, #0
 800d018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d01c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d024:	4642      	mov	r2, r8
 800d026:	464b      	mov	r3, r9
 800d028:	1891      	adds	r1, r2, r2
 800d02a:	61b9      	str	r1, [r7, #24]
 800d02c:	415b      	adcs	r3, r3
 800d02e:	61fb      	str	r3, [r7, #28]
 800d030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d034:	4641      	mov	r1, r8
 800d036:	1851      	adds	r1, r2, r1
 800d038:	6139      	str	r1, [r7, #16]
 800d03a:	4649      	mov	r1, r9
 800d03c:	414b      	adcs	r3, r1
 800d03e:	617b      	str	r3, [r7, #20]
 800d040:	f04f 0200 	mov.w	r2, #0
 800d044:	f04f 0300 	mov.w	r3, #0
 800d048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d04c:	4659      	mov	r1, fp
 800d04e:	00cb      	lsls	r3, r1, #3
 800d050:	4651      	mov	r1, sl
 800d052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d056:	4651      	mov	r1, sl
 800d058:	00ca      	lsls	r2, r1, #3
 800d05a:	4610      	mov	r0, r2
 800d05c:	4619      	mov	r1, r3
 800d05e:	4603      	mov	r3, r0
 800d060:	4642      	mov	r2, r8
 800d062:	189b      	adds	r3, r3, r2
 800d064:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d068:	464b      	mov	r3, r9
 800d06a:	460a      	mov	r2, r1
 800d06c:	eb42 0303 	adc.w	r3, r2, r3
 800d070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d07e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d080:	f04f 0200 	mov.w	r2, #0
 800d084:	f04f 0300 	mov.w	r3, #0
 800d088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d08c:	4649      	mov	r1, r9
 800d08e:	008b      	lsls	r3, r1, #2
 800d090:	4641      	mov	r1, r8
 800d092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d096:	4641      	mov	r1, r8
 800d098:	008a      	lsls	r2, r1, #2
 800d09a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d09e:	f7f3 fee1 	bl	8000e64 <__aeabi_uldivmod>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4b38      	ldr	r3, [pc, #224]	@ (800d18c <UART_SetConfig+0x4e4>)
 800d0aa:	fba3 2301 	umull	r2, r3, r3, r1
 800d0ae:	095b      	lsrs	r3, r3, #5
 800d0b0:	2264      	movs	r2, #100	@ 0x64
 800d0b2:	fb02 f303 	mul.w	r3, r2, r3
 800d0b6:	1acb      	subs	r3, r1, r3
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	3332      	adds	r3, #50	@ 0x32
 800d0bc:	4a33      	ldr	r2, [pc, #204]	@ (800d18c <UART_SetConfig+0x4e4>)
 800d0be:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c2:	095b      	lsrs	r3, r3, #5
 800d0c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d0c8:	441c      	add	r4, r3
 800d0ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0d2:	677a      	str	r2, [r7, #116]	@ 0x74
 800d0d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d0d8:	4642      	mov	r2, r8
 800d0da:	464b      	mov	r3, r9
 800d0dc:	1891      	adds	r1, r2, r2
 800d0de:	60b9      	str	r1, [r7, #8]
 800d0e0:	415b      	adcs	r3, r3
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d0e8:	4641      	mov	r1, r8
 800d0ea:	1851      	adds	r1, r2, r1
 800d0ec:	6039      	str	r1, [r7, #0]
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	414b      	adcs	r3, r1
 800d0f2:	607b      	str	r3, [r7, #4]
 800d0f4:	f04f 0200 	mov.w	r2, #0
 800d0f8:	f04f 0300 	mov.w	r3, #0
 800d0fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d100:	4659      	mov	r1, fp
 800d102:	00cb      	lsls	r3, r1, #3
 800d104:	4651      	mov	r1, sl
 800d106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d10a:	4651      	mov	r1, sl
 800d10c:	00ca      	lsls	r2, r1, #3
 800d10e:	4610      	mov	r0, r2
 800d110:	4619      	mov	r1, r3
 800d112:	4603      	mov	r3, r0
 800d114:	4642      	mov	r2, r8
 800d116:	189b      	adds	r3, r3, r2
 800d118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d11a:	464b      	mov	r3, r9
 800d11c:	460a      	mov	r2, r1
 800d11e:	eb42 0303 	adc.w	r3, r2, r3
 800d122:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d12e:	667a      	str	r2, [r7, #100]	@ 0x64
 800d130:	f04f 0200 	mov.w	r2, #0
 800d134:	f04f 0300 	mov.w	r3, #0
 800d138:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d13c:	4649      	mov	r1, r9
 800d13e:	008b      	lsls	r3, r1, #2
 800d140:	4641      	mov	r1, r8
 800d142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d146:	4641      	mov	r1, r8
 800d148:	008a      	lsls	r2, r1, #2
 800d14a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d14e:	f7f3 fe89 	bl	8000e64 <__aeabi_uldivmod>
 800d152:	4602      	mov	r2, r0
 800d154:	460b      	mov	r3, r1
 800d156:	4b0d      	ldr	r3, [pc, #52]	@ (800d18c <UART_SetConfig+0x4e4>)
 800d158:	fba3 1302 	umull	r1, r3, r3, r2
 800d15c:	095b      	lsrs	r3, r3, #5
 800d15e:	2164      	movs	r1, #100	@ 0x64
 800d160:	fb01 f303 	mul.w	r3, r1, r3
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	011b      	lsls	r3, r3, #4
 800d168:	3332      	adds	r3, #50	@ 0x32
 800d16a:	4a08      	ldr	r2, [pc, #32]	@ (800d18c <UART_SetConfig+0x4e4>)
 800d16c:	fba2 2303 	umull	r2, r3, r2, r3
 800d170:	095b      	lsrs	r3, r3, #5
 800d172:	f003 020f 	and.w	r2, r3, #15
 800d176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4422      	add	r2, r4
 800d17e:	609a      	str	r2, [r3, #8]
}
 800d180:	bf00      	nop
 800d182:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d186:	46bd      	mov	sp, r7
 800d188:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d18c:	51eb851f 	.word	0x51eb851f

0800d190 <__NVIC_SetPriority>:
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	4603      	mov	r3, r0
 800d198:	6039      	str	r1, [r7, #0]
 800d19a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d19c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	db0a      	blt.n	800d1ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	490c      	ldr	r1, [pc, #48]	@ (800d1dc <__NVIC_SetPriority+0x4c>)
 800d1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1ae:	0112      	lsls	r2, r2, #4
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	440b      	add	r3, r1
 800d1b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d1b8:	e00a      	b.n	800d1d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	4908      	ldr	r1, [pc, #32]	@ (800d1e0 <__NVIC_SetPriority+0x50>)
 800d1c0:	79fb      	ldrb	r3, [r7, #7]
 800d1c2:	f003 030f 	and.w	r3, r3, #15
 800d1c6:	3b04      	subs	r3, #4
 800d1c8:	0112      	lsls	r2, r2, #4
 800d1ca:	b2d2      	uxtb	r2, r2
 800d1cc:	440b      	add	r3, r1
 800d1ce:	761a      	strb	r2, [r3, #24]
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	e000e100 	.word	0xe000e100
 800d1e0:	e000ed00 	.word	0xe000ed00

0800d1e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	f06f 0004 	mvn.w	r0, #4
 800d1ee:	f7ff ffcf 	bl	800d190 <__NVIC_SetPriority>
#endif
}
 800d1f2:	bf00      	nop
 800d1f4:	bd80      	pop	{r7, pc}
	...

0800d1f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1fe:	f3ef 8305 	mrs	r3, IPSR
 800d202:	603b      	str	r3, [r7, #0]
  return(result);
 800d204:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d20a:	f06f 0305 	mvn.w	r3, #5
 800d20e:	607b      	str	r3, [r7, #4]
 800d210:	e00c      	b.n	800d22c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d212:	4b0a      	ldr	r3, [pc, #40]	@ (800d23c <osKernelInitialize+0x44>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d105      	bne.n	800d226 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d21a:	4b08      	ldr	r3, [pc, #32]	@ (800d23c <osKernelInitialize+0x44>)
 800d21c:	2201      	movs	r2, #1
 800d21e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d220:	2300      	movs	r3, #0
 800d222:	607b      	str	r3, [r7, #4]
 800d224:	e002      	b.n	800d22c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d22a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d22c:	687b      	ldr	r3, [r7, #4]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	370c      	adds	r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	200010c8 	.word	0x200010c8

0800d240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d246:	f3ef 8305 	mrs	r3, IPSR
 800d24a:	603b      	str	r3, [r7, #0]
  return(result);
 800d24c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d003      	beq.n	800d25a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d252:	f06f 0305 	mvn.w	r3, #5
 800d256:	607b      	str	r3, [r7, #4]
 800d258:	e010      	b.n	800d27c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d25a:	4b0b      	ldr	r3, [pc, #44]	@ (800d288 <osKernelStart+0x48>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d109      	bne.n	800d276 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d262:	f7ff ffbf 	bl	800d1e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d266:	4b08      	ldr	r3, [pc, #32]	@ (800d288 <osKernelStart+0x48>)
 800d268:	2202      	movs	r2, #2
 800d26a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d26c:	f001 f892 	bl	800e394 <vTaskStartScheduler>
      stat = osOK;
 800d270:	2300      	movs	r3, #0
 800d272:	607b      	str	r3, [r7, #4]
 800d274:	e002      	b.n	800d27c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d27a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d27c:	687b      	ldr	r3, [r7, #4]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	200010c8 	.word	0x200010c8

0800d28c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08e      	sub	sp, #56	@ 0x38
 800d290:	af04      	add	r7, sp, #16
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d298:	2300      	movs	r3, #0
 800d29a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d29c:	f3ef 8305 	mrs	r3, IPSR
 800d2a0:	617b      	str	r3, [r7, #20]
  return(result);
 800d2a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d17e      	bne.n	800d3a6 <osThreadNew+0x11a>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d07b      	beq.n	800d3a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d2ae:	2380      	movs	r3, #128	@ 0x80
 800d2b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d2b2:	2318      	movs	r3, #24
 800d2b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d2ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d045      	beq.n	800d352 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <osThreadNew+0x48>
        name = attr->name;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d008      	beq.n	800d2fa <osThreadNew+0x6e>
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	2b38      	cmp	r3, #56	@ 0x38
 800d2ec:	d805      	bhi.n	800d2fa <osThreadNew+0x6e>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f003 0301 	and.w	r3, r3, #1
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <osThreadNew+0x72>
        return (NULL);
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e054      	b.n	800d3a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	695b      	ldr	r3, [r3, #20]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	695b      	ldr	r3, [r3, #20]
 800d30a:	089b      	lsrs	r3, r3, #2
 800d30c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00e      	beq.n	800d334 <osThreadNew+0xa8>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	2ba7      	cmp	r3, #167	@ 0xa7
 800d31c:	d90a      	bls.n	800d334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d322:	2b00      	cmp	r3, #0
 800d324:	d006      	beq.n	800d334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	695b      	ldr	r3, [r3, #20]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <osThreadNew+0xa8>
        mem = 1;
 800d32e:	2301      	movs	r3, #1
 800d330:	61bb      	str	r3, [r7, #24]
 800d332:	e010      	b.n	800d356 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10c      	bne.n	800d356 <osThreadNew+0xca>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d108      	bne.n	800d356 <osThreadNew+0xca>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d104      	bne.n	800d356 <osThreadNew+0xca>
          mem = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	61bb      	str	r3, [r7, #24]
 800d350:	e001      	b.n	800d356 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d110      	bne.n	800d37e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d364:	9202      	str	r2, [sp, #8]
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	6a3a      	ldr	r2, [r7, #32]
 800d370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f000 fe1a 	bl	800dfac <xTaskCreateStatic>
 800d378:	4603      	mov	r3, r0
 800d37a:	613b      	str	r3, [r7, #16]
 800d37c:	e013      	b.n	800d3a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d110      	bne.n	800d3a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	b29a      	uxth	r2, r3
 800d388:	f107 0310 	add.w	r3, r7, #16
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f000 fe68 	bl	800e06c <xTaskCreate>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d001      	beq.n	800d3a6 <osThreadNew+0x11a>
            hTask = NULL;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d3a6:	693b      	ldr	r3, [r7, #16]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3728      	adds	r7, #40	@ 0x28
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3b8:	f3ef 8305 	mrs	r3, IPSR
 800d3bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d3be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d003      	beq.n	800d3cc <osDelay+0x1c>
    stat = osErrorISR;
 800d3c4:	f06f 0305 	mvn.w	r3, #5
 800d3c8:	60fb      	str	r3, [r7, #12]
 800d3ca:	e007      	b.n	800d3dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 ffa6 	bl	800e328 <vTaskDelay>
    }
  }

  return (stat);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
	...

0800d3e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	4a07      	ldr	r2, [pc, #28]	@ (800d414 <vApplicationGetIdleTaskMemory+0x2c>)
 800d3f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	4a06      	ldr	r2, [pc, #24]	@ (800d418 <vApplicationGetIdleTaskMemory+0x30>)
 800d3fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2280      	movs	r2, #128	@ 0x80
 800d404:	601a      	str	r2, [r3, #0]
}
 800d406:	bf00      	nop
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	200010cc 	.word	0x200010cc
 800d418:	20001174 	.word	0x20001174

0800d41c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4a07      	ldr	r2, [pc, #28]	@ (800d448 <vApplicationGetTimerTaskMemory+0x2c>)
 800d42c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	4a06      	ldr	r2, [pc, #24]	@ (800d44c <vApplicationGetTimerTaskMemory+0x30>)
 800d432:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d43a:	601a      	str	r2, [r3, #0]
}
 800d43c:	bf00      	nop
 800d43e:	3714      	adds	r7, #20
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr
 800d448:	20001374 	.word	0x20001374
 800d44c:	2000141c 	.word	0x2000141c

0800d450 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f103 0208 	add.w	r2, r3, #8
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d468:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f103 0208 	add.w	r2, r3, #8
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f103 0208 	add.w	r2, r3, #8
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b085      	sub	sp, #20
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	689a      	ldr	r2, [r3, #8]
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	1c5a      	adds	r2, r3, #1
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	601a      	str	r2, [r3, #0]
}
 800d4e6:	bf00      	nop
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	b085      	sub	sp, #20
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d508:	d103      	bne.n	800d512 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	e00c      	b.n	800d52c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	3308      	adds	r3, #8
 800d516:	60fb      	str	r3, [r7, #12]
 800d518:	e002      	b.n	800d520 <vListInsert+0x2e>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	68ba      	ldr	r2, [r7, #8]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d2f6      	bcs.n	800d51a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	685a      	ldr	r2, [r3, #4]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	683a      	ldr	r2, [r7, #0]
 800d546:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	1c5a      	adds	r2, r3, #1
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	601a      	str	r2, [r3, #0]
}
 800d558:	bf00      	nop
 800d55a:	3714      	adds	r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	691b      	ldr	r3, [r3, #16]
 800d570:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	6892      	ldr	r2, [r2, #8]
 800d57a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	6852      	ldr	r2, [r2, #4]
 800d584:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d103      	bne.n	800d598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689a      	ldr	r2, [r3, #8]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	1e5a      	subs	r2, r3, #1
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10b      	bne.n	800d5e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
 800d5e2:	e7fd      	b.n	800d5e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d5e4:	f002 fa80 	bl	800fae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5f0:	68f9      	ldr	r1, [r7, #12]
 800d5f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5f4:	fb01 f303 	mul.w	r3, r1, r3
 800d5f8:	441a      	add	r2, r3
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d614:	3b01      	subs	r3, #1
 800d616:	68f9      	ldr	r1, [r7, #12]
 800d618:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d61a:	fb01 f303 	mul.w	r3, r1, r3
 800d61e:	441a      	add	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	22ff      	movs	r2, #255	@ 0xff
 800d628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	22ff      	movs	r2, #255	@ 0xff
 800d630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d114      	bne.n	800d664 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d01a      	beq.n	800d678 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3310      	adds	r3, #16
 800d646:	4618      	mov	r0, r3
 800d648:	f001 fa3c 	bl	800eac4 <xTaskRemoveFromEventList>
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d012      	beq.n	800d678 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d652:	4b0d      	ldr	r3, [pc, #52]	@ (800d688 <xQueueGenericReset+0xd0>)
 800d654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	e009      	b.n	800d678 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3310      	adds	r3, #16
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fef1 	bl	800d450 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3324      	adds	r3, #36	@ 0x24
 800d672:	4618      	mov	r0, r3
 800d674:	f7ff feec 	bl	800d450 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d678:	f002 fa68 	bl	800fb4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d67c:	2301      	movs	r3, #1
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	e000ed04 	.word	0xe000ed04

0800d68c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08e      	sub	sp, #56	@ 0x38
 800d690:	af02      	add	r7, sp, #8
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10b      	bne.n	800d6b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6b2:	bf00      	nop
 800d6b4:	bf00      	nop
 800d6b6:	e7fd      	b.n	800d6b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10b      	bne.n	800d6d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6d0:	bf00      	nop
 800d6d2:	bf00      	nop
 800d6d4:	e7fd      	b.n	800d6d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <xQueueGenericCreateStatic+0x56>
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <xQueueGenericCreateStatic+0x5a>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e000      	b.n	800d6e8 <xQueueGenericCreateStatic+0x5c>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10b      	bne.n	800d704 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	623b      	str	r3, [r7, #32]
}
 800d6fe:	bf00      	nop
 800d700:	bf00      	nop
 800d702:	e7fd      	b.n	800d700 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d102      	bne.n	800d710 <xQueueGenericCreateStatic+0x84>
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <xQueueGenericCreateStatic+0x88>
 800d710:	2301      	movs	r3, #1
 800d712:	e000      	b.n	800d716 <xQueueGenericCreateStatic+0x8a>
 800d714:	2300      	movs	r3, #0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10b      	bne.n	800d732 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	61fb      	str	r3, [r7, #28]
}
 800d72c:	bf00      	nop
 800d72e:	bf00      	nop
 800d730:	e7fd      	b.n	800d72e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d732:	2350      	movs	r3, #80	@ 0x50
 800d734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2b50      	cmp	r3, #80	@ 0x50
 800d73a:	d00b      	beq.n	800d754 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	61bb      	str	r3, [r7, #24]
}
 800d74e:	bf00      	nop
 800d750:	bf00      	nop
 800d752:	e7fd      	b.n	800d750 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d754:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00d      	beq.n	800d77c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d768:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	4613      	mov	r3, r2
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	68b9      	ldr	r1, [r7, #8]
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f000 f805 	bl	800d786 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d77e:	4618      	mov	r0, r3
 800d780:	3730      	adds	r7, #48	@ 0x30
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	60f8      	str	r0, [r7, #12]
 800d78e:	60b9      	str	r1, [r7, #8]
 800d790:	607a      	str	r2, [r7, #4]
 800d792:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d103      	bne.n	800d7a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	69ba      	ldr	r2, [r7, #24]
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	e002      	b.n	800d7a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d7b4:	2101      	movs	r1, #1
 800d7b6:	69b8      	ldr	r0, [r7, #24]
 800d7b8:	f7ff fefe 	bl	800d5b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	78fa      	ldrb	r2, [r7, #3]
 800d7c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d7c4:	bf00      	nop
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08e      	sub	sp, #56	@ 0x38
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
 800d7d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d10b      	bne.n	800d800 <xQueueGenericSend+0x34>
	__asm volatile
 800d7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ec:	f383 8811 	msr	BASEPRI, r3
 800d7f0:	f3bf 8f6f 	isb	sy
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d7fa:	bf00      	nop
 800d7fc:	bf00      	nop
 800d7fe:	e7fd      	b.n	800d7fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <xQueueGenericSend+0x42>
 800d806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <xQueueGenericSend+0x46>
 800d80e:	2301      	movs	r3, #1
 800d810:	e000      	b.n	800d814 <xQueueGenericSend+0x48>
 800d812:	2300      	movs	r3, #0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10b      	bne.n	800d830 <xQueueGenericSend+0x64>
	__asm volatile
 800d818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d82a:	bf00      	nop
 800d82c:	bf00      	nop
 800d82e:	e7fd      	b.n	800d82c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b02      	cmp	r3, #2
 800d834:	d103      	bne.n	800d83e <xQueueGenericSend+0x72>
 800d836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d101      	bne.n	800d842 <xQueueGenericSend+0x76>
 800d83e:	2301      	movs	r3, #1
 800d840:	e000      	b.n	800d844 <xQueueGenericSend+0x78>
 800d842:	2300      	movs	r3, #0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10b      	bne.n	800d860 <xQueueGenericSend+0x94>
	__asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	623b      	str	r3, [r7, #32]
}
 800d85a:	bf00      	nop
 800d85c:	bf00      	nop
 800d85e:	e7fd      	b.n	800d85c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d860:	f001 faf6 	bl	800ee50 <xTaskGetSchedulerState>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d102      	bne.n	800d870 <xQueueGenericSend+0xa4>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d101      	bne.n	800d874 <xQueueGenericSend+0xa8>
 800d870:	2301      	movs	r3, #1
 800d872:	e000      	b.n	800d876 <xQueueGenericSend+0xaa>
 800d874:	2300      	movs	r3, #0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d10b      	bne.n	800d892 <xQueueGenericSend+0xc6>
	__asm volatile
 800d87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d87e:	f383 8811 	msr	BASEPRI, r3
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	61fb      	str	r3, [r7, #28]
}
 800d88c:	bf00      	nop
 800d88e:	bf00      	nop
 800d890:	e7fd      	b.n	800d88e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d892:	f002 f929 	bl	800fae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d302      	bcc.n	800d8a8 <xQueueGenericSend+0xdc>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b02      	cmp	r3, #2
 800d8a6:	d129      	bne.n	800d8fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	68b9      	ldr	r1, [r7, #8]
 800d8ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8ae:	f000 fa0f 	bl	800dcd0 <prvCopyDataToQueue>
 800d8b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d010      	beq.n	800d8de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8be:	3324      	adds	r3, #36	@ 0x24
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f001 f8ff 	bl	800eac4 <xTaskRemoveFromEventList>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d013      	beq.n	800d8f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d8cc:	4b3f      	ldr	r3, [pc, #252]	@ (800d9cc <xQueueGenericSend+0x200>)
 800d8ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	e00a      	b.n	800d8f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d007      	beq.n	800d8f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d8e4:	4b39      	ldr	r3, [pc, #228]	@ (800d9cc <xQueueGenericSend+0x200>)
 800d8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d8f4:	f002 f92a 	bl	800fb4c <vPortExitCritical>
				return pdPASS;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e063      	b.n	800d9c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d103      	bne.n	800d90a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d902:	f002 f923 	bl	800fb4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d906:	2300      	movs	r3, #0
 800d908:	e05c      	b.n	800d9c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d106      	bne.n	800d91e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d910:	f107 0314 	add.w	r3, r7, #20
 800d914:	4618      	mov	r0, r3
 800d916:	f001 f939 	bl	800eb8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d91e:	f002 f915 	bl	800fb4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d922:	f000 fda7 	bl	800e474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d926:	f002 f8df 	bl	800fae8 <vPortEnterCritical>
 800d92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d930:	b25b      	sxtb	r3, r3
 800d932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d936:	d103      	bne.n	800d940 <xQueueGenericSend+0x174>
 800d938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d946:	b25b      	sxtb	r3, r3
 800d948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d94c:	d103      	bne.n	800d956 <xQueueGenericSend+0x18a>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	2200      	movs	r2, #0
 800d952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d956:	f002 f8f9 	bl	800fb4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d95a:	1d3a      	adds	r2, r7, #4
 800d95c:	f107 0314 	add.w	r3, r7, #20
 800d960:	4611      	mov	r1, r2
 800d962:	4618      	mov	r0, r3
 800d964:	f001 f928 	bl	800ebb8 <xTaskCheckForTimeOut>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d124      	bne.n	800d9b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d96e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d970:	f000 faa6 	bl	800dec0 <prvIsQueueFull>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d018      	beq.n	800d9ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	3310      	adds	r3, #16
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	4611      	mov	r1, r2
 800d982:	4618      	mov	r0, r3
 800d984:	f001 f84c 	bl	800ea20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d98a:	f000 fa31 	bl	800ddf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d98e:	f000 fd7f 	bl	800e490 <xTaskResumeAll>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	f47f af7c 	bne.w	800d892 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d99a:	4b0c      	ldr	r3, [pc, #48]	@ (800d9cc <xQueueGenericSend+0x200>)
 800d99c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	f3bf 8f4f 	dsb	sy
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	e772      	b.n	800d892 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d9ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9ae:	f000 fa1f 	bl	800ddf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9b2:	f000 fd6d 	bl	800e490 <xTaskResumeAll>
 800d9b6:	e76c      	b.n	800d892 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d9b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9ba:	f000 fa19 	bl	800ddf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9be:	f000 fd67 	bl	800e490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d9c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3738      	adds	r7, #56	@ 0x38
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	e000ed04 	.word	0xe000ed04

0800d9d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b090      	sub	sp, #64	@ 0x40
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10b      	bne.n	800da00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d9fa:	bf00      	nop
 800d9fc:	bf00      	nop
 800d9fe:	e7fd      	b.n	800d9fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d103      	bne.n	800da0e <xQueueGenericSendFromISR+0x3e>
 800da06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d101      	bne.n	800da12 <xQueueGenericSendFromISR+0x42>
 800da0e:	2301      	movs	r3, #1
 800da10:	e000      	b.n	800da14 <xQueueGenericSendFromISR+0x44>
 800da12:	2300      	movs	r3, #0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10b      	bne.n	800da30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da2a:	bf00      	nop
 800da2c:	bf00      	nop
 800da2e:	e7fd      	b.n	800da2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2b02      	cmp	r3, #2
 800da34:	d103      	bne.n	800da3e <xQueueGenericSendFromISR+0x6e>
 800da36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d101      	bne.n	800da42 <xQueueGenericSendFromISR+0x72>
 800da3e:	2301      	movs	r3, #1
 800da40:	e000      	b.n	800da44 <xQueueGenericSendFromISR+0x74>
 800da42:	2300      	movs	r3, #0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10b      	bne.n	800da60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	623b      	str	r3, [r7, #32]
}
 800da5a:	bf00      	nop
 800da5c:	bf00      	nop
 800da5e:	e7fd      	b.n	800da5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da60:	f002 f922 	bl	800fca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800da64:	f3ef 8211 	mrs	r2, BASEPRI
 800da68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	61fa      	str	r2, [r7, #28]
 800da7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800da7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da88:	429a      	cmp	r2, r3
 800da8a:	d302      	bcc.n	800da92 <xQueueGenericSendFromISR+0xc2>
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d12f      	bne.n	800daf2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	68b9      	ldr	r1, [r7, #8]
 800daa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800daa8:	f000 f912 	bl	800dcd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800daac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dab4:	d112      	bne.n	800dadc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d016      	beq.n	800daec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac0:	3324      	adds	r3, #36	@ 0x24
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 fffe 	bl	800eac4 <xTaskRemoveFromEventList>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d00e      	beq.n	800daec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00b      	beq.n	800daec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	e007      	b.n	800daec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dadc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dae0:	3301      	adds	r3, #1
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	b25a      	sxtb	r2, r3
 800dae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800daec:	2301      	movs	r3, #1
 800daee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800daf0:	e001      	b.n	800daf6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800daf2:	2300      	movs	r3, #0
 800daf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800daf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daf8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800db00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800db04:	4618      	mov	r0, r3
 800db06:	3740      	adds	r7, #64	@ 0x40
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08c      	sub	sp, #48	@ 0x30
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800db18:	2300      	movs	r3, #0
 800db1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800db20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10b      	bne.n	800db3e <xQueueReceive+0x32>
	__asm volatile
 800db26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2a:	f383 8811 	msr	BASEPRI, r3
 800db2e:	f3bf 8f6f 	isb	sy
 800db32:	f3bf 8f4f 	dsb	sy
 800db36:	623b      	str	r3, [r7, #32]
}
 800db38:	bf00      	nop
 800db3a:	bf00      	nop
 800db3c:	e7fd      	b.n	800db3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d103      	bne.n	800db4c <xQueueReceive+0x40>
 800db44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <xQueueReceive+0x44>
 800db4c:	2301      	movs	r3, #1
 800db4e:	e000      	b.n	800db52 <xQueueReceive+0x46>
 800db50:	2300      	movs	r3, #0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10b      	bne.n	800db6e <xQueueReceive+0x62>
	__asm volatile
 800db56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	61fb      	str	r3, [r7, #28]
}
 800db68:	bf00      	nop
 800db6a:	bf00      	nop
 800db6c:	e7fd      	b.n	800db6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db6e:	f001 f96f 	bl	800ee50 <xTaskGetSchedulerState>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d102      	bne.n	800db7e <xQueueReceive+0x72>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d101      	bne.n	800db82 <xQueueReceive+0x76>
 800db7e:	2301      	movs	r3, #1
 800db80:	e000      	b.n	800db84 <xQueueReceive+0x78>
 800db82:	2300      	movs	r3, #0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10b      	bne.n	800dba0 <xQueueReceive+0x94>
	__asm volatile
 800db88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	61bb      	str	r3, [r7, #24]
}
 800db9a:	bf00      	nop
 800db9c:	bf00      	nop
 800db9e:	e7fd      	b.n	800db9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dba0:	f001 ffa2 	bl	800fae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d01f      	beq.n	800dbf0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbb0:	68b9      	ldr	r1, [r7, #8]
 800dbb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbb4:	f000 f8f6 	bl	800dda4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbba:	1e5a      	subs	r2, r3, #1
 800dbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00f      	beq.n	800dbe8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbca:	3310      	adds	r3, #16
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 ff79 	bl	800eac4 <xTaskRemoveFromEventList>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d007      	beq.n	800dbe8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dbd8:	4b3c      	ldr	r3, [pc, #240]	@ (800dccc <xQueueReceive+0x1c0>)
 800dbda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dbe8:	f001 ffb0 	bl	800fb4c <vPortExitCritical>
				return pdPASS;
 800dbec:	2301      	movs	r3, #1
 800dbee:	e069      	b.n	800dcc4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d103      	bne.n	800dbfe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dbf6:	f001 ffa9 	bl	800fb4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e062      	b.n	800dcc4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d106      	bne.n	800dc12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc04:	f107 0310 	add.w	r3, r7, #16
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 ffbf 	bl	800eb8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc12:	f001 ff9b 	bl	800fb4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc16:	f000 fc2d 	bl	800e474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc1a:	f001 ff65 	bl	800fae8 <vPortEnterCritical>
 800dc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc24:	b25b      	sxtb	r3, r3
 800dc26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc2a:	d103      	bne.n	800dc34 <xQueueReceive+0x128>
 800dc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc3a:	b25b      	sxtb	r3, r3
 800dc3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc40:	d103      	bne.n	800dc4a <xQueueReceive+0x13e>
 800dc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc4a:	f001 ff7f 	bl	800fb4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc4e:	1d3a      	adds	r2, r7, #4
 800dc50:	f107 0310 	add.w	r3, r7, #16
 800dc54:	4611      	mov	r1, r2
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 ffae 	bl	800ebb8 <xTaskCheckForTimeOut>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d123      	bne.n	800dcaa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc64:	f000 f916 	bl	800de94 <prvIsQueueEmpty>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d017      	beq.n	800dc9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc70:	3324      	adds	r3, #36	@ 0x24
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	4611      	mov	r1, r2
 800dc76:	4618      	mov	r0, r3
 800dc78:	f000 fed2 	bl	800ea20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc7e:	f000 f8b7 	bl	800ddf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc82:	f000 fc05 	bl	800e490 <xTaskResumeAll>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d189      	bne.n	800dba0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dc8c:	4b0f      	ldr	r3, [pc, #60]	@ (800dccc <xQueueReceive+0x1c0>)
 800dc8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc92:	601a      	str	r2, [r3, #0]
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	e780      	b.n	800dba0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dca0:	f000 f8a6 	bl	800ddf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dca4:	f000 fbf4 	bl	800e490 <xTaskResumeAll>
 800dca8:	e77a      	b.n	800dba0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dcaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcac:	f000 f8a0 	bl	800ddf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcb0:	f000 fbee 	bl	800e490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcb6:	f000 f8ed 	bl	800de94 <prvIsQueueEmpty>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f43f af6f 	beq.w	800dba0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dcc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3730      	adds	r7, #48	@ 0x30
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	e000ed04 	.word	0xe000ed04

0800dcd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10d      	bne.n	800dd0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d14d      	bne.n	800dd92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f001 f8c6 	bl	800ee8c <xTaskPriorityDisinherit>
 800dd00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	609a      	str	r2, [r3, #8]
 800dd08:	e043      	b.n	800dd92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d119      	bne.n	800dd44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6858      	ldr	r0, [r3, #4]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd18:	461a      	mov	r2, r3
 800dd1a:	68b9      	ldr	r1, [r7, #8]
 800dd1c:	f002 ffbd 	bl	8010c9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd28:	441a      	add	r2, r3
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d32b      	bcc.n	800dd92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	605a      	str	r2, [r3, #4]
 800dd42:	e026      	b.n	800dd92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	68d8      	ldr	r0, [r3, #12]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	68b9      	ldr	r1, [r7, #8]
 800dd50:	f002 ffa3 	bl	8010c9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	68da      	ldr	r2, [r3, #12]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd5c:	425b      	negs	r3, r3
 800dd5e:	441a      	add	r2, r3
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	68da      	ldr	r2, [r3, #12]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d207      	bcs.n	800dd80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd78:	425b      	negs	r3, r3
 800dd7a:	441a      	add	r2, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b02      	cmp	r3, #2
 800dd84:	d105      	bne.n	800dd92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d002      	beq.n	800dd92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dd9a:	697b      	ldr	r3, [r7, #20]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d018      	beq.n	800dde8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68da      	ldr	r2, [r3, #12]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddbe:	441a      	add	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	68da      	ldr	r2, [r3, #12]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d303      	bcc.n	800ddd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	68d9      	ldr	r1, [r3, #12]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dde0:	461a      	mov	r2, r3
 800dde2:	6838      	ldr	r0, [r7, #0]
 800dde4:	f002 ff59 	bl	8010c9a <memcpy>
	}
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ddf8:	f001 fe76 	bl	800fae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de04:	e011      	b.n	800de2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d012      	beq.n	800de34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	3324      	adds	r3, #36	@ 0x24
 800de12:	4618      	mov	r0, r3
 800de14:	f000 fe56 	bl	800eac4 <xTaskRemoveFromEventList>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de1e:	f000 ff2f 	bl	800ec80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	3b01      	subs	r3, #1
 800de26:	b2db      	uxtb	r3, r3
 800de28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	dce9      	bgt.n	800de06 <prvUnlockQueue+0x16>
 800de32:	e000      	b.n	800de36 <prvUnlockQueue+0x46>
					break;
 800de34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	22ff      	movs	r2, #255	@ 0xff
 800de3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800de3e:	f001 fe85 	bl	800fb4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de42:	f001 fe51 	bl	800fae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de4e:	e011      	b.n	800de74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d012      	beq.n	800de7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3310      	adds	r3, #16
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 fe31 	bl	800eac4 <xTaskRemoveFromEventList>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de68:	f000 ff0a 	bl	800ec80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de6c:	7bbb      	ldrb	r3, [r7, #14]
 800de6e:	3b01      	subs	r3, #1
 800de70:	b2db      	uxtb	r3, r3
 800de72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	dce9      	bgt.n	800de50 <prvUnlockQueue+0x60>
 800de7c:	e000      	b.n	800de80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	22ff      	movs	r2, #255	@ 0xff
 800de84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800de88:	f001 fe60 	bl	800fb4c <vPortExitCritical>
}
 800de8c:	bf00      	nop
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de9c:	f001 fe24 	bl	800fae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d102      	bne.n	800deae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dea8:	2301      	movs	r3, #1
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	e001      	b.n	800deb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800deb2:	f001 fe4b 	bl	800fb4c <vPortExitCritical>

	return xReturn;
 800deb6:	68fb      	ldr	r3, [r7, #12]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dec8:	f001 fe0e 	bl	800fae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d102      	bne.n	800dede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ded8:	2301      	movs	r3, #1
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	e001      	b.n	800dee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dede:	2300      	movs	r3, #0
 800dee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dee2:	f001 fe33 	bl	800fb4c <vPortExitCritical>

	return xReturn;
 800dee6:	68fb      	ldr	r3, [r7, #12]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	e014      	b.n	800df2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df00:	4a0f      	ldr	r2, [pc, #60]	@ (800df40 <vQueueAddToRegistry+0x50>)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10b      	bne.n	800df24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df0c:	490c      	ldr	r1, [pc, #48]	@ (800df40 <vQueueAddToRegistry+0x50>)
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df16:	4a0a      	ldr	r2, [pc, #40]	@ (800df40 <vQueueAddToRegistry+0x50>)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	00db      	lsls	r3, r3, #3
 800df1c:	4413      	add	r3, r2
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800df22:	e006      	b.n	800df32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3301      	adds	r3, #1
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2b07      	cmp	r3, #7
 800df2e:	d9e7      	bls.n	800df00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df30:	bf00      	nop
 800df32:	bf00      	nop
 800df34:	3714      	adds	r7, #20
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	2000181c 	.word	0x2000181c

0800df44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df54:	f001 fdc8 	bl	800fae8 <vPortEnterCritical>
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df5e:	b25b      	sxtb	r3, r3
 800df60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df64:	d103      	bne.n	800df6e <vQueueWaitForMessageRestricted+0x2a>
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df74:	b25b      	sxtb	r3, r3
 800df76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df7a:	d103      	bne.n	800df84 <vQueueWaitForMessageRestricted+0x40>
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df84:	f001 fde2 	bl	800fb4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d106      	bne.n	800df9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	3324      	adds	r3, #36	@ 0x24
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	68b9      	ldr	r1, [r7, #8]
 800df98:	4618      	mov	r0, r3
 800df9a:	f000 fd67 	bl	800ea6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df9e:	6978      	ldr	r0, [r7, #20]
 800dfa0:	f7ff ff26 	bl	800ddf0 <prvUnlockQueue>
	}
 800dfa4:	bf00      	nop
 800dfa6:	3718      	adds	r7, #24
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08e      	sub	sp, #56	@ 0x38
 800dfb0:	af04      	add	r7, sp, #16
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10b      	bne.n	800dfd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	623b      	str	r3, [r7, #32]
}
 800dfd2:	bf00      	nop
 800dfd4:	bf00      	nop
 800dfd6:	e7fd      	b.n	800dfd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10b      	bne.n	800dff6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	61fb      	str	r3, [r7, #28]
}
 800dff0:	bf00      	nop
 800dff2:	bf00      	nop
 800dff4:	e7fd      	b.n	800dff2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dff6:	23a8      	movs	r3, #168	@ 0xa8
 800dff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	2ba8      	cmp	r3, #168	@ 0xa8
 800dffe:	d00b      	beq.n	800e018 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e004:	f383 8811 	msr	BASEPRI, r3
 800e008:	f3bf 8f6f 	isb	sy
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	61bb      	str	r3, [r7, #24]
}
 800e012:	bf00      	nop
 800e014:	bf00      	nop
 800e016:	e7fd      	b.n	800e014 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e018:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d01e      	beq.n	800e05e <xTaskCreateStatic+0xb2>
 800e020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e022:	2b00      	cmp	r3, #0
 800e024:	d01b      	beq.n	800e05e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e028:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e02c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e02e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e032:	2202      	movs	r2, #2
 800e034:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e038:	2300      	movs	r3, #0
 800e03a:	9303      	str	r3, [sp, #12]
 800e03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03e:	9302      	str	r3, [sp, #8]
 800e040:	f107 0314 	add.w	r3, r7, #20
 800e044:	9301      	str	r3, [sp, #4]
 800e046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	68b9      	ldr	r1, [r7, #8]
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 f851 	bl	800e0f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e056:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e058:	f000 f8f6 	bl	800e248 <prvAddNewTaskToReadyList>
 800e05c:	e001      	b.n	800e062 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e062:	697b      	ldr	r3, [r7, #20]
	}
 800e064:	4618      	mov	r0, r3
 800e066:	3728      	adds	r7, #40	@ 0x28
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08c      	sub	sp, #48	@ 0x30
 800e070:	af04      	add	r7, sp, #16
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	603b      	str	r3, [r7, #0]
 800e078:	4613      	mov	r3, r2
 800e07a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e07c:	88fb      	ldrh	r3, [r7, #6]
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4618      	mov	r0, r3
 800e082:	f001 fe53 	bl	800fd2c <pvPortMalloc>
 800e086:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00e      	beq.n	800e0ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e08e:	20a8      	movs	r0, #168	@ 0xa8
 800e090:	f001 fe4c 	bl	800fd2c <pvPortMalloc>
 800e094:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d003      	beq.n	800e0a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e0a2:	e005      	b.n	800e0b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e0a4:	6978      	ldr	r0, [r7, #20]
 800e0a6:	f001 ff0f 	bl	800fec8 <vPortFree>
 800e0aa:	e001      	b.n	800e0b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d017      	beq.n	800e0e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0be:	88fa      	ldrh	r2, [r7, #6]
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	9303      	str	r3, [sp, #12]
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	9302      	str	r3, [sp, #8]
 800e0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ca:	9301      	str	r3, [sp, #4]
 800e0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ce:	9300      	str	r3, [sp, #0]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	68b9      	ldr	r1, [r7, #8]
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f000 f80f 	bl	800e0f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0da:	69f8      	ldr	r0, [r7, #28]
 800e0dc:	f000 f8b4 	bl	800e248 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	61bb      	str	r3, [r7, #24]
 800e0e4:	e002      	b.n	800e0ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0ec:	69bb      	ldr	r3, [r7, #24]
	}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3720      	adds	r7, #32
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
	...

0800e0f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b088      	sub	sp, #32
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e108:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	461a      	mov	r2, r3
 800e110:	21a5      	movs	r1, #165	@ 0xa5
 800e112:	f002 fd33 	bl	8010b7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e120:	3b01      	subs	r3, #1
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4413      	add	r3, r2
 800e126:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	f023 0307 	bic.w	r3, r3, #7
 800e12e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	f003 0307 	and.w	r3, r3, #7
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00b      	beq.n	800e152 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e13e:	f383 8811 	msr	BASEPRI, r3
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	617b      	str	r3, [r7, #20]
}
 800e14c:	bf00      	nop
 800e14e:	bf00      	nop
 800e150:	e7fd      	b.n	800e14e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01f      	beq.n	800e198 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e158:	2300      	movs	r3, #0
 800e15a:	61fb      	str	r3, [r7, #28]
 800e15c:	e012      	b.n	800e184 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	4413      	add	r3, r2
 800e164:	7819      	ldrb	r1, [r3, #0]
 800e166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	4413      	add	r3, r2
 800e16c:	3334      	adds	r3, #52	@ 0x34
 800e16e:	460a      	mov	r2, r1
 800e170:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	4413      	add	r3, r2
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d006      	beq.n	800e18c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	3301      	adds	r3, #1
 800e182:	61fb      	str	r3, [r7, #28]
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	2b0f      	cmp	r3, #15
 800e188:	d9e9      	bls.n	800e15e <prvInitialiseNewTask+0x66>
 800e18a:	e000      	b.n	800e18e <prvInitialiseNewTask+0x96>
			{
				break;
 800e18c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e190:	2200      	movs	r2, #0
 800e192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e196:	e003      	b.n	800e1a0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a2:	2b37      	cmp	r3, #55	@ 0x37
 800e1a4:	d901      	bls.n	800e1aa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e1a6:	2337      	movs	r3, #55	@ 0x37
 800e1a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1be:	3304      	adds	r3, #4
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7ff f965 	bl	800d490 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c8:	3318      	adds	r3, #24
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7ff f960 	bl	800d490 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f8:	3354      	adds	r3, #84	@ 0x54
 800e1fa:	224c      	movs	r2, #76	@ 0x4c
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	4618      	mov	r0, r3
 800e200:	f002 fcbc 	bl	8010b7c <memset>
 800e204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e206:	4a0d      	ldr	r2, [pc, #52]	@ (800e23c <prvInitialiseNewTask+0x144>)
 800e208:	659a      	str	r2, [r3, #88]	@ 0x58
 800e20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20c:	4a0c      	ldr	r2, [pc, #48]	@ (800e240 <prvInitialiseNewTask+0x148>)
 800e20e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e212:	4a0c      	ldr	r2, [pc, #48]	@ (800e244 <prvInitialiseNewTask+0x14c>)
 800e214:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e216:	683a      	ldr	r2, [r7, #0]
 800e218:	68f9      	ldr	r1, [r7, #12]
 800e21a:	69b8      	ldr	r0, [r7, #24]
 800e21c:	f001 fb36 	bl	800f88c <pxPortInitialiseStack>
 800e220:	4602      	mov	r2, r0
 800e222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e224:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d002      	beq.n	800e232 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e232:	bf00      	nop
 800e234:	3720      	adds	r7, #32
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	20005ab0 	.word	0x20005ab0
 800e240:	20005b18 	.word	0x20005b18
 800e244:	20005b80 	.word	0x20005b80

0800e248 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e250:	f001 fc4a 	bl	800fae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e254:	4b2d      	ldr	r3, [pc, #180]	@ (800e30c <prvAddNewTaskToReadyList+0xc4>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3301      	adds	r3, #1
 800e25a:	4a2c      	ldr	r2, [pc, #176]	@ (800e30c <prvAddNewTaskToReadyList+0xc4>)
 800e25c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e25e:	4b2c      	ldr	r3, [pc, #176]	@ (800e310 <prvAddNewTaskToReadyList+0xc8>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d109      	bne.n	800e27a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e266:	4a2a      	ldr	r2, [pc, #168]	@ (800e310 <prvAddNewTaskToReadyList+0xc8>)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e26c:	4b27      	ldr	r3, [pc, #156]	@ (800e30c <prvAddNewTaskToReadyList+0xc4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d110      	bne.n	800e296 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e274:	f000 fd28 	bl	800ecc8 <prvInitialiseTaskLists>
 800e278:	e00d      	b.n	800e296 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e27a:	4b26      	ldr	r3, [pc, #152]	@ (800e314 <prvAddNewTaskToReadyList+0xcc>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d109      	bne.n	800e296 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e282:	4b23      	ldr	r3, [pc, #140]	@ (800e310 <prvAddNewTaskToReadyList+0xc8>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d802      	bhi.n	800e296 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e290:	4a1f      	ldr	r2, [pc, #124]	@ (800e310 <prvAddNewTaskToReadyList+0xc8>)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e296:	4b20      	ldr	r3, [pc, #128]	@ (800e318 <prvAddNewTaskToReadyList+0xd0>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3301      	adds	r3, #1
 800e29c:	4a1e      	ldr	r2, [pc, #120]	@ (800e318 <prvAddNewTaskToReadyList+0xd0>)
 800e29e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e2a0:	4b1d      	ldr	r3, [pc, #116]	@ (800e318 <prvAddNewTaskToReadyList+0xd0>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ac:	4b1b      	ldr	r3, [pc, #108]	@ (800e31c <prvAddNewTaskToReadyList+0xd4>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d903      	bls.n	800e2bc <prvAddNewTaskToReadyList+0x74>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b8:	4a18      	ldr	r2, [pc, #96]	@ (800e31c <prvAddNewTaskToReadyList+0xd4>)
 800e2ba:	6013      	str	r3, [r2, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4413      	add	r3, r2
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	4a15      	ldr	r2, [pc, #84]	@ (800e320 <prvAddNewTaskToReadyList+0xd8>)
 800e2ca:	441a      	add	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7ff f8e9 	bl	800d4aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e2d8:	f001 fc38 	bl	800fb4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e314 <prvAddNewTaskToReadyList+0xcc>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00e      	beq.n	800e302 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2e4:	4b0a      	ldr	r3, [pc, #40]	@ (800e310 <prvAddNewTaskToReadyList+0xc8>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d207      	bcs.n	800e302 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e324 <prvAddNewTaskToReadyList+0xdc>)
 800e2f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2f8:	601a      	str	r2, [r3, #0]
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e302:	bf00      	nop
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	20001d30 	.word	0x20001d30
 800e310:	2000185c 	.word	0x2000185c
 800e314:	20001d3c 	.word	0x20001d3c
 800e318:	20001d4c 	.word	0x20001d4c
 800e31c:	20001d38 	.word	0x20001d38
 800e320:	20001860 	.word	0x20001860
 800e324:	e000ed04 	.word	0xe000ed04

0800e328 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e330:	2300      	movs	r3, #0
 800e332:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d018      	beq.n	800e36c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e33a:	4b14      	ldr	r3, [pc, #80]	@ (800e38c <vTaskDelay+0x64>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00b      	beq.n	800e35a <vTaskDelay+0x32>
	__asm volatile
 800e342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e346:	f383 8811 	msr	BASEPRI, r3
 800e34a:	f3bf 8f6f 	isb	sy
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	60bb      	str	r3, [r7, #8]
}
 800e354:	bf00      	nop
 800e356:	bf00      	nop
 800e358:	e7fd      	b.n	800e356 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e35a:	f000 f88b 	bl	800e474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e35e:	2100      	movs	r1, #0
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 fee5 	bl	800f130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e366:	f000 f893 	bl	800e490 <xTaskResumeAll>
 800e36a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d107      	bne.n	800e382 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e372:	4b07      	ldr	r3, [pc, #28]	@ (800e390 <vTaskDelay+0x68>)
 800e374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e378:	601a      	str	r2, [r3, #0]
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e382:	bf00      	nop
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	20001d58 	.word	0x20001d58
 800e390:	e000ed04 	.word	0xe000ed04

0800e394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08a      	sub	sp, #40	@ 0x28
 800e398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e39a:	2300      	movs	r3, #0
 800e39c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3a2:	463a      	mov	r2, r7
 800e3a4:	1d39      	adds	r1, r7, #4
 800e3a6:	f107 0308 	add.w	r3, r7, #8
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7ff f81c 	bl	800d3e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3b0:	6839      	ldr	r1, [r7, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	9202      	str	r2, [sp, #8]
 800e3b8:	9301      	str	r3, [sp, #4]
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	460a      	mov	r2, r1
 800e3c2:	4924      	ldr	r1, [pc, #144]	@ (800e454 <vTaskStartScheduler+0xc0>)
 800e3c4:	4824      	ldr	r0, [pc, #144]	@ (800e458 <vTaskStartScheduler+0xc4>)
 800e3c6:	f7ff fdf1 	bl	800dfac <xTaskCreateStatic>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	4a23      	ldr	r2, [pc, #140]	@ (800e45c <vTaskStartScheduler+0xc8>)
 800e3ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3d0:	4b22      	ldr	r3, [pc, #136]	@ (800e45c <vTaskStartScheduler+0xc8>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d002      	beq.n	800e3de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	e001      	b.n	800e3e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d102      	bne.n	800e3ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e3e8:	f000 fef6 	bl	800f1d8 <xTimerCreateTimerTask>
 800e3ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d11b      	bne.n	800e42c <vTaskStartScheduler+0x98>
	__asm volatile
 800e3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f8:	f383 8811 	msr	BASEPRI, r3
 800e3fc:	f3bf 8f6f 	isb	sy
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	613b      	str	r3, [r7, #16]
}
 800e406:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e408:	4b15      	ldr	r3, [pc, #84]	@ (800e460 <vTaskStartScheduler+0xcc>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	3354      	adds	r3, #84	@ 0x54
 800e40e:	4a15      	ldr	r2, [pc, #84]	@ (800e464 <vTaskStartScheduler+0xd0>)
 800e410:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e412:	4b15      	ldr	r3, [pc, #84]	@ (800e468 <vTaskStartScheduler+0xd4>)
 800e414:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e418:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e41a:	4b14      	ldr	r3, [pc, #80]	@ (800e46c <vTaskStartScheduler+0xd8>)
 800e41c:	2201      	movs	r2, #1
 800e41e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e420:	4b13      	ldr	r3, [pc, #76]	@ (800e470 <vTaskStartScheduler+0xdc>)
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e426:	f001 fabb 	bl	800f9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e42a:	e00f      	b.n	800e44c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e432:	d10b      	bne.n	800e44c <vTaskStartScheduler+0xb8>
	__asm volatile
 800e434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	60fb      	str	r3, [r7, #12]
}
 800e446:	bf00      	nop
 800e448:	bf00      	nop
 800e44a:	e7fd      	b.n	800e448 <vTaskStartScheduler+0xb4>
}
 800e44c:	bf00      	nop
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	08014154 	.word	0x08014154
 800e458:	0800ec99 	.word	0x0800ec99
 800e45c:	20001d54 	.word	0x20001d54
 800e460:	2000185c 	.word	0x2000185c
 800e464:	20000170 	.word	0x20000170
 800e468:	20001d50 	.word	0x20001d50
 800e46c:	20001d3c 	.word	0x20001d3c
 800e470:	20001d34 	.word	0x20001d34

0800e474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e474:	b480      	push	{r7}
 800e476:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e478:	4b04      	ldr	r3, [pc, #16]	@ (800e48c <vTaskSuspendAll+0x18>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3301      	adds	r3, #1
 800e47e:	4a03      	ldr	r2, [pc, #12]	@ (800e48c <vTaskSuspendAll+0x18>)
 800e480:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e482:	bf00      	nop
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr
 800e48c:	20001d58 	.word	0x20001d58

0800e490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e496:	2300      	movs	r3, #0
 800e498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e49a:	2300      	movs	r3, #0
 800e49c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e49e:	4b42      	ldr	r3, [pc, #264]	@ (800e5a8 <xTaskResumeAll+0x118>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10b      	bne.n	800e4be <xTaskResumeAll+0x2e>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	f383 8811 	msr	BASEPRI, r3
 800e4ae:	f3bf 8f6f 	isb	sy
 800e4b2:	f3bf 8f4f 	dsb	sy
 800e4b6:	603b      	str	r3, [r7, #0]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4be:	f001 fb13 	bl	800fae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4c2:	4b39      	ldr	r3, [pc, #228]	@ (800e5a8 <xTaskResumeAll+0x118>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	4a37      	ldr	r2, [pc, #220]	@ (800e5a8 <xTaskResumeAll+0x118>)
 800e4ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4cc:	4b36      	ldr	r3, [pc, #216]	@ (800e5a8 <xTaskResumeAll+0x118>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d162      	bne.n	800e59a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4d4:	4b35      	ldr	r3, [pc, #212]	@ (800e5ac <xTaskResumeAll+0x11c>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d05e      	beq.n	800e59a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4dc:	e02f      	b.n	800e53e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4de:	4b34      	ldr	r3, [pc, #208]	@ (800e5b0 <xTaskResumeAll+0x120>)
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3318      	adds	r3, #24
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7ff f83a 	bl	800d564 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3304      	adds	r3, #4
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff f835 	bl	800d564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4fe:	4b2d      	ldr	r3, [pc, #180]	@ (800e5b4 <xTaskResumeAll+0x124>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	d903      	bls.n	800e50e <xTaskResumeAll+0x7e>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50a:	4a2a      	ldr	r2, [pc, #168]	@ (800e5b4 <xTaskResumeAll+0x124>)
 800e50c:	6013      	str	r3, [r2, #0]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4a27      	ldr	r2, [pc, #156]	@ (800e5b8 <xTaskResumeAll+0x128>)
 800e51c:	441a      	add	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3304      	adds	r3, #4
 800e522:	4619      	mov	r1, r3
 800e524:	4610      	mov	r0, r2
 800e526:	f7fe ffc0 	bl	800d4aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52e:	4b23      	ldr	r3, [pc, #140]	@ (800e5bc <xTaskResumeAll+0x12c>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e534:	429a      	cmp	r2, r3
 800e536:	d302      	bcc.n	800e53e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e538:	4b21      	ldr	r3, [pc, #132]	@ (800e5c0 <xTaskResumeAll+0x130>)
 800e53a:	2201      	movs	r2, #1
 800e53c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e53e:	4b1c      	ldr	r3, [pc, #112]	@ (800e5b0 <xTaskResumeAll+0x120>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1cb      	bne.n	800e4de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e54c:	f000 fc60 	bl	800ee10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e550:	4b1c      	ldr	r3, [pc, #112]	@ (800e5c4 <xTaskResumeAll+0x134>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d010      	beq.n	800e57e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e55c:	f000 f940 	bl	800e7e0 <xTaskIncrementTick>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d002      	beq.n	800e56c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e566:	4b16      	ldr	r3, [pc, #88]	@ (800e5c0 <xTaskResumeAll+0x130>)
 800e568:	2201      	movs	r2, #1
 800e56a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3b01      	subs	r3, #1
 800e570:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1f1      	bne.n	800e55c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e578:	4b12      	ldr	r3, [pc, #72]	@ (800e5c4 <xTaskResumeAll+0x134>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e57e:	4b10      	ldr	r3, [pc, #64]	@ (800e5c0 <xTaskResumeAll+0x130>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d009      	beq.n	800e59a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e586:	2301      	movs	r3, #1
 800e588:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e58a:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c8 <xTaskResumeAll+0x138>)
 800e58c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e590:	601a      	str	r2, [r3, #0]
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e59a:	f001 fad7 	bl	800fb4c <vPortExitCritical>

	return xAlreadyYielded;
 800e59e:	68bb      	ldr	r3, [r7, #8]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3710      	adds	r7, #16
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	20001d58 	.word	0x20001d58
 800e5ac:	20001d30 	.word	0x20001d30
 800e5b0:	20001cf0 	.word	0x20001cf0
 800e5b4:	20001d38 	.word	0x20001d38
 800e5b8:	20001860 	.word	0x20001860
 800e5bc:	2000185c 	.word	0x2000185c
 800e5c0:	20001d44 	.word	0x20001d44
 800e5c4:	20001d40 	.word	0x20001d40
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5d2:	4b05      	ldr	r3, [pc, #20]	@ (800e5e8 <xTaskGetTickCount+0x1c>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5d8:	687b      	ldr	r3, [r7, #4]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	370c      	adds	r7, #12
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	20001d34 	.word	0x20001d34

0800e5ec <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d102      	bne.n	800e600 <pcTaskGetName+0x14>
 800e5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e634 <pcTaskGetName+0x48>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	e000      	b.n	800e602 <pcTaskGetName+0x16>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10b      	bne.n	800e622 <pcTaskGetName+0x36>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	60bb      	str	r3, [r7, #8]
}
 800e61c:	bf00      	nop
 800e61e:	bf00      	nop
 800e620:	e7fd      	b.n	800e61e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3334      	adds	r3, #52	@ 0x34
}
 800e626:	4618      	mov	r0, r3
 800e628:	3714      	adds	r7, #20
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	2000185c 	.word	0x2000185c

0800e638 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e638:	b480      	push	{r7}
 800e63a:	b08b      	sub	sp, #44	@ 0x2c
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e642:	2300      	movs	r3, #0
 800e644:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d05b      	beq.n	800e706 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	61bb      	str	r3, [r7, #24]
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	685a      	ldr	r2, [r3, #4]
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	605a      	str	r2, [r3, #4]
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	3308      	adds	r3, #8
 800e664:	429a      	cmp	r2, r3
 800e666:	d104      	bne.n	800e672 <prvSearchForNameWithinSingleList+0x3a>
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	685a      	ldr	r2, [r3, #4]
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	605a      	str	r2, [r3, #4]
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	613b      	str	r3, [r7, #16]
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	685a      	ldr	r2, [r3, #4]
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	605a      	str	r2, [r3, #4]
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	3308      	adds	r3, #8
 800e690:	429a      	cmp	r2, r3
 800e692:	d104      	bne.n	800e69e <prvSearchForNameWithinSingleList+0x66>
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	685a      	ldr	r2, [r3, #4]
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	605a      	str	r2, [r3, #4]
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	623b      	str	r3, [r7, #32]
 800e6ae:	e01c      	b.n	800e6ea <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	3334      	adds	r3, #52	@ 0x34
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	7afa      	ldrb	r2, [r7, #11]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d002      	beq.n	800e6d0 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	61fb      	str	r3, [r7, #28]
 800e6ce:	e006      	b.n	800e6de <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e6d0:	7afb      	ldrb	r3, [r7, #11]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d103      	bne.n	800e6de <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e6da:	2301      	movs	r3, #1
 800e6dc:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d106      	bne.n	800e6f2 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6e4:	6a3b      	ldr	r3, [r7, #32]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	623b      	str	r3, [r7, #32]
 800e6ea:	6a3b      	ldr	r3, [r7, #32]
 800e6ec:	2b0f      	cmp	r3, #15
 800e6ee:	d9df      	bls.n	800e6b0 <prvSearchForNameWithinSingleList+0x78>
 800e6f0:	e000      	b.n	800e6f4 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e6f2:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d104      	bne.n	800e704 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d1bb      	bne.n	800e67a <prvSearchForNameWithinSingleList+0x42>
 800e702:	e000      	b.n	800e706 <prvSearchForNameWithinSingleList+0xce>
					break;
 800e704:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e708:	4618      	mov	r0, r3
 800e70a:	372c      	adds	r7, #44	@ 0x2c
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e71c:	2338      	movs	r3, #56	@ 0x38
 800e71e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7f1 fda5 	bl	8000270 <strlen>
 800e726:	4603      	mov	r3, r0
 800e728:	2b0f      	cmp	r3, #15
 800e72a:	d90b      	bls.n	800e744 <xTaskGetHandle+0x30>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	60fb      	str	r3, [r7, #12]
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	e7fd      	b.n	800e740 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e744:	f7ff fe96 	bl	800e474 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	3b01      	subs	r3, #1
 800e74c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	4613      	mov	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	4a1c      	ldr	r2, [pc, #112]	@ (800e7cc <xTaskGetHandle+0xb8>)
 800e75a:	4413      	add	r3, r2
 800e75c:	6879      	ldr	r1, [r7, #4]
 800e75e:	4618      	mov	r0, r3
 800e760:	f7ff ff6a 	bl	800e638 <prvSearchForNameWithinSingleList>
 800e764:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d103      	bne.n	800e774 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1ea      	bne.n	800e748 <xTaskGetHandle+0x34>
 800e772:	e000      	b.n	800e776 <xTaskGetHandle+0x62>
					break;
 800e774:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d106      	bne.n	800e78a <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e77c:	4b14      	ldr	r3, [pc, #80]	@ (800e7d0 <xTaskGetHandle+0xbc>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	4618      	mov	r0, r3
 800e784:	f7ff ff58 	bl	800e638 <prvSearchForNameWithinSingleList>
 800e788:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d106      	bne.n	800e79e <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e790:	4b10      	ldr	r3, [pc, #64]	@ (800e7d4 <xTaskGetHandle+0xc0>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6879      	ldr	r1, [r7, #4]
 800e796:	4618      	mov	r0, r3
 800e798:	f7ff ff4e 	bl	800e638 <prvSearchForNameWithinSingleList>
 800e79c:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d104      	bne.n	800e7ae <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e7a4:	6879      	ldr	r1, [r7, #4]
 800e7a6:	480c      	ldr	r0, [pc, #48]	@ (800e7d8 <xTaskGetHandle+0xc4>)
 800e7a8:	f7ff ff46 	bl	800e638 <prvSearchForNameWithinSingleList>
 800e7ac:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d104      	bne.n	800e7be <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e7b4:	6879      	ldr	r1, [r7, #4]
 800e7b6:	4809      	ldr	r0, [pc, #36]	@ (800e7dc <xTaskGetHandle+0xc8>)
 800e7b8:	f7ff ff3e 	bl	800e638 <prvSearchForNameWithinSingleList>
 800e7bc:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e7be:	f7ff fe67 	bl	800e490 <xTaskResumeAll>

		return pxTCB;
 800e7c2:	693b      	ldr	r3, [r7, #16]
	}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3718      	adds	r7, #24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	20001860 	.word	0x20001860
 800e7d0:	20001ce8 	.word	0x20001ce8
 800e7d4:	20001cec 	.word	0x20001cec
 800e7d8:	20001d1c 	.word	0x20001d1c
 800e7dc:	20001d04 	.word	0x20001d04

0800e7e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ea:	4b4f      	ldr	r3, [pc, #316]	@ (800e928 <xTaskIncrementTick+0x148>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f040 8090 	bne.w	800e914 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7f4:	4b4d      	ldr	r3, [pc, #308]	@ (800e92c <xTaskIncrementTick+0x14c>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7fc:	4a4b      	ldr	r2, [pc, #300]	@ (800e92c <xTaskIncrementTick+0x14c>)
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d121      	bne.n	800e84c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e808:	4b49      	ldr	r3, [pc, #292]	@ (800e930 <xTaskIncrementTick+0x150>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00b      	beq.n	800e82a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	603b      	str	r3, [r7, #0]
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop
 800e828:	e7fd      	b.n	800e826 <xTaskIncrementTick+0x46>
 800e82a:	4b41      	ldr	r3, [pc, #260]	@ (800e930 <xTaskIncrementTick+0x150>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	60fb      	str	r3, [r7, #12]
 800e830:	4b40      	ldr	r3, [pc, #256]	@ (800e934 <xTaskIncrementTick+0x154>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a3e      	ldr	r2, [pc, #248]	@ (800e930 <xTaskIncrementTick+0x150>)
 800e836:	6013      	str	r3, [r2, #0]
 800e838:	4a3e      	ldr	r2, [pc, #248]	@ (800e934 <xTaskIncrementTick+0x154>)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	4b3e      	ldr	r3, [pc, #248]	@ (800e938 <xTaskIncrementTick+0x158>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3301      	adds	r3, #1
 800e844:	4a3c      	ldr	r2, [pc, #240]	@ (800e938 <xTaskIncrementTick+0x158>)
 800e846:	6013      	str	r3, [r2, #0]
 800e848:	f000 fae2 	bl	800ee10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e84c:	4b3b      	ldr	r3, [pc, #236]	@ (800e93c <xTaskIncrementTick+0x15c>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	429a      	cmp	r2, r3
 800e854:	d349      	bcc.n	800e8ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e856:	4b36      	ldr	r3, [pc, #216]	@ (800e930 <xTaskIncrementTick+0x150>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d104      	bne.n	800e86a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e860:	4b36      	ldr	r3, [pc, #216]	@ (800e93c <xTaskIncrementTick+0x15c>)
 800e862:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e866:	601a      	str	r2, [r3, #0]
					break;
 800e868:	e03f      	b.n	800e8ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e86a:	4b31      	ldr	r3, [pc, #196]	@ (800e930 <xTaskIncrementTick+0x150>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e87a:	693a      	ldr	r2, [r7, #16]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d203      	bcs.n	800e88a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e882:	4a2e      	ldr	r2, [pc, #184]	@ (800e93c <xTaskIncrementTick+0x15c>)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e888:	e02f      	b.n	800e8ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	3304      	adds	r3, #4
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fe fe68 	bl	800d564 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d004      	beq.n	800e8a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	3318      	adds	r3, #24
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fe fe5f 	bl	800d564 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8aa:	4b25      	ldr	r3, [pc, #148]	@ (800e940 <xTaskIncrementTick+0x160>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d903      	bls.n	800e8ba <xTaskIncrementTick+0xda>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b6:	4a22      	ldr	r2, [pc, #136]	@ (800e940 <xTaskIncrementTick+0x160>)
 800e8b8:	6013      	str	r3, [r2, #0]
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4a1f      	ldr	r2, [pc, #124]	@ (800e944 <xTaskIncrementTick+0x164>)
 800e8c8:	441a      	add	r2, r3
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	4610      	mov	r0, r2
 800e8d2:	f7fe fdea 	bl	800d4aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8da:	4b1b      	ldr	r3, [pc, #108]	@ (800e948 <xTaskIncrementTick+0x168>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d3b8      	bcc.n	800e856 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8e8:	e7b5      	b.n	800e856 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8ea:	4b17      	ldr	r3, [pc, #92]	@ (800e948 <xTaskIncrementTick+0x168>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8f0:	4914      	ldr	r1, [pc, #80]	@ (800e944 <xTaskIncrementTick+0x164>)
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	440b      	add	r3, r1
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d901      	bls.n	800e906 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e902:	2301      	movs	r3, #1
 800e904:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e906:	4b11      	ldr	r3, [pc, #68]	@ (800e94c <xTaskIncrementTick+0x16c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d007      	beq.n	800e91e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e90e:	2301      	movs	r3, #1
 800e910:	617b      	str	r3, [r7, #20]
 800e912:	e004      	b.n	800e91e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e914:	4b0e      	ldr	r3, [pc, #56]	@ (800e950 <xTaskIncrementTick+0x170>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3301      	adds	r3, #1
 800e91a:	4a0d      	ldr	r2, [pc, #52]	@ (800e950 <xTaskIncrementTick+0x170>)
 800e91c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e91e:	697b      	ldr	r3, [r7, #20]
}
 800e920:	4618      	mov	r0, r3
 800e922:	3718      	adds	r7, #24
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20001d58 	.word	0x20001d58
 800e92c:	20001d34 	.word	0x20001d34
 800e930:	20001ce8 	.word	0x20001ce8
 800e934:	20001cec 	.word	0x20001cec
 800e938:	20001d48 	.word	0x20001d48
 800e93c:	20001d50 	.word	0x20001d50
 800e940:	20001d38 	.word	0x20001d38
 800e944:	20001860 	.word	0x20001860
 800e948:	2000185c 	.word	0x2000185c
 800e94c:	20001d44 	.word	0x20001d44
 800e950:	20001d40 	.word	0x20001d40

0800e954 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e954:	b480      	push	{r7}
 800e956:	b085      	sub	sp, #20
 800e958:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e95a:	4b2b      	ldr	r3, [pc, #172]	@ (800ea08 <vTaskSwitchContext+0xb4>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e962:	4b2a      	ldr	r3, [pc, #168]	@ (800ea0c <vTaskSwitchContext+0xb8>)
 800e964:	2201      	movs	r2, #1
 800e966:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e968:	e047      	b.n	800e9fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e96a:	4b28      	ldr	r3, [pc, #160]	@ (800ea0c <vTaskSwitchContext+0xb8>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e970:	4b27      	ldr	r3, [pc, #156]	@ (800ea10 <vTaskSwitchContext+0xbc>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	60fb      	str	r3, [r7, #12]
 800e976:	e011      	b.n	800e99c <vTaskSwitchContext+0x48>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10b      	bne.n	800e996 <vTaskSwitchContext+0x42>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	607b      	str	r3, [r7, #4]
}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	e7fd      	b.n	800e992 <vTaskSwitchContext+0x3e>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	3b01      	subs	r3, #1
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	491d      	ldr	r1, [pc, #116]	@ (800ea14 <vTaskSwitchContext+0xc0>)
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	009b      	lsls	r3, r3, #2
 800e9a4:	4413      	add	r3, r2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	440b      	add	r3, r1
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d0e3      	beq.n	800e978 <vTaskSwitchContext+0x24>
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	4413      	add	r3, r2
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4a16      	ldr	r2, [pc, #88]	@ (800ea14 <vTaskSwitchContext+0xc0>)
 800e9bc:	4413      	add	r3, r2
 800e9be:	60bb      	str	r3, [r7, #8]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	685a      	ldr	r2, [r3, #4]
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	605a      	str	r2, [r3, #4]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	685a      	ldr	r2, [r3, #4]
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d104      	bne.n	800e9e0 <vTaskSwitchContext+0x8c>
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	605a      	str	r2, [r3, #4]
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	4a0c      	ldr	r2, [pc, #48]	@ (800ea18 <vTaskSwitchContext+0xc4>)
 800e9e8:	6013      	str	r3, [r2, #0]
 800e9ea:	4a09      	ldr	r2, [pc, #36]	@ (800ea10 <vTaskSwitchContext+0xbc>)
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9f0:	4b09      	ldr	r3, [pc, #36]	@ (800ea18 <vTaskSwitchContext+0xc4>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	3354      	adds	r3, #84	@ 0x54
 800e9f6:	4a09      	ldr	r2, [pc, #36]	@ (800ea1c <vTaskSwitchContext+0xc8>)
 800e9f8:	6013      	str	r3, [r2, #0]
}
 800e9fa:	bf00      	nop
 800e9fc:	3714      	adds	r7, #20
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop
 800ea08:	20001d58 	.word	0x20001d58
 800ea0c:	20001d44 	.word	0x20001d44
 800ea10:	20001d38 	.word	0x20001d38
 800ea14:	20001860 	.word	0x20001860
 800ea18:	2000185c 	.word	0x2000185c
 800ea1c:	20000170 	.word	0x20000170

0800ea20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d10b      	bne.n	800ea48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ea30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	60fb      	str	r3, [r7, #12]
}
 800ea42:	bf00      	nop
 800ea44:	bf00      	nop
 800ea46:	e7fd      	b.n	800ea44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea48:	4b07      	ldr	r3, [pc, #28]	@ (800ea68 <vTaskPlaceOnEventList+0x48>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	3318      	adds	r3, #24
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7fe fd4e 	bl	800d4f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea56:	2101      	movs	r1, #1
 800ea58:	6838      	ldr	r0, [r7, #0]
 800ea5a:	f000 fb69 	bl	800f130 <prvAddCurrentTaskToDelayedList>
}
 800ea5e:	bf00      	nop
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	2000185c 	.word	0x2000185c

0800ea6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d10b      	bne.n	800ea96 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ea7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea82:	f383 8811 	msr	BASEPRI, r3
 800ea86:	f3bf 8f6f 	isb	sy
 800ea8a:	f3bf 8f4f 	dsb	sy
 800ea8e:	617b      	str	r3, [r7, #20]
}
 800ea90:	bf00      	nop
 800ea92:	bf00      	nop
 800ea94:	e7fd      	b.n	800ea92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea96:	4b0a      	ldr	r3, [pc, #40]	@ (800eac0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	3318      	adds	r3, #24
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f7fe fd03 	bl	800d4aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d002      	beq.n	800eab0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800eaaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eaae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800eab0:	6879      	ldr	r1, [r7, #4]
 800eab2:	68b8      	ldr	r0, [r7, #8]
 800eab4:	f000 fb3c 	bl	800f130 <prvAddCurrentTaskToDelayedList>
	}
 800eab8:	bf00      	nop
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	2000185c 	.word	0x2000185c

0800eac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10b      	bne.n	800eaf2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800eada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	60fb      	str	r3, [r7, #12]
}
 800eaec:	bf00      	nop
 800eaee:	bf00      	nop
 800eaf0:	e7fd      	b.n	800eaee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	3318      	adds	r3, #24
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fe fd34 	bl	800d564 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eafc:	4b1d      	ldr	r3, [pc, #116]	@ (800eb74 <xTaskRemoveFromEventList+0xb0>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d11d      	bne.n	800eb40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	3304      	adds	r3, #4
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7fe fd2b 	bl	800d564 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb12:	4b19      	ldr	r3, [pc, #100]	@ (800eb78 <xTaskRemoveFromEventList+0xb4>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d903      	bls.n	800eb22 <xTaskRemoveFromEventList+0x5e>
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1e:	4a16      	ldr	r2, [pc, #88]	@ (800eb78 <xTaskRemoveFromEventList+0xb4>)
 800eb20:	6013      	str	r3, [r2, #0]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb26:	4613      	mov	r3, r2
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4a13      	ldr	r2, [pc, #76]	@ (800eb7c <xTaskRemoveFromEventList+0xb8>)
 800eb30:	441a      	add	r2, r3
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	3304      	adds	r3, #4
 800eb36:	4619      	mov	r1, r3
 800eb38:	4610      	mov	r0, r2
 800eb3a:	f7fe fcb6 	bl	800d4aa <vListInsertEnd>
 800eb3e:	e005      	b.n	800eb4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	3318      	adds	r3, #24
 800eb44:	4619      	mov	r1, r3
 800eb46:	480e      	ldr	r0, [pc, #56]	@ (800eb80 <xTaskRemoveFromEventList+0xbc>)
 800eb48:	f7fe fcaf 	bl	800d4aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb50:	4b0c      	ldr	r3, [pc, #48]	@ (800eb84 <xTaskRemoveFromEventList+0xc0>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d905      	bls.n	800eb66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb88 <xTaskRemoveFromEventList+0xc4>)
 800eb60:	2201      	movs	r2, #1
 800eb62:	601a      	str	r2, [r3, #0]
 800eb64:	e001      	b.n	800eb6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800eb66:	2300      	movs	r3, #0
 800eb68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb6a:	697b      	ldr	r3, [r7, #20]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3718      	adds	r7, #24
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20001d58 	.word	0x20001d58
 800eb78:	20001d38 	.word	0x20001d38
 800eb7c:	20001860 	.word	0x20001860
 800eb80:	20001cf0 	.word	0x20001cf0
 800eb84:	2000185c 	.word	0x2000185c
 800eb88:	20001d44 	.word	0x20001d44

0800eb8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb94:	4b06      	ldr	r3, [pc, #24]	@ (800ebb0 <vTaskInternalSetTimeOutState+0x24>)
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb9c:	4b05      	ldr	r3, [pc, #20]	@ (800ebb4 <vTaskInternalSetTimeOutState+0x28>)
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	605a      	str	r2, [r3, #4]
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	20001d48 	.word	0x20001d48
 800ebb4:	20001d34 	.word	0x20001d34

0800ebb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10b      	bne.n	800ebe0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	613b      	str	r3, [r7, #16]
}
 800ebda:	bf00      	nop
 800ebdc:	bf00      	nop
 800ebde:	e7fd      	b.n	800ebdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10b      	bne.n	800ebfe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	60fb      	str	r3, [r7, #12]
}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	e7fd      	b.n	800ebfa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ebfe:	f000 ff73 	bl	800fae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec02:	4b1d      	ldr	r3, [pc, #116]	@ (800ec78 <xTaskCheckForTimeOut+0xc0>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	69ba      	ldr	r2, [r7, #24]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec1a:	d102      	bne.n	800ec22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	61fb      	str	r3, [r7, #28]
 800ec20:	e023      	b.n	800ec6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	4b15      	ldr	r3, [pc, #84]	@ (800ec7c <xTaskCheckForTimeOut+0xc4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d007      	beq.n	800ec3e <xTaskCheckForTimeOut+0x86>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	69ba      	ldr	r2, [r7, #24]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d302      	bcc.n	800ec3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	61fb      	str	r3, [r7, #28]
 800ec3c:	e015      	b.n	800ec6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	697a      	ldr	r2, [r7, #20]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d20b      	bcs.n	800ec60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	1ad2      	subs	r2, r2, r3
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff ff99 	bl	800eb8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61fb      	str	r3, [r7, #28]
 800ec5e:	e004      	b.n	800ec6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2200      	movs	r2, #0
 800ec64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec66:	2301      	movs	r3, #1
 800ec68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec6a:	f000 ff6f 	bl	800fb4c <vPortExitCritical>

	return xReturn;
 800ec6e:	69fb      	ldr	r3, [r7, #28]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3720      	adds	r7, #32
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20001d34 	.word	0x20001d34
 800ec7c:	20001d48 	.word	0x20001d48

0800ec80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec80:	b480      	push	{r7}
 800ec82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec84:	4b03      	ldr	r3, [pc, #12]	@ (800ec94 <vTaskMissedYield+0x14>)
 800ec86:	2201      	movs	r2, #1
 800ec88:	601a      	str	r2, [r3, #0]
}
 800ec8a:	bf00      	nop
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr
 800ec94:	20001d44 	.word	0x20001d44

0800ec98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eca0:	f000 f852 	bl	800ed48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eca4:	4b06      	ldr	r3, [pc, #24]	@ (800ecc0 <prvIdleTask+0x28>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d9f9      	bls.n	800eca0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ecac:	4b05      	ldr	r3, [pc, #20]	@ (800ecc4 <prvIdleTask+0x2c>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ecbc:	e7f0      	b.n	800eca0 <prvIdleTask+0x8>
 800ecbe:	bf00      	nop
 800ecc0:	20001860 	.word	0x20001860
 800ecc4:	e000ed04 	.word	0xe000ed04

0800ecc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecce:	2300      	movs	r3, #0
 800ecd0:	607b      	str	r3, [r7, #4]
 800ecd2:	e00c      	b.n	800ecee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4413      	add	r3, r2
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4a12      	ldr	r2, [pc, #72]	@ (800ed28 <prvInitialiseTaskLists+0x60>)
 800ece0:	4413      	add	r3, r2
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fe fbb4 	bl	800d450 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	3301      	adds	r3, #1
 800ecec:	607b      	str	r3, [r7, #4]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2b37      	cmp	r3, #55	@ 0x37
 800ecf2:	d9ef      	bls.n	800ecd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ecf4:	480d      	ldr	r0, [pc, #52]	@ (800ed2c <prvInitialiseTaskLists+0x64>)
 800ecf6:	f7fe fbab 	bl	800d450 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ecfa:	480d      	ldr	r0, [pc, #52]	@ (800ed30 <prvInitialiseTaskLists+0x68>)
 800ecfc:	f7fe fba8 	bl	800d450 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed00:	480c      	ldr	r0, [pc, #48]	@ (800ed34 <prvInitialiseTaskLists+0x6c>)
 800ed02:	f7fe fba5 	bl	800d450 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed06:	480c      	ldr	r0, [pc, #48]	@ (800ed38 <prvInitialiseTaskLists+0x70>)
 800ed08:	f7fe fba2 	bl	800d450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed0c:	480b      	ldr	r0, [pc, #44]	@ (800ed3c <prvInitialiseTaskLists+0x74>)
 800ed0e:	f7fe fb9f 	bl	800d450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed12:	4b0b      	ldr	r3, [pc, #44]	@ (800ed40 <prvInitialiseTaskLists+0x78>)
 800ed14:	4a05      	ldr	r2, [pc, #20]	@ (800ed2c <prvInitialiseTaskLists+0x64>)
 800ed16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed18:	4b0a      	ldr	r3, [pc, #40]	@ (800ed44 <prvInitialiseTaskLists+0x7c>)
 800ed1a:	4a05      	ldr	r2, [pc, #20]	@ (800ed30 <prvInitialiseTaskLists+0x68>)
 800ed1c:	601a      	str	r2, [r3, #0]
}
 800ed1e:	bf00      	nop
 800ed20:	3708      	adds	r7, #8
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20001860 	.word	0x20001860
 800ed2c:	20001cc0 	.word	0x20001cc0
 800ed30:	20001cd4 	.word	0x20001cd4
 800ed34:	20001cf0 	.word	0x20001cf0
 800ed38:	20001d04 	.word	0x20001d04
 800ed3c:	20001d1c 	.word	0x20001d1c
 800ed40:	20001ce8 	.word	0x20001ce8
 800ed44:	20001cec 	.word	0x20001cec

0800ed48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed4e:	e019      	b.n	800ed84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed50:	f000 feca 	bl	800fae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed54:	4b10      	ldr	r3, [pc, #64]	@ (800ed98 <prvCheckTasksWaitingTermination+0x50>)
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3304      	adds	r3, #4
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fe fbff 	bl	800d564 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed66:	4b0d      	ldr	r3, [pc, #52]	@ (800ed9c <prvCheckTasksWaitingTermination+0x54>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	4a0b      	ldr	r2, [pc, #44]	@ (800ed9c <prvCheckTasksWaitingTermination+0x54>)
 800ed6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed70:	4b0b      	ldr	r3, [pc, #44]	@ (800eda0 <prvCheckTasksWaitingTermination+0x58>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	3b01      	subs	r3, #1
 800ed76:	4a0a      	ldr	r2, [pc, #40]	@ (800eda0 <prvCheckTasksWaitingTermination+0x58>)
 800ed78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed7a:	f000 fee7 	bl	800fb4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 f810 	bl	800eda4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed84:	4b06      	ldr	r3, [pc, #24]	@ (800eda0 <prvCheckTasksWaitingTermination+0x58>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1e1      	bne.n	800ed50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed8c:	bf00      	nop
 800ed8e:	bf00      	nop
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	20001d04 	.word	0x20001d04
 800ed9c:	20001d30 	.word	0x20001d30
 800eda0:	20001d18 	.word	0x20001d18

0800eda4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	3354      	adds	r3, #84	@ 0x54
 800edb0:	4618      	mov	r0, r3
 800edb2:	f001 feef 	bl	8010b94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d108      	bne.n	800edd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edc4:	4618      	mov	r0, r3
 800edc6:	f001 f87f 	bl	800fec8 <vPortFree>
				vPortFree( pxTCB );
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f001 f87c 	bl	800fec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edd0:	e019      	b.n	800ee06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d103      	bne.n	800ede4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f001 f873 	bl	800fec8 <vPortFree>
	}
 800ede2:	e010      	b.n	800ee06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800edea:	2b02      	cmp	r3, #2
 800edec:	d00b      	beq.n	800ee06 <prvDeleteTCB+0x62>
	__asm volatile
 800edee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	60fb      	str	r3, [r7, #12]
}
 800ee00:	bf00      	nop
 800ee02:	bf00      	nop
 800ee04:	e7fd      	b.n	800ee02 <prvDeleteTCB+0x5e>
	}
 800ee06:	bf00      	nop
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
	...

0800ee10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee16:	4b0c      	ldr	r3, [pc, #48]	@ (800ee48 <prvResetNextTaskUnblockTime+0x38>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d104      	bne.n	800ee2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee20:	4b0a      	ldr	r3, [pc, #40]	@ (800ee4c <prvResetNextTaskUnblockTime+0x3c>)
 800ee22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee28:	e008      	b.n	800ee3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee2a:	4b07      	ldr	r3, [pc, #28]	@ (800ee48 <prvResetNextTaskUnblockTime+0x38>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	4a04      	ldr	r2, [pc, #16]	@ (800ee4c <prvResetNextTaskUnblockTime+0x3c>)
 800ee3a:	6013      	str	r3, [r2, #0]
}
 800ee3c:	bf00      	nop
 800ee3e:	370c      	adds	r7, #12
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	20001ce8 	.word	0x20001ce8
 800ee4c:	20001d50 	.word	0x20001d50

0800ee50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee56:	4b0b      	ldr	r3, [pc, #44]	@ (800ee84 <xTaskGetSchedulerState+0x34>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d102      	bne.n	800ee64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	607b      	str	r3, [r7, #4]
 800ee62:	e008      	b.n	800ee76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee64:	4b08      	ldr	r3, [pc, #32]	@ (800ee88 <xTaskGetSchedulerState+0x38>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d102      	bne.n	800ee72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	607b      	str	r3, [r7, #4]
 800ee70:	e001      	b.n	800ee76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee72:	2300      	movs	r3, #0
 800ee74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee76:	687b      	ldr	r3, [r7, #4]
	}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr
 800ee84:	20001d3c 	.word	0x20001d3c
 800ee88:	20001d58 	.word	0x20001d58

0800ee8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b086      	sub	sp, #24
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d058      	beq.n	800ef54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eea2:	4b2f      	ldr	r3, [pc, #188]	@ (800ef60 <xTaskPriorityDisinherit+0xd4>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	693a      	ldr	r2, [r7, #16]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d00b      	beq.n	800eec4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eeac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	60fb      	str	r3, [r7, #12]
}
 800eebe:	bf00      	nop
 800eec0:	bf00      	nop
 800eec2:	e7fd      	b.n	800eec0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10b      	bne.n	800eee4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	60bb      	str	r3, [r7, #8]
}
 800eede:	bf00      	nop
 800eee0:	bf00      	nop
 800eee2:	e7fd      	b.n	800eee0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eee8:	1e5a      	subs	r2, r3, #1
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d02c      	beq.n	800ef54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d128      	bne.n	800ef54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	3304      	adds	r3, #4
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe fb2c 	bl	800d564 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef24:	4b0f      	ldr	r3, [pc, #60]	@ (800ef64 <xTaskPriorityDisinherit+0xd8>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d903      	bls.n	800ef34 <xTaskPriorityDisinherit+0xa8>
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef30:	4a0c      	ldr	r2, [pc, #48]	@ (800ef64 <xTaskPriorityDisinherit+0xd8>)
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef38:	4613      	mov	r3, r2
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	4413      	add	r3, r2
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	4a09      	ldr	r2, [pc, #36]	@ (800ef68 <xTaskPriorityDisinherit+0xdc>)
 800ef42:	441a      	add	r2, r3
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	3304      	adds	r3, #4
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	f7fe faad 	bl	800d4aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef50:	2301      	movs	r3, #1
 800ef52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef54:	697b      	ldr	r3, [r7, #20]
	}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3718      	adds	r7, #24
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	2000185c 	.word	0x2000185c
 800ef64:	20001d38 	.word	0x20001d38
 800ef68:	20001860 	.word	0x20001860

0800ef6c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ef76:	f000 fdb7 	bl	800fae8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ef7a:	4b20      	ldr	r3, [pc, #128]	@ (800effc <ulTaskNotifyTake+0x90>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d113      	bne.n	800efae <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ef86:	4b1d      	ldr	r3, [pc, #116]	@ (800effc <ulTaskNotifyTake+0x90>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00b      	beq.n	800efae <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef96:	2101      	movs	r1, #1
 800ef98:	6838      	ldr	r0, [r7, #0]
 800ef9a:	f000 f8c9 	bl	800f130 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ef9e:	4b18      	ldr	r3, [pc, #96]	@ (800f000 <ulTaskNotifyTake+0x94>)
 800efa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	f3bf 8f4f 	dsb	sy
 800efaa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efae:	f000 fdcd 	bl	800fb4c <vPortExitCritical>

		taskENTER_CRITICAL();
 800efb2:	f000 fd99 	bl	800fae8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800efb6:	4b11      	ldr	r3, [pc, #68]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efbe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00e      	beq.n	800efe4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d005      	beq.n	800efd8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800efcc:	4b0b      	ldr	r3, [pc, #44]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800efd6:	e005      	b.n	800efe4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800efd8:	4b08      	ldr	r3, [pc, #32]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	3a01      	subs	r2, #1
 800efe0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efe4:	4b05      	ldr	r3, [pc, #20]	@ (800effc <ulTaskNotifyTake+0x90>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800efee:	f000 fdad 	bl	800fb4c <vPortExitCritical>

		return ulReturn;
 800eff2:	68fb      	ldr	r3, [r7, #12]
	}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	2000185c 	.word	0x2000185c
 800f000:	e000ed04 	.word	0xe000ed04

0800f004 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f004:	b580      	push	{r7, lr}
 800f006:	b08a      	sub	sp, #40	@ 0x28
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10b      	bne.n	800f02c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	61bb      	str	r3, [r7, #24]
}
 800f026:	bf00      	nop
 800f028:	bf00      	nop
 800f02a:	e7fd      	b.n	800f028 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f02c:	f000 fe3c 	bl	800fca8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800f034:	f3ef 8211 	mrs	r2, BASEPRI
 800f038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	617a      	str	r2, [r7, #20]
 800f04a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f04c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f04e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f052:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f056:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05a:	2202      	movs	r2, #2
 800f05c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800f060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f066:	1c5a      	adds	r2, r3, #1
 800f068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f06e:	7ffb      	ldrb	r3, [r7, #31]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d147      	bne.n	800f104 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d00b      	beq.n	800f094 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f080:	f383 8811 	msr	BASEPRI, r3
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	60fb      	str	r3, [r7, #12]
}
 800f08e:	bf00      	nop
 800f090:	bf00      	nop
 800f092:	e7fd      	b.n	800f090 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f094:	4b20      	ldr	r3, [pc, #128]	@ (800f118 <vTaskNotifyGiveFromISR+0x114>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d11d      	bne.n	800f0d8 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09e:	3304      	adds	r3, #4
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fe fa5f 	bl	800d564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0aa:	4b1c      	ldr	r3, [pc, #112]	@ (800f11c <vTaskNotifyGiveFromISR+0x118>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d903      	bls.n	800f0ba <vTaskNotifyGiveFromISR+0xb6>
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0b6:	4a19      	ldr	r2, [pc, #100]	@ (800f11c <vTaskNotifyGiveFromISR+0x118>)
 800f0b8:	6013      	str	r3, [r2, #0]
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0be:	4613      	mov	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	4a16      	ldr	r2, [pc, #88]	@ (800f120 <vTaskNotifyGiveFromISR+0x11c>)
 800f0c8:	441a      	add	r2, r3
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	f7fe f9ea 	bl	800d4aa <vListInsertEnd>
 800f0d6:	e005      	b.n	800f0e4 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0da:	3318      	adds	r3, #24
 800f0dc:	4619      	mov	r1, r3
 800f0de:	4811      	ldr	r0, [pc, #68]	@ (800f124 <vTaskNotifyGiveFromISR+0x120>)
 800f0e0:	f7fe f9e3 	bl	800d4aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0e8:	4b0f      	ldr	r3, [pc, #60]	@ (800f128 <vTaskNotifyGiveFromISR+0x124>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d908      	bls.n	800f104 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d002      	beq.n	800f0fe <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f12c <vTaskNotifyGiveFromISR+0x128>)
 800f100:	2201      	movs	r2, #1
 800f102:	601a      	str	r2, [r3, #0]
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	f383 8811 	msr	BASEPRI, r3
}
 800f10e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800f110:	bf00      	nop
 800f112:	3728      	adds	r7, #40	@ 0x28
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	20001d58 	.word	0x20001d58
 800f11c:	20001d38 	.word	0x20001d38
 800f120:	20001860 	.word	0x20001860
 800f124:	20001cf0 	.word	0x20001cf0
 800f128:	2000185c 	.word	0x2000185c
 800f12c:	20001d44 	.word	0x20001d44

0800f130 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f13a:	4b21      	ldr	r3, [pc, #132]	@ (800f1c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f140:	4b20      	ldr	r3, [pc, #128]	@ (800f1c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	3304      	adds	r3, #4
 800f146:	4618      	mov	r0, r3
 800f148:	f7fe fa0c 	bl	800d564 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f152:	d10a      	bne.n	800f16a <prvAddCurrentTaskToDelayedList+0x3a>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d007      	beq.n	800f16a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f15a:	4b1a      	ldr	r3, [pc, #104]	@ (800f1c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3304      	adds	r3, #4
 800f160:	4619      	mov	r1, r3
 800f162:	4819      	ldr	r0, [pc, #100]	@ (800f1c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f164:	f7fe f9a1 	bl	800d4aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f168:	e026      	b.n	800f1b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4413      	add	r3, r2
 800f170:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f172:	4b14      	ldr	r3, [pc, #80]	@ (800f1c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d209      	bcs.n	800f196 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f182:	4b12      	ldr	r3, [pc, #72]	@ (800f1cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	4b0f      	ldr	r3, [pc, #60]	@ (800f1c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3304      	adds	r3, #4
 800f18c:	4619      	mov	r1, r3
 800f18e:	4610      	mov	r0, r2
 800f190:	f7fe f9af 	bl	800d4f2 <vListInsert>
}
 800f194:	e010      	b.n	800f1b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f196:	4b0e      	ldr	r3, [pc, #56]	@ (800f1d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	4b0a      	ldr	r3, [pc, #40]	@ (800f1c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	3304      	adds	r3, #4
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	f7fe f9a5 	bl	800d4f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d202      	bcs.n	800f1b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f1b2:	4a08      	ldr	r2, [pc, #32]	@ (800f1d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	6013      	str	r3, [r2, #0]
}
 800f1b8:	bf00      	nop
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	20001d34 	.word	0x20001d34
 800f1c4:	2000185c 	.word	0x2000185c
 800f1c8:	20001d1c 	.word	0x20001d1c
 800f1cc:	20001cec 	.word	0x20001cec
 800f1d0:	20001ce8 	.word	0x20001ce8
 800f1d4:	20001d50 	.word	0x20001d50

0800f1d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b08a      	sub	sp, #40	@ 0x28
 800f1dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f1e2:	f000 fb13 	bl	800f80c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f1e6:	4b1d      	ldr	r3, [pc, #116]	@ (800f25c <xTimerCreateTimerTask+0x84>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d021      	beq.n	800f232 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f1f6:	1d3a      	adds	r2, r7, #4
 800f1f8:	f107 0108 	add.w	r1, r7, #8
 800f1fc:	f107 030c 	add.w	r3, r7, #12
 800f200:	4618      	mov	r0, r3
 800f202:	f7fe f90b 	bl	800d41c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f206:	6879      	ldr	r1, [r7, #4]
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	9202      	str	r2, [sp, #8]
 800f20e:	9301      	str	r3, [sp, #4]
 800f210:	2302      	movs	r3, #2
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	2300      	movs	r3, #0
 800f216:	460a      	mov	r2, r1
 800f218:	4911      	ldr	r1, [pc, #68]	@ (800f260 <xTimerCreateTimerTask+0x88>)
 800f21a:	4812      	ldr	r0, [pc, #72]	@ (800f264 <xTimerCreateTimerTask+0x8c>)
 800f21c:	f7fe fec6 	bl	800dfac <xTaskCreateStatic>
 800f220:	4603      	mov	r3, r0
 800f222:	4a11      	ldr	r2, [pc, #68]	@ (800f268 <xTimerCreateTimerTask+0x90>)
 800f224:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f226:	4b10      	ldr	r3, [pc, #64]	@ (800f268 <xTimerCreateTimerTask+0x90>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d001      	beq.n	800f232 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f22e:	2301      	movs	r3, #1
 800f230:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10b      	bne.n	800f250 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f23c:	f383 8811 	msr	BASEPRI, r3
 800f240:	f3bf 8f6f 	isb	sy
 800f244:	f3bf 8f4f 	dsb	sy
 800f248:	613b      	str	r3, [r7, #16]
}
 800f24a:	bf00      	nop
 800f24c:	bf00      	nop
 800f24e:	e7fd      	b.n	800f24c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f250:	697b      	ldr	r3, [r7, #20]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3718      	adds	r7, #24
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20001d8c 	.word	0x20001d8c
 800f260:	0801415c 	.word	0x0801415c
 800f264:	0800f3a5 	.word	0x0800f3a5
 800f268:	20001d90 	.word	0x20001d90

0800f26c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b08a      	sub	sp, #40	@ 0x28
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f27a:	2300      	movs	r3, #0
 800f27c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10b      	bne.n	800f29c <xTimerGenericCommand+0x30>
	__asm volatile
 800f284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f288:	f383 8811 	msr	BASEPRI, r3
 800f28c:	f3bf 8f6f 	isb	sy
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	623b      	str	r3, [r7, #32]
}
 800f296:	bf00      	nop
 800f298:	bf00      	nop
 800f29a:	e7fd      	b.n	800f298 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f29c:	4b19      	ldr	r3, [pc, #100]	@ (800f304 <xTimerGenericCommand+0x98>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d02a      	beq.n	800f2fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2b05      	cmp	r3, #5
 800f2b4:	dc18      	bgt.n	800f2e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f2b6:	f7ff fdcb 	bl	800ee50 <xTaskGetSchedulerState>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b02      	cmp	r3, #2
 800f2be:	d109      	bne.n	800f2d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f2c0:	4b10      	ldr	r3, [pc, #64]	@ (800f304 <xTimerGenericCommand+0x98>)
 800f2c2:	6818      	ldr	r0, [r3, #0]
 800f2c4:	f107 0110 	add.w	r1, r7, #16
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2cc:	f7fe fa7e 	bl	800d7cc <xQueueGenericSend>
 800f2d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f2d2:	e012      	b.n	800f2fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f2d4:	4b0b      	ldr	r3, [pc, #44]	@ (800f304 <xTimerGenericCommand+0x98>)
 800f2d6:	6818      	ldr	r0, [r3, #0]
 800f2d8:	f107 0110 	add.w	r1, r7, #16
 800f2dc:	2300      	movs	r3, #0
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f7fe fa74 	bl	800d7cc <xQueueGenericSend>
 800f2e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f2e6:	e008      	b.n	800f2fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f2e8:	4b06      	ldr	r3, [pc, #24]	@ (800f304 <xTimerGenericCommand+0x98>)
 800f2ea:	6818      	ldr	r0, [r3, #0]
 800f2ec:	f107 0110 	add.w	r1, r7, #16
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	683a      	ldr	r2, [r7, #0]
 800f2f4:	f7fe fb6c 	bl	800d9d0 <xQueueGenericSendFromISR>
 800f2f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3728      	adds	r7, #40	@ 0x28
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	20001d8c 	.word	0x20001d8c

0800f308 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b088      	sub	sp, #32
 800f30c:	af02      	add	r7, sp, #8
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f312:	4b23      	ldr	r3, [pc, #140]	@ (800f3a0 <prvProcessExpiredTimer+0x98>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	3304      	adds	r3, #4
 800f320:	4618      	mov	r0, r3
 800f322:	f7fe f91f 	bl	800d564 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f32c:	f003 0304 	and.w	r3, r3, #4
 800f330:	2b00      	cmp	r3, #0
 800f332:	d023      	beq.n	800f37c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	699a      	ldr	r2, [r3, #24]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	18d1      	adds	r1, r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	6978      	ldr	r0, [r7, #20]
 800f342:	f000 f8d5 	bl	800f4f0 <prvInsertTimerInActiveList>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d020      	beq.n	800f38e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f34c:	2300      	movs	r3, #0
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	2300      	movs	r3, #0
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	2100      	movs	r1, #0
 800f356:	6978      	ldr	r0, [r7, #20]
 800f358:	f7ff ff88 	bl	800f26c <xTimerGenericCommand>
 800f35c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d114      	bne.n	800f38e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f368:	f383 8811 	msr	BASEPRI, r3
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	f3bf 8f4f 	dsb	sy
 800f374:	60fb      	str	r3, [r7, #12]
}
 800f376:	bf00      	nop
 800f378:	bf00      	nop
 800f37a:	e7fd      	b.n	800f378 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f382:	f023 0301 	bic.w	r3, r3, #1
 800f386:	b2da      	uxtb	r2, r3
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	6a1b      	ldr	r3, [r3, #32]
 800f392:	6978      	ldr	r0, [r7, #20]
 800f394:	4798      	blx	r3
}
 800f396:	bf00      	nop
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	20001d84 	.word	0x20001d84

0800f3a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f3ac:	f107 0308 	add.w	r3, r7, #8
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f000 f859 	bl	800f468 <prvGetNextExpireTime>
 800f3b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f000 f805 	bl	800f3cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f3c2:	f000 f8d7 	bl	800f574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f3c6:	bf00      	nop
 800f3c8:	e7f0      	b.n	800f3ac <prvTimerTask+0x8>
	...

0800f3cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f3d6:	f7ff f84d 	bl	800e474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3da:	f107 0308 	add.w	r3, r7, #8
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f000 f866 	bl	800f4b0 <prvSampleTimeNow>
 800f3e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d130      	bne.n	800f44e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d10a      	bne.n	800f408 <prvProcessTimerOrBlockTask+0x3c>
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d806      	bhi.n	800f408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f3fa:	f7ff f849 	bl	800e490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f3fe:	68f9      	ldr	r1, [r7, #12]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff ff81 	bl	800f308 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f406:	e024      	b.n	800f452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d008      	beq.n	800f420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f40e:	4b13      	ldr	r3, [pc, #76]	@ (800f45c <prvProcessTimerOrBlockTask+0x90>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d101      	bne.n	800f41c <prvProcessTimerOrBlockTask+0x50>
 800f418:	2301      	movs	r3, #1
 800f41a:	e000      	b.n	800f41e <prvProcessTimerOrBlockTask+0x52>
 800f41c:	2300      	movs	r3, #0
 800f41e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f420:	4b0f      	ldr	r3, [pc, #60]	@ (800f460 <prvProcessTimerOrBlockTask+0x94>)
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	4619      	mov	r1, r3
 800f42e:	f7fe fd89 	bl	800df44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f432:	f7ff f82d 	bl	800e490 <xTaskResumeAll>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d10a      	bne.n	800f452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f43c:	4b09      	ldr	r3, [pc, #36]	@ (800f464 <prvProcessTimerOrBlockTask+0x98>)
 800f43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	f3bf 8f6f 	isb	sy
}
 800f44c:	e001      	b.n	800f452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f44e:	f7ff f81f 	bl	800e490 <xTaskResumeAll>
}
 800f452:	bf00      	nop
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20001d88 	.word	0x20001d88
 800f460:	20001d8c 	.word	0x20001d8c
 800f464:	e000ed04 	.word	0xe000ed04

0800f468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f470:	4b0e      	ldr	r3, [pc, #56]	@ (800f4ac <prvGetNextExpireTime+0x44>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <prvGetNextExpireTime+0x16>
 800f47a:	2201      	movs	r2, #1
 800f47c:	e000      	b.n	800f480 <prvGetNextExpireTime+0x18>
 800f47e:	2200      	movs	r2, #0
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d105      	bne.n	800f498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f48c:	4b07      	ldr	r3, [pc, #28]	@ (800f4ac <prvGetNextExpireTime+0x44>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	60fb      	str	r3, [r7, #12]
 800f496:	e001      	b.n	800f49c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f498:	2300      	movs	r3, #0
 800f49a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f49c:	68fb      	ldr	r3, [r7, #12]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	20001d84 	.word	0x20001d84

0800f4b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f4b8:	f7ff f888 	bl	800e5cc <xTaskGetTickCount>
 800f4bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f4be:	4b0b      	ldr	r3, [pc, #44]	@ (800f4ec <prvSampleTimeNow+0x3c>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d205      	bcs.n	800f4d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f4c8:	f000 f93a 	bl	800f740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	601a      	str	r2, [r3, #0]
 800f4d2:	e002      	b.n	800f4da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f4da:	4a04      	ldr	r2, [pc, #16]	@ (800f4ec <prvSampleTimeNow+0x3c>)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	20001d94 	.word	0x20001d94

0800f4f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	607a      	str	r2, [r7, #4]
 800f4fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f4fe:	2300      	movs	r3, #0
 800f500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	429a      	cmp	r2, r3
 800f514:	d812      	bhi.n	800f53c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	1ad2      	subs	r2, r2, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	699b      	ldr	r3, [r3, #24]
 800f520:	429a      	cmp	r2, r3
 800f522:	d302      	bcc.n	800f52a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f524:	2301      	movs	r3, #1
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e01b      	b.n	800f562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f52a:	4b10      	ldr	r3, [pc, #64]	@ (800f56c <prvInsertTimerInActiveList+0x7c>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3304      	adds	r3, #4
 800f532:	4619      	mov	r1, r3
 800f534:	4610      	mov	r0, r2
 800f536:	f7fd ffdc 	bl	800d4f2 <vListInsert>
 800f53a:	e012      	b.n	800f562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	429a      	cmp	r2, r3
 800f542:	d206      	bcs.n	800f552 <prvInsertTimerInActiveList+0x62>
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d302      	bcc.n	800f552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f54c:	2301      	movs	r3, #1
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	e007      	b.n	800f562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f552:	4b07      	ldr	r3, [pc, #28]	@ (800f570 <prvInsertTimerInActiveList+0x80>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3304      	adds	r3, #4
 800f55a:	4619      	mov	r1, r3
 800f55c:	4610      	mov	r0, r2
 800f55e:	f7fd ffc8 	bl	800d4f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f562:	697b      	ldr	r3, [r7, #20]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3718      	adds	r7, #24
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	20001d88 	.word	0x20001d88
 800f570:	20001d84 	.word	0x20001d84

0800f574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08e      	sub	sp, #56	@ 0x38
 800f578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f57a:	e0ce      	b.n	800f71a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	da19      	bge.n	800f5b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f582:	1d3b      	adds	r3, r7, #4
 800f584:	3304      	adds	r3, #4
 800f586:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10b      	bne.n	800f5a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	61fb      	str	r3, [r7, #28]
}
 800f5a0:	bf00      	nop
 800f5a2:	bf00      	nop
 800f5a4:	e7fd      	b.n	800f5a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5ac:	6850      	ldr	r0, [r2, #4]
 800f5ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5b0:	6892      	ldr	r2, [r2, #8]
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	f2c0 80ae 	blt.w	800f71a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c4:	695b      	ldr	r3, [r3, #20]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d004      	beq.n	800f5d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fd ffc8 	bl	800d564 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5d4:	463b      	mov	r3, r7
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7ff ff6a 	bl	800f4b0 <prvSampleTimeNow>
 800f5dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2b09      	cmp	r3, #9
 800f5e2:	f200 8097 	bhi.w	800f714 <prvProcessReceivedCommands+0x1a0>
 800f5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5ec <prvProcessReceivedCommands+0x78>)
 800f5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ec:	0800f615 	.word	0x0800f615
 800f5f0:	0800f615 	.word	0x0800f615
 800f5f4:	0800f615 	.word	0x0800f615
 800f5f8:	0800f68b 	.word	0x0800f68b
 800f5fc:	0800f69f 	.word	0x0800f69f
 800f600:	0800f6eb 	.word	0x0800f6eb
 800f604:	0800f615 	.word	0x0800f615
 800f608:	0800f615 	.word	0x0800f615
 800f60c:	0800f68b 	.word	0x0800f68b
 800f610:	0800f69f 	.word	0x0800f69f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f616:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f61a:	f043 0301 	orr.w	r3, r3, #1
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f622:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f62a:	699b      	ldr	r3, [r3, #24]
 800f62c:	18d1      	adds	r1, r2, r3
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f634:	f7ff ff5c 	bl	800f4f0 <prvInsertTimerInActiveList>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d06c      	beq.n	800f718 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f644:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f64c:	f003 0304 	and.w	r3, r3, #4
 800f650:	2b00      	cmp	r3, #0
 800f652:	d061      	beq.n	800f718 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f658:	699b      	ldr	r3, [r3, #24]
 800f65a:	441a      	add	r2, r3
 800f65c:	2300      	movs	r3, #0
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	2300      	movs	r3, #0
 800f662:	2100      	movs	r1, #0
 800f664:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f666:	f7ff fe01 	bl	800f26c <xTimerGenericCommand>
 800f66a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f66c:	6a3b      	ldr	r3, [r7, #32]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d152      	bne.n	800f718 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	61bb      	str	r3, [r7, #24]
}
 800f684:	bf00      	nop
 800f686:	bf00      	nop
 800f688:	e7fd      	b.n	800f686 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f690:	f023 0301 	bic.w	r3, r3, #1
 800f694:	b2da      	uxtb	r2, r3
 800f696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f698:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f69c:	e03d      	b.n	800f71a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6a4:	f043 0301 	orr.w	r3, r3, #1
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b8:	699b      	ldr	r3, [r3, #24]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d10b      	bne.n	800f6d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c2:	f383 8811 	msr	BASEPRI, r3
 800f6c6:	f3bf 8f6f 	isb	sy
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	617b      	str	r3, [r7, #20]
}
 800f6d0:	bf00      	nop
 800f6d2:	bf00      	nop
 800f6d4:	e7fd      	b.n	800f6d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d8:	699a      	ldr	r2, [r3, #24]
 800f6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6dc:	18d1      	adds	r1, r2, r3
 800f6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6e4:	f7ff ff04 	bl	800f4f0 <prvInsertTimerInActiveList>
					break;
 800f6e8:	e017      	b.n	800f71a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6f0:	f003 0302 	and.w	r3, r3, #2
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d103      	bne.n	800f700 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f6f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6fa:	f000 fbe5 	bl	800fec8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f6fe:	e00c      	b.n	800f71a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f706:	f023 0301 	bic.w	r3, r3, #1
 800f70a:	b2da      	uxtb	r2, r3
 800f70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f70e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f712:	e002      	b.n	800f71a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f714:	bf00      	nop
 800f716:	e000      	b.n	800f71a <prvProcessReceivedCommands+0x1a6>
					break;
 800f718:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f71a:	4b08      	ldr	r3, [pc, #32]	@ (800f73c <prvProcessReceivedCommands+0x1c8>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	1d39      	adds	r1, r7, #4
 800f720:	2200      	movs	r2, #0
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe f9f2 	bl	800db0c <xQueueReceive>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f47f af26 	bne.w	800f57c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f730:	bf00      	nop
 800f732:	bf00      	nop
 800f734:	3730      	adds	r7, #48	@ 0x30
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	20001d8c 	.word	0x20001d8c

0800f740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b088      	sub	sp, #32
 800f744:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f746:	e049      	b.n	800f7dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f748:	4b2e      	ldr	r3, [pc, #184]	@ (800f804 <prvSwitchTimerLists+0xc4>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f752:	4b2c      	ldr	r3, [pc, #176]	@ (800f804 <prvSwitchTimerLists+0xc4>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	3304      	adds	r3, #4
 800f760:	4618      	mov	r0, r3
 800f762:	f7fd feff 	bl	800d564 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f774:	f003 0304 	and.w	r3, r3, #4
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d02f      	beq.n	800f7dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	4413      	add	r3, r2
 800f784:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d90e      	bls.n	800f7ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f79a:	4b1a      	ldr	r3, [pc, #104]	@ (800f804 <prvSwitchTimerLists+0xc4>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3304      	adds	r3, #4
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	f7fd fea4 	bl	800d4f2 <vListInsert>
 800f7aa:	e017      	b.n	800f7dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	693a      	ldr	r2, [r7, #16]
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f7ff fd58 	bl	800f26c <xTimerGenericCommand>
 800f7bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10b      	bne.n	800f7dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	603b      	str	r3, [r7, #0]
}
 800f7d6:	bf00      	nop
 800f7d8:	bf00      	nop
 800f7da:	e7fd      	b.n	800f7d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f7dc:	4b09      	ldr	r3, [pc, #36]	@ (800f804 <prvSwitchTimerLists+0xc4>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1b0      	bne.n	800f748 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f7e6:	4b07      	ldr	r3, [pc, #28]	@ (800f804 <prvSwitchTimerLists+0xc4>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f7ec:	4b06      	ldr	r3, [pc, #24]	@ (800f808 <prvSwitchTimerLists+0xc8>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a04      	ldr	r2, [pc, #16]	@ (800f804 <prvSwitchTimerLists+0xc4>)
 800f7f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f7f4:	4a04      	ldr	r2, [pc, #16]	@ (800f808 <prvSwitchTimerLists+0xc8>)
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	6013      	str	r3, [r2, #0]
}
 800f7fa:	bf00      	nop
 800f7fc:	3718      	adds	r7, #24
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	20001d84 	.word	0x20001d84
 800f808:	20001d88 	.word	0x20001d88

0800f80c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f812:	f000 f969 	bl	800fae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f816:	4b15      	ldr	r3, [pc, #84]	@ (800f86c <prvCheckForValidListAndQueue+0x60>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d120      	bne.n	800f860 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f81e:	4814      	ldr	r0, [pc, #80]	@ (800f870 <prvCheckForValidListAndQueue+0x64>)
 800f820:	f7fd fe16 	bl	800d450 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f824:	4813      	ldr	r0, [pc, #76]	@ (800f874 <prvCheckForValidListAndQueue+0x68>)
 800f826:	f7fd fe13 	bl	800d450 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f82a:	4b13      	ldr	r3, [pc, #76]	@ (800f878 <prvCheckForValidListAndQueue+0x6c>)
 800f82c:	4a10      	ldr	r2, [pc, #64]	@ (800f870 <prvCheckForValidListAndQueue+0x64>)
 800f82e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f830:	4b12      	ldr	r3, [pc, #72]	@ (800f87c <prvCheckForValidListAndQueue+0x70>)
 800f832:	4a10      	ldr	r2, [pc, #64]	@ (800f874 <prvCheckForValidListAndQueue+0x68>)
 800f834:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f836:	2300      	movs	r3, #0
 800f838:	9300      	str	r3, [sp, #0]
 800f83a:	4b11      	ldr	r3, [pc, #68]	@ (800f880 <prvCheckForValidListAndQueue+0x74>)
 800f83c:	4a11      	ldr	r2, [pc, #68]	@ (800f884 <prvCheckForValidListAndQueue+0x78>)
 800f83e:	2110      	movs	r1, #16
 800f840:	200a      	movs	r0, #10
 800f842:	f7fd ff23 	bl	800d68c <xQueueGenericCreateStatic>
 800f846:	4603      	mov	r3, r0
 800f848:	4a08      	ldr	r2, [pc, #32]	@ (800f86c <prvCheckForValidListAndQueue+0x60>)
 800f84a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f84c:	4b07      	ldr	r3, [pc, #28]	@ (800f86c <prvCheckForValidListAndQueue+0x60>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d005      	beq.n	800f860 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f854:	4b05      	ldr	r3, [pc, #20]	@ (800f86c <prvCheckForValidListAndQueue+0x60>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	490b      	ldr	r1, [pc, #44]	@ (800f888 <prvCheckForValidListAndQueue+0x7c>)
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fb48 	bl	800def0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f860:	f000 f974 	bl	800fb4c <vPortExitCritical>
}
 800f864:	bf00      	nop
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20001d8c 	.word	0x20001d8c
 800f870:	20001d5c 	.word	0x20001d5c
 800f874:	20001d70 	.word	0x20001d70
 800f878:	20001d84 	.word	0x20001d84
 800f87c:	20001d88 	.word	0x20001d88
 800f880:	20001e38 	.word	0x20001e38
 800f884:	20001d98 	.word	0x20001d98
 800f888:	08014164 	.word	0x08014164

0800f88c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	3b04      	subs	r3, #4
 800f89c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f8a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	3b04      	subs	r3, #4
 800f8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	f023 0201 	bic.w	r2, r3, #1
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	3b04      	subs	r3, #4
 800f8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f8bc:	4a0c      	ldr	r2, [pc, #48]	@ (800f8f0 <pxPortInitialiseStack+0x64>)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	3b14      	subs	r3, #20
 800f8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	3b04      	subs	r3, #4
 800f8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f06f 0202 	mvn.w	r2, #2
 800f8da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	3b20      	subs	r3, #32
 800f8e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr
 800f8f0:	0800f8f5 	.word	0x0800f8f5

0800f8f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8fe:	4b13      	ldr	r3, [pc, #76]	@ (800f94c <prvTaskExitError+0x58>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f906:	d00b      	beq.n	800f920 <prvTaskExitError+0x2c>
	__asm volatile
 800f908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	60fb      	str	r3, [r7, #12]
}
 800f91a:	bf00      	nop
 800f91c:	bf00      	nop
 800f91e:	e7fd      	b.n	800f91c <prvTaskExitError+0x28>
	__asm volatile
 800f920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f924:	f383 8811 	msr	BASEPRI, r3
 800f928:	f3bf 8f6f 	isb	sy
 800f92c:	f3bf 8f4f 	dsb	sy
 800f930:	60bb      	str	r3, [r7, #8]
}
 800f932:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f934:	bf00      	nop
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d0fc      	beq.n	800f936 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f93c:	bf00      	nop
 800f93e:	bf00      	nop
 800f940:	3714      	adds	r7, #20
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	20000160 	.word	0x20000160

0800f950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f950:	4b07      	ldr	r3, [pc, #28]	@ (800f970 <pxCurrentTCBConst2>)
 800f952:	6819      	ldr	r1, [r3, #0]
 800f954:	6808      	ldr	r0, [r1, #0]
 800f956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95a:	f380 8809 	msr	PSP, r0
 800f95e:	f3bf 8f6f 	isb	sy
 800f962:	f04f 0000 	mov.w	r0, #0
 800f966:	f380 8811 	msr	BASEPRI, r0
 800f96a:	4770      	bx	lr
 800f96c:	f3af 8000 	nop.w

0800f970 <pxCurrentTCBConst2>:
 800f970:	2000185c 	.word	0x2000185c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f974:	bf00      	nop
 800f976:	bf00      	nop

0800f978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f978:	4808      	ldr	r0, [pc, #32]	@ (800f99c <prvPortStartFirstTask+0x24>)
 800f97a:	6800      	ldr	r0, [r0, #0]
 800f97c:	6800      	ldr	r0, [r0, #0]
 800f97e:	f380 8808 	msr	MSP, r0
 800f982:	f04f 0000 	mov.w	r0, #0
 800f986:	f380 8814 	msr	CONTROL, r0
 800f98a:	b662      	cpsie	i
 800f98c:	b661      	cpsie	f
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	f3bf 8f6f 	isb	sy
 800f996:	df00      	svc	0
 800f998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f99a:	bf00      	nop
 800f99c:	e000ed08 	.word	0xe000ed08

0800f9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f9a6:	4b47      	ldr	r3, [pc, #284]	@ (800fac4 <xPortStartScheduler+0x124>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a47      	ldr	r2, [pc, #284]	@ (800fac8 <xPortStartScheduler+0x128>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d10b      	bne.n	800f9c8 <xPortStartScheduler+0x28>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	613b      	str	r3, [r7, #16]
}
 800f9c2:	bf00      	nop
 800f9c4:	bf00      	nop
 800f9c6:	e7fd      	b.n	800f9c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9c8:	4b3e      	ldr	r3, [pc, #248]	@ (800fac4 <xPortStartScheduler+0x124>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a3f      	ldr	r2, [pc, #252]	@ (800facc <xPortStartScheduler+0x12c>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d10b      	bne.n	800f9ea <xPortStartScheduler+0x4a>
	__asm volatile
 800f9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d6:	f383 8811 	msr	BASEPRI, r3
 800f9da:	f3bf 8f6f 	isb	sy
 800f9de:	f3bf 8f4f 	dsb	sy
 800f9e2:	60fb      	str	r3, [r7, #12]
}
 800f9e4:	bf00      	nop
 800f9e6:	bf00      	nop
 800f9e8:	e7fd      	b.n	800f9e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f9ea:	4b39      	ldr	r3, [pc, #228]	@ (800fad0 <xPortStartScheduler+0x130>)
 800f9ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	22ff      	movs	r2, #255	@ 0xff
 800f9fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa04:	78fb      	ldrb	r3, [r7, #3]
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fa0c:	b2da      	uxtb	r2, r3
 800fa0e:	4b31      	ldr	r3, [pc, #196]	@ (800fad4 <xPortStartScheduler+0x134>)
 800fa10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa12:	4b31      	ldr	r3, [pc, #196]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa14:	2207      	movs	r2, #7
 800fa16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa18:	e009      	b.n	800fa2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fa1a:	4b2f      	ldr	r3, [pc, #188]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	3b01      	subs	r3, #1
 800fa20:	4a2d      	ldr	r2, [pc, #180]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa24:	78fb      	ldrb	r3, [r7, #3]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	005b      	lsls	r3, r3, #1
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa2e:	78fb      	ldrb	r3, [r7, #3]
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa36:	2b80      	cmp	r3, #128	@ 0x80
 800fa38:	d0ef      	beq.n	800fa1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa3a:	4b27      	ldr	r3, [pc, #156]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f1c3 0307 	rsb	r3, r3, #7
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	d00b      	beq.n	800fa5e <xPortStartScheduler+0xbe>
	__asm volatile
 800fa46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa4a:	f383 8811 	msr	BASEPRI, r3
 800fa4e:	f3bf 8f6f 	isb	sy
 800fa52:	f3bf 8f4f 	dsb	sy
 800fa56:	60bb      	str	r3, [r7, #8]
}
 800fa58:	bf00      	nop
 800fa5a:	bf00      	nop
 800fa5c:	e7fd      	b.n	800fa5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa5e:	4b1e      	ldr	r3, [pc, #120]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	021b      	lsls	r3, r3, #8
 800fa64:	4a1c      	ldr	r2, [pc, #112]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa68:	4b1b      	ldr	r3, [pc, #108]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fa70:	4a19      	ldr	r2, [pc, #100]	@ (800fad8 <xPortStartScheduler+0x138>)
 800fa72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	b2da      	uxtb	r2, r3
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa7c:	4b17      	ldr	r3, [pc, #92]	@ (800fadc <xPortStartScheduler+0x13c>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a16      	ldr	r2, [pc, #88]	@ (800fadc <xPortStartScheduler+0x13c>)
 800fa82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fa86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa88:	4b14      	ldr	r3, [pc, #80]	@ (800fadc <xPortStartScheduler+0x13c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a13      	ldr	r2, [pc, #76]	@ (800fadc <xPortStartScheduler+0x13c>)
 800fa8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fa92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa94:	f000 f8da 	bl	800fc4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa98:	4b11      	ldr	r3, [pc, #68]	@ (800fae0 <xPortStartScheduler+0x140>)
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa9e:	f000 f8f9 	bl	800fc94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800faa2:	4b10      	ldr	r3, [pc, #64]	@ (800fae4 <xPortStartScheduler+0x144>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	4a0f      	ldr	r2, [pc, #60]	@ (800fae4 <xPortStartScheduler+0x144>)
 800faa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800faac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800faae:	f7ff ff63 	bl	800f978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fab2:	f7fe ff4f 	bl	800e954 <vTaskSwitchContext>
	prvTaskExitError();
 800fab6:	f7ff ff1d 	bl	800f8f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3718      	adds	r7, #24
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	e000ed00 	.word	0xe000ed00
 800fac8:	410fc271 	.word	0x410fc271
 800facc:	410fc270 	.word	0x410fc270
 800fad0:	e000e400 	.word	0xe000e400
 800fad4:	20001e88 	.word	0x20001e88
 800fad8:	20001e8c 	.word	0x20001e8c
 800fadc:	e000ed20 	.word	0xe000ed20
 800fae0:	20000160 	.word	0x20000160
 800fae4:	e000ef34 	.word	0xe000ef34

0800fae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf2:	f383 8811 	msr	BASEPRI, r3
 800faf6:	f3bf 8f6f 	isb	sy
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	607b      	str	r3, [r7, #4]
}
 800fb00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb02:	4b10      	ldr	r3, [pc, #64]	@ (800fb44 <vPortEnterCritical+0x5c>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	3301      	adds	r3, #1
 800fb08:	4a0e      	ldr	r2, [pc, #56]	@ (800fb44 <vPortEnterCritical+0x5c>)
 800fb0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb0c:	4b0d      	ldr	r3, [pc, #52]	@ (800fb44 <vPortEnterCritical+0x5c>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d110      	bne.n	800fb36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb14:	4b0c      	ldr	r3, [pc, #48]	@ (800fb48 <vPortEnterCritical+0x60>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00b      	beq.n	800fb36 <vPortEnterCritical+0x4e>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	603b      	str	r3, [r7, #0]
}
 800fb30:	bf00      	nop
 800fb32:	bf00      	nop
 800fb34:	e7fd      	b.n	800fb32 <vPortEnterCritical+0x4a>
	}
}
 800fb36:	bf00      	nop
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	20000160 	.word	0x20000160
 800fb48:	e000ed04 	.word	0xe000ed04

0800fb4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb52:	4b12      	ldr	r3, [pc, #72]	@ (800fb9c <vPortExitCritical+0x50>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10b      	bne.n	800fb72 <vPortExitCritical+0x26>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	607b      	str	r3, [r7, #4]
}
 800fb6c:	bf00      	nop
 800fb6e:	bf00      	nop
 800fb70:	e7fd      	b.n	800fb6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fb72:	4b0a      	ldr	r3, [pc, #40]	@ (800fb9c <vPortExitCritical+0x50>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3b01      	subs	r3, #1
 800fb78:	4a08      	ldr	r2, [pc, #32]	@ (800fb9c <vPortExitCritical+0x50>)
 800fb7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb7c:	4b07      	ldr	r3, [pc, #28]	@ (800fb9c <vPortExitCritical+0x50>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d105      	bne.n	800fb90 <vPortExitCritical+0x44>
 800fb84:	2300      	movs	r3, #0
 800fb86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	f383 8811 	msr	BASEPRI, r3
}
 800fb8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	20000160 	.word	0x20000160

0800fba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fba0:	f3ef 8009 	mrs	r0, PSP
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	4b15      	ldr	r3, [pc, #84]	@ (800fc00 <pxCurrentTCBConst>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	f01e 0f10 	tst.w	lr, #16
 800fbb0:	bf08      	it	eq
 800fbb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fbb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbba:	6010      	str	r0, [r2, #0]
 800fbbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fbc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fbc4:	f380 8811 	msr	BASEPRI, r0
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	f7fe fec0 	bl	800e954 <vTaskSwitchContext>
 800fbd4:	f04f 0000 	mov.w	r0, #0
 800fbd8:	f380 8811 	msr	BASEPRI, r0
 800fbdc:	bc09      	pop	{r0, r3}
 800fbde:	6819      	ldr	r1, [r3, #0]
 800fbe0:	6808      	ldr	r0, [r1, #0]
 800fbe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe6:	f01e 0f10 	tst.w	lr, #16
 800fbea:	bf08      	it	eq
 800fbec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fbf0:	f380 8809 	msr	PSP, r0
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	f3af 8000 	nop.w

0800fc00 <pxCurrentTCBConst>:
 800fc00:	2000185c 	.word	0x2000185c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc04:	bf00      	nop
 800fc06:	bf00      	nop

0800fc08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc12:	f383 8811 	msr	BASEPRI, r3
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	607b      	str	r3, [r7, #4]
}
 800fc20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc22:	f7fe fddd 	bl	800e7e0 <xTaskIncrementTick>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d003      	beq.n	800fc34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc2c:	4b06      	ldr	r3, [pc, #24]	@ (800fc48 <xPortSysTickHandler+0x40>)
 800fc2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	2300      	movs	r3, #0
 800fc36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	f383 8811 	msr	BASEPRI, r3
}
 800fc3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc40:	bf00      	nop
 800fc42:	3708      	adds	r7, #8
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	e000ed04 	.word	0xe000ed04

0800fc4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc50:	4b0b      	ldr	r3, [pc, #44]	@ (800fc80 <vPortSetupTimerInterrupt+0x34>)
 800fc52:	2200      	movs	r2, #0
 800fc54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc56:	4b0b      	ldr	r3, [pc, #44]	@ (800fc84 <vPortSetupTimerInterrupt+0x38>)
 800fc58:	2200      	movs	r2, #0
 800fc5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800fc88 <vPortSetupTimerInterrupt+0x3c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a0a      	ldr	r2, [pc, #40]	@ (800fc8c <vPortSetupTimerInterrupt+0x40>)
 800fc62:	fba2 2303 	umull	r2, r3, r2, r3
 800fc66:	099b      	lsrs	r3, r3, #6
 800fc68:	4a09      	ldr	r2, [pc, #36]	@ (800fc90 <vPortSetupTimerInterrupt+0x44>)
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc6e:	4b04      	ldr	r3, [pc, #16]	@ (800fc80 <vPortSetupTimerInterrupt+0x34>)
 800fc70:	2207      	movs	r2, #7
 800fc72:	601a      	str	r2, [r3, #0]
}
 800fc74:	bf00      	nop
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	e000e010 	.word	0xe000e010
 800fc84:	e000e018 	.word	0xe000e018
 800fc88:	20000154 	.word	0x20000154
 800fc8c:	10624dd3 	.word	0x10624dd3
 800fc90:	e000e014 	.word	0xe000e014

0800fc94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fca4 <vPortEnableVFP+0x10>
 800fc98:	6801      	ldr	r1, [r0, #0]
 800fc9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fc9e:	6001      	str	r1, [r0, #0]
 800fca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fca2:	bf00      	nop
 800fca4:	e000ed88 	.word	0xe000ed88

0800fca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fca8:	b480      	push	{r7}
 800fcaa:	b085      	sub	sp, #20
 800fcac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fcae:	f3ef 8305 	mrs	r3, IPSR
 800fcb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2b0f      	cmp	r3, #15
 800fcb8:	d915      	bls.n	800fce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fcba:	4a18      	ldr	r2, [pc, #96]	@ (800fd1c <vPortValidateInterruptPriority+0x74>)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fcc4:	4b16      	ldr	r3, [pc, #88]	@ (800fd20 <vPortValidateInterruptPriority+0x78>)
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	7afa      	ldrb	r2, [r7, #11]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d20b      	bcs.n	800fce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	607b      	str	r3, [r7, #4]
}
 800fce0:	bf00      	nop
 800fce2:	bf00      	nop
 800fce4:	e7fd      	b.n	800fce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fce6:	4b0f      	ldr	r3, [pc, #60]	@ (800fd24 <vPortValidateInterruptPriority+0x7c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fcee:	4b0e      	ldr	r3, [pc, #56]	@ (800fd28 <vPortValidateInterruptPriority+0x80>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d90b      	bls.n	800fd0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	603b      	str	r3, [r7, #0]
}
 800fd08:	bf00      	nop
 800fd0a:	bf00      	nop
 800fd0c:	e7fd      	b.n	800fd0a <vPortValidateInterruptPriority+0x62>
	}
 800fd0e:	bf00      	nop
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	e000e3f0 	.word	0xe000e3f0
 800fd20:	20001e88 	.word	0x20001e88
 800fd24:	e000ed0c 	.word	0xe000ed0c
 800fd28:	20001e8c 	.word	0x20001e8c

0800fd2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b08a      	sub	sp, #40	@ 0x28
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd34:	2300      	movs	r3, #0
 800fd36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fd38:	f7fe fb9c 	bl	800e474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fd3c:	4b5c      	ldr	r3, [pc, #368]	@ (800feb0 <pvPortMalloc+0x184>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d101      	bne.n	800fd48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fd44:	f000 f924 	bl	800ff90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd48:	4b5a      	ldr	r3, [pc, #360]	@ (800feb4 <pvPortMalloc+0x188>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4013      	ands	r3, r2
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f040 8095 	bne.w	800fe80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d01e      	beq.n	800fd9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fd5c:	2208      	movs	r2, #8
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4413      	add	r3, r2
 800fd62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f003 0307 	and.w	r3, r3, #7
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d015      	beq.n	800fd9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f023 0307 	bic.w	r3, r3, #7
 800fd74:	3308      	adds	r3, #8
 800fd76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f003 0307 	and.w	r3, r3, #7
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00b      	beq.n	800fd9a <pvPortMalloc+0x6e>
	__asm volatile
 800fd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	617b      	str	r3, [r7, #20]
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop
 800fd98:	e7fd      	b.n	800fd96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d06f      	beq.n	800fe80 <pvPortMalloc+0x154>
 800fda0:	4b45      	ldr	r3, [pc, #276]	@ (800feb8 <pvPortMalloc+0x18c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d86a      	bhi.n	800fe80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fdaa:	4b44      	ldr	r3, [pc, #272]	@ (800febc <pvPortMalloc+0x190>)
 800fdac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fdae:	4b43      	ldr	r3, [pc, #268]	@ (800febc <pvPortMalloc+0x190>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdb4:	e004      	b.n	800fdc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d903      	bls.n	800fdd2 <pvPortMalloc+0xa6>
 800fdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d1f1      	bne.n	800fdb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fdd2:	4b37      	ldr	r3, [pc, #220]	@ (800feb0 <pvPortMalloc+0x184>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d051      	beq.n	800fe80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fddc:	6a3b      	ldr	r3, [r7, #32]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2208      	movs	r2, #8
 800fde2:	4413      	add	r3, r2
 800fde4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	6a3b      	ldr	r3, [r7, #32]
 800fdec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf0:	685a      	ldr	r2, [r3, #4]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	1ad2      	subs	r2, r2, r3
 800fdf6:	2308      	movs	r3, #8
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d920      	bls.n	800fe40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fdfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	4413      	add	r3, r2
 800fe04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	f003 0307 	and.w	r3, r3, #7
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d00b      	beq.n	800fe28 <pvPortMalloc+0xfc>
	__asm volatile
 800fe10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe14:	f383 8811 	msr	BASEPRI, r3
 800fe18:	f3bf 8f6f 	isb	sy
 800fe1c:	f3bf 8f4f 	dsb	sy
 800fe20:	613b      	str	r3, [r7, #16]
}
 800fe22:	bf00      	nop
 800fe24:	bf00      	nop
 800fe26:	e7fd      	b.n	800fe24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	1ad2      	subs	r2, r2, r3
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fe3a:	69b8      	ldr	r0, [r7, #24]
 800fe3c:	f000 f90a 	bl	8010054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe40:	4b1d      	ldr	r3, [pc, #116]	@ (800feb8 <pvPortMalloc+0x18c>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	4a1b      	ldr	r2, [pc, #108]	@ (800feb8 <pvPortMalloc+0x18c>)
 800fe4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe4e:	4b1a      	ldr	r3, [pc, #104]	@ (800feb8 <pvPortMalloc+0x18c>)
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	4b1b      	ldr	r3, [pc, #108]	@ (800fec0 <pvPortMalloc+0x194>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d203      	bcs.n	800fe62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe5a:	4b17      	ldr	r3, [pc, #92]	@ (800feb8 <pvPortMalloc+0x18c>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4a18      	ldr	r2, [pc, #96]	@ (800fec0 <pvPortMalloc+0x194>)
 800fe60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe64:	685a      	ldr	r2, [r3, #4]
 800fe66:	4b13      	ldr	r3, [pc, #76]	@ (800feb4 <pvPortMalloc+0x188>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	431a      	orrs	r2, r3
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe72:	2200      	movs	r2, #0
 800fe74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fe76:	4b13      	ldr	r3, [pc, #76]	@ (800fec4 <pvPortMalloc+0x198>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	4a11      	ldr	r2, [pc, #68]	@ (800fec4 <pvPortMalloc+0x198>)
 800fe7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fe80:	f7fe fb06 	bl	800e490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	f003 0307 	and.w	r3, r3, #7
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d00b      	beq.n	800fea6 <pvPortMalloc+0x17a>
	__asm volatile
 800fe8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe92:	f383 8811 	msr	BASEPRI, r3
 800fe96:	f3bf 8f6f 	isb	sy
 800fe9a:	f3bf 8f4f 	dsb	sy
 800fe9e:	60fb      	str	r3, [r7, #12]
}
 800fea0:	bf00      	nop
 800fea2:	bf00      	nop
 800fea4:	e7fd      	b.n	800fea2 <pvPortMalloc+0x176>
	return pvReturn;
 800fea6:	69fb      	ldr	r3, [r7, #28]
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3728      	adds	r7, #40	@ 0x28
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	20005a98 	.word	0x20005a98
 800feb4:	20005aac 	.word	0x20005aac
 800feb8:	20005a9c 	.word	0x20005a9c
 800febc:	20005a90 	.word	0x20005a90
 800fec0:	20005aa0 	.word	0x20005aa0
 800fec4:	20005aa4 	.word	0x20005aa4

0800fec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b086      	sub	sp, #24
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d04f      	beq.n	800ff7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800feda:	2308      	movs	r3, #8
 800fedc:	425b      	negs	r3, r3
 800fede:	697a      	ldr	r2, [r7, #20]
 800fee0:	4413      	add	r3, r2
 800fee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	685a      	ldr	r2, [r3, #4]
 800feec:	4b25      	ldr	r3, [pc, #148]	@ (800ff84 <vPortFree+0xbc>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4013      	ands	r3, r2
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d10b      	bne.n	800ff0e <vPortFree+0x46>
	__asm volatile
 800fef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefa:	f383 8811 	msr	BASEPRI, r3
 800fefe:	f3bf 8f6f 	isb	sy
 800ff02:	f3bf 8f4f 	dsb	sy
 800ff06:	60fb      	str	r3, [r7, #12]
}
 800ff08:	bf00      	nop
 800ff0a:	bf00      	nop
 800ff0c:	e7fd      	b.n	800ff0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00b      	beq.n	800ff2e <vPortFree+0x66>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	60bb      	str	r3, [r7, #8]
}
 800ff28:	bf00      	nop
 800ff2a:	bf00      	nop
 800ff2c:	e7fd      	b.n	800ff2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	685a      	ldr	r2, [r3, #4]
 800ff32:	4b14      	ldr	r3, [pc, #80]	@ (800ff84 <vPortFree+0xbc>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4013      	ands	r3, r2
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01e      	beq.n	800ff7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d11a      	bne.n	800ff7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	4b0e      	ldr	r3, [pc, #56]	@ (800ff84 <vPortFree+0xbc>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	43db      	mvns	r3, r3
 800ff4e:	401a      	ands	r2, r3
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff54:	f7fe fa8e 	bl	800e474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff88 <vPortFree+0xc0>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4413      	add	r3, r2
 800ff62:	4a09      	ldr	r2, [pc, #36]	@ (800ff88 <vPortFree+0xc0>)
 800ff64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff66:	6938      	ldr	r0, [r7, #16]
 800ff68:	f000 f874 	bl	8010054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ff6c:	4b07      	ldr	r3, [pc, #28]	@ (800ff8c <vPortFree+0xc4>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	3301      	adds	r3, #1
 800ff72:	4a06      	ldr	r2, [pc, #24]	@ (800ff8c <vPortFree+0xc4>)
 800ff74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ff76:	f7fe fa8b 	bl	800e490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff7a:	bf00      	nop
 800ff7c:	3718      	adds	r7, #24
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	20005aac 	.word	0x20005aac
 800ff88:	20005a9c 	.word	0x20005a9c
 800ff8c:	20005aa8 	.word	0x20005aa8

0800ff90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff90:	b480      	push	{r7}
 800ff92:	b085      	sub	sp, #20
 800ff94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ff9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff9c:	4b27      	ldr	r3, [pc, #156]	@ (801003c <prvHeapInit+0xac>)
 800ff9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f003 0307 	and.w	r3, r3, #7
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00c      	beq.n	800ffc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	3307      	adds	r3, #7
 800ffae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f023 0307 	bic.w	r3, r3, #7
 800ffb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ffb8:	68ba      	ldr	r2, [r7, #8]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	4a1f      	ldr	r2, [pc, #124]	@ (801003c <prvHeapInit+0xac>)
 800ffc0:	4413      	add	r3, r2
 800ffc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ffc8:	4a1d      	ldr	r2, [pc, #116]	@ (8010040 <prvHeapInit+0xb0>)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ffce:	4b1c      	ldr	r3, [pc, #112]	@ (8010040 <prvHeapInit+0xb0>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	68ba      	ldr	r2, [r7, #8]
 800ffd8:	4413      	add	r3, r2
 800ffda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ffdc:	2208      	movs	r2, #8
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	1a9b      	subs	r3, r3, r2
 800ffe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f023 0307 	bic.w	r3, r3, #7
 800ffea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	4a15      	ldr	r2, [pc, #84]	@ (8010044 <prvHeapInit+0xb4>)
 800fff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fff2:	4b14      	ldr	r3, [pc, #80]	@ (8010044 <prvHeapInit+0xb4>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2200      	movs	r2, #0
 800fff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fffa:	4b12      	ldr	r3, [pc, #72]	@ (8010044 <prvHeapInit+0xb4>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2200      	movs	r2, #0
 8010000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	1ad2      	subs	r2, r2, r3
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010010:	4b0c      	ldr	r3, [pc, #48]	@ (8010044 <prvHeapInit+0xb4>)
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	4a0a      	ldr	r2, [pc, #40]	@ (8010048 <prvHeapInit+0xb8>)
 801001e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	4a09      	ldr	r2, [pc, #36]	@ (801004c <prvHeapInit+0xbc>)
 8010026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010028:	4b09      	ldr	r3, [pc, #36]	@ (8010050 <prvHeapInit+0xc0>)
 801002a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801002e:	601a      	str	r2, [r3, #0]
}
 8010030:	bf00      	nop
 8010032:	3714      	adds	r7, #20
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	20001e90 	.word	0x20001e90
 8010040:	20005a90 	.word	0x20005a90
 8010044:	20005a98 	.word	0x20005a98
 8010048:	20005aa0 	.word	0x20005aa0
 801004c:	20005a9c 	.word	0x20005a9c
 8010050:	20005aac 	.word	0x20005aac

08010054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801005c:	4b28      	ldr	r3, [pc, #160]	@ (8010100 <prvInsertBlockIntoFreeList+0xac>)
 801005e:	60fb      	str	r3, [r7, #12]
 8010060:	e002      	b.n	8010068 <prvInsertBlockIntoFreeList+0x14>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	60fb      	str	r3, [r7, #12]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	429a      	cmp	r2, r3
 8010070:	d8f7      	bhi.n	8010062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	68ba      	ldr	r2, [r7, #8]
 801007c:	4413      	add	r3, r2
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	429a      	cmp	r2, r3
 8010082:	d108      	bne.n	8010096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	685a      	ldr	r2, [r3, #4]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	441a      	add	r2, r3
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	68ba      	ldr	r2, [r7, #8]
 80100a0:	441a      	add	r2, r3
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d118      	bne.n	80100dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	4b15      	ldr	r3, [pc, #84]	@ (8010104 <prvInsertBlockIntoFreeList+0xb0>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d00d      	beq.n	80100d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	685a      	ldr	r2, [r3, #4]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	441a      	add	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	e008      	b.n	80100e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80100d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010104 <prvInsertBlockIntoFreeList+0xb0>)
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	601a      	str	r2, [r3, #0]
 80100da:	e003      	b.n	80100e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d002      	beq.n	80100f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100f2:	bf00      	nop
 80100f4:	3714      	adds	r7, #20
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop
 8010100:	20005a90 	.word	0x20005a90
 8010104:	20005a98 	.word	0x20005a98

08010108 <__cvt>:
 8010108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801010c:	ec57 6b10 	vmov	r6, r7, d0
 8010110:	2f00      	cmp	r7, #0
 8010112:	460c      	mov	r4, r1
 8010114:	4619      	mov	r1, r3
 8010116:	463b      	mov	r3, r7
 8010118:	bfbb      	ittet	lt
 801011a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801011e:	461f      	movlt	r7, r3
 8010120:	2300      	movge	r3, #0
 8010122:	232d      	movlt	r3, #45	@ 0x2d
 8010124:	700b      	strb	r3, [r1, #0]
 8010126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010128:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801012c:	4691      	mov	r9, r2
 801012e:	f023 0820 	bic.w	r8, r3, #32
 8010132:	bfbc      	itt	lt
 8010134:	4632      	movlt	r2, r6
 8010136:	4616      	movlt	r6, r2
 8010138:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801013c:	d005      	beq.n	801014a <__cvt+0x42>
 801013e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010142:	d100      	bne.n	8010146 <__cvt+0x3e>
 8010144:	3401      	adds	r4, #1
 8010146:	2102      	movs	r1, #2
 8010148:	e000      	b.n	801014c <__cvt+0x44>
 801014a:	2103      	movs	r1, #3
 801014c:	ab03      	add	r3, sp, #12
 801014e:	9301      	str	r3, [sp, #4]
 8010150:	ab02      	add	r3, sp, #8
 8010152:	9300      	str	r3, [sp, #0]
 8010154:	ec47 6b10 	vmov	d0, r6, r7
 8010158:	4653      	mov	r3, sl
 801015a:	4622      	mov	r2, r4
 801015c:	f000 fe34 	bl	8010dc8 <_dtoa_r>
 8010160:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010164:	4605      	mov	r5, r0
 8010166:	d119      	bne.n	801019c <__cvt+0x94>
 8010168:	f019 0f01 	tst.w	r9, #1
 801016c:	d00e      	beq.n	801018c <__cvt+0x84>
 801016e:	eb00 0904 	add.w	r9, r0, r4
 8010172:	2200      	movs	r2, #0
 8010174:	2300      	movs	r3, #0
 8010176:	4630      	mov	r0, r6
 8010178:	4639      	mov	r1, r7
 801017a:	f7f0 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 801017e:	b108      	cbz	r0, 8010184 <__cvt+0x7c>
 8010180:	f8cd 900c 	str.w	r9, [sp, #12]
 8010184:	2230      	movs	r2, #48	@ 0x30
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	454b      	cmp	r3, r9
 801018a:	d31e      	bcc.n	80101ca <__cvt+0xc2>
 801018c:	9b03      	ldr	r3, [sp, #12]
 801018e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010190:	1b5b      	subs	r3, r3, r5
 8010192:	4628      	mov	r0, r5
 8010194:	6013      	str	r3, [r2, #0]
 8010196:	b004      	add	sp, #16
 8010198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801019c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80101a0:	eb00 0904 	add.w	r9, r0, r4
 80101a4:	d1e5      	bne.n	8010172 <__cvt+0x6a>
 80101a6:	7803      	ldrb	r3, [r0, #0]
 80101a8:	2b30      	cmp	r3, #48	@ 0x30
 80101aa:	d10a      	bne.n	80101c2 <__cvt+0xba>
 80101ac:	2200      	movs	r2, #0
 80101ae:	2300      	movs	r3, #0
 80101b0:	4630      	mov	r0, r6
 80101b2:	4639      	mov	r1, r7
 80101b4:	f7f0 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80101b8:	b918      	cbnz	r0, 80101c2 <__cvt+0xba>
 80101ba:	f1c4 0401 	rsb	r4, r4, #1
 80101be:	f8ca 4000 	str.w	r4, [sl]
 80101c2:	f8da 3000 	ldr.w	r3, [sl]
 80101c6:	4499      	add	r9, r3
 80101c8:	e7d3      	b.n	8010172 <__cvt+0x6a>
 80101ca:	1c59      	adds	r1, r3, #1
 80101cc:	9103      	str	r1, [sp, #12]
 80101ce:	701a      	strb	r2, [r3, #0]
 80101d0:	e7d9      	b.n	8010186 <__cvt+0x7e>

080101d2 <__exponent>:
 80101d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101d4:	2900      	cmp	r1, #0
 80101d6:	bfba      	itte	lt
 80101d8:	4249      	neglt	r1, r1
 80101da:	232d      	movlt	r3, #45	@ 0x2d
 80101dc:	232b      	movge	r3, #43	@ 0x2b
 80101de:	2909      	cmp	r1, #9
 80101e0:	7002      	strb	r2, [r0, #0]
 80101e2:	7043      	strb	r3, [r0, #1]
 80101e4:	dd29      	ble.n	801023a <__exponent+0x68>
 80101e6:	f10d 0307 	add.w	r3, sp, #7
 80101ea:	461d      	mov	r5, r3
 80101ec:	270a      	movs	r7, #10
 80101ee:	461a      	mov	r2, r3
 80101f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80101f4:	fb07 1416 	mls	r4, r7, r6, r1
 80101f8:	3430      	adds	r4, #48	@ 0x30
 80101fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80101fe:	460c      	mov	r4, r1
 8010200:	2c63      	cmp	r4, #99	@ 0x63
 8010202:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010206:	4631      	mov	r1, r6
 8010208:	dcf1      	bgt.n	80101ee <__exponent+0x1c>
 801020a:	3130      	adds	r1, #48	@ 0x30
 801020c:	1e94      	subs	r4, r2, #2
 801020e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010212:	1c41      	adds	r1, r0, #1
 8010214:	4623      	mov	r3, r4
 8010216:	42ab      	cmp	r3, r5
 8010218:	d30a      	bcc.n	8010230 <__exponent+0x5e>
 801021a:	f10d 0309 	add.w	r3, sp, #9
 801021e:	1a9b      	subs	r3, r3, r2
 8010220:	42ac      	cmp	r4, r5
 8010222:	bf88      	it	hi
 8010224:	2300      	movhi	r3, #0
 8010226:	3302      	adds	r3, #2
 8010228:	4403      	add	r3, r0
 801022a:	1a18      	subs	r0, r3, r0
 801022c:	b003      	add	sp, #12
 801022e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010230:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010234:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010238:	e7ed      	b.n	8010216 <__exponent+0x44>
 801023a:	2330      	movs	r3, #48	@ 0x30
 801023c:	3130      	adds	r1, #48	@ 0x30
 801023e:	7083      	strb	r3, [r0, #2]
 8010240:	70c1      	strb	r1, [r0, #3]
 8010242:	1d03      	adds	r3, r0, #4
 8010244:	e7f1      	b.n	801022a <__exponent+0x58>
	...

08010248 <_printf_float>:
 8010248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	b08d      	sub	sp, #52	@ 0x34
 801024e:	460c      	mov	r4, r1
 8010250:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010254:	4616      	mov	r6, r2
 8010256:	461f      	mov	r7, r3
 8010258:	4605      	mov	r5, r0
 801025a:	f000 fc97 	bl	8010b8c <_localeconv_r>
 801025e:	6803      	ldr	r3, [r0, #0]
 8010260:	9304      	str	r3, [sp, #16]
 8010262:	4618      	mov	r0, r3
 8010264:	f7f0 f804 	bl	8000270 <strlen>
 8010268:	2300      	movs	r3, #0
 801026a:	930a      	str	r3, [sp, #40]	@ 0x28
 801026c:	f8d8 3000 	ldr.w	r3, [r8]
 8010270:	9005      	str	r0, [sp, #20]
 8010272:	3307      	adds	r3, #7
 8010274:	f023 0307 	bic.w	r3, r3, #7
 8010278:	f103 0208 	add.w	r2, r3, #8
 801027c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010280:	f8d4 b000 	ldr.w	fp, [r4]
 8010284:	f8c8 2000 	str.w	r2, [r8]
 8010288:	e9d3 8900 	ldrd	r8, r9, [r3]
 801028c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010290:	9307      	str	r3, [sp, #28]
 8010292:	f8cd 8018 	str.w	r8, [sp, #24]
 8010296:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801029a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801029e:	4b9c      	ldr	r3, [pc, #624]	@ (8010510 <_printf_float+0x2c8>)
 80102a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102a4:	f7f0 fc42 	bl	8000b2c <__aeabi_dcmpun>
 80102a8:	bb70      	cbnz	r0, 8010308 <_printf_float+0xc0>
 80102aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102ae:	4b98      	ldr	r3, [pc, #608]	@ (8010510 <_printf_float+0x2c8>)
 80102b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102b4:	f7f0 fc1c 	bl	8000af0 <__aeabi_dcmple>
 80102b8:	bb30      	cbnz	r0, 8010308 <_printf_float+0xc0>
 80102ba:	2200      	movs	r2, #0
 80102bc:	2300      	movs	r3, #0
 80102be:	4640      	mov	r0, r8
 80102c0:	4649      	mov	r1, r9
 80102c2:	f7f0 fc0b 	bl	8000adc <__aeabi_dcmplt>
 80102c6:	b110      	cbz	r0, 80102ce <_printf_float+0x86>
 80102c8:	232d      	movs	r3, #45	@ 0x2d
 80102ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102ce:	4a91      	ldr	r2, [pc, #580]	@ (8010514 <_printf_float+0x2cc>)
 80102d0:	4b91      	ldr	r3, [pc, #580]	@ (8010518 <_printf_float+0x2d0>)
 80102d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80102d6:	bf94      	ite	ls
 80102d8:	4690      	movls	r8, r2
 80102da:	4698      	movhi	r8, r3
 80102dc:	2303      	movs	r3, #3
 80102de:	6123      	str	r3, [r4, #16]
 80102e0:	f02b 0304 	bic.w	r3, fp, #4
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	f04f 0900 	mov.w	r9, #0
 80102ea:	9700      	str	r7, [sp, #0]
 80102ec:	4633      	mov	r3, r6
 80102ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80102f0:	4621      	mov	r1, r4
 80102f2:	4628      	mov	r0, r5
 80102f4:	f000 f9d2 	bl	801069c <_printf_common>
 80102f8:	3001      	adds	r0, #1
 80102fa:	f040 808d 	bne.w	8010418 <_printf_float+0x1d0>
 80102fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010302:	b00d      	add	sp, #52	@ 0x34
 8010304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010308:	4642      	mov	r2, r8
 801030a:	464b      	mov	r3, r9
 801030c:	4640      	mov	r0, r8
 801030e:	4649      	mov	r1, r9
 8010310:	f7f0 fc0c 	bl	8000b2c <__aeabi_dcmpun>
 8010314:	b140      	cbz	r0, 8010328 <_printf_float+0xe0>
 8010316:	464b      	mov	r3, r9
 8010318:	2b00      	cmp	r3, #0
 801031a:	bfbc      	itt	lt
 801031c:	232d      	movlt	r3, #45	@ 0x2d
 801031e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010322:	4a7e      	ldr	r2, [pc, #504]	@ (801051c <_printf_float+0x2d4>)
 8010324:	4b7e      	ldr	r3, [pc, #504]	@ (8010520 <_printf_float+0x2d8>)
 8010326:	e7d4      	b.n	80102d2 <_printf_float+0x8a>
 8010328:	6863      	ldr	r3, [r4, #4]
 801032a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801032e:	9206      	str	r2, [sp, #24]
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	d13b      	bne.n	80103ac <_printf_float+0x164>
 8010334:	2306      	movs	r3, #6
 8010336:	6063      	str	r3, [r4, #4]
 8010338:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801033c:	2300      	movs	r3, #0
 801033e:	6022      	str	r2, [r4, #0]
 8010340:	9303      	str	r3, [sp, #12]
 8010342:	ab0a      	add	r3, sp, #40	@ 0x28
 8010344:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010348:	ab09      	add	r3, sp, #36	@ 0x24
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	6861      	ldr	r1, [r4, #4]
 801034e:	ec49 8b10 	vmov	d0, r8, r9
 8010352:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010356:	4628      	mov	r0, r5
 8010358:	f7ff fed6 	bl	8010108 <__cvt>
 801035c:	9b06      	ldr	r3, [sp, #24]
 801035e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010360:	2b47      	cmp	r3, #71	@ 0x47
 8010362:	4680      	mov	r8, r0
 8010364:	d129      	bne.n	80103ba <_printf_float+0x172>
 8010366:	1cc8      	adds	r0, r1, #3
 8010368:	db02      	blt.n	8010370 <_printf_float+0x128>
 801036a:	6863      	ldr	r3, [r4, #4]
 801036c:	4299      	cmp	r1, r3
 801036e:	dd41      	ble.n	80103f4 <_printf_float+0x1ac>
 8010370:	f1aa 0a02 	sub.w	sl, sl, #2
 8010374:	fa5f fa8a 	uxtb.w	sl, sl
 8010378:	3901      	subs	r1, #1
 801037a:	4652      	mov	r2, sl
 801037c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010380:	9109      	str	r1, [sp, #36]	@ 0x24
 8010382:	f7ff ff26 	bl	80101d2 <__exponent>
 8010386:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010388:	1813      	adds	r3, r2, r0
 801038a:	2a01      	cmp	r2, #1
 801038c:	4681      	mov	r9, r0
 801038e:	6123      	str	r3, [r4, #16]
 8010390:	dc02      	bgt.n	8010398 <_printf_float+0x150>
 8010392:	6822      	ldr	r2, [r4, #0]
 8010394:	07d2      	lsls	r2, r2, #31
 8010396:	d501      	bpl.n	801039c <_printf_float+0x154>
 8010398:	3301      	adds	r3, #1
 801039a:	6123      	str	r3, [r4, #16]
 801039c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d0a2      	beq.n	80102ea <_printf_float+0xa2>
 80103a4:	232d      	movs	r3, #45	@ 0x2d
 80103a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103aa:	e79e      	b.n	80102ea <_printf_float+0xa2>
 80103ac:	9a06      	ldr	r2, [sp, #24]
 80103ae:	2a47      	cmp	r2, #71	@ 0x47
 80103b0:	d1c2      	bne.n	8010338 <_printf_float+0xf0>
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1c0      	bne.n	8010338 <_printf_float+0xf0>
 80103b6:	2301      	movs	r3, #1
 80103b8:	e7bd      	b.n	8010336 <_printf_float+0xee>
 80103ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80103be:	d9db      	bls.n	8010378 <_printf_float+0x130>
 80103c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80103c4:	d118      	bne.n	80103f8 <_printf_float+0x1b0>
 80103c6:	2900      	cmp	r1, #0
 80103c8:	6863      	ldr	r3, [r4, #4]
 80103ca:	dd0b      	ble.n	80103e4 <_printf_float+0x19c>
 80103cc:	6121      	str	r1, [r4, #16]
 80103ce:	b913      	cbnz	r3, 80103d6 <_printf_float+0x18e>
 80103d0:	6822      	ldr	r2, [r4, #0]
 80103d2:	07d0      	lsls	r0, r2, #31
 80103d4:	d502      	bpl.n	80103dc <_printf_float+0x194>
 80103d6:	3301      	adds	r3, #1
 80103d8:	440b      	add	r3, r1
 80103da:	6123      	str	r3, [r4, #16]
 80103dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80103de:	f04f 0900 	mov.w	r9, #0
 80103e2:	e7db      	b.n	801039c <_printf_float+0x154>
 80103e4:	b913      	cbnz	r3, 80103ec <_printf_float+0x1a4>
 80103e6:	6822      	ldr	r2, [r4, #0]
 80103e8:	07d2      	lsls	r2, r2, #31
 80103ea:	d501      	bpl.n	80103f0 <_printf_float+0x1a8>
 80103ec:	3302      	adds	r3, #2
 80103ee:	e7f4      	b.n	80103da <_printf_float+0x192>
 80103f0:	2301      	movs	r3, #1
 80103f2:	e7f2      	b.n	80103da <_printf_float+0x192>
 80103f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80103f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103fa:	4299      	cmp	r1, r3
 80103fc:	db05      	blt.n	801040a <_printf_float+0x1c2>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	6121      	str	r1, [r4, #16]
 8010402:	07d8      	lsls	r0, r3, #31
 8010404:	d5ea      	bpl.n	80103dc <_printf_float+0x194>
 8010406:	1c4b      	adds	r3, r1, #1
 8010408:	e7e7      	b.n	80103da <_printf_float+0x192>
 801040a:	2900      	cmp	r1, #0
 801040c:	bfd4      	ite	le
 801040e:	f1c1 0202 	rsble	r2, r1, #2
 8010412:	2201      	movgt	r2, #1
 8010414:	4413      	add	r3, r2
 8010416:	e7e0      	b.n	80103da <_printf_float+0x192>
 8010418:	6823      	ldr	r3, [r4, #0]
 801041a:	055a      	lsls	r2, r3, #21
 801041c:	d407      	bmi.n	801042e <_printf_float+0x1e6>
 801041e:	6923      	ldr	r3, [r4, #16]
 8010420:	4642      	mov	r2, r8
 8010422:	4631      	mov	r1, r6
 8010424:	4628      	mov	r0, r5
 8010426:	47b8      	blx	r7
 8010428:	3001      	adds	r0, #1
 801042a:	d12b      	bne.n	8010484 <_printf_float+0x23c>
 801042c:	e767      	b.n	80102fe <_printf_float+0xb6>
 801042e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010432:	f240 80dd 	bls.w	80105f0 <_printf_float+0x3a8>
 8010436:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801043a:	2200      	movs	r2, #0
 801043c:	2300      	movs	r3, #0
 801043e:	f7f0 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8010442:	2800      	cmp	r0, #0
 8010444:	d033      	beq.n	80104ae <_printf_float+0x266>
 8010446:	4a37      	ldr	r2, [pc, #220]	@ (8010524 <_printf_float+0x2dc>)
 8010448:	2301      	movs	r3, #1
 801044a:	4631      	mov	r1, r6
 801044c:	4628      	mov	r0, r5
 801044e:	47b8      	blx	r7
 8010450:	3001      	adds	r0, #1
 8010452:	f43f af54 	beq.w	80102fe <_printf_float+0xb6>
 8010456:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801045a:	4543      	cmp	r3, r8
 801045c:	db02      	blt.n	8010464 <_printf_float+0x21c>
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	07d8      	lsls	r0, r3, #31
 8010462:	d50f      	bpl.n	8010484 <_printf_float+0x23c>
 8010464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010468:	4631      	mov	r1, r6
 801046a:	4628      	mov	r0, r5
 801046c:	47b8      	blx	r7
 801046e:	3001      	adds	r0, #1
 8010470:	f43f af45 	beq.w	80102fe <_printf_float+0xb6>
 8010474:	f04f 0900 	mov.w	r9, #0
 8010478:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801047c:	f104 0a1a 	add.w	sl, r4, #26
 8010480:	45c8      	cmp	r8, r9
 8010482:	dc09      	bgt.n	8010498 <_printf_float+0x250>
 8010484:	6823      	ldr	r3, [r4, #0]
 8010486:	079b      	lsls	r3, r3, #30
 8010488:	f100 8103 	bmi.w	8010692 <_printf_float+0x44a>
 801048c:	68e0      	ldr	r0, [r4, #12]
 801048e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010490:	4298      	cmp	r0, r3
 8010492:	bfb8      	it	lt
 8010494:	4618      	movlt	r0, r3
 8010496:	e734      	b.n	8010302 <_printf_float+0xba>
 8010498:	2301      	movs	r3, #1
 801049a:	4652      	mov	r2, sl
 801049c:	4631      	mov	r1, r6
 801049e:	4628      	mov	r0, r5
 80104a0:	47b8      	blx	r7
 80104a2:	3001      	adds	r0, #1
 80104a4:	f43f af2b 	beq.w	80102fe <_printf_float+0xb6>
 80104a8:	f109 0901 	add.w	r9, r9, #1
 80104ac:	e7e8      	b.n	8010480 <_printf_float+0x238>
 80104ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	dc39      	bgt.n	8010528 <_printf_float+0x2e0>
 80104b4:	4a1b      	ldr	r2, [pc, #108]	@ (8010524 <_printf_float+0x2dc>)
 80104b6:	2301      	movs	r3, #1
 80104b8:	4631      	mov	r1, r6
 80104ba:	4628      	mov	r0, r5
 80104bc:	47b8      	blx	r7
 80104be:	3001      	adds	r0, #1
 80104c0:	f43f af1d 	beq.w	80102fe <_printf_float+0xb6>
 80104c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80104c8:	ea59 0303 	orrs.w	r3, r9, r3
 80104cc:	d102      	bne.n	80104d4 <_printf_float+0x28c>
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	07d9      	lsls	r1, r3, #31
 80104d2:	d5d7      	bpl.n	8010484 <_printf_float+0x23c>
 80104d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104d8:	4631      	mov	r1, r6
 80104da:	4628      	mov	r0, r5
 80104dc:	47b8      	blx	r7
 80104de:	3001      	adds	r0, #1
 80104e0:	f43f af0d 	beq.w	80102fe <_printf_float+0xb6>
 80104e4:	f04f 0a00 	mov.w	sl, #0
 80104e8:	f104 0b1a 	add.w	fp, r4, #26
 80104ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ee:	425b      	negs	r3, r3
 80104f0:	4553      	cmp	r3, sl
 80104f2:	dc01      	bgt.n	80104f8 <_printf_float+0x2b0>
 80104f4:	464b      	mov	r3, r9
 80104f6:	e793      	b.n	8010420 <_printf_float+0x1d8>
 80104f8:	2301      	movs	r3, #1
 80104fa:	465a      	mov	r2, fp
 80104fc:	4631      	mov	r1, r6
 80104fe:	4628      	mov	r0, r5
 8010500:	47b8      	blx	r7
 8010502:	3001      	adds	r0, #1
 8010504:	f43f aefb 	beq.w	80102fe <_printf_float+0xb6>
 8010508:	f10a 0a01 	add.w	sl, sl, #1
 801050c:	e7ee      	b.n	80104ec <_printf_float+0x2a4>
 801050e:	bf00      	nop
 8010510:	7fefffff 	.word	0x7fefffff
 8010514:	08014238 	.word	0x08014238
 8010518:	0801423c 	.word	0x0801423c
 801051c:	08014240 	.word	0x08014240
 8010520:	08014244 	.word	0x08014244
 8010524:	08014248 	.word	0x08014248
 8010528:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801052a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801052e:	4553      	cmp	r3, sl
 8010530:	bfa8      	it	ge
 8010532:	4653      	movge	r3, sl
 8010534:	2b00      	cmp	r3, #0
 8010536:	4699      	mov	r9, r3
 8010538:	dc36      	bgt.n	80105a8 <_printf_float+0x360>
 801053a:	f04f 0b00 	mov.w	fp, #0
 801053e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010542:	f104 021a 	add.w	r2, r4, #26
 8010546:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010548:	9306      	str	r3, [sp, #24]
 801054a:	eba3 0309 	sub.w	r3, r3, r9
 801054e:	455b      	cmp	r3, fp
 8010550:	dc31      	bgt.n	80105b6 <_printf_float+0x36e>
 8010552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010554:	459a      	cmp	sl, r3
 8010556:	dc3a      	bgt.n	80105ce <_printf_float+0x386>
 8010558:	6823      	ldr	r3, [r4, #0]
 801055a:	07da      	lsls	r2, r3, #31
 801055c:	d437      	bmi.n	80105ce <_printf_float+0x386>
 801055e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010560:	ebaa 0903 	sub.w	r9, sl, r3
 8010564:	9b06      	ldr	r3, [sp, #24]
 8010566:	ebaa 0303 	sub.w	r3, sl, r3
 801056a:	4599      	cmp	r9, r3
 801056c:	bfa8      	it	ge
 801056e:	4699      	movge	r9, r3
 8010570:	f1b9 0f00 	cmp.w	r9, #0
 8010574:	dc33      	bgt.n	80105de <_printf_float+0x396>
 8010576:	f04f 0800 	mov.w	r8, #0
 801057a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801057e:	f104 0b1a 	add.w	fp, r4, #26
 8010582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010584:	ebaa 0303 	sub.w	r3, sl, r3
 8010588:	eba3 0309 	sub.w	r3, r3, r9
 801058c:	4543      	cmp	r3, r8
 801058e:	f77f af79 	ble.w	8010484 <_printf_float+0x23c>
 8010592:	2301      	movs	r3, #1
 8010594:	465a      	mov	r2, fp
 8010596:	4631      	mov	r1, r6
 8010598:	4628      	mov	r0, r5
 801059a:	47b8      	blx	r7
 801059c:	3001      	adds	r0, #1
 801059e:	f43f aeae 	beq.w	80102fe <_printf_float+0xb6>
 80105a2:	f108 0801 	add.w	r8, r8, #1
 80105a6:	e7ec      	b.n	8010582 <_printf_float+0x33a>
 80105a8:	4642      	mov	r2, r8
 80105aa:	4631      	mov	r1, r6
 80105ac:	4628      	mov	r0, r5
 80105ae:	47b8      	blx	r7
 80105b0:	3001      	adds	r0, #1
 80105b2:	d1c2      	bne.n	801053a <_printf_float+0x2f2>
 80105b4:	e6a3      	b.n	80102fe <_printf_float+0xb6>
 80105b6:	2301      	movs	r3, #1
 80105b8:	4631      	mov	r1, r6
 80105ba:	4628      	mov	r0, r5
 80105bc:	9206      	str	r2, [sp, #24]
 80105be:	47b8      	blx	r7
 80105c0:	3001      	adds	r0, #1
 80105c2:	f43f ae9c 	beq.w	80102fe <_printf_float+0xb6>
 80105c6:	9a06      	ldr	r2, [sp, #24]
 80105c8:	f10b 0b01 	add.w	fp, fp, #1
 80105cc:	e7bb      	b.n	8010546 <_printf_float+0x2fe>
 80105ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80105d2:	4631      	mov	r1, r6
 80105d4:	4628      	mov	r0, r5
 80105d6:	47b8      	blx	r7
 80105d8:	3001      	adds	r0, #1
 80105da:	d1c0      	bne.n	801055e <_printf_float+0x316>
 80105dc:	e68f      	b.n	80102fe <_printf_float+0xb6>
 80105de:	9a06      	ldr	r2, [sp, #24]
 80105e0:	464b      	mov	r3, r9
 80105e2:	4442      	add	r2, r8
 80105e4:	4631      	mov	r1, r6
 80105e6:	4628      	mov	r0, r5
 80105e8:	47b8      	blx	r7
 80105ea:	3001      	adds	r0, #1
 80105ec:	d1c3      	bne.n	8010576 <_printf_float+0x32e>
 80105ee:	e686      	b.n	80102fe <_printf_float+0xb6>
 80105f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80105f4:	f1ba 0f01 	cmp.w	sl, #1
 80105f8:	dc01      	bgt.n	80105fe <_printf_float+0x3b6>
 80105fa:	07db      	lsls	r3, r3, #31
 80105fc:	d536      	bpl.n	801066c <_printf_float+0x424>
 80105fe:	2301      	movs	r3, #1
 8010600:	4642      	mov	r2, r8
 8010602:	4631      	mov	r1, r6
 8010604:	4628      	mov	r0, r5
 8010606:	47b8      	blx	r7
 8010608:	3001      	adds	r0, #1
 801060a:	f43f ae78 	beq.w	80102fe <_printf_float+0xb6>
 801060e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010612:	4631      	mov	r1, r6
 8010614:	4628      	mov	r0, r5
 8010616:	47b8      	blx	r7
 8010618:	3001      	adds	r0, #1
 801061a:	f43f ae70 	beq.w	80102fe <_printf_float+0xb6>
 801061e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010622:	2200      	movs	r2, #0
 8010624:	2300      	movs	r3, #0
 8010626:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801062a:	f7f0 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801062e:	b9c0      	cbnz	r0, 8010662 <_printf_float+0x41a>
 8010630:	4653      	mov	r3, sl
 8010632:	f108 0201 	add.w	r2, r8, #1
 8010636:	4631      	mov	r1, r6
 8010638:	4628      	mov	r0, r5
 801063a:	47b8      	blx	r7
 801063c:	3001      	adds	r0, #1
 801063e:	d10c      	bne.n	801065a <_printf_float+0x412>
 8010640:	e65d      	b.n	80102fe <_printf_float+0xb6>
 8010642:	2301      	movs	r3, #1
 8010644:	465a      	mov	r2, fp
 8010646:	4631      	mov	r1, r6
 8010648:	4628      	mov	r0, r5
 801064a:	47b8      	blx	r7
 801064c:	3001      	adds	r0, #1
 801064e:	f43f ae56 	beq.w	80102fe <_printf_float+0xb6>
 8010652:	f108 0801 	add.w	r8, r8, #1
 8010656:	45d0      	cmp	r8, sl
 8010658:	dbf3      	blt.n	8010642 <_printf_float+0x3fa>
 801065a:	464b      	mov	r3, r9
 801065c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010660:	e6df      	b.n	8010422 <_printf_float+0x1da>
 8010662:	f04f 0800 	mov.w	r8, #0
 8010666:	f104 0b1a 	add.w	fp, r4, #26
 801066a:	e7f4      	b.n	8010656 <_printf_float+0x40e>
 801066c:	2301      	movs	r3, #1
 801066e:	4642      	mov	r2, r8
 8010670:	e7e1      	b.n	8010636 <_printf_float+0x3ee>
 8010672:	2301      	movs	r3, #1
 8010674:	464a      	mov	r2, r9
 8010676:	4631      	mov	r1, r6
 8010678:	4628      	mov	r0, r5
 801067a:	47b8      	blx	r7
 801067c:	3001      	adds	r0, #1
 801067e:	f43f ae3e 	beq.w	80102fe <_printf_float+0xb6>
 8010682:	f108 0801 	add.w	r8, r8, #1
 8010686:	68e3      	ldr	r3, [r4, #12]
 8010688:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801068a:	1a5b      	subs	r3, r3, r1
 801068c:	4543      	cmp	r3, r8
 801068e:	dcf0      	bgt.n	8010672 <_printf_float+0x42a>
 8010690:	e6fc      	b.n	801048c <_printf_float+0x244>
 8010692:	f04f 0800 	mov.w	r8, #0
 8010696:	f104 0919 	add.w	r9, r4, #25
 801069a:	e7f4      	b.n	8010686 <_printf_float+0x43e>

0801069c <_printf_common>:
 801069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106a0:	4616      	mov	r6, r2
 80106a2:	4698      	mov	r8, r3
 80106a4:	688a      	ldr	r2, [r1, #8]
 80106a6:	690b      	ldr	r3, [r1, #16]
 80106a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106ac:	4293      	cmp	r3, r2
 80106ae:	bfb8      	it	lt
 80106b0:	4613      	movlt	r3, r2
 80106b2:	6033      	str	r3, [r6, #0]
 80106b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80106b8:	4607      	mov	r7, r0
 80106ba:	460c      	mov	r4, r1
 80106bc:	b10a      	cbz	r2, 80106c2 <_printf_common+0x26>
 80106be:	3301      	adds	r3, #1
 80106c0:	6033      	str	r3, [r6, #0]
 80106c2:	6823      	ldr	r3, [r4, #0]
 80106c4:	0699      	lsls	r1, r3, #26
 80106c6:	bf42      	ittt	mi
 80106c8:	6833      	ldrmi	r3, [r6, #0]
 80106ca:	3302      	addmi	r3, #2
 80106cc:	6033      	strmi	r3, [r6, #0]
 80106ce:	6825      	ldr	r5, [r4, #0]
 80106d0:	f015 0506 	ands.w	r5, r5, #6
 80106d4:	d106      	bne.n	80106e4 <_printf_common+0x48>
 80106d6:	f104 0a19 	add.w	sl, r4, #25
 80106da:	68e3      	ldr	r3, [r4, #12]
 80106dc:	6832      	ldr	r2, [r6, #0]
 80106de:	1a9b      	subs	r3, r3, r2
 80106e0:	42ab      	cmp	r3, r5
 80106e2:	dc26      	bgt.n	8010732 <_printf_common+0x96>
 80106e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80106e8:	6822      	ldr	r2, [r4, #0]
 80106ea:	3b00      	subs	r3, #0
 80106ec:	bf18      	it	ne
 80106ee:	2301      	movne	r3, #1
 80106f0:	0692      	lsls	r2, r2, #26
 80106f2:	d42b      	bmi.n	801074c <_printf_common+0xb0>
 80106f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80106f8:	4641      	mov	r1, r8
 80106fa:	4638      	mov	r0, r7
 80106fc:	47c8      	blx	r9
 80106fe:	3001      	adds	r0, #1
 8010700:	d01e      	beq.n	8010740 <_printf_common+0xa4>
 8010702:	6823      	ldr	r3, [r4, #0]
 8010704:	6922      	ldr	r2, [r4, #16]
 8010706:	f003 0306 	and.w	r3, r3, #6
 801070a:	2b04      	cmp	r3, #4
 801070c:	bf02      	ittt	eq
 801070e:	68e5      	ldreq	r5, [r4, #12]
 8010710:	6833      	ldreq	r3, [r6, #0]
 8010712:	1aed      	subeq	r5, r5, r3
 8010714:	68a3      	ldr	r3, [r4, #8]
 8010716:	bf0c      	ite	eq
 8010718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801071c:	2500      	movne	r5, #0
 801071e:	4293      	cmp	r3, r2
 8010720:	bfc4      	itt	gt
 8010722:	1a9b      	subgt	r3, r3, r2
 8010724:	18ed      	addgt	r5, r5, r3
 8010726:	2600      	movs	r6, #0
 8010728:	341a      	adds	r4, #26
 801072a:	42b5      	cmp	r5, r6
 801072c:	d11a      	bne.n	8010764 <_printf_common+0xc8>
 801072e:	2000      	movs	r0, #0
 8010730:	e008      	b.n	8010744 <_printf_common+0xa8>
 8010732:	2301      	movs	r3, #1
 8010734:	4652      	mov	r2, sl
 8010736:	4641      	mov	r1, r8
 8010738:	4638      	mov	r0, r7
 801073a:	47c8      	blx	r9
 801073c:	3001      	adds	r0, #1
 801073e:	d103      	bne.n	8010748 <_printf_common+0xac>
 8010740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010748:	3501      	adds	r5, #1
 801074a:	e7c6      	b.n	80106da <_printf_common+0x3e>
 801074c:	18e1      	adds	r1, r4, r3
 801074e:	1c5a      	adds	r2, r3, #1
 8010750:	2030      	movs	r0, #48	@ 0x30
 8010752:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010756:	4422      	add	r2, r4
 8010758:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801075c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010760:	3302      	adds	r3, #2
 8010762:	e7c7      	b.n	80106f4 <_printf_common+0x58>
 8010764:	2301      	movs	r3, #1
 8010766:	4622      	mov	r2, r4
 8010768:	4641      	mov	r1, r8
 801076a:	4638      	mov	r0, r7
 801076c:	47c8      	blx	r9
 801076e:	3001      	adds	r0, #1
 8010770:	d0e6      	beq.n	8010740 <_printf_common+0xa4>
 8010772:	3601      	adds	r6, #1
 8010774:	e7d9      	b.n	801072a <_printf_common+0x8e>
	...

08010778 <_printf_i>:
 8010778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801077c:	7e0f      	ldrb	r7, [r1, #24]
 801077e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010780:	2f78      	cmp	r7, #120	@ 0x78
 8010782:	4691      	mov	r9, r2
 8010784:	4680      	mov	r8, r0
 8010786:	460c      	mov	r4, r1
 8010788:	469a      	mov	sl, r3
 801078a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801078e:	d807      	bhi.n	80107a0 <_printf_i+0x28>
 8010790:	2f62      	cmp	r7, #98	@ 0x62
 8010792:	d80a      	bhi.n	80107aa <_printf_i+0x32>
 8010794:	2f00      	cmp	r7, #0
 8010796:	f000 80d2 	beq.w	801093e <_printf_i+0x1c6>
 801079a:	2f58      	cmp	r7, #88	@ 0x58
 801079c:	f000 80b9 	beq.w	8010912 <_printf_i+0x19a>
 80107a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80107a8:	e03a      	b.n	8010820 <_printf_i+0xa8>
 80107aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80107ae:	2b15      	cmp	r3, #21
 80107b0:	d8f6      	bhi.n	80107a0 <_printf_i+0x28>
 80107b2:	a101      	add	r1, pc, #4	@ (adr r1, 80107b8 <_printf_i+0x40>)
 80107b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107b8:	08010811 	.word	0x08010811
 80107bc:	08010825 	.word	0x08010825
 80107c0:	080107a1 	.word	0x080107a1
 80107c4:	080107a1 	.word	0x080107a1
 80107c8:	080107a1 	.word	0x080107a1
 80107cc:	080107a1 	.word	0x080107a1
 80107d0:	08010825 	.word	0x08010825
 80107d4:	080107a1 	.word	0x080107a1
 80107d8:	080107a1 	.word	0x080107a1
 80107dc:	080107a1 	.word	0x080107a1
 80107e0:	080107a1 	.word	0x080107a1
 80107e4:	08010925 	.word	0x08010925
 80107e8:	0801084f 	.word	0x0801084f
 80107ec:	080108df 	.word	0x080108df
 80107f0:	080107a1 	.word	0x080107a1
 80107f4:	080107a1 	.word	0x080107a1
 80107f8:	08010947 	.word	0x08010947
 80107fc:	080107a1 	.word	0x080107a1
 8010800:	0801084f 	.word	0x0801084f
 8010804:	080107a1 	.word	0x080107a1
 8010808:	080107a1 	.word	0x080107a1
 801080c:	080108e7 	.word	0x080108e7
 8010810:	6833      	ldr	r3, [r6, #0]
 8010812:	1d1a      	adds	r2, r3, #4
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	6032      	str	r2, [r6, #0]
 8010818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801081c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010820:	2301      	movs	r3, #1
 8010822:	e09d      	b.n	8010960 <_printf_i+0x1e8>
 8010824:	6833      	ldr	r3, [r6, #0]
 8010826:	6820      	ldr	r0, [r4, #0]
 8010828:	1d19      	adds	r1, r3, #4
 801082a:	6031      	str	r1, [r6, #0]
 801082c:	0606      	lsls	r6, r0, #24
 801082e:	d501      	bpl.n	8010834 <_printf_i+0xbc>
 8010830:	681d      	ldr	r5, [r3, #0]
 8010832:	e003      	b.n	801083c <_printf_i+0xc4>
 8010834:	0645      	lsls	r5, r0, #25
 8010836:	d5fb      	bpl.n	8010830 <_printf_i+0xb8>
 8010838:	f9b3 5000 	ldrsh.w	r5, [r3]
 801083c:	2d00      	cmp	r5, #0
 801083e:	da03      	bge.n	8010848 <_printf_i+0xd0>
 8010840:	232d      	movs	r3, #45	@ 0x2d
 8010842:	426d      	negs	r5, r5
 8010844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010848:	4859      	ldr	r0, [pc, #356]	@ (80109b0 <_printf_i+0x238>)
 801084a:	230a      	movs	r3, #10
 801084c:	e011      	b.n	8010872 <_printf_i+0xfa>
 801084e:	6821      	ldr	r1, [r4, #0]
 8010850:	6833      	ldr	r3, [r6, #0]
 8010852:	0608      	lsls	r0, r1, #24
 8010854:	f853 5b04 	ldr.w	r5, [r3], #4
 8010858:	d402      	bmi.n	8010860 <_printf_i+0xe8>
 801085a:	0649      	lsls	r1, r1, #25
 801085c:	bf48      	it	mi
 801085e:	b2ad      	uxthmi	r5, r5
 8010860:	2f6f      	cmp	r7, #111	@ 0x6f
 8010862:	4853      	ldr	r0, [pc, #332]	@ (80109b0 <_printf_i+0x238>)
 8010864:	6033      	str	r3, [r6, #0]
 8010866:	bf14      	ite	ne
 8010868:	230a      	movne	r3, #10
 801086a:	2308      	moveq	r3, #8
 801086c:	2100      	movs	r1, #0
 801086e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010872:	6866      	ldr	r6, [r4, #4]
 8010874:	60a6      	str	r6, [r4, #8]
 8010876:	2e00      	cmp	r6, #0
 8010878:	bfa2      	ittt	ge
 801087a:	6821      	ldrge	r1, [r4, #0]
 801087c:	f021 0104 	bicge.w	r1, r1, #4
 8010880:	6021      	strge	r1, [r4, #0]
 8010882:	b90d      	cbnz	r5, 8010888 <_printf_i+0x110>
 8010884:	2e00      	cmp	r6, #0
 8010886:	d04b      	beq.n	8010920 <_printf_i+0x1a8>
 8010888:	4616      	mov	r6, r2
 801088a:	fbb5 f1f3 	udiv	r1, r5, r3
 801088e:	fb03 5711 	mls	r7, r3, r1, r5
 8010892:	5dc7      	ldrb	r7, [r0, r7]
 8010894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010898:	462f      	mov	r7, r5
 801089a:	42bb      	cmp	r3, r7
 801089c:	460d      	mov	r5, r1
 801089e:	d9f4      	bls.n	801088a <_printf_i+0x112>
 80108a0:	2b08      	cmp	r3, #8
 80108a2:	d10b      	bne.n	80108bc <_printf_i+0x144>
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	07df      	lsls	r7, r3, #31
 80108a8:	d508      	bpl.n	80108bc <_printf_i+0x144>
 80108aa:	6923      	ldr	r3, [r4, #16]
 80108ac:	6861      	ldr	r1, [r4, #4]
 80108ae:	4299      	cmp	r1, r3
 80108b0:	bfde      	ittt	le
 80108b2:	2330      	movle	r3, #48	@ 0x30
 80108b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80108b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80108bc:	1b92      	subs	r2, r2, r6
 80108be:	6122      	str	r2, [r4, #16]
 80108c0:	f8cd a000 	str.w	sl, [sp]
 80108c4:	464b      	mov	r3, r9
 80108c6:	aa03      	add	r2, sp, #12
 80108c8:	4621      	mov	r1, r4
 80108ca:	4640      	mov	r0, r8
 80108cc:	f7ff fee6 	bl	801069c <_printf_common>
 80108d0:	3001      	adds	r0, #1
 80108d2:	d14a      	bne.n	801096a <_printf_i+0x1f2>
 80108d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108d8:	b004      	add	sp, #16
 80108da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108de:	6823      	ldr	r3, [r4, #0]
 80108e0:	f043 0320 	orr.w	r3, r3, #32
 80108e4:	6023      	str	r3, [r4, #0]
 80108e6:	4833      	ldr	r0, [pc, #204]	@ (80109b4 <_printf_i+0x23c>)
 80108e8:	2778      	movs	r7, #120	@ 0x78
 80108ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	6831      	ldr	r1, [r6, #0]
 80108f2:	061f      	lsls	r7, r3, #24
 80108f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80108f8:	d402      	bmi.n	8010900 <_printf_i+0x188>
 80108fa:	065f      	lsls	r7, r3, #25
 80108fc:	bf48      	it	mi
 80108fe:	b2ad      	uxthmi	r5, r5
 8010900:	6031      	str	r1, [r6, #0]
 8010902:	07d9      	lsls	r1, r3, #31
 8010904:	bf44      	itt	mi
 8010906:	f043 0320 	orrmi.w	r3, r3, #32
 801090a:	6023      	strmi	r3, [r4, #0]
 801090c:	b11d      	cbz	r5, 8010916 <_printf_i+0x19e>
 801090e:	2310      	movs	r3, #16
 8010910:	e7ac      	b.n	801086c <_printf_i+0xf4>
 8010912:	4827      	ldr	r0, [pc, #156]	@ (80109b0 <_printf_i+0x238>)
 8010914:	e7e9      	b.n	80108ea <_printf_i+0x172>
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	f023 0320 	bic.w	r3, r3, #32
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	e7f6      	b.n	801090e <_printf_i+0x196>
 8010920:	4616      	mov	r6, r2
 8010922:	e7bd      	b.n	80108a0 <_printf_i+0x128>
 8010924:	6833      	ldr	r3, [r6, #0]
 8010926:	6825      	ldr	r5, [r4, #0]
 8010928:	6961      	ldr	r1, [r4, #20]
 801092a:	1d18      	adds	r0, r3, #4
 801092c:	6030      	str	r0, [r6, #0]
 801092e:	062e      	lsls	r6, r5, #24
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	d501      	bpl.n	8010938 <_printf_i+0x1c0>
 8010934:	6019      	str	r1, [r3, #0]
 8010936:	e002      	b.n	801093e <_printf_i+0x1c6>
 8010938:	0668      	lsls	r0, r5, #25
 801093a:	d5fb      	bpl.n	8010934 <_printf_i+0x1bc>
 801093c:	8019      	strh	r1, [r3, #0]
 801093e:	2300      	movs	r3, #0
 8010940:	6123      	str	r3, [r4, #16]
 8010942:	4616      	mov	r6, r2
 8010944:	e7bc      	b.n	80108c0 <_printf_i+0x148>
 8010946:	6833      	ldr	r3, [r6, #0]
 8010948:	1d1a      	adds	r2, r3, #4
 801094a:	6032      	str	r2, [r6, #0]
 801094c:	681e      	ldr	r6, [r3, #0]
 801094e:	6862      	ldr	r2, [r4, #4]
 8010950:	2100      	movs	r1, #0
 8010952:	4630      	mov	r0, r6
 8010954:	f7ef fc3c 	bl	80001d0 <memchr>
 8010958:	b108      	cbz	r0, 801095e <_printf_i+0x1e6>
 801095a:	1b80      	subs	r0, r0, r6
 801095c:	6060      	str	r0, [r4, #4]
 801095e:	6863      	ldr	r3, [r4, #4]
 8010960:	6123      	str	r3, [r4, #16]
 8010962:	2300      	movs	r3, #0
 8010964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010968:	e7aa      	b.n	80108c0 <_printf_i+0x148>
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	4632      	mov	r2, r6
 801096e:	4649      	mov	r1, r9
 8010970:	4640      	mov	r0, r8
 8010972:	47d0      	blx	sl
 8010974:	3001      	adds	r0, #1
 8010976:	d0ad      	beq.n	80108d4 <_printf_i+0x15c>
 8010978:	6823      	ldr	r3, [r4, #0]
 801097a:	079b      	lsls	r3, r3, #30
 801097c:	d413      	bmi.n	80109a6 <_printf_i+0x22e>
 801097e:	68e0      	ldr	r0, [r4, #12]
 8010980:	9b03      	ldr	r3, [sp, #12]
 8010982:	4298      	cmp	r0, r3
 8010984:	bfb8      	it	lt
 8010986:	4618      	movlt	r0, r3
 8010988:	e7a6      	b.n	80108d8 <_printf_i+0x160>
 801098a:	2301      	movs	r3, #1
 801098c:	4632      	mov	r2, r6
 801098e:	4649      	mov	r1, r9
 8010990:	4640      	mov	r0, r8
 8010992:	47d0      	blx	sl
 8010994:	3001      	adds	r0, #1
 8010996:	d09d      	beq.n	80108d4 <_printf_i+0x15c>
 8010998:	3501      	adds	r5, #1
 801099a:	68e3      	ldr	r3, [r4, #12]
 801099c:	9903      	ldr	r1, [sp, #12]
 801099e:	1a5b      	subs	r3, r3, r1
 80109a0:	42ab      	cmp	r3, r5
 80109a2:	dcf2      	bgt.n	801098a <_printf_i+0x212>
 80109a4:	e7eb      	b.n	801097e <_printf_i+0x206>
 80109a6:	2500      	movs	r5, #0
 80109a8:	f104 0619 	add.w	r6, r4, #25
 80109ac:	e7f5      	b.n	801099a <_printf_i+0x222>
 80109ae:	bf00      	nop
 80109b0:	0801424a 	.word	0x0801424a
 80109b4:	0801425b 	.word	0x0801425b

080109b8 <std>:
 80109b8:	2300      	movs	r3, #0
 80109ba:	b510      	push	{r4, lr}
 80109bc:	4604      	mov	r4, r0
 80109be:	e9c0 3300 	strd	r3, r3, [r0]
 80109c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109c6:	6083      	str	r3, [r0, #8]
 80109c8:	8181      	strh	r1, [r0, #12]
 80109ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80109cc:	81c2      	strh	r2, [r0, #14]
 80109ce:	6183      	str	r3, [r0, #24]
 80109d0:	4619      	mov	r1, r3
 80109d2:	2208      	movs	r2, #8
 80109d4:	305c      	adds	r0, #92	@ 0x5c
 80109d6:	f000 f8d1 	bl	8010b7c <memset>
 80109da:	4b0d      	ldr	r3, [pc, #52]	@ (8010a10 <std+0x58>)
 80109dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80109de:	4b0d      	ldr	r3, [pc, #52]	@ (8010a14 <std+0x5c>)
 80109e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80109e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010a18 <std+0x60>)
 80109e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80109e6:	4b0d      	ldr	r3, [pc, #52]	@ (8010a1c <std+0x64>)
 80109e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80109ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010a20 <std+0x68>)
 80109ec:	6224      	str	r4, [r4, #32]
 80109ee:	429c      	cmp	r4, r3
 80109f0:	d006      	beq.n	8010a00 <std+0x48>
 80109f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80109f6:	4294      	cmp	r4, r2
 80109f8:	d002      	beq.n	8010a00 <std+0x48>
 80109fa:	33d0      	adds	r3, #208	@ 0xd0
 80109fc:	429c      	cmp	r4, r3
 80109fe:	d105      	bne.n	8010a0c <std+0x54>
 8010a00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a08:	f000 b944 	b.w	8010c94 <__retarget_lock_init_recursive>
 8010a0c:	bd10      	pop	{r4, pc}
 8010a0e:	bf00      	nop
 8010a10:	0801265d 	.word	0x0801265d
 8010a14:	0801267f 	.word	0x0801267f
 8010a18:	080126b7 	.word	0x080126b7
 8010a1c:	080126db 	.word	0x080126db
 8010a20:	20005ab0 	.word	0x20005ab0

08010a24 <stdio_exit_handler>:
 8010a24:	4a02      	ldr	r2, [pc, #8]	@ (8010a30 <stdio_exit_handler+0xc>)
 8010a26:	4903      	ldr	r1, [pc, #12]	@ (8010a34 <stdio_exit_handler+0x10>)
 8010a28:	4803      	ldr	r0, [pc, #12]	@ (8010a38 <stdio_exit_handler+0x14>)
 8010a2a:	f000 b869 	b.w	8010b00 <_fwalk_sglue>
 8010a2e:	bf00      	nop
 8010a30:	20000164 	.word	0x20000164
 8010a34:	08011ef1 	.word	0x08011ef1
 8010a38:	20000174 	.word	0x20000174

08010a3c <cleanup_stdio>:
 8010a3c:	6841      	ldr	r1, [r0, #4]
 8010a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8010a70 <cleanup_stdio+0x34>)
 8010a40:	4299      	cmp	r1, r3
 8010a42:	b510      	push	{r4, lr}
 8010a44:	4604      	mov	r4, r0
 8010a46:	d001      	beq.n	8010a4c <cleanup_stdio+0x10>
 8010a48:	f001 fa52 	bl	8011ef0 <_fflush_r>
 8010a4c:	68a1      	ldr	r1, [r4, #8]
 8010a4e:	4b09      	ldr	r3, [pc, #36]	@ (8010a74 <cleanup_stdio+0x38>)
 8010a50:	4299      	cmp	r1, r3
 8010a52:	d002      	beq.n	8010a5a <cleanup_stdio+0x1e>
 8010a54:	4620      	mov	r0, r4
 8010a56:	f001 fa4b 	bl	8011ef0 <_fflush_r>
 8010a5a:	68e1      	ldr	r1, [r4, #12]
 8010a5c:	4b06      	ldr	r3, [pc, #24]	@ (8010a78 <cleanup_stdio+0x3c>)
 8010a5e:	4299      	cmp	r1, r3
 8010a60:	d004      	beq.n	8010a6c <cleanup_stdio+0x30>
 8010a62:	4620      	mov	r0, r4
 8010a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a68:	f001 ba42 	b.w	8011ef0 <_fflush_r>
 8010a6c:	bd10      	pop	{r4, pc}
 8010a6e:	bf00      	nop
 8010a70:	20005ab0 	.word	0x20005ab0
 8010a74:	20005b18 	.word	0x20005b18
 8010a78:	20005b80 	.word	0x20005b80

08010a7c <global_stdio_init.part.0>:
 8010a7c:	b510      	push	{r4, lr}
 8010a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8010aac <global_stdio_init.part.0+0x30>)
 8010a80:	4c0b      	ldr	r4, [pc, #44]	@ (8010ab0 <global_stdio_init.part.0+0x34>)
 8010a82:	4a0c      	ldr	r2, [pc, #48]	@ (8010ab4 <global_stdio_init.part.0+0x38>)
 8010a84:	601a      	str	r2, [r3, #0]
 8010a86:	4620      	mov	r0, r4
 8010a88:	2200      	movs	r2, #0
 8010a8a:	2104      	movs	r1, #4
 8010a8c:	f7ff ff94 	bl	80109b8 <std>
 8010a90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010a94:	2201      	movs	r2, #1
 8010a96:	2109      	movs	r1, #9
 8010a98:	f7ff ff8e 	bl	80109b8 <std>
 8010a9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aa6:	2112      	movs	r1, #18
 8010aa8:	f7ff bf86 	b.w	80109b8 <std>
 8010aac:	20005be8 	.word	0x20005be8
 8010ab0:	20005ab0 	.word	0x20005ab0
 8010ab4:	08010a25 	.word	0x08010a25

08010ab8 <__sfp_lock_acquire>:
 8010ab8:	4801      	ldr	r0, [pc, #4]	@ (8010ac0 <__sfp_lock_acquire+0x8>)
 8010aba:	f000 b8ec 	b.w	8010c96 <__retarget_lock_acquire_recursive>
 8010abe:	bf00      	nop
 8010ac0:	20005bf1 	.word	0x20005bf1

08010ac4 <__sfp_lock_release>:
 8010ac4:	4801      	ldr	r0, [pc, #4]	@ (8010acc <__sfp_lock_release+0x8>)
 8010ac6:	f000 b8e7 	b.w	8010c98 <__retarget_lock_release_recursive>
 8010aca:	bf00      	nop
 8010acc:	20005bf1 	.word	0x20005bf1

08010ad0 <__sinit>:
 8010ad0:	b510      	push	{r4, lr}
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	f7ff fff0 	bl	8010ab8 <__sfp_lock_acquire>
 8010ad8:	6a23      	ldr	r3, [r4, #32]
 8010ada:	b11b      	cbz	r3, 8010ae4 <__sinit+0x14>
 8010adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ae0:	f7ff bff0 	b.w	8010ac4 <__sfp_lock_release>
 8010ae4:	4b04      	ldr	r3, [pc, #16]	@ (8010af8 <__sinit+0x28>)
 8010ae6:	6223      	str	r3, [r4, #32]
 8010ae8:	4b04      	ldr	r3, [pc, #16]	@ (8010afc <__sinit+0x2c>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d1f5      	bne.n	8010adc <__sinit+0xc>
 8010af0:	f7ff ffc4 	bl	8010a7c <global_stdio_init.part.0>
 8010af4:	e7f2      	b.n	8010adc <__sinit+0xc>
 8010af6:	bf00      	nop
 8010af8:	08010a3d 	.word	0x08010a3d
 8010afc:	20005be8 	.word	0x20005be8

08010b00 <_fwalk_sglue>:
 8010b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b04:	4607      	mov	r7, r0
 8010b06:	4688      	mov	r8, r1
 8010b08:	4614      	mov	r4, r2
 8010b0a:	2600      	movs	r6, #0
 8010b0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b10:	f1b9 0901 	subs.w	r9, r9, #1
 8010b14:	d505      	bpl.n	8010b22 <_fwalk_sglue+0x22>
 8010b16:	6824      	ldr	r4, [r4, #0]
 8010b18:	2c00      	cmp	r4, #0
 8010b1a:	d1f7      	bne.n	8010b0c <_fwalk_sglue+0xc>
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b22:	89ab      	ldrh	r3, [r5, #12]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d907      	bls.n	8010b38 <_fwalk_sglue+0x38>
 8010b28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	d003      	beq.n	8010b38 <_fwalk_sglue+0x38>
 8010b30:	4629      	mov	r1, r5
 8010b32:	4638      	mov	r0, r7
 8010b34:	47c0      	blx	r8
 8010b36:	4306      	orrs	r6, r0
 8010b38:	3568      	adds	r5, #104	@ 0x68
 8010b3a:	e7e9      	b.n	8010b10 <_fwalk_sglue+0x10>

08010b3c <_vsiprintf_r>:
 8010b3c:	b500      	push	{lr}
 8010b3e:	b09b      	sub	sp, #108	@ 0x6c
 8010b40:	9100      	str	r1, [sp, #0]
 8010b42:	9104      	str	r1, [sp, #16]
 8010b44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b48:	9105      	str	r1, [sp, #20]
 8010b4a:	9102      	str	r1, [sp, #8]
 8010b4c:	4905      	ldr	r1, [pc, #20]	@ (8010b64 <_vsiprintf_r+0x28>)
 8010b4e:	9103      	str	r1, [sp, #12]
 8010b50:	4669      	mov	r1, sp
 8010b52:	f000 ffa3 	bl	8011a9c <_svfiprintf_r>
 8010b56:	9b00      	ldr	r3, [sp, #0]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	701a      	strb	r2, [r3, #0]
 8010b5c:	b01b      	add	sp, #108	@ 0x6c
 8010b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b62:	bf00      	nop
 8010b64:	ffff0208 	.word	0xffff0208

08010b68 <vsiprintf>:
 8010b68:	4613      	mov	r3, r2
 8010b6a:	460a      	mov	r2, r1
 8010b6c:	4601      	mov	r1, r0
 8010b6e:	4802      	ldr	r0, [pc, #8]	@ (8010b78 <vsiprintf+0x10>)
 8010b70:	6800      	ldr	r0, [r0, #0]
 8010b72:	f7ff bfe3 	b.w	8010b3c <_vsiprintf_r>
 8010b76:	bf00      	nop
 8010b78:	20000170 	.word	0x20000170

08010b7c <memset>:
 8010b7c:	4402      	add	r2, r0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d100      	bne.n	8010b86 <memset+0xa>
 8010b84:	4770      	bx	lr
 8010b86:	f803 1b01 	strb.w	r1, [r3], #1
 8010b8a:	e7f9      	b.n	8010b80 <memset+0x4>

08010b8c <_localeconv_r>:
 8010b8c:	4800      	ldr	r0, [pc, #0]	@ (8010b90 <_localeconv_r+0x4>)
 8010b8e:	4770      	bx	lr
 8010b90:	200002b0 	.word	0x200002b0

08010b94 <_reclaim_reent>:
 8010b94:	4b29      	ldr	r3, [pc, #164]	@ (8010c3c <_reclaim_reent+0xa8>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	4283      	cmp	r3, r0
 8010b9a:	b570      	push	{r4, r5, r6, lr}
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	d04b      	beq.n	8010c38 <_reclaim_reent+0xa4>
 8010ba0:	69c3      	ldr	r3, [r0, #28]
 8010ba2:	b1ab      	cbz	r3, 8010bd0 <_reclaim_reent+0x3c>
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	b16b      	cbz	r3, 8010bc4 <_reclaim_reent+0x30>
 8010ba8:	2500      	movs	r5, #0
 8010baa:	69e3      	ldr	r3, [r4, #28]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	5959      	ldr	r1, [r3, r5]
 8010bb0:	2900      	cmp	r1, #0
 8010bb2:	d13b      	bne.n	8010c2c <_reclaim_reent+0x98>
 8010bb4:	3504      	adds	r5, #4
 8010bb6:	2d80      	cmp	r5, #128	@ 0x80
 8010bb8:	d1f7      	bne.n	8010baa <_reclaim_reent+0x16>
 8010bba:	69e3      	ldr	r3, [r4, #28]
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	68d9      	ldr	r1, [r3, #12]
 8010bc0:	f000 fec6 	bl	8011950 <_free_r>
 8010bc4:	69e3      	ldr	r3, [r4, #28]
 8010bc6:	6819      	ldr	r1, [r3, #0]
 8010bc8:	b111      	cbz	r1, 8010bd0 <_reclaim_reent+0x3c>
 8010bca:	4620      	mov	r0, r4
 8010bcc:	f000 fec0 	bl	8011950 <_free_r>
 8010bd0:	6961      	ldr	r1, [r4, #20]
 8010bd2:	b111      	cbz	r1, 8010bda <_reclaim_reent+0x46>
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f000 febb 	bl	8011950 <_free_r>
 8010bda:	69e1      	ldr	r1, [r4, #28]
 8010bdc:	b111      	cbz	r1, 8010be4 <_reclaim_reent+0x50>
 8010bde:	4620      	mov	r0, r4
 8010be0:	f000 feb6 	bl	8011950 <_free_r>
 8010be4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010be6:	b111      	cbz	r1, 8010bee <_reclaim_reent+0x5a>
 8010be8:	4620      	mov	r0, r4
 8010bea:	f000 feb1 	bl	8011950 <_free_r>
 8010bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bf0:	b111      	cbz	r1, 8010bf8 <_reclaim_reent+0x64>
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f000 feac 	bl	8011950 <_free_r>
 8010bf8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010bfa:	b111      	cbz	r1, 8010c02 <_reclaim_reent+0x6e>
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f000 fea7 	bl	8011950 <_free_r>
 8010c02:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010c04:	b111      	cbz	r1, 8010c0c <_reclaim_reent+0x78>
 8010c06:	4620      	mov	r0, r4
 8010c08:	f000 fea2 	bl	8011950 <_free_r>
 8010c0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010c0e:	b111      	cbz	r1, 8010c16 <_reclaim_reent+0x82>
 8010c10:	4620      	mov	r0, r4
 8010c12:	f000 fe9d 	bl	8011950 <_free_r>
 8010c16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010c18:	b111      	cbz	r1, 8010c20 <_reclaim_reent+0x8c>
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f000 fe98 	bl	8011950 <_free_r>
 8010c20:	6a23      	ldr	r3, [r4, #32]
 8010c22:	b14b      	cbz	r3, 8010c38 <_reclaim_reent+0xa4>
 8010c24:	4620      	mov	r0, r4
 8010c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c2a:	4718      	bx	r3
 8010c2c:	680e      	ldr	r6, [r1, #0]
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f000 fe8e 	bl	8011950 <_free_r>
 8010c34:	4631      	mov	r1, r6
 8010c36:	e7bb      	b.n	8010bb0 <_reclaim_reent+0x1c>
 8010c38:	bd70      	pop	{r4, r5, r6, pc}
 8010c3a:	bf00      	nop
 8010c3c:	20000170 	.word	0x20000170

08010c40 <__errno>:
 8010c40:	4b01      	ldr	r3, [pc, #4]	@ (8010c48 <__errno+0x8>)
 8010c42:	6818      	ldr	r0, [r3, #0]
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	20000170 	.word	0x20000170

08010c4c <__libc_init_array>:
 8010c4c:	b570      	push	{r4, r5, r6, lr}
 8010c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8010c84 <__libc_init_array+0x38>)
 8010c50:	4c0d      	ldr	r4, [pc, #52]	@ (8010c88 <__libc_init_array+0x3c>)
 8010c52:	1b64      	subs	r4, r4, r5
 8010c54:	10a4      	asrs	r4, r4, #2
 8010c56:	2600      	movs	r6, #0
 8010c58:	42a6      	cmp	r6, r4
 8010c5a:	d109      	bne.n	8010c70 <__libc_init_array+0x24>
 8010c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8010c8c <__libc_init_array+0x40>)
 8010c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8010c90 <__libc_init_array+0x44>)
 8010c60:	f003 f972 	bl	8013f48 <_init>
 8010c64:	1b64      	subs	r4, r4, r5
 8010c66:	10a4      	asrs	r4, r4, #2
 8010c68:	2600      	movs	r6, #0
 8010c6a:	42a6      	cmp	r6, r4
 8010c6c:	d105      	bne.n	8010c7a <__libc_init_array+0x2e>
 8010c6e:	bd70      	pop	{r4, r5, r6, pc}
 8010c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c74:	4798      	blx	r3
 8010c76:	3601      	adds	r6, #1
 8010c78:	e7ee      	b.n	8010c58 <__libc_init_array+0xc>
 8010c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c7e:	4798      	blx	r3
 8010c80:	3601      	adds	r6, #1
 8010c82:	e7f2      	b.n	8010c6a <__libc_init_array+0x1e>
 8010c84:	08014788 	.word	0x08014788
 8010c88:	08014788 	.word	0x08014788
 8010c8c:	08014788 	.word	0x08014788
 8010c90:	0801478c 	.word	0x0801478c

08010c94 <__retarget_lock_init_recursive>:
 8010c94:	4770      	bx	lr

08010c96 <__retarget_lock_acquire_recursive>:
 8010c96:	4770      	bx	lr

08010c98 <__retarget_lock_release_recursive>:
 8010c98:	4770      	bx	lr

08010c9a <memcpy>:
 8010c9a:	440a      	add	r2, r1
 8010c9c:	4291      	cmp	r1, r2
 8010c9e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010ca2:	d100      	bne.n	8010ca6 <memcpy+0xc>
 8010ca4:	4770      	bx	lr
 8010ca6:	b510      	push	{r4, lr}
 8010ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cb0:	4291      	cmp	r1, r2
 8010cb2:	d1f9      	bne.n	8010ca8 <memcpy+0xe>
 8010cb4:	bd10      	pop	{r4, pc}

08010cb6 <quorem>:
 8010cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cba:	6903      	ldr	r3, [r0, #16]
 8010cbc:	690c      	ldr	r4, [r1, #16]
 8010cbe:	42a3      	cmp	r3, r4
 8010cc0:	4607      	mov	r7, r0
 8010cc2:	db7e      	blt.n	8010dc2 <quorem+0x10c>
 8010cc4:	3c01      	subs	r4, #1
 8010cc6:	f101 0814 	add.w	r8, r1, #20
 8010cca:	00a3      	lsls	r3, r4, #2
 8010ccc:	f100 0514 	add.w	r5, r0, #20
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cd6:	9301      	str	r3, [sp, #4]
 8010cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cec:	d32e      	bcc.n	8010d4c <quorem+0x96>
 8010cee:	f04f 0a00 	mov.w	sl, #0
 8010cf2:	46c4      	mov	ip, r8
 8010cf4:	46ae      	mov	lr, r5
 8010cf6:	46d3      	mov	fp, sl
 8010cf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010cfc:	b298      	uxth	r0, r3
 8010cfe:	fb06 a000 	mla	r0, r6, r0, sl
 8010d02:	0c02      	lsrs	r2, r0, #16
 8010d04:	0c1b      	lsrs	r3, r3, #16
 8010d06:	fb06 2303 	mla	r3, r6, r3, r2
 8010d0a:	f8de 2000 	ldr.w	r2, [lr]
 8010d0e:	b280      	uxth	r0, r0
 8010d10:	b292      	uxth	r2, r2
 8010d12:	1a12      	subs	r2, r2, r0
 8010d14:	445a      	add	r2, fp
 8010d16:	f8de 0000 	ldr.w	r0, [lr]
 8010d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010d24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010d28:	b292      	uxth	r2, r2
 8010d2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d2e:	45e1      	cmp	r9, ip
 8010d30:	f84e 2b04 	str.w	r2, [lr], #4
 8010d34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010d38:	d2de      	bcs.n	8010cf8 <quorem+0x42>
 8010d3a:	9b00      	ldr	r3, [sp, #0]
 8010d3c:	58eb      	ldr	r3, [r5, r3]
 8010d3e:	b92b      	cbnz	r3, 8010d4c <quorem+0x96>
 8010d40:	9b01      	ldr	r3, [sp, #4]
 8010d42:	3b04      	subs	r3, #4
 8010d44:	429d      	cmp	r5, r3
 8010d46:	461a      	mov	r2, r3
 8010d48:	d32f      	bcc.n	8010daa <quorem+0xf4>
 8010d4a:	613c      	str	r4, [r7, #16]
 8010d4c:	4638      	mov	r0, r7
 8010d4e:	f001 fb7d 	bl	801244c <__mcmp>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	db25      	blt.n	8010da2 <quorem+0xec>
 8010d56:	4629      	mov	r1, r5
 8010d58:	2000      	movs	r0, #0
 8010d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d5e:	f8d1 c000 	ldr.w	ip, [r1]
 8010d62:	fa1f fe82 	uxth.w	lr, r2
 8010d66:	fa1f f38c 	uxth.w	r3, ip
 8010d6a:	eba3 030e 	sub.w	r3, r3, lr
 8010d6e:	4403      	add	r3, r0
 8010d70:	0c12      	lsrs	r2, r2, #16
 8010d72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d80:	45c1      	cmp	r9, r8
 8010d82:	f841 3b04 	str.w	r3, [r1], #4
 8010d86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d8a:	d2e6      	bcs.n	8010d5a <quorem+0xa4>
 8010d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d94:	b922      	cbnz	r2, 8010da0 <quorem+0xea>
 8010d96:	3b04      	subs	r3, #4
 8010d98:	429d      	cmp	r5, r3
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	d30b      	bcc.n	8010db6 <quorem+0x100>
 8010d9e:	613c      	str	r4, [r7, #16]
 8010da0:	3601      	adds	r6, #1
 8010da2:	4630      	mov	r0, r6
 8010da4:	b003      	add	sp, #12
 8010da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010daa:	6812      	ldr	r2, [r2, #0]
 8010dac:	3b04      	subs	r3, #4
 8010dae:	2a00      	cmp	r2, #0
 8010db0:	d1cb      	bne.n	8010d4a <quorem+0x94>
 8010db2:	3c01      	subs	r4, #1
 8010db4:	e7c6      	b.n	8010d44 <quorem+0x8e>
 8010db6:	6812      	ldr	r2, [r2, #0]
 8010db8:	3b04      	subs	r3, #4
 8010dba:	2a00      	cmp	r2, #0
 8010dbc:	d1ef      	bne.n	8010d9e <quorem+0xe8>
 8010dbe:	3c01      	subs	r4, #1
 8010dc0:	e7ea      	b.n	8010d98 <quorem+0xe2>
 8010dc2:	2000      	movs	r0, #0
 8010dc4:	e7ee      	b.n	8010da4 <quorem+0xee>
	...

08010dc8 <_dtoa_r>:
 8010dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dcc:	69c7      	ldr	r7, [r0, #28]
 8010dce:	b099      	sub	sp, #100	@ 0x64
 8010dd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010dd4:	ec55 4b10 	vmov	r4, r5, d0
 8010dd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010dda:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ddc:	4683      	mov	fp, r0
 8010dde:	920e      	str	r2, [sp, #56]	@ 0x38
 8010de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010de2:	b97f      	cbnz	r7, 8010e04 <_dtoa_r+0x3c>
 8010de4:	2010      	movs	r0, #16
 8010de6:	f000 ff55 	bl	8011c94 <malloc>
 8010dea:	4602      	mov	r2, r0
 8010dec:	f8cb 001c 	str.w	r0, [fp, #28]
 8010df0:	b920      	cbnz	r0, 8010dfc <_dtoa_r+0x34>
 8010df2:	4ba7      	ldr	r3, [pc, #668]	@ (8011090 <_dtoa_r+0x2c8>)
 8010df4:	21ef      	movs	r1, #239	@ 0xef
 8010df6:	48a7      	ldr	r0, [pc, #668]	@ (8011094 <_dtoa_r+0x2cc>)
 8010df8:	f001 fd12 	bl	8012820 <__assert_func>
 8010dfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e00:	6007      	str	r7, [r0, #0]
 8010e02:	60c7      	str	r7, [r0, #12]
 8010e04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e08:	6819      	ldr	r1, [r3, #0]
 8010e0a:	b159      	cbz	r1, 8010e24 <_dtoa_r+0x5c>
 8010e0c:	685a      	ldr	r2, [r3, #4]
 8010e0e:	604a      	str	r2, [r1, #4]
 8010e10:	2301      	movs	r3, #1
 8010e12:	4093      	lsls	r3, r2
 8010e14:	608b      	str	r3, [r1, #8]
 8010e16:	4658      	mov	r0, fp
 8010e18:	f001 f8de 	bl	8011fd8 <_Bfree>
 8010e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e20:	2200      	movs	r2, #0
 8010e22:	601a      	str	r2, [r3, #0]
 8010e24:	1e2b      	subs	r3, r5, #0
 8010e26:	bfb9      	ittee	lt
 8010e28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e2c:	9303      	strlt	r3, [sp, #12]
 8010e2e:	2300      	movge	r3, #0
 8010e30:	6033      	strge	r3, [r6, #0]
 8010e32:	9f03      	ldr	r7, [sp, #12]
 8010e34:	4b98      	ldr	r3, [pc, #608]	@ (8011098 <_dtoa_r+0x2d0>)
 8010e36:	bfbc      	itt	lt
 8010e38:	2201      	movlt	r2, #1
 8010e3a:	6032      	strlt	r2, [r6, #0]
 8010e3c:	43bb      	bics	r3, r7
 8010e3e:	d112      	bne.n	8010e66 <_dtoa_r+0x9e>
 8010e40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010e42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e4c:	4323      	orrs	r3, r4
 8010e4e:	f000 854d 	beq.w	80118ec <_dtoa_r+0xb24>
 8010e52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80110ac <_dtoa_r+0x2e4>
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	f000 854f 	beq.w	80118fc <_dtoa_r+0xb34>
 8010e5e:	f10a 0303 	add.w	r3, sl, #3
 8010e62:	f000 bd49 	b.w	80118f8 <_dtoa_r+0xb30>
 8010e66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	ec51 0b17 	vmov	r0, r1, d7
 8010e70:	2300      	movs	r3, #0
 8010e72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010e76:	f7ef fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e7a:	4680      	mov	r8, r0
 8010e7c:	b158      	cbz	r0, 8010e96 <_dtoa_r+0xce>
 8010e7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010e80:	2301      	movs	r3, #1
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e86:	b113      	cbz	r3, 8010e8e <_dtoa_r+0xc6>
 8010e88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010e8a:	4b84      	ldr	r3, [pc, #528]	@ (801109c <_dtoa_r+0x2d4>)
 8010e8c:	6013      	str	r3, [r2, #0]
 8010e8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80110b0 <_dtoa_r+0x2e8>
 8010e92:	f000 bd33 	b.w	80118fc <_dtoa_r+0xb34>
 8010e96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010e9a:	aa16      	add	r2, sp, #88	@ 0x58
 8010e9c:	a917      	add	r1, sp, #92	@ 0x5c
 8010e9e:	4658      	mov	r0, fp
 8010ea0:	f001 fb84 	bl	80125ac <__d2b>
 8010ea4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010ea8:	4681      	mov	r9, r0
 8010eaa:	2e00      	cmp	r6, #0
 8010eac:	d077      	beq.n	8010f9e <_dtoa_r+0x1d6>
 8010eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010eb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ebc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010ec0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010ec4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010ec8:	4619      	mov	r1, r3
 8010eca:	2200      	movs	r2, #0
 8010ecc:	4b74      	ldr	r3, [pc, #464]	@ (80110a0 <_dtoa_r+0x2d8>)
 8010ece:	f7ef f9db 	bl	8000288 <__aeabi_dsub>
 8010ed2:	a369      	add	r3, pc, #420	@ (adr r3, 8011078 <_dtoa_r+0x2b0>)
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	f7ef fb8e 	bl	80005f8 <__aeabi_dmul>
 8010edc:	a368      	add	r3, pc, #416	@ (adr r3, 8011080 <_dtoa_r+0x2b8>)
 8010ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee2:	f7ef f9d3 	bl	800028c <__adddf3>
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	4630      	mov	r0, r6
 8010eea:	460d      	mov	r5, r1
 8010eec:	f7ef fb1a 	bl	8000524 <__aeabi_i2d>
 8010ef0:	a365      	add	r3, pc, #404	@ (adr r3, 8011088 <_dtoa_r+0x2c0>)
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	f7ef fb7f 	bl	80005f8 <__aeabi_dmul>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	4620      	mov	r0, r4
 8010f00:	4629      	mov	r1, r5
 8010f02:	f7ef f9c3 	bl	800028c <__adddf3>
 8010f06:	4604      	mov	r4, r0
 8010f08:	460d      	mov	r5, r1
 8010f0a:	f7ef fe25 	bl	8000b58 <__aeabi_d2iz>
 8010f0e:	2200      	movs	r2, #0
 8010f10:	4607      	mov	r7, r0
 8010f12:	2300      	movs	r3, #0
 8010f14:	4620      	mov	r0, r4
 8010f16:	4629      	mov	r1, r5
 8010f18:	f7ef fde0 	bl	8000adc <__aeabi_dcmplt>
 8010f1c:	b140      	cbz	r0, 8010f30 <_dtoa_r+0x168>
 8010f1e:	4638      	mov	r0, r7
 8010f20:	f7ef fb00 	bl	8000524 <__aeabi_i2d>
 8010f24:	4622      	mov	r2, r4
 8010f26:	462b      	mov	r3, r5
 8010f28:	f7ef fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f2c:	b900      	cbnz	r0, 8010f30 <_dtoa_r+0x168>
 8010f2e:	3f01      	subs	r7, #1
 8010f30:	2f16      	cmp	r7, #22
 8010f32:	d851      	bhi.n	8010fd8 <_dtoa_r+0x210>
 8010f34:	4b5b      	ldr	r3, [pc, #364]	@ (80110a4 <_dtoa_r+0x2dc>)
 8010f36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f42:	f7ef fdcb 	bl	8000adc <__aeabi_dcmplt>
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d048      	beq.n	8010fdc <_dtoa_r+0x214>
 8010f4a:	3f01      	subs	r7, #1
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010f50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010f52:	1b9b      	subs	r3, r3, r6
 8010f54:	1e5a      	subs	r2, r3, #1
 8010f56:	bf44      	itt	mi
 8010f58:	f1c3 0801 	rsbmi	r8, r3, #1
 8010f5c:	2300      	movmi	r3, #0
 8010f5e:	9208      	str	r2, [sp, #32]
 8010f60:	bf54      	ite	pl
 8010f62:	f04f 0800 	movpl.w	r8, #0
 8010f66:	9308      	strmi	r3, [sp, #32]
 8010f68:	2f00      	cmp	r7, #0
 8010f6a:	db39      	blt.n	8010fe0 <_dtoa_r+0x218>
 8010f6c:	9b08      	ldr	r3, [sp, #32]
 8010f6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010f70:	443b      	add	r3, r7
 8010f72:	9308      	str	r3, [sp, #32]
 8010f74:	2300      	movs	r3, #0
 8010f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f7a:	2b09      	cmp	r3, #9
 8010f7c:	d864      	bhi.n	8011048 <_dtoa_r+0x280>
 8010f7e:	2b05      	cmp	r3, #5
 8010f80:	bfc4      	itt	gt
 8010f82:	3b04      	subgt	r3, #4
 8010f84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f88:	f1a3 0302 	sub.w	r3, r3, #2
 8010f8c:	bfcc      	ite	gt
 8010f8e:	2400      	movgt	r4, #0
 8010f90:	2401      	movle	r4, #1
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d863      	bhi.n	801105e <_dtoa_r+0x296>
 8010f96:	e8df f003 	tbb	[pc, r3]
 8010f9a:	372a      	.short	0x372a
 8010f9c:	5535      	.short	0x5535
 8010f9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010fa2:	441e      	add	r6, r3
 8010fa4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010fa8:	2b20      	cmp	r3, #32
 8010faa:	bfc1      	itttt	gt
 8010fac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010fb0:	409f      	lslgt	r7, r3
 8010fb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010fb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010fba:	bfd6      	itet	le
 8010fbc:	f1c3 0320 	rsble	r3, r3, #32
 8010fc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8010fc4:	fa04 f003 	lslle.w	r0, r4, r3
 8010fc8:	f7ef fa9c 	bl	8000504 <__aeabi_ui2d>
 8010fcc:	2201      	movs	r2, #1
 8010fce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010fd2:	3e01      	subs	r6, #1
 8010fd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8010fd6:	e777      	b.n	8010ec8 <_dtoa_r+0x100>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	e7b8      	b.n	8010f4e <_dtoa_r+0x186>
 8010fdc:	9012      	str	r0, [sp, #72]	@ 0x48
 8010fde:	e7b7      	b.n	8010f50 <_dtoa_r+0x188>
 8010fe0:	427b      	negs	r3, r7
 8010fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	eba8 0807 	sub.w	r8, r8, r7
 8010fea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010fec:	e7c4      	b.n	8010f78 <_dtoa_r+0x1b0>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	dc35      	bgt.n	8011064 <_dtoa_r+0x29c>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	9300      	str	r3, [sp, #0]
 8010ffc:	9307      	str	r3, [sp, #28]
 8010ffe:	461a      	mov	r2, r3
 8011000:	920e      	str	r2, [sp, #56]	@ 0x38
 8011002:	e00b      	b.n	801101c <_dtoa_r+0x254>
 8011004:	2301      	movs	r3, #1
 8011006:	e7f3      	b.n	8010ff0 <_dtoa_r+0x228>
 8011008:	2300      	movs	r3, #0
 801100a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801100c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801100e:	18fb      	adds	r3, r7, r3
 8011010:	9300      	str	r3, [sp, #0]
 8011012:	3301      	adds	r3, #1
 8011014:	2b01      	cmp	r3, #1
 8011016:	9307      	str	r3, [sp, #28]
 8011018:	bfb8      	it	lt
 801101a:	2301      	movlt	r3, #1
 801101c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011020:	2100      	movs	r1, #0
 8011022:	2204      	movs	r2, #4
 8011024:	f102 0514 	add.w	r5, r2, #20
 8011028:	429d      	cmp	r5, r3
 801102a:	d91f      	bls.n	801106c <_dtoa_r+0x2a4>
 801102c:	6041      	str	r1, [r0, #4]
 801102e:	4658      	mov	r0, fp
 8011030:	f000 ff92 	bl	8011f58 <_Balloc>
 8011034:	4682      	mov	sl, r0
 8011036:	2800      	cmp	r0, #0
 8011038:	d13c      	bne.n	80110b4 <_dtoa_r+0x2ec>
 801103a:	4b1b      	ldr	r3, [pc, #108]	@ (80110a8 <_dtoa_r+0x2e0>)
 801103c:	4602      	mov	r2, r0
 801103e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011042:	e6d8      	b.n	8010df6 <_dtoa_r+0x2e>
 8011044:	2301      	movs	r3, #1
 8011046:	e7e0      	b.n	801100a <_dtoa_r+0x242>
 8011048:	2401      	movs	r4, #1
 801104a:	2300      	movs	r3, #0
 801104c:	9309      	str	r3, [sp, #36]	@ 0x24
 801104e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	9307      	str	r3, [sp, #28]
 8011058:	2200      	movs	r2, #0
 801105a:	2312      	movs	r3, #18
 801105c:	e7d0      	b.n	8011000 <_dtoa_r+0x238>
 801105e:	2301      	movs	r3, #1
 8011060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011062:	e7f5      	b.n	8011050 <_dtoa_r+0x288>
 8011064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	9307      	str	r3, [sp, #28]
 801106a:	e7d7      	b.n	801101c <_dtoa_r+0x254>
 801106c:	3101      	adds	r1, #1
 801106e:	0052      	lsls	r2, r2, #1
 8011070:	e7d8      	b.n	8011024 <_dtoa_r+0x25c>
 8011072:	bf00      	nop
 8011074:	f3af 8000 	nop.w
 8011078:	636f4361 	.word	0x636f4361
 801107c:	3fd287a7 	.word	0x3fd287a7
 8011080:	8b60c8b3 	.word	0x8b60c8b3
 8011084:	3fc68a28 	.word	0x3fc68a28
 8011088:	509f79fb 	.word	0x509f79fb
 801108c:	3fd34413 	.word	0x3fd34413
 8011090:	08014279 	.word	0x08014279
 8011094:	08014290 	.word	0x08014290
 8011098:	7ff00000 	.word	0x7ff00000
 801109c:	08014249 	.word	0x08014249
 80110a0:	3ff80000 	.word	0x3ff80000
 80110a4:	08014398 	.word	0x08014398
 80110a8:	080142e8 	.word	0x080142e8
 80110ac:	08014275 	.word	0x08014275
 80110b0:	08014248 	.word	0x08014248
 80110b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80110b8:	6018      	str	r0, [r3, #0]
 80110ba:	9b07      	ldr	r3, [sp, #28]
 80110bc:	2b0e      	cmp	r3, #14
 80110be:	f200 80a4 	bhi.w	801120a <_dtoa_r+0x442>
 80110c2:	2c00      	cmp	r4, #0
 80110c4:	f000 80a1 	beq.w	801120a <_dtoa_r+0x442>
 80110c8:	2f00      	cmp	r7, #0
 80110ca:	dd33      	ble.n	8011134 <_dtoa_r+0x36c>
 80110cc:	4bad      	ldr	r3, [pc, #692]	@ (8011384 <_dtoa_r+0x5bc>)
 80110ce:	f007 020f 	and.w	r2, r7, #15
 80110d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110d6:	ed93 7b00 	vldr	d7, [r3]
 80110da:	05f8      	lsls	r0, r7, #23
 80110dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80110e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80110e4:	d516      	bpl.n	8011114 <_dtoa_r+0x34c>
 80110e6:	4ba8      	ldr	r3, [pc, #672]	@ (8011388 <_dtoa_r+0x5c0>)
 80110e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80110ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80110f0:	f7ef fbac 	bl	800084c <__aeabi_ddiv>
 80110f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110f8:	f004 040f 	and.w	r4, r4, #15
 80110fc:	2603      	movs	r6, #3
 80110fe:	4da2      	ldr	r5, [pc, #648]	@ (8011388 <_dtoa_r+0x5c0>)
 8011100:	b954      	cbnz	r4, 8011118 <_dtoa_r+0x350>
 8011102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801110a:	f7ef fb9f 	bl	800084c <__aeabi_ddiv>
 801110e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011112:	e028      	b.n	8011166 <_dtoa_r+0x39e>
 8011114:	2602      	movs	r6, #2
 8011116:	e7f2      	b.n	80110fe <_dtoa_r+0x336>
 8011118:	07e1      	lsls	r1, r4, #31
 801111a:	d508      	bpl.n	801112e <_dtoa_r+0x366>
 801111c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011120:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011124:	f7ef fa68 	bl	80005f8 <__aeabi_dmul>
 8011128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801112c:	3601      	adds	r6, #1
 801112e:	1064      	asrs	r4, r4, #1
 8011130:	3508      	adds	r5, #8
 8011132:	e7e5      	b.n	8011100 <_dtoa_r+0x338>
 8011134:	f000 80d2 	beq.w	80112dc <_dtoa_r+0x514>
 8011138:	427c      	negs	r4, r7
 801113a:	4b92      	ldr	r3, [pc, #584]	@ (8011384 <_dtoa_r+0x5bc>)
 801113c:	4d92      	ldr	r5, [pc, #584]	@ (8011388 <_dtoa_r+0x5c0>)
 801113e:	f004 020f 	and.w	r2, r4, #15
 8011142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801114e:	f7ef fa53 	bl	80005f8 <__aeabi_dmul>
 8011152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011156:	1124      	asrs	r4, r4, #4
 8011158:	2300      	movs	r3, #0
 801115a:	2602      	movs	r6, #2
 801115c:	2c00      	cmp	r4, #0
 801115e:	f040 80b2 	bne.w	80112c6 <_dtoa_r+0x4fe>
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1d3      	bne.n	801110e <_dtoa_r+0x346>
 8011166:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011168:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 80b7 	beq.w	80112e0 <_dtoa_r+0x518>
 8011172:	4b86      	ldr	r3, [pc, #536]	@ (801138c <_dtoa_r+0x5c4>)
 8011174:	2200      	movs	r2, #0
 8011176:	4620      	mov	r0, r4
 8011178:	4629      	mov	r1, r5
 801117a:	f7ef fcaf 	bl	8000adc <__aeabi_dcmplt>
 801117e:	2800      	cmp	r0, #0
 8011180:	f000 80ae 	beq.w	80112e0 <_dtoa_r+0x518>
 8011184:	9b07      	ldr	r3, [sp, #28]
 8011186:	2b00      	cmp	r3, #0
 8011188:	f000 80aa 	beq.w	80112e0 <_dtoa_r+0x518>
 801118c:	9b00      	ldr	r3, [sp, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	dd37      	ble.n	8011202 <_dtoa_r+0x43a>
 8011192:	1e7b      	subs	r3, r7, #1
 8011194:	9304      	str	r3, [sp, #16]
 8011196:	4620      	mov	r0, r4
 8011198:	4b7d      	ldr	r3, [pc, #500]	@ (8011390 <_dtoa_r+0x5c8>)
 801119a:	2200      	movs	r2, #0
 801119c:	4629      	mov	r1, r5
 801119e:	f7ef fa2b 	bl	80005f8 <__aeabi_dmul>
 80111a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111a6:	9c00      	ldr	r4, [sp, #0]
 80111a8:	3601      	adds	r6, #1
 80111aa:	4630      	mov	r0, r6
 80111ac:	f7ef f9ba 	bl	8000524 <__aeabi_i2d>
 80111b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111b4:	f7ef fa20 	bl	80005f8 <__aeabi_dmul>
 80111b8:	4b76      	ldr	r3, [pc, #472]	@ (8011394 <_dtoa_r+0x5cc>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	f7ef f866 	bl	800028c <__adddf3>
 80111c0:	4605      	mov	r5, r0
 80111c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80111c6:	2c00      	cmp	r4, #0
 80111c8:	f040 808d 	bne.w	80112e6 <_dtoa_r+0x51e>
 80111cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111d0:	4b71      	ldr	r3, [pc, #452]	@ (8011398 <_dtoa_r+0x5d0>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	f7ef f858 	bl	8000288 <__aeabi_dsub>
 80111d8:	4602      	mov	r2, r0
 80111da:	460b      	mov	r3, r1
 80111dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80111e0:	462a      	mov	r2, r5
 80111e2:	4633      	mov	r3, r6
 80111e4:	f7ef fc98 	bl	8000b18 <__aeabi_dcmpgt>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	f040 828b 	bne.w	8011704 <_dtoa_r+0x93c>
 80111ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111f2:	462a      	mov	r2, r5
 80111f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80111f8:	f7ef fc70 	bl	8000adc <__aeabi_dcmplt>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	f040 8128 	bne.w	8011452 <_dtoa_r+0x68a>
 8011202:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011206:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801120a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801120c:	2b00      	cmp	r3, #0
 801120e:	f2c0 815a 	blt.w	80114c6 <_dtoa_r+0x6fe>
 8011212:	2f0e      	cmp	r7, #14
 8011214:	f300 8157 	bgt.w	80114c6 <_dtoa_r+0x6fe>
 8011218:	4b5a      	ldr	r3, [pc, #360]	@ (8011384 <_dtoa_r+0x5bc>)
 801121a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801121e:	ed93 7b00 	vldr	d7, [r3]
 8011222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011224:	2b00      	cmp	r3, #0
 8011226:	ed8d 7b00 	vstr	d7, [sp]
 801122a:	da03      	bge.n	8011234 <_dtoa_r+0x46c>
 801122c:	9b07      	ldr	r3, [sp, #28]
 801122e:	2b00      	cmp	r3, #0
 8011230:	f340 8101 	ble.w	8011436 <_dtoa_r+0x66e>
 8011234:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011238:	4656      	mov	r6, sl
 801123a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801123e:	4620      	mov	r0, r4
 8011240:	4629      	mov	r1, r5
 8011242:	f7ef fb03 	bl	800084c <__aeabi_ddiv>
 8011246:	f7ef fc87 	bl	8000b58 <__aeabi_d2iz>
 801124a:	4680      	mov	r8, r0
 801124c:	f7ef f96a 	bl	8000524 <__aeabi_i2d>
 8011250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011254:	f7ef f9d0 	bl	80005f8 <__aeabi_dmul>
 8011258:	4602      	mov	r2, r0
 801125a:	460b      	mov	r3, r1
 801125c:	4620      	mov	r0, r4
 801125e:	4629      	mov	r1, r5
 8011260:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011264:	f7ef f810 	bl	8000288 <__aeabi_dsub>
 8011268:	f806 4b01 	strb.w	r4, [r6], #1
 801126c:	9d07      	ldr	r5, [sp, #28]
 801126e:	eba6 040a 	sub.w	r4, r6, sl
 8011272:	42a5      	cmp	r5, r4
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	f040 8117 	bne.w	80114aa <_dtoa_r+0x6e2>
 801127c:	f7ef f806 	bl	800028c <__adddf3>
 8011280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011284:	4604      	mov	r4, r0
 8011286:	460d      	mov	r5, r1
 8011288:	f7ef fc46 	bl	8000b18 <__aeabi_dcmpgt>
 801128c:	2800      	cmp	r0, #0
 801128e:	f040 80f9 	bne.w	8011484 <_dtoa_r+0x6bc>
 8011292:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011296:	4620      	mov	r0, r4
 8011298:	4629      	mov	r1, r5
 801129a:	f7ef fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 801129e:	b118      	cbz	r0, 80112a8 <_dtoa_r+0x4e0>
 80112a0:	f018 0f01 	tst.w	r8, #1
 80112a4:	f040 80ee 	bne.w	8011484 <_dtoa_r+0x6bc>
 80112a8:	4649      	mov	r1, r9
 80112aa:	4658      	mov	r0, fp
 80112ac:	f000 fe94 	bl	8011fd8 <_Bfree>
 80112b0:	2300      	movs	r3, #0
 80112b2:	7033      	strb	r3, [r6, #0]
 80112b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80112b6:	3701      	adds	r7, #1
 80112b8:	601f      	str	r7, [r3, #0]
 80112ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f000 831d 	beq.w	80118fc <_dtoa_r+0xb34>
 80112c2:	601e      	str	r6, [r3, #0]
 80112c4:	e31a      	b.n	80118fc <_dtoa_r+0xb34>
 80112c6:	07e2      	lsls	r2, r4, #31
 80112c8:	d505      	bpl.n	80112d6 <_dtoa_r+0x50e>
 80112ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80112ce:	f7ef f993 	bl	80005f8 <__aeabi_dmul>
 80112d2:	3601      	adds	r6, #1
 80112d4:	2301      	movs	r3, #1
 80112d6:	1064      	asrs	r4, r4, #1
 80112d8:	3508      	adds	r5, #8
 80112da:	e73f      	b.n	801115c <_dtoa_r+0x394>
 80112dc:	2602      	movs	r6, #2
 80112de:	e742      	b.n	8011166 <_dtoa_r+0x39e>
 80112e0:	9c07      	ldr	r4, [sp, #28]
 80112e2:	9704      	str	r7, [sp, #16]
 80112e4:	e761      	b.n	80111aa <_dtoa_r+0x3e2>
 80112e6:	4b27      	ldr	r3, [pc, #156]	@ (8011384 <_dtoa_r+0x5bc>)
 80112e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80112ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80112f2:	4454      	add	r4, sl
 80112f4:	2900      	cmp	r1, #0
 80112f6:	d053      	beq.n	80113a0 <_dtoa_r+0x5d8>
 80112f8:	4928      	ldr	r1, [pc, #160]	@ (801139c <_dtoa_r+0x5d4>)
 80112fa:	2000      	movs	r0, #0
 80112fc:	f7ef faa6 	bl	800084c <__aeabi_ddiv>
 8011300:	4633      	mov	r3, r6
 8011302:	462a      	mov	r2, r5
 8011304:	f7ee ffc0 	bl	8000288 <__aeabi_dsub>
 8011308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801130c:	4656      	mov	r6, sl
 801130e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011312:	f7ef fc21 	bl	8000b58 <__aeabi_d2iz>
 8011316:	4605      	mov	r5, r0
 8011318:	f7ef f904 	bl	8000524 <__aeabi_i2d>
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011324:	f7ee ffb0 	bl	8000288 <__aeabi_dsub>
 8011328:	3530      	adds	r5, #48	@ 0x30
 801132a:	4602      	mov	r2, r0
 801132c:	460b      	mov	r3, r1
 801132e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011332:	f806 5b01 	strb.w	r5, [r6], #1
 8011336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801133a:	f7ef fbcf 	bl	8000adc <__aeabi_dcmplt>
 801133e:	2800      	cmp	r0, #0
 8011340:	d171      	bne.n	8011426 <_dtoa_r+0x65e>
 8011342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011346:	4911      	ldr	r1, [pc, #68]	@ (801138c <_dtoa_r+0x5c4>)
 8011348:	2000      	movs	r0, #0
 801134a:	f7ee ff9d 	bl	8000288 <__aeabi_dsub>
 801134e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011352:	f7ef fbc3 	bl	8000adc <__aeabi_dcmplt>
 8011356:	2800      	cmp	r0, #0
 8011358:	f040 8095 	bne.w	8011486 <_dtoa_r+0x6be>
 801135c:	42a6      	cmp	r6, r4
 801135e:	f43f af50 	beq.w	8011202 <_dtoa_r+0x43a>
 8011362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011366:	4b0a      	ldr	r3, [pc, #40]	@ (8011390 <_dtoa_r+0x5c8>)
 8011368:	2200      	movs	r2, #0
 801136a:	f7ef f945 	bl	80005f8 <__aeabi_dmul>
 801136e:	4b08      	ldr	r3, [pc, #32]	@ (8011390 <_dtoa_r+0x5c8>)
 8011370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011374:	2200      	movs	r2, #0
 8011376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801137a:	f7ef f93d 	bl	80005f8 <__aeabi_dmul>
 801137e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011382:	e7c4      	b.n	801130e <_dtoa_r+0x546>
 8011384:	08014398 	.word	0x08014398
 8011388:	08014370 	.word	0x08014370
 801138c:	3ff00000 	.word	0x3ff00000
 8011390:	40240000 	.word	0x40240000
 8011394:	401c0000 	.word	0x401c0000
 8011398:	40140000 	.word	0x40140000
 801139c:	3fe00000 	.word	0x3fe00000
 80113a0:	4631      	mov	r1, r6
 80113a2:	4628      	mov	r0, r5
 80113a4:	f7ef f928 	bl	80005f8 <__aeabi_dmul>
 80113a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80113ae:	4656      	mov	r6, sl
 80113b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113b4:	f7ef fbd0 	bl	8000b58 <__aeabi_d2iz>
 80113b8:	4605      	mov	r5, r0
 80113ba:	f7ef f8b3 	bl	8000524 <__aeabi_i2d>
 80113be:	4602      	mov	r2, r0
 80113c0:	460b      	mov	r3, r1
 80113c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113c6:	f7ee ff5f 	bl	8000288 <__aeabi_dsub>
 80113ca:	3530      	adds	r5, #48	@ 0x30
 80113cc:	f806 5b01 	strb.w	r5, [r6], #1
 80113d0:	4602      	mov	r2, r0
 80113d2:	460b      	mov	r3, r1
 80113d4:	42a6      	cmp	r6, r4
 80113d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113da:	f04f 0200 	mov.w	r2, #0
 80113de:	d124      	bne.n	801142a <_dtoa_r+0x662>
 80113e0:	4bac      	ldr	r3, [pc, #688]	@ (8011694 <_dtoa_r+0x8cc>)
 80113e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80113e6:	f7ee ff51 	bl	800028c <__adddf3>
 80113ea:	4602      	mov	r2, r0
 80113ec:	460b      	mov	r3, r1
 80113ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113f2:	f7ef fb91 	bl	8000b18 <__aeabi_dcmpgt>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d145      	bne.n	8011486 <_dtoa_r+0x6be>
 80113fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113fe:	49a5      	ldr	r1, [pc, #660]	@ (8011694 <_dtoa_r+0x8cc>)
 8011400:	2000      	movs	r0, #0
 8011402:	f7ee ff41 	bl	8000288 <__aeabi_dsub>
 8011406:	4602      	mov	r2, r0
 8011408:	460b      	mov	r3, r1
 801140a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801140e:	f7ef fb65 	bl	8000adc <__aeabi_dcmplt>
 8011412:	2800      	cmp	r0, #0
 8011414:	f43f aef5 	beq.w	8011202 <_dtoa_r+0x43a>
 8011418:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801141a:	1e73      	subs	r3, r6, #1
 801141c:	9315      	str	r3, [sp, #84]	@ 0x54
 801141e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011422:	2b30      	cmp	r3, #48	@ 0x30
 8011424:	d0f8      	beq.n	8011418 <_dtoa_r+0x650>
 8011426:	9f04      	ldr	r7, [sp, #16]
 8011428:	e73e      	b.n	80112a8 <_dtoa_r+0x4e0>
 801142a:	4b9b      	ldr	r3, [pc, #620]	@ (8011698 <_dtoa_r+0x8d0>)
 801142c:	f7ef f8e4 	bl	80005f8 <__aeabi_dmul>
 8011430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011434:	e7bc      	b.n	80113b0 <_dtoa_r+0x5e8>
 8011436:	d10c      	bne.n	8011452 <_dtoa_r+0x68a>
 8011438:	4b98      	ldr	r3, [pc, #608]	@ (801169c <_dtoa_r+0x8d4>)
 801143a:	2200      	movs	r2, #0
 801143c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011440:	f7ef f8da 	bl	80005f8 <__aeabi_dmul>
 8011444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011448:	f7ef fb5c 	bl	8000b04 <__aeabi_dcmpge>
 801144c:	2800      	cmp	r0, #0
 801144e:	f000 8157 	beq.w	8011700 <_dtoa_r+0x938>
 8011452:	2400      	movs	r4, #0
 8011454:	4625      	mov	r5, r4
 8011456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011458:	43db      	mvns	r3, r3
 801145a:	9304      	str	r3, [sp, #16]
 801145c:	4656      	mov	r6, sl
 801145e:	2700      	movs	r7, #0
 8011460:	4621      	mov	r1, r4
 8011462:	4658      	mov	r0, fp
 8011464:	f000 fdb8 	bl	8011fd8 <_Bfree>
 8011468:	2d00      	cmp	r5, #0
 801146a:	d0dc      	beq.n	8011426 <_dtoa_r+0x65e>
 801146c:	b12f      	cbz	r7, 801147a <_dtoa_r+0x6b2>
 801146e:	42af      	cmp	r7, r5
 8011470:	d003      	beq.n	801147a <_dtoa_r+0x6b2>
 8011472:	4639      	mov	r1, r7
 8011474:	4658      	mov	r0, fp
 8011476:	f000 fdaf 	bl	8011fd8 <_Bfree>
 801147a:	4629      	mov	r1, r5
 801147c:	4658      	mov	r0, fp
 801147e:	f000 fdab 	bl	8011fd8 <_Bfree>
 8011482:	e7d0      	b.n	8011426 <_dtoa_r+0x65e>
 8011484:	9704      	str	r7, [sp, #16]
 8011486:	4633      	mov	r3, r6
 8011488:	461e      	mov	r6, r3
 801148a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801148e:	2a39      	cmp	r2, #57	@ 0x39
 8011490:	d107      	bne.n	80114a2 <_dtoa_r+0x6da>
 8011492:	459a      	cmp	sl, r3
 8011494:	d1f8      	bne.n	8011488 <_dtoa_r+0x6c0>
 8011496:	9a04      	ldr	r2, [sp, #16]
 8011498:	3201      	adds	r2, #1
 801149a:	9204      	str	r2, [sp, #16]
 801149c:	2230      	movs	r2, #48	@ 0x30
 801149e:	f88a 2000 	strb.w	r2, [sl]
 80114a2:	781a      	ldrb	r2, [r3, #0]
 80114a4:	3201      	adds	r2, #1
 80114a6:	701a      	strb	r2, [r3, #0]
 80114a8:	e7bd      	b.n	8011426 <_dtoa_r+0x65e>
 80114aa:	4b7b      	ldr	r3, [pc, #492]	@ (8011698 <_dtoa_r+0x8d0>)
 80114ac:	2200      	movs	r2, #0
 80114ae:	f7ef f8a3 	bl	80005f8 <__aeabi_dmul>
 80114b2:	2200      	movs	r2, #0
 80114b4:	2300      	movs	r3, #0
 80114b6:	4604      	mov	r4, r0
 80114b8:	460d      	mov	r5, r1
 80114ba:	f7ef fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80114be:	2800      	cmp	r0, #0
 80114c0:	f43f aebb 	beq.w	801123a <_dtoa_r+0x472>
 80114c4:	e6f0      	b.n	80112a8 <_dtoa_r+0x4e0>
 80114c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80114c8:	2a00      	cmp	r2, #0
 80114ca:	f000 80db 	beq.w	8011684 <_dtoa_r+0x8bc>
 80114ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114d0:	2a01      	cmp	r2, #1
 80114d2:	f300 80bf 	bgt.w	8011654 <_dtoa_r+0x88c>
 80114d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80114d8:	2a00      	cmp	r2, #0
 80114da:	f000 80b7 	beq.w	801164c <_dtoa_r+0x884>
 80114de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80114e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80114e4:	4646      	mov	r6, r8
 80114e6:	9a08      	ldr	r2, [sp, #32]
 80114e8:	2101      	movs	r1, #1
 80114ea:	441a      	add	r2, r3
 80114ec:	4658      	mov	r0, fp
 80114ee:	4498      	add	r8, r3
 80114f0:	9208      	str	r2, [sp, #32]
 80114f2:	f000 fe25 	bl	8012140 <__i2b>
 80114f6:	4605      	mov	r5, r0
 80114f8:	b15e      	cbz	r6, 8011512 <_dtoa_r+0x74a>
 80114fa:	9b08      	ldr	r3, [sp, #32]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	dd08      	ble.n	8011512 <_dtoa_r+0x74a>
 8011500:	42b3      	cmp	r3, r6
 8011502:	9a08      	ldr	r2, [sp, #32]
 8011504:	bfa8      	it	ge
 8011506:	4633      	movge	r3, r6
 8011508:	eba8 0803 	sub.w	r8, r8, r3
 801150c:	1af6      	subs	r6, r6, r3
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	9308      	str	r3, [sp, #32]
 8011512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011514:	b1f3      	cbz	r3, 8011554 <_dtoa_r+0x78c>
 8011516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011518:	2b00      	cmp	r3, #0
 801151a:	f000 80b7 	beq.w	801168c <_dtoa_r+0x8c4>
 801151e:	b18c      	cbz	r4, 8011544 <_dtoa_r+0x77c>
 8011520:	4629      	mov	r1, r5
 8011522:	4622      	mov	r2, r4
 8011524:	4658      	mov	r0, fp
 8011526:	f000 fecb 	bl	80122c0 <__pow5mult>
 801152a:	464a      	mov	r2, r9
 801152c:	4601      	mov	r1, r0
 801152e:	4605      	mov	r5, r0
 8011530:	4658      	mov	r0, fp
 8011532:	f000 fe1b 	bl	801216c <__multiply>
 8011536:	4649      	mov	r1, r9
 8011538:	9004      	str	r0, [sp, #16]
 801153a:	4658      	mov	r0, fp
 801153c:	f000 fd4c 	bl	8011fd8 <_Bfree>
 8011540:	9b04      	ldr	r3, [sp, #16]
 8011542:	4699      	mov	r9, r3
 8011544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011546:	1b1a      	subs	r2, r3, r4
 8011548:	d004      	beq.n	8011554 <_dtoa_r+0x78c>
 801154a:	4649      	mov	r1, r9
 801154c:	4658      	mov	r0, fp
 801154e:	f000 feb7 	bl	80122c0 <__pow5mult>
 8011552:	4681      	mov	r9, r0
 8011554:	2101      	movs	r1, #1
 8011556:	4658      	mov	r0, fp
 8011558:	f000 fdf2 	bl	8012140 <__i2b>
 801155c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801155e:	4604      	mov	r4, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	f000 81cf 	beq.w	8011904 <_dtoa_r+0xb3c>
 8011566:	461a      	mov	r2, r3
 8011568:	4601      	mov	r1, r0
 801156a:	4658      	mov	r0, fp
 801156c:	f000 fea8 	bl	80122c0 <__pow5mult>
 8011570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011572:	2b01      	cmp	r3, #1
 8011574:	4604      	mov	r4, r0
 8011576:	f300 8095 	bgt.w	80116a4 <_dtoa_r+0x8dc>
 801157a:	9b02      	ldr	r3, [sp, #8]
 801157c:	2b00      	cmp	r3, #0
 801157e:	f040 8087 	bne.w	8011690 <_dtoa_r+0x8c8>
 8011582:	9b03      	ldr	r3, [sp, #12]
 8011584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011588:	2b00      	cmp	r3, #0
 801158a:	f040 8089 	bne.w	80116a0 <_dtoa_r+0x8d8>
 801158e:	9b03      	ldr	r3, [sp, #12]
 8011590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011594:	0d1b      	lsrs	r3, r3, #20
 8011596:	051b      	lsls	r3, r3, #20
 8011598:	b12b      	cbz	r3, 80115a6 <_dtoa_r+0x7de>
 801159a:	9b08      	ldr	r3, [sp, #32]
 801159c:	3301      	adds	r3, #1
 801159e:	9308      	str	r3, [sp, #32]
 80115a0:	f108 0801 	add.w	r8, r8, #1
 80115a4:	2301      	movs	r3, #1
 80115a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80115a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f000 81b0 	beq.w	8011910 <_dtoa_r+0xb48>
 80115b0:	6923      	ldr	r3, [r4, #16]
 80115b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115b6:	6918      	ldr	r0, [r3, #16]
 80115b8:	f000 fd76 	bl	80120a8 <__hi0bits>
 80115bc:	f1c0 0020 	rsb	r0, r0, #32
 80115c0:	9b08      	ldr	r3, [sp, #32]
 80115c2:	4418      	add	r0, r3
 80115c4:	f010 001f 	ands.w	r0, r0, #31
 80115c8:	d077      	beq.n	80116ba <_dtoa_r+0x8f2>
 80115ca:	f1c0 0320 	rsb	r3, r0, #32
 80115ce:	2b04      	cmp	r3, #4
 80115d0:	dd6b      	ble.n	80116aa <_dtoa_r+0x8e2>
 80115d2:	9b08      	ldr	r3, [sp, #32]
 80115d4:	f1c0 001c 	rsb	r0, r0, #28
 80115d8:	4403      	add	r3, r0
 80115da:	4480      	add	r8, r0
 80115dc:	4406      	add	r6, r0
 80115de:	9308      	str	r3, [sp, #32]
 80115e0:	f1b8 0f00 	cmp.w	r8, #0
 80115e4:	dd05      	ble.n	80115f2 <_dtoa_r+0x82a>
 80115e6:	4649      	mov	r1, r9
 80115e8:	4642      	mov	r2, r8
 80115ea:	4658      	mov	r0, fp
 80115ec:	f000 fec2 	bl	8012374 <__lshift>
 80115f0:	4681      	mov	r9, r0
 80115f2:	9b08      	ldr	r3, [sp, #32]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	dd05      	ble.n	8011604 <_dtoa_r+0x83c>
 80115f8:	4621      	mov	r1, r4
 80115fa:	461a      	mov	r2, r3
 80115fc:	4658      	mov	r0, fp
 80115fe:	f000 feb9 	bl	8012374 <__lshift>
 8011602:	4604      	mov	r4, r0
 8011604:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011606:	2b00      	cmp	r3, #0
 8011608:	d059      	beq.n	80116be <_dtoa_r+0x8f6>
 801160a:	4621      	mov	r1, r4
 801160c:	4648      	mov	r0, r9
 801160e:	f000 ff1d 	bl	801244c <__mcmp>
 8011612:	2800      	cmp	r0, #0
 8011614:	da53      	bge.n	80116be <_dtoa_r+0x8f6>
 8011616:	1e7b      	subs	r3, r7, #1
 8011618:	9304      	str	r3, [sp, #16]
 801161a:	4649      	mov	r1, r9
 801161c:	2300      	movs	r3, #0
 801161e:	220a      	movs	r2, #10
 8011620:	4658      	mov	r0, fp
 8011622:	f000 fcfb 	bl	801201c <__multadd>
 8011626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011628:	4681      	mov	r9, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	f000 8172 	beq.w	8011914 <_dtoa_r+0xb4c>
 8011630:	2300      	movs	r3, #0
 8011632:	4629      	mov	r1, r5
 8011634:	220a      	movs	r2, #10
 8011636:	4658      	mov	r0, fp
 8011638:	f000 fcf0 	bl	801201c <__multadd>
 801163c:	9b00      	ldr	r3, [sp, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	4605      	mov	r5, r0
 8011642:	dc67      	bgt.n	8011714 <_dtoa_r+0x94c>
 8011644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011646:	2b02      	cmp	r3, #2
 8011648:	dc41      	bgt.n	80116ce <_dtoa_r+0x906>
 801164a:	e063      	b.n	8011714 <_dtoa_r+0x94c>
 801164c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801164e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011652:	e746      	b.n	80114e2 <_dtoa_r+0x71a>
 8011654:	9b07      	ldr	r3, [sp, #28]
 8011656:	1e5c      	subs	r4, r3, #1
 8011658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801165a:	42a3      	cmp	r3, r4
 801165c:	bfbf      	itttt	lt
 801165e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011660:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011662:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011664:	1ae3      	sublt	r3, r4, r3
 8011666:	bfb4      	ite	lt
 8011668:	18d2      	addlt	r2, r2, r3
 801166a:	1b1c      	subge	r4, r3, r4
 801166c:	9b07      	ldr	r3, [sp, #28]
 801166e:	bfbc      	itt	lt
 8011670:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011672:	2400      	movlt	r4, #0
 8011674:	2b00      	cmp	r3, #0
 8011676:	bfb5      	itete	lt
 8011678:	eba8 0603 	sublt.w	r6, r8, r3
 801167c:	9b07      	ldrge	r3, [sp, #28]
 801167e:	2300      	movlt	r3, #0
 8011680:	4646      	movge	r6, r8
 8011682:	e730      	b.n	80114e6 <_dtoa_r+0x71e>
 8011684:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011686:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011688:	4646      	mov	r6, r8
 801168a:	e735      	b.n	80114f8 <_dtoa_r+0x730>
 801168c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801168e:	e75c      	b.n	801154a <_dtoa_r+0x782>
 8011690:	2300      	movs	r3, #0
 8011692:	e788      	b.n	80115a6 <_dtoa_r+0x7de>
 8011694:	3fe00000 	.word	0x3fe00000
 8011698:	40240000 	.word	0x40240000
 801169c:	40140000 	.word	0x40140000
 80116a0:	9b02      	ldr	r3, [sp, #8]
 80116a2:	e780      	b.n	80115a6 <_dtoa_r+0x7de>
 80116a4:	2300      	movs	r3, #0
 80116a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80116a8:	e782      	b.n	80115b0 <_dtoa_r+0x7e8>
 80116aa:	d099      	beq.n	80115e0 <_dtoa_r+0x818>
 80116ac:	9a08      	ldr	r2, [sp, #32]
 80116ae:	331c      	adds	r3, #28
 80116b0:	441a      	add	r2, r3
 80116b2:	4498      	add	r8, r3
 80116b4:	441e      	add	r6, r3
 80116b6:	9208      	str	r2, [sp, #32]
 80116b8:	e792      	b.n	80115e0 <_dtoa_r+0x818>
 80116ba:	4603      	mov	r3, r0
 80116bc:	e7f6      	b.n	80116ac <_dtoa_r+0x8e4>
 80116be:	9b07      	ldr	r3, [sp, #28]
 80116c0:	9704      	str	r7, [sp, #16]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	dc20      	bgt.n	8011708 <_dtoa_r+0x940>
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ca:	2b02      	cmp	r3, #2
 80116cc:	dd1e      	ble.n	801170c <_dtoa_r+0x944>
 80116ce:	9b00      	ldr	r3, [sp, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f47f aec0 	bne.w	8011456 <_dtoa_r+0x68e>
 80116d6:	4621      	mov	r1, r4
 80116d8:	2205      	movs	r2, #5
 80116da:	4658      	mov	r0, fp
 80116dc:	f000 fc9e 	bl	801201c <__multadd>
 80116e0:	4601      	mov	r1, r0
 80116e2:	4604      	mov	r4, r0
 80116e4:	4648      	mov	r0, r9
 80116e6:	f000 feb1 	bl	801244c <__mcmp>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	f77f aeb3 	ble.w	8011456 <_dtoa_r+0x68e>
 80116f0:	4656      	mov	r6, sl
 80116f2:	2331      	movs	r3, #49	@ 0x31
 80116f4:	f806 3b01 	strb.w	r3, [r6], #1
 80116f8:	9b04      	ldr	r3, [sp, #16]
 80116fa:	3301      	adds	r3, #1
 80116fc:	9304      	str	r3, [sp, #16]
 80116fe:	e6ae      	b.n	801145e <_dtoa_r+0x696>
 8011700:	9c07      	ldr	r4, [sp, #28]
 8011702:	9704      	str	r7, [sp, #16]
 8011704:	4625      	mov	r5, r4
 8011706:	e7f3      	b.n	80116f0 <_dtoa_r+0x928>
 8011708:	9b07      	ldr	r3, [sp, #28]
 801170a:	9300      	str	r3, [sp, #0]
 801170c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801170e:	2b00      	cmp	r3, #0
 8011710:	f000 8104 	beq.w	801191c <_dtoa_r+0xb54>
 8011714:	2e00      	cmp	r6, #0
 8011716:	dd05      	ble.n	8011724 <_dtoa_r+0x95c>
 8011718:	4629      	mov	r1, r5
 801171a:	4632      	mov	r2, r6
 801171c:	4658      	mov	r0, fp
 801171e:	f000 fe29 	bl	8012374 <__lshift>
 8011722:	4605      	mov	r5, r0
 8011724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011726:	2b00      	cmp	r3, #0
 8011728:	d05a      	beq.n	80117e0 <_dtoa_r+0xa18>
 801172a:	6869      	ldr	r1, [r5, #4]
 801172c:	4658      	mov	r0, fp
 801172e:	f000 fc13 	bl	8011f58 <_Balloc>
 8011732:	4606      	mov	r6, r0
 8011734:	b928      	cbnz	r0, 8011742 <_dtoa_r+0x97a>
 8011736:	4b84      	ldr	r3, [pc, #528]	@ (8011948 <_dtoa_r+0xb80>)
 8011738:	4602      	mov	r2, r0
 801173a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801173e:	f7ff bb5a 	b.w	8010df6 <_dtoa_r+0x2e>
 8011742:	692a      	ldr	r2, [r5, #16]
 8011744:	3202      	adds	r2, #2
 8011746:	0092      	lsls	r2, r2, #2
 8011748:	f105 010c 	add.w	r1, r5, #12
 801174c:	300c      	adds	r0, #12
 801174e:	f7ff faa4 	bl	8010c9a <memcpy>
 8011752:	2201      	movs	r2, #1
 8011754:	4631      	mov	r1, r6
 8011756:	4658      	mov	r0, fp
 8011758:	f000 fe0c 	bl	8012374 <__lshift>
 801175c:	f10a 0301 	add.w	r3, sl, #1
 8011760:	9307      	str	r3, [sp, #28]
 8011762:	9b00      	ldr	r3, [sp, #0]
 8011764:	4453      	add	r3, sl
 8011766:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011768:	9b02      	ldr	r3, [sp, #8]
 801176a:	f003 0301 	and.w	r3, r3, #1
 801176e:	462f      	mov	r7, r5
 8011770:	930a      	str	r3, [sp, #40]	@ 0x28
 8011772:	4605      	mov	r5, r0
 8011774:	9b07      	ldr	r3, [sp, #28]
 8011776:	4621      	mov	r1, r4
 8011778:	3b01      	subs	r3, #1
 801177a:	4648      	mov	r0, r9
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	f7ff fa9a 	bl	8010cb6 <quorem>
 8011782:	4639      	mov	r1, r7
 8011784:	9002      	str	r0, [sp, #8]
 8011786:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801178a:	4648      	mov	r0, r9
 801178c:	f000 fe5e 	bl	801244c <__mcmp>
 8011790:	462a      	mov	r2, r5
 8011792:	9008      	str	r0, [sp, #32]
 8011794:	4621      	mov	r1, r4
 8011796:	4658      	mov	r0, fp
 8011798:	f000 fe74 	bl	8012484 <__mdiff>
 801179c:	68c2      	ldr	r2, [r0, #12]
 801179e:	4606      	mov	r6, r0
 80117a0:	bb02      	cbnz	r2, 80117e4 <_dtoa_r+0xa1c>
 80117a2:	4601      	mov	r1, r0
 80117a4:	4648      	mov	r0, r9
 80117a6:	f000 fe51 	bl	801244c <__mcmp>
 80117aa:	4602      	mov	r2, r0
 80117ac:	4631      	mov	r1, r6
 80117ae:	4658      	mov	r0, fp
 80117b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80117b2:	f000 fc11 	bl	8011fd8 <_Bfree>
 80117b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117ba:	9e07      	ldr	r6, [sp, #28]
 80117bc:	ea43 0102 	orr.w	r1, r3, r2
 80117c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117c2:	4319      	orrs	r1, r3
 80117c4:	d110      	bne.n	80117e8 <_dtoa_r+0xa20>
 80117c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80117ca:	d029      	beq.n	8011820 <_dtoa_r+0xa58>
 80117cc:	9b08      	ldr	r3, [sp, #32]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	dd02      	ble.n	80117d8 <_dtoa_r+0xa10>
 80117d2:	9b02      	ldr	r3, [sp, #8]
 80117d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80117d8:	9b00      	ldr	r3, [sp, #0]
 80117da:	f883 8000 	strb.w	r8, [r3]
 80117de:	e63f      	b.n	8011460 <_dtoa_r+0x698>
 80117e0:	4628      	mov	r0, r5
 80117e2:	e7bb      	b.n	801175c <_dtoa_r+0x994>
 80117e4:	2201      	movs	r2, #1
 80117e6:	e7e1      	b.n	80117ac <_dtoa_r+0x9e4>
 80117e8:	9b08      	ldr	r3, [sp, #32]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	db04      	blt.n	80117f8 <_dtoa_r+0xa30>
 80117ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80117f0:	430b      	orrs	r3, r1
 80117f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80117f4:	430b      	orrs	r3, r1
 80117f6:	d120      	bne.n	801183a <_dtoa_r+0xa72>
 80117f8:	2a00      	cmp	r2, #0
 80117fa:	dded      	ble.n	80117d8 <_dtoa_r+0xa10>
 80117fc:	4649      	mov	r1, r9
 80117fe:	2201      	movs	r2, #1
 8011800:	4658      	mov	r0, fp
 8011802:	f000 fdb7 	bl	8012374 <__lshift>
 8011806:	4621      	mov	r1, r4
 8011808:	4681      	mov	r9, r0
 801180a:	f000 fe1f 	bl	801244c <__mcmp>
 801180e:	2800      	cmp	r0, #0
 8011810:	dc03      	bgt.n	801181a <_dtoa_r+0xa52>
 8011812:	d1e1      	bne.n	80117d8 <_dtoa_r+0xa10>
 8011814:	f018 0f01 	tst.w	r8, #1
 8011818:	d0de      	beq.n	80117d8 <_dtoa_r+0xa10>
 801181a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801181e:	d1d8      	bne.n	80117d2 <_dtoa_r+0xa0a>
 8011820:	9a00      	ldr	r2, [sp, #0]
 8011822:	2339      	movs	r3, #57	@ 0x39
 8011824:	7013      	strb	r3, [r2, #0]
 8011826:	4633      	mov	r3, r6
 8011828:	461e      	mov	r6, r3
 801182a:	3b01      	subs	r3, #1
 801182c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011830:	2a39      	cmp	r2, #57	@ 0x39
 8011832:	d052      	beq.n	80118da <_dtoa_r+0xb12>
 8011834:	3201      	adds	r2, #1
 8011836:	701a      	strb	r2, [r3, #0]
 8011838:	e612      	b.n	8011460 <_dtoa_r+0x698>
 801183a:	2a00      	cmp	r2, #0
 801183c:	dd07      	ble.n	801184e <_dtoa_r+0xa86>
 801183e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011842:	d0ed      	beq.n	8011820 <_dtoa_r+0xa58>
 8011844:	9a00      	ldr	r2, [sp, #0]
 8011846:	f108 0301 	add.w	r3, r8, #1
 801184a:	7013      	strb	r3, [r2, #0]
 801184c:	e608      	b.n	8011460 <_dtoa_r+0x698>
 801184e:	9b07      	ldr	r3, [sp, #28]
 8011850:	9a07      	ldr	r2, [sp, #28]
 8011852:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011858:	4293      	cmp	r3, r2
 801185a:	d028      	beq.n	80118ae <_dtoa_r+0xae6>
 801185c:	4649      	mov	r1, r9
 801185e:	2300      	movs	r3, #0
 8011860:	220a      	movs	r2, #10
 8011862:	4658      	mov	r0, fp
 8011864:	f000 fbda 	bl	801201c <__multadd>
 8011868:	42af      	cmp	r7, r5
 801186a:	4681      	mov	r9, r0
 801186c:	f04f 0300 	mov.w	r3, #0
 8011870:	f04f 020a 	mov.w	r2, #10
 8011874:	4639      	mov	r1, r7
 8011876:	4658      	mov	r0, fp
 8011878:	d107      	bne.n	801188a <_dtoa_r+0xac2>
 801187a:	f000 fbcf 	bl	801201c <__multadd>
 801187e:	4607      	mov	r7, r0
 8011880:	4605      	mov	r5, r0
 8011882:	9b07      	ldr	r3, [sp, #28]
 8011884:	3301      	adds	r3, #1
 8011886:	9307      	str	r3, [sp, #28]
 8011888:	e774      	b.n	8011774 <_dtoa_r+0x9ac>
 801188a:	f000 fbc7 	bl	801201c <__multadd>
 801188e:	4629      	mov	r1, r5
 8011890:	4607      	mov	r7, r0
 8011892:	2300      	movs	r3, #0
 8011894:	220a      	movs	r2, #10
 8011896:	4658      	mov	r0, fp
 8011898:	f000 fbc0 	bl	801201c <__multadd>
 801189c:	4605      	mov	r5, r0
 801189e:	e7f0      	b.n	8011882 <_dtoa_r+0xaba>
 80118a0:	9b00      	ldr	r3, [sp, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	bfcc      	ite	gt
 80118a6:	461e      	movgt	r6, r3
 80118a8:	2601      	movle	r6, #1
 80118aa:	4456      	add	r6, sl
 80118ac:	2700      	movs	r7, #0
 80118ae:	4649      	mov	r1, r9
 80118b0:	2201      	movs	r2, #1
 80118b2:	4658      	mov	r0, fp
 80118b4:	f000 fd5e 	bl	8012374 <__lshift>
 80118b8:	4621      	mov	r1, r4
 80118ba:	4681      	mov	r9, r0
 80118bc:	f000 fdc6 	bl	801244c <__mcmp>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	dcb0      	bgt.n	8011826 <_dtoa_r+0xa5e>
 80118c4:	d102      	bne.n	80118cc <_dtoa_r+0xb04>
 80118c6:	f018 0f01 	tst.w	r8, #1
 80118ca:	d1ac      	bne.n	8011826 <_dtoa_r+0xa5e>
 80118cc:	4633      	mov	r3, r6
 80118ce:	461e      	mov	r6, r3
 80118d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118d4:	2a30      	cmp	r2, #48	@ 0x30
 80118d6:	d0fa      	beq.n	80118ce <_dtoa_r+0xb06>
 80118d8:	e5c2      	b.n	8011460 <_dtoa_r+0x698>
 80118da:	459a      	cmp	sl, r3
 80118dc:	d1a4      	bne.n	8011828 <_dtoa_r+0xa60>
 80118de:	9b04      	ldr	r3, [sp, #16]
 80118e0:	3301      	adds	r3, #1
 80118e2:	9304      	str	r3, [sp, #16]
 80118e4:	2331      	movs	r3, #49	@ 0x31
 80118e6:	f88a 3000 	strb.w	r3, [sl]
 80118ea:	e5b9      	b.n	8011460 <_dtoa_r+0x698>
 80118ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801194c <_dtoa_r+0xb84>
 80118f2:	b11b      	cbz	r3, 80118fc <_dtoa_r+0xb34>
 80118f4:	f10a 0308 	add.w	r3, sl, #8
 80118f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80118fa:	6013      	str	r3, [r2, #0]
 80118fc:	4650      	mov	r0, sl
 80118fe:	b019      	add	sp, #100	@ 0x64
 8011900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011906:	2b01      	cmp	r3, #1
 8011908:	f77f ae37 	ble.w	801157a <_dtoa_r+0x7b2>
 801190c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801190e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011910:	2001      	movs	r0, #1
 8011912:	e655      	b.n	80115c0 <_dtoa_r+0x7f8>
 8011914:	9b00      	ldr	r3, [sp, #0]
 8011916:	2b00      	cmp	r3, #0
 8011918:	f77f aed6 	ble.w	80116c8 <_dtoa_r+0x900>
 801191c:	4656      	mov	r6, sl
 801191e:	4621      	mov	r1, r4
 8011920:	4648      	mov	r0, r9
 8011922:	f7ff f9c8 	bl	8010cb6 <quorem>
 8011926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801192a:	f806 8b01 	strb.w	r8, [r6], #1
 801192e:	9b00      	ldr	r3, [sp, #0]
 8011930:	eba6 020a 	sub.w	r2, r6, sl
 8011934:	4293      	cmp	r3, r2
 8011936:	ddb3      	ble.n	80118a0 <_dtoa_r+0xad8>
 8011938:	4649      	mov	r1, r9
 801193a:	2300      	movs	r3, #0
 801193c:	220a      	movs	r2, #10
 801193e:	4658      	mov	r0, fp
 8011940:	f000 fb6c 	bl	801201c <__multadd>
 8011944:	4681      	mov	r9, r0
 8011946:	e7ea      	b.n	801191e <_dtoa_r+0xb56>
 8011948:	080142e8 	.word	0x080142e8
 801194c:	0801426c 	.word	0x0801426c

08011950 <_free_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4605      	mov	r5, r0
 8011954:	2900      	cmp	r1, #0
 8011956:	d041      	beq.n	80119dc <_free_r+0x8c>
 8011958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801195c:	1f0c      	subs	r4, r1, #4
 801195e:	2b00      	cmp	r3, #0
 8011960:	bfb8      	it	lt
 8011962:	18e4      	addlt	r4, r4, r3
 8011964:	f000 faec 	bl	8011f40 <__malloc_lock>
 8011968:	4a1d      	ldr	r2, [pc, #116]	@ (80119e0 <_free_r+0x90>)
 801196a:	6813      	ldr	r3, [r2, #0]
 801196c:	b933      	cbnz	r3, 801197c <_free_r+0x2c>
 801196e:	6063      	str	r3, [r4, #4]
 8011970:	6014      	str	r4, [r2, #0]
 8011972:	4628      	mov	r0, r5
 8011974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011978:	f000 bae8 	b.w	8011f4c <__malloc_unlock>
 801197c:	42a3      	cmp	r3, r4
 801197e:	d908      	bls.n	8011992 <_free_r+0x42>
 8011980:	6820      	ldr	r0, [r4, #0]
 8011982:	1821      	adds	r1, r4, r0
 8011984:	428b      	cmp	r3, r1
 8011986:	bf01      	itttt	eq
 8011988:	6819      	ldreq	r1, [r3, #0]
 801198a:	685b      	ldreq	r3, [r3, #4]
 801198c:	1809      	addeq	r1, r1, r0
 801198e:	6021      	streq	r1, [r4, #0]
 8011990:	e7ed      	b.n	801196e <_free_r+0x1e>
 8011992:	461a      	mov	r2, r3
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	b10b      	cbz	r3, 801199c <_free_r+0x4c>
 8011998:	42a3      	cmp	r3, r4
 801199a:	d9fa      	bls.n	8011992 <_free_r+0x42>
 801199c:	6811      	ldr	r1, [r2, #0]
 801199e:	1850      	adds	r0, r2, r1
 80119a0:	42a0      	cmp	r0, r4
 80119a2:	d10b      	bne.n	80119bc <_free_r+0x6c>
 80119a4:	6820      	ldr	r0, [r4, #0]
 80119a6:	4401      	add	r1, r0
 80119a8:	1850      	adds	r0, r2, r1
 80119aa:	4283      	cmp	r3, r0
 80119ac:	6011      	str	r1, [r2, #0]
 80119ae:	d1e0      	bne.n	8011972 <_free_r+0x22>
 80119b0:	6818      	ldr	r0, [r3, #0]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	6053      	str	r3, [r2, #4]
 80119b6:	4408      	add	r0, r1
 80119b8:	6010      	str	r0, [r2, #0]
 80119ba:	e7da      	b.n	8011972 <_free_r+0x22>
 80119bc:	d902      	bls.n	80119c4 <_free_r+0x74>
 80119be:	230c      	movs	r3, #12
 80119c0:	602b      	str	r3, [r5, #0]
 80119c2:	e7d6      	b.n	8011972 <_free_r+0x22>
 80119c4:	6820      	ldr	r0, [r4, #0]
 80119c6:	1821      	adds	r1, r4, r0
 80119c8:	428b      	cmp	r3, r1
 80119ca:	bf04      	itt	eq
 80119cc:	6819      	ldreq	r1, [r3, #0]
 80119ce:	685b      	ldreq	r3, [r3, #4]
 80119d0:	6063      	str	r3, [r4, #4]
 80119d2:	bf04      	itt	eq
 80119d4:	1809      	addeq	r1, r1, r0
 80119d6:	6021      	streq	r1, [r4, #0]
 80119d8:	6054      	str	r4, [r2, #4]
 80119da:	e7ca      	b.n	8011972 <_free_r+0x22>
 80119dc:	bd38      	pop	{r3, r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	20005bf8 	.word	0x20005bf8

080119e4 <__ssputs_r>:
 80119e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e8:	688e      	ldr	r6, [r1, #8]
 80119ea:	461f      	mov	r7, r3
 80119ec:	42be      	cmp	r6, r7
 80119ee:	680b      	ldr	r3, [r1, #0]
 80119f0:	4682      	mov	sl, r0
 80119f2:	460c      	mov	r4, r1
 80119f4:	4690      	mov	r8, r2
 80119f6:	d82d      	bhi.n	8011a54 <__ssputs_r+0x70>
 80119f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80119fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a00:	d026      	beq.n	8011a50 <__ssputs_r+0x6c>
 8011a02:	6965      	ldr	r5, [r4, #20]
 8011a04:	6909      	ldr	r1, [r1, #16]
 8011a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a0a:	eba3 0901 	sub.w	r9, r3, r1
 8011a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a12:	1c7b      	adds	r3, r7, #1
 8011a14:	444b      	add	r3, r9
 8011a16:	106d      	asrs	r5, r5, #1
 8011a18:	429d      	cmp	r5, r3
 8011a1a:	bf38      	it	cc
 8011a1c:	461d      	movcc	r5, r3
 8011a1e:	0553      	lsls	r3, r2, #21
 8011a20:	d527      	bpl.n	8011a72 <__ssputs_r+0x8e>
 8011a22:	4629      	mov	r1, r5
 8011a24:	f000 f960 	bl	8011ce8 <_malloc_r>
 8011a28:	4606      	mov	r6, r0
 8011a2a:	b360      	cbz	r0, 8011a86 <__ssputs_r+0xa2>
 8011a2c:	6921      	ldr	r1, [r4, #16]
 8011a2e:	464a      	mov	r2, r9
 8011a30:	f7ff f933 	bl	8010c9a <memcpy>
 8011a34:	89a3      	ldrh	r3, [r4, #12]
 8011a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a3e:	81a3      	strh	r3, [r4, #12]
 8011a40:	6126      	str	r6, [r4, #16]
 8011a42:	6165      	str	r5, [r4, #20]
 8011a44:	444e      	add	r6, r9
 8011a46:	eba5 0509 	sub.w	r5, r5, r9
 8011a4a:	6026      	str	r6, [r4, #0]
 8011a4c:	60a5      	str	r5, [r4, #8]
 8011a4e:	463e      	mov	r6, r7
 8011a50:	42be      	cmp	r6, r7
 8011a52:	d900      	bls.n	8011a56 <__ssputs_r+0x72>
 8011a54:	463e      	mov	r6, r7
 8011a56:	6820      	ldr	r0, [r4, #0]
 8011a58:	4632      	mov	r2, r6
 8011a5a:	4641      	mov	r1, r8
 8011a5c:	f000 fe6f 	bl	801273e <memmove>
 8011a60:	68a3      	ldr	r3, [r4, #8]
 8011a62:	1b9b      	subs	r3, r3, r6
 8011a64:	60a3      	str	r3, [r4, #8]
 8011a66:	6823      	ldr	r3, [r4, #0]
 8011a68:	4433      	add	r3, r6
 8011a6a:	6023      	str	r3, [r4, #0]
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a72:	462a      	mov	r2, r5
 8011a74:	f000 fe35 	bl	80126e2 <_realloc_r>
 8011a78:	4606      	mov	r6, r0
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d1e0      	bne.n	8011a40 <__ssputs_r+0x5c>
 8011a7e:	6921      	ldr	r1, [r4, #16]
 8011a80:	4650      	mov	r0, sl
 8011a82:	f7ff ff65 	bl	8011950 <_free_r>
 8011a86:	230c      	movs	r3, #12
 8011a88:	f8ca 3000 	str.w	r3, [sl]
 8011a8c:	89a3      	ldrh	r3, [r4, #12]
 8011a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a92:	81a3      	strh	r3, [r4, #12]
 8011a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a98:	e7e9      	b.n	8011a6e <__ssputs_r+0x8a>
	...

08011a9c <_svfiprintf_r>:
 8011a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa0:	4698      	mov	r8, r3
 8011aa2:	898b      	ldrh	r3, [r1, #12]
 8011aa4:	061b      	lsls	r3, r3, #24
 8011aa6:	b09d      	sub	sp, #116	@ 0x74
 8011aa8:	4607      	mov	r7, r0
 8011aaa:	460d      	mov	r5, r1
 8011aac:	4614      	mov	r4, r2
 8011aae:	d510      	bpl.n	8011ad2 <_svfiprintf_r+0x36>
 8011ab0:	690b      	ldr	r3, [r1, #16]
 8011ab2:	b973      	cbnz	r3, 8011ad2 <_svfiprintf_r+0x36>
 8011ab4:	2140      	movs	r1, #64	@ 0x40
 8011ab6:	f000 f917 	bl	8011ce8 <_malloc_r>
 8011aba:	6028      	str	r0, [r5, #0]
 8011abc:	6128      	str	r0, [r5, #16]
 8011abe:	b930      	cbnz	r0, 8011ace <_svfiprintf_r+0x32>
 8011ac0:	230c      	movs	r3, #12
 8011ac2:	603b      	str	r3, [r7, #0]
 8011ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ac8:	b01d      	add	sp, #116	@ 0x74
 8011aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ace:	2340      	movs	r3, #64	@ 0x40
 8011ad0:	616b      	str	r3, [r5, #20]
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ad6:	2320      	movs	r3, #32
 8011ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ae0:	2330      	movs	r3, #48	@ 0x30
 8011ae2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011c80 <_svfiprintf_r+0x1e4>
 8011ae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011aea:	f04f 0901 	mov.w	r9, #1
 8011aee:	4623      	mov	r3, r4
 8011af0:	469a      	mov	sl, r3
 8011af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011af6:	b10a      	cbz	r2, 8011afc <_svfiprintf_r+0x60>
 8011af8:	2a25      	cmp	r2, #37	@ 0x25
 8011afa:	d1f9      	bne.n	8011af0 <_svfiprintf_r+0x54>
 8011afc:	ebba 0b04 	subs.w	fp, sl, r4
 8011b00:	d00b      	beq.n	8011b1a <_svfiprintf_r+0x7e>
 8011b02:	465b      	mov	r3, fp
 8011b04:	4622      	mov	r2, r4
 8011b06:	4629      	mov	r1, r5
 8011b08:	4638      	mov	r0, r7
 8011b0a:	f7ff ff6b 	bl	80119e4 <__ssputs_r>
 8011b0e:	3001      	adds	r0, #1
 8011b10:	f000 80a7 	beq.w	8011c62 <_svfiprintf_r+0x1c6>
 8011b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b16:	445a      	add	r2, fp
 8011b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	f000 809f 	beq.w	8011c62 <_svfiprintf_r+0x1c6>
 8011b24:	2300      	movs	r3, #0
 8011b26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b2e:	f10a 0a01 	add.w	sl, sl, #1
 8011b32:	9304      	str	r3, [sp, #16]
 8011b34:	9307      	str	r3, [sp, #28]
 8011b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b3c:	4654      	mov	r4, sl
 8011b3e:	2205      	movs	r2, #5
 8011b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b44:	484e      	ldr	r0, [pc, #312]	@ (8011c80 <_svfiprintf_r+0x1e4>)
 8011b46:	f7ee fb43 	bl	80001d0 <memchr>
 8011b4a:	9a04      	ldr	r2, [sp, #16]
 8011b4c:	b9d8      	cbnz	r0, 8011b86 <_svfiprintf_r+0xea>
 8011b4e:	06d0      	lsls	r0, r2, #27
 8011b50:	bf44      	itt	mi
 8011b52:	2320      	movmi	r3, #32
 8011b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b58:	0711      	lsls	r1, r2, #28
 8011b5a:	bf44      	itt	mi
 8011b5c:	232b      	movmi	r3, #43	@ 0x2b
 8011b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b62:	f89a 3000 	ldrb.w	r3, [sl]
 8011b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b68:	d015      	beq.n	8011b96 <_svfiprintf_r+0xfa>
 8011b6a:	9a07      	ldr	r2, [sp, #28]
 8011b6c:	4654      	mov	r4, sl
 8011b6e:	2000      	movs	r0, #0
 8011b70:	f04f 0c0a 	mov.w	ip, #10
 8011b74:	4621      	mov	r1, r4
 8011b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b7a:	3b30      	subs	r3, #48	@ 0x30
 8011b7c:	2b09      	cmp	r3, #9
 8011b7e:	d94b      	bls.n	8011c18 <_svfiprintf_r+0x17c>
 8011b80:	b1b0      	cbz	r0, 8011bb0 <_svfiprintf_r+0x114>
 8011b82:	9207      	str	r2, [sp, #28]
 8011b84:	e014      	b.n	8011bb0 <_svfiprintf_r+0x114>
 8011b86:	eba0 0308 	sub.w	r3, r0, r8
 8011b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	9304      	str	r3, [sp, #16]
 8011b92:	46a2      	mov	sl, r4
 8011b94:	e7d2      	b.n	8011b3c <_svfiprintf_r+0xa0>
 8011b96:	9b03      	ldr	r3, [sp, #12]
 8011b98:	1d19      	adds	r1, r3, #4
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	9103      	str	r1, [sp, #12]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	bfbb      	ittet	lt
 8011ba2:	425b      	neglt	r3, r3
 8011ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ba8:	9307      	strge	r3, [sp, #28]
 8011baa:	9307      	strlt	r3, [sp, #28]
 8011bac:	bfb8      	it	lt
 8011bae:	9204      	strlt	r2, [sp, #16]
 8011bb0:	7823      	ldrb	r3, [r4, #0]
 8011bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bb4:	d10a      	bne.n	8011bcc <_svfiprintf_r+0x130>
 8011bb6:	7863      	ldrb	r3, [r4, #1]
 8011bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bba:	d132      	bne.n	8011c22 <_svfiprintf_r+0x186>
 8011bbc:	9b03      	ldr	r3, [sp, #12]
 8011bbe:	1d1a      	adds	r2, r3, #4
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	9203      	str	r2, [sp, #12]
 8011bc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bc8:	3402      	adds	r4, #2
 8011bca:	9305      	str	r3, [sp, #20]
 8011bcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011c90 <_svfiprintf_r+0x1f4>
 8011bd0:	7821      	ldrb	r1, [r4, #0]
 8011bd2:	2203      	movs	r2, #3
 8011bd4:	4650      	mov	r0, sl
 8011bd6:	f7ee fafb 	bl	80001d0 <memchr>
 8011bda:	b138      	cbz	r0, 8011bec <_svfiprintf_r+0x150>
 8011bdc:	9b04      	ldr	r3, [sp, #16]
 8011bde:	eba0 000a 	sub.w	r0, r0, sl
 8011be2:	2240      	movs	r2, #64	@ 0x40
 8011be4:	4082      	lsls	r2, r0
 8011be6:	4313      	orrs	r3, r2
 8011be8:	3401      	adds	r4, #1
 8011bea:	9304      	str	r3, [sp, #16]
 8011bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf0:	4824      	ldr	r0, [pc, #144]	@ (8011c84 <_svfiprintf_r+0x1e8>)
 8011bf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011bf6:	2206      	movs	r2, #6
 8011bf8:	f7ee faea 	bl	80001d0 <memchr>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	d036      	beq.n	8011c6e <_svfiprintf_r+0x1d2>
 8011c00:	4b21      	ldr	r3, [pc, #132]	@ (8011c88 <_svfiprintf_r+0x1ec>)
 8011c02:	bb1b      	cbnz	r3, 8011c4c <_svfiprintf_r+0x1b0>
 8011c04:	9b03      	ldr	r3, [sp, #12]
 8011c06:	3307      	adds	r3, #7
 8011c08:	f023 0307 	bic.w	r3, r3, #7
 8011c0c:	3308      	adds	r3, #8
 8011c0e:	9303      	str	r3, [sp, #12]
 8011c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c12:	4433      	add	r3, r6
 8011c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c16:	e76a      	b.n	8011aee <_svfiprintf_r+0x52>
 8011c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c1c:	460c      	mov	r4, r1
 8011c1e:	2001      	movs	r0, #1
 8011c20:	e7a8      	b.n	8011b74 <_svfiprintf_r+0xd8>
 8011c22:	2300      	movs	r3, #0
 8011c24:	3401      	adds	r4, #1
 8011c26:	9305      	str	r3, [sp, #20]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	f04f 0c0a 	mov.w	ip, #10
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c34:	3a30      	subs	r2, #48	@ 0x30
 8011c36:	2a09      	cmp	r2, #9
 8011c38:	d903      	bls.n	8011c42 <_svfiprintf_r+0x1a6>
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d0c6      	beq.n	8011bcc <_svfiprintf_r+0x130>
 8011c3e:	9105      	str	r1, [sp, #20]
 8011c40:	e7c4      	b.n	8011bcc <_svfiprintf_r+0x130>
 8011c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c46:	4604      	mov	r4, r0
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e7f0      	b.n	8011c2e <_svfiprintf_r+0x192>
 8011c4c:	ab03      	add	r3, sp, #12
 8011c4e:	9300      	str	r3, [sp, #0]
 8011c50:	462a      	mov	r2, r5
 8011c52:	4b0e      	ldr	r3, [pc, #56]	@ (8011c8c <_svfiprintf_r+0x1f0>)
 8011c54:	a904      	add	r1, sp, #16
 8011c56:	4638      	mov	r0, r7
 8011c58:	f7fe faf6 	bl	8010248 <_printf_float>
 8011c5c:	1c42      	adds	r2, r0, #1
 8011c5e:	4606      	mov	r6, r0
 8011c60:	d1d6      	bne.n	8011c10 <_svfiprintf_r+0x174>
 8011c62:	89ab      	ldrh	r3, [r5, #12]
 8011c64:	065b      	lsls	r3, r3, #25
 8011c66:	f53f af2d 	bmi.w	8011ac4 <_svfiprintf_r+0x28>
 8011c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c6c:	e72c      	b.n	8011ac8 <_svfiprintf_r+0x2c>
 8011c6e:	ab03      	add	r3, sp, #12
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	462a      	mov	r2, r5
 8011c74:	4b05      	ldr	r3, [pc, #20]	@ (8011c8c <_svfiprintf_r+0x1f0>)
 8011c76:	a904      	add	r1, sp, #16
 8011c78:	4638      	mov	r0, r7
 8011c7a:	f7fe fd7d 	bl	8010778 <_printf_i>
 8011c7e:	e7ed      	b.n	8011c5c <_svfiprintf_r+0x1c0>
 8011c80:	080142f9 	.word	0x080142f9
 8011c84:	08014303 	.word	0x08014303
 8011c88:	08010249 	.word	0x08010249
 8011c8c:	080119e5 	.word	0x080119e5
 8011c90:	080142ff 	.word	0x080142ff

08011c94 <malloc>:
 8011c94:	4b02      	ldr	r3, [pc, #8]	@ (8011ca0 <malloc+0xc>)
 8011c96:	4601      	mov	r1, r0
 8011c98:	6818      	ldr	r0, [r3, #0]
 8011c9a:	f000 b825 	b.w	8011ce8 <_malloc_r>
 8011c9e:	bf00      	nop
 8011ca0:	20000170 	.word	0x20000170

08011ca4 <sbrk_aligned>:
 8011ca4:	b570      	push	{r4, r5, r6, lr}
 8011ca6:	4e0f      	ldr	r6, [pc, #60]	@ (8011ce4 <sbrk_aligned+0x40>)
 8011ca8:	460c      	mov	r4, r1
 8011caa:	6831      	ldr	r1, [r6, #0]
 8011cac:	4605      	mov	r5, r0
 8011cae:	b911      	cbnz	r1, 8011cb6 <sbrk_aligned+0x12>
 8011cb0:	f000 fd94 	bl	80127dc <_sbrk_r>
 8011cb4:	6030      	str	r0, [r6, #0]
 8011cb6:	4621      	mov	r1, r4
 8011cb8:	4628      	mov	r0, r5
 8011cba:	f000 fd8f 	bl	80127dc <_sbrk_r>
 8011cbe:	1c43      	adds	r3, r0, #1
 8011cc0:	d103      	bne.n	8011cca <sbrk_aligned+0x26>
 8011cc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	bd70      	pop	{r4, r5, r6, pc}
 8011cca:	1cc4      	adds	r4, r0, #3
 8011ccc:	f024 0403 	bic.w	r4, r4, #3
 8011cd0:	42a0      	cmp	r0, r4
 8011cd2:	d0f8      	beq.n	8011cc6 <sbrk_aligned+0x22>
 8011cd4:	1a21      	subs	r1, r4, r0
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f000 fd80 	bl	80127dc <_sbrk_r>
 8011cdc:	3001      	adds	r0, #1
 8011cde:	d1f2      	bne.n	8011cc6 <sbrk_aligned+0x22>
 8011ce0:	e7ef      	b.n	8011cc2 <sbrk_aligned+0x1e>
 8011ce2:	bf00      	nop
 8011ce4:	20005bf4 	.word	0x20005bf4

08011ce8 <_malloc_r>:
 8011ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cec:	1ccd      	adds	r5, r1, #3
 8011cee:	f025 0503 	bic.w	r5, r5, #3
 8011cf2:	3508      	adds	r5, #8
 8011cf4:	2d0c      	cmp	r5, #12
 8011cf6:	bf38      	it	cc
 8011cf8:	250c      	movcc	r5, #12
 8011cfa:	2d00      	cmp	r5, #0
 8011cfc:	4606      	mov	r6, r0
 8011cfe:	db01      	blt.n	8011d04 <_malloc_r+0x1c>
 8011d00:	42a9      	cmp	r1, r5
 8011d02:	d904      	bls.n	8011d0e <_malloc_r+0x26>
 8011d04:	230c      	movs	r3, #12
 8011d06:	6033      	str	r3, [r6, #0]
 8011d08:	2000      	movs	r0, #0
 8011d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011de4 <_malloc_r+0xfc>
 8011d12:	f000 f915 	bl	8011f40 <__malloc_lock>
 8011d16:	f8d8 3000 	ldr.w	r3, [r8]
 8011d1a:	461c      	mov	r4, r3
 8011d1c:	bb44      	cbnz	r4, 8011d70 <_malloc_r+0x88>
 8011d1e:	4629      	mov	r1, r5
 8011d20:	4630      	mov	r0, r6
 8011d22:	f7ff ffbf 	bl	8011ca4 <sbrk_aligned>
 8011d26:	1c43      	adds	r3, r0, #1
 8011d28:	4604      	mov	r4, r0
 8011d2a:	d158      	bne.n	8011dde <_malloc_r+0xf6>
 8011d2c:	f8d8 4000 	ldr.w	r4, [r8]
 8011d30:	4627      	mov	r7, r4
 8011d32:	2f00      	cmp	r7, #0
 8011d34:	d143      	bne.n	8011dbe <_malloc_r+0xd6>
 8011d36:	2c00      	cmp	r4, #0
 8011d38:	d04b      	beq.n	8011dd2 <_malloc_r+0xea>
 8011d3a:	6823      	ldr	r3, [r4, #0]
 8011d3c:	4639      	mov	r1, r7
 8011d3e:	4630      	mov	r0, r6
 8011d40:	eb04 0903 	add.w	r9, r4, r3
 8011d44:	f000 fd4a 	bl	80127dc <_sbrk_r>
 8011d48:	4581      	cmp	r9, r0
 8011d4a:	d142      	bne.n	8011dd2 <_malloc_r+0xea>
 8011d4c:	6821      	ldr	r1, [r4, #0]
 8011d4e:	1a6d      	subs	r5, r5, r1
 8011d50:	4629      	mov	r1, r5
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7ff ffa6 	bl	8011ca4 <sbrk_aligned>
 8011d58:	3001      	adds	r0, #1
 8011d5a:	d03a      	beq.n	8011dd2 <_malloc_r+0xea>
 8011d5c:	6823      	ldr	r3, [r4, #0]
 8011d5e:	442b      	add	r3, r5
 8011d60:	6023      	str	r3, [r4, #0]
 8011d62:	f8d8 3000 	ldr.w	r3, [r8]
 8011d66:	685a      	ldr	r2, [r3, #4]
 8011d68:	bb62      	cbnz	r2, 8011dc4 <_malloc_r+0xdc>
 8011d6a:	f8c8 7000 	str.w	r7, [r8]
 8011d6e:	e00f      	b.n	8011d90 <_malloc_r+0xa8>
 8011d70:	6822      	ldr	r2, [r4, #0]
 8011d72:	1b52      	subs	r2, r2, r5
 8011d74:	d420      	bmi.n	8011db8 <_malloc_r+0xd0>
 8011d76:	2a0b      	cmp	r2, #11
 8011d78:	d917      	bls.n	8011daa <_malloc_r+0xc2>
 8011d7a:	1961      	adds	r1, r4, r5
 8011d7c:	42a3      	cmp	r3, r4
 8011d7e:	6025      	str	r5, [r4, #0]
 8011d80:	bf18      	it	ne
 8011d82:	6059      	strne	r1, [r3, #4]
 8011d84:	6863      	ldr	r3, [r4, #4]
 8011d86:	bf08      	it	eq
 8011d88:	f8c8 1000 	streq.w	r1, [r8]
 8011d8c:	5162      	str	r2, [r4, r5]
 8011d8e:	604b      	str	r3, [r1, #4]
 8011d90:	4630      	mov	r0, r6
 8011d92:	f000 f8db 	bl	8011f4c <__malloc_unlock>
 8011d96:	f104 000b 	add.w	r0, r4, #11
 8011d9a:	1d23      	adds	r3, r4, #4
 8011d9c:	f020 0007 	bic.w	r0, r0, #7
 8011da0:	1ac2      	subs	r2, r0, r3
 8011da2:	bf1c      	itt	ne
 8011da4:	1a1b      	subne	r3, r3, r0
 8011da6:	50a3      	strne	r3, [r4, r2]
 8011da8:	e7af      	b.n	8011d0a <_malloc_r+0x22>
 8011daa:	6862      	ldr	r2, [r4, #4]
 8011dac:	42a3      	cmp	r3, r4
 8011dae:	bf0c      	ite	eq
 8011db0:	f8c8 2000 	streq.w	r2, [r8]
 8011db4:	605a      	strne	r2, [r3, #4]
 8011db6:	e7eb      	b.n	8011d90 <_malloc_r+0xa8>
 8011db8:	4623      	mov	r3, r4
 8011dba:	6864      	ldr	r4, [r4, #4]
 8011dbc:	e7ae      	b.n	8011d1c <_malloc_r+0x34>
 8011dbe:	463c      	mov	r4, r7
 8011dc0:	687f      	ldr	r7, [r7, #4]
 8011dc2:	e7b6      	b.n	8011d32 <_malloc_r+0x4a>
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	42a3      	cmp	r3, r4
 8011dca:	d1fb      	bne.n	8011dc4 <_malloc_r+0xdc>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	6053      	str	r3, [r2, #4]
 8011dd0:	e7de      	b.n	8011d90 <_malloc_r+0xa8>
 8011dd2:	230c      	movs	r3, #12
 8011dd4:	6033      	str	r3, [r6, #0]
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	f000 f8b8 	bl	8011f4c <__malloc_unlock>
 8011ddc:	e794      	b.n	8011d08 <_malloc_r+0x20>
 8011dde:	6005      	str	r5, [r0, #0]
 8011de0:	e7d6      	b.n	8011d90 <_malloc_r+0xa8>
 8011de2:	bf00      	nop
 8011de4:	20005bf8 	.word	0x20005bf8

08011de8 <__sflush_r>:
 8011de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df0:	0716      	lsls	r6, r2, #28
 8011df2:	4605      	mov	r5, r0
 8011df4:	460c      	mov	r4, r1
 8011df6:	d454      	bmi.n	8011ea2 <__sflush_r+0xba>
 8011df8:	684b      	ldr	r3, [r1, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	dc02      	bgt.n	8011e04 <__sflush_r+0x1c>
 8011dfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	dd48      	ble.n	8011e96 <__sflush_r+0xae>
 8011e04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e06:	2e00      	cmp	r6, #0
 8011e08:	d045      	beq.n	8011e96 <__sflush_r+0xae>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e10:	682f      	ldr	r7, [r5, #0]
 8011e12:	6a21      	ldr	r1, [r4, #32]
 8011e14:	602b      	str	r3, [r5, #0]
 8011e16:	d030      	beq.n	8011e7a <__sflush_r+0x92>
 8011e18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e1a:	89a3      	ldrh	r3, [r4, #12]
 8011e1c:	0759      	lsls	r1, r3, #29
 8011e1e:	d505      	bpl.n	8011e2c <__sflush_r+0x44>
 8011e20:	6863      	ldr	r3, [r4, #4]
 8011e22:	1ad2      	subs	r2, r2, r3
 8011e24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e26:	b10b      	cbz	r3, 8011e2c <__sflush_r+0x44>
 8011e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e2a:	1ad2      	subs	r2, r2, r3
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e30:	6a21      	ldr	r1, [r4, #32]
 8011e32:	4628      	mov	r0, r5
 8011e34:	47b0      	blx	r6
 8011e36:	1c43      	adds	r3, r0, #1
 8011e38:	89a3      	ldrh	r3, [r4, #12]
 8011e3a:	d106      	bne.n	8011e4a <__sflush_r+0x62>
 8011e3c:	6829      	ldr	r1, [r5, #0]
 8011e3e:	291d      	cmp	r1, #29
 8011e40:	d82b      	bhi.n	8011e9a <__sflush_r+0xb2>
 8011e42:	4a2a      	ldr	r2, [pc, #168]	@ (8011eec <__sflush_r+0x104>)
 8011e44:	410a      	asrs	r2, r1
 8011e46:	07d6      	lsls	r6, r2, #31
 8011e48:	d427      	bmi.n	8011e9a <__sflush_r+0xb2>
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	6062      	str	r2, [r4, #4]
 8011e4e:	04d9      	lsls	r1, r3, #19
 8011e50:	6922      	ldr	r2, [r4, #16]
 8011e52:	6022      	str	r2, [r4, #0]
 8011e54:	d504      	bpl.n	8011e60 <__sflush_r+0x78>
 8011e56:	1c42      	adds	r2, r0, #1
 8011e58:	d101      	bne.n	8011e5e <__sflush_r+0x76>
 8011e5a:	682b      	ldr	r3, [r5, #0]
 8011e5c:	b903      	cbnz	r3, 8011e60 <__sflush_r+0x78>
 8011e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e62:	602f      	str	r7, [r5, #0]
 8011e64:	b1b9      	cbz	r1, 8011e96 <__sflush_r+0xae>
 8011e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e6a:	4299      	cmp	r1, r3
 8011e6c:	d002      	beq.n	8011e74 <__sflush_r+0x8c>
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f7ff fd6e 	bl	8011950 <_free_r>
 8011e74:	2300      	movs	r3, #0
 8011e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e78:	e00d      	b.n	8011e96 <__sflush_r+0xae>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	47b0      	blx	r6
 8011e80:	4602      	mov	r2, r0
 8011e82:	1c50      	adds	r0, r2, #1
 8011e84:	d1c9      	bne.n	8011e1a <__sflush_r+0x32>
 8011e86:	682b      	ldr	r3, [r5, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d0c6      	beq.n	8011e1a <__sflush_r+0x32>
 8011e8c:	2b1d      	cmp	r3, #29
 8011e8e:	d001      	beq.n	8011e94 <__sflush_r+0xac>
 8011e90:	2b16      	cmp	r3, #22
 8011e92:	d11e      	bne.n	8011ed2 <__sflush_r+0xea>
 8011e94:	602f      	str	r7, [r5, #0]
 8011e96:	2000      	movs	r0, #0
 8011e98:	e022      	b.n	8011ee0 <__sflush_r+0xf8>
 8011e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e9e:	b21b      	sxth	r3, r3
 8011ea0:	e01b      	b.n	8011eda <__sflush_r+0xf2>
 8011ea2:	690f      	ldr	r7, [r1, #16]
 8011ea4:	2f00      	cmp	r7, #0
 8011ea6:	d0f6      	beq.n	8011e96 <__sflush_r+0xae>
 8011ea8:	0793      	lsls	r3, r2, #30
 8011eaa:	680e      	ldr	r6, [r1, #0]
 8011eac:	bf08      	it	eq
 8011eae:	694b      	ldreq	r3, [r1, #20]
 8011eb0:	600f      	str	r7, [r1, #0]
 8011eb2:	bf18      	it	ne
 8011eb4:	2300      	movne	r3, #0
 8011eb6:	eba6 0807 	sub.w	r8, r6, r7
 8011eba:	608b      	str	r3, [r1, #8]
 8011ebc:	f1b8 0f00 	cmp.w	r8, #0
 8011ec0:	dde9      	ble.n	8011e96 <__sflush_r+0xae>
 8011ec2:	6a21      	ldr	r1, [r4, #32]
 8011ec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011ec6:	4643      	mov	r3, r8
 8011ec8:	463a      	mov	r2, r7
 8011eca:	4628      	mov	r0, r5
 8011ecc:	47b0      	blx	r6
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	dc08      	bgt.n	8011ee4 <__sflush_r+0xfc>
 8011ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eda:	81a3      	strh	r3, [r4, #12]
 8011edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ee4:	4407      	add	r7, r0
 8011ee6:	eba8 0800 	sub.w	r8, r8, r0
 8011eea:	e7e7      	b.n	8011ebc <__sflush_r+0xd4>
 8011eec:	dfbffffe 	.word	0xdfbffffe

08011ef0 <_fflush_r>:
 8011ef0:	b538      	push	{r3, r4, r5, lr}
 8011ef2:	690b      	ldr	r3, [r1, #16]
 8011ef4:	4605      	mov	r5, r0
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	b913      	cbnz	r3, 8011f00 <_fflush_r+0x10>
 8011efa:	2500      	movs	r5, #0
 8011efc:	4628      	mov	r0, r5
 8011efe:	bd38      	pop	{r3, r4, r5, pc}
 8011f00:	b118      	cbz	r0, 8011f0a <_fflush_r+0x1a>
 8011f02:	6a03      	ldr	r3, [r0, #32]
 8011f04:	b90b      	cbnz	r3, 8011f0a <_fflush_r+0x1a>
 8011f06:	f7fe fde3 	bl	8010ad0 <__sinit>
 8011f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d0f3      	beq.n	8011efa <_fflush_r+0xa>
 8011f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f14:	07d0      	lsls	r0, r2, #31
 8011f16:	d404      	bmi.n	8011f22 <_fflush_r+0x32>
 8011f18:	0599      	lsls	r1, r3, #22
 8011f1a:	d402      	bmi.n	8011f22 <_fflush_r+0x32>
 8011f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f1e:	f7fe feba 	bl	8010c96 <__retarget_lock_acquire_recursive>
 8011f22:	4628      	mov	r0, r5
 8011f24:	4621      	mov	r1, r4
 8011f26:	f7ff ff5f 	bl	8011de8 <__sflush_r>
 8011f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f2c:	07da      	lsls	r2, r3, #31
 8011f2e:	4605      	mov	r5, r0
 8011f30:	d4e4      	bmi.n	8011efc <_fflush_r+0xc>
 8011f32:	89a3      	ldrh	r3, [r4, #12]
 8011f34:	059b      	lsls	r3, r3, #22
 8011f36:	d4e1      	bmi.n	8011efc <_fflush_r+0xc>
 8011f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f3a:	f7fe fead 	bl	8010c98 <__retarget_lock_release_recursive>
 8011f3e:	e7dd      	b.n	8011efc <_fflush_r+0xc>

08011f40 <__malloc_lock>:
 8011f40:	4801      	ldr	r0, [pc, #4]	@ (8011f48 <__malloc_lock+0x8>)
 8011f42:	f7fe bea8 	b.w	8010c96 <__retarget_lock_acquire_recursive>
 8011f46:	bf00      	nop
 8011f48:	20005bf0 	.word	0x20005bf0

08011f4c <__malloc_unlock>:
 8011f4c:	4801      	ldr	r0, [pc, #4]	@ (8011f54 <__malloc_unlock+0x8>)
 8011f4e:	f7fe bea3 	b.w	8010c98 <__retarget_lock_release_recursive>
 8011f52:	bf00      	nop
 8011f54:	20005bf0 	.word	0x20005bf0

08011f58 <_Balloc>:
 8011f58:	b570      	push	{r4, r5, r6, lr}
 8011f5a:	69c6      	ldr	r6, [r0, #28]
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	460d      	mov	r5, r1
 8011f60:	b976      	cbnz	r6, 8011f80 <_Balloc+0x28>
 8011f62:	2010      	movs	r0, #16
 8011f64:	f7ff fe96 	bl	8011c94 <malloc>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	61e0      	str	r0, [r4, #28]
 8011f6c:	b920      	cbnz	r0, 8011f78 <_Balloc+0x20>
 8011f6e:	4b18      	ldr	r3, [pc, #96]	@ (8011fd0 <_Balloc+0x78>)
 8011f70:	4818      	ldr	r0, [pc, #96]	@ (8011fd4 <_Balloc+0x7c>)
 8011f72:	216b      	movs	r1, #107	@ 0x6b
 8011f74:	f000 fc54 	bl	8012820 <__assert_func>
 8011f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f7c:	6006      	str	r6, [r0, #0]
 8011f7e:	60c6      	str	r6, [r0, #12]
 8011f80:	69e6      	ldr	r6, [r4, #28]
 8011f82:	68f3      	ldr	r3, [r6, #12]
 8011f84:	b183      	cbz	r3, 8011fa8 <_Balloc+0x50>
 8011f86:	69e3      	ldr	r3, [r4, #28]
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f8e:	b9b8      	cbnz	r0, 8011fc0 <_Balloc+0x68>
 8011f90:	2101      	movs	r1, #1
 8011f92:	fa01 f605 	lsl.w	r6, r1, r5
 8011f96:	1d72      	adds	r2, r6, #5
 8011f98:	0092      	lsls	r2, r2, #2
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f000 fc5e 	bl	801285c <_calloc_r>
 8011fa0:	b160      	cbz	r0, 8011fbc <_Balloc+0x64>
 8011fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011fa6:	e00e      	b.n	8011fc6 <_Balloc+0x6e>
 8011fa8:	2221      	movs	r2, #33	@ 0x21
 8011faa:	2104      	movs	r1, #4
 8011fac:	4620      	mov	r0, r4
 8011fae:	f000 fc55 	bl	801285c <_calloc_r>
 8011fb2:	69e3      	ldr	r3, [r4, #28]
 8011fb4:	60f0      	str	r0, [r6, #12]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1e4      	bne.n	8011f86 <_Balloc+0x2e>
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	bd70      	pop	{r4, r5, r6, pc}
 8011fc0:	6802      	ldr	r2, [r0, #0]
 8011fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011fcc:	e7f7      	b.n	8011fbe <_Balloc+0x66>
 8011fce:	bf00      	nop
 8011fd0:	08014279 	.word	0x08014279
 8011fd4:	0801430a 	.word	0x0801430a

08011fd8 <_Bfree>:
 8011fd8:	b570      	push	{r4, r5, r6, lr}
 8011fda:	69c6      	ldr	r6, [r0, #28]
 8011fdc:	4605      	mov	r5, r0
 8011fde:	460c      	mov	r4, r1
 8011fe0:	b976      	cbnz	r6, 8012000 <_Bfree+0x28>
 8011fe2:	2010      	movs	r0, #16
 8011fe4:	f7ff fe56 	bl	8011c94 <malloc>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	61e8      	str	r0, [r5, #28]
 8011fec:	b920      	cbnz	r0, 8011ff8 <_Bfree+0x20>
 8011fee:	4b09      	ldr	r3, [pc, #36]	@ (8012014 <_Bfree+0x3c>)
 8011ff0:	4809      	ldr	r0, [pc, #36]	@ (8012018 <_Bfree+0x40>)
 8011ff2:	218f      	movs	r1, #143	@ 0x8f
 8011ff4:	f000 fc14 	bl	8012820 <__assert_func>
 8011ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ffc:	6006      	str	r6, [r0, #0]
 8011ffe:	60c6      	str	r6, [r0, #12]
 8012000:	b13c      	cbz	r4, 8012012 <_Bfree+0x3a>
 8012002:	69eb      	ldr	r3, [r5, #28]
 8012004:	6862      	ldr	r2, [r4, #4]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801200c:	6021      	str	r1, [r4, #0]
 801200e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012012:	bd70      	pop	{r4, r5, r6, pc}
 8012014:	08014279 	.word	0x08014279
 8012018:	0801430a 	.word	0x0801430a

0801201c <__multadd>:
 801201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012020:	690d      	ldr	r5, [r1, #16]
 8012022:	4607      	mov	r7, r0
 8012024:	460c      	mov	r4, r1
 8012026:	461e      	mov	r6, r3
 8012028:	f101 0c14 	add.w	ip, r1, #20
 801202c:	2000      	movs	r0, #0
 801202e:	f8dc 3000 	ldr.w	r3, [ip]
 8012032:	b299      	uxth	r1, r3
 8012034:	fb02 6101 	mla	r1, r2, r1, r6
 8012038:	0c1e      	lsrs	r6, r3, #16
 801203a:	0c0b      	lsrs	r3, r1, #16
 801203c:	fb02 3306 	mla	r3, r2, r6, r3
 8012040:	b289      	uxth	r1, r1
 8012042:	3001      	adds	r0, #1
 8012044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012048:	4285      	cmp	r5, r0
 801204a:	f84c 1b04 	str.w	r1, [ip], #4
 801204e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012052:	dcec      	bgt.n	801202e <__multadd+0x12>
 8012054:	b30e      	cbz	r6, 801209a <__multadd+0x7e>
 8012056:	68a3      	ldr	r3, [r4, #8]
 8012058:	42ab      	cmp	r3, r5
 801205a:	dc19      	bgt.n	8012090 <__multadd+0x74>
 801205c:	6861      	ldr	r1, [r4, #4]
 801205e:	4638      	mov	r0, r7
 8012060:	3101      	adds	r1, #1
 8012062:	f7ff ff79 	bl	8011f58 <_Balloc>
 8012066:	4680      	mov	r8, r0
 8012068:	b928      	cbnz	r0, 8012076 <__multadd+0x5a>
 801206a:	4602      	mov	r2, r0
 801206c:	4b0c      	ldr	r3, [pc, #48]	@ (80120a0 <__multadd+0x84>)
 801206e:	480d      	ldr	r0, [pc, #52]	@ (80120a4 <__multadd+0x88>)
 8012070:	21ba      	movs	r1, #186	@ 0xba
 8012072:	f000 fbd5 	bl	8012820 <__assert_func>
 8012076:	6922      	ldr	r2, [r4, #16]
 8012078:	3202      	adds	r2, #2
 801207a:	f104 010c 	add.w	r1, r4, #12
 801207e:	0092      	lsls	r2, r2, #2
 8012080:	300c      	adds	r0, #12
 8012082:	f7fe fe0a 	bl	8010c9a <memcpy>
 8012086:	4621      	mov	r1, r4
 8012088:	4638      	mov	r0, r7
 801208a:	f7ff ffa5 	bl	8011fd8 <_Bfree>
 801208e:	4644      	mov	r4, r8
 8012090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012094:	3501      	adds	r5, #1
 8012096:	615e      	str	r6, [r3, #20]
 8012098:	6125      	str	r5, [r4, #16]
 801209a:	4620      	mov	r0, r4
 801209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120a0:	080142e8 	.word	0x080142e8
 80120a4:	0801430a 	.word	0x0801430a

080120a8 <__hi0bits>:
 80120a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80120ac:	4603      	mov	r3, r0
 80120ae:	bf36      	itet	cc
 80120b0:	0403      	lslcc	r3, r0, #16
 80120b2:	2000      	movcs	r0, #0
 80120b4:	2010      	movcc	r0, #16
 80120b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80120ba:	bf3c      	itt	cc
 80120bc:	021b      	lslcc	r3, r3, #8
 80120be:	3008      	addcc	r0, #8
 80120c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120c4:	bf3c      	itt	cc
 80120c6:	011b      	lslcc	r3, r3, #4
 80120c8:	3004      	addcc	r0, #4
 80120ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120ce:	bf3c      	itt	cc
 80120d0:	009b      	lslcc	r3, r3, #2
 80120d2:	3002      	addcc	r0, #2
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	db05      	blt.n	80120e4 <__hi0bits+0x3c>
 80120d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80120dc:	f100 0001 	add.w	r0, r0, #1
 80120e0:	bf08      	it	eq
 80120e2:	2020      	moveq	r0, #32
 80120e4:	4770      	bx	lr

080120e6 <__lo0bits>:
 80120e6:	6803      	ldr	r3, [r0, #0]
 80120e8:	4602      	mov	r2, r0
 80120ea:	f013 0007 	ands.w	r0, r3, #7
 80120ee:	d00b      	beq.n	8012108 <__lo0bits+0x22>
 80120f0:	07d9      	lsls	r1, r3, #31
 80120f2:	d421      	bmi.n	8012138 <__lo0bits+0x52>
 80120f4:	0798      	lsls	r0, r3, #30
 80120f6:	bf49      	itett	mi
 80120f8:	085b      	lsrmi	r3, r3, #1
 80120fa:	089b      	lsrpl	r3, r3, #2
 80120fc:	2001      	movmi	r0, #1
 80120fe:	6013      	strmi	r3, [r2, #0]
 8012100:	bf5c      	itt	pl
 8012102:	6013      	strpl	r3, [r2, #0]
 8012104:	2002      	movpl	r0, #2
 8012106:	4770      	bx	lr
 8012108:	b299      	uxth	r1, r3
 801210a:	b909      	cbnz	r1, 8012110 <__lo0bits+0x2a>
 801210c:	0c1b      	lsrs	r3, r3, #16
 801210e:	2010      	movs	r0, #16
 8012110:	b2d9      	uxtb	r1, r3
 8012112:	b909      	cbnz	r1, 8012118 <__lo0bits+0x32>
 8012114:	3008      	adds	r0, #8
 8012116:	0a1b      	lsrs	r3, r3, #8
 8012118:	0719      	lsls	r1, r3, #28
 801211a:	bf04      	itt	eq
 801211c:	091b      	lsreq	r3, r3, #4
 801211e:	3004      	addeq	r0, #4
 8012120:	0799      	lsls	r1, r3, #30
 8012122:	bf04      	itt	eq
 8012124:	089b      	lsreq	r3, r3, #2
 8012126:	3002      	addeq	r0, #2
 8012128:	07d9      	lsls	r1, r3, #31
 801212a:	d403      	bmi.n	8012134 <__lo0bits+0x4e>
 801212c:	085b      	lsrs	r3, r3, #1
 801212e:	f100 0001 	add.w	r0, r0, #1
 8012132:	d003      	beq.n	801213c <__lo0bits+0x56>
 8012134:	6013      	str	r3, [r2, #0]
 8012136:	4770      	bx	lr
 8012138:	2000      	movs	r0, #0
 801213a:	4770      	bx	lr
 801213c:	2020      	movs	r0, #32
 801213e:	4770      	bx	lr

08012140 <__i2b>:
 8012140:	b510      	push	{r4, lr}
 8012142:	460c      	mov	r4, r1
 8012144:	2101      	movs	r1, #1
 8012146:	f7ff ff07 	bl	8011f58 <_Balloc>
 801214a:	4602      	mov	r2, r0
 801214c:	b928      	cbnz	r0, 801215a <__i2b+0x1a>
 801214e:	4b05      	ldr	r3, [pc, #20]	@ (8012164 <__i2b+0x24>)
 8012150:	4805      	ldr	r0, [pc, #20]	@ (8012168 <__i2b+0x28>)
 8012152:	f240 1145 	movw	r1, #325	@ 0x145
 8012156:	f000 fb63 	bl	8012820 <__assert_func>
 801215a:	2301      	movs	r3, #1
 801215c:	6144      	str	r4, [r0, #20]
 801215e:	6103      	str	r3, [r0, #16]
 8012160:	bd10      	pop	{r4, pc}
 8012162:	bf00      	nop
 8012164:	080142e8 	.word	0x080142e8
 8012168:	0801430a 	.word	0x0801430a

0801216c <__multiply>:
 801216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012170:	4614      	mov	r4, r2
 8012172:	690a      	ldr	r2, [r1, #16]
 8012174:	6923      	ldr	r3, [r4, #16]
 8012176:	429a      	cmp	r2, r3
 8012178:	bfa8      	it	ge
 801217a:	4623      	movge	r3, r4
 801217c:	460f      	mov	r7, r1
 801217e:	bfa4      	itt	ge
 8012180:	460c      	movge	r4, r1
 8012182:	461f      	movge	r7, r3
 8012184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801218c:	68a3      	ldr	r3, [r4, #8]
 801218e:	6861      	ldr	r1, [r4, #4]
 8012190:	eb0a 0609 	add.w	r6, sl, r9
 8012194:	42b3      	cmp	r3, r6
 8012196:	b085      	sub	sp, #20
 8012198:	bfb8      	it	lt
 801219a:	3101      	addlt	r1, #1
 801219c:	f7ff fedc 	bl	8011f58 <_Balloc>
 80121a0:	b930      	cbnz	r0, 80121b0 <__multiply+0x44>
 80121a2:	4602      	mov	r2, r0
 80121a4:	4b44      	ldr	r3, [pc, #272]	@ (80122b8 <__multiply+0x14c>)
 80121a6:	4845      	ldr	r0, [pc, #276]	@ (80122bc <__multiply+0x150>)
 80121a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80121ac:	f000 fb38 	bl	8012820 <__assert_func>
 80121b0:	f100 0514 	add.w	r5, r0, #20
 80121b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80121b8:	462b      	mov	r3, r5
 80121ba:	2200      	movs	r2, #0
 80121bc:	4543      	cmp	r3, r8
 80121be:	d321      	bcc.n	8012204 <__multiply+0x98>
 80121c0:	f107 0114 	add.w	r1, r7, #20
 80121c4:	f104 0214 	add.w	r2, r4, #20
 80121c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80121cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80121d0:	9302      	str	r3, [sp, #8]
 80121d2:	1b13      	subs	r3, r2, r4
 80121d4:	3b15      	subs	r3, #21
 80121d6:	f023 0303 	bic.w	r3, r3, #3
 80121da:	3304      	adds	r3, #4
 80121dc:	f104 0715 	add.w	r7, r4, #21
 80121e0:	42ba      	cmp	r2, r7
 80121e2:	bf38      	it	cc
 80121e4:	2304      	movcc	r3, #4
 80121e6:	9301      	str	r3, [sp, #4]
 80121e8:	9b02      	ldr	r3, [sp, #8]
 80121ea:	9103      	str	r1, [sp, #12]
 80121ec:	428b      	cmp	r3, r1
 80121ee:	d80c      	bhi.n	801220a <__multiply+0x9e>
 80121f0:	2e00      	cmp	r6, #0
 80121f2:	dd03      	ble.n	80121fc <__multiply+0x90>
 80121f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d05b      	beq.n	80122b4 <__multiply+0x148>
 80121fc:	6106      	str	r6, [r0, #16]
 80121fe:	b005      	add	sp, #20
 8012200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012204:	f843 2b04 	str.w	r2, [r3], #4
 8012208:	e7d8      	b.n	80121bc <__multiply+0x50>
 801220a:	f8b1 a000 	ldrh.w	sl, [r1]
 801220e:	f1ba 0f00 	cmp.w	sl, #0
 8012212:	d024      	beq.n	801225e <__multiply+0xf2>
 8012214:	f104 0e14 	add.w	lr, r4, #20
 8012218:	46a9      	mov	r9, r5
 801221a:	f04f 0c00 	mov.w	ip, #0
 801221e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012222:	f8d9 3000 	ldr.w	r3, [r9]
 8012226:	fa1f fb87 	uxth.w	fp, r7
 801222a:	b29b      	uxth	r3, r3
 801222c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012234:	f8d9 7000 	ldr.w	r7, [r9]
 8012238:	4463      	add	r3, ip
 801223a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801223e:	fb0a c70b 	mla	r7, sl, fp, ip
 8012242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012246:	b29b      	uxth	r3, r3
 8012248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801224c:	4572      	cmp	r2, lr
 801224e:	f849 3b04 	str.w	r3, [r9], #4
 8012252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012256:	d8e2      	bhi.n	801221e <__multiply+0xb2>
 8012258:	9b01      	ldr	r3, [sp, #4]
 801225a:	f845 c003 	str.w	ip, [r5, r3]
 801225e:	9b03      	ldr	r3, [sp, #12]
 8012260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012264:	3104      	adds	r1, #4
 8012266:	f1b9 0f00 	cmp.w	r9, #0
 801226a:	d021      	beq.n	80122b0 <__multiply+0x144>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	f104 0c14 	add.w	ip, r4, #20
 8012272:	46ae      	mov	lr, r5
 8012274:	f04f 0a00 	mov.w	sl, #0
 8012278:	f8bc b000 	ldrh.w	fp, [ip]
 801227c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012280:	fb09 770b 	mla	r7, r9, fp, r7
 8012284:	4457      	add	r7, sl
 8012286:	b29b      	uxth	r3, r3
 8012288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801228c:	f84e 3b04 	str.w	r3, [lr], #4
 8012290:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012298:	f8be 3000 	ldrh.w	r3, [lr]
 801229c:	fb09 330a 	mla	r3, r9, sl, r3
 80122a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80122a4:	4562      	cmp	r2, ip
 80122a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122aa:	d8e5      	bhi.n	8012278 <__multiply+0x10c>
 80122ac:	9f01      	ldr	r7, [sp, #4]
 80122ae:	51eb      	str	r3, [r5, r7]
 80122b0:	3504      	adds	r5, #4
 80122b2:	e799      	b.n	80121e8 <__multiply+0x7c>
 80122b4:	3e01      	subs	r6, #1
 80122b6:	e79b      	b.n	80121f0 <__multiply+0x84>
 80122b8:	080142e8 	.word	0x080142e8
 80122bc:	0801430a 	.word	0x0801430a

080122c0 <__pow5mult>:
 80122c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122c4:	4615      	mov	r5, r2
 80122c6:	f012 0203 	ands.w	r2, r2, #3
 80122ca:	4607      	mov	r7, r0
 80122cc:	460e      	mov	r6, r1
 80122ce:	d007      	beq.n	80122e0 <__pow5mult+0x20>
 80122d0:	4c25      	ldr	r4, [pc, #148]	@ (8012368 <__pow5mult+0xa8>)
 80122d2:	3a01      	subs	r2, #1
 80122d4:	2300      	movs	r3, #0
 80122d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122da:	f7ff fe9f 	bl	801201c <__multadd>
 80122de:	4606      	mov	r6, r0
 80122e0:	10ad      	asrs	r5, r5, #2
 80122e2:	d03d      	beq.n	8012360 <__pow5mult+0xa0>
 80122e4:	69fc      	ldr	r4, [r7, #28]
 80122e6:	b97c      	cbnz	r4, 8012308 <__pow5mult+0x48>
 80122e8:	2010      	movs	r0, #16
 80122ea:	f7ff fcd3 	bl	8011c94 <malloc>
 80122ee:	4602      	mov	r2, r0
 80122f0:	61f8      	str	r0, [r7, #28]
 80122f2:	b928      	cbnz	r0, 8012300 <__pow5mult+0x40>
 80122f4:	4b1d      	ldr	r3, [pc, #116]	@ (801236c <__pow5mult+0xac>)
 80122f6:	481e      	ldr	r0, [pc, #120]	@ (8012370 <__pow5mult+0xb0>)
 80122f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80122fc:	f000 fa90 	bl	8012820 <__assert_func>
 8012300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012304:	6004      	str	r4, [r0, #0]
 8012306:	60c4      	str	r4, [r0, #12]
 8012308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801230c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012310:	b94c      	cbnz	r4, 8012326 <__pow5mult+0x66>
 8012312:	f240 2171 	movw	r1, #625	@ 0x271
 8012316:	4638      	mov	r0, r7
 8012318:	f7ff ff12 	bl	8012140 <__i2b>
 801231c:	2300      	movs	r3, #0
 801231e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012322:	4604      	mov	r4, r0
 8012324:	6003      	str	r3, [r0, #0]
 8012326:	f04f 0900 	mov.w	r9, #0
 801232a:	07eb      	lsls	r3, r5, #31
 801232c:	d50a      	bpl.n	8012344 <__pow5mult+0x84>
 801232e:	4631      	mov	r1, r6
 8012330:	4622      	mov	r2, r4
 8012332:	4638      	mov	r0, r7
 8012334:	f7ff ff1a 	bl	801216c <__multiply>
 8012338:	4631      	mov	r1, r6
 801233a:	4680      	mov	r8, r0
 801233c:	4638      	mov	r0, r7
 801233e:	f7ff fe4b 	bl	8011fd8 <_Bfree>
 8012342:	4646      	mov	r6, r8
 8012344:	106d      	asrs	r5, r5, #1
 8012346:	d00b      	beq.n	8012360 <__pow5mult+0xa0>
 8012348:	6820      	ldr	r0, [r4, #0]
 801234a:	b938      	cbnz	r0, 801235c <__pow5mult+0x9c>
 801234c:	4622      	mov	r2, r4
 801234e:	4621      	mov	r1, r4
 8012350:	4638      	mov	r0, r7
 8012352:	f7ff ff0b 	bl	801216c <__multiply>
 8012356:	6020      	str	r0, [r4, #0]
 8012358:	f8c0 9000 	str.w	r9, [r0]
 801235c:	4604      	mov	r4, r0
 801235e:	e7e4      	b.n	801232a <__pow5mult+0x6a>
 8012360:	4630      	mov	r0, r6
 8012362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012366:	bf00      	nop
 8012368:	08014364 	.word	0x08014364
 801236c:	08014279 	.word	0x08014279
 8012370:	0801430a 	.word	0x0801430a

08012374 <__lshift>:
 8012374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012378:	460c      	mov	r4, r1
 801237a:	6849      	ldr	r1, [r1, #4]
 801237c:	6923      	ldr	r3, [r4, #16]
 801237e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012382:	68a3      	ldr	r3, [r4, #8]
 8012384:	4607      	mov	r7, r0
 8012386:	4691      	mov	r9, r2
 8012388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801238c:	f108 0601 	add.w	r6, r8, #1
 8012390:	42b3      	cmp	r3, r6
 8012392:	db0b      	blt.n	80123ac <__lshift+0x38>
 8012394:	4638      	mov	r0, r7
 8012396:	f7ff fddf 	bl	8011f58 <_Balloc>
 801239a:	4605      	mov	r5, r0
 801239c:	b948      	cbnz	r0, 80123b2 <__lshift+0x3e>
 801239e:	4602      	mov	r2, r0
 80123a0:	4b28      	ldr	r3, [pc, #160]	@ (8012444 <__lshift+0xd0>)
 80123a2:	4829      	ldr	r0, [pc, #164]	@ (8012448 <__lshift+0xd4>)
 80123a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80123a8:	f000 fa3a 	bl	8012820 <__assert_func>
 80123ac:	3101      	adds	r1, #1
 80123ae:	005b      	lsls	r3, r3, #1
 80123b0:	e7ee      	b.n	8012390 <__lshift+0x1c>
 80123b2:	2300      	movs	r3, #0
 80123b4:	f100 0114 	add.w	r1, r0, #20
 80123b8:	f100 0210 	add.w	r2, r0, #16
 80123bc:	4618      	mov	r0, r3
 80123be:	4553      	cmp	r3, sl
 80123c0:	db33      	blt.n	801242a <__lshift+0xb6>
 80123c2:	6920      	ldr	r0, [r4, #16]
 80123c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123c8:	f104 0314 	add.w	r3, r4, #20
 80123cc:	f019 091f 	ands.w	r9, r9, #31
 80123d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80123d8:	d02b      	beq.n	8012432 <__lshift+0xbe>
 80123da:	f1c9 0e20 	rsb	lr, r9, #32
 80123de:	468a      	mov	sl, r1
 80123e0:	2200      	movs	r2, #0
 80123e2:	6818      	ldr	r0, [r3, #0]
 80123e4:	fa00 f009 	lsl.w	r0, r0, r9
 80123e8:	4310      	orrs	r0, r2
 80123ea:	f84a 0b04 	str.w	r0, [sl], #4
 80123ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80123f2:	459c      	cmp	ip, r3
 80123f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80123f8:	d8f3      	bhi.n	80123e2 <__lshift+0x6e>
 80123fa:	ebac 0304 	sub.w	r3, ip, r4
 80123fe:	3b15      	subs	r3, #21
 8012400:	f023 0303 	bic.w	r3, r3, #3
 8012404:	3304      	adds	r3, #4
 8012406:	f104 0015 	add.w	r0, r4, #21
 801240a:	4584      	cmp	ip, r0
 801240c:	bf38      	it	cc
 801240e:	2304      	movcc	r3, #4
 8012410:	50ca      	str	r2, [r1, r3]
 8012412:	b10a      	cbz	r2, 8012418 <__lshift+0xa4>
 8012414:	f108 0602 	add.w	r6, r8, #2
 8012418:	3e01      	subs	r6, #1
 801241a:	4638      	mov	r0, r7
 801241c:	612e      	str	r6, [r5, #16]
 801241e:	4621      	mov	r1, r4
 8012420:	f7ff fdda 	bl	8011fd8 <_Bfree>
 8012424:	4628      	mov	r0, r5
 8012426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801242a:	f842 0f04 	str.w	r0, [r2, #4]!
 801242e:	3301      	adds	r3, #1
 8012430:	e7c5      	b.n	80123be <__lshift+0x4a>
 8012432:	3904      	subs	r1, #4
 8012434:	f853 2b04 	ldr.w	r2, [r3], #4
 8012438:	f841 2f04 	str.w	r2, [r1, #4]!
 801243c:	459c      	cmp	ip, r3
 801243e:	d8f9      	bhi.n	8012434 <__lshift+0xc0>
 8012440:	e7ea      	b.n	8012418 <__lshift+0xa4>
 8012442:	bf00      	nop
 8012444:	080142e8 	.word	0x080142e8
 8012448:	0801430a 	.word	0x0801430a

0801244c <__mcmp>:
 801244c:	690a      	ldr	r2, [r1, #16]
 801244e:	4603      	mov	r3, r0
 8012450:	6900      	ldr	r0, [r0, #16]
 8012452:	1a80      	subs	r0, r0, r2
 8012454:	b530      	push	{r4, r5, lr}
 8012456:	d10e      	bne.n	8012476 <__mcmp+0x2a>
 8012458:	3314      	adds	r3, #20
 801245a:	3114      	adds	r1, #20
 801245c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801246c:	4295      	cmp	r5, r2
 801246e:	d003      	beq.n	8012478 <__mcmp+0x2c>
 8012470:	d205      	bcs.n	801247e <__mcmp+0x32>
 8012472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012476:	bd30      	pop	{r4, r5, pc}
 8012478:	42a3      	cmp	r3, r4
 801247a:	d3f3      	bcc.n	8012464 <__mcmp+0x18>
 801247c:	e7fb      	b.n	8012476 <__mcmp+0x2a>
 801247e:	2001      	movs	r0, #1
 8012480:	e7f9      	b.n	8012476 <__mcmp+0x2a>
	...

08012484 <__mdiff>:
 8012484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012488:	4689      	mov	r9, r1
 801248a:	4606      	mov	r6, r0
 801248c:	4611      	mov	r1, r2
 801248e:	4648      	mov	r0, r9
 8012490:	4614      	mov	r4, r2
 8012492:	f7ff ffdb 	bl	801244c <__mcmp>
 8012496:	1e05      	subs	r5, r0, #0
 8012498:	d112      	bne.n	80124c0 <__mdiff+0x3c>
 801249a:	4629      	mov	r1, r5
 801249c:	4630      	mov	r0, r6
 801249e:	f7ff fd5b 	bl	8011f58 <_Balloc>
 80124a2:	4602      	mov	r2, r0
 80124a4:	b928      	cbnz	r0, 80124b2 <__mdiff+0x2e>
 80124a6:	4b3f      	ldr	r3, [pc, #252]	@ (80125a4 <__mdiff+0x120>)
 80124a8:	f240 2137 	movw	r1, #567	@ 0x237
 80124ac:	483e      	ldr	r0, [pc, #248]	@ (80125a8 <__mdiff+0x124>)
 80124ae:	f000 f9b7 	bl	8012820 <__assert_func>
 80124b2:	2301      	movs	r3, #1
 80124b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80124b8:	4610      	mov	r0, r2
 80124ba:	b003      	add	sp, #12
 80124bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c0:	bfbc      	itt	lt
 80124c2:	464b      	movlt	r3, r9
 80124c4:	46a1      	movlt	r9, r4
 80124c6:	4630      	mov	r0, r6
 80124c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80124cc:	bfba      	itte	lt
 80124ce:	461c      	movlt	r4, r3
 80124d0:	2501      	movlt	r5, #1
 80124d2:	2500      	movge	r5, #0
 80124d4:	f7ff fd40 	bl	8011f58 <_Balloc>
 80124d8:	4602      	mov	r2, r0
 80124da:	b918      	cbnz	r0, 80124e4 <__mdiff+0x60>
 80124dc:	4b31      	ldr	r3, [pc, #196]	@ (80125a4 <__mdiff+0x120>)
 80124de:	f240 2145 	movw	r1, #581	@ 0x245
 80124e2:	e7e3      	b.n	80124ac <__mdiff+0x28>
 80124e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80124e8:	6926      	ldr	r6, [r4, #16]
 80124ea:	60c5      	str	r5, [r0, #12]
 80124ec:	f109 0310 	add.w	r3, r9, #16
 80124f0:	f109 0514 	add.w	r5, r9, #20
 80124f4:	f104 0e14 	add.w	lr, r4, #20
 80124f8:	f100 0b14 	add.w	fp, r0, #20
 80124fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012504:	9301      	str	r3, [sp, #4]
 8012506:	46d9      	mov	r9, fp
 8012508:	f04f 0c00 	mov.w	ip, #0
 801250c:	9b01      	ldr	r3, [sp, #4]
 801250e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012512:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012516:	9301      	str	r3, [sp, #4]
 8012518:	fa1f f38a 	uxth.w	r3, sl
 801251c:	4619      	mov	r1, r3
 801251e:	b283      	uxth	r3, r0
 8012520:	1acb      	subs	r3, r1, r3
 8012522:	0c00      	lsrs	r0, r0, #16
 8012524:	4463      	add	r3, ip
 8012526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801252a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801252e:	b29b      	uxth	r3, r3
 8012530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012534:	4576      	cmp	r6, lr
 8012536:	f849 3b04 	str.w	r3, [r9], #4
 801253a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801253e:	d8e5      	bhi.n	801250c <__mdiff+0x88>
 8012540:	1b33      	subs	r3, r6, r4
 8012542:	3b15      	subs	r3, #21
 8012544:	f023 0303 	bic.w	r3, r3, #3
 8012548:	3415      	adds	r4, #21
 801254a:	3304      	adds	r3, #4
 801254c:	42a6      	cmp	r6, r4
 801254e:	bf38      	it	cc
 8012550:	2304      	movcc	r3, #4
 8012552:	441d      	add	r5, r3
 8012554:	445b      	add	r3, fp
 8012556:	461e      	mov	r6, r3
 8012558:	462c      	mov	r4, r5
 801255a:	4544      	cmp	r4, r8
 801255c:	d30e      	bcc.n	801257c <__mdiff+0xf8>
 801255e:	f108 0103 	add.w	r1, r8, #3
 8012562:	1b49      	subs	r1, r1, r5
 8012564:	f021 0103 	bic.w	r1, r1, #3
 8012568:	3d03      	subs	r5, #3
 801256a:	45a8      	cmp	r8, r5
 801256c:	bf38      	it	cc
 801256e:	2100      	movcc	r1, #0
 8012570:	440b      	add	r3, r1
 8012572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012576:	b191      	cbz	r1, 801259e <__mdiff+0x11a>
 8012578:	6117      	str	r7, [r2, #16]
 801257a:	e79d      	b.n	80124b8 <__mdiff+0x34>
 801257c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012580:	46e6      	mov	lr, ip
 8012582:	0c08      	lsrs	r0, r1, #16
 8012584:	fa1c fc81 	uxtah	ip, ip, r1
 8012588:	4471      	add	r1, lr
 801258a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801258e:	b289      	uxth	r1, r1
 8012590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012594:	f846 1b04 	str.w	r1, [r6], #4
 8012598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801259c:	e7dd      	b.n	801255a <__mdiff+0xd6>
 801259e:	3f01      	subs	r7, #1
 80125a0:	e7e7      	b.n	8012572 <__mdiff+0xee>
 80125a2:	bf00      	nop
 80125a4:	080142e8 	.word	0x080142e8
 80125a8:	0801430a 	.word	0x0801430a

080125ac <__d2b>:
 80125ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80125b0:	460f      	mov	r7, r1
 80125b2:	2101      	movs	r1, #1
 80125b4:	ec59 8b10 	vmov	r8, r9, d0
 80125b8:	4616      	mov	r6, r2
 80125ba:	f7ff fccd 	bl	8011f58 <_Balloc>
 80125be:	4604      	mov	r4, r0
 80125c0:	b930      	cbnz	r0, 80125d0 <__d2b+0x24>
 80125c2:	4602      	mov	r2, r0
 80125c4:	4b23      	ldr	r3, [pc, #140]	@ (8012654 <__d2b+0xa8>)
 80125c6:	4824      	ldr	r0, [pc, #144]	@ (8012658 <__d2b+0xac>)
 80125c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80125cc:	f000 f928 	bl	8012820 <__assert_func>
 80125d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80125d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125d8:	b10d      	cbz	r5, 80125de <__d2b+0x32>
 80125da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80125de:	9301      	str	r3, [sp, #4]
 80125e0:	f1b8 0300 	subs.w	r3, r8, #0
 80125e4:	d023      	beq.n	801262e <__d2b+0x82>
 80125e6:	4668      	mov	r0, sp
 80125e8:	9300      	str	r3, [sp, #0]
 80125ea:	f7ff fd7c 	bl	80120e6 <__lo0bits>
 80125ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80125f2:	b1d0      	cbz	r0, 801262a <__d2b+0x7e>
 80125f4:	f1c0 0320 	rsb	r3, r0, #32
 80125f8:	fa02 f303 	lsl.w	r3, r2, r3
 80125fc:	430b      	orrs	r3, r1
 80125fe:	40c2      	lsrs	r2, r0
 8012600:	6163      	str	r3, [r4, #20]
 8012602:	9201      	str	r2, [sp, #4]
 8012604:	9b01      	ldr	r3, [sp, #4]
 8012606:	61a3      	str	r3, [r4, #24]
 8012608:	2b00      	cmp	r3, #0
 801260a:	bf0c      	ite	eq
 801260c:	2201      	moveq	r2, #1
 801260e:	2202      	movne	r2, #2
 8012610:	6122      	str	r2, [r4, #16]
 8012612:	b1a5      	cbz	r5, 801263e <__d2b+0x92>
 8012614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012618:	4405      	add	r5, r0
 801261a:	603d      	str	r5, [r7, #0]
 801261c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012620:	6030      	str	r0, [r6, #0]
 8012622:	4620      	mov	r0, r4
 8012624:	b003      	add	sp, #12
 8012626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801262a:	6161      	str	r1, [r4, #20]
 801262c:	e7ea      	b.n	8012604 <__d2b+0x58>
 801262e:	a801      	add	r0, sp, #4
 8012630:	f7ff fd59 	bl	80120e6 <__lo0bits>
 8012634:	9b01      	ldr	r3, [sp, #4]
 8012636:	6163      	str	r3, [r4, #20]
 8012638:	3020      	adds	r0, #32
 801263a:	2201      	movs	r2, #1
 801263c:	e7e8      	b.n	8012610 <__d2b+0x64>
 801263e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012646:	6038      	str	r0, [r7, #0]
 8012648:	6918      	ldr	r0, [r3, #16]
 801264a:	f7ff fd2d 	bl	80120a8 <__hi0bits>
 801264e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012652:	e7e5      	b.n	8012620 <__d2b+0x74>
 8012654:	080142e8 	.word	0x080142e8
 8012658:	0801430a 	.word	0x0801430a

0801265c <__sread>:
 801265c:	b510      	push	{r4, lr}
 801265e:	460c      	mov	r4, r1
 8012660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012664:	f000 f8a8 	bl	80127b8 <_read_r>
 8012668:	2800      	cmp	r0, #0
 801266a:	bfab      	itete	ge
 801266c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801266e:	89a3      	ldrhlt	r3, [r4, #12]
 8012670:	181b      	addge	r3, r3, r0
 8012672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012676:	bfac      	ite	ge
 8012678:	6563      	strge	r3, [r4, #84]	@ 0x54
 801267a:	81a3      	strhlt	r3, [r4, #12]
 801267c:	bd10      	pop	{r4, pc}

0801267e <__swrite>:
 801267e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012682:	461f      	mov	r7, r3
 8012684:	898b      	ldrh	r3, [r1, #12]
 8012686:	05db      	lsls	r3, r3, #23
 8012688:	4605      	mov	r5, r0
 801268a:	460c      	mov	r4, r1
 801268c:	4616      	mov	r6, r2
 801268e:	d505      	bpl.n	801269c <__swrite+0x1e>
 8012690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012694:	2302      	movs	r3, #2
 8012696:	2200      	movs	r2, #0
 8012698:	f000 f87c 	bl	8012794 <_lseek_r>
 801269c:	89a3      	ldrh	r3, [r4, #12]
 801269e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80126a6:	81a3      	strh	r3, [r4, #12]
 80126a8:	4632      	mov	r2, r6
 80126aa:	463b      	mov	r3, r7
 80126ac:	4628      	mov	r0, r5
 80126ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126b2:	f000 b8a3 	b.w	80127fc <_write_r>

080126b6 <__sseek>:
 80126b6:	b510      	push	{r4, lr}
 80126b8:	460c      	mov	r4, r1
 80126ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126be:	f000 f869 	bl	8012794 <_lseek_r>
 80126c2:	1c43      	adds	r3, r0, #1
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	bf15      	itete	ne
 80126c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80126ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80126ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80126d2:	81a3      	strheq	r3, [r4, #12]
 80126d4:	bf18      	it	ne
 80126d6:	81a3      	strhne	r3, [r4, #12]
 80126d8:	bd10      	pop	{r4, pc}

080126da <__sclose>:
 80126da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126de:	f000 b849 	b.w	8012774 <_close_r>

080126e2 <_realloc_r>:
 80126e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e6:	4680      	mov	r8, r0
 80126e8:	4615      	mov	r5, r2
 80126ea:	460c      	mov	r4, r1
 80126ec:	b921      	cbnz	r1, 80126f8 <_realloc_r+0x16>
 80126ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126f2:	4611      	mov	r1, r2
 80126f4:	f7ff baf8 	b.w	8011ce8 <_malloc_r>
 80126f8:	b92a      	cbnz	r2, 8012706 <_realloc_r+0x24>
 80126fa:	f7ff f929 	bl	8011950 <_free_r>
 80126fe:	2400      	movs	r4, #0
 8012700:	4620      	mov	r0, r4
 8012702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012706:	f000 f8cf 	bl	80128a8 <_malloc_usable_size_r>
 801270a:	4285      	cmp	r5, r0
 801270c:	4606      	mov	r6, r0
 801270e:	d802      	bhi.n	8012716 <_realloc_r+0x34>
 8012710:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012714:	d8f4      	bhi.n	8012700 <_realloc_r+0x1e>
 8012716:	4629      	mov	r1, r5
 8012718:	4640      	mov	r0, r8
 801271a:	f7ff fae5 	bl	8011ce8 <_malloc_r>
 801271e:	4607      	mov	r7, r0
 8012720:	2800      	cmp	r0, #0
 8012722:	d0ec      	beq.n	80126fe <_realloc_r+0x1c>
 8012724:	42b5      	cmp	r5, r6
 8012726:	462a      	mov	r2, r5
 8012728:	4621      	mov	r1, r4
 801272a:	bf28      	it	cs
 801272c:	4632      	movcs	r2, r6
 801272e:	f7fe fab4 	bl	8010c9a <memcpy>
 8012732:	4621      	mov	r1, r4
 8012734:	4640      	mov	r0, r8
 8012736:	f7ff f90b 	bl	8011950 <_free_r>
 801273a:	463c      	mov	r4, r7
 801273c:	e7e0      	b.n	8012700 <_realloc_r+0x1e>

0801273e <memmove>:
 801273e:	4288      	cmp	r0, r1
 8012740:	b510      	push	{r4, lr}
 8012742:	eb01 0402 	add.w	r4, r1, r2
 8012746:	d902      	bls.n	801274e <memmove+0x10>
 8012748:	4284      	cmp	r4, r0
 801274a:	4623      	mov	r3, r4
 801274c:	d807      	bhi.n	801275e <memmove+0x20>
 801274e:	1e43      	subs	r3, r0, #1
 8012750:	42a1      	cmp	r1, r4
 8012752:	d008      	beq.n	8012766 <memmove+0x28>
 8012754:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012758:	f803 2f01 	strb.w	r2, [r3, #1]!
 801275c:	e7f8      	b.n	8012750 <memmove+0x12>
 801275e:	4402      	add	r2, r0
 8012760:	4601      	mov	r1, r0
 8012762:	428a      	cmp	r2, r1
 8012764:	d100      	bne.n	8012768 <memmove+0x2a>
 8012766:	bd10      	pop	{r4, pc}
 8012768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801276c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012770:	e7f7      	b.n	8012762 <memmove+0x24>
	...

08012774 <_close_r>:
 8012774:	b538      	push	{r3, r4, r5, lr}
 8012776:	4d06      	ldr	r5, [pc, #24]	@ (8012790 <_close_r+0x1c>)
 8012778:	2300      	movs	r3, #0
 801277a:	4604      	mov	r4, r0
 801277c:	4608      	mov	r0, r1
 801277e:	602b      	str	r3, [r5, #0]
 8012780:	f7f4 fd04 	bl	800718c <_close>
 8012784:	1c43      	adds	r3, r0, #1
 8012786:	d102      	bne.n	801278e <_close_r+0x1a>
 8012788:	682b      	ldr	r3, [r5, #0]
 801278a:	b103      	cbz	r3, 801278e <_close_r+0x1a>
 801278c:	6023      	str	r3, [r4, #0]
 801278e:	bd38      	pop	{r3, r4, r5, pc}
 8012790:	20005bec 	.word	0x20005bec

08012794 <_lseek_r>:
 8012794:	b538      	push	{r3, r4, r5, lr}
 8012796:	4d07      	ldr	r5, [pc, #28]	@ (80127b4 <_lseek_r+0x20>)
 8012798:	4604      	mov	r4, r0
 801279a:	4608      	mov	r0, r1
 801279c:	4611      	mov	r1, r2
 801279e:	2200      	movs	r2, #0
 80127a0:	602a      	str	r2, [r5, #0]
 80127a2:	461a      	mov	r2, r3
 80127a4:	f7f4 fd19 	bl	80071da <_lseek>
 80127a8:	1c43      	adds	r3, r0, #1
 80127aa:	d102      	bne.n	80127b2 <_lseek_r+0x1e>
 80127ac:	682b      	ldr	r3, [r5, #0]
 80127ae:	b103      	cbz	r3, 80127b2 <_lseek_r+0x1e>
 80127b0:	6023      	str	r3, [r4, #0]
 80127b2:	bd38      	pop	{r3, r4, r5, pc}
 80127b4:	20005bec 	.word	0x20005bec

080127b8 <_read_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4d07      	ldr	r5, [pc, #28]	@ (80127d8 <_read_r+0x20>)
 80127bc:	4604      	mov	r4, r0
 80127be:	4608      	mov	r0, r1
 80127c0:	4611      	mov	r1, r2
 80127c2:	2200      	movs	r2, #0
 80127c4:	602a      	str	r2, [r5, #0]
 80127c6:	461a      	mov	r2, r3
 80127c8:	f7f4 fca7 	bl	800711a <_read>
 80127cc:	1c43      	adds	r3, r0, #1
 80127ce:	d102      	bne.n	80127d6 <_read_r+0x1e>
 80127d0:	682b      	ldr	r3, [r5, #0]
 80127d2:	b103      	cbz	r3, 80127d6 <_read_r+0x1e>
 80127d4:	6023      	str	r3, [r4, #0]
 80127d6:	bd38      	pop	{r3, r4, r5, pc}
 80127d8:	20005bec 	.word	0x20005bec

080127dc <_sbrk_r>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	4d06      	ldr	r5, [pc, #24]	@ (80127f8 <_sbrk_r+0x1c>)
 80127e0:	2300      	movs	r3, #0
 80127e2:	4604      	mov	r4, r0
 80127e4:	4608      	mov	r0, r1
 80127e6:	602b      	str	r3, [r5, #0]
 80127e8:	f7f4 fd04 	bl	80071f4 <_sbrk>
 80127ec:	1c43      	adds	r3, r0, #1
 80127ee:	d102      	bne.n	80127f6 <_sbrk_r+0x1a>
 80127f0:	682b      	ldr	r3, [r5, #0]
 80127f2:	b103      	cbz	r3, 80127f6 <_sbrk_r+0x1a>
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	bd38      	pop	{r3, r4, r5, pc}
 80127f8:	20005bec 	.word	0x20005bec

080127fc <_write_r>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4d07      	ldr	r5, [pc, #28]	@ (801281c <_write_r+0x20>)
 8012800:	4604      	mov	r4, r0
 8012802:	4608      	mov	r0, r1
 8012804:	4611      	mov	r1, r2
 8012806:	2200      	movs	r2, #0
 8012808:	602a      	str	r2, [r5, #0]
 801280a:	461a      	mov	r2, r3
 801280c:	f7f4 fca2 	bl	8007154 <_write>
 8012810:	1c43      	adds	r3, r0, #1
 8012812:	d102      	bne.n	801281a <_write_r+0x1e>
 8012814:	682b      	ldr	r3, [r5, #0]
 8012816:	b103      	cbz	r3, 801281a <_write_r+0x1e>
 8012818:	6023      	str	r3, [r4, #0]
 801281a:	bd38      	pop	{r3, r4, r5, pc}
 801281c:	20005bec 	.word	0x20005bec

08012820 <__assert_func>:
 8012820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012822:	4614      	mov	r4, r2
 8012824:	461a      	mov	r2, r3
 8012826:	4b09      	ldr	r3, [pc, #36]	@ (801284c <__assert_func+0x2c>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	4605      	mov	r5, r0
 801282c:	68d8      	ldr	r0, [r3, #12]
 801282e:	b954      	cbnz	r4, 8012846 <__assert_func+0x26>
 8012830:	4b07      	ldr	r3, [pc, #28]	@ (8012850 <__assert_func+0x30>)
 8012832:	461c      	mov	r4, r3
 8012834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012838:	9100      	str	r1, [sp, #0]
 801283a:	462b      	mov	r3, r5
 801283c:	4905      	ldr	r1, [pc, #20]	@ (8012854 <__assert_func+0x34>)
 801283e:	f000 f83b 	bl	80128b8 <fiprintf>
 8012842:	f000 f858 	bl	80128f6 <abort>
 8012846:	4b04      	ldr	r3, [pc, #16]	@ (8012858 <__assert_func+0x38>)
 8012848:	e7f4      	b.n	8012834 <__assert_func+0x14>
 801284a:	bf00      	nop
 801284c:	20000170 	.word	0x20000170
 8012850:	080145a6 	.word	0x080145a6
 8012854:	08014578 	.word	0x08014578
 8012858:	0801456b 	.word	0x0801456b

0801285c <_calloc_r>:
 801285c:	b570      	push	{r4, r5, r6, lr}
 801285e:	fba1 5402 	umull	r5, r4, r1, r2
 8012862:	b93c      	cbnz	r4, 8012874 <_calloc_r+0x18>
 8012864:	4629      	mov	r1, r5
 8012866:	f7ff fa3f 	bl	8011ce8 <_malloc_r>
 801286a:	4606      	mov	r6, r0
 801286c:	b928      	cbnz	r0, 801287a <_calloc_r+0x1e>
 801286e:	2600      	movs	r6, #0
 8012870:	4630      	mov	r0, r6
 8012872:	bd70      	pop	{r4, r5, r6, pc}
 8012874:	220c      	movs	r2, #12
 8012876:	6002      	str	r2, [r0, #0]
 8012878:	e7f9      	b.n	801286e <_calloc_r+0x12>
 801287a:	462a      	mov	r2, r5
 801287c:	4621      	mov	r1, r4
 801287e:	f7fe f97d 	bl	8010b7c <memset>
 8012882:	e7f5      	b.n	8012870 <_calloc_r+0x14>

08012884 <__ascii_mbtowc>:
 8012884:	b082      	sub	sp, #8
 8012886:	b901      	cbnz	r1, 801288a <__ascii_mbtowc+0x6>
 8012888:	a901      	add	r1, sp, #4
 801288a:	b142      	cbz	r2, 801289e <__ascii_mbtowc+0x1a>
 801288c:	b14b      	cbz	r3, 80128a2 <__ascii_mbtowc+0x1e>
 801288e:	7813      	ldrb	r3, [r2, #0]
 8012890:	600b      	str	r3, [r1, #0]
 8012892:	7812      	ldrb	r2, [r2, #0]
 8012894:	1e10      	subs	r0, r2, #0
 8012896:	bf18      	it	ne
 8012898:	2001      	movne	r0, #1
 801289a:	b002      	add	sp, #8
 801289c:	4770      	bx	lr
 801289e:	4610      	mov	r0, r2
 80128a0:	e7fb      	b.n	801289a <__ascii_mbtowc+0x16>
 80128a2:	f06f 0001 	mvn.w	r0, #1
 80128a6:	e7f8      	b.n	801289a <__ascii_mbtowc+0x16>

080128a8 <_malloc_usable_size_r>:
 80128a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128ac:	1f18      	subs	r0, r3, #4
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	bfbc      	itt	lt
 80128b2:	580b      	ldrlt	r3, [r1, r0]
 80128b4:	18c0      	addlt	r0, r0, r3
 80128b6:	4770      	bx	lr

080128b8 <fiprintf>:
 80128b8:	b40e      	push	{r1, r2, r3}
 80128ba:	b503      	push	{r0, r1, lr}
 80128bc:	4601      	mov	r1, r0
 80128be:	ab03      	add	r3, sp, #12
 80128c0:	4805      	ldr	r0, [pc, #20]	@ (80128d8 <fiprintf+0x20>)
 80128c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80128c6:	6800      	ldr	r0, [r0, #0]
 80128c8:	9301      	str	r3, [sp, #4]
 80128ca:	f000 f845 	bl	8012958 <_vfiprintf_r>
 80128ce:	b002      	add	sp, #8
 80128d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80128d4:	b003      	add	sp, #12
 80128d6:	4770      	bx	lr
 80128d8:	20000170 	.word	0x20000170

080128dc <__ascii_wctomb>:
 80128dc:	4603      	mov	r3, r0
 80128de:	4608      	mov	r0, r1
 80128e0:	b141      	cbz	r1, 80128f4 <__ascii_wctomb+0x18>
 80128e2:	2aff      	cmp	r2, #255	@ 0xff
 80128e4:	d904      	bls.n	80128f0 <__ascii_wctomb+0x14>
 80128e6:	228a      	movs	r2, #138	@ 0x8a
 80128e8:	601a      	str	r2, [r3, #0]
 80128ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128ee:	4770      	bx	lr
 80128f0:	700a      	strb	r2, [r1, #0]
 80128f2:	2001      	movs	r0, #1
 80128f4:	4770      	bx	lr

080128f6 <abort>:
 80128f6:	b508      	push	{r3, lr}
 80128f8:	2006      	movs	r0, #6
 80128fa:	f000 fa85 	bl	8012e08 <raise>
 80128fe:	2001      	movs	r0, #1
 8012900:	f7f4 fc00 	bl	8007104 <_exit>

08012904 <__sfputc_r>:
 8012904:	6893      	ldr	r3, [r2, #8]
 8012906:	3b01      	subs	r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	b410      	push	{r4}
 801290c:	6093      	str	r3, [r2, #8]
 801290e:	da08      	bge.n	8012922 <__sfputc_r+0x1e>
 8012910:	6994      	ldr	r4, [r2, #24]
 8012912:	42a3      	cmp	r3, r4
 8012914:	db01      	blt.n	801291a <__sfputc_r+0x16>
 8012916:	290a      	cmp	r1, #10
 8012918:	d103      	bne.n	8012922 <__sfputc_r+0x1e>
 801291a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801291e:	f000 b933 	b.w	8012b88 <__swbuf_r>
 8012922:	6813      	ldr	r3, [r2, #0]
 8012924:	1c58      	adds	r0, r3, #1
 8012926:	6010      	str	r0, [r2, #0]
 8012928:	7019      	strb	r1, [r3, #0]
 801292a:	4608      	mov	r0, r1
 801292c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012930:	4770      	bx	lr

08012932 <__sfputs_r>:
 8012932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012934:	4606      	mov	r6, r0
 8012936:	460f      	mov	r7, r1
 8012938:	4614      	mov	r4, r2
 801293a:	18d5      	adds	r5, r2, r3
 801293c:	42ac      	cmp	r4, r5
 801293e:	d101      	bne.n	8012944 <__sfputs_r+0x12>
 8012940:	2000      	movs	r0, #0
 8012942:	e007      	b.n	8012954 <__sfputs_r+0x22>
 8012944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012948:	463a      	mov	r2, r7
 801294a:	4630      	mov	r0, r6
 801294c:	f7ff ffda 	bl	8012904 <__sfputc_r>
 8012950:	1c43      	adds	r3, r0, #1
 8012952:	d1f3      	bne.n	801293c <__sfputs_r+0xa>
 8012954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012958 <_vfiprintf_r>:
 8012958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801295c:	460d      	mov	r5, r1
 801295e:	b09d      	sub	sp, #116	@ 0x74
 8012960:	4614      	mov	r4, r2
 8012962:	4698      	mov	r8, r3
 8012964:	4606      	mov	r6, r0
 8012966:	b118      	cbz	r0, 8012970 <_vfiprintf_r+0x18>
 8012968:	6a03      	ldr	r3, [r0, #32]
 801296a:	b90b      	cbnz	r3, 8012970 <_vfiprintf_r+0x18>
 801296c:	f7fe f8b0 	bl	8010ad0 <__sinit>
 8012970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012972:	07d9      	lsls	r1, r3, #31
 8012974:	d405      	bmi.n	8012982 <_vfiprintf_r+0x2a>
 8012976:	89ab      	ldrh	r3, [r5, #12]
 8012978:	059a      	lsls	r2, r3, #22
 801297a:	d402      	bmi.n	8012982 <_vfiprintf_r+0x2a>
 801297c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801297e:	f7fe f98a 	bl	8010c96 <__retarget_lock_acquire_recursive>
 8012982:	89ab      	ldrh	r3, [r5, #12]
 8012984:	071b      	lsls	r3, r3, #28
 8012986:	d501      	bpl.n	801298c <_vfiprintf_r+0x34>
 8012988:	692b      	ldr	r3, [r5, #16]
 801298a:	b99b      	cbnz	r3, 80129b4 <_vfiprintf_r+0x5c>
 801298c:	4629      	mov	r1, r5
 801298e:	4630      	mov	r0, r6
 8012990:	f000 f938 	bl	8012c04 <__swsetup_r>
 8012994:	b170      	cbz	r0, 80129b4 <_vfiprintf_r+0x5c>
 8012996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012998:	07dc      	lsls	r4, r3, #31
 801299a:	d504      	bpl.n	80129a6 <_vfiprintf_r+0x4e>
 801299c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80129a0:	b01d      	add	sp, #116	@ 0x74
 80129a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a6:	89ab      	ldrh	r3, [r5, #12]
 80129a8:	0598      	lsls	r0, r3, #22
 80129aa:	d4f7      	bmi.n	801299c <_vfiprintf_r+0x44>
 80129ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129ae:	f7fe f973 	bl	8010c98 <__retarget_lock_release_recursive>
 80129b2:	e7f3      	b.n	801299c <_vfiprintf_r+0x44>
 80129b4:	2300      	movs	r3, #0
 80129b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80129b8:	2320      	movs	r3, #32
 80129ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129be:	f8cd 800c 	str.w	r8, [sp, #12]
 80129c2:	2330      	movs	r3, #48	@ 0x30
 80129c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012b74 <_vfiprintf_r+0x21c>
 80129c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129cc:	f04f 0901 	mov.w	r9, #1
 80129d0:	4623      	mov	r3, r4
 80129d2:	469a      	mov	sl, r3
 80129d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129d8:	b10a      	cbz	r2, 80129de <_vfiprintf_r+0x86>
 80129da:	2a25      	cmp	r2, #37	@ 0x25
 80129dc:	d1f9      	bne.n	80129d2 <_vfiprintf_r+0x7a>
 80129de:	ebba 0b04 	subs.w	fp, sl, r4
 80129e2:	d00b      	beq.n	80129fc <_vfiprintf_r+0xa4>
 80129e4:	465b      	mov	r3, fp
 80129e6:	4622      	mov	r2, r4
 80129e8:	4629      	mov	r1, r5
 80129ea:	4630      	mov	r0, r6
 80129ec:	f7ff ffa1 	bl	8012932 <__sfputs_r>
 80129f0:	3001      	adds	r0, #1
 80129f2:	f000 80a7 	beq.w	8012b44 <_vfiprintf_r+0x1ec>
 80129f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129f8:	445a      	add	r2, fp
 80129fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80129fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 809f 	beq.w	8012b44 <_vfiprintf_r+0x1ec>
 8012a06:	2300      	movs	r3, #0
 8012a08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a10:	f10a 0a01 	add.w	sl, sl, #1
 8012a14:	9304      	str	r3, [sp, #16]
 8012a16:	9307      	str	r3, [sp, #28]
 8012a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a1e:	4654      	mov	r4, sl
 8012a20:	2205      	movs	r2, #5
 8012a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a26:	4853      	ldr	r0, [pc, #332]	@ (8012b74 <_vfiprintf_r+0x21c>)
 8012a28:	f7ed fbd2 	bl	80001d0 <memchr>
 8012a2c:	9a04      	ldr	r2, [sp, #16]
 8012a2e:	b9d8      	cbnz	r0, 8012a68 <_vfiprintf_r+0x110>
 8012a30:	06d1      	lsls	r1, r2, #27
 8012a32:	bf44      	itt	mi
 8012a34:	2320      	movmi	r3, #32
 8012a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a3a:	0713      	lsls	r3, r2, #28
 8012a3c:	bf44      	itt	mi
 8012a3e:	232b      	movmi	r3, #43	@ 0x2b
 8012a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a44:	f89a 3000 	ldrb.w	r3, [sl]
 8012a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a4a:	d015      	beq.n	8012a78 <_vfiprintf_r+0x120>
 8012a4c:	9a07      	ldr	r2, [sp, #28]
 8012a4e:	4654      	mov	r4, sl
 8012a50:	2000      	movs	r0, #0
 8012a52:	f04f 0c0a 	mov.w	ip, #10
 8012a56:	4621      	mov	r1, r4
 8012a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a5c:	3b30      	subs	r3, #48	@ 0x30
 8012a5e:	2b09      	cmp	r3, #9
 8012a60:	d94b      	bls.n	8012afa <_vfiprintf_r+0x1a2>
 8012a62:	b1b0      	cbz	r0, 8012a92 <_vfiprintf_r+0x13a>
 8012a64:	9207      	str	r2, [sp, #28]
 8012a66:	e014      	b.n	8012a92 <_vfiprintf_r+0x13a>
 8012a68:	eba0 0308 	sub.w	r3, r0, r8
 8012a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8012a70:	4313      	orrs	r3, r2
 8012a72:	9304      	str	r3, [sp, #16]
 8012a74:	46a2      	mov	sl, r4
 8012a76:	e7d2      	b.n	8012a1e <_vfiprintf_r+0xc6>
 8012a78:	9b03      	ldr	r3, [sp, #12]
 8012a7a:	1d19      	adds	r1, r3, #4
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	9103      	str	r1, [sp, #12]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	bfbb      	ittet	lt
 8012a84:	425b      	neglt	r3, r3
 8012a86:	f042 0202 	orrlt.w	r2, r2, #2
 8012a8a:	9307      	strge	r3, [sp, #28]
 8012a8c:	9307      	strlt	r3, [sp, #28]
 8012a8e:	bfb8      	it	lt
 8012a90:	9204      	strlt	r2, [sp, #16]
 8012a92:	7823      	ldrb	r3, [r4, #0]
 8012a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a96:	d10a      	bne.n	8012aae <_vfiprintf_r+0x156>
 8012a98:	7863      	ldrb	r3, [r4, #1]
 8012a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a9c:	d132      	bne.n	8012b04 <_vfiprintf_r+0x1ac>
 8012a9e:	9b03      	ldr	r3, [sp, #12]
 8012aa0:	1d1a      	adds	r2, r3, #4
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	9203      	str	r2, [sp, #12]
 8012aa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012aaa:	3402      	adds	r4, #2
 8012aac:	9305      	str	r3, [sp, #20]
 8012aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012b84 <_vfiprintf_r+0x22c>
 8012ab2:	7821      	ldrb	r1, [r4, #0]
 8012ab4:	2203      	movs	r2, #3
 8012ab6:	4650      	mov	r0, sl
 8012ab8:	f7ed fb8a 	bl	80001d0 <memchr>
 8012abc:	b138      	cbz	r0, 8012ace <_vfiprintf_r+0x176>
 8012abe:	9b04      	ldr	r3, [sp, #16]
 8012ac0:	eba0 000a 	sub.w	r0, r0, sl
 8012ac4:	2240      	movs	r2, #64	@ 0x40
 8012ac6:	4082      	lsls	r2, r0
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	3401      	adds	r4, #1
 8012acc:	9304      	str	r3, [sp, #16]
 8012ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ad2:	4829      	ldr	r0, [pc, #164]	@ (8012b78 <_vfiprintf_r+0x220>)
 8012ad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ad8:	2206      	movs	r2, #6
 8012ada:	f7ed fb79 	bl	80001d0 <memchr>
 8012ade:	2800      	cmp	r0, #0
 8012ae0:	d03f      	beq.n	8012b62 <_vfiprintf_r+0x20a>
 8012ae2:	4b26      	ldr	r3, [pc, #152]	@ (8012b7c <_vfiprintf_r+0x224>)
 8012ae4:	bb1b      	cbnz	r3, 8012b2e <_vfiprintf_r+0x1d6>
 8012ae6:	9b03      	ldr	r3, [sp, #12]
 8012ae8:	3307      	adds	r3, #7
 8012aea:	f023 0307 	bic.w	r3, r3, #7
 8012aee:	3308      	adds	r3, #8
 8012af0:	9303      	str	r3, [sp, #12]
 8012af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012af4:	443b      	add	r3, r7
 8012af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012af8:	e76a      	b.n	80129d0 <_vfiprintf_r+0x78>
 8012afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8012afe:	460c      	mov	r4, r1
 8012b00:	2001      	movs	r0, #1
 8012b02:	e7a8      	b.n	8012a56 <_vfiprintf_r+0xfe>
 8012b04:	2300      	movs	r3, #0
 8012b06:	3401      	adds	r4, #1
 8012b08:	9305      	str	r3, [sp, #20]
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	f04f 0c0a 	mov.w	ip, #10
 8012b10:	4620      	mov	r0, r4
 8012b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b16:	3a30      	subs	r2, #48	@ 0x30
 8012b18:	2a09      	cmp	r2, #9
 8012b1a:	d903      	bls.n	8012b24 <_vfiprintf_r+0x1cc>
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d0c6      	beq.n	8012aae <_vfiprintf_r+0x156>
 8012b20:	9105      	str	r1, [sp, #20]
 8012b22:	e7c4      	b.n	8012aae <_vfiprintf_r+0x156>
 8012b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b28:	4604      	mov	r4, r0
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e7f0      	b.n	8012b10 <_vfiprintf_r+0x1b8>
 8012b2e:	ab03      	add	r3, sp, #12
 8012b30:	9300      	str	r3, [sp, #0]
 8012b32:	462a      	mov	r2, r5
 8012b34:	4b12      	ldr	r3, [pc, #72]	@ (8012b80 <_vfiprintf_r+0x228>)
 8012b36:	a904      	add	r1, sp, #16
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7fd fb85 	bl	8010248 <_printf_float>
 8012b3e:	4607      	mov	r7, r0
 8012b40:	1c78      	adds	r0, r7, #1
 8012b42:	d1d6      	bne.n	8012af2 <_vfiprintf_r+0x19a>
 8012b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b46:	07d9      	lsls	r1, r3, #31
 8012b48:	d405      	bmi.n	8012b56 <_vfiprintf_r+0x1fe>
 8012b4a:	89ab      	ldrh	r3, [r5, #12]
 8012b4c:	059a      	lsls	r2, r3, #22
 8012b4e:	d402      	bmi.n	8012b56 <_vfiprintf_r+0x1fe>
 8012b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b52:	f7fe f8a1 	bl	8010c98 <__retarget_lock_release_recursive>
 8012b56:	89ab      	ldrh	r3, [r5, #12]
 8012b58:	065b      	lsls	r3, r3, #25
 8012b5a:	f53f af1f 	bmi.w	801299c <_vfiprintf_r+0x44>
 8012b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b60:	e71e      	b.n	80129a0 <_vfiprintf_r+0x48>
 8012b62:	ab03      	add	r3, sp, #12
 8012b64:	9300      	str	r3, [sp, #0]
 8012b66:	462a      	mov	r2, r5
 8012b68:	4b05      	ldr	r3, [pc, #20]	@ (8012b80 <_vfiprintf_r+0x228>)
 8012b6a:	a904      	add	r1, sp, #16
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f7fd fe03 	bl	8010778 <_printf_i>
 8012b72:	e7e4      	b.n	8012b3e <_vfiprintf_r+0x1e6>
 8012b74:	080142f9 	.word	0x080142f9
 8012b78:	08014303 	.word	0x08014303
 8012b7c:	08010249 	.word	0x08010249
 8012b80:	08012933 	.word	0x08012933
 8012b84:	080142ff 	.word	0x080142ff

08012b88 <__swbuf_r>:
 8012b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b8a:	460e      	mov	r6, r1
 8012b8c:	4614      	mov	r4, r2
 8012b8e:	4605      	mov	r5, r0
 8012b90:	b118      	cbz	r0, 8012b9a <__swbuf_r+0x12>
 8012b92:	6a03      	ldr	r3, [r0, #32]
 8012b94:	b90b      	cbnz	r3, 8012b9a <__swbuf_r+0x12>
 8012b96:	f7fd ff9b 	bl	8010ad0 <__sinit>
 8012b9a:	69a3      	ldr	r3, [r4, #24]
 8012b9c:	60a3      	str	r3, [r4, #8]
 8012b9e:	89a3      	ldrh	r3, [r4, #12]
 8012ba0:	071a      	lsls	r2, r3, #28
 8012ba2:	d501      	bpl.n	8012ba8 <__swbuf_r+0x20>
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	b943      	cbnz	r3, 8012bba <__swbuf_r+0x32>
 8012ba8:	4621      	mov	r1, r4
 8012baa:	4628      	mov	r0, r5
 8012bac:	f000 f82a 	bl	8012c04 <__swsetup_r>
 8012bb0:	b118      	cbz	r0, 8012bba <__swbuf_r+0x32>
 8012bb2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012bb6:	4638      	mov	r0, r7
 8012bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	6922      	ldr	r2, [r4, #16]
 8012bbe:	1a98      	subs	r0, r3, r2
 8012bc0:	6963      	ldr	r3, [r4, #20]
 8012bc2:	b2f6      	uxtb	r6, r6
 8012bc4:	4283      	cmp	r3, r0
 8012bc6:	4637      	mov	r7, r6
 8012bc8:	dc05      	bgt.n	8012bd6 <__swbuf_r+0x4e>
 8012bca:	4621      	mov	r1, r4
 8012bcc:	4628      	mov	r0, r5
 8012bce:	f7ff f98f 	bl	8011ef0 <_fflush_r>
 8012bd2:	2800      	cmp	r0, #0
 8012bd4:	d1ed      	bne.n	8012bb2 <__swbuf_r+0x2a>
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	60a3      	str	r3, [r4, #8]
 8012bdc:	6823      	ldr	r3, [r4, #0]
 8012bde:	1c5a      	adds	r2, r3, #1
 8012be0:	6022      	str	r2, [r4, #0]
 8012be2:	701e      	strb	r6, [r3, #0]
 8012be4:	6962      	ldr	r2, [r4, #20]
 8012be6:	1c43      	adds	r3, r0, #1
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d004      	beq.n	8012bf6 <__swbuf_r+0x6e>
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	07db      	lsls	r3, r3, #31
 8012bf0:	d5e1      	bpl.n	8012bb6 <__swbuf_r+0x2e>
 8012bf2:	2e0a      	cmp	r6, #10
 8012bf4:	d1df      	bne.n	8012bb6 <__swbuf_r+0x2e>
 8012bf6:	4621      	mov	r1, r4
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	f7ff f979 	bl	8011ef0 <_fflush_r>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	d0d9      	beq.n	8012bb6 <__swbuf_r+0x2e>
 8012c02:	e7d6      	b.n	8012bb2 <__swbuf_r+0x2a>

08012c04 <__swsetup_r>:
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4b29      	ldr	r3, [pc, #164]	@ (8012cac <__swsetup_r+0xa8>)
 8012c08:	4605      	mov	r5, r0
 8012c0a:	6818      	ldr	r0, [r3, #0]
 8012c0c:	460c      	mov	r4, r1
 8012c0e:	b118      	cbz	r0, 8012c18 <__swsetup_r+0x14>
 8012c10:	6a03      	ldr	r3, [r0, #32]
 8012c12:	b90b      	cbnz	r3, 8012c18 <__swsetup_r+0x14>
 8012c14:	f7fd ff5c 	bl	8010ad0 <__sinit>
 8012c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c1c:	0719      	lsls	r1, r3, #28
 8012c1e:	d422      	bmi.n	8012c66 <__swsetup_r+0x62>
 8012c20:	06da      	lsls	r2, r3, #27
 8012c22:	d407      	bmi.n	8012c34 <__swsetup_r+0x30>
 8012c24:	2209      	movs	r2, #9
 8012c26:	602a      	str	r2, [r5, #0]
 8012c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c2c:	81a3      	strh	r3, [r4, #12]
 8012c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c32:	e033      	b.n	8012c9c <__swsetup_r+0x98>
 8012c34:	0758      	lsls	r0, r3, #29
 8012c36:	d512      	bpl.n	8012c5e <__swsetup_r+0x5a>
 8012c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c3a:	b141      	cbz	r1, 8012c4e <__swsetup_r+0x4a>
 8012c3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c40:	4299      	cmp	r1, r3
 8012c42:	d002      	beq.n	8012c4a <__swsetup_r+0x46>
 8012c44:	4628      	mov	r0, r5
 8012c46:	f7fe fe83 	bl	8011950 <_free_r>
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c4e:	89a3      	ldrh	r3, [r4, #12]
 8012c50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c54:	81a3      	strh	r3, [r4, #12]
 8012c56:	2300      	movs	r3, #0
 8012c58:	6063      	str	r3, [r4, #4]
 8012c5a:	6923      	ldr	r3, [r4, #16]
 8012c5c:	6023      	str	r3, [r4, #0]
 8012c5e:	89a3      	ldrh	r3, [r4, #12]
 8012c60:	f043 0308 	orr.w	r3, r3, #8
 8012c64:	81a3      	strh	r3, [r4, #12]
 8012c66:	6923      	ldr	r3, [r4, #16]
 8012c68:	b94b      	cbnz	r3, 8012c7e <__swsetup_r+0x7a>
 8012c6a:	89a3      	ldrh	r3, [r4, #12]
 8012c6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c74:	d003      	beq.n	8012c7e <__swsetup_r+0x7a>
 8012c76:	4621      	mov	r1, r4
 8012c78:	4628      	mov	r0, r5
 8012c7a:	f000 f83f 	bl	8012cfc <__smakebuf_r>
 8012c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c82:	f013 0201 	ands.w	r2, r3, #1
 8012c86:	d00a      	beq.n	8012c9e <__swsetup_r+0x9a>
 8012c88:	2200      	movs	r2, #0
 8012c8a:	60a2      	str	r2, [r4, #8]
 8012c8c:	6962      	ldr	r2, [r4, #20]
 8012c8e:	4252      	negs	r2, r2
 8012c90:	61a2      	str	r2, [r4, #24]
 8012c92:	6922      	ldr	r2, [r4, #16]
 8012c94:	b942      	cbnz	r2, 8012ca8 <__swsetup_r+0xa4>
 8012c96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012c9a:	d1c5      	bne.n	8012c28 <__swsetup_r+0x24>
 8012c9c:	bd38      	pop	{r3, r4, r5, pc}
 8012c9e:	0799      	lsls	r1, r3, #30
 8012ca0:	bf58      	it	pl
 8012ca2:	6962      	ldrpl	r2, [r4, #20]
 8012ca4:	60a2      	str	r2, [r4, #8]
 8012ca6:	e7f4      	b.n	8012c92 <__swsetup_r+0x8e>
 8012ca8:	2000      	movs	r0, #0
 8012caa:	e7f7      	b.n	8012c9c <__swsetup_r+0x98>
 8012cac:	20000170 	.word	0x20000170

08012cb0 <__swhatbuf_r>:
 8012cb0:	b570      	push	{r4, r5, r6, lr}
 8012cb2:	460c      	mov	r4, r1
 8012cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cb8:	2900      	cmp	r1, #0
 8012cba:	b096      	sub	sp, #88	@ 0x58
 8012cbc:	4615      	mov	r5, r2
 8012cbe:	461e      	mov	r6, r3
 8012cc0:	da0d      	bge.n	8012cde <__swhatbuf_r+0x2e>
 8012cc2:	89a3      	ldrh	r3, [r4, #12]
 8012cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012cc8:	f04f 0100 	mov.w	r1, #0
 8012ccc:	bf14      	ite	ne
 8012cce:	2340      	movne	r3, #64	@ 0x40
 8012cd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	6031      	str	r1, [r6, #0]
 8012cd8:	602b      	str	r3, [r5, #0]
 8012cda:	b016      	add	sp, #88	@ 0x58
 8012cdc:	bd70      	pop	{r4, r5, r6, pc}
 8012cde:	466a      	mov	r2, sp
 8012ce0:	f000 f848 	bl	8012d74 <_fstat_r>
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	dbec      	blt.n	8012cc2 <__swhatbuf_r+0x12>
 8012ce8:	9901      	ldr	r1, [sp, #4]
 8012cea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012cee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012cf2:	4259      	negs	r1, r3
 8012cf4:	4159      	adcs	r1, r3
 8012cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012cfa:	e7eb      	b.n	8012cd4 <__swhatbuf_r+0x24>

08012cfc <__smakebuf_r>:
 8012cfc:	898b      	ldrh	r3, [r1, #12]
 8012cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d00:	079d      	lsls	r5, r3, #30
 8012d02:	4606      	mov	r6, r0
 8012d04:	460c      	mov	r4, r1
 8012d06:	d507      	bpl.n	8012d18 <__smakebuf_r+0x1c>
 8012d08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012d0c:	6023      	str	r3, [r4, #0]
 8012d0e:	6123      	str	r3, [r4, #16]
 8012d10:	2301      	movs	r3, #1
 8012d12:	6163      	str	r3, [r4, #20]
 8012d14:	b003      	add	sp, #12
 8012d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d18:	ab01      	add	r3, sp, #4
 8012d1a:	466a      	mov	r2, sp
 8012d1c:	f7ff ffc8 	bl	8012cb0 <__swhatbuf_r>
 8012d20:	9f00      	ldr	r7, [sp, #0]
 8012d22:	4605      	mov	r5, r0
 8012d24:	4639      	mov	r1, r7
 8012d26:	4630      	mov	r0, r6
 8012d28:	f7fe ffde 	bl	8011ce8 <_malloc_r>
 8012d2c:	b948      	cbnz	r0, 8012d42 <__smakebuf_r+0x46>
 8012d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d32:	059a      	lsls	r2, r3, #22
 8012d34:	d4ee      	bmi.n	8012d14 <__smakebuf_r+0x18>
 8012d36:	f023 0303 	bic.w	r3, r3, #3
 8012d3a:	f043 0302 	orr.w	r3, r3, #2
 8012d3e:	81a3      	strh	r3, [r4, #12]
 8012d40:	e7e2      	b.n	8012d08 <__smakebuf_r+0xc>
 8012d42:	89a3      	ldrh	r3, [r4, #12]
 8012d44:	6020      	str	r0, [r4, #0]
 8012d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d4a:	81a3      	strh	r3, [r4, #12]
 8012d4c:	9b01      	ldr	r3, [sp, #4]
 8012d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012d52:	b15b      	cbz	r3, 8012d6c <__smakebuf_r+0x70>
 8012d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d58:	4630      	mov	r0, r6
 8012d5a:	f000 f81d 	bl	8012d98 <_isatty_r>
 8012d5e:	b128      	cbz	r0, 8012d6c <__smakebuf_r+0x70>
 8012d60:	89a3      	ldrh	r3, [r4, #12]
 8012d62:	f023 0303 	bic.w	r3, r3, #3
 8012d66:	f043 0301 	orr.w	r3, r3, #1
 8012d6a:	81a3      	strh	r3, [r4, #12]
 8012d6c:	89a3      	ldrh	r3, [r4, #12]
 8012d6e:	431d      	orrs	r5, r3
 8012d70:	81a5      	strh	r5, [r4, #12]
 8012d72:	e7cf      	b.n	8012d14 <__smakebuf_r+0x18>

08012d74 <_fstat_r>:
 8012d74:	b538      	push	{r3, r4, r5, lr}
 8012d76:	4d07      	ldr	r5, [pc, #28]	@ (8012d94 <_fstat_r+0x20>)
 8012d78:	2300      	movs	r3, #0
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	4608      	mov	r0, r1
 8012d7e:	4611      	mov	r1, r2
 8012d80:	602b      	str	r3, [r5, #0]
 8012d82:	f7f4 fa0f 	bl	80071a4 <_fstat>
 8012d86:	1c43      	adds	r3, r0, #1
 8012d88:	d102      	bne.n	8012d90 <_fstat_r+0x1c>
 8012d8a:	682b      	ldr	r3, [r5, #0]
 8012d8c:	b103      	cbz	r3, 8012d90 <_fstat_r+0x1c>
 8012d8e:	6023      	str	r3, [r4, #0]
 8012d90:	bd38      	pop	{r3, r4, r5, pc}
 8012d92:	bf00      	nop
 8012d94:	20005bec 	.word	0x20005bec

08012d98 <_isatty_r>:
 8012d98:	b538      	push	{r3, r4, r5, lr}
 8012d9a:	4d06      	ldr	r5, [pc, #24]	@ (8012db4 <_isatty_r+0x1c>)
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	4604      	mov	r4, r0
 8012da0:	4608      	mov	r0, r1
 8012da2:	602b      	str	r3, [r5, #0]
 8012da4:	f7f4 fa0e 	bl	80071c4 <_isatty>
 8012da8:	1c43      	adds	r3, r0, #1
 8012daa:	d102      	bne.n	8012db2 <_isatty_r+0x1a>
 8012dac:	682b      	ldr	r3, [r5, #0]
 8012dae:	b103      	cbz	r3, 8012db2 <_isatty_r+0x1a>
 8012db0:	6023      	str	r3, [r4, #0]
 8012db2:	bd38      	pop	{r3, r4, r5, pc}
 8012db4:	20005bec 	.word	0x20005bec

08012db8 <_raise_r>:
 8012db8:	291f      	cmp	r1, #31
 8012dba:	b538      	push	{r3, r4, r5, lr}
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	460c      	mov	r4, r1
 8012dc0:	d904      	bls.n	8012dcc <_raise_r+0x14>
 8012dc2:	2316      	movs	r3, #22
 8012dc4:	6003      	str	r3, [r0, #0]
 8012dc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012dce:	b112      	cbz	r2, 8012dd6 <_raise_r+0x1e>
 8012dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012dd4:	b94b      	cbnz	r3, 8012dea <_raise_r+0x32>
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f000 f830 	bl	8012e3c <_getpid_r>
 8012ddc:	4622      	mov	r2, r4
 8012dde:	4601      	mov	r1, r0
 8012de0:	4628      	mov	r0, r5
 8012de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012de6:	f000 b817 	b.w	8012e18 <_kill_r>
 8012dea:	2b01      	cmp	r3, #1
 8012dec:	d00a      	beq.n	8012e04 <_raise_r+0x4c>
 8012dee:	1c59      	adds	r1, r3, #1
 8012df0:	d103      	bne.n	8012dfa <_raise_r+0x42>
 8012df2:	2316      	movs	r3, #22
 8012df4:	6003      	str	r3, [r0, #0]
 8012df6:	2001      	movs	r0, #1
 8012df8:	e7e7      	b.n	8012dca <_raise_r+0x12>
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012e00:	4620      	mov	r0, r4
 8012e02:	4798      	blx	r3
 8012e04:	2000      	movs	r0, #0
 8012e06:	e7e0      	b.n	8012dca <_raise_r+0x12>

08012e08 <raise>:
 8012e08:	4b02      	ldr	r3, [pc, #8]	@ (8012e14 <raise+0xc>)
 8012e0a:	4601      	mov	r1, r0
 8012e0c:	6818      	ldr	r0, [r3, #0]
 8012e0e:	f7ff bfd3 	b.w	8012db8 <_raise_r>
 8012e12:	bf00      	nop
 8012e14:	20000170 	.word	0x20000170

08012e18 <_kill_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d07      	ldr	r5, [pc, #28]	@ (8012e38 <_kill_r+0x20>)
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	4604      	mov	r4, r0
 8012e20:	4608      	mov	r0, r1
 8012e22:	4611      	mov	r1, r2
 8012e24:	602b      	str	r3, [r5, #0]
 8012e26:	f7f4 f95d 	bl	80070e4 <_kill>
 8012e2a:	1c43      	adds	r3, r0, #1
 8012e2c:	d102      	bne.n	8012e34 <_kill_r+0x1c>
 8012e2e:	682b      	ldr	r3, [r5, #0]
 8012e30:	b103      	cbz	r3, 8012e34 <_kill_r+0x1c>
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	bd38      	pop	{r3, r4, r5, pc}
 8012e36:	bf00      	nop
 8012e38:	20005bec 	.word	0x20005bec

08012e3c <_getpid_r>:
 8012e3c:	f7f4 b94a 	b.w	80070d4 <_getpid>

08012e40 <cos>:
 8012e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e42:	ec53 2b10 	vmov	r2, r3, d0
 8012e46:	4826      	ldr	r0, [pc, #152]	@ (8012ee0 <cos+0xa0>)
 8012e48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012e4c:	4281      	cmp	r1, r0
 8012e4e:	d806      	bhi.n	8012e5e <cos+0x1e>
 8012e50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012ed8 <cos+0x98>
 8012e54:	b005      	add	sp, #20
 8012e56:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e5a:	f000 bded 	b.w	8013a38 <__kernel_cos>
 8012e5e:	4821      	ldr	r0, [pc, #132]	@ (8012ee4 <cos+0xa4>)
 8012e60:	4281      	cmp	r1, r0
 8012e62:	d908      	bls.n	8012e76 <cos+0x36>
 8012e64:	4610      	mov	r0, r2
 8012e66:	4619      	mov	r1, r3
 8012e68:	f7ed fa0e 	bl	8000288 <__aeabi_dsub>
 8012e6c:	ec41 0b10 	vmov	d0, r0, r1
 8012e70:	b005      	add	sp, #20
 8012e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e76:	4668      	mov	r0, sp
 8012e78:	f000 f88a 	bl	8012f90 <__ieee754_rem_pio2>
 8012e7c:	f000 0003 	and.w	r0, r0, #3
 8012e80:	2801      	cmp	r0, #1
 8012e82:	d00b      	beq.n	8012e9c <cos+0x5c>
 8012e84:	2802      	cmp	r0, #2
 8012e86:	d015      	beq.n	8012eb4 <cos+0x74>
 8012e88:	b9d8      	cbnz	r0, 8012ec2 <cos+0x82>
 8012e8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e8e:	ed9d 0b00 	vldr	d0, [sp]
 8012e92:	f000 fdd1 	bl	8013a38 <__kernel_cos>
 8012e96:	ec51 0b10 	vmov	r0, r1, d0
 8012e9a:	e7e7      	b.n	8012e6c <cos+0x2c>
 8012e9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ea0:	ed9d 0b00 	vldr	d0, [sp]
 8012ea4:	f000 fe90 	bl	8013bc8 <__kernel_sin>
 8012ea8:	ec53 2b10 	vmov	r2, r3, d0
 8012eac:	4610      	mov	r0, r2
 8012eae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012eb2:	e7db      	b.n	8012e6c <cos+0x2c>
 8012eb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012eb8:	ed9d 0b00 	vldr	d0, [sp]
 8012ebc:	f000 fdbc 	bl	8013a38 <__kernel_cos>
 8012ec0:	e7f2      	b.n	8012ea8 <cos+0x68>
 8012ec2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ec6:	ed9d 0b00 	vldr	d0, [sp]
 8012eca:	2001      	movs	r0, #1
 8012ecc:	f000 fe7c 	bl	8013bc8 <__kernel_sin>
 8012ed0:	e7e1      	b.n	8012e96 <cos+0x56>
 8012ed2:	bf00      	nop
 8012ed4:	f3af 8000 	nop.w
	...
 8012ee0:	3fe921fb 	.word	0x3fe921fb
 8012ee4:	7fefffff 	.word	0x7fefffff

08012ee8 <sin>:
 8012ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012eea:	ec53 2b10 	vmov	r2, r3, d0
 8012eee:	4826      	ldr	r0, [pc, #152]	@ (8012f88 <sin+0xa0>)
 8012ef0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012ef4:	4281      	cmp	r1, r0
 8012ef6:	d807      	bhi.n	8012f08 <sin+0x20>
 8012ef8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012f80 <sin+0x98>
 8012efc:	2000      	movs	r0, #0
 8012efe:	b005      	add	sp, #20
 8012f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f04:	f000 be60 	b.w	8013bc8 <__kernel_sin>
 8012f08:	4820      	ldr	r0, [pc, #128]	@ (8012f8c <sin+0xa4>)
 8012f0a:	4281      	cmp	r1, r0
 8012f0c:	d908      	bls.n	8012f20 <sin+0x38>
 8012f0e:	4610      	mov	r0, r2
 8012f10:	4619      	mov	r1, r3
 8012f12:	f7ed f9b9 	bl	8000288 <__aeabi_dsub>
 8012f16:	ec41 0b10 	vmov	d0, r0, r1
 8012f1a:	b005      	add	sp, #20
 8012f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f20:	4668      	mov	r0, sp
 8012f22:	f000 f835 	bl	8012f90 <__ieee754_rem_pio2>
 8012f26:	f000 0003 	and.w	r0, r0, #3
 8012f2a:	2801      	cmp	r0, #1
 8012f2c:	d00c      	beq.n	8012f48 <sin+0x60>
 8012f2e:	2802      	cmp	r0, #2
 8012f30:	d011      	beq.n	8012f56 <sin+0x6e>
 8012f32:	b9e8      	cbnz	r0, 8012f70 <sin+0x88>
 8012f34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f38:	ed9d 0b00 	vldr	d0, [sp]
 8012f3c:	2001      	movs	r0, #1
 8012f3e:	f000 fe43 	bl	8013bc8 <__kernel_sin>
 8012f42:	ec51 0b10 	vmov	r0, r1, d0
 8012f46:	e7e6      	b.n	8012f16 <sin+0x2e>
 8012f48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f4c:	ed9d 0b00 	vldr	d0, [sp]
 8012f50:	f000 fd72 	bl	8013a38 <__kernel_cos>
 8012f54:	e7f5      	b.n	8012f42 <sin+0x5a>
 8012f56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f5a:	ed9d 0b00 	vldr	d0, [sp]
 8012f5e:	2001      	movs	r0, #1
 8012f60:	f000 fe32 	bl	8013bc8 <__kernel_sin>
 8012f64:	ec53 2b10 	vmov	r2, r3, d0
 8012f68:	4610      	mov	r0, r2
 8012f6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012f6e:	e7d2      	b.n	8012f16 <sin+0x2e>
 8012f70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012f74:	ed9d 0b00 	vldr	d0, [sp]
 8012f78:	f000 fd5e 	bl	8013a38 <__kernel_cos>
 8012f7c:	e7f2      	b.n	8012f64 <sin+0x7c>
 8012f7e:	bf00      	nop
	...
 8012f88:	3fe921fb 	.word	0x3fe921fb
 8012f8c:	7fefffff 	.word	0x7fefffff

08012f90 <__ieee754_rem_pio2>:
 8012f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f94:	ec57 6b10 	vmov	r6, r7, d0
 8012f98:	4bc5      	ldr	r3, [pc, #788]	@ (80132b0 <__ieee754_rem_pio2+0x320>)
 8012f9a:	b08d      	sub	sp, #52	@ 0x34
 8012f9c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012fa0:	4598      	cmp	r8, r3
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	9704      	str	r7, [sp, #16]
 8012fa6:	d807      	bhi.n	8012fb8 <__ieee754_rem_pio2+0x28>
 8012fa8:	2200      	movs	r2, #0
 8012faa:	2300      	movs	r3, #0
 8012fac:	ed80 0b00 	vstr	d0, [r0]
 8012fb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012fb4:	2500      	movs	r5, #0
 8012fb6:	e028      	b.n	801300a <__ieee754_rem_pio2+0x7a>
 8012fb8:	4bbe      	ldr	r3, [pc, #760]	@ (80132b4 <__ieee754_rem_pio2+0x324>)
 8012fba:	4598      	cmp	r8, r3
 8012fbc:	d878      	bhi.n	80130b0 <__ieee754_rem_pio2+0x120>
 8012fbe:	9b04      	ldr	r3, [sp, #16]
 8012fc0:	4dbd      	ldr	r5, [pc, #756]	@ (80132b8 <__ieee754_rem_pio2+0x328>)
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013278 <__ieee754_rem_pio2+0x2e8>)
 8012fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fcc:	4639      	mov	r1, r7
 8012fce:	dd38      	ble.n	8013042 <__ieee754_rem_pio2+0xb2>
 8012fd0:	f7ed f95a 	bl	8000288 <__aeabi_dsub>
 8012fd4:	45a8      	cmp	r8, r5
 8012fd6:	4606      	mov	r6, r0
 8012fd8:	460f      	mov	r7, r1
 8012fda:	d01a      	beq.n	8013012 <__ieee754_rem_pio2+0x82>
 8012fdc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013280 <__ieee754_rem_pio2+0x2f0>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	f7ed f951 	bl	8000288 <__aeabi_dsub>
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	460b      	mov	r3, r1
 8012fea:	4680      	mov	r8, r0
 8012fec:	4689      	mov	r9, r1
 8012fee:	4630      	mov	r0, r6
 8012ff0:	4639      	mov	r1, r7
 8012ff2:	f7ed f949 	bl	8000288 <__aeabi_dsub>
 8012ff6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013280 <__ieee754_rem_pio2+0x2f0>)
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	f7ed f944 	bl	8000288 <__aeabi_dsub>
 8013000:	e9c4 8900 	strd	r8, r9, [r4]
 8013004:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013008:	2501      	movs	r5, #1
 801300a:	4628      	mov	r0, r5
 801300c:	b00d      	add	sp, #52	@ 0x34
 801300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013012:	a39d      	add	r3, pc, #628	@ (adr r3, 8013288 <__ieee754_rem_pio2+0x2f8>)
 8013014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013018:	f7ed f936 	bl	8000288 <__aeabi_dsub>
 801301c:	a39c      	add	r3, pc, #624	@ (adr r3, 8013290 <__ieee754_rem_pio2+0x300>)
 801301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013022:	4606      	mov	r6, r0
 8013024:	460f      	mov	r7, r1
 8013026:	f7ed f92f 	bl	8000288 <__aeabi_dsub>
 801302a:	4602      	mov	r2, r0
 801302c:	460b      	mov	r3, r1
 801302e:	4680      	mov	r8, r0
 8013030:	4689      	mov	r9, r1
 8013032:	4630      	mov	r0, r6
 8013034:	4639      	mov	r1, r7
 8013036:	f7ed f927 	bl	8000288 <__aeabi_dsub>
 801303a:	a395      	add	r3, pc, #596	@ (adr r3, 8013290 <__ieee754_rem_pio2+0x300>)
 801303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013040:	e7dc      	b.n	8012ffc <__ieee754_rem_pio2+0x6c>
 8013042:	f7ed f923 	bl	800028c <__adddf3>
 8013046:	45a8      	cmp	r8, r5
 8013048:	4606      	mov	r6, r0
 801304a:	460f      	mov	r7, r1
 801304c:	d018      	beq.n	8013080 <__ieee754_rem_pio2+0xf0>
 801304e:	a38c      	add	r3, pc, #560	@ (adr r3, 8013280 <__ieee754_rem_pio2+0x2f0>)
 8013050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013054:	f7ed f91a 	bl	800028c <__adddf3>
 8013058:	4602      	mov	r2, r0
 801305a:	460b      	mov	r3, r1
 801305c:	4680      	mov	r8, r0
 801305e:	4689      	mov	r9, r1
 8013060:	4630      	mov	r0, r6
 8013062:	4639      	mov	r1, r7
 8013064:	f7ed f910 	bl	8000288 <__aeabi_dsub>
 8013068:	a385      	add	r3, pc, #532	@ (adr r3, 8013280 <__ieee754_rem_pio2+0x2f0>)
 801306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801306e:	f7ed f90d 	bl	800028c <__adddf3>
 8013072:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013076:	e9c4 8900 	strd	r8, r9, [r4]
 801307a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801307e:	e7c4      	b.n	801300a <__ieee754_rem_pio2+0x7a>
 8013080:	a381      	add	r3, pc, #516	@ (adr r3, 8013288 <__ieee754_rem_pio2+0x2f8>)
 8013082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013086:	f7ed f901 	bl	800028c <__adddf3>
 801308a:	a381      	add	r3, pc, #516	@ (adr r3, 8013290 <__ieee754_rem_pio2+0x300>)
 801308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013090:	4606      	mov	r6, r0
 8013092:	460f      	mov	r7, r1
 8013094:	f7ed f8fa 	bl	800028c <__adddf3>
 8013098:	4602      	mov	r2, r0
 801309a:	460b      	mov	r3, r1
 801309c:	4680      	mov	r8, r0
 801309e:	4689      	mov	r9, r1
 80130a0:	4630      	mov	r0, r6
 80130a2:	4639      	mov	r1, r7
 80130a4:	f7ed f8f0 	bl	8000288 <__aeabi_dsub>
 80130a8:	a379      	add	r3, pc, #484	@ (adr r3, 8013290 <__ieee754_rem_pio2+0x300>)
 80130aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ae:	e7de      	b.n	801306e <__ieee754_rem_pio2+0xde>
 80130b0:	4b82      	ldr	r3, [pc, #520]	@ (80132bc <__ieee754_rem_pio2+0x32c>)
 80130b2:	4598      	cmp	r8, r3
 80130b4:	f200 80d1 	bhi.w	801325a <__ieee754_rem_pio2+0x2ca>
 80130b8:	f000 fe40 	bl	8013d3c <fabs>
 80130bc:	ec57 6b10 	vmov	r6, r7, d0
 80130c0:	a375      	add	r3, pc, #468	@ (adr r3, 8013298 <__ieee754_rem_pio2+0x308>)
 80130c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c6:	4630      	mov	r0, r6
 80130c8:	4639      	mov	r1, r7
 80130ca:	f7ed fa95 	bl	80005f8 <__aeabi_dmul>
 80130ce:	4b7c      	ldr	r3, [pc, #496]	@ (80132c0 <__ieee754_rem_pio2+0x330>)
 80130d0:	2200      	movs	r2, #0
 80130d2:	f7ed f8db 	bl	800028c <__adddf3>
 80130d6:	f7ed fd3f 	bl	8000b58 <__aeabi_d2iz>
 80130da:	4605      	mov	r5, r0
 80130dc:	f7ed fa22 	bl	8000524 <__aeabi_i2d>
 80130e0:	4602      	mov	r2, r0
 80130e2:	460b      	mov	r3, r1
 80130e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80130e8:	a363      	add	r3, pc, #396	@ (adr r3, 8013278 <__ieee754_rem_pio2+0x2e8>)
 80130ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ee:	f7ed fa83 	bl	80005f8 <__aeabi_dmul>
 80130f2:	4602      	mov	r2, r0
 80130f4:	460b      	mov	r3, r1
 80130f6:	4630      	mov	r0, r6
 80130f8:	4639      	mov	r1, r7
 80130fa:	f7ed f8c5 	bl	8000288 <__aeabi_dsub>
 80130fe:	a360      	add	r3, pc, #384	@ (adr r3, 8013280 <__ieee754_rem_pio2+0x2f0>)
 8013100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013104:	4682      	mov	sl, r0
 8013106:	468b      	mov	fp, r1
 8013108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801310c:	f7ed fa74 	bl	80005f8 <__aeabi_dmul>
 8013110:	2d1f      	cmp	r5, #31
 8013112:	4606      	mov	r6, r0
 8013114:	460f      	mov	r7, r1
 8013116:	dc0c      	bgt.n	8013132 <__ieee754_rem_pio2+0x1a2>
 8013118:	4b6a      	ldr	r3, [pc, #424]	@ (80132c4 <__ieee754_rem_pio2+0x334>)
 801311a:	1e6a      	subs	r2, r5, #1
 801311c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013120:	4543      	cmp	r3, r8
 8013122:	d006      	beq.n	8013132 <__ieee754_rem_pio2+0x1a2>
 8013124:	4632      	mov	r2, r6
 8013126:	463b      	mov	r3, r7
 8013128:	4650      	mov	r0, sl
 801312a:	4659      	mov	r1, fp
 801312c:	f7ed f8ac 	bl	8000288 <__aeabi_dsub>
 8013130:	e00e      	b.n	8013150 <__ieee754_rem_pio2+0x1c0>
 8013132:	463b      	mov	r3, r7
 8013134:	4632      	mov	r2, r6
 8013136:	4650      	mov	r0, sl
 8013138:	4659      	mov	r1, fp
 801313a:	f7ed f8a5 	bl	8000288 <__aeabi_dsub>
 801313e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013142:	9305      	str	r3, [sp, #20]
 8013144:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013148:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801314c:	2b10      	cmp	r3, #16
 801314e:	dc02      	bgt.n	8013156 <__ieee754_rem_pio2+0x1c6>
 8013150:	e9c4 0100 	strd	r0, r1, [r4]
 8013154:	e039      	b.n	80131ca <__ieee754_rem_pio2+0x23a>
 8013156:	a34c      	add	r3, pc, #304	@ (adr r3, 8013288 <__ieee754_rem_pio2+0x2f8>)
 8013158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013160:	f7ed fa4a 	bl	80005f8 <__aeabi_dmul>
 8013164:	4606      	mov	r6, r0
 8013166:	460f      	mov	r7, r1
 8013168:	4602      	mov	r2, r0
 801316a:	460b      	mov	r3, r1
 801316c:	4650      	mov	r0, sl
 801316e:	4659      	mov	r1, fp
 8013170:	f7ed f88a 	bl	8000288 <__aeabi_dsub>
 8013174:	4602      	mov	r2, r0
 8013176:	460b      	mov	r3, r1
 8013178:	4680      	mov	r8, r0
 801317a:	4689      	mov	r9, r1
 801317c:	4650      	mov	r0, sl
 801317e:	4659      	mov	r1, fp
 8013180:	f7ed f882 	bl	8000288 <__aeabi_dsub>
 8013184:	4632      	mov	r2, r6
 8013186:	463b      	mov	r3, r7
 8013188:	f7ed f87e 	bl	8000288 <__aeabi_dsub>
 801318c:	a340      	add	r3, pc, #256	@ (adr r3, 8013290 <__ieee754_rem_pio2+0x300>)
 801318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013192:	4606      	mov	r6, r0
 8013194:	460f      	mov	r7, r1
 8013196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801319a:	f7ed fa2d 	bl	80005f8 <__aeabi_dmul>
 801319e:	4632      	mov	r2, r6
 80131a0:	463b      	mov	r3, r7
 80131a2:	f7ed f871 	bl	8000288 <__aeabi_dsub>
 80131a6:	4602      	mov	r2, r0
 80131a8:	460b      	mov	r3, r1
 80131aa:	4606      	mov	r6, r0
 80131ac:	460f      	mov	r7, r1
 80131ae:	4640      	mov	r0, r8
 80131b0:	4649      	mov	r1, r9
 80131b2:	f7ed f869 	bl	8000288 <__aeabi_dsub>
 80131b6:	9a05      	ldr	r2, [sp, #20]
 80131b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80131bc:	1ad3      	subs	r3, r2, r3
 80131be:	2b31      	cmp	r3, #49	@ 0x31
 80131c0:	dc20      	bgt.n	8013204 <__ieee754_rem_pio2+0x274>
 80131c2:	e9c4 0100 	strd	r0, r1, [r4]
 80131c6:	46c2      	mov	sl, r8
 80131c8:	46cb      	mov	fp, r9
 80131ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80131ce:	4650      	mov	r0, sl
 80131d0:	4642      	mov	r2, r8
 80131d2:	464b      	mov	r3, r9
 80131d4:	4659      	mov	r1, fp
 80131d6:	f7ed f857 	bl	8000288 <__aeabi_dsub>
 80131da:	463b      	mov	r3, r7
 80131dc:	4632      	mov	r2, r6
 80131de:	f7ed f853 	bl	8000288 <__aeabi_dsub>
 80131e2:	9b04      	ldr	r3, [sp, #16]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80131ea:	f6bf af0e 	bge.w	801300a <__ieee754_rem_pio2+0x7a>
 80131ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80131f2:	6063      	str	r3, [r4, #4]
 80131f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80131f8:	f8c4 8000 	str.w	r8, [r4]
 80131fc:	60a0      	str	r0, [r4, #8]
 80131fe:	60e3      	str	r3, [r4, #12]
 8013200:	426d      	negs	r5, r5
 8013202:	e702      	b.n	801300a <__ieee754_rem_pio2+0x7a>
 8013204:	a326      	add	r3, pc, #152	@ (adr r3, 80132a0 <__ieee754_rem_pio2+0x310>)
 8013206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801320e:	f7ed f9f3 	bl	80005f8 <__aeabi_dmul>
 8013212:	4606      	mov	r6, r0
 8013214:	460f      	mov	r7, r1
 8013216:	4602      	mov	r2, r0
 8013218:	460b      	mov	r3, r1
 801321a:	4640      	mov	r0, r8
 801321c:	4649      	mov	r1, r9
 801321e:	f7ed f833 	bl	8000288 <__aeabi_dsub>
 8013222:	4602      	mov	r2, r0
 8013224:	460b      	mov	r3, r1
 8013226:	4682      	mov	sl, r0
 8013228:	468b      	mov	fp, r1
 801322a:	4640      	mov	r0, r8
 801322c:	4649      	mov	r1, r9
 801322e:	f7ed f82b 	bl	8000288 <__aeabi_dsub>
 8013232:	4632      	mov	r2, r6
 8013234:	463b      	mov	r3, r7
 8013236:	f7ed f827 	bl	8000288 <__aeabi_dsub>
 801323a:	a31b      	add	r3, pc, #108	@ (adr r3, 80132a8 <__ieee754_rem_pio2+0x318>)
 801323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013240:	4606      	mov	r6, r0
 8013242:	460f      	mov	r7, r1
 8013244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013248:	f7ed f9d6 	bl	80005f8 <__aeabi_dmul>
 801324c:	4632      	mov	r2, r6
 801324e:	463b      	mov	r3, r7
 8013250:	f7ed f81a 	bl	8000288 <__aeabi_dsub>
 8013254:	4606      	mov	r6, r0
 8013256:	460f      	mov	r7, r1
 8013258:	e764      	b.n	8013124 <__ieee754_rem_pio2+0x194>
 801325a:	4b1b      	ldr	r3, [pc, #108]	@ (80132c8 <__ieee754_rem_pio2+0x338>)
 801325c:	4598      	cmp	r8, r3
 801325e:	d935      	bls.n	80132cc <__ieee754_rem_pio2+0x33c>
 8013260:	4632      	mov	r2, r6
 8013262:	463b      	mov	r3, r7
 8013264:	4630      	mov	r0, r6
 8013266:	4639      	mov	r1, r7
 8013268:	f7ed f80e 	bl	8000288 <__aeabi_dsub>
 801326c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013270:	e9c4 0100 	strd	r0, r1, [r4]
 8013274:	e69e      	b.n	8012fb4 <__ieee754_rem_pio2+0x24>
 8013276:	bf00      	nop
 8013278:	54400000 	.word	0x54400000
 801327c:	3ff921fb 	.word	0x3ff921fb
 8013280:	1a626331 	.word	0x1a626331
 8013284:	3dd0b461 	.word	0x3dd0b461
 8013288:	1a600000 	.word	0x1a600000
 801328c:	3dd0b461 	.word	0x3dd0b461
 8013290:	2e037073 	.word	0x2e037073
 8013294:	3ba3198a 	.word	0x3ba3198a
 8013298:	6dc9c883 	.word	0x6dc9c883
 801329c:	3fe45f30 	.word	0x3fe45f30
 80132a0:	2e000000 	.word	0x2e000000
 80132a4:	3ba3198a 	.word	0x3ba3198a
 80132a8:	252049c1 	.word	0x252049c1
 80132ac:	397b839a 	.word	0x397b839a
 80132b0:	3fe921fb 	.word	0x3fe921fb
 80132b4:	4002d97b 	.word	0x4002d97b
 80132b8:	3ff921fb 	.word	0x3ff921fb
 80132bc:	413921fb 	.word	0x413921fb
 80132c0:	3fe00000 	.word	0x3fe00000
 80132c4:	080145a8 	.word	0x080145a8
 80132c8:	7fefffff 	.word	0x7fefffff
 80132cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80132d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80132d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80132d8:	4630      	mov	r0, r6
 80132da:	460f      	mov	r7, r1
 80132dc:	f7ed fc3c 	bl	8000b58 <__aeabi_d2iz>
 80132e0:	f7ed f920 	bl	8000524 <__aeabi_i2d>
 80132e4:	4602      	mov	r2, r0
 80132e6:	460b      	mov	r3, r1
 80132e8:	4630      	mov	r0, r6
 80132ea:	4639      	mov	r1, r7
 80132ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80132f0:	f7ec ffca 	bl	8000288 <__aeabi_dsub>
 80132f4:	4b22      	ldr	r3, [pc, #136]	@ (8013380 <__ieee754_rem_pio2+0x3f0>)
 80132f6:	2200      	movs	r2, #0
 80132f8:	f7ed f97e 	bl	80005f8 <__aeabi_dmul>
 80132fc:	460f      	mov	r7, r1
 80132fe:	4606      	mov	r6, r0
 8013300:	f7ed fc2a 	bl	8000b58 <__aeabi_d2iz>
 8013304:	f7ed f90e 	bl	8000524 <__aeabi_i2d>
 8013308:	4602      	mov	r2, r0
 801330a:	460b      	mov	r3, r1
 801330c:	4630      	mov	r0, r6
 801330e:	4639      	mov	r1, r7
 8013310:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013314:	f7ec ffb8 	bl	8000288 <__aeabi_dsub>
 8013318:	4b19      	ldr	r3, [pc, #100]	@ (8013380 <__ieee754_rem_pio2+0x3f0>)
 801331a:	2200      	movs	r2, #0
 801331c:	f7ed f96c 	bl	80005f8 <__aeabi_dmul>
 8013320:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013324:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013328:	f04f 0803 	mov.w	r8, #3
 801332c:	2600      	movs	r6, #0
 801332e:	2700      	movs	r7, #0
 8013330:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013334:	4632      	mov	r2, r6
 8013336:	463b      	mov	r3, r7
 8013338:	46c2      	mov	sl, r8
 801333a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801333e:	f7ed fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8013342:	2800      	cmp	r0, #0
 8013344:	d1f4      	bne.n	8013330 <__ieee754_rem_pio2+0x3a0>
 8013346:	4b0f      	ldr	r3, [pc, #60]	@ (8013384 <__ieee754_rem_pio2+0x3f4>)
 8013348:	9301      	str	r3, [sp, #4]
 801334a:	2302      	movs	r3, #2
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	462a      	mov	r2, r5
 8013350:	4653      	mov	r3, sl
 8013352:	4621      	mov	r1, r4
 8013354:	a806      	add	r0, sp, #24
 8013356:	f000 f817 	bl	8013388 <__kernel_rem_pio2>
 801335a:	9b04      	ldr	r3, [sp, #16]
 801335c:	2b00      	cmp	r3, #0
 801335e:	4605      	mov	r5, r0
 8013360:	f6bf ae53 	bge.w	801300a <__ieee754_rem_pio2+0x7a>
 8013364:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801336c:	e9c4 2300 	strd	r2, r3, [r4]
 8013370:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013374:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013378:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801337c:	e740      	b.n	8013200 <__ieee754_rem_pio2+0x270>
 801337e:	bf00      	nop
 8013380:	41700000 	.word	0x41700000
 8013384:	08014628 	.word	0x08014628

08013388 <__kernel_rem_pio2>:
 8013388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801338c:	ed2d 8b02 	vpush	{d8}
 8013390:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013394:	f112 0f14 	cmn.w	r2, #20
 8013398:	9306      	str	r3, [sp, #24]
 801339a:	9104      	str	r1, [sp, #16]
 801339c:	4bbe      	ldr	r3, [pc, #760]	@ (8013698 <__kernel_rem_pio2+0x310>)
 801339e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80133a0:	9008      	str	r0, [sp, #32]
 80133a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80133a6:	9300      	str	r3, [sp, #0]
 80133a8:	9b06      	ldr	r3, [sp, #24]
 80133aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80133ae:	bfa8      	it	ge
 80133b0:	1ed4      	subge	r4, r2, #3
 80133b2:	9305      	str	r3, [sp, #20]
 80133b4:	bfb2      	itee	lt
 80133b6:	2400      	movlt	r4, #0
 80133b8:	2318      	movge	r3, #24
 80133ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80133be:	f06f 0317 	mvn.w	r3, #23
 80133c2:	fb04 3303 	mla	r3, r4, r3, r3
 80133c6:	eb03 0b02 	add.w	fp, r3, r2
 80133ca:	9b00      	ldr	r3, [sp, #0]
 80133cc:	9a05      	ldr	r2, [sp, #20]
 80133ce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8013688 <__kernel_rem_pio2+0x300>
 80133d2:	eb03 0802 	add.w	r8, r3, r2
 80133d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80133d8:	1aa7      	subs	r7, r4, r2
 80133da:	ae20      	add	r6, sp, #128	@ 0x80
 80133dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80133e0:	2500      	movs	r5, #0
 80133e2:	4545      	cmp	r5, r8
 80133e4:	dd13      	ble.n	801340e <__kernel_rem_pio2+0x86>
 80133e6:	9b06      	ldr	r3, [sp, #24]
 80133e8:	aa20      	add	r2, sp, #128	@ 0x80
 80133ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80133ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80133f2:	f04f 0800 	mov.w	r8, #0
 80133f6:	9b00      	ldr	r3, [sp, #0]
 80133f8:	4598      	cmp	r8, r3
 80133fa:	dc31      	bgt.n	8013460 <__kernel_rem_pio2+0xd8>
 80133fc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8013688 <__kernel_rem_pio2+0x300>
 8013400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013404:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013408:	462f      	mov	r7, r5
 801340a:	2600      	movs	r6, #0
 801340c:	e01b      	b.n	8013446 <__kernel_rem_pio2+0xbe>
 801340e:	42ef      	cmn	r7, r5
 8013410:	d407      	bmi.n	8013422 <__kernel_rem_pio2+0x9a>
 8013412:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013416:	f7ed f885 	bl	8000524 <__aeabi_i2d>
 801341a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801341e:	3501      	adds	r5, #1
 8013420:	e7df      	b.n	80133e2 <__kernel_rem_pio2+0x5a>
 8013422:	ec51 0b18 	vmov	r0, r1, d8
 8013426:	e7f8      	b.n	801341a <__kernel_rem_pio2+0x92>
 8013428:	e9d7 2300 	ldrd	r2, r3, [r7]
 801342c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013430:	f7ed f8e2 	bl	80005f8 <__aeabi_dmul>
 8013434:	4602      	mov	r2, r0
 8013436:	460b      	mov	r3, r1
 8013438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801343c:	f7ec ff26 	bl	800028c <__adddf3>
 8013440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013444:	3601      	adds	r6, #1
 8013446:	9b05      	ldr	r3, [sp, #20]
 8013448:	429e      	cmp	r6, r3
 801344a:	f1a7 0708 	sub.w	r7, r7, #8
 801344e:	ddeb      	ble.n	8013428 <__kernel_rem_pio2+0xa0>
 8013450:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013454:	f108 0801 	add.w	r8, r8, #1
 8013458:	ecaa 7b02 	vstmia	sl!, {d7}
 801345c:	3508      	adds	r5, #8
 801345e:	e7ca      	b.n	80133f6 <__kernel_rem_pio2+0x6e>
 8013460:	9b00      	ldr	r3, [sp, #0]
 8013462:	f8dd 8000 	ldr.w	r8, [sp]
 8013466:	aa0c      	add	r2, sp, #48	@ 0x30
 8013468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801346c:	930a      	str	r3, [sp, #40]	@ 0x28
 801346e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013470:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013474:	9309      	str	r3, [sp, #36]	@ 0x24
 8013476:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801347a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801347c:	ab98      	add	r3, sp, #608	@ 0x260
 801347e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013482:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8013486:	ed8d 7b02 	vstr	d7, [sp, #8]
 801348a:	ac0c      	add	r4, sp, #48	@ 0x30
 801348c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801348e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8013492:	46a1      	mov	r9, r4
 8013494:	46c2      	mov	sl, r8
 8013496:	f1ba 0f00 	cmp.w	sl, #0
 801349a:	f1a5 0508 	sub.w	r5, r5, #8
 801349e:	dc77      	bgt.n	8013590 <__kernel_rem_pio2+0x208>
 80134a0:	4658      	mov	r0, fp
 80134a2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80134a6:	f000 fc53 	bl	8013d50 <scalbn>
 80134aa:	ec57 6b10 	vmov	r6, r7, d0
 80134ae:	2200      	movs	r2, #0
 80134b0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80134b4:	4630      	mov	r0, r6
 80134b6:	4639      	mov	r1, r7
 80134b8:	f7ed f89e 	bl	80005f8 <__aeabi_dmul>
 80134bc:	ec41 0b10 	vmov	d0, r0, r1
 80134c0:	f000 fcc6 	bl	8013e50 <floor>
 80134c4:	4b75      	ldr	r3, [pc, #468]	@ (801369c <__kernel_rem_pio2+0x314>)
 80134c6:	ec51 0b10 	vmov	r0, r1, d0
 80134ca:	2200      	movs	r2, #0
 80134cc:	f7ed f894 	bl	80005f8 <__aeabi_dmul>
 80134d0:	4602      	mov	r2, r0
 80134d2:	460b      	mov	r3, r1
 80134d4:	4630      	mov	r0, r6
 80134d6:	4639      	mov	r1, r7
 80134d8:	f7ec fed6 	bl	8000288 <__aeabi_dsub>
 80134dc:	460f      	mov	r7, r1
 80134de:	4606      	mov	r6, r0
 80134e0:	f7ed fb3a 	bl	8000b58 <__aeabi_d2iz>
 80134e4:	9002      	str	r0, [sp, #8]
 80134e6:	f7ed f81d 	bl	8000524 <__aeabi_i2d>
 80134ea:	4602      	mov	r2, r0
 80134ec:	460b      	mov	r3, r1
 80134ee:	4630      	mov	r0, r6
 80134f0:	4639      	mov	r1, r7
 80134f2:	f7ec fec9 	bl	8000288 <__aeabi_dsub>
 80134f6:	f1bb 0f00 	cmp.w	fp, #0
 80134fa:	4606      	mov	r6, r0
 80134fc:	460f      	mov	r7, r1
 80134fe:	dd6c      	ble.n	80135da <__kernel_rem_pio2+0x252>
 8013500:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8013504:	ab0c      	add	r3, sp, #48	@ 0x30
 8013506:	9d02      	ldr	r5, [sp, #8]
 8013508:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801350c:	f1cb 0018 	rsb	r0, fp, #24
 8013510:	fa43 f200 	asr.w	r2, r3, r0
 8013514:	4415      	add	r5, r2
 8013516:	4082      	lsls	r2, r0
 8013518:	1a9b      	subs	r3, r3, r2
 801351a:	aa0c      	add	r2, sp, #48	@ 0x30
 801351c:	9502      	str	r5, [sp, #8]
 801351e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013522:	f1cb 0217 	rsb	r2, fp, #23
 8013526:	fa43 f902 	asr.w	r9, r3, r2
 801352a:	f1b9 0f00 	cmp.w	r9, #0
 801352e:	dd64      	ble.n	80135fa <__kernel_rem_pio2+0x272>
 8013530:	9b02      	ldr	r3, [sp, #8]
 8013532:	2200      	movs	r2, #0
 8013534:	3301      	adds	r3, #1
 8013536:	9302      	str	r3, [sp, #8]
 8013538:	4615      	mov	r5, r2
 801353a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801353e:	4590      	cmp	r8, r2
 8013540:	f300 80b8 	bgt.w	80136b4 <__kernel_rem_pio2+0x32c>
 8013544:	f1bb 0f00 	cmp.w	fp, #0
 8013548:	dd07      	ble.n	801355a <__kernel_rem_pio2+0x1d2>
 801354a:	f1bb 0f01 	cmp.w	fp, #1
 801354e:	f000 80bf 	beq.w	80136d0 <__kernel_rem_pio2+0x348>
 8013552:	f1bb 0f02 	cmp.w	fp, #2
 8013556:	f000 80c6 	beq.w	80136e6 <__kernel_rem_pio2+0x35e>
 801355a:	f1b9 0f02 	cmp.w	r9, #2
 801355e:	d14c      	bne.n	80135fa <__kernel_rem_pio2+0x272>
 8013560:	4632      	mov	r2, r6
 8013562:	463b      	mov	r3, r7
 8013564:	494e      	ldr	r1, [pc, #312]	@ (80136a0 <__kernel_rem_pio2+0x318>)
 8013566:	2000      	movs	r0, #0
 8013568:	f7ec fe8e 	bl	8000288 <__aeabi_dsub>
 801356c:	4606      	mov	r6, r0
 801356e:	460f      	mov	r7, r1
 8013570:	2d00      	cmp	r5, #0
 8013572:	d042      	beq.n	80135fa <__kernel_rem_pio2+0x272>
 8013574:	4658      	mov	r0, fp
 8013576:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8013690 <__kernel_rem_pio2+0x308>
 801357a:	f000 fbe9 	bl	8013d50 <scalbn>
 801357e:	4630      	mov	r0, r6
 8013580:	4639      	mov	r1, r7
 8013582:	ec53 2b10 	vmov	r2, r3, d0
 8013586:	f7ec fe7f 	bl	8000288 <__aeabi_dsub>
 801358a:	4606      	mov	r6, r0
 801358c:	460f      	mov	r7, r1
 801358e:	e034      	b.n	80135fa <__kernel_rem_pio2+0x272>
 8013590:	4b44      	ldr	r3, [pc, #272]	@ (80136a4 <__kernel_rem_pio2+0x31c>)
 8013592:	2200      	movs	r2, #0
 8013594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013598:	f7ed f82e 	bl	80005f8 <__aeabi_dmul>
 801359c:	f7ed fadc 	bl	8000b58 <__aeabi_d2iz>
 80135a0:	f7ec ffc0 	bl	8000524 <__aeabi_i2d>
 80135a4:	4b40      	ldr	r3, [pc, #256]	@ (80136a8 <__kernel_rem_pio2+0x320>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	4606      	mov	r6, r0
 80135aa:	460f      	mov	r7, r1
 80135ac:	f7ed f824 	bl	80005f8 <__aeabi_dmul>
 80135b0:	4602      	mov	r2, r0
 80135b2:	460b      	mov	r3, r1
 80135b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135b8:	f7ec fe66 	bl	8000288 <__aeabi_dsub>
 80135bc:	f7ed facc 	bl	8000b58 <__aeabi_d2iz>
 80135c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80135c4:	f849 0b04 	str.w	r0, [r9], #4
 80135c8:	4639      	mov	r1, r7
 80135ca:	4630      	mov	r0, r6
 80135cc:	f7ec fe5e 	bl	800028c <__adddf3>
 80135d0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80135d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135d8:	e75d      	b.n	8013496 <__kernel_rem_pio2+0x10e>
 80135da:	d107      	bne.n	80135ec <__kernel_rem_pio2+0x264>
 80135dc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80135e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80135e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135e6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80135ea:	e79e      	b.n	801352a <__kernel_rem_pio2+0x1a2>
 80135ec:	4b2f      	ldr	r3, [pc, #188]	@ (80136ac <__kernel_rem_pio2+0x324>)
 80135ee:	2200      	movs	r2, #0
 80135f0:	f7ed fa88 	bl	8000b04 <__aeabi_dcmpge>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	d143      	bne.n	8013680 <__kernel_rem_pio2+0x2f8>
 80135f8:	4681      	mov	r9, r0
 80135fa:	2200      	movs	r2, #0
 80135fc:	2300      	movs	r3, #0
 80135fe:	4630      	mov	r0, r6
 8013600:	4639      	mov	r1, r7
 8013602:	f7ed fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8013606:	2800      	cmp	r0, #0
 8013608:	f000 80bf 	beq.w	801378a <__kernel_rem_pio2+0x402>
 801360c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8013610:	2200      	movs	r2, #0
 8013612:	9900      	ldr	r1, [sp, #0]
 8013614:	428b      	cmp	r3, r1
 8013616:	da6e      	bge.n	80136f6 <__kernel_rem_pio2+0x36e>
 8013618:	2a00      	cmp	r2, #0
 801361a:	f000 8089 	beq.w	8013730 <__kernel_rem_pio2+0x3a8>
 801361e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013622:	ab0c      	add	r3, sp, #48	@ 0x30
 8013624:	f1ab 0b18 	sub.w	fp, fp, #24
 8013628:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d0f6      	beq.n	801361e <__kernel_rem_pio2+0x296>
 8013630:	4658      	mov	r0, fp
 8013632:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8013690 <__kernel_rem_pio2+0x308>
 8013636:	f000 fb8b 	bl	8013d50 <scalbn>
 801363a:	f108 0301 	add.w	r3, r8, #1
 801363e:	00da      	lsls	r2, r3, #3
 8013640:	9205      	str	r2, [sp, #20]
 8013642:	ec55 4b10 	vmov	r4, r5, d0
 8013646:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013648:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80136a4 <__kernel_rem_pio2+0x31c>
 801364c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8013650:	4646      	mov	r6, r8
 8013652:	f04f 0a00 	mov.w	sl, #0
 8013656:	2e00      	cmp	r6, #0
 8013658:	f280 80cf 	bge.w	80137fa <__kernel_rem_pio2+0x472>
 801365c:	4644      	mov	r4, r8
 801365e:	2c00      	cmp	r4, #0
 8013660:	f2c0 80fd 	blt.w	801385e <__kernel_rem_pio2+0x4d6>
 8013664:	4b12      	ldr	r3, [pc, #72]	@ (80136b0 <__kernel_rem_pio2+0x328>)
 8013666:	461f      	mov	r7, r3
 8013668:	ab70      	add	r3, sp, #448	@ 0x1c0
 801366a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801366e:	9306      	str	r3, [sp, #24]
 8013670:	f04f 0a00 	mov.w	sl, #0
 8013674:	f04f 0b00 	mov.w	fp, #0
 8013678:	2600      	movs	r6, #0
 801367a:	eba8 0504 	sub.w	r5, r8, r4
 801367e:	e0e2      	b.n	8013846 <__kernel_rem_pio2+0x4be>
 8013680:	f04f 0902 	mov.w	r9, #2
 8013684:	e754      	b.n	8013530 <__kernel_rem_pio2+0x1a8>
 8013686:	bf00      	nop
	...
 8013694:	3ff00000 	.word	0x3ff00000
 8013698:	08014770 	.word	0x08014770
 801369c:	40200000 	.word	0x40200000
 80136a0:	3ff00000 	.word	0x3ff00000
 80136a4:	3e700000 	.word	0x3e700000
 80136a8:	41700000 	.word	0x41700000
 80136ac:	3fe00000 	.word	0x3fe00000
 80136b0:	08014730 	.word	0x08014730
 80136b4:	f854 3b04 	ldr.w	r3, [r4], #4
 80136b8:	b945      	cbnz	r5, 80136cc <__kernel_rem_pio2+0x344>
 80136ba:	b123      	cbz	r3, 80136c6 <__kernel_rem_pio2+0x33e>
 80136bc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80136c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80136c4:	2301      	movs	r3, #1
 80136c6:	3201      	adds	r2, #1
 80136c8:	461d      	mov	r5, r3
 80136ca:	e738      	b.n	801353e <__kernel_rem_pio2+0x1b6>
 80136cc:	1acb      	subs	r3, r1, r3
 80136ce:	e7f7      	b.n	80136c0 <__kernel_rem_pio2+0x338>
 80136d0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80136d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80136d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80136de:	a90c      	add	r1, sp, #48	@ 0x30
 80136e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80136e4:	e739      	b.n	801355a <__kernel_rem_pio2+0x1d2>
 80136e6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80136ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80136ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80136f4:	e7f3      	b.n	80136de <__kernel_rem_pio2+0x356>
 80136f6:	a90c      	add	r1, sp, #48	@ 0x30
 80136f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80136fc:	3b01      	subs	r3, #1
 80136fe:	430a      	orrs	r2, r1
 8013700:	e787      	b.n	8013612 <__kernel_rem_pio2+0x28a>
 8013702:	3401      	adds	r4, #1
 8013704:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013708:	2a00      	cmp	r2, #0
 801370a:	d0fa      	beq.n	8013702 <__kernel_rem_pio2+0x37a>
 801370c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801370e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013712:	eb0d 0503 	add.w	r5, sp, r3
 8013716:	9b06      	ldr	r3, [sp, #24]
 8013718:	aa20      	add	r2, sp, #128	@ 0x80
 801371a:	4443      	add	r3, r8
 801371c:	f108 0701 	add.w	r7, r8, #1
 8013720:	3d98      	subs	r5, #152	@ 0x98
 8013722:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013726:	4444      	add	r4, r8
 8013728:	42bc      	cmp	r4, r7
 801372a:	da04      	bge.n	8013736 <__kernel_rem_pio2+0x3ae>
 801372c:	46a0      	mov	r8, r4
 801372e:	e6a2      	b.n	8013476 <__kernel_rem_pio2+0xee>
 8013730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013732:	2401      	movs	r4, #1
 8013734:	e7e6      	b.n	8013704 <__kernel_rem_pio2+0x37c>
 8013736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013738:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801373c:	f7ec fef2 	bl	8000524 <__aeabi_i2d>
 8013740:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8013a08 <__kernel_rem_pio2+0x680>
 8013744:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013748:	ed8d 7b02 	vstr	d7, [sp, #8]
 801374c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013750:	46b2      	mov	sl, r6
 8013752:	f04f 0800 	mov.w	r8, #0
 8013756:	9b05      	ldr	r3, [sp, #20]
 8013758:	4598      	cmp	r8, r3
 801375a:	dd05      	ble.n	8013768 <__kernel_rem_pio2+0x3e0>
 801375c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013760:	3701      	adds	r7, #1
 8013762:	eca5 7b02 	vstmia	r5!, {d7}
 8013766:	e7df      	b.n	8013728 <__kernel_rem_pio2+0x3a0>
 8013768:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801376c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013770:	f7ec ff42 	bl	80005f8 <__aeabi_dmul>
 8013774:	4602      	mov	r2, r0
 8013776:	460b      	mov	r3, r1
 8013778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801377c:	f7ec fd86 	bl	800028c <__adddf3>
 8013780:	f108 0801 	add.w	r8, r8, #1
 8013784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013788:	e7e5      	b.n	8013756 <__kernel_rem_pio2+0x3ce>
 801378a:	f1cb 0000 	rsb	r0, fp, #0
 801378e:	ec47 6b10 	vmov	d0, r6, r7
 8013792:	f000 fadd 	bl	8013d50 <scalbn>
 8013796:	ec55 4b10 	vmov	r4, r5, d0
 801379a:	4b9d      	ldr	r3, [pc, #628]	@ (8013a10 <__kernel_rem_pio2+0x688>)
 801379c:	2200      	movs	r2, #0
 801379e:	4620      	mov	r0, r4
 80137a0:	4629      	mov	r1, r5
 80137a2:	f7ed f9af 	bl	8000b04 <__aeabi_dcmpge>
 80137a6:	b300      	cbz	r0, 80137ea <__kernel_rem_pio2+0x462>
 80137a8:	4b9a      	ldr	r3, [pc, #616]	@ (8013a14 <__kernel_rem_pio2+0x68c>)
 80137aa:	2200      	movs	r2, #0
 80137ac:	4620      	mov	r0, r4
 80137ae:	4629      	mov	r1, r5
 80137b0:	f7ec ff22 	bl	80005f8 <__aeabi_dmul>
 80137b4:	f7ed f9d0 	bl	8000b58 <__aeabi_d2iz>
 80137b8:	4606      	mov	r6, r0
 80137ba:	f7ec feb3 	bl	8000524 <__aeabi_i2d>
 80137be:	4b94      	ldr	r3, [pc, #592]	@ (8013a10 <__kernel_rem_pio2+0x688>)
 80137c0:	2200      	movs	r2, #0
 80137c2:	f7ec ff19 	bl	80005f8 <__aeabi_dmul>
 80137c6:	460b      	mov	r3, r1
 80137c8:	4602      	mov	r2, r0
 80137ca:	4629      	mov	r1, r5
 80137cc:	4620      	mov	r0, r4
 80137ce:	f7ec fd5b 	bl	8000288 <__aeabi_dsub>
 80137d2:	f7ed f9c1 	bl	8000b58 <__aeabi_d2iz>
 80137d6:	ab0c      	add	r3, sp, #48	@ 0x30
 80137d8:	f10b 0b18 	add.w	fp, fp, #24
 80137dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80137e0:	f108 0801 	add.w	r8, r8, #1
 80137e4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80137e8:	e722      	b.n	8013630 <__kernel_rem_pio2+0x2a8>
 80137ea:	4620      	mov	r0, r4
 80137ec:	4629      	mov	r1, r5
 80137ee:	f7ed f9b3 	bl	8000b58 <__aeabi_d2iz>
 80137f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80137f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80137f8:	e71a      	b.n	8013630 <__kernel_rem_pio2+0x2a8>
 80137fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80137fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013800:	f7ec fe90 	bl	8000524 <__aeabi_i2d>
 8013804:	4622      	mov	r2, r4
 8013806:	462b      	mov	r3, r5
 8013808:	f7ec fef6 	bl	80005f8 <__aeabi_dmul>
 801380c:	4652      	mov	r2, sl
 801380e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013812:	465b      	mov	r3, fp
 8013814:	4620      	mov	r0, r4
 8013816:	4629      	mov	r1, r5
 8013818:	f7ec feee 	bl	80005f8 <__aeabi_dmul>
 801381c:	3e01      	subs	r6, #1
 801381e:	4604      	mov	r4, r0
 8013820:	460d      	mov	r5, r1
 8013822:	e718      	b.n	8013656 <__kernel_rem_pio2+0x2ce>
 8013824:	9906      	ldr	r1, [sp, #24]
 8013826:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801382a:	9106      	str	r1, [sp, #24]
 801382c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013830:	f7ec fee2 	bl	80005f8 <__aeabi_dmul>
 8013834:	4602      	mov	r2, r0
 8013836:	460b      	mov	r3, r1
 8013838:	4650      	mov	r0, sl
 801383a:	4659      	mov	r1, fp
 801383c:	f7ec fd26 	bl	800028c <__adddf3>
 8013840:	3601      	adds	r6, #1
 8013842:	4682      	mov	sl, r0
 8013844:	468b      	mov	fp, r1
 8013846:	9b00      	ldr	r3, [sp, #0]
 8013848:	429e      	cmp	r6, r3
 801384a:	dc01      	bgt.n	8013850 <__kernel_rem_pio2+0x4c8>
 801384c:	42b5      	cmp	r5, r6
 801384e:	dae9      	bge.n	8013824 <__kernel_rem_pio2+0x49c>
 8013850:	ab48      	add	r3, sp, #288	@ 0x120
 8013852:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013856:	e9c5 ab00 	strd	sl, fp, [r5]
 801385a:	3c01      	subs	r4, #1
 801385c:	e6ff      	b.n	801365e <__kernel_rem_pio2+0x2d6>
 801385e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013860:	2b02      	cmp	r3, #2
 8013862:	dc0b      	bgt.n	801387c <__kernel_rem_pio2+0x4f4>
 8013864:	2b00      	cmp	r3, #0
 8013866:	dc39      	bgt.n	80138dc <__kernel_rem_pio2+0x554>
 8013868:	d05d      	beq.n	8013926 <__kernel_rem_pio2+0x59e>
 801386a:	9b02      	ldr	r3, [sp, #8]
 801386c:	f003 0007 	and.w	r0, r3, #7
 8013870:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013874:	ecbd 8b02 	vpop	{d8}
 8013878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801387e:	2b03      	cmp	r3, #3
 8013880:	d1f3      	bne.n	801386a <__kernel_rem_pio2+0x4e2>
 8013882:	9b05      	ldr	r3, [sp, #20]
 8013884:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013888:	eb0d 0403 	add.w	r4, sp, r3
 801388c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013890:	4625      	mov	r5, r4
 8013892:	46c2      	mov	sl, r8
 8013894:	f1ba 0f00 	cmp.w	sl, #0
 8013898:	f1a5 0508 	sub.w	r5, r5, #8
 801389c:	dc6b      	bgt.n	8013976 <__kernel_rem_pio2+0x5ee>
 801389e:	4645      	mov	r5, r8
 80138a0:	2d01      	cmp	r5, #1
 80138a2:	f1a4 0408 	sub.w	r4, r4, #8
 80138a6:	f300 8087 	bgt.w	80139b8 <__kernel_rem_pio2+0x630>
 80138aa:	9c05      	ldr	r4, [sp, #20]
 80138ac:	ab48      	add	r3, sp, #288	@ 0x120
 80138ae:	441c      	add	r4, r3
 80138b0:	2000      	movs	r0, #0
 80138b2:	2100      	movs	r1, #0
 80138b4:	f1b8 0f01 	cmp.w	r8, #1
 80138b8:	f300 809c 	bgt.w	80139f4 <__kernel_rem_pio2+0x66c>
 80138bc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80138c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80138c4:	f1b9 0f00 	cmp.w	r9, #0
 80138c8:	f040 80a6 	bne.w	8013a18 <__kernel_rem_pio2+0x690>
 80138cc:	9b04      	ldr	r3, [sp, #16]
 80138ce:	e9c3 7800 	strd	r7, r8, [r3]
 80138d2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80138d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80138da:	e7c6      	b.n	801386a <__kernel_rem_pio2+0x4e2>
 80138dc:	9d05      	ldr	r5, [sp, #20]
 80138de:	ab48      	add	r3, sp, #288	@ 0x120
 80138e0:	441d      	add	r5, r3
 80138e2:	4644      	mov	r4, r8
 80138e4:	2000      	movs	r0, #0
 80138e6:	2100      	movs	r1, #0
 80138e8:	2c00      	cmp	r4, #0
 80138ea:	da35      	bge.n	8013958 <__kernel_rem_pio2+0x5d0>
 80138ec:	f1b9 0f00 	cmp.w	r9, #0
 80138f0:	d038      	beq.n	8013964 <__kernel_rem_pio2+0x5dc>
 80138f2:	4602      	mov	r2, r0
 80138f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80138f8:	9c04      	ldr	r4, [sp, #16]
 80138fa:	e9c4 2300 	strd	r2, r3, [r4]
 80138fe:	4602      	mov	r2, r0
 8013900:	460b      	mov	r3, r1
 8013902:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013906:	f7ec fcbf 	bl	8000288 <__aeabi_dsub>
 801390a:	ad4a      	add	r5, sp, #296	@ 0x128
 801390c:	2401      	movs	r4, #1
 801390e:	45a0      	cmp	r8, r4
 8013910:	da2b      	bge.n	801396a <__kernel_rem_pio2+0x5e2>
 8013912:	f1b9 0f00 	cmp.w	r9, #0
 8013916:	d002      	beq.n	801391e <__kernel_rem_pio2+0x596>
 8013918:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801391c:	4619      	mov	r1, r3
 801391e:	9b04      	ldr	r3, [sp, #16]
 8013920:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013924:	e7a1      	b.n	801386a <__kernel_rem_pio2+0x4e2>
 8013926:	9c05      	ldr	r4, [sp, #20]
 8013928:	ab48      	add	r3, sp, #288	@ 0x120
 801392a:	441c      	add	r4, r3
 801392c:	2000      	movs	r0, #0
 801392e:	2100      	movs	r1, #0
 8013930:	f1b8 0f00 	cmp.w	r8, #0
 8013934:	da09      	bge.n	801394a <__kernel_rem_pio2+0x5c2>
 8013936:	f1b9 0f00 	cmp.w	r9, #0
 801393a:	d002      	beq.n	8013942 <__kernel_rem_pio2+0x5ba>
 801393c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013940:	4619      	mov	r1, r3
 8013942:	9b04      	ldr	r3, [sp, #16]
 8013944:	e9c3 0100 	strd	r0, r1, [r3]
 8013948:	e78f      	b.n	801386a <__kernel_rem_pio2+0x4e2>
 801394a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801394e:	f7ec fc9d 	bl	800028c <__adddf3>
 8013952:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013956:	e7eb      	b.n	8013930 <__kernel_rem_pio2+0x5a8>
 8013958:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801395c:	f7ec fc96 	bl	800028c <__adddf3>
 8013960:	3c01      	subs	r4, #1
 8013962:	e7c1      	b.n	80138e8 <__kernel_rem_pio2+0x560>
 8013964:	4602      	mov	r2, r0
 8013966:	460b      	mov	r3, r1
 8013968:	e7c6      	b.n	80138f8 <__kernel_rem_pio2+0x570>
 801396a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801396e:	f7ec fc8d 	bl	800028c <__adddf3>
 8013972:	3401      	adds	r4, #1
 8013974:	e7cb      	b.n	801390e <__kernel_rem_pio2+0x586>
 8013976:	ed95 7b00 	vldr	d7, [r5]
 801397a:	ed8d 7b00 	vstr	d7, [sp]
 801397e:	ed95 7b02 	vldr	d7, [r5, #8]
 8013982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013986:	ec53 2b17 	vmov	r2, r3, d7
 801398a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801398e:	f7ec fc7d 	bl	800028c <__adddf3>
 8013992:	4602      	mov	r2, r0
 8013994:	460b      	mov	r3, r1
 8013996:	4606      	mov	r6, r0
 8013998:	460f      	mov	r7, r1
 801399a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801399e:	f7ec fc73 	bl	8000288 <__aeabi_dsub>
 80139a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139a6:	f7ec fc71 	bl	800028c <__adddf3>
 80139aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80139ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80139b2:	e9c5 6700 	strd	r6, r7, [r5]
 80139b6:	e76d      	b.n	8013894 <__kernel_rem_pio2+0x50c>
 80139b8:	ed94 7b00 	vldr	d7, [r4]
 80139bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80139c0:	ec51 0b17 	vmov	r0, r1, d7
 80139c4:	4652      	mov	r2, sl
 80139c6:	465b      	mov	r3, fp
 80139c8:	ed8d 7b00 	vstr	d7, [sp]
 80139cc:	f7ec fc5e 	bl	800028c <__adddf3>
 80139d0:	4602      	mov	r2, r0
 80139d2:	460b      	mov	r3, r1
 80139d4:	4606      	mov	r6, r0
 80139d6:	460f      	mov	r7, r1
 80139d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139dc:	f7ec fc54 	bl	8000288 <__aeabi_dsub>
 80139e0:	4652      	mov	r2, sl
 80139e2:	465b      	mov	r3, fp
 80139e4:	f7ec fc52 	bl	800028c <__adddf3>
 80139e8:	3d01      	subs	r5, #1
 80139ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80139ee:	e9c4 6700 	strd	r6, r7, [r4]
 80139f2:	e755      	b.n	80138a0 <__kernel_rem_pio2+0x518>
 80139f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80139f8:	f7ec fc48 	bl	800028c <__adddf3>
 80139fc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013a00:	e758      	b.n	80138b4 <__kernel_rem_pio2+0x52c>
 8013a02:	bf00      	nop
 8013a04:	f3af 8000 	nop.w
	...
 8013a10:	41700000 	.word	0x41700000
 8013a14:	3e700000 	.word	0x3e700000
 8013a18:	9b04      	ldr	r3, [sp, #16]
 8013a1a:	9a04      	ldr	r2, [sp, #16]
 8013a1c:	601f      	str	r7, [r3, #0]
 8013a1e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8013a22:	605c      	str	r4, [r3, #4]
 8013a24:	609d      	str	r5, [r3, #8]
 8013a26:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013a2a:	60d3      	str	r3, [r2, #12]
 8013a2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a30:	6110      	str	r0, [r2, #16]
 8013a32:	6153      	str	r3, [r2, #20]
 8013a34:	e719      	b.n	801386a <__kernel_rem_pio2+0x4e2>
 8013a36:	bf00      	nop

08013a38 <__kernel_cos>:
 8013a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3c:	ec57 6b10 	vmov	r6, r7, d0
 8013a40:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013a44:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8013a48:	ed8d 1b00 	vstr	d1, [sp]
 8013a4c:	d206      	bcs.n	8013a5c <__kernel_cos+0x24>
 8013a4e:	4630      	mov	r0, r6
 8013a50:	4639      	mov	r1, r7
 8013a52:	f7ed f881 	bl	8000b58 <__aeabi_d2iz>
 8013a56:	2800      	cmp	r0, #0
 8013a58:	f000 8088 	beq.w	8013b6c <__kernel_cos+0x134>
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	463b      	mov	r3, r7
 8013a60:	4630      	mov	r0, r6
 8013a62:	4639      	mov	r1, r7
 8013a64:	f7ec fdc8 	bl	80005f8 <__aeabi_dmul>
 8013a68:	4b51      	ldr	r3, [pc, #324]	@ (8013bb0 <__kernel_cos+0x178>)
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	460d      	mov	r5, r1
 8013a70:	f7ec fdc2 	bl	80005f8 <__aeabi_dmul>
 8013a74:	a340      	add	r3, pc, #256	@ (adr r3, 8013b78 <__kernel_cos+0x140>)
 8013a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7a:	4682      	mov	sl, r0
 8013a7c:	468b      	mov	fp, r1
 8013a7e:	4620      	mov	r0, r4
 8013a80:	4629      	mov	r1, r5
 8013a82:	f7ec fdb9 	bl	80005f8 <__aeabi_dmul>
 8013a86:	a33e      	add	r3, pc, #248	@ (adr r3, 8013b80 <__kernel_cos+0x148>)
 8013a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8c:	f7ec fbfe 	bl	800028c <__adddf3>
 8013a90:	4622      	mov	r2, r4
 8013a92:	462b      	mov	r3, r5
 8013a94:	f7ec fdb0 	bl	80005f8 <__aeabi_dmul>
 8013a98:	a33b      	add	r3, pc, #236	@ (adr r3, 8013b88 <__kernel_cos+0x150>)
 8013a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9e:	f7ec fbf3 	bl	8000288 <__aeabi_dsub>
 8013aa2:	4622      	mov	r2, r4
 8013aa4:	462b      	mov	r3, r5
 8013aa6:	f7ec fda7 	bl	80005f8 <__aeabi_dmul>
 8013aaa:	a339      	add	r3, pc, #228	@ (adr r3, 8013b90 <__kernel_cos+0x158>)
 8013aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab0:	f7ec fbec 	bl	800028c <__adddf3>
 8013ab4:	4622      	mov	r2, r4
 8013ab6:	462b      	mov	r3, r5
 8013ab8:	f7ec fd9e 	bl	80005f8 <__aeabi_dmul>
 8013abc:	a336      	add	r3, pc, #216	@ (adr r3, 8013b98 <__kernel_cos+0x160>)
 8013abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac2:	f7ec fbe1 	bl	8000288 <__aeabi_dsub>
 8013ac6:	4622      	mov	r2, r4
 8013ac8:	462b      	mov	r3, r5
 8013aca:	f7ec fd95 	bl	80005f8 <__aeabi_dmul>
 8013ace:	a334      	add	r3, pc, #208	@ (adr r3, 8013ba0 <__kernel_cos+0x168>)
 8013ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad4:	f7ec fbda 	bl	800028c <__adddf3>
 8013ad8:	4622      	mov	r2, r4
 8013ada:	462b      	mov	r3, r5
 8013adc:	f7ec fd8c 	bl	80005f8 <__aeabi_dmul>
 8013ae0:	4622      	mov	r2, r4
 8013ae2:	462b      	mov	r3, r5
 8013ae4:	f7ec fd88 	bl	80005f8 <__aeabi_dmul>
 8013ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013aec:	4604      	mov	r4, r0
 8013aee:	460d      	mov	r5, r1
 8013af0:	4630      	mov	r0, r6
 8013af2:	4639      	mov	r1, r7
 8013af4:	f7ec fd80 	bl	80005f8 <__aeabi_dmul>
 8013af8:	460b      	mov	r3, r1
 8013afa:	4602      	mov	r2, r0
 8013afc:	4629      	mov	r1, r5
 8013afe:	4620      	mov	r0, r4
 8013b00:	f7ec fbc2 	bl	8000288 <__aeabi_dsub>
 8013b04:	4b2b      	ldr	r3, [pc, #172]	@ (8013bb4 <__kernel_cos+0x17c>)
 8013b06:	4598      	cmp	r8, r3
 8013b08:	4606      	mov	r6, r0
 8013b0a:	460f      	mov	r7, r1
 8013b0c:	d810      	bhi.n	8013b30 <__kernel_cos+0xf8>
 8013b0e:	4602      	mov	r2, r0
 8013b10:	460b      	mov	r3, r1
 8013b12:	4650      	mov	r0, sl
 8013b14:	4659      	mov	r1, fp
 8013b16:	f7ec fbb7 	bl	8000288 <__aeabi_dsub>
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	4926      	ldr	r1, [pc, #152]	@ (8013bb8 <__kernel_cos+0x180>)
 8013b1e:	4602      	mov	r2, r0
 8013b20:	2000      	movs	r0, #0
 8013b22:	f7ec fbb1 	bl	8000288 <__aeabi_dsub>
 8013b26:	ec41 0b10 	vmov	d0, r0, r1
 8013b2a:	b003      	add	sp, #12
 8013b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b30:	4b22      	ldr	r3, [pc, #136]	@ (8013bbc <__kernel_cos+0x184>)
 8013b32:	4921      	ldr	r1, [pc, #132]	@ (8013bb8 <__kernel_cos+0x180>)
 8013b34:	4598      	cmp	r8, r3
 8013b36:	bf8c      	ite	hi
 8013b38:	4d21      	ldrhi	r5, [pc, #132]	@ (8013bc0 <__kernel_cos+0x188>)
 8013b3a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8013b3e:	2400      	movs	r4, #0
 8013b40:	4622      	mov	r2, r4
 8013b42:	462b      	mov	r3, r5
 8013b44:	2000      	movs	r0, #0
 8013b46:	f7ec fb9f 	bl	8000288 <__aeabi_dsub>
 8013b4a:	4622      	mov	r2, r4
 8013b4c:	4680      	mov	r8, r0
 8013b4e:	4689      	mov	r9, r1
 8013b50:	462b      	mov	r3, r5
 8013b52:	4650      	mov	r0, sl
 8013b54:	4659      	mov	r1, fp
 8013b56:	f7ec fb97 	bl	8000288 <__aeabi_dsub>
 8013b5a:	4632      	mov	r2, r6
 8013b5c:	463b      	mov	r3, r7
 8013b5e:	f7ec fb93 	bl	8000288 <__aeabi_dsub>
 8013b62:	4602      	mov	r2, r0
 8013b64:	460b      	mov	r3, r1
 8013b66:	4640      	mov	r0, r8
 8013b68:	4649      	mov	r1, r9
 8013b6a:	e7da      	b.n	8013b22 <__kernel_cos+0xea>
 8013b6c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013ba8 <__kernel_cos+0x170>
 8013b70:	e7db      	b.n	8013b2a <__kernel_cos+0xf2>
 8013b72:	bf00      	nop
 8013b74:	f3af 8000 	nop.w
 8013b78:	be8838d4 	.word	0xbe8838d4
 8013b7c:	bda8fae9 	.word	0xbda8fae9
 8013b80:	bdb4b1c4 	.word	0xbdb4b1c4
 8013b84:	3e21ee9e 	.word	0x3e21ee9e
 8013b88:	809c52ad 	.word	0x809c52ad
 8013b8c:	3e927e4f 	.word	0x3e927e4f
 8013b90:	19cb1590 	.word	0x19cb1590
 8013b94:	3efa01a0 	.word	0x3efa01a0
 8013b98:	16c15177 	.word	0x16c15177
 8013b9c:	3f56c16c 	.word	0x3f56c16c
 8013ba0:	5555554c 	.word	0x5555554c
 8013ba4:	3fa55555 	.word	0x3fa55555
 8013ba8:	00000000 	.word	0x00000000
 8013bac:	3ff00000 	.word	0x3ff00000
 8013bb0:	3fe00000 	.word	0x3fe00000
 8013bb4:	3fd33332 	.word	0x3fd33332
 8013bb8:	3ff00000 	.word	0x3ff00000
 8013bbc:	3fe90000 	.word	0x3fe90000
 8013bc0:	3fd20000 	.word	0x3fd20000
 8013bc4:	00000000 	.word	0x00000000

08013bc8 <__kernel_sin>:
 8013bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bcc:	ec55 4b10 	vmov	r4, r5, d0
 8013bd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013bd4:	b085      	sub	sp, #20
 8013bd6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8013bda:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013bde:	4680      	mov	r8, r0
 8013be0:	d205      	bcs.n	8013bee <__kernel_sin+0x26>
 8013be2:	4620      	mov	r0, r4
 8013be4:	4629      	mov	r1, r5
 8013be6:	f7ec ffb7 	bl	8000b58 <__aeabi_d2iz>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d052      	beq.n	8013c94 <__kernel_sin+0xcc>
 8013bee:	4622      	mov	r2, r4
 8013bf0:	462b      	mov	r3, r5
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	4629      	mov	r1, r5
 8013bf6:	f7ec fcff 	bl	80005f8 <__aeabi_dmul>
 8013bfa:	4682      	mov	sl, r0
 8013bfc:	468b      	mov	fp, r1
 8013bfe:	4602      	mov	r2, r0
 8013c00:	460b      	mov	r3, r1
 8013c02:	4620      	mov	r0, r4
 8013c04:	4629      	mov	r1, r5
 8013c06:	f7ec fcf7 	bl	80005f8 <__aeabi_dmul>
 8013c0a:	a342      	add	r3, pc, #264	@ (adr r3, 8013d14 <__kernel_sin+0x14c>)
 8013c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c10:	e9cd 0100 	strd	r0, r1, [sp]
 8013c14:	4650      	mov	r0, sl
 8013c16:	4659      	mov	r1, fp
 8013c18:	f7ec fcee 	bl	80005f8 <__aeabi_dmul>
 8013c1c:	a33f      	add	r3, pc, #252	@ (adr r3, 8013d1c <__kernel_sin+0x154>)
 8013c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c22:	f7ec fb31 	bl	8000288 <__aeabi_dsub>
 8013c26:	4652      	mov	r2, sl
 8013c28:	465b      	mov	r3, fp
 8013c2a:	f7ec fce5 	bl	80005f8 <__aeabi_dmul>
 8013c2e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013d24 <__kernel_sin+0x15c>)
 8013c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c34:	f7ec fb2a 	bl	800028c <__adddf3>
 8013c38:	4652      	mov	r2, sl
 8013c3a:	465b      	mov	r3, fp
 8013c3c:	f7ec fcdc 	bl	80005f8 <__aeabi_dmul>
 8013c40:	a33a      	add	r3, pc, #232	@ (adr r3, 8013d2c <__kernel_sin+0x164>)
 8013c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c46:	f7ec fb1f 	bl	8000288 <__aeabi_dsub>
 8013c4a:	4652      	mov	r2, sl
 8013c4c:	465b      	mov	r3, fp
 8013c4e:	f7ec fcd3 	bl	80005f8 <__aeabi_dmul>
 8013c52:	a338      	add	r3, pc, #224	@ (adr r3, 8013d34 <__kernel_sin+0x16c>)
 8013c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c58:	f7ec fb18 	bl	800028c <__adddf3>
 8013c5c:	4606      	mov	r6, r0
 8013c5e:	460f      	mov	r7, r1
 8013c60:	f1b8 0f00 	cmp.w	r8, #0
 8013c64:	d11b      	bne.n	8013c9e <__kernel_sin+0xd6>
 8013c66:	4602      	mov	r2, r0
 8013c68:	460b      	mov	r3, r1
 8013c6a:	4650      	mov	r0, sl
 8013c6c:	4659      	mov	r1, fp
 8013c6e:	f7ec fcc3 	bl	80005f8 <__aeabi_dmul>
 8013c72:	a325      	add	r3, pc, #148	@ (adr r3, 8013d08 <__kernel_sin+0x140>)
 8013c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c78:	f7ec fb06 	bl	8000288 <__aeabi_dsub>
 8013c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c80:	f7ec fcba 	bl	80005f8 <__aeabi_dmul>
 8013c84:	4602      	mov	r2, r0
 8013c86:	460b      	mov	r3, r1
 8013c88:	4620      	mov	r0, r4
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	f7ec fafe 	bl	800028c <__adddf3>
 8013c90:	4604      	mov	r4, r0
 8013c92:	460d      	mov	r5, r1
 8013c94:	ec45 4b10 	vmov	d0, r4, r5
 8013c98:	b005      	add	sp, #20
 8013c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8013d10 <__kernel_sin+0x148>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	f7ec fca7 	bl	80005f8 <__aeabi_dmul>
 8013caa:	4632      	mov	r2, r6
 8013cac:	4680      	mov	r8, r0
 8013cae:	4689      	mov	r9, r1
 8013cb0:	463b      	mov	r3, r7
 8013cb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cb6:	f7ec fc9f 	bl	80005f8 <__aeabi_dmul>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	4640      	mov	r0, r8
 8013cc0:	4649      	mov	r1, r9
 8013cc2:	f7ec fae1 	bl	8000288 <__aeabi_dsub>
 8013cc6:	4652      	mov	r2, sl
 8013cc8:	465b      	mov	r3, fp
 8013cca:	f7ec fc95 	bl	80005f8 <__aeabi_dmul>
 8013cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013cd2:	f7ec fad9 	bl	8000288 <__aeabi_dsub>
 8013cd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8013d08 <__kernel_sin+0x140>)
 8013cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cdc:	4606      	mov	r6, r0
 8013cde:	460f      	mov	r7, r1
 8013ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ce4:	f7ec fc88 	bl	80005f8 <__aeabi_dmul>
 8013ce8:	4602      	mov	r2, r0
 8013cea:	460b      	mov	r3, r1
 8013cec:	4630      	mov	r0, r6
 8013cee:	4639      	mov	r1, r7
 8013cf0:	f7ec facc 	bl	800028c <__adddf3>
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	460b      	mov	r3, r1
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	4629      	mov	r1, r5
 8013cfc:	f7ec fac4 	bl	8000288 <__aeabi_dsub>
 8013d00:	e7c6      	b.n	8013c90 <__kernel_sin+0xc8>
 8013d02:	bf00      	nop
 8013d04:	f3af 8000 	nop.w
 8013d08:	55555549 	.word	0x55555549
 8013d0c:	3fc55555 	.word	0x3fc55555
 8013d10:	3fe00000 	.word	0x3fe00000
 8013d14:	5acfd57c 	.word	0x5acfd57c
 8013d18:	3de5d93a 	.word	0x3de5d93a
 8013d1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013d20:	3e5ae5e6 	.word	0x3e5ae5e6
 8013d24:	57b1fe7d 	.word	0x57b1fe7d
 8013d28:	3ec71de3 	.word	0x3ec71de3
 8013d2c:	19c161d5 	.word	0x19c161d5
 8013d30:	3f2a01a0 	.word	0x3f2a01a0
 8013d34:	1110f8a6 	.word	0x1110f8a6
 8013d38:	3f811111 	.word	0x3f811111

08013d3c <fabs>:
 8013d3c:	ec51 0b10 	vmov	r0, r1, d0
 8013d40:	4602      	mov	r2, r0
 8013d42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013d46:	ec43 2b10 	vmov	d0, r2, r3
 8013d4a:	4770      	bx	lr
 8013d4c:	0000      	movs	r0, r0
	...

08013d50 <scalbn>:
 8013d50:	b570      	push	{r4, r5, r6, lr}
 8013d52:	ec55 4b10 	vmov	r4, r5, d0
 8013d56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	462b      	mov	r3, r5
 8013d5e:	b991      	cbnz	r1, 8013d86 <scalbn+0x36>
 8013d60:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013d64:	4323      	orrs	r3, r4
 8013d66:	d03d      	beq.n	8013de4 <scalbn+0x94>
 8013d68:	4b35      	ldr	r3, [pc, #212]	@ (8013e40 <scalbn+0xf0>)
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	4629      	mov	r1, r5
 8013d6e:	2200      	movs	r2, #0
 8013d70:	f7ec fc42 	bl	80005f8 <__aeabi_dmul>
 8013d74:	4b33      	ldr	r3, [pc, #204]	@ (8013e44 <scalbn+0xf4>)
 8013d76:	429e      	cmp	r6, r3
 8013d78:	4604      	mov	r4, r0
 8013d7a:	460d      	mov	r5, r1
 8013d7c:	da0f      	bge.n	8013d9e <scalbn+0x4e>
 8013d7e:	a328      	add	r3, pc, #160	@ (adr r3, 8013e20 <scalbn+0xd0>)
 8013d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d84:	e01e      	b.n	8013dc4 <scalbn+0x74>
 8013d86:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013d8a:	4291      	cmp	r1, r2
 8013d8c:	d10b      	bne.n	8013da6 <scalbn+0x56>
 8013d8e:	4622      	mov	r2, r4
 8013d90:	4620      	mov	r0, r4
 8013d92:	4629      	mov	r1, r5
 8013d94:	f7ec fa7a 	bl	800028c <__adddf3>
 8013d98:	4604      	mov	r4, r0
 8013d9a:	460d      	mov	r5, r1
 8013d9c:	e022      	b.n	8013de4 <scalbn+0x94>
 8013d9e:	460b      	mov	r3, r1
 8013da0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013da4:	3936      	subs	r1, #54	@ 0x36
 8013da6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013daa:	4296      	cmp	r6, r2
 8013dac:	dd0d      	ble.n	8013dca <scalbn+0x7a>
 8013dae:	2d00      	cmp	r5, #0
 8013db0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013e28 <scalbn+0xd8>)
 8013db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013db6:	da02      	bge.n	8013dbe <scalbn+0x6e>
 8013db8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013e30 <scalbn+0xe0>)
 8013dba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dbe:	a31a      	add	r3, pc, #104	@ (adr r3, 8013e28 <scalbn+0xd8>)
 8013dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc4:	f7ec fc18 	bl	80005f8 <__aeabi_dmul>
 8013dc8:	e7e6      	b.n	8013d98 <scalbn+0x48>
 8013dca:	1872      	adds	r2, r6, r1
 8013dcc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013dd0:	428a      	cmp	r2, r1
 8013dd2:	dcec      	bgt.n	8013dae <scalbn+0x5e>
 8013dd4:	2a00      	cmp	r2, #0
 8013dd6:	dd08      	ble.n	8013dea <scalbn+0x9a>
 8013dd8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013ddc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013de0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013de4:	ec45 4b10 	vmov	d0, r4, r5
 8013de8:	bd70      	pop	{r4, r5, r6, pc}
 8013dea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013dee:	da08      	bge.n	8013e02 <scalbn+0xb2>
 8013df0:	2d00      	cmp	r5, #0
 8013df2:	a10b      	add	r1, pc, #44	@ (adr r1, 8013e20 <scalbn+0xd0>)
 8013df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013df8:	dac1      	bge.n	8013d7e <scalbn+0x2e>
 8013dfa:	a10f      	add	r1, pc, #60	@ (adr r1, 8013e38 <scalbn+0xe8>)
 8013dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e00:	e7bd      	b.n	8013d7e <scalbn+0x2e>
 8013e02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013e06:	3236      	adds	r2, #54	@ 0x36
 8013e08:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013e0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013e10:	4620      	mov	r0, r4
 8013e12:	4b0d      	ldr	r3, [pc, #52]	@ (8013e48 <scalbn+0xf8>)
 8013e14:	4629      	mov	r1, r5
 8013e16:	2200      	movs	r2, #0
 8013e18:	e7d4      	b.n	8013dc4 <scalbn+0x74>
 8013e1a:	bf00      	nop
 8013e1c:	f3af 8000 	nop.w
 8013e20:	c2f8f359 	.word	0xc2f8f359
 8013e24:	01a56e1f 	.word	0x01a56e1f
 8013e28:	8800759c 	.word	0x8800759c
 8013e2c:	7e37e43c 	.word	0x7e37e43c
 8013e30:	8800759c 	.word	0x8800759c
 8013e34:	fe37e43c 	.word	0xfe37e43c
 8013e38:	c2f8f359 	.word	0xc2f8f359
 8013e3c:	81a56e1f 	.word	0x81a56e1f
 8013e40:	43500000 	.word	0x43500000
 8013e44:	ffff3cb0 	.word	0xffff3cb0
 8013e48:	3c900000 	.word	0x3c900000
 8013e4c:	00000000 	.word	0x00000000

08013e50 <floor>:
 8013e50:	ec51 0b10 	vmov	r0, r1, d0
 8013e54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013e60:	2e13      	cmp	r6, #19
 8013e62:	460c      	mov	r4, r1
 8013e64:	4605      	mov	r5, r0
 8013e66:	4680      	mov	r8, r0
 8013e68:	dc34      	bgt.n	8013ed4 <floor+0x84>
 8013e6a:	2e00      	cmp	r6, #0
 8013e6c:	da17      	bge.n	8013e9e <floor+0x4e>
 8013e6e:	a332      	add	r3, pc, #200	@ (adr r3, 8013f38 <floor+0xe8>)
 8013e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e74:	f7ec fa0a 	bl	800028c <__adddf3>
 8013e78:	2200      	movs	r2, #0
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	f7ec fe4c 	bl	8000b18 <__aeabi_dcmpgt>
 8013e80:	b150      	cbz	r0, 8013e98 <floor+0x48>
 8013e82:	2c00      	cmp	r4, #0
 8013e84:	da55      	bge.n	8013f32 <floor+0xe2>
 8013e86:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8013e8a:	432c      	orrs	r4, r5
 8013e8c:	2500      	movs	r5, #0
 8013e8e:	42ac      	cmp	r4, r5
 8013e90:	4c2b      	ldr	r4, [pc, #172]	@ (8013f40 <floor+0xf0>)
 8013e92:	bf08      	it	eq
 8013e94:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013e98:	4621      	mov	r1, r4
 8013e9a:	4628      	mov	r0, r5
 8013e9c:	e023      	b.n	8013ee6 <floor+0x96>
 8013e9e:	4f29      	ldr	r7, [pc, #164]	@ (8013f44 <floor+0xf4>)
 8013ea0:	4137      	asrs	r7, r6
 8013ea2:	ea01 0307 	and.w	r3, r1, r7
 8013ea6:	4303      	orrs	r3, r0
 8013ea8:	d01d      	beq.n	8013ee6 <floor+0x96>
 8013eaa:	a323      	add	r3, pc, #140	@ (adr r3, 8013f38 <floor+0xe8>)
 8013eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eb0:	f7ec f9ec 	bl	800028c <__adddf3>
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	f7ec fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d0eb      	beq.n	8013e98 <floor+0x48>
 8013ec0:	2c00      	cmp	r4, #0
 8013ec2:	bfbe      	ittt	lt
 8013ec4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013ec8:	4133      	asrlt	r3, r6
 8013eca:	18e4      	addlt	r4, r4, r3
 8013ecc:	ea24 0407 	bic.w	r4, r4, r7
 8013ed0:	2500      	movs	r5, #0
 8013ed2:	e7e1      	b.n	8013e98 <floor+0x48>
 8013ed4:	2e33      	cmp	r6, #51	@ 0x33
 8013ed6:	dd0a      	ble.n	8013eee <floor+0x9e>
 8013ed8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013edc:	d103      	bne.n	8013ee6 <floor+0x96>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	f7ec f9d3 	bl	800028c <__adddf3>
 8013ee6:	ec41 0b10 	vmov	d0, r0, r1
 8013eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013ef2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013ef6:	40df      	lsrs	r7, r3
 8013ef8:	4207      	tst	r7, r0
 8013efa:	d0f4      	beq.n	8013ee6 <floor+0x96>
 8013efc:	a30e      	add	r3, pc, #56	@ (adr r3, 8013f38 <floor+0xe8>)
 8013efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f02:	f7ec f9c3 	bl	800028c <__adddf3>
 8013f06:	2200      	movs	r2, #0
 8013f08:	2300      	movs	r3, #0
 8013f0a:	f7ec fe05 	bl	8000b18 <__aeabi_dcmpgt>
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	d0c2      	beq.n	8013e98 <floor+0x48>
 8013f12:	2c00      	cmp	r4, #0
 8013f14:	da0a      	bge.n	8013f2c <floor+0xdc>
 8013f16:	2e14      	cmp	r6, #20
 8013f18:	d101      	bne.n	8013f1e <floor+0xce>
 8013f1a:	3401      	adds	r4, #1
 8013f1c:	e006      	b.n	8013f2c <floor+0xdc>
 8013f1e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013f22:	2301      	movs	r3, #1
 8013f24:	40b3      	lsls	r3, r6
 8013f26:	441d      	add	r5, r3
 8013f28:	4545      	cmp	r5, r8
 8013f2a:	d3f6      	bcc.n	8013f1a <floor+0xca>
 8013f2c:	ea25 0507 	bic.w	r5, r5, r7
 8013f30:	e7b2      	b.n	8013e98 <floor+0x48>
 8013f32:	2500      	movs	r5, #0
 8013f34:	462c      	mov	r4, r5
 8013f36:	e7af      	b.n	8013e98 <floor+0x48>
 8013f38:	8800759c 	.word	0x8800759c
 8013f3c:	7e37e43c 	.word	0x7e37e43c
 8013f40:	bff00000 	.word	0xbff00000
 8013f44:	000fffff 	.word	0x000fffff

08013f48 <_init>:
 8013f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f4a:	bf00      	nop
 8013f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f4e:	bc08      	pop	{r3}
 8013f50:	469e      	mov	lr, r3
 8013f52:	4770      	bx	lr

08013f54 <_fini>:
 8013f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f56:	bf00      	nop
 8013f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f5a:	bc08      	pop	{r3}
 8013f5c:	469e      	mov	lr, r3
 8013f5e:	4770      	bx	lr
