
STM_BLACKPILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da0  08002da0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002da0  08002da0  00003da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002da8  08002da8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da8  08002da8  00003da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dac  08002dac  00003dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002db0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08002dbc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08002dbc  000041ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4b5  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be1  00000000  00000000  000124f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000140d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  00014f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016526  00000000  00000000  00015ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010179  00000000  00000000  0002bfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009002d  00000000  00000000  0003c165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  000cc1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000d006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d70 	.word	0x08002d70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002d70 	.word	0x08002d70

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fc37 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f82d 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f997 	bl	8000844 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000516:	f000 f891 	bl	800063c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800051a:	f000 f969 	bl	80007f0 <MX_USART6_UART_Init>
  MX_I2C3_Init();
 800051e:	f000 f8bb 	bl	8000698 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000522:	f000 f8e7 	bl	80006f4 <MX_TIM4_Init>
  MX_TIM11_Init();
 8000526:	f000 f93f 	bl	80007a8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);
 800052a:	480d      	ldr	r0, [pc, #52]	@ (8000560 <main+0x5c>)
 800052c:	f001 fd44 	bl	8001fb8 <HAL_TIM_Base_Start>
  /*
  uint8_t prevButtonState = 0;
  uint8_t toggleState = 1;
 */

  uint8_t LEDstate = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	71fb      	strb	r3, [r7, #7]
  uint16_t blinkingDutyCycle = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	80bb      	strh	r3, [r7, #4]
  int16_t LEDBlinkingIncrement = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	807b      	strh	r3, [r7, #2]
  uint8_t prevButtonState = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	707b      	strb	r3, [r7, #1]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //
	  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14));
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 8000540:	2101      	movs	r1, #1
 8000542:	4808      	ldr	r0, [pc, #32]	@ (8000564 <main+0x60>)
 8000544:	f000 ff1a 	bl	800137c <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <main+0x64>)
 8000552:	f000 ff2b 	bl	80013ac <HAL_GPIO_WritePin>

	  prevButtonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, toggleState);
	*/

	  HAL_Delay(5);
 8000556:	2005      	movs	r0, #5
 8000558:	f000 fc82 	bl	8000e60 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 800055c:	bf00      	nop
 800055e:	e7ef      	b.n	8000540 <main+0x3c>
 8000560:	20000118 	.word	0x20000118
 8000564:	40020000 	.word	0x40020000
 8000568:	40020800 	.word	0x40020800

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 fbcc 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <SystemClock_Config+0xc8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a26      	ldr	r2, [pc, #152]	@ (8000634 <SystemClock_Config+0xc8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <SystemClock_Config+0xcc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a20      	ldr	r2, [pc, #128]	@ (8000638 <SystemClock_Config+0xcc>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005dc:	230c      	movs	r3, #12
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e0:	2360      	movs	r3, #96	@ 0x60
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f839 	bl	8001668 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f9c2 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2103      	movs	r1, #3
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fa9b 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000628:	f000 f9ac 	bl	8000984 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	@ 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_I2C1_Init+0x50>)
 800067a:	f000 feb1 	bl	80013e0 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 f97e 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000028 	.word	0x20000028
 8000690:	40005400 	.word	0x40005400
 8000694:	000186a0 	.word	0x000186a0

08000698 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_I2C3_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <MX_I2C3_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_I2C3_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_I2C3_Init+0x50>)
 80006d6:	f000 fe83 	bl	80013e0 <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 f950 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	40005c00 	.word	0x40005c00
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_TIM4_Init+0xac>)
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <MX_TIM4_Init+0xb0>)
 800071a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800071c:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_TIM4_Init+0xac>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_TIM4_Init+0xac>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000728:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_TIM4_Init+0xac>)
 800072a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800072e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_TIM4_Init+0xac>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_TIM4_Init+0xac>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <MX_TIM4_Init+0xac>)
 800073e:	f001 fc95 	bl	800206c <HAL_TIM_PWM_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000748:	f000 f91c 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4619      	mov	r1, r3
 800075a:	4811      	ldr	r0, [pc, #68]	@ (80007a0 <MX_TIM4_Init+0xac>)
 800075c:	f001 ffaa 	bl	80026b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000766:	f000 f90d 	bl	8000984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076a:	2360      	movs	r3, #96	@ 0x60
 800076c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	220c      	movs	r2, #12
 800077e:	4619      	mov	r1, r3
 8000780:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <MX_TIM4_Init+0xac>)
 8000782:	f001 fcc3 	bl	800210c <HAL_TIM_PWM_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800078c:	f000 f8fa 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <MX_TIM4_Init+0xac>)
 8000792:	f000 fa05 	bl	8000ba0 <HAL_TIM_MspPostInit>

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	@ 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d0 	.word	0x200000d0
 80007a4:	40000800 	.word	0x40000800

080007a8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_TIM11_Init+0x40>)
 80007ae:	4a0f      	ldr	r2, [pc, #60]	@ (80007ec <MX_TIM11_Init+0x44>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <MX_TIM11_Init+0x40>)
 80007b4:	2263      	movs	r2, #99	@ 0x63
 80007b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_TIM11_Init+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_TIM11_Init+0x40>)
 80007c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_TIM11_Init+0x40>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_TIM11_Init+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_TIM11_Init+0x40>)
 80007d4:	f001 fba0 	bl	8001f18 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80007de:	f000 f8d1 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000118 	.word	0x20000118
 80007ec:	40014800 	.word	0x40014800

080007f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <MX_USART6_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_USART6_UART_Init+0x4c>)
 8000828:	f001 ffb2 	bl	8002790 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f8a7 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000160 	.word	0x20000160
 8000840:	40011400 	.word	0x40011400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b45      	ldr	r3, [pc, #276]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a44      	ldr	r2, [pc, #272]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b42      	ldr	r3, [pc, #264]	@ (8000974 <MX_GPIO_Init+0x130>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b3e      	ldr	r3, [pc, #248]	@ (8000974 <MX_GPIO_Init+0x130>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a3d      	ldr	r2, [pc, #244]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b3b      	ldr	r3, [pc, #236]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <MX_GPIO_Init+0x130>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a36      	ldr	r2, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x130>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b34      	ldr	r3, [pc, #208]	@ (8000974 <MX_GPIO_Init+0x130>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <MX_GPIO_Init+0x130>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000974 <MX_GPIO_Init+0x130>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_GPIO_Init+0x130>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d0:	4829      	ldr	r0, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x134>)
 80008d2:	f000 fd6b 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008dc:	4827      	ldr	r0, [pc, #156]	@ (800097c <MX_GPIO_Init+0x138>)
 80008de:	f000 fd65 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	481f      	ldr	r0, [pc, #124]	@ (8000978 <MX_GPIO_Init+0x134>)
 80008fc:	f000 fbba 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4818      	ldr	r0, [pc, #96]	@ (8000978 <MX_GPIO_Init+0x134>)
 8000916:	f000 fbad 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4814      	ldr	r0, [pc, #80]	@ (8000980 <MX_GPIO_Init+0x13c>)
 800092e:	f000 fba1 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_GPIO_Init+0x138>)
 800094c:	f000 fb92 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_GPIO_Init+0x138>)
 8000966:	f000 fb85 	bl	8001074 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020800 	.word	0x40020800
 800097c:	40020400 	.word	0x40020400
 8000980:	40020000 	.word	0x40020000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a41      	ldr	r2, [pc, #260]	@ (8000b04 <HAL_I2C_MspInit+0x124>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12c      	bne.n	8000a5c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b40      	ldr	r3, [pc, #256]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b3d      	ldr	r3, [pc, #244]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1e:	23c0      	movs	r3, #192	@ 0xc0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4834      	ldr	r0, [pc, #208]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a3a:	f000 fb1b 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	4b31      	ldr	r3, [pc, #196]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	4a30      	ldr	r2, [pc, #192]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a5a:	e04f      	b.n	8000afc <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a2b      	ldr	r2, [pc, #172]	@ (8000b10 <HAL_I2C_MspInit+0x130>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d14a      	bne.n	8000afc <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a26      	ldr	r2, [pc, #152]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4816      	ldr	r0, [pc, #88]	@ (8000b14 <HAL_I2C_MspInit+0x134>)
 8000abc:	f000 fada 	bl	8001074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000adc:	f000 faca 	bl	8001074 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000aea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	@ 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40005c00 	.word	0x40005c00
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d10d      	bne.n	8000b46 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_TIM_PWM_MspInit+0x40>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	4a09      	ldr	r2, [pc, #36]	@ (8000b58 <HAL_TIM_PWM_MspInit+0x40>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <HAL_TIM_PWM_MspInit+0x40>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40000800 	.word	0x40000800
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <HAL_TIM_Base_MspInit+0x3c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10d      	bne.n	8000b8a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_TIM_Base_MspInit+0x40>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	4a09      	ldr	r2, [pc, #36]	@ (8000b9c <HAL_TIM_Base_MspInit+0x40>)
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <HAL_TIM_Base_MspInit+0x40>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40014800 	.word	0x40014800
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <HAL_TIM_MspPostInit+0x68>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d11e      	bne.n	8000c00 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_TIM_MspPostInit+0x6c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <HAL_TIM_MspPostInit+0x6c>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_TIM_MspPostInit+0x6c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000be2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <HAL_TIM_MspPostInit+0x70>)
 8000bfc:	f000 fa3a 	bl	8001074 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40000800 	.word	0x40000800
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020400 	.word	0x40020400

08000c14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_UART_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12c      	bne.n	8000c90 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a10      	ldr	r2, [pc, #64]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_UART_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c80:	2308      	movs	r3, #8
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <HAL_UART_MspInit+0x8c>)
 8000c8c:	f000 f9f2 	bl	8001074 <HAL_GPIO_Init>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	@ 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <NMI_Handler+0x4>

08000cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfa:	f000 f891 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2c:	f7ff ffea 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	@ (8000d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	@ (8000d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f001 ffe7 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fbd3 	bl	8000504 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d6c:	08002db0 	.word	0x08002db0
  ldr r2, =_sbss
 8000d70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d74:	200001ac 	.word	0x200001ac

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f931 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fdee 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dfc:	f000 f911 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200001a8 	.word	0x200001a8

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200001a8 	.word	0x200001a8

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5c 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	@ 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e159      	b.n	8001344 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8148 	bne.w	800133e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80a2 	beq.w	800133e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b57      	ldr	r3, [pc, #348]	@ (800135c <HAL_GPIO_Init+0x2e8>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	4a56      	ldr	r2, [pc, #344]	@ (800135c <HAL_GPIO_Init+0x2e8>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001208:	6453      	str	r3, [r2, #68]	@ 0x44
 800120a:	4b54      	ldr	r3, [pc, #336]	@ (800135c <HAL_GPIO_Init+0x2e8>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <HAL_GPIO_Init+0x2ec>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a49      	ldr	r2, [pc, #292]	@ (8001364 <HAL_GPIO_Init+0x2f0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x202>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a48      	ldr	r2, [pc, #288]	@ (8001368 <HAL_GPIO_Init+0x2f4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x1fe>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a47      	ldr	r2, [pc, #284]	@ (800136c <HAL_GPIO_Init+0x2f8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x1fa>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <HAL_GPIO_Init+0x2fc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x1f6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a45      	ldr	r2, [pc, #276]	@ (8001374 <HAL_GPIO_Init+0x300>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x1f2>
 8001262:	2304      	movs	r3, #4
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x204>
 8001266:	2307      	movs	r3, #7
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x204>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x204>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x204>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x204>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	@ (8001360 <HAL_GPIO_Init+0x2ec>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b38      	ldr	r3, [pc, #224]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a24      	ldr	r2, [pc, #144]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ea:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130e:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001338:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <HAL_GPIO_Init+0x304>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f aea2 	bls.w	8001090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e12b      	b.n	800164a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff faea 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001444:	f000 fd40 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8001448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a81      	ldr	r2, [pc, #516]	@ (8001654 <HAL_I2C_Init+0x274>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d807      	bhi.n	8001464 <HAL_I2C_Init+0x84>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a80      	ldr	r2, [pc, #512]	@ (8001658 <HAL_I2C_Init+0x278>)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	e006      	b.n	8001472 <HAL_I2C_Init+0x92>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4a7d      	ldr	r2, [pc, #500]	@ (800165c <HAL_I2C_Init+0x27c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	bf94      	ite	ls
 800146c:	2301      	movls	r3, #1
 800146e:	2300      	movhi	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0e7      	b.n	800164a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4a78      	ldr	r2, [pc, #480]	@ (8001660 <HAL_I2C_Init+0x280>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0c9b      	lsrs	r3, r3, #18
 8001484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	430a      	orrs	r2, r1
 8001498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001654 <HAL_I2C_Init+0x274>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d802      	bhi.n	80014b4 <HAL_I2C_Init+0xd4>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	3301      	adds	r3, #1
 80014b2:	e009      	b.n	80014c8 <HAL_I2C_Init+0xe8>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	4a69      	ldr	r2, [pc, #420]	@ (8001664 <HAL_I2C_Init+0x284>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	099b      	lsrs	r3, r3, #6
 80014c6:	3301      	adds	r3, #1
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	495c      	ldr	r1, [pc, #368]	@ (8001654 <HAL_I2C_Init+0x274>)
 80014e4:	428b      	cmp	r3, r1
 80014e6:	d819      	bhi.n	800151c <HAL_I2C_Init+0x13c>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e59      	subs	r1, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f6:	1c59      	adds	r1, r3, #1
 80014f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014fc:	400b      	ands	r3, r1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00a      	beq.n	8001518 <HAL_I2C_Init+0x138>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e59      	subs	r1, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001516:	e051      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 8001518:	2304      	movs	r3, #4
 800151a:	e04f      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d111      	bne.n	8001548 <HAL_I2C_Init+0x168>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	440b      	add	r3, r1
 8001532:	fbb0 f3f3 	udiv	r3, r0, r3
 8001536:	3301      	adds	r3, #1
 8001538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	e012      	b.n	800156e <HAL_I2C_Init+0x18e>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e58      	subs	r0, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	0099      	lsls	r1, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	fbb0 f3f3 	udiv	r3, r0, r3
 800155e:	3301      	adds	r3, #1
 8001560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf0c      	ite	eq
 8001568:	2301      	moveq	r3, #1
 800156a:	2300      	movne	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Init+0x196>
 8001572:	2301      	movs	r3, #1
 8001574:	e022      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10e      	bne.n	800159c <HAL_I2C_Init+0x1bc>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1e58      	subs	r0, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6859      	ldr	r1, [r3, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	440b      	add	r3, r1
 800158c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001590:	3301      	adds	r3, #1
 8001592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800159a:	e00f      	b.n	80015bc <HAL_I2C_Init+0x1dc>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e58      	subs	r0, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	0099      	lsls	r1, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	6809      	ldr	r1, [r1, #0]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6911      	ldr	r1, [r2, #16]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68d2      	ldr	r2, [r2, #12]
 80015f6:	4311      	orrs	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2220      	movs	r2, #32
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	000186a0 	.word	0x000186a0
 8001658:	001e847f 	.word	0x001e847f
 800165c:	003d08ff 	.word	0x003d08ff
 8001660:	431bde83 	.word	0x431bde83
 8001664:	10624dd3 	.word	0x10624dd3

08001668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e267      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d075      	beq.n	8001772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001686:	4b88      	ldr	r3, [pc, #544]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b04      	cmp	r3, #4
 8001690:	d00c      	beq.n	80016ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001692:	4b85      	ldr	r3, [pc, #532]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800169a:	2b08      	cmp	r3, #8
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169e:	4b82      	ldr	r3, [pc, #520]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016aa:	d10b      	bne.n	80016c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	4b7e      	ldr	r3, [pc, #504]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d05b      	beq.n	8001770 <HAL_RCC_OscConfig+0x108>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d157      	bne.n	8001770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e242      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016cc:	d106      	bne.n	80016dc <HAL_RCC_OscConfig+0x74>
 80016ce:	4b76      	ldr	r3, [pc, #472]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a75      	ldr	r2, [pc, #468]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xb0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x98>
 80016e6:	4b70      	ldr	r3, [pc, #448]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a6f      	ldr	r2, [pc, #444]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b6d      	ldr	r3, [pc, #436]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6c      	ldr	r2, [pc, #432]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xb0>
 8001700:	4b69      	ldr	r3, [pc, #420]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a68      	ldr	r2, [pc, #416]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b66      	ldr	r3, [pc, #408]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a65      	ldr	r2, [pc, #404]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fb92 	bl	8000e48 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fb8e 	bl	8000e48 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	@ 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e207      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b5b      	ldr	r3, [pc, #364]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xc0>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fb7e 	bl	8000e48 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fb7a 	bl	8000e48 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1f3      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b51      	ldr	r3, [pc, #324]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0xe8>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d063      	beq.n	8001846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800177e:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178a:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001796:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x152>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1c7      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b3b      	ldr	r3, [pc, #236]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4937      	ldr	r1, [pc, #220]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e03a      	b.n	8001846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <HAL_RCC_OscConfig+0x244>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fb33 	bl	8000e48 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fb2f 	bl	8000e48 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1a8      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4925      	ldr	r1, [pc, #148]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_RCC_OscConfig+0x244>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fb12 	bl	8000e48 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fb0e 	bl	8000e48 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e187      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d036      	beq.n	80018c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d016      	beq.n	8001888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_RCC_OscConfig+0x248>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff faf2 	bl	8000e48 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff faee 	bl	8000e48 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e167      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_RCC_OscConfig+0x240>)
 800187c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x200>
 8001886:	e01b      	b.n	80018c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_RCC_OscConfig+0x248>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fadb 	bl	8000e48 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001894:	e00e      	b.n	80018b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001896:	f7ff fad7 	bl	8000e48 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d907      	bls.n	80018b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e150      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
 80018a8:	40023800 	.word	0x40023800
 80018ac:	42470000 	.word	0x42470000
 80018b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b4:	4b88      	ldr	r3, [pc, #544]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ea      	bne.n	8001896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8097 	beq.w	80019fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d2:	4b81      	ldr	r3, [pc, #516]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ee:	4b7a      	ldr	r3, [pc, #488]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b77      	ldr	r3, [pc, #476]	@ (8001adc <HAL_RCC_OscConfig+0x474>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b74      	ldr	r3, [pc, #464]	@ (8001adc <HAL_RCC_OscConfig+0x474>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a73      	ldr	r2, [pc, #460]	@ (8001adc <HAL_RCC_OscConfig+0x474>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001916:	f7ff fa97 	bl	8000e48 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff fa93 	bl	8000e48 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e10c      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	4b6a      	ldr	r3, [pc, #424]	@ (8001adc <HAL_RCC_OscConfig+0x474>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x2ea>
 8001944:	4b64      	ldr	r3, [pc, #400]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001948:	4a63      	ldr	r2, [pc, #396]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x324>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x30c>
 800195a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6713      	str	r3, [r2, #112]	@ 0x70
 8001966:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	@ 0x70
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x324>
 8001974:	4b58      	ldr	r3, [pc, #352]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001978:	4a57      	ldr	r2, [pc, #348]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001980:	4b55      	ldr	r3, [pc, #340]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001984:	4a54      	ldr	r2, [pc, #336]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d015      	beq.n	80019c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fa58 	bl	8000e48 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7ff fa54 	bl	8000e48 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0cb      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	4b49      	ldr	r3, [pc, #292]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0ee      	beq.n	800199c <HAL_RCC_OscConfig+0x334>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa42 	bl	8000e48 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa3e 	bl	8000e48 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e0b5      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019de:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ee      	bne.n	80019c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	4a38      	ldr	r2, [pc, #224]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a1 	beq.w	8001b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a06:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d05c      	beq.n	8001acc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d141      	bne.n	8001a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <HAL_RCC_OscConfig+0x478>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fa12 	bl	8000e48 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff fa0e 	bl	8000e48 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e087      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	019b      	lsls	r3, r3, #6
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	491b      	ldr	r1, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_RCC_OscConfig+0x478>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff f9e7 	bl	8000e48 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f9e3 	bl	8000e48 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e05c      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x416>
 8001a9c:	e054      	b.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_RCC_OscConfig+0x478>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f9d0 	bl	8000e48 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f9cc 	bl	8000e48 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e045      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x444>
 8001aca:	e03d      	b.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e038      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_RCC_OscConfig+0x4ec>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d028      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d121      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d11a      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d111      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0cc      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b68      	ldr	r3, [pc, #416]	@ (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d90c      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b65      	ldr	r3, [pc, #404]	@ (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0b8      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	4b59      	ldr	r3, [pc, #356]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc4:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b50      	ldr	r3, [pc, #320]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	494d      	ldr	r1, [pc, #308]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d044      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d119      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	4b3f      	ldr	r3, [pc, #252]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e067      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	4b37      	ldr	r3, [pc, #220]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 0203 	bic.w	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4934      	ldr	r1, [pc, #208]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c48:	f7ff f8fe 	bl	8000e48 <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c50:	f7ff f8fa 	bl	8000e48 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e04f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 020c 	and.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d1eb      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c78:	4b25      	ldr	r3, [pc, #148]	@ (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d20c      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b22      	ldr	r3, [pc, #136]	@ (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e032      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4916      	ldr	r1, [pc, #88]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	490e      	ldr	r1, [pc, #56]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cde:	f000 f821 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	490a      	ldr	r1, [pc, #40]	@ (8001d18 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f85e 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00
 8001d14:	40023800 	.word	0x40023800
 8001d18:	08002d88 	.word	0x08002d88
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d28:	b090      	sub	sp, #64	@ 0x40
 8001d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3c:	4b59      	ldr	r3, [pc, #356]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d00d      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x40>
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	f200 80a1 	bhi.w	8001e90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x34>
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d56:	e09b      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b53      	ldr	r3, [pc, #332]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d5c:	e09b      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5e:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x188>)
 8001d60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d62:	e098      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d64:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d028      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	2200      	movs	r2, #0
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x188>)
 8001d90:	fb03 f201 	mul.w	r2, r3, r1
 8001d94:	2300      	movs	r3, #0
 8001d96:	fb00 f303 	mul.w	r3, r0, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a43      	ldr	r2, [pc, #268]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x188>)
 8001d9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001da4:	460a      	mov	r2, r1
 8001da6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001daa:	4413      	add	r3, r2
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db0:	2200      	movs	r2, #0
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	61fa      	str	r2, [r7, #28]
 8001db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dbe:	f7fe fa0b 	bl	80001d8 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dca:	e053      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	617a      	str	r2, [r7, #20]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dde:	f04f 0b00 	mov.w	fp, #0
 8001de2:	4652      	mov	r2, sl
 8001de4:	465b      	mov	r3, fp
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	0159      	lsls	r1, r3, #5
 8001df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df4:	0150      	lsls	r0, r2, #5
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	ebb2 080a 	subs.w	r8, r2, sl
 8001dfe:	eb63 090b 	sbc.w	r9, r3, fp
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e16:	ebb2 0408 	subs.w	r4, r2, r8
 8001e1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	00eb      	lsls	r3, r5, #3
 8001e28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2c:	00e2      	lsls	r2, r4, #3
 8001e2e:	4614      	mov	r4, r2
 8001e30:	461d      	mov	r5, r3
 8001e32:	eb14 030a 	adds.w	r3, r4, sl
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	eb45 030b 	adc.w	r3, r5, fp
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	028b      	lsls	r3, r1, #10
 8001e4e:	4621      	mov	r1, r4
 8001e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e54:	4621      	mov	r1, r4
 8001e56:	028a      	lsls	r2, r1, #10
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	60fa      	str	r2, [r7, #12]
 8001e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e68:	f7fe f9b6 	bl	80001d8 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3740      	adds	r7, #64	@ 0x40
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	017d7840 	.word	0x017d7840

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08002d98 	.word	0x08002d98

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffdc 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0b5b      	lsrs	r3, r3, #13
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4903      	ldr	r1, [pc, #12]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	08002d98 	.word	0x08002d98

08001f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e041      	b.n	8001fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe fe0c 	bl	8000b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f000 f99a 	bl	8002290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d001      	beq.n	8001fd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e03c      	b.n	800204a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_TIM_Base_Start+0xa0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d018      	beq.n	8002014 <HAL_TIM_Base_Start+0x5c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fea:	d013      	beq.n	8002014 <HAL_TIM_Base_Start+0x5c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <HAL_TIM_Base_Start+0xa4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00e      	beq.n	8002014 <HAL_TIM_Base_Start+0x5c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <HAL_TIM_Base_Start+0xa8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d009      	beq.n	8002014 <HAL_TIM_Base_Start+0x5c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <HAL_TIM_Base_Start+0xac>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d004      	beq.n	8002014 <HAL_TIM_Base_Start+0x5c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a16      	ldr	r2, [pc, #88]	@ (8002068 <HAL_TIM_Base_Start+0xb0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d111      	bne.n	8002038 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b06      	cmp	r3, #6
 8002024:	d010      	beq.n	8002048 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002036:	e007      	b.n	8002048 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40010000 	.word	0x40010000
 800205c:	40000400 	.word	0x40000400
 8002060:	40000800 	.word	0x40000800
 8002064:	40000c00 	.word	0x40000c00
 8002068:	40014000 	.word	0x40014000

0800206c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e041      	b.n	8002102 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fd40 	bl	8000b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f000 f8f0 	bl	8002290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002126:	2302      	movs	r3, #2
 8002128:	e0ae      	b.n	8002288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	f200 809f 	bhi.w	8002278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800213a:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002175 	.word	0x08002175
 8002144:	08002279 	.word	0x08002279
 8002148:	08002279 	.word	0x08002279
 800214c:	08002279 	.word	0x08002279
 8002150:	080021b5 	.word	0x080021b5
 8002154:	08002279 	.word	0x08002279
 8002158:	08002279 	.word	0x08002279
 800215c:	08002279 	.word	0x08002279
 8002160:	080021f7 	.word	0x080021f7
 8002164:	08002279 	.word	0x08002279
 8002168:	08002279 	.word	0x08002279
 800216c:	08002279 	.word	0x08002279
 8002170:	08002237 	.word	0x08002237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f90e 	bl	800239c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0208 	orr.w	r2, r2, #8
 800218e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0204 	bic.w	r2, r2, #4
 800219e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6999      	ldr	r1, [r3, #24]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	619a      	str	r2, [r3, #24]
      break;
 80021b2:	e064      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f954 	bl	8002468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6999      	ldr	r1, [r3, #24]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	021a      	lsls	r2, r3, #8
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	619a      	str	r2, [r3, #24]
      break;
 80021f4:	e043      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f99f 	bl	8002540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0208 	orr.w	r2, r2, #8
 8002210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0204 	bic.w	r2, r2, #4
 8002220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69d9      	ldr	r1, [r3, #28]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	61da      	str	r2, [r3, #28]
      break;
 8002234:	e023      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f9e9 	bl	8002614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	021a      	lsls	r2, r3, #8
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	61da      	str	r2, [r3, #28]
      break;
 8002276:	e002      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
      break;
 800227c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002286:	7dfb      	ldrb	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a37      	ldr	r2, [pc, #220]	@ (8002380 <TIM_Base_SetConfig+0xf0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00f      	beq.n	80022c8 <TIM_Base_SetConfig+0x38>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ae:	d00b      	beq.n	80022c8 <TIM_Base_SetConfig+0x38>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a34      	ldr	r2, [pc, #208]	@ (8002384 <TIM_Base_SetConfig+0xf4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d007      	beq.n	80022c8 <TIM_Base_SetConfig+0x38>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a33      	ldr	r2, [pc, #204]	@ (8002388 <TIM_Base_SetConfig+0xf8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <TIM_Base_SetConfig+0x38>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a32      	ldr	r2, [pc, #200]	@ (800238c <TIM_Base_SetConfig+0xfc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d108      	bne.n	80022da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a28      	ldr	r2, [pc, #160]	@ (8002380 <TIM_Base_SetConfig+0xf0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01b      	beq.n	800231a <TIM_Base_SetConfig+0x8a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e8:	d017      	beq.n	800231a <TIM_Base_SetConfig+0x8a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a25      	ldr	r2, [pc, #148]	@ (8002384 <TIM_Base_SetConfig+0xf4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <TIM_Base_SetConfig+0x8a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a24      	ldr	r2, [pc, #144]	@ (8002388 <TIM_Base_SetConfig+0xf8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00f      	beq.n	800231a <TIM_Base_SetConfig+0x8a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a23      	ldr	r2, [pc, #140]	@ (800238c <TIM_Base_SetConfig+0xfc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00b      	beq.n	800231a <TIM_Base_SetConfig+0x8a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <TIM_Base_SetConfig+0x100>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <TIM_Base_SetConfig+0x8a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a21      	ldr	r2, [pc, #132]	@ (8002394 <TIM_Base_SetConfig+0x104>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0x8a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a20      	ldr	r2, [pc, #128]	@ (8002398 <TIM_Base_SetConfig+0x108>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <TIM_Base_SetConfig+0xf0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d103      	bne.n	800235a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f043 0204 	orr.w	r2, r3, #4
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40010000 	.word	0x40010000
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800
 800238c:	40000c00 	.word	0x40000c00
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800

0800239c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f023 0201 	bic.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f023 0302 	bic.w	r3, r3, #2
 80023e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002464 <TIM_OC1_SetConfig+0xc8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10c      	bne.n	8002412 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0308 	bic.w	r3, r3, #8
 80023fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a13      	ldr	r2, [pc, #76]	@ (8002464 <TIM_OC1_SetConfig+0xc8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d111      	bne.n	800243e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	621a      	str	r2, [r3, #32]
}
 8002458:	bf00      	nop
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40010000 	.word	0x40010000

08002468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f023 0210 	bic.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800249e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 0320 	bic.w	r3, r3, #32
 80024b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <TIM_OC2_SetConfig+0xd4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10d      	bne.n	80024e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a15      	ldr	r2, [pc, #84]	@ (800253c <TIM_OC2_SetConfig+0xd4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d113      	bne.n	8002514 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40010000 	.word	0x40010000

08002540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800256e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1d      	ldr	r2, [pc, #116]	@ (8002610 <TIM_OC3_SetConfig+0xd0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <TIM_OC3_SetConfig+0xd0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d113      	bne.n	80025ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	621a      	str	r2, [r3, #32]
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40010000 	.word	0x40010000

08002614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800265e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a10      	ldr	r2, [pc, #64]	@ (80026b0 <TIM_OC4_SetConfig+0x9c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d109      	bne.n	8002688 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800267a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	019b      	lsls	r3, r3, #6
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	621a      	str	r2, [r3, #32]
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000

080026b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e050      	b.n	800276e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d018      	beq.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002718:	d013      	beq.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00e      	beq.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a16      	ldr	r2, [pc, #88]	@ (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a15      	ldr	r2, [pc, #84]	@ (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a13      	ldr	r2, [pc, #76]	@ (800278c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10c      	bne.n	800275c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	4313      	orrs	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800
 8002788:	40000c00 	.word	0x40000c00
 800278c:	40014000 	.word	0x40014000

08002790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e042      	b.n	8002828 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fa2c 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	@ 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f82b 	bl	8002830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	b0c0      	sub	sp, #256	@ 0x100
 8002836:	af00      	add	r7, sp, #0
 8002838:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	68d9      	ldr	r1, [r3, #12]
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	ea40 0301 	orr.w	r3, r0, r1
 8002858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	431a      	orrs	r2, r3
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002888:	f021 010c 	bic.w	r1, r1, #12
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002896:	430b      	orrs	r3, r1
 8002898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028aa:	6999      	ldr	r1, [r3, #24]
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	ea40 0301 	orr.w	r3, r0, r1
 80028b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b8f      	ldr	r3, [pc, #572]	@ (8002afc <UART_SetConfig+0x2cc>)
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d005      	beq.n	80028d0 <UART_SetConfig+0xa0>
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002b00 <UART_SetConfig+0x2d0>)
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d104      	bne.n	80028da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028d0:	f7ff fb0e 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 80028d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028d8:	e003      	b.n	80028e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028da:	f7ff faf5 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 80028de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ec:	f040 810c 	bne.w	8002b08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80028fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	1891      	adds	r1, r2, r2
 8002908:	65b9      	str	r1, [r7, #88]	@ 0x58
 800290a:	415b      	adcs	r3, r3
 800290c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800290e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002912:	4621      	mov	r1, r4
 8002914:	eb12 0801 	adds.w	r8, r2, r1
 8002918:	4629      	mov	r1, r5
 800291a:	eb43 0901 	adc.w	r9, r3, r1
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800292a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002932:	4690      	mov	r8, r2
 8002934:	4699      	mov	r9, r3
 8002936:	4623      	mov	r3, r4
 8002938:	eb18 0303 	adds.w	r3, r8, r3
 800293c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002940:	462b      	mov	r3, r5
 8002942:	eb49 0303 	adc.w	r3, r9, r3
 8002946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002956:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800295a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800295e:	460b      	mov	r3, r1
 8002960:	18db      	adds	r3, r3, r3
 8002962:	653b      	str	r3, [r7, #80]	@ 0x50
 8002964:	4613      	mov	r3, r2
 8002966:	eb42 0303 	adc.w	r3, r2, r3
 800296a:	657b      	str	r3, [r7, #84]	@ 0x54
 800296c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002974:	f7fd fc30 	bl	80001d8 <__aeabi_uldivmod>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4b61      	ldr	r3, [pc, #388]	@ (8002b04 <UART_SetConfig+0x2d4>)
 800297e:	fba3 2302 	umull	r2, r3, r3, r2
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	011c      	lsls	r4, r3, #4
 8002986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002990:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002994:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002998:	4642      	mov	r2, r8
 800299a:	464b      	mov	r3, r9
 800299c:	1891      	adds	r1, r2, r2
 800299e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029a0:	415b      	adcs	r3, r3
 80029a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029a8:	4641      	mov	r1, r8
 80029aa:	eb12 0a01 	adds.w	sl, r2, r1
 80029ae:	4649      	mov	r1, r9
 80029b0:	eb43 0b01 	adc.w	fp, r3, r1
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c8:	4692      	mov	sl, r2
 80029ca:	469b      	mov	fp, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	eb1a 0303 	adds.w	r3, sl, r3
 80029d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029d6:	464b      	mov	r3, r9
 80029d8:	eb4b 0303 	adc.w	r3, fp, r3
 80029dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80029f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80029f4:	460b      	mov	r3, r1
 80029f6:	18db      	adds	r3, r3, r3
 80029f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80029fa:	4613      	mov	r3, r2
 80029fc:	eb42 0303 	adc.w	r3, r2, r3
 8002a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a0a:	f7fd fbe5 	bl	80001d8 <__aeabi_uldivmod>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <UART_SetConfig+0x2d4>)
 8002a16:	fba3 2301 	umull	r2, r3, r3, r1
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2264      	movs	r2, #100	@ 0x64
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	1acb      	subs	r3, r1, r3
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a2a:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <UART_SetConfig+0x2d4>)
 8002a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a38:	441c      	add	r4, r3
 8002a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a54:	415b      	adcs	r3, r3
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	1851      	adds	r1, r2, r1
 8002a60:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a62:	4649      	mov	r1, r9
 8002a64:	414b      	adcs	r3, r1
 8002a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a74:	4659      	mov	r1, fp
 8002a76:	00cb      	lsls	r3, r1, #3
 8002a78:	4651      	mov	r1, sl
 8002a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7e:	4651      	mov	r1, sl
 8002a80:	00ca      	lsls	r2, r1, #3
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	189b      	adds	r3, r3, r2
 8002a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a90:	464b      	mov	r3, r9
 8002a92:	460a      	mov	r2, r1
 8002a94:	eb42 0303 	adc.w	r3, r2, r3
 8002a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002aa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002aac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	18db      	adds	r3, r3, r3
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	eb42 0303 	adc.w	r3, r2, r3
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ac2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ac6:	f7fd fb87 	bl	80001d8 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <UART_SetConfig+0x2d4>)
 8002ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	2164      	movs	r1, #100	@ 0x64
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	3332      	adds	r3, #50	@ 0x32
 8002ae2:	4a08      	ldr	r2, [pc, #32]	@ (8002b04 <UART_SetConfig+0x2d4>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0207 	and.w	r2, r3, #7
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4422      	add	r2, r4
 8002af6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002af8:	e106      	b.n	8002d08 <UART_SetConfig+0x4d8>
 8002afa:	bf00      	nop
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b1a:	4642      	mov	r2, r8
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	1891      	adds	r1, r2, r2
 8002b20:	6239      	str	r1, [r7, #32]
 8002b22:	415b      	adcs	r3, r3
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	1854      	adds	r4, r2, r1
 8002b2e:	4649      	mov	r1, r9
 8002b30:	eb43 0501 	adc.w	r5, r3, r1
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	00eb      	lsls	r3, r5, #3
 8002b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b42:	00e2      	lsls	r2, r4, #3
 8002b44:	4614      	mov	r4, r2
 8002b46:	461d      	mov	r5, r3
 8002b48:	4643      	mov	r3, r8
 8002b4a:	18e3      	adds	r3, r4, r3
 8002b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b50:	464b      	mov	r3, r9
 8002b52:	eb45 0303 	adc.w	r3, r5, r3
 8002b56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b76:	4629      	mov	r1, r5
 8002b78:	008b      	lsls	r3, r1, #2
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b80:	4621      	mov	r1, r4
 8002b82:	008a      	lsls	r2, r1, #2
 8002b84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b88:	f7fd fb26 	bl	80001d8 <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4b60      	ldr	r3, [pc, #384]	@ (8002d14 <UART_SetConfig+0x4e4>)
 8002b92:	fba3 2302 	umull	r2, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	011c      	lsls	r4, r3, #4
 8002b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ba4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ba8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bac:	4642      	mov	r2, r8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	1891      	adds	r1, r2, r2
 8002bb2:	61b9      	str	r1, [r7, #24]
 8002bb4:	415b      	adcs	r3, r3
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	1851      	adds	r1, r2, r1
 8002bc0:	6139      	str	r1, [r7, #16]
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	414b      	adcs	r3, r1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	00cb      	lsls	r3, r1, #3
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bde:	4651      	mov	r1, sl
 8002be0:	00ca      	lsls	r2, r1, #3
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	4642      	mov	r2, r8
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	eb42 0303 	adc.w	r3, r2, r3
 8002bf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c14:	4649      	mov	r1, r9
 8002c16:	008b      	lsls	r3, r1, #2
 8002c18:	4641      	mov	r1, r8
 8002c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c1e:	4641      	mov	r1, r8
 8002c20:	008a      	lsls	r2, r1, #2
 8002c22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c26:	f7fd fad7 	bl	80001d8 <__aeabi_uldivmod>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <UART_SetConfig+0x4e4>)
 8002c32:	fba3 2301 	umull	r2, r3, r3, r1
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2264      	movs	r2, #100	@ 0x64
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	1acb      	subs	r3, r1, r3
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	3332      	adds	r3, #50	@ 0x32
 8002c44:	4a33      	ldr	r2, [pc, #204]	@ (8002d14 <UART_SetConfig+0x4e4>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c50:	441c      	add	r4, r3
 8002c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c56:	2200      	movs	r2, #0
 8002c58:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c60:	4642      	mov	r2, r8
 8002c62:	464b      	mov	r3, r9
 8002c64:	1891      	adds	r1, r2, r2
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	415b      	adcs	r3, r3
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c70:	4641      	mov	r1, r8
 8002c72:	1851      	adds	r1, r2, r1
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	4649      	mov	r1, r9
 8002c78:	414b      	adcs	r3, r1
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c88:	4659      	mov	r1, fp
 8002c8a:	00cb      	lsls	r3, r1, #3
 8002c8c:	4651      	mov	r1, sl
 8002c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c92:	4651      	mov	r1, sl
 8002c94:	00ca      	lsls	r2, r1, #3
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ca2:	464b      	mov	r3, r9
 8002ca4:	460a      	mov	r2, r1
 8002ca6:	eb42 0303 	adc.w	r3, r2, r3
 8002caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	008b      	lsls	r3, r1, #2
 8002cc8:	4641      	mov	r1, r8
 8002cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cce:	4641      	mov	r1, r8
 8002cd0:	008a      	lsls	r2, r1, #2
 8002cd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cd6:	f7fd fa7f 	bl	80001d8 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <UART_SetConfig+0x4e4>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	2164      	movs	r1, #100	@ 0x64
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	3332      	adds	r3, #50	@ 0x32
 8002cf2:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <UART_SetConfig+0x4e4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	f003 020f 	and.w	r2, r3, #15
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4422      	add	r2, r4
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d14:	51eb851f 	.word	0x51eb851f

08002d18 <memset>:
 8002d18:	4402      	add	r2, r0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8002d60 <__libc_init_array+0x38>)
 8002d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8002d64 <__libc_init_array+0x3c>)
 8002d2e:	1b64      	subs	r4, r4, r5
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	2600      	movs	r6, #0
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	4d0b      	ldr	r5, [pc, #44]	@ (8002d68 <__libc_init_array+0x40>)
 8002d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d6c <__libc_init_array+0x44>)
 8002d3c:	f000 f818 	bl	8002d70 <_init>
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	2600      	movs	r6, #0
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002da8 	.word	0x08002da8
 8002d64:	08002da8 	.word	0x08002da8
 8002d68:	08002da8 	.word	0x08002da8
 8002d6c:	08002dac 	.word	0x08002dac

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
