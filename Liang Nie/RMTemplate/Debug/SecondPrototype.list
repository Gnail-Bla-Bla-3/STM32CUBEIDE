
SecondPrototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f588  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800f718  0800f718  00010718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd38  0800fd38  000111f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd38  0800fd38  00010d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd40  0800fd40  000111f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd40  0800fd40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd44  0800fd44  00010d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800fd48  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111f8  2**0
                  CONTENTS
 10 .bss          000054ac  200001f8  200001f8  000111f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200056a4  200056a4  000111f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fafb  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004514  00000000  00000000  00030d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  00035238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001481  00000000  00000000  00036c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ee6  00000000  00000000  00038119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e438  00000000  00000000  0005cfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddb95  00000000  00000000  0007b437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158fcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008298  00000000  00000000  00159010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  001612a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f700 	.word	0x0800f700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800f700 	.word	0x0800f700

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	@ 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	f107 0214 	add.w	r2, r7, #20
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f003 fe97 	bl	8004bde <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8000eb6:	f080 80d9 	bcs.w	800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8000eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ebe:	d807      	bhi.n	8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8000ec0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000ec4:	d066      	beq.n	8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8000ec6:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8000eca:	f000 80a4 	beq.w	8001016 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 8000ece:	e0cd      	b.n	800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000eda:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 8000edc:	4b69      	ldr	r3, [pc, #420]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4a69      	ldr	r2, [pc, #420]	@ (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4b64      	ldr	r3, [pc, #400]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	b210      	sxth	r0, r2
 8000ef8:	4a63      	ldr	r2, [pc, #396]	@ (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000efa:	460b      	mov	r3, r1
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	3308      	adds	r3, #8
 8000f06:	4602      	mov	r2, r0
 8000f08:	801a      	strh	r2, [r3, #0]
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	7b7b      	ldrb	r3, [r7, #13]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	4b5a      	ldr	r3, [pc, #360]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	b290      	uxth	r0, r2
 8000f20:	4a59      	ldr	r2, [pc, #356]	@ (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f22:	460b      	mov	r3, r1
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	801a      	strh	r2, [r3, #0]
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4952      	ldr	r1, [pc, #328]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f3c:	7809      	ldrb	r1, [r1, #0]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b218      	sxth	r0, r3
 8000f42:	4a51      	ldr	r2, [pc, #324]	@ (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f44:	460b      	mov	r3, r1
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	4602      	mov	r2, r0
 8000f52:	801a      	strh	r2, [r3, #0]
 8000f54:	7c3b      	ldrb	r3, [r7, #16]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	7c7b      	ldrb	r3, [r7, #17]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4949      	ldr	r1, [pc, #292]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f60:	7809      	ldrb	r1, [r1, #0]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b218      	sxth	r0, r3
 8000f66:	4a48      	ldr	r2, [pc, #288]	@ (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f68:	460b      	mov	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	3304      	adds	r3, #4
 8000f74:	4602      	mov	r2, r0
 8000f76:	801a      	strh	r2, [r3, #0]
 8000f78:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	7cb8      	ldrb	r0, [r7, #18]
 8000f80:	4a41      	ldr	r2, [pc, #260]	@ (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000f82:	460b      	mov	r3, r1
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3306      	adds	r3, #6
 8000f8e:	4602      	mov	r2, r0
 8000f90:	701a      	strb	r2, [r3, #0]
            break;
 8000f92:	e072      	b.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8000f94:	4b3d      	ldr	r3, [pc, #244]	@ (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	f240 1201 	movw	r2, #257	@ 0x101
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d067      	beq.n	8001070 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 8000fa0:	7b3b      	ldrb	r3, [r7, #12]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	4b33      	ldr	r3, [pc, #204]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fc2:	805a      	strh	r2, [r3, #2]
 8000fc4:	7c3b      	ldrb	r3, [r7, #16]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	7c7b      	ldrb	r3, [r7, #17]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fd4:	809a      	strh	r2, [r3, #4]
 8000fd6:	7cbb      	ldrb	r3, [r7, #18]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fe6:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 8000fe8:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fee:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 8000ff2:	db04      	blt.n	8000ffe <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000ff6:	f44f 6253 	mov.w	r2, #3376	@ 0xd30
 8000ffa:	801a      	strh	r2, [r3, #0]
        		break;
 8000ffc:	e03a      	b.n	8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 8000ffe:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001004:	f640 0254 	movw	r2, #2132	@ 0x854
 8001008:	4293      	cmp	r3, r2
 800100a:	dc33      	bgt.n	8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800100e:	f640 0254 	movw	r2, #2132	@ 0x854
 8001012:	801a      	strh	r2, [r3, #0]
        		break;
 8001014:	e02e      	b.n	8001074 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	f240 1211 	movw	r2, #273	@ 0x111
 800101e:	4293      	cmp	r3, r2
 8001020:	d02a      	beq.n	8001078 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001032:	801a      	strh	r2, [r3, #0]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001044:	805a      	strh	r2, [r3, #2]
 8001046:	7c3b      	ldrb	r3, [r7, #16]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7c7b      	ldrb	r3, [r7, #17]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001056:	809a      	strh	r2, [r3, #4]
 8001058:	7cbb      	ldrb	r3, [r7, #18]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001068:	80da      	strh	r2, [r3, #6]
        	    break;
 800106a:	e006      	b.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 800106c:	bf00      	nop
 800106e:	e004      	b.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001070:	bf00      	nop
 8001072:	e002      	b.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001074:	bf00      	nop
 8001076:	e000      	b.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001078:	bf00      	nop
        }
    }
}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	@ 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000037c 	.word	0x2000037c
 8001088:	2000022c 	.word	0x2000022c
 800108c:	20000018 	.word	0x20000018
 8001090:	2000029c 	.word	0x2000029c
 8001094:	200002a4 	.word	0x200002a4

08001098 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	4604      	mov	r4, r0
 80010a0:	4608      	mov	r0, r1
 80010a2:	4611      	mov	r1, r2
 80010a4:	461a      	mov	r2, r3
 80010a6:	4623      	mov	r3, r4
 80010a8:	80fb      	strh	r3, [r7, #6]
 80010aa:	4603      	mov	r3, r0
 80010ac:	80bb      	strh	r3, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]
 80010b2:	4613      	mov	r3, r2
 80010b4:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	4a20      	ldr	r2, [pc, #128]	@ (800113c <CAN2_cmd_motors+0xa4>)
 80010ba:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <CAN2_cmd_motors+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <CAN2_cmd_motors+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <CAN2_cmd_motors+0xa4>)
 80010ca:	2208      	movs	r2, #8
 80010cc:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 80010ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010d2:	121b      	asrs	r3, r3, #8
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 80010da:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 80010e2:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 80010e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010e8:	121b      	asrs	r3, r3, #8
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 80010f0:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 80010f8:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 80010fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010fe:	121b      	asrs	r3, r3, #8
 8001100:	b21b      	sxth	r3, r3
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 8001106:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 8001108:	883b      	ldrh	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 800110e:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 8001110:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001114:	121b      	asrs	r3, r3, #8
 8001116:	b21b      	sxth	r3, r3
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 800111c:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 800111e:	8c3b      	ldrh	r3, [r7, #32]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 8001124:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <CAN2_cmd_motors+0xa8>)
 800112c:	4903      	ldr	r1, [pc, #12]	@ (800113c <CAN2_cmd_motors+0xa4>)
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <CAN2_cmd_motors+0xac>)
 8001130:	f003 fc7a 	bl	8004a28 <HAL_CAN_AddTxMessage>
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	2000035c 	.word	0x2000035c
 8001140:	20000374 	.word	0x20000374
 8001144:	200006e0 	.word	0x200006e0

08001148 <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	3b01      	subs	r3, #1
 800115e:	491c      	ldr	r1, [pc, #112]	@ (80011d0 <set_M3508_current+0x88>)
 8001160:	88ba      	ldrh	r2, [r7, #4]
 8001162:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b04      	cmp	r3, #4
 800116c:	dc02      	bgt.n	8001174 <set_M3508_current+0x2c>
 800116e:	2b00      	cmp	r3, #0
 8001170:	dc04      	bgt.n	800117c <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 8001172:	e027      	b.n	80011c4 <set_M3508_current+0x7c>
 8001174:	3b05      	subs	r3, #5
	switch(motorID) {
 8001176:	2b03      	cmp	r3, #3
 8001178:	d824      	bhi.n	80011c4 <set_M3508_current+0x7c>
 800117a:	e011      	b.n	80011a0 <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <set_M3508_current+0x88>)
 800117e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <set_M3508_current+0x88>)
 8001184:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <set_M3508_current+0x88>)
 800118a:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <set_M3508_current+0x88>)
 8001190:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	4603      	mov	r3, r0
 8001198:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800119c:	f7ff ff7c 	bl	8001098 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <set_M3508_current+0x88>)
 80011a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <set_M3508_current+0x88>)
 80011a8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <set_M3508_current+0x88>)
 80011ae:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <set_M3508_current+0x88>)
 80011b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4603      	mov	r3, r0
 80011bc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80011c0:	f7ff ff6a 	bl	8001098 <CAN2_cmd_motors>
	        break;
 80011c4:	bf00      	nop
	    }
	}
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000214 	.word	0x20000214

080011d4 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	491a      	ldr	r1, [pc, #104]	@ (8001254 <set_GM6020_voltage+0x80>)
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	dc02      	bgt.n	8001200 <set_GM6020_voltage+0x2c>
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	da04      	bge.n	8001208 <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 80011fe:	e024      	b.n	800124a <set_GM6020_voltage+0x76>
 8001200:	3b09      	subs	r3, #9
	switch(motorID) {
 8001202:	2b02      	cmp	r3, #2
 8001204:	d821      	bhi.n	800124a <set_GM6020_voltage+0x76>
 8001206:	e011      	b.n	800122c <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <set_GM6020_voltage+0x80>)
 800120a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <set_GM6020_voltage+0x80>)
 8001210:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <set_GM6020_voltage+0x80>)
 8001216:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <set_GM6020_voltage+0x80>)
 800121c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	4603      	mov	r3, r0
 8001224:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8001228:	f7ff ff36 	bl	8001098 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <set_GM6020_voltage+0x80>)
 800122e:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <set_GM6020_voltage+0x80>)
 8001234:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <set_GM6020_voltage+0x80>)
 800123a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800123e:	2000      	movs	r0, #0
 8001240:	9000      	str	r0, [sp, #0]
 8001242:	f240 20ff 	movw	r0, #767	@ 0x2ff
 8001246:	f7ff ff27 	bl	8001098 <CAN2_cmd_motors>
	        break;
 800124a:	bf00      	nop
	    }
	}
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000214 	.word	0x20000214

08001258 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001258:	b490      	push	{r4, r7}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	eef0 6a40 	vmov.f32	s13, s0
 8001266:	eeb0 7a60 	vmov.f32	s14, s1
 800126a:	eef0 7a41 	vmov.f32	s15, s2
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	4613      	mov	r3, r2
 8001272:	81bb      	strh	r3, [r7, #12]
 8001274:	edc7 6a00 	vstr	s13, [r7]
 8001278:	ed87 7a01 	vstr	s14, [r7, #4]
 800127c:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	3b01      	subs	r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 800128c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001290:	4a4a      	ldr	r2, [pc, #296]	@ (80013bc <calc_current2RPM_PID+0x164>)
 8001292:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001296:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 800129a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800129e:	4c48      	ldr	r4, [pc, #288]	@ (80013c0 <calc_current2RPM_PID+0x168>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4423      	add	r3, r4
 80012aa:	3302      	adds	r3, #2
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	1ac2      	subs	r2, r0, r3
 80012b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012b6:	440a      	add	r2, r1
 80012b8:	4940      	ldr	r1, [pc, #256]	@ (80013bc <calc_current2RPM_PID+0x164>)
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 80012be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012c2:	4a40      	ldr	r2, [pc, #256]	@ (80013c4 <calc_current2RPM_PID+0x16c>)
 80012c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012c8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80012cc:	483c      	ldr	r0, [pc, #240]	@ (80013c0 <calc_current2RPM_PID+0x168>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4403      	add	r3, r0
 80012d8:	3302      	adds	r3, #2
 80012da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012de:	461a      	mov	r2, r3
 80012e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80012e4:	1a8a      	subs	r2, r1, r2
 80012e6:	4938      	ldr	r1, [pc, #224]	@ (80013c8 <calc_current2RPM_PID+0x170>)
 80012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 80012ec:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80012f0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80012f4:	4832      	ldr	r0, [pc, #200]	@ (80013c0 <calc_current2RPM_PID+0x168>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4403      	add	r3, r0
 8001300:	3302      	adds	r3, #2
 8001302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001306:	461a      	mov	r2, r3
 8001308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800130c:	1a8a      	subs	r2, r1, r2
 800130e:	492f      	ldr	r1, [pc, #188]	@ (80013cc <calc_current2RPM_PID+0x174>)
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001314:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001318:	4929      	ldr	r1, [pc, #164]	@ (80013c0 <calc_current2RPM_PID+0x168>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	440b      	add	r3, r1
 8001324:	3302      	adds	r3, #2
 8001326:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800132e:	4611      	mov	r1, r2
 8001330:	4a24      	ldr	r2, [pc, #144]	@ (80013c4 <calc_current2RPM_PID+0x16c>)
 8001332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001336:	ed97 7a00 	vldr	s14, [r7]
 800133a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800133e:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <calc_current2RPM_PID+0x174>)
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001350:	edd7 6a01 	vldr	s13, [r7, #4]
 8001354:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001358:	4a18      	ldr	r2, [pc, #96]	@ (80013bc <calc_current2RPM_PID+0x164>)
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001372:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001376:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <calc_current2RPM_PID+0x170>)
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001390:	ee17 3a90 	vmov	r3, s15
 8001394:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_current_val > 16384) {return_current_val = 16384;}
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800139c:	dd02      	ble.n	80013a4 <calc_current2RPM_PID+0x14c>
 800139e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013a2:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80013aa:	da01      	bge.n	80013b0 <calc_current2RPM_PID+0x158>
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <calc_current2RPM_PID+0x178>)
 80013ae:	617b      	str	r3, [r7, #20]
	return return_current_val;
 80013b0:	697b      	ldr	r3, [r7, #20]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc90      	pop	{r4, r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000304 	.word	0x20000304
 80013c0:	2000022c 	.word	0x2000022c
 80013c4:	200002ac 	.word	0x200002ac
 80013c8:	200002d8 	.word	0x200002d8
 80013cc:	20000330 	.word	0x20000330
 80013d0:	ffffc000 	.word	0xffffc000

080013d4 <calc_voltage2RPM_PID>:

int32_t calc_voltage2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80013d4:	b490      	push	{r4, r7}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	eef0 6a40 	vmov.f32	s13, s0
 80013e2:	eeb0 7a60 	vmov.f32	s14, s1
 80013e6:	eef0 7a41 	vmov.f32	s15, s2
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	4613      	mov	r3, r2
 80013ee:	81bb      	strh	r3, [r7, #12]
 80013f0:	edc7 6a00 	vstr	s13, [r7]
 80013f4:	ed87 7a01 	vstr	s14, [r7, #4]
 80013f8:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3b01      	subs	r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001408:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800140c:	4a53      	ldr	r2, [pc, #332]	@ (800155c <calc_voltage2RPM_PID+0x188>)
 800140e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001412:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001416:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800141a:	4c51      	ldr	r4, [pc, #324]	@ (8001560 <calc_voltage2RPM_PID+0x18c>)
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4423      	add	r3, r4
 8001426:	3302      	adds	r3, #2
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	1ac2      	subs	r2, r0, r3
 800142e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001432:	440a      	add	r2, r1
 8001434:	4949      	ldr	r1, [pc, #292]	@ (800155c <calc_voltage2RPM_PID+0x188>)
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 800143a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800143e:	4a49      	ldr	r2, [pc, #292]	@ (8001564 <calc_voltage2RPM_PID+0x190>)
 8001440:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001444:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001448:	4845      	ldr	r0, [pc, #276]	@ (8001560 <calc_voltage2RPM_PID+0x18c>)
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4403      	add	r3, r0
 8001454:	3302      	adds	r3, #2
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	461a      	mov	r2, r3
 800145c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001460:	1a8a      	subs	r2, r1, r2
 8001462:	4941      	ldr	r1, [pc, #260]	@ (8001568 <calc_voltage2RPM_PID+0x194>)
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001468:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800146c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001470:	483b      	ldr	r0, [pc, #236]	@ (8001560 <calc_voltage2RPM_PID+0x18c>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4403      	add	r3, r0
 800147c:	3302      	adds	r3, #2
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	461a      	mov	r2, r3
 8001484:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001488:	1a8a      	subs	r2, r1, r2
 800148a:	4938      	ldr	r1, [pc, #224]	@ (800156c <calc_voltage2RPM_PID+0x198>)
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// usart_printf("%d %d\r\n", getMotorRPM(5), 0);
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001490:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001494:	4932      	ldr	r1, [pc, #200]	@ (8001560 <calc_voltage2RPM_PID+0x18c>)
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	440b      	add	r3, r1
 80014a0:	3302      	adds	r3, #2
 80014a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001564 <calc_voltage2RPM_PID+0x190>)
 80014ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (iRPM[ID] >= 3400) {iRPM[ID] = 2600;}
 80014b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014b6:	4a29      	ldr	r2, [pc, #164]	@ (800155c <calc_voltage2RPM_PID+0x188>)
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	f640 5247 	movw	r2, #3399	@ 0xd47
 80014c0:	4293      	cmp	r3, r2
 80014c2:	dd06      	ble.n	80014d2 <calc_voltage2RPM_PID+0xfe>
 80014c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014c8:	4a24      	ldr	r2, [pc, #144]	@ (800155c <calc_voltage2RPM_PID+0x188>)
 80014ca:	f640 2128 	movw	r1, #2600	@ 0xa28
 80014ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 80014d2:	ed97 7a00 	vldr	s14, [r7]
 80014d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014da:	4a24      	ldr	r2, [pc, #144]	@ (800156c <calc_voltage2RPM_PID+0x198>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ec:	edd7 6a01 	vldr	s13, [r7, #4]
 80014f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014f4:	4a19      	ldr	r2, [pc, #100]	@ (800155c <calc_voltage2RPM_PID+0x188>)
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150a:	edd7 6a02 	vldr	s13, [r7, #8]
 800150e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <calc_voltage2RPM_PID+0x194>)
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152c:	ee17 3a90 	vmov	r3, s15
 8001530:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001538:	4293      	cmp	r3, r2
 800153a:	dd02      	ble.n	8001542 <calc_voltage2RPM_PID+0x16e>
 800153c:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001540:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <calc_voltage2RPM_PID+0x19c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	da01      	bge.n	800154e <calc_voltage2RPM_PID+0x17a>
 800154a:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <calc_voltage2RPM_PID+0x19c>)
 800154c:	617b      	str	r3, [r7, #20]

	return return_voltage_val;
 800154e:	697b      	ldr	r3, [r7, #20]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bc90      	pop	{r4, r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000304 	.word	0x20000304
 8001560:	2000022c 	.word	0x2000022c
 8001564:	200002ac 	.word	0x200002ac
 8001568:	200002d8 	.word	0x200002d8
 800156c:	20000330 	.word	0x20000330
 8001570:	ffff9e58 	.word	0xffff9e58

08001574 <setM3508RPM>:
	return return_voltage_val;
}

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	eef0 6a40 	vmov.f32	s13, s0
 8001582:	eeb0 7a60 	vmov.f32	s14, s1
 8001586:	eef0 7a41 	vmov.f32	s15, s2
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	4613      	mov	r3, r2
 800158e:	81bb      	strh	r3, [r7, #12]
 8001590:	edc7 6a00 	vstr	s13, [r7]
 8001594:	ed87 7a01 	vstr	s14, [r7, #4]
 8001598:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 800159c:	edd7 6a00 	vldr	s13, [r7]
 80015a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80015a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b0:	eeb0 0a66 	vmov.f32	s0, s13
 80015b4:	eef0 0a47 	vmov.f32	s1, s14
 80015b8:	eeb0 1a67 	vmov.f32	s2, s15
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe4a 	bl	8001258 <calc_current2RPM_PID>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fdba 	bl	8001148 <set_M3508_current>
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <setGM6020voltageRPM>:

void setGM6020currentRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
}

void setGM6020voltageRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	460a      	mov	r2, r1
 80015e6:	eef0 6a40 	vmov.f32	s13, s0
 80015ea:	eeb0 7a60 	vmov.f32	s14, s1
 80015ee:	eef0 7a41 	vmov.f32	s15, s2
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	4613      	mov	r3, r2
 80015f6:	81bb      	strh	r3, [r7, #12]
 80015f8:	edc7 6a00 	vstr	s13, [r7]
 80015fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8001600:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2RPM_PID(motorID, RPMtarget, preset));
 8001604:	edd7 6a00 	vldr	s13, [r7]
 8001608:	ed97 7a01 	vldr	s14, [r7, #4]
 800160c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001610:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001618:	eeb0 0a66 	vmov.f32	s0, s13
 800161c:	eef0 0a47 	vmov.f32	s1, s14
 8001620:	eeb0 1a67 	vmov.f32	s2, s15
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fed4 	bl	80013d4 <calc_voltage2RPM_PID>
 800162c:	4603      	mov	r3, r0
 800162e:	b21a      	sxth	r2, r3
 8001630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fdcc 	bl	80011d4 <set_GM6020_voltage>
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <getMotorPosition>:

void setGM6020voltagePosition(int8_t motorID, int16_t position, PID_preset_t preset) {
	set_GM6020_voltage(motorID, calc_voltage2Position_PID(motorID, position, preset));
}

uint16_t getMotorPosition(int8_t motorID) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].motor_position;
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	1e5a      	subs	r2, r3, #1
 8001654:	4906      	ldr	r1, [pc, #24]	@ (8001670 <getMotorPosition+0x2c>)
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	440b      	add	r3, r1
 8001660:	881b      	ldrh	r3, [r3, #0]
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000022c 	.word	0x2000022c

08001674 <usart_Init>:
power_heat_data_t power_heat_data;
robot_status_t robot_status;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800167c:	4905      	ldr	r1, [pc, #20]	@ (8001694 <usart_Init+0x20>)
 800167e:	4806      	ldr	r0, [pc, #24]	@ (8001698 <usart_Init+0x24>)
 8001680:	f006 f9ea 	bl	8007a58 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001688:	4904      	ldr	r1, [pc, #16]	@ (800169c <usart_Init+0x28>)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <usart_Init+0x2c>)
 800168c:	f006 f9e4 	bl	8007a58 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000380 	.word	0x20000380
 8001698:	20000838 	.word	0x20000838
 800169c:	20000480 	.word	0x20000480
 80016a0:	200008c0 	.word	0x200008c0

080016a4 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80016a4:	b40f      	push	{r0, r1, r2, r3}
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <usart_printf+0x3c>)
 80016b0:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <usart_printf+0x3c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	480a      	ldr	r0, [pc, #40]	@ (80016e4 <usart_printf+0x40>)
 80016ba:	f00a fe71 	bl	800c3a0 <vsiprintf>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <usart_printf+0x44>)
 80016c4:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <usart_printf+0x44>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4905      	ldr	r1, [pc, #20]	@ (80016e4 <usart_printf+0x40>)
 80016ce:	4807      	ldr	r0, [pc, #28]	@ (80016ec <usart_printf+0x48>)
 80016d0:	f006 f944 	bl	800795c <HAL_UART_Transmit_DMA>
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016dc:	b004      	add	sp, #16
 80016de:	4770      	bx	lr
 80016e0:	200005b0 	.word	0x200005b0
 80016e4:	200005b4 	.word	0x200005b4
 80016e8:	200006b4 	.word	0x200006b4
 80016ec:	20000838 	.word	0x20000838

080016f0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80016f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016f4:	b09f      	sub	sp, #124	@ 0x7c
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 80016fa:	460b      	mov	r3, r1
 80016fc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	if (huart == &huart6) {
 8001700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001702:	4b72      	ldr	r3, [pc, #456]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x1dc>)
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 81a7 	bne.w	8001a58 <HAL_UARTEx_RxEventCallback+0x368>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 800170a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800170e:	4970      	ldr	r1, [pc, #448]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001710:	486e      	ldr	r0, [pc, #440]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x1dc>)
 8001712:	f006 f9a1 	bl	8007a58 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 8001716:	4b6e      	ldr	r3, [pc, #440]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001718:	795b      	ldrb	r3, [r3, #5]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	4b6c      	ldr	r3, [pc, #432]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001720:	799b      	ldrb	r3, [r3, #6]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21b      	sxth	r3, r3
 8001728:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 800172c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8001730:	f240 2302 	movw	r3, #514	@ 0x202
 8001734:	429a      	cmp	r2, r3
 8001736:	f000 8131 	beq.w	800199c <HAL_UARTEx_RxEventCallback+0x2ac>
 800173a:	f240 2302 	movw	r3, #514	@ 0x202
 800173e:	429a      	cmp	r2, r3
 8001740:	f300 8189 	bgt.w	8001a56 <HAL_UARTEx_RxEventCallback+0x366>
 8001744:	2a01      	cmp	r2, #1
 8001746:	d005      	beq.n	8001754 <HAL_UARTEx_RxEventCallback+0x64>
 8001748:	f240 2301 	movw	r3, #513	@ 0x201
 800174c:	429a      	cmp	r2, r3
 800174e:	f000 80c3 	beq.w	80018d8 <HAL_UARTEx_RxEventCallback+0x1e8>
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];

		    }
		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8001752:	e180      	b.n	8001a56 <HAL_UARTEx_RxEventCallback+0x366>
		    	game_status.game_type = RxBuff_2[7];
 8001754:	4b5e      	ldr	r3, [pc, #376]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001756:	79db      	ldrb	r3, [r3, #7]
 8001758:	4a5e      	ldr	r2, [pc, #376]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800175a:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 800175c:	4b5c      	ldr	r3, [pc, #368]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800175e:	7a1b      	ldrb	r3, [r3, #8]
 8001760:	4a5c      	ldr	r2, [pc, #368]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001762:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 8001764:	4b5a      	ldr	r3, [pc, #360]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001766:	7a5b      	ldrb	r3, [r3, #9]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b21a      	sxth	r2, r3
 800176c:	4b58      	ldr	r3, [pc, #352]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800176e:	7a9b      	ldrb	r3, [r3, #10]
 8001770:	b21b      	sxth	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b21b      	sxth	r3, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	4a56      	ldr	r2, [pc, #344]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800177a:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 800177c:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800177e:	7adb      	ldrb	r3, [r3, #11]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2200      	movs	r2, #0
 8001784:	663b      	str	r3, [r7, #96]	@ 0x60
 8001786:	667a      	str	r2, [r7, #100]	@ 0x64
 8001788:	f04f 0000 	mov.w	r0, #0
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001792:	0619      	lsls	r1, r3, #24
 8001794:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 8001796:	4b4e      	ldr	r3, [pc, #312]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001798:	7b1b      	ldrb	r3, [r3, #12]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2200      	movs	r2, #0
 800179e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017a0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 80017ac:	0433      	lsls	r3, r6, #16
 80017ae:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 80017b0:	ea40 0402 	orr.w	r4, r0, r2
 80017b4:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 80017b8:	4b45      	ldr	r3, [pc, #276]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80017ba:	7b5b      	ldrb	r3, [r3, #13]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2200      	movs	r2, #0
 80017c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80017c2:	657a      	str	r2, [r7, #84]	@ 0x54
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80017ce:	020b      	lsls	r3, r1, #8
 80017d0:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 80017d2:	ea44 0802 	orr.w	r8, r4, r2
 80017d6:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 80017da:	4b3d      	ldr	r3, [pc, #244]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80017dc:	7b9b      	ldrb	r3, [r3, #14]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80017f0:	000b      	movs	r3, r1
 80017f2:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 80017f4:	ea48 0102 	orr.w	r1, r8, r2
 80017f8:	6439      	str	r1, [r7, #64]	@ 0x40
 80017fa:	ea49 0303 	orr.w	r3, r9, r3
 80017fe:	647b      	str	r3, [r7, #68]	@ 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 8001800:	4b33      	ldr	r3, [pc, #204]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001802:	7bdb      	ldrb	r3, [r3, #15]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2200      	movs	r2, #0
 8001808:	63bb      	str	r3, [r7, #56]	@ 0x38
 800180a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800180c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001810:	460b      	mov	r3, r1
 8001812:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001816:	460b      	mov	r3, r1
 8001818:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 800181c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001820:	460b      	mov	r3, r1
 8001822:	ea43 030a 	orr.w	r3, r3, sl
 8001826:	633b      	str	r3, [r7, #48]	@ 0x30
 8001828:	4613      	mov	r3, r2
 800182a:	ea43 030b 	orr.w	r3, r3, fp
 800182e:	637b      	str	r3, [r7, #52]	@ 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001832:	7c1b      	ldrb	r3, [r3, #16]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2200      	movs	r2, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800183a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001848:	4629      	mov	r1, r5
 800184a:	040b      	lsls	r3, r1, #16
 800184c:	4621      	mov	r1, r4
 800184e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001852:	4621      	mov	r1, r4
 8001854:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 8001856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800185a:	4621      	mov	r1, r4
 800185c:	4311      	orrs	r1, r2
 800185e:	6239      	str	r1, [r7, #32]
 8001860:	4629      	mov	r1, r5
 8001862:	4319      	orrs	r1, r3
 8001864:	6279      	str	r1, [r7, #36]	@ 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001868:	7c5b      	ldrb	r3, [r3, #17]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2200      	movs	r2, #0
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	61fa      	str	r2, [r7, #28]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800187e:	4629      	mov	r1, r5
 8001880:	020b      	lsls	r3, r1, #8
 8001882:	4621      	mov	r1, r4
 8001884:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001888:	4621      	mov	r1, r4
 800188a:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 800188c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001890:	4621      	mov	r1, r4
 8001892:	4311      	orrs	r1, r2
 8001894:	6139      	str	r1, [r7, #16]
 8001896:	4629      	mov	r1, r5
 8001898:	4319      	orrs	r1, r3
 800189a:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800189e:	7c9b      	ldrb	r3, [r3, #18]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	60fa      	str	r2, [r7, #12]
 80018a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018ac:	4623      	mov	r3, r4
 80018ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b2:	4602      	mov	r2, r0
 80018b4:	4313      	orrs	r3, r2
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	462b      	mov	r3, r5
 80018ba:	460a      	mov	r2, r1
 80018bc:	4313      	orrs	r3, r2
 80018be:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 80018c0:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80018c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80018c6:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 80018ca:	e0c5      	b.n	8001a58 <HAL_UARTEx_RxEventCallback+0x368>
 80018cc:	200008c0 	.word	0x200008c0
 80018d0:	20000480 	.word	0x20000480
 80018d4:	20000580 	.word	0x20000580
		    	robot_status.robot_id = RxBuff_2[7];
 80018d8:	4b62      	ldr	r3, [pc, #392]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80018da:	79da      	ldrb	r2, [r3, #7]
 80018dc:	4b62      	ldr	r3, [pc, #392]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 80018de:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 80018e0:	4b60      	ldr	r3, [pc, #384]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80018e2:	7a1a      	ldrb	r2, [r3, #8]
 80018e4:	4b60      	ldr	r3, [pc, #384]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 80018e6:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 80018e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80018ea:	7a5b      	ldrb	r3, [r3, #9]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80018f2:	7a9b      	ldrb	r3, [r3, #10]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 80018fe:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 8001900:	4b58      	ldr	r3, [pc, #352]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001902:	7adb      	ldrb	r3, [r3, #11]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	b21a      	sxth	r2, r3
 8001908:	4b56      	ldr	r3, [pc, #344]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b54      	ldr	r3, [pc, #336]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 8001916:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 8001918:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 800191a:	7b5b      	ldrb	r3, [r3, #13]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	4b50      	ldr	r3, [pc, #320]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001922:	7b9b      	ldrb	r3, [r3, #14]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21b      	sxth	r3, r3
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 800192e:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8001930:	4b4c      	ldr	r3, [pc, #304]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001932:	7bdb      	ldrb	r3, [r3, #15]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21a      	sxth	r2, r3
 8001938:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21b      	sxth	r3, r3
 8001942:	b29a      	uxth	r2, r3
 8001944:	4b48      	ldr	r3, [pc, #288]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 8001946:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8001948:	4b46      	ldr	r3, [pc, #280]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 800194a:	7c5b      	ldrb	r3, [r3, #17]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21a      	sxth	r2, r3
 8001950:	4b44      	ldr	r3, [pc, #272]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001952:	7c9b      	ldrb	r3, [r3, #18]
 8001954:	b21b      	sxth	r3, r3
 8001956:	4313      	orrs	r3, r2
 8001958:	b21b      	sxth	r3, r3
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b42      	ldr	r3, [pc, #264]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 800195e:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 8001960:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001962:	7cdb      	ldrb	r3, [r3, #19]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	b2d9      	uxtb	r1, r3
 800196a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 800196c:	7b13      	ldrb	r3, [r2, #12]
 800196e:	f361 0300 	bfi	r3, r1, #0, #1
 8001972:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 8001974:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001976:	7d1b      	ldrb	r3, [r3, #20]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	b2d9      	uxtb	r1, r3
 800197e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 8001980:	7b13      	ldrb	r3, [r2, #12]
 8001982:	f361 0341 	bfi	r3, r1, #1, #1
 8001986:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 8001988:	4b36      	ldr	r3, [pc, #216]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 800198a:	7d5b      	ldrb	r3, [r3, #21]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	b2d9      	uxtb	r1, r3
 8001992:	4a35      	ldr	r2, [pc, #212]	@ (8001a68 <HAL_UARTEx_RxEventCallback+0x378>)
 8001994:	7b13      	ldrb	r3, [r2, #12]
 8001996:	f361 0382 	bfi	r3, r1, #2, #1
 800199a:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 800199c:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 800199e:	7a1b      	ldrb	r3, [r3, #8]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019a6:	79db      	ldrb	r3, [r3, #7]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0x37c>)
 80019b2:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 80019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019b6:	7a9b      	ldrb	r3, [r3, #10]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019be:	7a5b      	ldrb	r3, [r3, #9]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0x37c>)
 80019ca:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 80019cc:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019ce:	7b9b      	ldrb	r3, [r3, #14]
 80019d0:	061a      	lsls	r2, r3, #24
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019d4:	7b5b      	ldrb	r3, [r3, #13]
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	431a      	orrs	r2, r3
 80019da:	4b22      	ldr	r3, [pc, #136]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019dc:	7b1b      	ldrb	r3, [r3, #12]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4313      	orrs	r3, r2
 80019e2:	4a20      	ldr	r2, [pc, #128]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019e4:	7ad2      	ldrb	r2, [r2, #11]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0x37c>)
 80019f2:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 80019f8:	7bdb      	ldrb	r3, [r3, #15]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001a00:	7c1b      	ldrb	r3, [r3, #16]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0x37c>)
 8001a0c:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001a10:	7c9b      	ldrb	r3, [r3, #18]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001a18:	7c5b      	ldrb	r3, [r3, #17]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0x37c>)
 8001a24:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 8001a26:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001a28:	7d1b      	ldrb	r3, [r3, #20]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001a30:	7cdb      	ldrb	r3, [r3, #19]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0x37c>)
 8001a3c:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001a40:	7d9b      	ldrb	r3, [r3, #22]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <HAL_UARTEx_RxEventCallback+0x374>)
 8001a48:	7d5b      	ldrb	r3, [r3, #21]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_UARTEx_RxEventCallback+0x37c>)
 8001a54:	81da      	strh	r2, [r3, #14]
		        break;
 8001a56:	bf00      	nop
		    }
		}
	}
}
 8001a58:	bf00      	nop
 8001a5a:	377c      	adds	r7, #124	@ 0x7c
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a62:	bf00      	nop
 8001a64:	20000480 	.word	0x20000480
 8001a68:	200005a0 	.word	0x200005a0
 8001a6c:	20000590 	.word	0x20000590

08001a70 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001a76:	2301      	movs	r3, #1
 8001a78:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480f      	ldr	r0, [pc, #60]	@ (8001adc <can_filter_init+0x6c>)
 8001aa0:	f002 fe9e 	bl	80047e0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001aa4:	480d      	ldr	r0, [pc, #52]	@ (8001adc <can_filter_init+0x6c>)
 8001aa6:	f002 ff7b 	bl	80049a0 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001aaa:	2102      	movs	r1, #2
 8001aac:	480b      	ldr	r0, [pc, #44]	@ (8001adc <can_filter_init+0x6c>)
 8001aae:	f003 f9a8 	bl	8004e02 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001ab2:	230e      	movs	r3, #14
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8001ab6:	230e      	movs	r3, #14
 8001ab8:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <can_filter_init+0x70>)
 8001ac0:	f002 fe8e 	bl	80047e0 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001ac4:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <can_filter_init+0x70>)
 8001ac6:	f002 ff6b 	bl	80049a0 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001aca:	2102      	movs	r1, #2
 8001acc:	4804      	ldr	r0, [pc, #16]	@ (8001ae0 <can_filter_init+0x70>)
 8001ace:	f003 f998 	bl	8004e02 <HAL_CAN_ActivateNotification>
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200006b8 	.word	0x200006b8
 8001ae0:	200006e0 	.word	0x200006e0

08001ae4 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <RC_init+0xac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <RC_init+0xac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b00:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <RC_init+0xac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <RC_init+0xac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0210 	orr.w	r2, r2, #16
 8001b10:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <RC_init+0xb0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <RC_init+0xb0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001b22:	e007      	b.n	8001b34 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001b24:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <RC_init+0xb0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <RC_init+0xb0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001b34:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <RC_init+0xb0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <RC_init+0xb0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <RC_init+0xb4>)
 8001b48:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001b4a:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <RC_init+0xb0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <RC_init+0xb0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <RC_init+0xb0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	88fa      	ldrh	r2, [r7, #6]
 8001b60:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <RC_init+0xb0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <RC_init+0xb0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001b70:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <RC_init+0xb0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <RC_init+0xb0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000087c 	.word	0x2000087c
 8001b94:	200009c4 	.word	0x200009c4
 8001b98:	40004804 	.word	0x40004804

08001b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba0:	f002 fcb0 	bl	8004504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba4:	f000 f846 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba8:	f000 fbda 	bl	8002360 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bac:	f000 fb8a 	bl	80022c4 <MX_DMA_Init>
  MX_CAN1_Init();
 8001bb0:	f000 f8ac 	bl	8001d0c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001bb4:	f000 f8e0 	bl	8001d78 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001bb8:	f000 f914 	bl	8001de4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001bbc:	f000 f9f0 	bl	8001fa0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001bc0:	f000 fb00 	bl	80021c4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001bc4:	f000 fb54 	bl	8002270 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001bc8:	f000 f942 	bl	8001e50 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001bcc:	f000 fa5e 	bl	800208c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001bd0:	f000 fb22 	bl	8002218 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001bd4:	f7ff ff4c 	bl	8001a70 <can_filter_init>
  remote_control_init();
 8001bd8:	f001 fce4 	bl	80035a4 <remote_control_init>
  usart_Init();
 8001bdc:	f7ff fd4a 	bl	8001674 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001be0:	f001 fcee 	bl	80035c0 <get_remote_control_point>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <main+0x7c>)
 8001be8:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bea:	f007 f8b7 	bl	8008d5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8001bee:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <main+0x80>)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <main+0x84>)
 8001bf4:	f007 f8fc 	bl	8008df0 <osThreadNew>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <main+0x88>)
 8001bfc:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <main+0x8c>)
 8001c00:	2100      	movs	r1, #0
 8001c02:	480a      	ldr	r0, [pc, #40]	@ (8001c2c <main+0x90>)
 8001c04:	f007 f8f4 	bl	8008df0 <osThreadNew>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a09      	ldr	r2, [pc, #36]	@ (8001c30 <main+0x94>)
 8001c0c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c0e:	f007 f8c9 	bl	8008da4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c12:	bf00      	nop
 8001c14:	e7fd      	b.n	8001c12 <main+0x76>
 8001c16:	bf00      	nop
 8001c18:	20000aec 	.word	0x20000aec
 8001c1c:	0800f784 	.word	0x0800f784
 8001c20:	080025c1 	.word	0x080025c1
 8001c24:	20000ae4 	.word	0x20000ae4
 8001c28:	0800f7a8 	.word	0x0800f7a8
 8001c2c:	08002611 	.word	0x08002611
 8001c30:	20000ae8 	.word	0x20000ae8

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	@ 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2230      	movs	r2, #48	@ 0x30
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00a fbb6 	bl	800c3b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <SystemClock_Config+0xd0>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <SystemClock_Config+0xd0>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <SystemClock_Config+0xd0>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <SystemClock_Config+0xd4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <SystemClock_Config+0xd4>)
 8001c7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <SystemClock_Config+0xd4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ca8:	23a8      	movs	r3, #168	@ 0xa8
 8001caa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f9c1 	bl	8006040 <HAL_RCC_OscConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cc4:	f001 fc68 	bl	8003598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc8:	230f      	movs	r3, #15
 8001cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cd4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fc22 	bl	8006530 <HAL_RCC_ClockConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cf2:	f001 fc51 	bl	8003598 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001cf6:	f004 fd01 	bl	80066fc <HAL_RCC_EnableCSS>
}
 8001cfa:	bf00      	nop
 8001cfc:	3750      	adds	r7, #80	@ 0x50
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	@ (8001d74 <MX_CAN1_Init+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001d16:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d18:	2203      	movs	r2, #3
 8001d1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d2a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001d2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d32:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d36:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d38:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <MX_CAN1_Init+0x64>)
 8001d5e:	f002 fc43 	bl	80045e8 <HAL_CAN_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d68:	f001 fc16 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200006b8 	.word	0x200006b8
 8001d74:	40006400 	.word	0x40006400

08001d78 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001d7e:	4a18      	ldr	r2, [pc, #96]	@ (8001de0 <MX_CAN2_Init+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001d82:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001d84:	2203      	movs	r2, #3
 8001d86:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001d88:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001d96:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001d9a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001d9e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001da2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	@ (8001ddc <MX_CAN2_Init+0x64>)
 8001dca:	f002 fc0d 	bl	80045e8 <HAL_CAN_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001dd4:	f001 fbe0 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200006e0 	.word	0x200006e0
 8001de0:	40006800 	.word	0x40006800

08001de4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001de8:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001dea:	4a18      	ldr	r2, [pc, #96]	@ (8001e4c <MX_SPI1_Init+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001df0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001df6:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e30:	220a      	movs	r2, #10
 8001e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <MX_SPI1_Init+0x64>)
 8001e36:	f004 fd82 	bl	800693e <HAL_SPI_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e40:	f001 fbaa 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000708 	.word	0x20000708
 8001e4c:	40013000 	.word	0x40013000

08001e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b092      	sub	sp, #72	@ 0x48
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2220      	movs	r2, #32
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00a fa9a 	bl	800c3b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e80:	4b45      	ldr	r3, [pc, #276]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001e82:	4a46      	ldr	r2, [pc, #280]	@ (8001f9c <MX_TIM1_Init+0x14c>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001e88:	f240 124f 	movw	r2, #335	@ 0x14f
 8001e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	4b42      	ldr	r3, [pc, #264]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001e94:	4b40      	ldr	r3, [pc, #256]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001e96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eae:	483a      	ldr	r0, [pc, #232]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001eb0:	f004 fe86 	bl	8006bc0 <HAL_TIM_PWM_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001eba:	f001 fb6d 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ec6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4832      	ldr	r0, [pc, #200]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001ece:	f005 fc29 	bl	8007724 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001ed8:	f001 fb5e 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001edc:	2360      	movs	r3, #96	@ 0x60
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efc:	2200      	movs	r2, #0
 8001efe:	4619      	mov	r1, r3
 8001f00:	4825      	ldr	r0, [pc, #148]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001f02:	f004 ff75 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001f0c:	f001 fb44 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f14:	2204      	movs	r2, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	481f      	ldr	r0, [pc, #124]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001f1a:	f004 ff69 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001f24:	f001 fb38 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4819      	ldr	r0, [pc, #100]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001f32:	f004 ff5d 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001f3c:	f001 fb2c 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f44:	220c      	movs	r2, #12
 8001f46:	4619      	mov	r1, r3
 8001f48:	4813      	ldr	r0, [pc, #76]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001f4a:	f004 ff51 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001f54:	f001 fb20 	bl	8003598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001f7c:	f005 fc4e 	bl	800781c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001f86:	f001 fb07 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f8a:	4803      	ldr	r0, [pc, #12]	@ (8001f98 <MX_TIM1_Init+0x148>)
 8001f8c:	f001 fe94 	bl	8003cb8 <HAL_TIM_MspPostInit>

}
 8001f90:	bf00      	nop
 8001f92:	3748      	adds	r7, #72	@ 0x48
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000760 	.word	0x20000760
 8001f9c:	40010000 	.word	0x40010000

08001fa0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08e      	sub	sp, #56	@ 0x38
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	f107 0320 	add.w	r3, r7, #32
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <MX_TIM4_Init+0xe8>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8001fd8:	2253      	movs	r2, #83	@ 0x53
 8001fda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b29      	ldr	r3, [pc, #164]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8001fe2:	4b28      	ldr	r3, [pc, #160]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8001fe4:	22f9      	movs	r2, #249	@ 0xf9
 8001fe6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fee:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ff4:	4823      	ldr	r0, [pc, #140]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8001ff6:	f004 fd2b 	bl	8006a50 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002000:	f001 faca 	bl	8003598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002008:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8002012:	f004 ffaf 	bl	8006f74 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800201c:	f001 fabc 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002020:	4818      	ldr	r0, [pc, #96]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8002022:	f004 fdcd 	bl	8006bc0 <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800202c:	f001 fab4 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	4619      	mov	r1, r3
 800203e:	4811      	ldr	r0, [pc, #68]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8002040:	f005 fb70 	bl	8007724 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800204a:	f001 faa5 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	@ 0x60
 8002050:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2208      	movs	r2, #8
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8002066:	f004 fec3 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002070:	f001 fa92 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002074:	4803      	ldr	r0, [pc, #12]	@ (8002084 <MX_TIM4_Init+0xe4>)
 8002076:	f001 fe1f 	bl	8003cb8 <HAL_TIM_MspPostInit>

}
 800207a:	bf00      	nop
 800207c:	3738      	adds	r7, #56	@ 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200007a8 	.word	0x200007a8
 8002088:	40000800 	.word	0x40000800

0800208c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b092      	sub	sp, #72	@ 0x48
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002092:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2220      	movs	r2, #32
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f00a f97c 	bl	800c3b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020bc:	4b3f      	ldr	r3, [pc, #252]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020be:	4a40      	ldr	r2, [pc, #256]	@ (80021c0 <MX_TIM8_Init+0x134>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80020c2:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020c4:	2253      	movs	r2, #83	@ 0x53
 80020c6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b3c      	ldr	r3, [pc, #240]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80020ce:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020d0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80020d4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020dc:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020e4:	2280      	movs	r2, #128	@ 0x80
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80020e8:	4834      	ldr	r0, [pc, #208]	@ (80021bc <MX_TIM8_Init+0x130>)
 80020ea:	f004 fd69 	bl	8006bc0 <HAL_TIM_PWM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80020f4:	f001 fa50 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002100:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002104:	4619      	mov	r1, r3
 8002106:	482d      	ldr	r0, [pc, #180]	@ (80021bc <MX_TIM8_Init+0x130>)
 8002108:	f005 fb0c 	bl	8007724 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002112:	f001 fa41 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002116:	2360      	movs	r3, #96	@ 0x60
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002122:	2300      	movs	r3, #0
 8002124:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	4820      	ldr	r0, [pc, #128]	@ (80021bc <MX_TIM8_Init+0x130>)
 800213c:	f004 fe58 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002146:	f001 fa27 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800214e:	2204      	movs	r2, #4
 8002150:	4619      	mov	r1, r3
 8002152:	481a      	ldr	r0, [pc, #104]	@ (80021bc <MX_TIM8_Init+0x130>)
 8002154:	f004 fe4c 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800215e:	f001 fa1b 	bl	8003598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002166:	2208      	movs	r2, #8
 8002168:	4619      	mov	r1, r3
 800216a:	4814      	ldr	r0, [pc, #80]	@ (80021bc <MX_TIM8_Init+0x130>)
 800216c:	f004 fe40 	bl	8006df0 <HAL_TIM_PWM_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002176:	f001 fa0f 	bl	8003598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800218e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002192:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4619      	mov	r1, r3
 800219c:	4807      	ldr	r0, [pc, #28]	@ (80021bc <MX_TIM8_Init+0x130>)
 800219e:	f005 fb3d 	bl	800781c <HAL_TIMEx_ConfigBreakDeadTime>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80021a8:	f001 f9f6 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80021ac:	4803      	ldr	r0, [pc, #12]	@ (80021bc <MX_TIM8_Init+0x130>)
 80021ae:	f001 fd83 	bl	8003cb8 <HAL_TIM_MspPostInit>

}
 80021b2:	bf00      	nop
 80021b4:	3748      	adds	r7, #72	@ 0x48
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200007f0 	.word	0x200007f0
 80021c0:	40010400 	.word	0x40010400

080021c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <MX_USART1_UART_Init+0x50>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <MX_USART1_UART_Init+0x4c>)
 80021fc:	f005 fb60 	bl	80078c0 <HAL_UART_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002206:	f001 f9c7 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000838 	.word	0x20000838
 8002214:	40011000 	.word	0x40011000

08002218 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 800221e:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <MX_USART3_UART_Init+0x50>)
 8002220:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 8002224:	4a11      	ldr	r2, [pc, #68]	@ (800226c <MX_USART3_UART_Init+0x54>)
 8002226:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 8002236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 800223e:	220c      	movs	r2, #12
 8002240:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	@ (8002264 <MX_USART3_UART_Init+0x4c>)
 8002250:	f005 fb36 	bl	80078c0 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800225a:	f001 f99d 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000087c 	.word	0x2000087c
 8002268:	40004800 	.word	0x40004800
 800226c:	000186a0 	.word	0x000186a0

08002270 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 8002276:	4a12      	ldr	r2, [pc, #72]	@ (80022c0 <MX_USART6_UART_Init+0x50>)
 8002278:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 800227c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002280:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	@ (80022bc <MX_USART6_UART_Init+0x4c>)
 80022a8:	f005 fb0a 	bl	80078c0 <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80022b2:	f001 f971 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200008c0 	.word	0x200008c0
 80022c0:	40011400 	.word	0x40011400

080022c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <MX_DMA_Init+0x98>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a22      	ldr	r2, [pc, #136]	@ (800235c <MX_DMA_Init+0x98>)
 80022d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b20      	ldr	r3, [pc, #128]	@ (800235c <MX_DMA_Init+0x98>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <MX_DMA_Init+0x98>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4a1b      	ldr	r2, [pc, #108]	@ (800235c <MX_DMA_Init+0x98>)
 80022f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4b19      	ldr	r3, [pc, #100]	@ (800235c <MX_DMA_Init+0x98>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2105      	movs	r1, #5
 8002306:	200c      	movs	r0, #12
 8002308:	f003 f8ab 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800230c:	200c      	movs	r0, #12
 800230e:	f003 f8c4 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2105      	movs	r1, #5
 8002316:	2039      	movs	r0, #57	@ 0x39
 8002318:	f003 f8a3 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800231c:	2039      	movs	r0, #57	@ 0x39
 800231e:	f003 f8bc 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2105      	movs	r1, #5
 8002326:	203a      	movs	r0, #58	@ 0x3a
 8002328:	f003 f89b 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800232c:	203a      	movs	r0, #58	@ 0x3a
 800232e:	f003 f8b4 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2105      	movs	r1, #5
 8002336:	2045      	movs	r0, #69	@ 0x45
 8002338:	f003 f893 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800233c:	2045      	movs	r0, #69	@ 0x45
 800233e:	f003 f8ac 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2105      	movs	r1, #5
 8002346:	2046      	movs	r0, #70	@ 0x46
 8002348:	f003 f88b 	bl	8005462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800234c:	2046      	movs	r0, #70	@ 0x46
 800234e:	f003 f8a4 	bl	800549a <HAL_NVIC_EnableIRQ>

}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800

08002360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	@ 0x38
 8002364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	4b4b      	ldr	r3, [pc, #300]	@ (80024a8 <MX_GPIO_Init+0x148>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a4a      	ldr	r2, [pc, #296]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b48      	ldr	r3, [pc, #288]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	623b      	str	r3, [r7, #32]
 8002390:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a43      	ldr	r2, [pc, #268]	@ (80024a8 <MX_GPIO_Init+0x148>)
 800239c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a3c      	ldr	r2, [pc, #240]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b3a      	ldr	r3, [pc, #232]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	4b36      	ldr	r3, [pc, #216]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a35      	ldr	r2, [pc, #212]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a2e      	ldr	r2, [pc, #184]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <MX_GPIO_Init+0x148>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b28      	ldr	r3, [pc, #160]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a27      	ldr	r2, [pc, #156]	@ (80024a8 <MX_GPIO_Init+0x148>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a20      	ldr	r2, [pc, #128]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <MX_GPIO_Init+0x148>)
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <MX_GPIO_Init+0x148>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800245c:	4813      	ldr	r0, [pc, #76]	@ (80024ac <MX_GPIO_Init+0x14c>)
 800245e:	f003 fdd5 	bl	800600c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002462:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	480c      	ldr	r0, [pc, #48]	@ (80024ac <MX_GPIO_Init+0x14c>)
 800247c:	f003 fc2a 	bl	8005cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002480:	2330      	movs	r3, #48	@ 0x30
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8002490:	230f      	movs	r3, #15
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002498:	4619      	mov	r1, r3
 800249a:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <MX_GPIO_Init+0x150>)
 800249c:	f003 fc1a 	bl	8005cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024a0:	bf00      	nop
 80024a2:	3738      	adds	r7, #56	@ 0x38
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40021c00 	.word	0x40021c00
 80024b0:	40020800 	.word	0x40020800

080024b4 <positionPIDByMe>:

/* USER CODE BEGIN 4 */
int16_t positionPIDByMe(int8_t *isNegativeRegion1, int8_t *previousRegion1, int16_t DifferenceBetweenCurrentAndWannabePosition, int16_t *sumI1, float kPu, float kIu, float kDu) {
 80024b4:	b480      	push	{r7}
 80024b6:	b08b      	sub	sp, #44	@ 0x2c
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	61f8      	str	r0, [r7, #28]
 80024bc:	61b9      	str	r1, [r7, #24]
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	ed87 0a03 	vstr	s0, [r7, #12]
 80024c4:	edc7 0a02 	vstr	s1, [r7, #8]
 80024c8:	ed87 1a01 	vstr	s2, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	82fb      	strh	r3, [r7, #22]
	if (DifferenceBetweenCurrentAndWannabePosition >= 0) {
 80024d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db03      	blt.n	80024e0 <positionPIDByMe+0x2c>
		*isNegativeRegion1 = -1;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	22ff      	movs	r2, #255	@ 0xff
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e002      	b.n	80024e6 <positionPIDByMe+0x32>
	} else {
		*isNegativeRegion1 = 1;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
	}
	if (*isNegativeRegion1 != *previousRegion1) {
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f993 2000 	ldrsb.w	r2, [r3]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	f993 3000 	ldrsb.w	r3, [r3]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d002      	beq.n	80024fc <positionPIDByMe+0x48>
		*sumI1 = 0;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2200      	movs	r2, #0
 80024fa:	801a      	strh	r2, [r3, #0]
	}
	*previousRegion1 = *isNegativeRegion1;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f993 2000 	ldrsb.w	r2, [r3]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	701a      	strb	r2, [r3, #0]
	*sumI1 += (int)((float)(DifferenceBetweenCurrentAndWannabePosition)*0.005f);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250c:	b29a      	uxth	r2, r3
 800250e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80025b8 <positionPIDByMe+0x104>
 800251e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002526:	ee17 3a90 	vmov	r3, s15
 800252a:	b29b      	uxth	r3, r3
 800252c:	4413      	add	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	b21a      	sxth	r2, r3
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	801a      	strh	r2, [r3, #0]
	int16_t PositionToGo = (int)(kPu*(float)(DifferenceBetweenCurrentAndWannabePosition));
 8002536:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002542:	edd7 7a03 	vldr	s15, [r7, #12]
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800254e:	ee17 3a90 	vmov	r3, s15
 8002552:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t IntegralToGo = (int)(kIu*((float)(*sumI1)));
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002562:	edd7 7a02 	vldr	s15, [r7, #8]
 8002566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t DerivativeToGo = (int)((kDu)*((float)(DifferenceBetweenCurrentAndWannabePosition))*(float)200);
 8002574:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002580:	edd7 7a01 	vldr	s15, [r7, #4]
 8002584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002588:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80025bc <positionPIDByMe+0x108>
 800258c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	847b      	strh	r3, [r7, #34]	@ 0x22
	return PositionToGo+IntegralToGo+DerivativeToGo;
 800259a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800259c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800259e:	4413      	add	r3, r2
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80025a4:	4413      	add	r3, r2
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	b21b      	sxth	r3, r3
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	372c      	adds	r7, #44	@ 0x2c
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	3ba3d70a 	.word	0x3ba3d70a
 80025bc:	43480000 	.word	0x43480000

080025c0 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 80025c8:	2201      	movs	r2, #1
 80025ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025ce:	480f      	ldr	r0, [pc, #60]	@ (800260c <TaskMain+0x4c>)
 80025d0:	f003 fd1c 	bl	800600c <HAL_GPIO_WritePin>
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	osDelay(150);
 80025d4:	2096      	movs	r0, #150	@ 0x96
 80025d6:	f006 fc9d 	bl	8008f14 <osDelay>
	// __HAL_TIM_PRESCALER(&htim4, 0);
	osDelay(150);
 80025da:	2096      	movs	r0, #150	@ 0x96
 80025dc:	f006 fc9a 	bl	8008f14 <osDelay>
	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);

	for(;;) {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025e6:	4809      	ldr	r0, [pc, #36]	@ (800260c <TaskMain+0x4c>)
 80025e8:	f003 fd10 	bl	800600c <HAL_GPIO_WritePin>
		//set_motor_voltage(5, 4000);
		osDelay(500);
 80025ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025f0:	f006 fc90 	bl	8008f14 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 80025f4:	2201      	movs	r2, #1
 80025f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025fa:	4804      	ldr	r0, [pc, #16]	@ (800260c <TaskMain+0x4c>)
 80025fc:	f003 fd06 	bl	800600c <HAL_GPIO_WritePin>
		//set_motor_voltage(5, -4000);
		osDelay(500);
 8002600:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002604:	f006 fc86 	bl	8008f14 <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8002608:	bf00      	nop
 800260a:	e7e9      	b.n	80025e0 <TaskMain+0x20>
 800260c:	40021c00 	.word	0x40021c00

08002610 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8002610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002614:	b0c0      	sub	sp, #256	@ 0x100
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 800261a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
    int16_t rcPitch = 0;                                   // range: 3376 ~ 2132
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    //int16_t targetRPM[4] = {0,0,0,0};
  /* Infinite loop */

    // Test Code
    HAL_TIM_Base_Start(&htim1);
 800262a:	48d4      	ldr	r0, [pc, #848]	@ (800297c <TaskChassis+0x36c>)
 800262c:	f004 fa60 	bl	8006af0 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim4);
 8002630:	48d3      	ldr	r0, [pc, #844]	@ (8002980 <TaskChassis+0x370>)
 8002632:	f004 fa5d 	bl	8006af0 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002636:	2100      	movs	r1, #0
 8002638:	48d0      	ldr	r0, [pc, #832]	@ (800297c <TaskChassis+0x36c>)
 800263a:	f004 fb11 	bl	8006c60 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800263e:	2104      	movs	r1, #4
 8002640:	48ce      	ldr	r0, [pc, #824]	@ (800297c <TaskChassis+0x36c>)
 8002642:	f004 fb0d 	bl	8006c60 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002646:	2108      	movs	r1, #8
 8002648:	48cd      	ldr	r0, [pc, #820]	@ (8002980 <TaskChassis+0x370>)
 800264a:	f004 fb09 	bl	8006c60 <HAL_TIM_PWM_Start>
    int8_t motorOn = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    int8_t switched = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
    int8_t shot1Round = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
    //int8_t RNC = 0;
    int16_t sumI1 =0;
 8002660:	2300      	movs	r3, #0
 8002662:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    int16_t sumI2 =0;
 8002664:	2300      	movs	r3, #0
 8002666:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    int16_t sumI3 =0;
 8002668:	2300      	movs	r3, #0
 800266a:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
    int16_t sumI4 =0;
 800266e:	2300      	movs	r3, #0
 8002670:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
    int8_t isNegativeRegion1 = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    int8_t isNegativeRegion2 = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    int8_t isNegativeRegion3 = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
    int8_t isNegativeRegion4 = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    int8_t previousRegion1 = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    int8_t previousRegion2 = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    int8_t previousRegion3 = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
    int8_t previousRegion4 = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
    int16_t shooterMotor = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    // int16_t pR = 0;
    //int8_t counter = 0;
    uint16_t testmotor = 6161;
 80026aa:	f641 0311 	movw	r3, #6161	@ 0x1811
 80026ae:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    uint16_t pivoter = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    double angle = 0;
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
    int16_t xJoystickDirection = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    int16_t yJoystickDirection = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
    int16_t rotationOfChassis = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
    // Total Rotation is 1.25 times for 90degrees therefore motor has to rotate
    // PID onto this (This is the hypothetical orientation)
    int16_t chassisOrientation = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
    int16_t chassisPID = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
    int16_t rcVal2 = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde

    int16_t randomOrientations[24] = {-380, -202, 462, -114, 240, -210, 150, 170, 248, 106, 118, 538, -260, -288, -120, 86, -264, 452, -592, 390, -410, 414, 54, -542};
 80026e8:	4ba6      	ldr	r3, [pc, #664]	@ (8002984 <TaskChassis+0x374>)
 80026ea:	f107 0408 	add.w	r4, r7, #8
 80026ee:	461d      	mov	r5, r3
 80026f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int16_t startingVal = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    int8_t started = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    uint8_t increment = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    int16_t instancesCounter = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

    int16_t previousVal = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
    int32_t rotationalVal = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    int16_t revolutions = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    int8_t resetPerStart = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    int32_t rotationTarget = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    int32_t posForGunMotor = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int8_t burst = 3;
 800273c:	2303      	movs	r3, #3
 800273e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

    int8_t customFiringModeSwitcher = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
    int8_t startedChecking = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
    int8_t switchedDown = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
    int8_t finalTHing = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    int16_t counterForSwitching = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0

    int16_t buzzLengthCounter = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    int8_t beepingInProgress = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    int8_t beeped = 1;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd

    for(;;) {
	    for (int i = 0; i < 4; i++) {
 8002772:	2300      	movs	r3, #0
 8002774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002778:	e020      	b.n	80027bc <TaskChassis+0x1ac>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 800277a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800277e:	b25b      	sxtb	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f8d3 	bl	800392c <getRCchannel>
 8002786:	4603      	mov	r3, r0
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002790:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8002988 <TaskChassis+0x378>
 8002794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 3a90 	vmov	r3, s15
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027ac:	443b      	add	r3, r7
 80027ae:	f823 2cc0 	strh.w	r2, [r3, #-192]
	    for (int i = 0; i < 4; i++) {
 80027b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027b6:	3301      	adds	r3, #1
 80027b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	ddda      	ble.n	800277a <TaskChassis+0x16a>
	    }
	    rcPitch = getRCchannel(1) * 0.94f + 2754;
 80027c4:	2001      	movs	r0, #1
 80027c6:	f001 f8b1 	bl	800392c <getRCchannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	ee07 3a90 	vmov	s15, r3
 80027d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d4:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 800298c <TaskChassis+0x37c>
 80027d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027dc:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002990 <TaskChassis+0x380>
 80027e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e8:	ee17 3a90 	vmov	r3, s15
 80027ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
	    int16_t leftDial = getRCchannel(4);
 80027f0:	2004      	movs	r0, #4
 80027f2:	f001 f89b 	bl	800392c <getRCchannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

		int8_t chassisTurning = getRCswitch(1);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f001 f8a9 	bl	8003954 <getRCswitch>
 8002802:	4603      	mov	r3, r0
 8002804:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

		float funnyKP = 0.022;
 8002808:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <TaskChassis+0x384>)
 800280a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		float funnyKI = -0.02;
 800280e:	4b62      	ldr	r3, [pc, #392]	@ (8002998 <TaskChassis+0x388>)
 8002810:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		float funnyKD = 0.00005;
 8002814:	4b61      	ldr	r3, [pc, #388]	@ (800299c <TaskChassis+0x38c>)
 8002816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		float rotationScalar = -540; //-540
 800281a:	4b61      	ldr	r3, [pc, #388]	@ (80029a0 <TaskChassis+0x390>)
 800281c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

		if (counterForSwitching > 200) {
 8002820:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 8002824:	2bc8      	cmp	r3, #200	@ 0xc8
 8002826:	dd0b      	ble.n	8002840 <TaskChassis+0x230>
			startedChecking = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
			switchedDown = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
			finalTHing = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
			counterForSwitching = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
		}

		if (startedChecking == 1) {
 8002840:	f997 30c5 	ldrsb.w	r3, [r7, #197]	@ 0xc5
 8002844:	2b01      	cmp	r3, #1
 8002846:	d106      	bne.n	8002856 <TaskChassis+0x246>
			counterForSwitching++;
 8002848:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 800284c:	b29b      	uxth	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
		}

		int8_t movementUpOrDown = 5;
 8002856:	2305      	movs	r3, #5
 8002858:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		if (increment == 18) {
 800285c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002860:	2b12      	cmp	r3, #18
 8002862:	d102      	bne.n	800286a <TaskChassis+0x25a>
			increment = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
		}

		if (instancesCounter > 100) {
 800286a:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 800286e:	2b64      	cmp	r3, #100	@ 0x64
 8002870:	dd07      	ble.n	8002882 <TaskChassis+0x272>
			increment++;
 8002872:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002876:	3301      	adds	r3, #1
 8002878:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
			instancesCounter = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
		}

		if (chassisTurning == 1 && startedChecking == 0) {
 8002882:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8002886:	2b01      	cmp	r3, #1
 8002888:	d109      	bne.n	800289e <TaskChassis+0x28e>
 800288a:	f997 30c5 	ldrsb.w	r3, [r7, #197]	@ 0xc5
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <TaskChassis+0x28e>
			counterForSwitching = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
			startedChecking = 1;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5

		}
		if (chassisTurning == 3 && startedChecking == 1) {
 800289e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d106      	bne.n	80028b4 <TaskChassis+0x2a4>
 80028a6:	f997 30c5 	ldrsb.w	r3, [r7, #197]	@ 0xc5
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <TaskChassis+0x2a4>
			switchedDown = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
		}
		if (chassisTurning == 1 && startedChecking == 1 && switchedDown == 1) {
 80028b4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d10a      	bne.n	80028d2 <TaskChassis+0x2c2>
 80028bc:	f997 30c5 	ldrsb.w	r3, [r7, #197]	@ 0xc5
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <TaskChassis+0x2c2>
 80028c4:	f997 30c4 	ldrsb.w	r3, [r7, #196]	@ 0xc4
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d102      	bne.n	80028d2 <TaskChassis+0x2c2>
			finalTHing = 1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
		}

		if (chassisTurning == 3 && startedChecking == 1 && switchedDown == 1 && finalTHing == 1 && counterForSwitching < 200) {
 80028d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d128      	bne.n	800292c <TaskChassis+0x31c>
 80028da:	f997 30c5 	ldrsb.w	r3, [r7, #197]	@ 0xc5
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d124      	bne.n	800292c <TaskChassis+0x31c>
 80028e2:	f997 30c4 	ldrsb.w	r3, [r7, #196]	@ 0xc4
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d120      	bne.n	800292c <TaskChassis+0x31c>
 80028ea:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d11c      	bne.n	800292c <TaskChassis+0x31c>
 80028f2:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 80028f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80028f8:	dc18      	bgt.n	800292c <TaskChassis+0x31c>
			switchedDown = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
			startedChecking = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 30c5 	strb.w	r3, [r7, #197]	@ 0xc5
			counterForSwitching = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
			finalTHing = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
			customFiringModeSwitcher++;
 8002912:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	3301      	adds	r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
			beeped = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
			buzzLengthCounter = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

		}
		if (customFiringModeSwitcher > 2) {
 800292c:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 8002930:	2b02      	cmp	r3, #2
 8002932:	dd02      	ble.n	800293a <TaskChassis+0x32a>
			customFiringModeSwitcher = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
		}


		// usart_printf("$%d %d %d %d\r\n;",customFiringModeSwitcher, startedChecking, switchedDown, counterForSwitching);

		if (beeped == 0) {
 800293a:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80b6 	bne.w	8002ab0 <TaskChassis+0x4a0>
			switch (customFiringModeSwitcher) {
 8002944:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 8002948:	2b02      	cmp	r3, #2
 800294a:	d06e      	beq.n	8002a2a <TaskChassis+0x41a>
 800294c:	2b02      	cmp	r3, #2
 800294e:	f300 80af 	bgt.w	8002ab0 <TaskChassis+0x4a0>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <TaskChassis+0x34c>
 8002956:	2b01      	cmp	r3, #1
 8002958:	d03f      	beq.n	80029da <TaskChassis+0x3ca>
 800295a:	e0a9      	b.n	8002ab0 <TaskChassis+0x4a0>
			case 0:
				if ((buzzLengthCounter == 0)) {
 800295c:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002960:	2b00      	cmp	r3, #0
 8002962:	d121      	bne.n	80029a8 <TaskChassis+0x398>
					htim4.Instance->CCR3=150;
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <TaskChassis+0x370>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2296      	movs	r2, #150	@ 0x96
 800296a:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 800296c:	2201      	movs	r2, #1
 800296e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002972:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <TaskChassis+0x394>)
 8002974:	f003 fb4a 	bl	800600c <HAL_GPIO_WritePin>
 8002978:	e027      	b.n	80029ca <TaskChassis+0x3ba>
 800297a:	bf00      	nop
 800297c:	20000760 	.word	0x20000760
 8002980:	200007a8 	.word	0x200007a8
 8002984:	0800f73c 	.word	0x0800f73c
 8002988:	415a51ec 	.word	0x415a51ec
 800298c:	3f70a3d7 	.word	0x3f70a3d7
 8002990:	452c2000 	.word	0x452c2000
 8002994:	3cb43958 	.word	0x3cb43958
 8002998:	bca3d70a 	.word	0xbca3d70a
 800299c:	3851b717 	.word	0x3851b717
 80029a0:	c4070000 	.word	0xc4070000
 80029a4:	40021c00 	.word	0x40021c00
				}
				else if (buzzLengthCounter >=60) {
 80029a8:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 80029ac:	2b3b      	cmp	r3, #59	@ 0x3b
 80029ae:	dd0c      	ble.n	80029ca <TaskChassis+0x3ba>
					beeped = 1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
					htim4.Instance->CCR3=0;
 80029b6:	4ba2      	ldr	r3, [pc, #648]	@ (8002c40 <TaskChassis+0x630>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029c4:	489f      	ldr	r0, [pc, #636]	@ (8002c44 <TaskChassis+0x634>)
 80029c6:	f003 fb21 	bl	800600c <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 80029ca:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
				break;
 80029d8:	e06a      	b.n	8002ab0 <TaskChassis+0x4a0>
			case 1:
				if (buzzLengthCounter == 0) {
 80029da:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <TaskChassis+0x3e8>
					htim4.Instance->CCR3=150;
 80029e2:	4b97      	ldr	r3, [pc, #604]	@ (8002c40 <TaskChassis+0x630>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2296      	movs	r2, #150	@ 0x96
 80029e8:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 80029ea:	2201      	movs	r2, #1
 80029ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029f0:	4894      	ldr	r0, [pc, #592]	@ (8002c44 <TaskChassis+0x634>)
 80029f2:	f003 fb0b 	bl	800600c <HAL_GPIO_WritePin>
 80029f6:	e010      	b.n	8002a1a <TaskChassis+0x40a>
				} else if (buzzLengthCounter >=12) {
 80029f8:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 80029fc:	2b0b      	cmp	r3, #11
 80029fe:	dd0c      	ble.n	8002a1a <TaskChassis+0x40a>
					beeped = 1;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
					htim4.Instance->CCR3=0;
 8002a06:	4b8e      	ldr	r3, [pc, #568]	@ (8002c40 <TaskChassis+0x630>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a14:	488b      	ldr	r0, [pc, #556]	@ (8002c44 <TaskChassis+0x634>)
 8002a16:	f003 faf9 	bl	800600c <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 8002a1a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
				break;
 8002a28:	e042      	b.n	8002ab0 <TaskChassis+0x4a0>
			case 2:
				if ((buzzLengthCounter == 0) || (buzzLengthCounter == 30) || (buzzLengthCounter == 60)) {
 8002a2a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <TaskChassis+0x432>
 8002a32:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002a36:	2b1e      	cmp	r3, #30
 8002a38:	d003      	beq.n	8002a42 <TaskChassis+0x432>
 8002a3a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002a3e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002a40:	d10a      	bne.n	8002a58 <TaskChassis+0x448>
					htim4.Instance->CCR3=150;
 8002a42:	4b7f      	ldr	r3, [pc, #508]	@ (8002c40 <TaskChassis+0x630>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2296      	movs	r2, #150	@ 0x96
 8002a48:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a50:	487c      	ldr	r0, [pc, #496]	@ (8002c44 <TaskChassis+0x634>)
 8002a52:	f003 fadb 	bl	800600c <HAL_GPIO_WritePin>
 8002a56:	e023      	b.n	8002aa0 <TaskChassis+0x490>
				} else if ((buzzLengthCounter == 15) || (buzzLengthCounter == 45)) {
 8002a58:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002a5c:	2b0f      	cmp	r3, #15
 8002a5e:	d003      	beq.n	8002a68 <TaskChassis+0x458>
 8002a60:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002a64:	2b2d      	cmp	r3, #45	@ 0x2d
 8002a66:	d10a      	bne.n	8002a7e <TaskChassis+0x46e>
					htim4.Instance->CCR3=0;
 8002a68:	4b75      	ldr	r3, [pc, #468]	@ (8002c40 <TaskChassis+0x630>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a76:	4873      	ldr	r0, [pc, #460]	@ (8002c44 <TaskChassis+0x634>)
 8002a78:	f003 fac8 	bl	800600c <HAL_GPIO_WritePin>
 8002a7c:	e010      	b.n	8002aa0 <TaskChassis+0x490>
				} else if (buzzLengthCounter >=75) {
 8002a7e:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002a82:	2b4a      	cmp	r3, #74	@ 0x4a
 8002a84:	dd0c      	ble.n	8002aa0 <TaskChassis+0x490>
					beeped = 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
					htim4.Instance->CCR3=0;
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c40 <TaskChassis+0x630>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2200      	movs	r2, #0
 8002a92:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a9a:	486a      	ldr	r0, [pc, #424]	@ (8002c44 <TaskChassis+0x634>)
 8002a9c:	f003 fab6 	bl	800600c <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 8002aa0:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
				break;
 8002aae:	bf00      	nop
			}
		}



		switch (chassisTurning) {
 8002ab0:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d002      	beq.n	8002abe <TaskChassis+0x4ae>
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d072      	beq.n	8002ba2 <TaskChassis+0x592>
 8002abc:	e1da      	b.n	8002e74 <TaskChassis+0x864>
		case 1:
			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 8002abe:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fd2e 	bl	8000524 <__aeabi_i2d>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	460d      	mov	r5, r1
 8002acc:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002ad0:	f00b fd92 	bl	800e5f8 <cos>
 8002ad4:	ec53 2b10 	vmov	r2, r3, d0
 8002ad8:	4620      	mov	r0, r4
 8002ada:	4629      	mov	r1, r5
 8002adc:	f7fd fd8c 	bl	80005f8 <__aeabi_dmul>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4690      	mov	r8, r2
 8002ae6:	4699      	mov	r9, r3
 8002ae8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd19 	bl	8000524 <__aeabi_i2d>
 8002af2:	4604      	mov	r4, r0
 8002af4:	460d      	mov	r5, r1
 8002af6:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002afa:	f00b fdd1 	bl	800e6a0 <sin>
 8002afe:	ec53 2b10 	vmov	r2, r3, d0
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f7fd fd77 	bl	80005f8 <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4640      	mov	r0, r8
 8002b10:	4649      	mov	r1, r9
 8002b12:	f7fd fbb9 	bl	8000288 <__aeabi_dsub>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f7fe f81b 	bl	8000b58 <__aeabi_d2iz>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 8002b28:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcf9 	bl	8000524 <__aeabi_i2d>
 8002b32:	4604      	mov	r4, r0
 8002b34:	460d      	mov	r5, r1
 8002b36:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002b3a:	f00b fdb1 	bl	800e6a0 <sin>
 8002b3e:	ec53 2b10 	vmov	r2, r3, d0
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7fd fd57 	bl	80005f8 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4690      	mov	r8, r2
 8002b50:	4699      	mov	r9, r3
 8002b52:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fce4 	bl	8000524 <__aeabi_i2d>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002b64:	f00b fd48 	bl	800e5f8 <cos>
 8002b68:	ec53 2b10 	vmov	r2, r3, d0
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	4629      	mov	r1, r5
 8002b70:	f7fd fd42 	bl	80005f8 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4640      	mov	r0, r8
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	f7fd fb86 	bl	800028c <__adddf3>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7fd ffe6 	bl	8000b58 <__aeabi_d2iz>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
			rotationOfChassis = rcRPM[0];
 8002b92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b96:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2


			started = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb



			break;
 8002ba0:	e177      	b.n	8002e92 <TaskChassis+0x882>
		case 2:
			int8_t delta = 5;
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
			if (started == 0) {
 8002ba8:	f997 30db 	ldrsb.w	r3, [r7, #219]	@ 0xdb
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <TaskChassis+0x5ac>
				startingVal = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
				started = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
			}
			if (startingVal >= randomOrientations[increment]-delta && startingVal <= randomOrientations[increment]+delta) {
 8002bbc:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 8002bc0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002bca:	443b      	add	r3, r7
 8002bcc:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f997 308a 	ldrsb.w	r3, [r7, #138]	@ 0x8a
 8002bd6:	1acb      	subs	r3, r1, r3
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	db17      	blt.n	8002c0c <TaskChassis+0x5fc>
 8002bdc:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 8002be0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002bea:	443b      	add	r3, r7
 8002bec:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f997 308a 	ldrsb.w	r3, [r7, #138]	@ 0x8a
 8002bf6:	440b      	add	r3, r1
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	dc07      	bgt.n	8002c0c <TaskChassis+0x5fc>
				instancesCounter++;
 8002bfc:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	@ 0xd8
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
 8002c0a:	e026      	b.n	8002c5a <TaskChassis+0x64a>
			} else if (startingVal > randomOrientations[increment]-delta) {
 8002c0c:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 8002c10:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c1a:	443b      	add	r3, r7
 8002c1c:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 8002c20:	4619      	mov	r1, r3
 8002c22:	f997 308a 	ldrsb.w	r3, [r7, #138]	@ 0x8a
 8002c26:	1acb      	subs	r3, r1, r3
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dd0d      	ble.n	8002c48 <TaskChassis+0x638>
				startingVal -= movementUpOrDown;
 8002c2c:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 8002c30:	f997 308b 	ldrsb.w	r3, [r7, #139]	@ 0x8b
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
 8002c3e:	e00c      	b.n	8002c5a <TaskChassis+0x64a>
 8002c40:	200007a8 	.word	0x200007a8
 8002c44:	40021c00 	.word	0x40021c00
			} else {
				startingVal += movementUpOrDown;
 8002c48:	f997 308b 	ldrsb.w	r3, [r7, #139]	@ 0x8b
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8002c52:	4413      	add	r3, r2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
			}


			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 8002c5a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc60 	bl	8000524 <__aeabi_i2d>
 8002c64:	4604      	mov	r4, r0
 8002c66:	460d      	mov	r5, r1
 8002c68:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002c6c:	f00b fcc4 	bl	800e5f8 <cos>
 8002c70:	ec53 2b10 	vmov	r2, r3, d0
 8002c74:	4620      	mov	r0, r4
 8002c76:	4629      	mov	r1, r5
 8002c78:	f7fd fcbe 	bl	80005f8 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4690      	mov	r8, r2
 8002c82:	4699      	mov	r9, r3
 8002c84:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc4b 	bl	8000524 <__aeabi_i2d>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
 8002c92:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002c96:	f00b fd03 	bl	800e6a0 <sin>
 8002c9a:	ec53 2b10 	vmov	r2, r3, d0
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fca9 	bl	80005f8 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4640      	mov	r0, r8
 8002cac:	4649      	mov	r1, r9
 8002cae:	f7fd faeb 	bl	8000288 <__aeabi_dsub>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f7fd ff4d 	bl	8000b58 <__aeabi_d2iz>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 8002cc4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc2b 	bl	8000524 <__aeabi_i2d>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002cd6:	f00b fce3 	bl	800e6a0 <sin>
 8002cda:	ec53 2b10 	vmov	r2, r3, d0
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f7fd fc89 	bl	80005f8 <__aeabi_dmul>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc16 	bl	8000524 <__aeabi_i2d>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	ed97 0b3a 	vldr	d0, [r7, #232]	@ 0xe8
 8002d00:	f00b fc7a 	bl	800e5f8 <cos>
 8002d04:	ec53 2b10 	vmov	r2, r3, d0
 8002d08:	4620      	mov	r0, r4
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	f7fd fc74 	bl	80005f8 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4640      	mov	r0, r8
 8002d16:	4649      	mov	r1, r9
 8002d18:	f7fd fab8 	bl	800028c <__adddf3>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7fd ff18 	bl	8000b58 <__aeabi_d2iz>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
			int16_t hypotheticalP = funnyKP*(startingVal - chassisOrientation);
 8002d2e:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 8002d32:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d40:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4c:	ee17 3a90 	vmov	r3, s15
 8002d50:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
			if (hypotheticalP >= 0) {
 8002d54:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	@ 0x88
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db03      	blt.n	8002d64 <TaskChassis+0x754>
				isNegativeRegion3 = -1;
 8002d5c:	23ff      	movs	r3, #255	@ 0xff
 8002d5e:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 8002d62:	e002      	b.n	8002d6a <TaskChassis+0x75a>
			} else {
				isNegativeRegion3 = 1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
			}
			if (hypotheticalP != previousRegion3) {
 8002d6a:	f997 30f9 	ldrsb.w	r3, [r7, #249]	@ 0xf9
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	@ 0x88
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d002      	beq.n	8002d7e <TaskChassis+0x76e>
				sumI3 = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
			}
			previousRegion3 = hypotheticalP;
 8002d7e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d82:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
			sumI3 += (startingVal - chassisOrientation)*0.005;
 8002d86:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fbca 	bl	8000524 <__aeabi_i2d>
 8002d90:	4604      	mov	r4, r0
 8002d92:	460d      	mov	r5, r1
 8002d94:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 8002d98:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fbc0 	bl	8000524 <__aeabi_i2d>
 8002da4:	a3d0      	add	r3, pc, #832	@ (adr r3, 80030e8 <TaskChassis+0xad8>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fc25 	bl	80005f8 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7fd fa69 	bl	800028c <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd fec9 	bl	8000b58 <__aeabi_d2iz>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
			int16_t hypotheticalI = funnyKI*(sumI3);
 8002dcc:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	@ 0xfc
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd8:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de4:	ee17 3a90 	vmov	r3, s15
 8002de8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
			int16_t hypotheticalD = funnyKD*(startingVal - chassisOrientation)*200;
 8002dec:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 8002df0:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dfe:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80030f0 <TaskChassis+0xae0>
 8002e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e12:	ee17 3a90 	vmov	r3, s15
 8002e16:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
 8002e1a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8002e1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e22:	4413      	add	r3, r2
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
			chassisOrientation += chassisPID;
 8002e32:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	@ 0xe0
 8002e36:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
			rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;
 8002e42:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e4e:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e5a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6a:	ee17 3a90 	vmov	r3, s15
 8002e6e:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
			chassisOrientation += chassisPID;
			rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;
			*/

			break;
 8002e72:	e00e      	b.n	8002e92 <TaskChassis+0x882>
		default:
			started = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
			xJoystickDirection = rcRPM[2];
 8002e7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002e7e:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
			yJoystickDirection = rcRPM[3];
 8002e82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e86:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
			rotationOfChassis = rcRPM[0];
 8002e8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e8e:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
		}
		// int16_t chassisConvert = ((-1*(chassisOrientation))*3.32f)+4755;


		chassisTargetRPM.motorRPM[0] = yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8002e92:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 8002e96:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b21a      	sxth	r2, r3
 8002ea8:	4b92      	ldr	r3, [pc, #584]	@ (80030f4 <TaskChassis+0xae4>)
 8002eaa:	801a      	strh	r2, [r3, #0]
		chassisTargetRPM.motorRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8002eac:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 8002eb0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	4b8c      	ldr	r3, [pc, #560]	@ (80030f4 <TaskChassis+0xae4>)
 8002ec4:	805a      	strh	r2, [r3, #2]
		chassisTargetRPM.motorRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8002ec6:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 8002eca:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	b21a      	sxth	r2, r3
 8002edc:	4b85      	ldr	r3, [pc, #532]	@ (80030f4 <TaskChassis+0xae4>)
 8002ede:	809a      	strh	r2, [r3, #4]
		chassisTargetRPM.motorRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8002ee0:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 8002ee4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	b21a      	sxth	r2, r3
 8002ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80030f4 <TaskChassis+0xae4>)
 8002ef8:	80da      	strh	r2, [r3, #6]
	    //if (calcChassisPower >= 30) {
	    //chassisTargetCurrent = applyPowerlimit(chassis, chassisTargetRPM, calcChassisPower);

	    //CAN1_cmd_b2b(CAN_b2b_A_ID, 1, 1, 1, 1);

		float kPg = 0.1;
 8002efa:	4b7f      	ldr	r3, [pc, #508]	@ (80030f8 <TaskChassis+0xae8>)
 8002efc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		float kIg = 0;
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
		float kDg = 0;
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	67bb      	str	r3, [r7, #120]	@ 0x78
		if (customFiringModeSwitcher == 1) {
 8002f0c:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d103      	bne.n	8002f1c <TaskChassis+0x90c>
			burst = 1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
 8002f1a:	e006      	b.n	8002f2a <TaskChassis+0x91a>
		} else if (customFiringModeSwitcher == 2) {
 8002f1c:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d102      	bne.n	8002f2a <TaskChassis+0x91a>
			burst = 3;
 8002f24:	2303      	movs	r3, #3
 8002f26:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7





		setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 8002f2a:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <TaskChassis+0xae4>)
 8002f2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f30:	4b72      	ldr	r3, [pc, #456]	@ (80030fc <TaskChassis+0xaec>)
 8002f32:	edd3 6a00 	vldr	s13, [r3]
 8002f36:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f3e:	eeb0 0a66 	vmov.f32	s0, s13
 8002f42:	eef0 0a47 	vmov.f32	s1, s14
 8002f46:	eeb0 1a67 	vmov.f32	s2, s15
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7fe fb11 	bl	8001574 <setM3508RPM>
		setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8002f52:	4b68      	ldr	r3, [pc, #416]	@ (80030f4 <TaskChassis+0xae4>)
 8002f54:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002f58:	4b68      	ldr	r3, [pc, #416]	@ (80030fc <TaskChassis+0xaec>)
 8002f5a:	edd3 6a00 	vldr	s13, [r3]
 8002f5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f66:	eeb0 0a66 	vmov.f32	s0, s13
 8002f6a:	eef0 0a47 	vmov.f32	s1, s14
 8002f6e:	eeb0 1a67 	vmov.f32	s2, s15
 8002f72:	4611      	mov	r1, r2
 8002f74:	2002      	movs	r0, #2
 8002f76:	f7fe fafd 	bl	8001574 <setM3508RPM>
		setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 8002f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80030f4 <TaskChassis+0xae4>)
 8002f7c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002f80:	4b5e      	ldr	r3, [pc, #376]	@ (80030fc <TaskChassis+0xaec>)
 8002f82:	edd3 6a00 	vldr	s13, [r3]
 8002f86:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f8e:	eeb0 0a66 	vmov.f32	s0, s13
 8002f92:	eef0 0a47 	vmov.f32	s1, s14
 8002f96:	eeb0 1a67 	vmov.f32	s2, s15
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f7fe fae9 	bl	8001574 <setM3508RPM>
		setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 8002fa2:	4b54      	ldr	r3, [pc, #336]	@ (80030f4 <TaskChassis+0xae4>)
 8002fa4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002fa8:	4b54      	ldr	r3, [pc, #336]	@ (80030fc <TaskChassis+0xaec>)
 8002faa:	edd3 6a00 	vldr	s13, [r3]
 8002fae:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fb6:	eeb0 0a66 	vmov.f32	s0, s13
 8002fba:	eef0 0a47 	vmov.f32	s1, s14
 8002fbe:	eeb0 1a67 	vmov.f32	s2, s15
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	2004      	movs	r0, #4
 8002fc6:	f7fe fad5 	bl	8001574 <setM3508RPM>

		int16_t roundsPerSecond = 20;
 8002fca:	2314      	movs	r3, #20
 8002fcc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	    // Constant SHOULD BE 1.3636, 0.08
		int8_t rcSwitchToShoot = getRCswitch(0);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f000 fcbf 	bl	8003954 <getRCswitch>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	    if (rcSwitchToShoot == 1) {
 8002fdc:	f997 3075 	ldrsb.w	r3, [r7, #117]	@ 0x75
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 811f 	bne.w	8003224 <TaskChassis+0xc14>
	    	if (customFiringModeSwitcher == 0) {
 8002fe6:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11c      	bne.n	8003028 <TaskChassis+0xa18>
	    		setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
 8002fee:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	00d2      	lsls	r2, r2, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	b29b      	uxth	r3, r3
 8003002:	b21a      	sxth	r2, r3
 8003004:	4b3d      	ldr	r3, [pc, #244]	@ (80030fc <TaskChassis+0xaec>)
 8003006:	edd3 6a00 	vldr	s13, [r3]
 800300a:	ed93 7a01 	vldr	s14, [r3, #4]
 800300e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003012:	eeb0 0a66 	vmov.f32	s0, s13
 8003016:	eef0 0a47 	vmov.f32	s1, s14
 800301a:	eeb0 1a67 	vmov.f32	s2, s15
 800301e:	4611      	mov	r1, r2
 8003020:	2005      	movs	r0, #5
 8003022:	f7fe faa7 	bl	8001574 <setM3508RPM>
 8003026:	e0f9      	b.n	800321c <TaskChassis+0xc0c>
	    	} else {
				shooterMotor = getMotorPosition(5);
 8003028:	2005      	movs	r0, #5
 800302a:	f7fe fb0b 	bl	8001644 <getMotorPosition>
 800302e:	4603      	mov	r3, r0
 8003030:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
				// Resets the total rotationValue to avoid going too high
				if (resetPerStart == 0) {
 8003034:	f997 30cd 	ldrsb.w	r3, [r7, #205]	@ 0xcd
 8003038:	2b00      	cmp	r3, #0
 800303a:	d117      	bne.n	800306c <TaskChassis+0xa5c>
					int32_t rotationTarget1 = (36860 * burst);// + shooterMotor
 800303c:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8003040:	f648 72fc 	movw	r2, #36860	@ 0x8ffc
 8003044:	fb02 f303 	mul.w	r3, r2, r3
 8003048:	673b      	str	r3, [r7, #112]	@ 0x70
					rotationTarget = rotationTarget1 + shooterMotor;
 800304a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 800304e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003050:	4413      	add	r3, r2
 8003052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

					revolutions = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
					rotationalVal = shooterMotor;
 800305c:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8003060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					previousVal = shooterMotor;
 8003064:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8003068:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
				}
				resetPerStart = 1;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
				posForGunMotor = kPg*(rotationTarget - rotationalVal);
 8003072:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003076:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	ee07 3a90 	vmov	s15, r3
 8003080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003084:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003090:	ee17 3a90 	vmov	r3, s15
 8003094:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

				// counts the amount of rotations
				if ((shooterMotor - previousVal) < -1000) {
 8003098:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	@ 0xac
 800309c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	@ 0xd6
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80030a6:	da06      	bge.n	80030b6 <TaskChassis+0xaa6>
					 revolutions++;
 80030a8:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
				} /* else if ((shooterMotor - previousVal) > 4500) {
				revolutions --
				}
				*/
				previousVal = shooterMotor;
 80030b6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 80030ba:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
				rotationalVal = shooterMotor + (revolutions*8191);
 80030be:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80030c2:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
 80030c6:	4613      	mov	r3, r2
 80030c8:	035b      	lsls	r3, r3, #13
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0




				// int16_t PositionToGo = kPu*(rcVal-testmotor);
				if (posForGunMotor >= 0) {
 80030d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	db12      	blt.n	8003100 <TaskChassis+0xaf0>
					isNegativeRegion4 = -1;
 80030da:	23ff      	movs	r3, #255	@ 0xff
 80030dc:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 80030e0:	e011      	b.n	8003106 <TaskChassis+0xaf6>
 80030e2:	bf00      	nop
 80030e4:	f3af 8000 	nop.w
 80030e8:	47ae147b 	.word	0x47ae147b
 80030ec:	3f747ae1 	.word	0x3f747ae1
 80030f0:	43480000 	.word	0x43480000
 80030f4:	20000af0 	.word	0x20000af0
 80030f8:	3dcccccd 	.word	0x3dcccccd
 80030fc:	20000000 	.word	0x20000000
				} else {
					isNegativeRegion4 = 1;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
				}
				if (posForGunMotor != previousRegion4) {
 8003106:	f997 30f8 	ldrsb.w	r3, [r7, #248]	@ 0xf8
 800310a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800310e:	429a      	cmp	r2, r3
 8003110:	d002      	beq.n	8003118 <TaskChassis+0xb08>
					sumI4 = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				}
				previousRegion4 = posForGunMotor;
 8003118:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800311c:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
				sumI4 += (rotationTarget-testmotor)*0.005;
 8003120:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f9fd 	bl	8000524 <__aeabi_i2d>
 800312a:	4604      	mov	r4, r0
 800312c:	460d      	mov	r5, r1
 800312e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8003132:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f9f3 	bl	8000524 <__aeabi_i2d>
 800313e:	a3fa      	add	r3, pc, #1000	@ (adr r3, 8003528 <TaskChassis+0xf18>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd fa58 	bl	80005f8 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd f89c 	bl	800028c <__adddf3>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd fcfc 	bl	8000b58 <__aeabi_d2iz>
 8003160:	4603      	mov	r3, r0
 8003162:	f8a7 30fa 	strh.w	r3, [r7, #250]	@ 0xfa
				int32_t IntegralToGo4 = kIg*(sumI4);
 8003166:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	@ 0xfa
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003172:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800317e:	ee17 3a90 	vmov	r3, s15
 8003182:	66fb      	str	r3, [r7, #108]	@ 0x6c
				int32_t DerivativeToGo4 = kDg*(rotationTarget-testmotor)*200;
 8003184:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8003188:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003196:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 80034e8 <TaskChassis+0xed8>
 80031a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031aa:	ee17 3a90 	vmov	r3, s15
 80031ae:	66bb      	str	r3, [r7, #104]	@ 0x68

				int32_t finalRPM = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				if ((posForGunMotor+IntegralToGo4+DerivativeToGo4) > (roundsPerSecond * 270)) {
 80031b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80031ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031bc:	441a      	add	r2, r3
 80031be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c0:	441a      	add	r2, r3
 80031c2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80031c6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	429a      	cmp	r2, r3
 80031d0:	dd08      	ble.n	80031e4 <TaskChassis+0xbd4>
					finalRPM =roundsPerSecond * 270;
 80031d2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80031d6:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031e2:	e007      	b.n	80031f4 <TaskChassis+0xbe4>
				} else {
					finalRPM = posForGunMotor+IntegralToGo4+DerivativeToGo4;
 80031e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80031e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ea:	4413      	add	r3, r2
 80031ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80031ee:	4413      	add	r3, r2
 80031f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
				}
				setM3508RPM(5, finalRPM, chassisPreset);
 80031f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031f8:	b21a      	sxth	r2, r3
 80031fa:	4bbc      	ldr	r3, [pc, #752]	@ (80034ec <TaskChassis+0xedc>)
 80031fc:	edd3 6a00 	vldr	s13, [r3]
 8003200:	ed93 7a01 	vldr	s14, [r3, #4]
 8003204:	edd3 7a02 	vldr	s15, [r3, #8]
 8003208:	eeb0 0a66 	vmov.f32	s0, s13
 800320c:	eef0 0a47 	vmov.f32	s1, s14
 8003210:	eeb0 1a67 	vmov.f32	s2, s15
 8003214:	4611      	mov	r1, r2
 8003216:	2005      	movs	r0, #5
 8003218:	f7fe f9ac 	bl	8001574 <setM3508RPM>
	    	}
	    	switched = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
 8003222:	e013      	b.n	800324c <TaskChassis+0xc3c>
	    	setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
	    	*/
	    	// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, rcVal + 252);
	    	// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, rcVal + 252);
	    } else {
	    	resetPerStart = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
	    	setM3508RPM(5, 0, chassisPreset);
 800322a:	4bb0      	ldr	r3, [pc, #704]	@ (80034ec <TaskChassis+0xedc>)
 800322c:	edd3 6a00 	vldr	s13, [r3]
 8003230:	ed93 7a01 	vldr	s14, [r3, #4]
 8003234:	edd3 7a02 	vldr	s15, [r3, #8]
 8003238:	eeb0 0a66 	vmov.f32	s0, s13
 800323c:	eef0 0a47 	vmov.f32	s1, s14
 8003240:	eeb0 1a67 	vmov.f32	s2, s15
 8003244:	2100      	movs	r1, #0
 8003246:	2005      	movs	r0, #5
 8003248:	f7fe f994 	bl	8001574 <setM3508RPM>
	    }
	    if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 0) {
 800324c:	f997 3075 	ldrsb.w	r3, [r7, #117]	@ 0x75
 8003250:	2b02      	cmp	r3, #2
 8003252:	d10e      	bne.n	8003272 <TaskChassis+0xc62>
 8003254:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <TaskChassis+0xc62>
 800325c:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <TaskChassis+0xc62>
	    	motorOn = 1;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	    	switched = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
 8003270:	e011      	b.n	8003296 <TaskChassis+0xc86>
	    } else if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 1) {
 8003272:	f997 3075 	ldrsb.w	r3, [r7, #117]	@ 0x75
 8003276:	2b02      	cmp	r3, #2
 8003278:	d10d      	bne.n	8003296 <TaskChassis+0xc86>
 800327a:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <TaskChassis+0xc86>
 8003282:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <TaskChassis+0xc86>
	    	motorOn = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	    	switched = 1;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
	    }
	    if (rcSwitchToShoot == 3) {
 8003296:	f997 3075 	ldrsb.w	r3, [r7, #117]	@ 0x75
 800329a:	2b03      	cmp	r3, #3
 800329c:	d102      	bne.n	80032a4 <TaskChassis+0xc94>
	    	switched = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
	    }

	    // MAX SPEED = 759
    	htim1.Instance->CCR1=200+(500*motorOn);
 80032a4:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 80032a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80032ac:	fb02 f303 	mul.w	r3, r2, r3
 80032b0:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 80032b4:	4b8e      	ldr	r3, [pc, #568]	@ (80034f0 <TaskChassis+0xee0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	635a      	str	r2, [r3, #52]	@ 0x34
    	htim1.Instance->CCR2=200+(500*motorOn);
 80032ba:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 80032be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 80032ca:	4b89      	ldr	r3, [pc, #548]	@ (80034f0 <TaskChassis+0xee0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38

    	// int32_t dividedRotation = rotationalVal * 0.01f;
    	// usart_printf("$%d %d %d\r\n;",rotationalVal, shooterMotor, rotationTarget);
    	testmotor = getMotorPosition(6);
 80032d0:	2006      	movs	r0, #6
 80032d2:	f7fe f9b7 	bl	8001644 <getMotorPosition>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
    	// min = 5600
    	// max = 6700
    	//(These are ABSOLUTE MAXES)
    	// Difference = 0, 589, 1178

    	float kPu =0.005; // 0.005
 80032dc:	4b85      	ldr	r3, [pc, #532]	@ (80034f4 <TaskChassis+0xee4>)
 80032de:	667b      	str	r3, [r7, #100]	@ 0x64
    	float kIu =0.0001; // -0.0001
 80032e0:	4b85      	ldr	r3, [pc, #532]	@ (80034f8 <TaskChassis+0xee8>)
 80032e2:	663b      	str	r3, [r7, #96]	@ 0x60
    	float kDu =0.0005; // 0.0005
 80032e4:	4b85      	ldr	r3, [pc, #532]	@ (80034fc <TaskChassis+0xeec>)
 80032e6:	65fb      	str	r3, [r7, #92]	@ 0x5c



    	int16_t rcVal = (getRCchannel(1)*0.88f)+6161;
 80032e8:	2001      	movs	r0, #1
 80032ea:	f000 fb1f 	bl	800392c <getRCchannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f8:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003500 <TaskChassis+0xef0>
 80032fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003300:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8003504 <TaskChassis+0xef4>
 8003304:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800330c:	ee17 3a90 	vmov	r3, s15
 8003310:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

    	int16_t DifferenceBetweenCurrentAndWannabePosition = rcVal-testmotor;
 8003314:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8003318:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	b29b      	uxth	r3, r3
 8003320:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

    	if (testmotor < 5500) {
 8003324:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8003328:	f241 527b 	movw	r2, #5499	@ 0x157b
 800332c:	4293      	cmp	r3, r2
 800332e:	d811      	bhi.n	8003354 <TaskChassis+0xd44>
    		setGM6020voltageRPM(6, 5, DONUTMOTOR);
 8003330:	4b75      	ldr	r3, [pc, #468]	@ (8003508 <TaskChassis+0xef8>)
 8003332:	edd3 6a00 	vldr	s13, [r3]
 8003336:	ed93 7a01 	vldr	s14, [r3, #4]
 800333a:	edd3 7a02 	vldr	s15, [r3, #8]
 800333e:	eeb0 0a66 	vmov.f32	s0, s13
 8003342:	eef0 0a47 	vmov.f32	s1, s14
 8003346:	eeb0 1a67 	vmov.f32	s2, s15
 800334a:	2105      	movs	r1, #5
 800334c:	2006      	movs	r0, #6
 800334e:	f7fe f945 	bl	80015dc <setGM6020voltageRPM>
 8003352:	e03b      	b.n	80033cc <TaskChassis+0xdbc>
    	} else if (testmotor > 6800) {
 8003354:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8003358:	f641 2290 	movw	r2, #6800	@ 0x1a90
 800335c:	4293      	cmp	r3, r2
 800335e:	d912      	bls.n	8003386 <TaskChassis+0xd76>
    		setGM6020voltageRPM(6, -5, DONUTMOTOR);
 8003360:	4b69      	ldr	r3, [pc, #420]	@ (8003508 <TaskChassis+0xef8>)
 8003362:	edd3 6a00 	vldr	s13, [r3]
 8003366:	ed93 7a01 	vldr	s14, [r3, #4]
 800336a:	edd3 7a02 	vldr	s15, [r3, #8]
 800336e:	eeb0 0a66 	vmov.f32	s0, s13
 8003372:	eef0 0a47 	vmov.f32	s1, s14
 8003376:	eeb0 1a67 	vmov.f32	s2, s15
 800337a:	f06f 0104 	mvn.w	r1, #4
 800337e:	2006      	movs	r0, #6
 8003380:	f7fe f92c 	bl	80015dc <setGM6020voltageRPM>
 8003384:	e022      	b.n	80033cc <TaskChassis+0xdbc>
			int16_t PositionToGo = kPu*(DifferenceBetweenCurrentAndWannabePosition);
			int16_t IntegralToGo = kIu*(sumI1);
			int16_t DerivativeToGo = kDu*(DifferenceBetweenCurrentAndWannabePosition)*200;
			*/

			setGM6020voltageRPM(6, positionPIDByMe(&isNegativeRegion1, &previousRegion1, DifferenceBetweenCurrentAndWannabePosition, &sumI1, kPu, kIu, kDu), DONUTMOTOR);
 8003386:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 800338a:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	@ 0x58
 800338e:	f107 0139 	add.w	r1, r7, #57	@ 0x39
 8003392:	f107 003b 	add.w	r0, r7, #59	@ 0x3b
 8003396:	ed97 1a17 	vldr	s2, [r7, #92]	@ 0x5c
 800339a:	edd7 0a18 	vldr	s1, [r7, #96]	@ 0x60
 800339e:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 80033a2:	f7ff f887 	bl	80024b4 <positionPIDByMe>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b57      	ldr	r3, [pc, #348]	@ (8003508 <TaskChassis+0xef8>)
 80033ac:	edd3 6a00 	vldr	s13, [r3]
 80033b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80033b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80033b8:	eeb0 0a66 	vmov.f32	s0, s13
 80033bc:	eef0 0a47 	vmov.f32	s1, s14
 80033c0:	eeb0 1a67 	vmov.f32	s2, s15
 80033c4:	4611      	mov	r1, r2
 80033c6:	2006      	movs	r0, #6
 80033c8:	f7fe f908 	bl	80015dc <setGM6020voltageRPM>
    	}


    	// 2524-6986
    	// 90 degree = 2691, 6799
    	pivoter = getMotorPosition(7);
 80033cc:	2007      	movs	r0, #7
 80033ce:	f7fe f939 	bl	8001644 <getMotorPosition>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    	angle = ((pivoter-4755)*0.00024343f)*3.14159265f;
 80033d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80033dc:	f5a3 5394 	sub.w	r3, r3, #4736	@ 0x1280
 80033e0:	3b13      	subs	r3, #19
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ea:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800350c <TaskChassis+0xefc>
 80033ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8003510 <TaskChassis+0xf00>
 80033f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033fa:	ee17 0a90 	vmov	r0, s15
 80033fe:	f7fd f8a3 	bl	8000548 <__aeabi_f2d>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

    	float kPr =0.022; // 0.001
 800340a:	4b42      	ldr	r3, [pc, #264]	@ (8003514 <TaskChassis+0xf04>)
 800340c:	657b      	str	r3, [r7, #84]	@ 0x54
		float kIr =0.02; // -0.02
 800340e:	4b42      	ldr	r3, [pc, #264]	@ (8003518 <TaskChassis+0xf08>)
 8003410:	653b      	str	r3, [r7, #80]	@ 0x50
		float kDr =0.00005; // 0.00015
 8003412:	4b42      	ldr	r3, [pc, #264]	@ (800351c <TaskChassis+0xf0c>)
 8003414:	64fb      	str	r3, [r7, #76]	@ 0x4c

		if (chassisTurning == 2) {
 8003416:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800341a:	2b02      	cmp	r3, #2
 800341c:	d115      	bne.n	800344a <TaskChassis+0xe3a>
			// rcVal2 = ((-1*(leftDial))*3.32f)+4755;

			rcVal2 = ((-1*(startingVal))*3.32f)+4755;
 800341e:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8003422:	425b      	negs	r3, r3
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800342c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003520 <TaskChassis+0xf10>
 8003430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003434:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003524 <TaskChassis+0xf14>
 8003438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800343c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003440:	ee17 3a90 	vmov	r3, s15
 8003444:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
 8003448:	e013      	b.n	8003472 <TaskChassis+0xe62>
		} else {
			rcVal2 = (leftDial*3.32f)+4755;
 800344a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003456:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003520 <TaskChassis+0xf10>
 800345a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800345e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003524 <TaskChassis+0xf14>
 8003462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800346a:	ee17 3a90 	vmov	r3, s15
 800346e:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
		}


		int16_t DiffOfTurret = rcVal2-pivoter;
 8003472:	f8b7 20de 	ldrh.w	r2, [r7, #222]	@ 0xde
 8003476:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	b29b      	uxth	r3, r3
 800347e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

		if (pivoter < 2400) {
 8003482:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003486:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 800348a:	d211      	bcs.n	80034b0 <TaskChassis+0xea0>
			setGM6020voltageRPM(7, 5, DONUTMOTOR);
 800348c:	4b1e      	ldr	r3, [pc, #120]	@ (8003508 <TaskChassis+0xef8>)
 800348e:	edd3 6a00 	vldr	s13, [r3]
 8003492:	ed93 7a01 	vldr	s14, [r3, #4]
 8003496:	edd3 7a02 	vldr	s15, [r3, #8]
 800349a:	eeb0 0a66 	vmov.f32	s0, s13
 800349e:	eef0 0a47 	vmov.f32	s1, s14
 80034a2:	eeb0 1a67 	vmov.f32	s2, s15
 80034a6:	2105      	movs	r1, #5
 80034a8:	2007      	movs	r0, #7
 80034aa:	f7fe f897 	bl	80015dc <setGM6020voltageRPM>
 80034ae:	e06a      	b.n	8003586 <TaskChassis+0xf76>
		} else if (pivoter > 7100) {
 80034b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80034b4:	f641 32bc 	movw	r2, #7100	@ 0x1bbc
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d939      	bls.n	8003530 <TaskChassis+0xf20>
			setGM6020voltageRPM(7, -5, DONUTMOTOR);
 80034bc:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <TaskChassis+0xef8>)
 80034be:	edd3 6a00 	vldr	s13, [r3]
 80034c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80034c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034ca:	eeb0 0a66 	vmov.f32	s0, s13
 80034ce:	eef0 0a47 	vmov.f32	s1, s14
 80034d2:	eeb0 1a67 	vmov.f32	s2, s15
 80034d6:	f06f 0104 	mvn.w	r1, #4
 80034da:	2007      	movs	r0, #7
 80034dc:	f7fe f87e 	bl	80015dc <setGM6020voltageRPM>
 80034e0:	e051      	b.n	8003586 <TaskChassis+0xf76>
 80034e2:	bf00      	nop
 80034e4:	f3af 8000 	nop.w
 80034e8:	43480000 	.word	0x43480000
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000760 	.word	0x20000760
 80034f4:	3ba3d70a 	.word	0x3ba3d70a
 80034f8:	38d1b717 	.word	0x38d1b717
 80034fc:	3a03126f 	.word	0x3a03126f
 8003500:	3f6147ae 	.word	0x3f6147ae
 8003504:	45c08800 	.word	0x45c08800
 8003508:	2000000c 	.word	0x2000000c
 800350c:	397f413e 	.word	0x397f413e
 8003510:	40490fdb 	.word	0x40490fdb
 8003514:	3cb43958 	.word	0x3cb43958
 8003518:	3ca3d70a 	.word	0x3ca3d70a
 800351c:	3851b717 	.word	0x3851b717
 8003520:	40547ae1 	.word	0x40547ae1
 8003524:	45949800 	.word	0x45949800
 8003528:	47ae147b 	.word	0x47ae147b
 800352c:	3f747ae1 	.word	0x3f747ae1
			sumI2 += (DiffOfTurret)*0.005;
			int16_t PositionToGo2 = kPr*(DiffOfTurret);
			int16_t IntegralToGo2 = kIr*(sumI2);
			int16_t DerivativeToGo2 = kDr*(DiffOfTurret)*200;
			*/
			setGM6020voltageRPM(7, positionPIDByMe(&isNegativeRegion2, &previousRegion2, DiffOfTurret, &sumI2, kPr, kIr, kDr), DONUTMOTOR);
 8003530:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003534:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8003538:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800353c:	f107 003a 	add.w	r0, r7, #58	@ 0x3a
 8003540:	ed97 1a13 	vldr	s2, [r7, #76]	@ 0x4c
 8003544:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 8003548:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800354c:	f7fe ffb2 	bl	80024b4 <positionPIDByMe>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <TaskChassis+0xf80>)
 8003556:	edd3 6a00 	vldr	s13, [r3]
 800355a:	ed93 7a01 	vldr	s14, [r3, #4]
 800355e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003562:	eeb0 0a66 	vmov.f32	s0, s13
 8003566:	eef0 0a47 	vmov.f32	s1, s14
 800356a:	eeb0 1a67 	vmov.f32	s2, s15
 800356e:	4611      	mov	r1, r2
 8003570:	2007      	movs	r0, #7
 8003572:	f7fe f833 	bl	80015dc <setGM6020voltageRPM>
			usart_printf("$%d %d\r\n;", DiffOfTurret, sumI2);
 8003576:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800357a:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 800357e:	4619      	mov	r1, r3
 8003580:	4804      	ldr	r0, [pc, #16]	@ (8003594 <TaskChassis+0xf84>)
 8003582:	f7fe f88f 	bl	80016a4 <usart_printf>
	    //sprintf((char*)txbuf, "%f \r\n", power_heat_data.chassis_power);
	    //HAL_UART_Transmit(&huart1, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
	    //txbuf = *((float*)&power_heat_data.chassis_power);
	    //usart_printf("%f %d\r\n", calcChassisPower, 30);

        osDelay(5);
 8003586:	2005      	movs	r0, #5
 8003588:	f005 fcc4 	bl	8008f14 <osDelay>
    for(;;) {
 800358c:	f7ff b8f1 	b.w	8002772 <TaskChassis+0x162>
 8003590:	2000000c 	.word	0x2000000c
 8003594:	0800f730 	.word	0x0800f730

08003598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800359c:	b672      	cpsid	i
}
 800359e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <Error_Handler+0x8>

080035a4 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80035a8:	2224      	movs	r2, #36	@ 0x24
 80035aa:	4903      	ldr	r1, [pc, #12]	@ (80035b8 <remote_control_init+0x14>)
 80035ac:	4803      	ldr	r0, [pc, #12]	@ (80035bc <remote_control_init+0x18>)
 80035ae:	f7fe fa99 	bl	8001ae4 <RC_init>
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000b3c 	.word	0x20000b3c
 80035bc:	20000b18 	.word	0x20000b18

080035c0 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80035c4:	4b02      	ldr	r3, [pc, #8]	@ (80035d0 <get_remote_control_point+0x10>)
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	20000b00 	.word	0x20000b00

080035d4 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80035da:	4b44      	ldr	r3, [pc, #272]	@ (80036ec <USART3_IRQHandler+0x118>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80035e8:	2300      	movs	r3, #0
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <USART3_IRQHandler+0x118>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	607b      	str	r3, [r7, #4]
 80035f4:	4b3d      	ldr	r3, [pc, #244]	@ (80036ec <USART3_IRQHandler+0x118>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 80035fe:	e070      	b.n	80036e2 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003600:	4b3b      	ldr	r3, [pc, #236]	@ (80036f0 <USART3_IRQHandler+0x11c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d06a      	beq.n	80036e2 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800360c:	2300      	movs	r3, #0
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4b36      	ldr	r3, [pc, #216]	@ (80036ec <USART3_IRQHandler+0x118>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4b34      	ldr	r3, [pc, #208]	@ (80036ec <USART3_IRQHandler+0x118>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003622:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d12d      	bne.n	800368c <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003630:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003640:	4b2c      	ldr	r3, [pc, #176]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800364c:	b29a      	uxth	r2, r3
 800364e:	4b2a      	ldr	r3, [pc, #168]	@ (80036f8 <USART3_IRQHandler+0x124>)
 8003650:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003652:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800365a:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <USART3_IRQHandler+0x120>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003668:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800366a:	4b22      	ldr	r3, [pc, #136]	@ (80036f4 <USART3_IRQHandler+0x120>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800367a:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <USART3_IRQHandler+0x124>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	2b12      	cmp	r3, #18
 8003680:	d12f      	bne.n	80036e2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003682:	491e      	ldr	r1, [pc, #120]	@ (80036fc <USART3_IRQHandler+0x128>)
 8003684:	481e      	ldr	r0, [pc, #120]	@ (8003700 <USART3_IRQHandler+0x12c>)
 8003686:	f000 f841 	bl	800370c <sbus_to_rc>
}
 800368a:	e02a      	b.n	80036e2 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <USART3_IRQHandler+0x120>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b18      	ldr	r3, [pc, #96]	@ (80036f4 <USART3_IRQHandler+0x120>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 800369c:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <USART3_IRQHandler+0x120>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <USART3_IRQHandler+0x124>)
 80036ac:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80036ae:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <USART3_IRQHandler+0x120>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80036b6:	4b13      	ldr	r3, [pc, #76]	@ (8003704 <USART3_IRQHandler+0x130>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <USART3_IRQHandler+0x130>)
 80036bc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80036c0:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80036c2:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <USART3_IRQHandler+0x120>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <USART3_IRQHandler+0x120>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <USART3_IRQHandler+0x124>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	2b12      	cmp	r3, #18
 80036d8:	d103      	bne.n	80036e2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80036da:	4908      	ldr	r1, [pc, #32]	@ (80036fc <USART3_IRQHandler+0x128>)
 80036dc:	480a      	ldr	r0, [pc, #40]	@ (8003708 <USART3_IRQHandler+0x134>)
 80036de:	f000 f815 	bl	800370c <sbus_to_rc>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000087c 	.word	0x2000087c
 80036f0:	40004800 	.word	0x40004800
 80036f4:	200009c4 	.word	0x200009c4
 80036f8:	20000b60 	.word	0x20000b60
 80036fc:	20000b00 	.word	0x20000b00
 8003700:	20000b18 	.word	0x20000b18
 8003704:	40026028 	.word	0x40026028
 8003708:	20000b3c 	.word	0x20000b3c

0800370c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8101 	beq.w	8003920 <sbus_to_rc+0x214>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80fd 	beq.w	8003920 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	b21a      	sxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3301      	adds	r3, #1
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	b21b      	sxth	r3, r3
 800373a:	4313      	orrs	r3, r2
 800373c:	b21b      	sxth	r3, r3
 800373e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003742:	b21a      	sxth	r2, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3301      	adds	r3, #1
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	b21a      	sxth	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3302      	adds	r3, #2
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	b21b      	sxth	r3, r3
 8003762:	4313      	orrs	r3, r2
 8003764:	b21b      	sxth	r3, r3
 8003766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800376a:	b21a      	sxth	r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3302      	adds	r3, #2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	b2db      	uxtb	r3, r3
 800377c:	b21a      	sxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3303      	adds	r3, #3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	b21b      	sxth	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003798:	b21b      	sxth	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800379e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a2:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	b21a      	sxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3305      	adds	r3, #5
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	01db      	lsls	r3, r3, #7
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3305      	adds	r3, #5
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3305      	adds	r3, #5
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	109b      	asrs	r3, r3, #2
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3306      	adds	r3, #6
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	b21a      	sxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3307      	adds	r3, #7
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	b21b      	sxth	r3, r3
 8003816:	4313      	orrs	r3, r2
 8003818:	b21a      	sxth	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3308      	adds	r3, #8
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	b21a      	sxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3309      	adds	r3, #9
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	b21b      	sxth	r3, r3
 8003834:	4313      	orrs	r3, r2
 8003836:	b21a      	sxth	r2, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	330a      	adds	r3, #10
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	b21a      	sxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	330b      	adds	r3, #11
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	b21b      	sxth	r3, r3
 8003852:	4313      	orrs	r3, r2
 8003854:	b21a      	sxth	r2, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	330c      	adds	r3, #12
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	330d      	adds	r3, #13
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	330e      	adds	r3, #14
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	b21a      	sxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	330f      	adds	r3, #15
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	b21b      	sxth	r3, r3
 8003888:	4313      	orrs	r3, r2
 800388a:	b21b      	sxth	r3, r3
 800388c:	b29a      	uxth	r2, r3
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3310      	adds	r3, #16
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	b21a      	sxth	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3311      	adds	r3, #17
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	b21b      	sxth	r3, r3
 80038a8:	4313      	orrs	r3, r2
 80038aa:	b21a      	sxth	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b21a      	sxth	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038cc:	b21b      	sxth	r3, r3
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	b21a      	sxth	r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003900:	b29b      	uxth	r3, r3
 8003902:	b21a      	sxth	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800390e:	b21b      	sxth	r3, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003916:	b29b      	uxth	r3, r3
 8003918:	b21a      	sxth	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	811a      	strh	r2, [r3, #8]
 800391e:	e000      	b.n	8003922 <sbus_to_rc+0x216>
        return;
 8003920:	bf00      	nop
}
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <getRCchannel+0x24>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800393e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003942:	b21b      	sxth	r3, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	2000001c 	.word	0x2000001c

08003954 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <getRCswitch+0x24>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	4413      	add	r3, r2
 8003968:	7a9b      	ldrb	r3, [r3, #10]
 800396a:	b25b      	sxtb	r3, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	2000001c 	.word	0x2000001c

0800397c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <HAL_MspInit+0x54>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	4a11      	ldr	r2, [pc, #68]	@ (80039d0 <HAL_MspInit+0x54>)
 800398c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003990:	6453      	str	r3, [r2, #68]	@ 0x44
 8003992:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <HAL_MspInit+0x54>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <HAL_MspInit+0x54>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <HAL_MspInit+0x54>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ae:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <HAL_MspInit+0x54>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	210f      	movs	r1, #15
 80039be:	f06f 0001 	mvn.w	r0, #1
 80039c2:	f001 fd4e 	bl	8005462 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023800 	.word	0x40023800

080039d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	@ 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a4a      	ldr	r2, [pc, #296]	@ (8003b1c <HAL_CAN_MspInit+0x148>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d13d      	bne.n	8003a72 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80039f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003b20 <HAL_CAN_MspInit+0x14c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	4a48      	ldr	r2, [pc, #288]	@ (8003b20 <HAL_CAN_MspInit+0x14c>)
 80039fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003a00:	4b47      	ldr	r3, [pc, #284]	@ (8003b20 <HAL_CAN_MspInit+0x14c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10d      	bne.n	8003a24 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	4b45      	ldr	r3, [pc, #276]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	4a44      	ldr	r2, [pc, #272]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a18:	4b42      	ldr	r3, [pc, #264]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	4b3e      	ldr	r3, [pc, #248]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a2e:	f043 0308 	orr.w	r3, r3, #8
 8003a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a34:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a40:	2303      	movs	r3, #3
 8003a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003a50:	2309      	movs	r3, #9
 8003a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a54:	f107 031c 	add.w	r3, r7, #28
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4833      	ldr	r0, [pc, #204]	@ (8003b28 <HAL_CAN_MspInit+0x154>)
 8003a5c:	f002 f93a 	bl	8005cd4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2105      	movs	r1, #5
 8003a64:	2014      	movs	r0, #20
 8003a66:	f001 fcfc 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003a6a:	2014      	movs	r0, #20
 8003a6c:	f001 fd15 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003a70:	e04f      	b.n	8003b12 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2d      	ldr	r2, [pc, #180]	@ (8003b2c <HAL_CAN_MspInit+0x158>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d14a      	bne.n	8003b12 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8c:	4b25      	ldr	r3, [pc, #148]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003a98:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <HAL_CAN_MspInit+0x14c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4a20      	ldr	r2, [pc, #128]	@ (8003b20 <HAL_CAN_MspInit+0x14c>)
 8003aa0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b20 <HAL_CAN_MspInit+0x14c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b1d      	ldr	r3, [pc, #116]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003ab4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aba:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	4b16      	ldr	r3, [pc, #88]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	4a15      	ldr	r2, [pc, #84]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ad6:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_CAN_MspInit+0x150>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ae2:	2360      	movs	r3, #96	@ 0x60
 8003ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003af2:	2309      	movs	r3, #9
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af6:	f107 031c 	add.w	r3, r7, #28
 8003afa:	4619      	mov	r1, r3
 8003afc:	480c      	ldr	r0, [pc, #48]	@ (8003b30 <HAL_CAN_MspInit+0x15c>)
 8003afe:	f002 f8e9 	bl	8005cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2105      	movs	r1, #5
 8003b06:	2040      	movs	r0, #64	@ 0x40
 8003b08:	f001 fcab 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003b0c:	2040      	movs	r0, #64	@ 0x40
 8003b0e:	f001 fcc4 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3730      	adds	r7, #48	@ 0x30
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40006400 	.word	0x40006400
 8003b20:	20000b64 	.word	0x20000b64
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40006800 	.word	0x40006800
 8003b30:	40020400 	.word	0x40020400

08003b34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	@ 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <HAL_SPI_MspInit+0xc0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d149      	bne.n	8003bea <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	4a26      	ldr	r2, [pc, #152]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b66:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	4a18      	ldr	r2, [pc, #96]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9e:	4b16      	ldr	r3, [pc, #88]	@ (8003bf8 <HAL_SPI_MspInit+0xc4>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003baa:	2318      	movs	r3, #24
 8003bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bba:	2305      	movs	r3, #5
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bbe:	f107 0314 	add.w	r3, r7, #20
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	480d      	ldr	r0, [pc, #52]	@ (8003bfc <HAL_SPI_MspInit+0xc8>)
 8003bc6:	f002 f885 	bl	8005cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bca:	2380      	movs	r3, #128	@ 0x80
 8003bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bda:	2305      	movs	r3, #5
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	4619      	mov	r1, r3
 8003be4:	4806      	ldr	r0, [pc, #24]	@ (8003c00 <HAL_SPI_MspInit+0xcc>)
 8003be6:	f002 f875 	bl	8005cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003bea:	bf00      	nop
 8003bec:	3728      	adds	r7, #40	@ 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40013000 	.word	0x40013000
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020400 	.word	0x40020400
 8003c00:	40020000 	.word	0x40020000

08003c04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <HAL_TIM_PWM_MspInit+0x64>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c26:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c32:	e012      	b.n	8003c5a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0d      	ldr	r2, [pc, #52]	@ (8003c70 <HAL_TIM_PWM_MspInit+0x6c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10d      	bne.n	8003c5a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	4a09      	ldr	r2, [pc, #36]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c4e:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <HAL_TIM_PWM_MspInit+0x68>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40010400 	.word	0x40010400

08003c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb0 <HAL_TIM_Base_MspInit+0x3c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10d      	bne.n	8003ca2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <HAL_TIM_Base_MspInit+0x40>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	4a09      	ldr	r2, [pc, #36]	@ (8003cb4 <HAL_TIM_Base_MspInit+0x40>)
 8003c90:	f043 0304 	orr.w	r3, r3, #4
 8003c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c96:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <HAL_TIM_Base_MspInit+0x40>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	@ 0x30
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc0:	f107 031c 	add.w	r3, r7, #28
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a46      	ldr	r2, [pc, #280]	@ (8003df0 <HAL_TIM_MspPostInit+0x138>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d11f      	bne.n	8003d1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	4b45      	ldr	r3, [pc, #276]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	4a44      	ldr	r2, [pc, #272]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003ce4:	f043 0310 	orr.w	r3, r3, #16
 8003ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cea:	4b42      	ldr	r3, [pc, #264]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8003cf6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d0c:	f107 031c 	add.w	r3, r7, #28
 8003d10:	4619      	mov	r1, r3
 8003d12:	4839      	ldr	r0, [pc, #228]	@ (8003df8 <HAL_TIM_MspPostInit+0x140>)
 8003d14:	f001 ffde 	bl	8005cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d18:	e065      	b.n	8003de6 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a37      	ldr	r2, [pc, #220]	@ (8003dfc <HAL_TIM_MspPostInit+0x144>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d11f      	bne.n	8003d64 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	4b32      	ldr	r3, [pc, #200]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	4a31      	ldr	r2, [pc, #196]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d2e:	f043 0308 	orr.w	r3, r3, #8
 8003d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d34:	4b2f      	ldr	r3, [pc, #188]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d46:	2302      	movs	r3, #2
 8003d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d52:	2302      	movs	r3, #2
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d56:	f107 031c 	add.w	r3, r7, #28
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4828      	ldr	r0, [pc, #160]	@ (8003e00 <HAL_TIM_MspPostInit+0x148>)
 8003d5e:	f001 ffb9 	bl	8005cd4 <HAL_GPIO_Init>
}
 8003d62:	e040      	b.n	8003de6 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM8)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <HAL_TIM_MspPostInit+0x14c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d13b      	bne.n	8003de6 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	4a1f      	ldr	r2, [pc, #124]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d9a:	4b16      	ldr	r3, [pc, #88]	@ (8003df4 <HAL_TIM_MspPostInit+0x13c>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003da6:	23c0      	movs	r3, #192	@ 0xc0
 8003da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003db6:	2303      	movs	r3, #3
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4811      	ldr	r0, [pc, #68]	@ (8003e08 <HAL_TIM_MspPostInit+0x150>)
 8003dc2:	f001 ff87 	bl	8005cd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003dc6:	2340      	movs	r3, #64	@ 0x40
 8003dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4619      	mov	r1, r3
 8003de0:	480a      	ldr	r0, [pc, #40]	@ (8003e0c <HAL_TIM_MspPostInit+0x154>)
 8003de2:	f001 ff77 	bl	8005cd4 <HAL_GPIO_Init>
}
 8003de6:	bf00      	nop
 8003de8:	3730      	adds	r7, #48	@ 0x30
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40020c00 	.word	0x40020c00
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40022000 	.word	0x40022000
 8003e0c:	40020800 	.word	0x40020800

08003e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	@ 0x38
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a90      	ldr	r2, [pc, #576]	@ (8004070 <HAL_UART_MspInit+0x260>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f040 80b2 	bne.w	8003f98 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e34:	2300      	movs	r3, #0
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	4b8e      	ldr	r3, [pc, #568]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	4a8d      	ldr	r2, [pc, #564]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e44:	4b8b      	ldr	r3, [pc, #556]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	4b87      	ldr	r3, [pc, #540]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e58:	4a86      	ldr	r2, [pc, #536]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e60:	4b84      	ldr	r3, [pc, #528]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	4b80      	ldr	r3, [pc, #512]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	4a7f      	ldr	r2, [pc, #508]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e98:	2307      	movs	r3, #7
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4875      	ldr	r0, [pc, #468]	@ (8004078 <HAL_UART_MspInit+0x268>)
 8003ea4:	f001 ff16 	bl	8005cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eba:	2307      	movs	r3, #7
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	486d      	ldr	r0, [pc, #436]	@ (800407c <HAL_UART_MspInit+0x26c>)
 8003ec6:	f001 ff05 	bl	8005cd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003eca:	4b6d      	ldr	r3, [pc, #436]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8004084 <HAL_UART_MspInit+0x274>)
 8003ece:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003ed2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003ed6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ed8:	4b69      	ldr	r3, [pc, #420]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003eda:	2240      	movs	r2, #64	@ 0x40
 8003edc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ede:	4b68      	ldr	r3, [pc, #416]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee4:	4b66      	ldr	r3, [pc, #408]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003ee6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eec:	4b64      	ldr	r3, [pc, #400]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef2:	4b63      	ldr	r3, [pc, #396]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003ef8:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003efe:	4b60      	ldr	r3, [pc, #384]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003f00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003f04:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f06:	4b5e      	ldr	r3, [pc, #376]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f0c:	485c      	ldr	r0, [pc, #368]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003f0e:	f001 fadf 	bl	80054d0 <HAL_DMA_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003f18:	f7ff fb3e 	bl	8003598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a58      	ldr	r2, [pc, #352]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f22:	4a57      	ldr	r2, [pc, #348]	@ (8004080 <HAL_UART_MspInit+0x270>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f28:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f2a:	4a58      	ldr	r2, [pc, #352]	@ (800408c <HAL_UART_MspInit+0x27c>)
 8003f2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f2e:	4b56      	ldr	r3, [pc, #344]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f34:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f3c:	4b52      	ldr	r3, [pc, #328]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f42:	4b51      	ldr	r3, [pc, #324]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f50:	4b4d      	ldr	r3, [pc, #308]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003f56:	4b4c      	ldr	r3, [pc, #304]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f5e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003f62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f64:	4b48      	ldr	r3, [pc, #288]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f6a:	4847      	ldr	r0, [pc, #284]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f6c:	f001 fab0 	bl	80054d0 <HAL_DMA_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003f76:	f7ff fb0f 	bl	8003598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a42      	ldr	r2, [pc, #264]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f80:	4a41      	ldr	r2, [pc, #260]	@ (8004088 <HAL_UART_MspInit+0x278>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003f86:	2200      	movs	r2, #0
 8003f88:	2105      	movs	r1, #5
 8003f8a:	2025      	movs	r0, #37	@ 0x25
 8003f8c:	f001 fa69 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f90:	2025      	movs	r0, #37	@ 0x25
 8003f92:	f001 fa82 	bl	800549a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f96:	e11c      	b.n	80041d2 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004090 <HAL_UART_MspInit+0x280>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d17e      	bne.n	80040a0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	4b33      	ldr	r3, [pc, #204]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	4a32      	ldr	r2, [pc, #200]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fb2:	4b30      	ldr	r3, [pc, #192]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	4a2b      	ldr	r2, [pc, #172]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <HAL_UART_MspInit+0x264>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8003fda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fec:	2307      	movs	r3, #7
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4827      	ldr	r0, [pc, #156]	@ (8004094 <HAL_UART_MspInit+0x284>)
 8003ff8:	f001 fe6c 	bl	8005cd4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003ffc:	4b26      	ldr	r3, [pc, #152]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8003ffe:	4a27      	ldr	r2, [pc, #156]	@ (800409c <HAL_UART_MspInit+0x28c>)
 8004000:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004002:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004004:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004008:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800400a:	4b23      	ldr	r3, [pc, #140]	@ (8004098 <HAL_UART_MspInit+0x288>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004010:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004016:	4b20      	ldr	r3, [pc, #128]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800401c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401e:	4b1e      	ldr	r3, [pc, #120]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004020:	2200      	movs	r2, #0
 8004022:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004024:	4b1c      	ldr	r3, [pc, #112]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004026:	2200      	movs	r2, #0
 8004028:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800402a:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <HAL_UART_MspInit+0x288>)
 800402c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004030:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004032:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004034:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004038:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800403a:	4b17      	ldr	r3, [pc, #92]	@ (8004098 <HAL_UART_MspInit+0x288>)
 800403c:	2200      	movs	r2, #0
 800403e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004040:	4815      	ldr	r0, [pc, #84]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004042:	f001 fa45 	bl	80054d0 <HAL_DMA_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800404c:	f7ff faa4 	bl	8003598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a11      	ldr	r2, [pc, #68]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38
 8004056:	4a10      	ldr	r2, [pc, #64]	@ (8004098 <HAL_UART_MspInit+0x288>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800405c:	2200      	movs	r2, #0
 800405e:	2105      	movs	r1, #5
 8004060:	2027      	movs	r0, #39	@ 0x27
 8004062:	f001 f9fe 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004066:	2027      	movs	r0, #39	@ 0x27
 8004068:	f001 fa17 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 800406c:	e0b1      	b.n	80041d2 <HAL_UART_MspInit+0x3c2>
 800406e:	bf00      	nop
 8004070:	40011000 	.word	0x40011000
 8004074:	40023800 	.word	0x40023800
 8004078:	40020400 	.word	0x40020400
 800407c:	40020000 	.word	0x40020000
 8004080:	20000904 	.word	0x20000904
 8004084:	400264b8 	.word	0x400264b8
 8004088:	20000964 	.word	0x20000964
 800408c:	40026440 	.word	0x40026440
 8004090:	40004800 	.word	0x40004800
 8004094:	40020800 	.word	0x40020800
 8004098:	200009c4 	.word	0x200009c4
 800409c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a4d      	ldr	r2, [pc, #308]	@ (80041dc <HAL_UART_MspInit+0x3cc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f040 8093 	bne.w	80041d2 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	4b4b      	ldr	r3, [pc, #300]	@ (80041e0 <HAL_UART_MspInit+0x3d0>)
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	4a4a      	ldr	r2, [pc, #296]	@ (80041e0 <HAL_UART_MspInit+0x3d0>)
 80040b6:	f043 0320 	orr.w	r3, r3, #32
 80040ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80040bc:	4b48      	ldr	r3, [pc, #288]	@ (80041e0 <HAL_UART_MspInit+0x3d0>)
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040c8:	2300      	movs	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]
 80040cc:	4b44      	ldr	r3, [pc, #272]	@ (80041e0 <HAL_UART_MspInit+0x3d0>)
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	4a43      	ldr	r2, [pc, #268]	@ (80041e0 <HAL_UART_MspInit+0x3d0>)
 80040d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d8:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <HAL_UART_MspInit+0x3d0>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80040e4:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ea:	2302      	movs	r3, #2
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040f6:	2308      	movs	r3, #8
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040fe:	4619      	mov	r1, r3
 8004100:	4838      	ldr	r0, [pc, #224]	@ (80041e4 <HAL_UART_MspInit+0x3d4>)
 8004102:	f001 fde7 	bl	8005cd4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004106:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 8004108:	4a38      	ldr	r2, [pc, #224]	@ (80041ec <HAL_UART_MspInit+0x3dc>)
 800410a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800410c:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 800410e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004112:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004114:	4b34      	ldr	r3, [pc, #208]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800411a:	4b33      	ldr	r3, [pc, #204]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 800411c:	2200      	movs	r2, #0
 800411e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004120:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 8004122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004126:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004128:	4b2f      	ldr	r3, [pc, #188]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 800412a:	2200      	movs	r2, #0
 800412c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800412e:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004134:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800413a:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 800413c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004140:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004142:	4b29      	ldr	r3, [pc, #164]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 8004144:	2200      	movs	r2, #0
 8004146:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004148:	4827      	ldr	r0, [pc, #156]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 800414a:	f001 f9c1 	bl	80054d0 <HAL_DMA_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004154:	f7ff fa20 	bl	8003598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a23      	ldr	r2, [pc, #140]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 800415c:	639a      	str	r2, [r3, #56]	@ 0x38
 800415e:	4a22      	ldr	r2, [pc, #136]	@ (80041e8 <HAL_UART_MspInit+0x3d8>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004164:	4b22      	ldr	r3, [pc, #136]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 8004166:	4a23      	ldr	r2, [pc, #140]	@ (80041f4 <HAL_UART_MspInit+0x3e4>)
 8004168:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800416a:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 800416c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004170:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004172:	4b1f      	ldr	r3, [pc, #124]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 8004174:	2240      	movs	r2, #64	@ 0x40
 8004176:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004178:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 800417a:	2200      	movs	r2, #0
 800417c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800417e:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 8004180:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004184:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004186:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800418c:	4b18      	ldr	r3, [pc, #96]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 800418e:	2200      	movs	r2, #0
 8004190:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004192:	4b17      	ldr	r3, [pc, #92]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 8004194:	2200      	movs	r2, #0
 8004196:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004198:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 800419a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800419e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a0:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80041a6:	4812      	ldr	r0, [pc, #72]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 80041a8:	f001 f992 	bl	80054d0 <HAL_DMA_Init>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 80041b2:	f7ff f9f1 	bl	8003598 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 80041ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80041bc:	4a0c      	ldr	r2, [pc, #48]	@ (80041f0 <HAL_UART_MspInit+0x3e0>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2105      	movs	r1, #5
 80041c6:	2047      	movs	r0, #71	@ 0x47
 80041c8:	f001 f94b 	bl	8005462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80041cc:	2047      	movs	r0, #71	@ 0x47
 80041ce:	f001 f964 	bl	800549a <HAL_NVIC_EnableIRQ>
}
 80041d2:	bf00      	nop
 80041d4:	3738      	adds	r7, #56	@ 0x38
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40011400 	.word	0x40011400
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40021800 	.word	0x40021800
 80041e8:	20000a24 	.word	0x20000a24
 80041ec:	40026428 	.word	0x40026428
 80041f0:	20000a84 	.word	0x20000a84
 80041f4:	400264a0 	.word	0x400264a0

080041f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80041fc:	f002 fb84 	bl	8006908 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <NMI_Handler+0x8>

08004204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <HardFault_Handler+0x4>

0800420c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004210:	bf00      	nop
 8004212:	e7fd      	b.n	8004210 <MemManage_Handler+0x4>

08004214 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004218:	bf00      	nop
 800421a:	e7fd      	b.n	8004218 <BusFault_Handler+0x4>

0800421c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <UsageFault_Handler+0x4>

08004224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004236:	f000 f9b7 	bl	80045a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800423a:	f006 fac1 	bl	800a7c0 <xTaskGetSchedulerState>
 800423e:	4603      	mov	r3, r0
 8004240:	2b01      	cmp	r3, #1
 8004242:	d001      	beq.n	8004248 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004244:	f007 f8b8 	bl	800b3b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}

0800424c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004250:	4802      	ldr	r0, [pc, #8]	@ (800425c <DMA1_Stream1_IRQHandler+0x10>)
 8004252:	f001 fad5 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200009c4 	.word	0x200009c4

08004260 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004264:	4802      	ldr	r0, [pc, #8]	@ (8004270 <CAN1_RX0_IRQHandler+0x10>)
 8004266:	f000 fdf2 	bl	8004e4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200006b8 	.word	0x200006b8

08004274 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004278:	4802      	ldr	r0, [pc, #8]	@ (8004284 <USART1_IRQHandler+0x10>)
 800427a:	f003 fc53 	bl	8007b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000838 	.word	0x20000838

08004288 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800428c:	4802      	ldr	r0, [pc, #8]	@ (8004298 <DMA2_Stream1_IRQHandler+0x10>)
 800428e:	f001 fab7 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000a24 	.word	0x20000a24

0800429c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80042a0:	4802      	ldr	r0, [pc, #8]	@ (80042ac <DMA2_Stream2_IRQHandler+0x10>)
 80042a2:	f001 faad 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000964 	.word	0x20000964

080042b0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80042b4:	4802      	ldr	r0, [pc, #8]	@ (80042c0 <CAN2_RX0_IRQHandler+0x10>)
 80042b6:	f000 fdca 	bl	8004e4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200006e0 	.word	0x200006e0

080042c4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80042c8:	4802      	ldr	r0, [pc, #8]	@ (80042d4 <DMA2_Stream6_IRQHandler+0x10>)
 80042ca:	f001 fa99 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000a84 	.word	0x20000a84

080042d8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80042dc:	4802      	ldr	r0, [pc, #8]	@ (80042e8 <DMA2_Stream7_IRQHandler+0x10>)
 80042de:	f001 fa8f 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000904 	.word	0x20000904

080042ec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80042f0:	4802      	ldr	r0, [pc, #8]	@ (80042fc <USART6_IRQHandler+0x10>)
 80042f2:	f003 fc17 	bl	8007b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200008c0 	.word	0x200008c0

08004300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return 1;
 8004304:	2301      	movs	r3, #1
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_kill>:

int _kill(int pid, int sig)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800431a:	f008 f8f3 	bl	800c504 <__errno>
 800431e:	4603      	mov	r3, r0
 8004320:	2216      	movs	r2, #22
 8004322:	601a      	str	r2, [r3, #0]
  return -1;
 8004324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_exit>:

void _exit (int status)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004338:	f04f 31ff 	mov.w	r1, #4294967295
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ffe7 	bl	8004310 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <_exit+0x12>

08004346 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e00a      	b.n	800436e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004358:	f3af 8000 	nop.w
 800435c:	4601      	mov	r1, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	60ba      	str	r2, [r7, #8]
 8004364:	b2ca      	uxtb	r2, r1
 8004366:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3301      	adds	r3, #1
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	dbf0      	blt.n	8004358 <_read+0x12>
  }

  return len;
 8004376:	687b      	ldr	r3, [r7, #4]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e009      	b.n	80043a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	60ba      	str	r2, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3301      	adds	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	dbf1      	blt.n	8004392 <_write+0x12>
  }
  return len;
 80043ae:	687b      	ldr	r3, [r7, #4]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <_close>:

int _close(int file)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043e0:	605a      	str	r2, [r3, #4]
  return 0;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <_isatty>:

int _isatty(int file)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004428:	4a14      	ldr	r2, [pc, #80]	@ (800447c <_sbrk+0x5c>)
 800442a:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <_sbrk+0x60>)
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004434:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <_sbrk+0x64>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800443c:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <_sbrk+0x64>)
 800443e:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <_sbrk+0x68>)
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <_sbrk+0x64>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	429a      	cmp	r2, r3
 800444e:	d207      	bcs.n	8004460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004450:	f008 f858 	bl	800c504 <__errno>
 8004454:	4603      	mov	r3, r0
 8004456:	220c      	movs	r2, #12
 8004458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	e009      	b.n	8004474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004460:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <_sbrk+0x64>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004466:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <_sbrk+0x64>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	4a05      	ldr	r2, [pc, #20]	@ (8004484 <_sbrk+0x64>)
 8004470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20020000 	.word	0x20020000
 8004480:	00000400 	.word	0x00000400
 8004484:	20000b68 	.word	0x20000b68
 8004488:	200056a8 	.word	0x200056a8

0800448c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004490:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <SystemInit+0x20>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <SystemInit+0x20>)
 8004498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800449c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044b4:	480d      	ldr	r0, [pc, #52]	@ (80044ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044b6:	490e      	ldr	r1, [pc, #56]	@ (80044f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044b8:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044bc:	e002      	b.n	80044c4 <LoopCopyDataInit>

080044be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044c2:	3304      	adds	r3, #4

080044c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c8:	d3f9      	bcc.n	80044be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ca:	4a0b      	ldr	r2, [pc, #44]	@ (80044f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044cc:	4c0b      	ldr	r4, [pc, #44]	@ (80044fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80044ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044d0:	e001      	b.n	80044d6 <LoopFillZerobss>

080044d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d4:	3204      	adds	r2, #4

080044d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d8:	d3fb      	bcc.n	80044d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044da:	f7ff ffd7 	bl	800448c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044de:	f008 f817 	bl	800c510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044e2:	f7fd fb5b 	bl	8001b9c <main>
  bx  lr    
 80044e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044f0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80044f4:	0800fd48 	.word	0x0800fd48
  ldr r2, =_sbss
 80044f8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80044fc:	200056a4 	.word	0x200056a4

08004500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004500:	e7fe      	b.n	8004500 <ADC_IRQHandler>
	...

08004504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <HAL_Init+0x40>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0d      	ldr	r2, [pc, #52]	@ (8004544 <HAL_Init+0x40>)
 800450e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004514:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <HAL_Init+0x40>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a0a      	ldr	r2, [pc, #40]	@ (8004544 <HAL_Init+0x40>)
 800451a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800451e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004520:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <HAL_Init+0x40>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a07      	ldr	r2, [pc, #28]	@ (8004544 <HAL_Init+0x40>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800452c:	2003      	movs	r0, #3
 800452e:	f000 ff8d 	bl	800544c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004532:	200f      	movs	r0, #15
 8004534:	f000 f808 	bl	8004548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004538:	f7ff fa20 	bl	800397c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023c00 	.word	0x40023c00

08004548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004550:	4b12      	ldr	r3, [pc, #72]	@ (800459c <HAL_InitTick+0x54>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <HAL_InitTick+0x58>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800455e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ffa5 	bl	80054b6 <HAL_SYSTICK_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e00e      	b.n	8004594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	d80a      	bhi.n	8004592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800457c:	2200      	movs	r2, #0
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	f000 ff6d 	bl	8005462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004588:	4a06      	ldr	r2, [pc, #24]	@ (80045a4 <HAL_InitTick+0x5c>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000020 	.word	0x20000020
 80045a0:	20000028 	.word	0x20000028
 80045a4:	20000024 	.word	0x20000024

080045a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <HAL_IncTick+0x20>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_IncTick+0x24>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	4a04      	ldr	r2, [pc, #16]	@ (80045cc <HAL_IncTick+0x24>)
 80045ba:	6013      	str	r3, [r2, #0]
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000028 	.word	0x20000028
 80045cc:	20000b6c 	.word	0x20000b6c

080045d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return uwTick;
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <HAL_GetTick+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000b6c 	.word	0x20000b6c

080045e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0ed      	b.n	80047d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff f9e4 	bl	80039d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800461c:	f7ff ffd8 	bl	80045d0 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004622:	e012      	b.n	800464a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004624:	f7ff ffd4 	bl	80045d0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b0a      	cmp	r3, #10
 8004630:	d90b      	bls.n	800464a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2205      	movs	r2, #5
 8004642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0c5      	b.n	80047d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0e5      	beq.n	8004624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0202 	bic.w	r2, r2, #2
 8004666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004668:	f7ff ffb2 	bl	80045d0 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800466e:	e012      	b.n	8004696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004670:	f7ff ffae 	bl	80045d0 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b0a      	cmp	r3, #10
 800467c:	d90b      	bls.n	8004696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2205      	movs	r2, #5
 800468e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e09f      	b.n	80047d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7e1b      	ldrb	r3, [r3, #24]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d108      	bne.n	80046be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e007      	b.n	80046ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	7e5b      	ldrb	r3, [r3, #25]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d108      	bne.n	80046e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e007      	b.n	80046f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7e9b      	ldrb	r3, [r3, #26]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d108      	bne.n	8004712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0220 	orr.w	r2, r2, #32
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e007      	b.n	8004722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0220 	bic.w	r2, r2, #32
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7edb      	ldrb	r3, [r3, #27]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d108      	bne.n	800473c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0210 	bic.w	r2, r2, #16
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e007      	b.n	800474c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0210 	orr.w	r2, r2, #16
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7f1b      	ldrb	r3, [r3, #28]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d108      	bne.n	8004766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0208 	orr.w	r2, r2, #8
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e007      	b.n	8004776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0208 	bic.w	r2, r2, #8
 8004774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	7f5b      	ldrb	r3, [r3, #29]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d108      	bne.n	8004790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0204 	orr.w	r2, r2, #4
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e007      	b.n	80047a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	ea42 0103 	orr.w	r1, r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d003      	beq.n	8004806 <HAL_CAN_ConfigFilter+0x26>
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f040 80be 	bne.w	8004982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004806:	4b65      	ldr	r3, [pc, #404]	@ (800499c <HAL_CAN_ConfigFilter+0x1bc>)
 8004808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004820:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	431a      	orrs	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2201      	movs	r2, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d123      	bne.n	80048b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	43db      	mvns	r3, r3
 8004872:	401a      	ands	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800488a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3248      	adds	r2, #72	@ 0x48
 8004890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048a6:	6979      	ldr	r1, [r7, #20]
 80048a8:	3348      	adds	r3, #72	@ 0x48
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	440b      	add	r3, r1
 80048ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d122      	bne.n	80048fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80048d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3248      	adds	r2, #72	@ 0x48
 80048de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048f4:	6979      	ldr	r1, [r7, #20]
 80048f6:	3348      	adds	r3, #72	@ 0x48
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	440b      	add	r3, r1
 80048fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	43db      	mvns	r3, r3
 8004910:	401a      	ands	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004918:	e007      	b.n	800492a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	431a      	orrs	r2, r3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	43db      	mvns	r3, r3
 800493c:	401a      	ands	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004944:	e007      	b.n	8004956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	431a      	orrs	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d107      	bne.n	800496e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	431a      	orrs	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004974:	f023 0201 	bic.w	r2, r3, #1
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e006      	b.n	8004990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
  }
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40006400 	.word	0x40006400

080049a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d12e      	bne.n	8004a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049cc:	f7ff fe00 	bl	80045d0 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80049d2:	e012      	b.n	80049fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049d4:	f7ff fdfc 	bl	80045d0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b0a      	cmp	r3, #10
 80049e0:	d90b      	bls.n	80049fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2205      	movs	r2, #5
 80049f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e012      	b.n	8004a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e006      	b.n	8004a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b089      	sub	sp, #36	@ 0x24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a46:	7ffb      	ldrb	r3, [r7, #31]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d003      	beq.n	8004a54 <HAL_CAN_AddTxMessage+0x2c>
 8004a4c:	7ffb      	ldrb	r3, [r7, #31]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	f040 80b8 	bne.w	8004bc4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80a0 	beq.w	8004bb4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	0e1b      	lsrs	r3, r3, #24
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d907      	bls.n	8004a94 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e09e      	b.n	8004bd2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004a94:	2201      	movs	r2, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10d      	bne.n	8004ac2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	6809      	ldr	r1, [r1, #0]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3318      	adds	r3, #24
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	440b      	add	r3, r1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e00f      	b.n	8004ae2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004acc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ad2:	68f9      	ldr	r1, [r7, #12]
 8004ad4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004ad6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3318      	adds	r3, #24
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	440b      	add	r3, r1
 8004ae0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3318      	adds	r3, #24
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	440b      	add	r3, r1
 8004af2:	3304      	adds	r3, #4
 8004af4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	7d1b      	ldrb	r3, [r3, #20]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d111      	bne.n	8004b22 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	3318      	adds	r3, #24
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4413      	add	r3, r2
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	6811      	ldr	r1, [r2, #0]
 8004b12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3304      	adds	r3, #4
 8004b20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3307      	adds	r3, #7
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	061a      	lsls	r2, r3, #24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3306      	adds	r3, #6
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3305      	adds	r3, #5
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	3204      	adds	r2, #4
 8004b42:	7812      	ldrb	r2, [r2, #0]
 8004b44:	4610      	mov	r0, r2
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	ea43 0200 	orr.w	r2, r3, r0
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	440b      	add	r3, r1
 8004b54:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004b58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3303      	adds	r3, #3
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	061a      	lsls	r2, r3, #24
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3302      	adds	r3, #2
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	4313      	orrs	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	6811      	ldr	r1, [r2, #0]
 8004b80:	ea43 0200 	orr.w	r2, r3, r0
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	440b      	add	r3, r1
 8004b8a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004b8e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3318      	adds	r3, #24
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	4413      	add	r3, r2
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6811      	ldr	r1, [r2, #0]
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3318      	adds	r3, #24
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	440b      	add	r3, r1
 8004bae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e00e      	b.n	8004bd2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e006      	b.n	8004bd2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
  }
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3724      	adds	r7, #36	@ 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004bde:	b480      	push	{r7}
 8004be0:	b087      	sub	sp, #28
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <HAL_CAN_GetRxMessage+0x24>
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f040 80f3 	bne.w	8004de8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10e      	bne.n	8004c26 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d116      	bne.n	8004c44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0e7      	b.n	8004df6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0d8      	b.n	8004df6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	331b      	adds	r3, #27
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	4413      	add	r3, r2
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0204 	and.w	r2, r3, #4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	331b      	adds	r3, #27
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	4413      	add	r3, r2
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0d5b      	lsrs	r3, r3, #21
 8004c72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e00b      	b.n	8004c94 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	331b      	adds	r3, #27
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	4413      	add	r3, r2
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	08db      	lsrs	r3, r3, #3
 8004c8c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	331b      	adds	r3, #27
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	4413      	add	r3, r2
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0202 	and.w	r2, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	331b      	adds	r3, #27
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 020f 	and.w	r2, r3, #15
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	331b      	adds	r3, #27
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	4413      	add	r3, r2
 8004cce:	3304      	adds	r3, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	331b      	adds	r3, #27
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0a1a      	lsrs	r2, r3, #8
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	0c1a      	lsrs	r2, r3, #16
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	3302      	adds	r3, #2
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0e1a      	lsrs	r2, r3, #24
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3303      	adds	r3, #3
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	0a1a      	lsrs	r2, r3, #8
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	3305      	adds	r3, #5
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0c1a      	lsrs	r2, r3, #16
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	3306      	adds	r3, #6
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0e1a      	lsrs	r2, r3, #24
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	3307      	adds	r3, #7
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d108      	bne.n	8004dd4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0220 	orr.w	r2, r2, #32
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	e007      	b.n	8004de4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0220 	orr.w	r2, r2, #32
 8004de2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e006      	b.n	8004df6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e12:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d002      	beq.n	8004e20 <HAL_CAN_ActivateNotification+0x1e>
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d109      	bne.n	8004e34 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e006      	b.n	8004e42 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b08a      	sub	sp, #40	@ 0x28
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d07c      	beq.n	8004f8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d023      	beq.n	8004ee6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f983 	bl	80051bc <HAL_CAN_TxMailbox0CompleteCallback>
 8004eb6:	e016      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d004      	beq.n	8004ecc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eca:	e00c      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ede:	e002      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f989 	bl	80051f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d024      	beq.n	8004f3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ef8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f963 	bl	80051d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8004f0a:	e016      	b.n	8004f3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1e:	e00c      	b.n	8004f3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f32:	e002      	b.n	8004f3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f969 	bl	800520c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d024      	beq.n	8004f8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004f4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f943 	bl	80051e4 <HAL_CAN_TxMailbox2CompleteCallback>
 8004f5e:	e016      	b.n	8004f8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f72:	e00c      	b.n	8004f8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f86:	e002      	b.n	8004f8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f949 	bl	8005220 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d007      	beq.n	8004fb2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2210      	movs	r2, #16
 8004fb0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00b      	beq.n	8004fd4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d006      	beq.n	8004fd4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2208      	movs	r2, #8
 8004fcc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f930 	bl	8005234 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fb ff53 	bl	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00c      	beq.n	8005016 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2210      	movs	r2, #16
 8005014:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00b      	beq.n	8005038 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d006      	beq.n	8005038 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2208      	movs	r2, #8
 8005030:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f912 	bl	800525c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f8f9 	bl	8005248 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00b      	beq.n	8005078 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2210      	movs	r2, #16
 8005070:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8fc 	bl	8005270 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d006      	beq.n	800509a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f8f5 	bl	8005284 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d07b      	beq.n	800519c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d072      	beq.n	8005194 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005108:	2b00      	cmp	r3, #0
 800510a:	d043      	beq.n	8005194 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005112:	2b00      	cmp	r3, #0
 8005114:	d03e      	beq.n	8005194 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800511c:	2b60      	cmp	r3, #96	@ 0x60
 800511e:	d02b      	beq.n	8005178 <HAL_CAN_IRQHandler+0x32a>
 8005120:	2b60      	cmp	r3, #96	@ 0x60
 8005122:	d82e      	bhi.n	8005182 <HAL_CAN_IRQHandler+0x334>
 8005124:	2b50      	cmp	r3, #80	@ 0x50
 8005126:	d022      	beq.n	800516e <HAL_CAN_IRQHandler+0x320>
 8005128:	2b50      	cmp	r3, #80	@ 0x50
 800512a:	d82a      	bhi.n	8005182 <HAL_CAN_IRQHandler+0x334>
 800512c:	2b40      	cmp	r3, #64	@ 0x40
 800512e:	d019      	beq.n	8005164 <HAL_CAN_IRQHandler+0x316>
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	d826      	bhi.n	8005182 <HAL_CAN_IRQHandler+0x334>
 8005134:	2b30      	cmp	r3, #48	@ 0x30
 8005136:	d010      	beq.n	800515a <HAL_CAN_IRQHandler+0x30c>
 8005138:	2b30      	cmp	r3, #48	@ 0x30
 800513a:	d822      	bhi.n	8005182 <HAL_CAN_IRQHandler+0x334>
 800513c:	2b10      	cmp	r3, #16
 800513e:	d002      	beq.n	8005146 <HAL_CAN_IRQHandler+0x2f8>
 8005140:	2b20      	cmp	r3, #32
 8005142:	d005      	beq.n	8005150 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005144:	e01d      	b.n	8005182 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	f043 0308 	orr.w	r3, r3, #8
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800514e:	e019      	b.n	8005184 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	f043 0310 	orr.w	r3, r3, #16
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005158:	e014      	b.n	8005184 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	f043 0320 	orr.w	r3, r3, #32
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005162:	e00f      	b.n	8005184 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800516c:	e00a      	b.n	8005184 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005176:	e005      	b.n	8005184 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005180:	e000      	b.n	8005184 <HAL_CAN_IRQHandler+0x336>
            break;
 8005182:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005192:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2204      	movs	r2, #4
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f872 	bl	8005298 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80051b4:	bf00      	nop
 80051b6:	3728      	adds	r7, #40	@ 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052bc:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <__NVIC_SetPriorityGrouping+0x44>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052c8:	4013      	ands	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052de:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <__NVIC_SetPriorityGrouping+0x44>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	60d3      	str	r3, [r2, #12]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052f8:	4b04      	ldr	r3, [pc, #16]	@ (800530c <__NVIC_GetPriorityGrouping+0x18>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	f003 0307 	and.w	r3, r3, #7
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	e000ed00 	.word	0xe000ed00

08005310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800531a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531e:	2b00      	cmp	r3, #0
 8005320:	db0b      	blt.n	800533a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	f003 021f 	and.w	r2, r3, #31
 8005328:	4907      	ldr	r1, [pc, #28]	@ (8005348 <__NVIC_EnableIRQ+0x38>)
 800532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2001      	movs	r0, #1
 8005332:	fa00 f202 	lsl.w	r2, r0, r2
 8005336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	e000e100 	.word	0xe000e100

0800534c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	6039      	str	r1, [r7, #0]
 8005356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	db0a      	blt.n	8005376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	490c      	ldr	r1, [pc, #48]	@ (8005398 <__NVIC_SetPriority+0x4c>)
 8005366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	440b      	add	r3, r1
 8005370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005374:	e00a      	b.n	800538c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4908      	ldr	r1, [pc, #32]	@ (800539c <__NVIC_SetPriority+0x50>)
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	3b04      	subs	r3, #4
 8005384:	0112      	lsls	r2, r2, #4
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	440b      	add	r3, r1
 800538a:	761a      	strb	r2, [r3, #24]
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000e100 	.word	0xe000e100
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	@ 0x24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f1c3 0307 	rsb	r3, r3, #7
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	bf28      	it	cs
 80053be:	2304      	movcs	r3, #4
 80053c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3304      	adds	r3, #4
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d902      	bls.n	80053d0 <NVIC_EncodePriority+0x30>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3b03      	subs	r3, #3
 80053ce:	e000      	b.n	80053d2 <NVIC_EncodePriority+0x32>
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43da      	mvns	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	401a      	ands	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053e8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	43d9      	mvns	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053f8:	4313      	orrs	r3, r2
         );
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3724      	adds	r7, #36	@ 0x24
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3b01      	subs	r3, #1
 8005414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005418:	d301      	bcc.n	800541e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800541a:	2301      	movs	r3, #1
 800541c:	e00f      	b.n	800543e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800541e:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <SysTick_Config+0x40>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005426:	210f      	movs	r1, #15
 8005428:	f04f 30ff 	mov.w	r0, #4294967295
 800542c:	f7ff ff8e 	bl	800534c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005430:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <SysTick_Config+0x40>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005436:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <SysTick_Config+0x40>)
 8005438:	2207      	movs	r2, #7
 800543a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	e000e010 	.word	0xe000e010

0800544c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff29 	bl	80052ac <__NVIC_SetPriorityGrouping>
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005474:	f7ff ff3e 	bl	80052f4 <__NVIC_GetPriorityGrouping>
 8005478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f7ff ff8e 	bl	80053a0 <NVIC_EncodePriority>
 8005484:	4602      	mov	r2, r0
 8005486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548a:	4611      	mov	r1, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff5d 	bl	800534c <__NVIC_SetPriority>
}
 8005492:	bf00      	nop
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	4603      	mov	r3, r0
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff ff31 	bl	8005310 <__NVIC_EnableIRQ>
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ffa2 	bl	8005408 <SysTick_Config>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054dc:	f7ff f878 	bl	80045d0 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e099      	b.n	8005620 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800550c:	e00f      	b.n	800552e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800550e:	f7ff f85f 	bl	80045d0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b05      	cmp	r3, #5
 800551a:	d908      	bls.n	800552e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2203      	movs	r2, #3
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e078      	b.n	8005620 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e8      	bne.n	800550e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4b38      	ldr	r3, [pc, #224]	@ (8005628 <HAL_DMA_Init+0x158>)
 8005548:	4013      	ands	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800555a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	2b04      	cmp	r3, #4
 8005586:	d107      	bne.n	8005598 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005590:	4313      	orrs	r3, r2
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d117      	bne.n	80055f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb01 	bl	8005bdc <DMA_CheckFifoParam>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2240      	movs	r2, #64	@ 0x40
 80055e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80055ee:	2301      	movs	r3, #1
 80055f0:	e016      	b.n	8005620 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fab8 	bl	8005b70 <DMA_CalcBaseAndBitshift>
 8005600:	4603      	mov	r3, r0
 8005602:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005608:	223f      	movs	r2, #63	@ 0x3f
 800560a:	409a      	lsls	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	f010803f 	.word	0xf010803f

0800562c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_DMA_Start_IT+0x26>
 800564e:	2302      	movs	r3, #2
 8005650:	e040      	b.n	80056d4 <HAL_DMA_Start_IT+0xa8>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d12f      	bne.n	80056c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fa4a 	bl	8005b14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005684:	223f      	movs	r2, #63	@ 0x3f
 8005686:	409a      	lsls	r2, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0216 	orr.w	r2, r2, #22
 800569a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0208 	orr.w	r2, r2, #8
 80056b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e005      	b.n	80056d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
 80056d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056ea:	f7fe ff71 	bl	80045d0 <HAL_GetTick>
 80056ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d008      	beq.n	800570e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2280      	movs	r2, #128	@ 0x80
 8005700:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e052      	b.n	80057b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0216 	bic.w	r2, r2, #22
 800571c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800572c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <HAL_DMA_Abort+0x62>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0208 	bic.w	r2, r2, #8
 800574c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800575e:	e013      	b.n	8005788 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005760:	f7fe ff36 	bl	80045d0 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b05      	cmp	r3, #5
 800576c:	d90c      	bls.n	8005788 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2203      	movs	r2, #3
 8005778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e015      	b.n	80057b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e4      	bne.n	8005760 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579a:	223f      	movs	r2, #63	@ 0x3f
 800579c:	409a      	lsls	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2280      	movs	r2, #128	@ 0x80
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e00c      	b.n	80057f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2205      	movs	r2, #5
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800580c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a48 <HAL_DMA_IRQHandler+0x248>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a8e      	ldr	r2, [pc, #568]	@ (8005a4c <HAL_DMA_IRQHandler+0x24c>)
 8005812:	fba2 2303 	umull	r2, r3, r2, r3
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582a:	2208      	movs	r2, #8
 800582c:	409a      	lsls	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01a      	beq.n	800586c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0204 	bic.w	r2, r2, #4
 8005852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	2208      	movs	r2, #8
 800585a:	409a      	lsls	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005864:	f043 0201 	orr.w	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d012      	beq.n	80058a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588e:	2201      	movs	r2, #1
 8005890:	409a      	lsls	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589a:	f043 0202 	orr.w	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a6:	2204      	movs	r2, #4
 80058a8:	409a      	lsls	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4013      	ands	r3, r2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00b      	beq.n	80058d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c4:	2204      	movs	r2, #4
 80058c6:	409a      	lsls	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d0:	f043 0204 	orr.w	r2, r3, #4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058dc:	2210      	movs	r2, #16
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4013      	ands	r3, r2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d043      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03c      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fa:	2210      	movs	r2, #16
 80058fc:	409a      	lsls	r2, r3
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d018      	beq.n	8005942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d108      	bne.n	8005930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d024      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
 800592e:	e01f      	b.n	8005970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01b      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
 8005940:	e016      	b.n	8005970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0208 	bic.w	r2, r2, #8
 800595e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005974:	2220      	movs	r2, #32
 8005976:	409a      	lsls	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 808f 	beq.w	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8087 	beq.w	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005996:	2220      	movs	r2, #32
 8005998:	409a      	lsls	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d136      	bne.n	8005a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0216 	bic.w	r2, r2, #22
 80059b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <HAL_DMA_IRQHandler+0x1da>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0208 	bic.w	r2, r2, #8
 80059e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ee:	223f      	movs	r2, #63	@ 0x3f
 80059f0:	409a      	lsls	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d07e      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
        }
        return;
 8005a16:	e079      	b.n	8005b0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01d      	beq.n	8005a62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10d      	bne.n	8005a50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d031      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
 8005a44:	e02c      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
 8005a46:	bf00      	nop
 8005a48:	20000020 	.word	0x20000020
 8005a4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d023      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
 8005a60:	e01e      	b.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0210 	bic.w	r2, r2, #16
 8005a7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d032      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d022      	beq.n	8005afa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2205      	movs	r2, #5
 8005ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d307      	bcc.n	8005ae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f2      	bne.n	8005acc <HAL_DMA_IRQHandler+0x2cc>
 8005ae6:	e000      	b.n	8005aea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
 8005b0a:	e000      	b.n	8005b0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b0c:	bf00      	nop
    }
  }
}
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b40      	cmp	r3, #64	@ 0x40
 8005b40:	d108      	bne.n	8005b54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b52:	e007      	b.n	8005b64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	60da      	str	r2, [r3, #12]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	3b10      	subs	r3, #16
 8005b80:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <DMA_CalcBaseAndBitshift+0x64>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b8a:	4a13      	ldr	r2, [pc, #76]	@ (8005bd8 <DMA_CalcBaseAndBitshift+0x68>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d909      	bls.n	8005bb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	1d1a      	adds	r2, r3, #4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bb0:	e007      	b.n	8005bc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	aaaaaaab 	.word	0xaaaaaaab
 8005bd8:	0800f7e4 	.word	0x0800f7e4

08005bdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11f      	bne.n	8005c36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d856      	bhi.n	8005caa <DMA_CheckFifoParam+0xce>
 8005bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <DMA_CheckFifoParam+0x28>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c15 	.word	0x08005c15
 8005c08:	08005c27 	.word	0x08005c27
 8005c0c:	08005c15 	.word	0x08005c15
 8005c10:	08005cab 	.word	0x08005cab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d046      	beq.n	8005cae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c24:	e043      	b.n	8005cae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c2e:	d140      	bne.n	8005cb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c34:	e03d      	b.n	8005cb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c3e:	d121      	bne.n	8005c84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d837      	bhi.n	8005cb6 <DMA_CheckFifoParam+0xda>
 8005c46:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <DMA_CheckFifoParam+0x70>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c63 	.word	0x08005c63
 8005c54:	08005c5d 	.word	0x08005c5d
 8005c58:	08005c75 	.word	0x08005c75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c60:	e030      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d025      	beq.n	8005cba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c72:	e022      	b.n	8005cba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c7c:	d11f      	bne.n	8005cbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c82:	e01c      	b.n	8005cbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d903      	bls.n	8005c92 <DMA_CheckFifoParam+0xb6>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d003      	beq.n	8005c98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c90:	e018      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
      break;
 8005c96:	e015      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca8:	e00b      	b.n	8005cc2 <DMA_CheckFifoParam+0xe6>
      break;
 8005caa:	bf00      	nop
 8005cac:	e00a      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e008      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e006      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e004      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cc2:	bf00      	nop
    }
  } 
  
  return status; 
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop

08005cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b089      	sub	sp, #36	@ 0x24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	e16b      	b.n	8005fc8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4013      	ands	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	f040 815a 	bne.w	8005fc2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d005      	beq.n	8005d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d130      	bne.n	8005d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	2203      	movs	r2, #3
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	091b      	lsrs	r3, r3, #4
 8005d72:	f003 0201 	and.w	r2, r3, #1
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d017      	beq.n	8005dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	2203      	movs	r2, #3
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	4013      	ands	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d123      	bne.n	8005e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	08da      	lsrs	r2, r3, #3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3208      	adds	r2, #8
 8005dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	220f      	movs	r2, #15
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	08da      	lsrs	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3208      	adds	r2, #8
 8005e12:	69b9      	ldr	r1, [r7, #24]
 8005e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	2203      	movs	r2, #3
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 0203 	and.w	r2, r3, #3
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80b4 	beq.w	8005fc2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b60      	ldr	r3, [pc, #384]	@ (8005fe0 <HAL_GPIO_Init+0x30c>)
 8005e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e62:	4a5f      	ldr	r2, [pc, #380]	@ (8005fe0 <HAL_GPIO_Init+0x30c>)
 8005e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8005fe0 <HAL_GPIO_Init+0x30c>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e76:	4a5b      	ldr	r2, [pc, #364]	@ (8005fe4 <HAL_GPIO_Init+0x310>)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43db      	mvns	r3, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4013      	ands	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a52      	ldr	r2, [pc, #328]	@ (8005fe8 <HAL_GPIO_Init+0x314>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d02b      	beq.n	8005efa <HAL_GPIO_Init+0x226>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a51      	ldr	r2, [pc, #324]	@ (8005fec <HAL_GPIO_Init+0x318>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d025      	beq.n	8005ef6 <HAL_GPIO_Init+0x222>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a50      	ldr	r2, [pc, #320]	@ (8005ff0 <HAL_GPIO_Init+0x31c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d01f      	beq.n	8005ef2 <HAL_GPIO_Init+0x21e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8005ff4 <HAL_GPIO_Init+0x320>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d019      	beq.n	8005eee <HAL_GPIO_Init+0x21a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8005ff8 <HAL_GPIO_Init+0x324>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_GPIO_Init+0x216>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a4d      	ldr	r2, [pc, #308]	@ (8005ffc <HAL_GPIO_Init+0x328>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00d      	beq.n	8005ee6 <HAL_GPIO_Init+0x212>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a4c      	ldr	r2, [pc, #304]	@ (8006000 <HAL_GPIO_Init+0x32c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <HAL_GPIO_Init+0x20e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a4b      	ldr	r2, [pc, #300]	@ (8006004 <HAL_GPIO_Init+0x330>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <HAL_GPIO_Init+0x20a>
 8005eda:	2307      	movs	r3, #7
 8005edc:	e00e      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005ede:	2308      	movs	r3, #8
 8005ee0:	e00c      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005ee2:	2306      	movs	r3, #6
 8005ee4:	e00a      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005ee6:	2305      	movs	r3, #5
 8005ee8:	e008      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005eea:	2304      	movs	r3, #4
 8005eec:	e006      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e004      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e002      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_GPIO_Init+0x228>
 8005efa:	2300      	movs	r3, #0
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	f002 0203 	and.w	r2, r2, #3
 8005f02:	0092      	lsls	r2, r2, #2
 8005f04:	4093      	lsls	r3, r2
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f0c:	4935      	ldr	r1, [pc, #212]	@ (8005fe4 <HAL_GPIO_Init+0x310>)
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	3302      	adds	r3, #2
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f3e:	4a32      	ldr	r2, [pc, #200]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f44:	4b30      	ldr	r3, [pc, #192]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4013      	ands	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f68:	4a27      	ldr	r2, [pc, #156]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f6e:	4b26      	ldr	r3, [pc, #152]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f92:	4a1d      	ldr	r2, [pc, #116]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f98:	4b1b      	ldr	r3, [pc, #108]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fbc:	4a12      	ldr	r2, [pc, #72]	@ (8006008 <HAL_GPIO_Init+0x334>)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	f67f ae90 	bls.w	8005cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	3724      	adds	r7, #36	@ 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	40013800 	.word	0x40013800
 8005fe8:	40020000 	.word	0x40020000
 8005fec:	40020400 	.word	0x40020400
 8005ff0:	40020800 	.word	0x40020800
 8005ff4:	40020c00 	.word	0x40020c00
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	40021400 	.word	0x40021400
 8006000:	40021800 	.word	0x40021800
 8006004:	40021c00 	.word	0x40021c00
 8006008:	40013c00 	.word	0x40013c00

0800600c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	807b      	strh	r3, [r7, #2]
 8006018:	4613      	mov	r3, r2
 800601a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800601c:	787b      	ldrb	r3, [r7, #1]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006022:	887a      	ldrh	r2, [r7, #2]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006028:	e003      	b.n	8006032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800602a:	887b      	ldrh	r3, [r7, #2]
 800602c:	041a      	lsls	r2, r3, #16
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	619a      	str	r2, [r3, #24]
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e267      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d075      	beq.n	800614a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800605e:	4b88      	ldr	r3, [pc, #544]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b04      	cmp	r3, #4
 8006068:	d00c      	beq.n	8006084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800606a:	4b85      	ldr	r3, [pc, #532]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006072:	2b08      	cmp	r3, #8
 8006074:	d112      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006076:	4b82      	ldr	r3, [pc, #520]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006082:	d10b      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	4b7e      	ldr	r3, [pc, #504]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05b      	beq.n	8006148 <HAL_RCC_OscConfig+0x108>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d157      	bne.n	8006148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e242      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCC_OscConfig+0x74>
 80060a6:	4b76      	ldr	r3, [pc, #472]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a75      	ldr	r2, [pc, #468]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x98>
 80060be:	4b70      	ldr	r3, [pc, #448]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a6f      	ldr	r2, [pc, #444]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6c      	ldr	r2, [pc, #432]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060d8:	4b69      	ldr	r3, [pc, #420]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a68      	ldr	r2, [pc, #416]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b66      	ldr	r3, [pc, #408]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a65      	ldr	r2, [pc, #404]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fe fa6a 	bl	80045d0 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006100:	f7fe fa66 	bl	80045d0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e207      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006112:	4b5b      	ldr	r3, [pc, #364]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xc0>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fe fa56 	bl	80045d0 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006128:	f7fe fa52 	bl	80045d0 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	@ 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e1f3      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613a:	4b51      	ldr	r3, [pc, #324]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0xe8>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d063      	beq.n	800621e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006156:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006162:	4b47      	ldr	r3, [pc, #284]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800616a:	2b08      	cmp	r3, #8
 800616c:	d11c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616e:	4b44      	ldr	r3, [pc, #272]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	4b41      	ldr	r3, [pc, #260]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e1c7      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006192:	4b3b      	ldr	r3, [pc, #236]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4937      	ldr	r1, [pc, #220]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	e03a      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061b0:	4b34      	ldr	r3, [pc, #208]	@ (8006284 <HAL_RCC_OscConfig+0x244>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fe fa0b 	bl	80045d0 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061be:	f7fe fa07 	bl	80045d0 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e1a8      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061dc:	4b28      	ldr	r3, [pc, #160]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4925      	ldr	r1, [pc, #148]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
 80061f0:	e015      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061f2:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <HAL_RCC_OscConfig+0x244>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fe f9ea 	bl	80045d0 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006200:	f7fe f9e6 	bl	80045d0 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e187      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006212:	4b1b      	ldr	r3, [pc, #108]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d036      	beq.n	8006298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006232:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <HAL_RCC_OscConfig+0x248>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fe f9ca 	bl	80045d0 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006240:	f7fe f9c6 	bl	80045d0 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e167      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006252:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x200>
 800625e:	e01b      	b.n	8006298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006260:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <HAL_RCC_OscConfig+0x248>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006266:	f7fe f9b3 	bl	80045d0 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800626c:	e00e      	b.n	800628c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800626e:	f7fe f9af 	bl	80045d0 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d907      	bls.n	800628c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e150      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 8006280:	40023800 	.word	0x40023800
 8006284:	42470000 	.word	0x42470000
 8006288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800628c:	4b88      	ldr	r3, [pc, #544]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800628e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1ea      	bne.n	800626e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8097 	beq.w	80063d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062aa:	4b81      	ldr	r3, [pc, #516]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	4b7d      	ldr	r3, [pc, #500]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	4a7c      	ldr	r2, [pc, #496]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062c6:	4b7a      	ldr	r3, [pc, #488]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d6:	4b77      	ldr	r3, [pc, #476]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d118      	bne.n	8006314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062e2:	4b74      	ldr	r3, [pc, #464]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a73      	ldr	r2, [pc, #460]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ee:	f7fe f96f 	bl	80045d0 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f6:	f7fe f96b 	bl	80045d0 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e10c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006308:	4b6a      	ldr	r3, [pc, #424]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d106      	bne.n	800632a <HAL_RCC_OscConfig+0x2ea>
 800631c:	4b64      	ldr	r3, [pc, #400]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006320:	4a63      	ldr	r2, [pc, #396]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	6713      	str	r3, [r2, #112]	@ 0x70
 8006328:	e01c      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b05      	cmp	r3, #5
 8006330:	d10c      	bne.n	800634c <HAL_RCC_OscConfig+0x30c>
 8006332:	4b5f      	ldr	r3, [pc, #380]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	4a5e      	ldr	r2, [pc, #376]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006338:	f043 0304 	orr.w	r3, r3, #4
 800633c:	6713      	str	r3, [r2, #112]	@ 0x70
 800633e:	4b5c      	ldr	r3, [pc, #368]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	4a5b      	ldr	r2, [pc, #364]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	6713      	str	r3, [r2, #112]	@ 0x70
 800634a:	e00b      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800634c:	4b58      	ldr	r3, [pc, #352]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006350:	4a57      	ldr	r2, [pc, #348]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	6713      	str	r3, [r2, #112]	@ 0x70
 8006358:	4b55      	ldr	r3, [pc, #340]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635c:	4a54      	ldr	r2, [pc, #336]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 0304 	bic.w	r3, r3, #4
 8006362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fe f930 	bl	80045d0 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006372:	e00a      	b.n	800638a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fe f92c 	bl	80045d0 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e0cb      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	4b49      	ldr	r3, [pc, #292]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ee      	beq.n	8006374 <HAL_RCC_OscConfig+0x334>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006398:	f7fe f91a 	bl	80045d0 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fe f916 	bl	80045d0 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e0b5      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b6:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ee      	bne.n	80063a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d105      	bne.n	80063d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c8:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063cc:	4a38      	ldr	r2, [pc, #224]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80a1 	beq.w	8006520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063de:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d05c      	beq.n	80064a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d141      	bne.n	8006476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	4b31      	ldr	r3, [pc, #196]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fe f8ea 	bl	80045d0 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006400:	f7fe f8e6 	bl	80045d0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e087      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	019b      	lsls	r3, r3, #6
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	3b01      	subs	r3, #1
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	061b      	lsls	r3, r3, #24
 8006442:	491b      	ldr	r1, [pc, #108]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006444:	4313      	orrs	r3, r2
 8006446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006448:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644e:	f7fe f8bf 	bl	80045d0 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006456:	f7fe f8bb 	bl	80045d0 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e05c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006468:	4b11      	ldr	r3, [pc, #68]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x416>
 8006474:	e054      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006476:	4b10      	ldr	r3, [pc, #64]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647c:	f7fe f8a8 	bl	80045d0 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006484:	f7fe f8a4 	bl	80045d0 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e045      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x444>
 80064a2:	e03d      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d107      	bne.n	80064bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e038      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40007000 	.word	0x40007000
 80064b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064bc:	4b1b      	ldr	r3, [pc, #108]	@ (800652c <HAL_RCC_OscConfig+0x4ec>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d028      	beq.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d121      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d11a      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d111      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	3b01      	subs	r3, #1
 8006506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006508:	429a      	cmp	r2, r3
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800

08006530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0cc      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006544:	4b68      	ldr	r3, [pc, #416]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d90c      	bls.n	800656c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b65      	ldr	r3, [pc, #404]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655a:	4b63      	ldr	r3, [pc, #396]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0b8      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006584:	4b59      	ldr	r3, [pc, #356]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4a58      	ldr	r2, [pc, #352]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800658e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800659c:	4b53      	ldr	r3, [pc, #332]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a52      	ldr	r2, [pc, #328]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a8:	4b50      	ldr	r3, [pc, #320]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	494d      	ldr	r1, [pc, #308]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d044      	beq.n	8006650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	4b47      	ldr	r3, [pc, #284]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d119      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e07f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ee:	4b3f      	ldr	r3, [pc, #252]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e06f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fe:	4b3b      	ldr	r3, [pc, #236]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e067      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660e:	4b37      	ldr	r3, [pc, #220]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4934      	ldr	r1, [pc, #208]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006620:	f7fd ffd6 	bl	80045d0 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fd ffd2 	bl	80045d0 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e04f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	4b2b      	ldr	r3, [pc, #172]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 020c 	and.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d1eb      	bne.n	8006628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006650:	4b25      	ldr	r3, [pc, #148]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d20c      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665e:	4b22      	ldr	r3, [pc, #136]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d001      	beq.n	8006678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e032      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006684:	4b19      	ldr	r3, [pc, #100]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4916      	ldr	r1, [pc, #88]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066a2:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	490e      	ldr	r1, [pc, #56]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066b6:	f000 f82d 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	490a      	ldr	r1, [pc, #40]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c0>)
 80066c8:	5ccb      	ldrb	r3, [r1, r3]
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	4a09      	ldr	r2, [pc, #36]	@ (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066d2:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fd ff36 	bl	8004548 <HAL_InitTick>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40023c00 	.word	0x40023c00
 80066ec:	40023800 	.word	0x40023800
 80066f0:	0800f7cc 	.word	0x0800f7cc
 80066f4:	20000020 	.word	0x20000020
 80066f8:	20000024 	.word	0x20000024

080066fc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006700:	4b03      	ldr	r3, [pc, #12]	@ (8006710 <HAL_RCC_EnableCSS+0x14>)
 8006702:	2201      	movs	r2, #1
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	4247004c 	.word	0x4247004c

08006714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006718:	b090      	sub	sp, #64	@ 0x40
 800671a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006720:	2300      	movs	r3, #0
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006724:	2300      	movs	r3, #0
 8006726:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800672c:	4b59      	ldr	r3, [pc, #356]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x180>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 030c 	and.w	r3, r3, #12
 8006734:	2b08      	cmp	r3, #8
 8006736:	d00d      	beq.n	8006754 <HAL_RCC_GetSysClockFreq+0x40>
 8006738:	2b08      	cmp	r3, #8
 800673a:	f200 80a1 	bhi.w	8006880 <HAL_RCC_GetSysClockFreq+0x16c>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x34>
 8006742:	2b04      	cmp	r3, #4
 8006744:	d003      	beq.n	800674e <HAL_RCC_GetSysClockFreq+0x3a>
 8006746:	e09b      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006748:	4b53      	ldr	r3, [pc, #332]	@ (8006898 <HAL_RCC_GetSysClockFreq+0x184>)
 800674a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800674c:	e09b      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800674e:	4b53      	ldr	r3, [pc, #332]	@ (800689c <HAL_RCC_GetSysClockFreq+0x188>)
 8006750:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006752:	e098      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006754:	4b4f      	ldr	r3, [pc, #316]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x180>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800675e:	4b4d      	ldr	r3, [pc, #308]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x180>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d028      	beq.n	80067bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800676a:	4b4a      	ldr	r3, [pc, #296]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x180>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	099b      	lsrs	r3, r3, #6
 8006770:	2200      	movs	r2, #0
 8006772:	623b      	str	r3, [r7, #32]
 8006774:	627a      	str	r2, [r7, #36]	@ 0x24
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800677c:	2100      	movs	r1, #0
 800677e:	4b47      	ldr	r3, [pc, #284]	@ (800689c <HAL_RCC_GetSysClockFreq+0x188>)
 8006780:	fb03 f201 	mul.w	r2, r3, r1
 8006784:	2300      	movs	r3, #0
 8006786:	fb00 f303 	mul.w	r3, r0, r3
 800678a:	4413      	add	r3, r2
 800678c:	4a43      	ldr	r2, [pc, #268]	@ (800689c <HAL_RCC_GetSysClockFreq+0x188>)
 800678e:	fba0 1202 	umull	r1, r2, r0, r2
 8006792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006794:	460a      	mov	r2, r1
 8006796:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800679a:	4413      	add	r3, r2
 800679c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800679e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a0:	2200      	movs	r2, #0
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	61fa      	str	r2, [r7, #28]
 80067a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80067ae:	f7fa f9fb 	bl	8000ba8 <__aeabi_uldivmod>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4613      	mov	r3, r2
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ba:	e053      	b.n	8006864 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067bc:	4b35      	ldr	r3, [pc, #212]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x180>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	099b      	lsrs	r3, r3, #6
 80067c2:	2200      	movs	r2, #0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	617a      	str	r2, [r7, #20]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80067ce:	f04f 0b00 	mov.w	fp, #0
 80067d2:	4652      	mov	r2, sl
 80067d4:	465b      	mov	r3, fp
 80067d6:	f04f 0000 	mov.w	r0, #0
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	0159      	lsls	r1, r3, #5
 80067e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067e4:	0150      	lsls	r0, r2, #5
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	ebb2 080a 	subs.w	r8, r2, sl
 80067ee:	eb63 090b 	sbc.w	r9, r3, fp
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80067fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006802:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006806:	ebb2 0408 	subs.w	r4, r2, r8
 800680a:	eb63 0509 	sbc.w	r5, r3, r9
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	00eb      	lsls	r3, r5, #3
 8006818:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800681c:	00e2      	lsls	r2, r4, #3
 800681e:	4614      	mov	r4, r2
 8006820:	461d      	mov	r5, r3
 8006822:	eb14 030a 	adds.w	r3, r4, sl
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	eb45 030b 	adc.w	r3, r5, fp
 800682c:	607b      	str	r3, [r7, #4]
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800683a:	4629      	mov	r1, r5
 800683c:	028b      	lsls	r3, r1, #10
 800683e:	4621      	mov	r1, r4
 8006840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006844:	4621      	mov	r1, r4
 8006846:	028a      	lsls	r2, r1, #10
 8006848:	4610      	mov	r0, r2
 800684a:	4619      	mov	r1, r3
 800684c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684e:	2200      	movs	r2, #0
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	60fa      	str	r2, [r7, #12]
 8006854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006858:	f7fa f9a6 	bl	8000ba8 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006864:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x180>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	3301      	adds	r3, #1
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006874:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800687e:	e002      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006880:	4b05      	ldr	r3, [pc, #20]	@ (8006898 <HAL_RCC_GetSysClockFreq+0x184>)
 8006882:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006888:	4618      	mov	r0, r3
 800688a:	3740      	adds	r7, #64	@ 0x40
 800688c:	46bd      	mov	sp, r7
 800688e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006892:	bf00      	nop
 8006894:	40023800 	.word	0x40023800
 8006898:	00f42400 	.word	0x00f42400
 800689c:	00b71b00 	.word	0x00b71b00

080068a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a4:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000020 	.word	0x20000020

080068b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068bc:	f7ff fff0 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b05      	ldr	r3, [pc, #20]	@ (80068d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	0a9b      	lsrs	r3, r3, #10
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	4903      	ldr	r1, [pc, #12]	@ (80068dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ce:	5ccb      	ldrb	r3, [r1, r3]
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40023800 	.word	0x40023800
 80068dc:	0800f7dc 	.word	0x0800f7dc

080068e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068e4:	f7ff ffdc 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068e8:	4602      	mov	r2, r0
 80068ea:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	0b5b      	lsrs	r3, r3, #13
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4903      	ldr	r1, [pc, #12]	@ (8006904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40023800 	.word	0x40023800
 8006904:	0800f7dc 	.word	0x0800f7dc

08006908 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800690c:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <HAL_RCC_NMI_IRQHandler+0x20>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006914:	2b80      	cmp	r3, #128	@ 0x80
 8006916:	d104      	bne.n	8006922 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006918:	f000 f80a 	bl	8006930 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800691c:	4b03      	ldr	r3, [pc, #12]	@ (800692c <HAL_RCC_NMI_IRQHandler+0x24>)
 800691e:	2280      	movs	r2, #128	@ 0x80
 8006920:	701a      	strb	r2, [r3, #0]
  }
}
 8006922:	bf00      	nop
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800
 800692c:	4002380e 	.word	0x4002380e

08006930 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e07b      	b.n	8006a48 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d108      	bne.n	800696a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006960:	d009      	beq.n	8006976 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	61da      	str	r2, [r3, #28]
 8006968:	e005      	b.n	8006976 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fd f8cf 	bl	8003b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fa:	ea42 0103 	orr.w	r1, r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	0c1b      	lsrs	r3, r3, #16
 8006a14:	f003 0104 	and.w	r1, r3, #4
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	f003 0210 	and.w	r2, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69da      	ldr	r2, [r3, #28]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e041      	b.n	8006ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fd f8fc 	bl	8003c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f000 fb38 	bl	8007104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d001      	beq.n	8006b08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e046      	b.n	8006b96 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a23      	ldr	r2, [pc, #140]	@ (8006ba4 <HAL_TIM_Base_Start+0xb4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d022      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b22:	d01d      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1f      	ldr	r2, [pc, #124]	@ (8006ba8 <HAL_TIM_Base_Start+0xb8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1e      	ldr	r2, [pc, #120]	@ (8006bac <HAL_TIM_Base_Start+0xbc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb0 <HAL_TIM_Base_Start+0xc0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb4 <HAL_TIM_Base_Start+0xc4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a19      	ldr	r2, [pc, #100]	@ (8006bb8 <HAL_TIM_Base_Start+0xc8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_TIM_Base_Start+0x70>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a18      	ldr	r2, [pc, #96]	@ (8006bbc <HAL_TIM_Base_Start+0xcc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d111      	bne.n	8006b84 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d010      	beq.n	8006b94 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0201 	orr.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b82:	e007      	b.n	8006b94 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	40000c00 	.word	0x40000c00
 8006bb4:	40010400 	.word	0x40010400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40001800 	.word	0x40001800

08006bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e041      	b.n	8006c56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fd f80c 	bl	8003c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f000 fa80 	bl	8007104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d109      	bne.n	8006c84 <HAL_TIM_PWM_Start+0x24>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	e022      	b.n	8006cca <HAL_TIM_PWM_Start+0x6a>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d109      	bne.n	8006c9e <HAL_TIM_PWM_Start+0x3e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	bf14      	ite	ne
 8006c96:	2301      	movne	r3, #1
 8006c98:	2300      	moveq	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	e015      	b.n	8006cca <HAL_TIM_PWM_Start+0x6a>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d109      	bne.n	8006cb8 <HAL_TIM_PWM_Start+0x58>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	bf14      	ite	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	2300      	moveq	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	e008      	b.n	8006cca <HAL_TIM_PWM_Start+0x6a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e07c      	b.n	8006dcc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d104      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0x82>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ce0:	e013      	b.n	8006d0a <HAL_TIM_PWM_Start+0xaa>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d104      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0x92>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cf0:	e00b      	b.n	8006d0a <HAL_TIM_PWM_Start+0xaa>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_PWM_Start+0xa2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d00:	e003      	b.n	8006d0a <HAL_TIM_PWM_Start+0xaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2202      	movs	r2, #2
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fce0 	bl	80076d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd4 <HAL_TIM_PWM_Start+0x174>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <HAL_TIM_PWM_Start+0xcc>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd8 <HAL_TIM_PWM_Start+0x178>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIM_PWM_Start+0xd0>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <HAL_TIM_PWM_Start+0xd2>
 8006d30:	2300      	movs	r3, #0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a22      	ldr	r2, [pc, #136]	@ (8006dd4 <HAL_TIM_PWM_Start+0x174>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d022      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x136>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d58:	d01d      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x136>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <HAL_TIM_PWM_Start+0x17c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d018      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x136>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1d      	ldr	r2, [pc, #116]	@ (8006de0 <HAL_TIM_PWM_Start+0x180>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x136>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1c      	ldr	r2, [pc, #112]	@ (8006de4 <HAL_TIM_PWM_Start+0x184>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00e      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x136>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a16      	ldr	r2, [pc, #88]	@ (8006dd8 <HAL_TIM_PWM_Start+0x178>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d009      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x136>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a18      	ldr	r2, [pc, #96]	@ (8006de8 <HAL_TIM_PWM_Start+0x188>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d004      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x136>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a16      	ldr	r2, [pc, #88]	@ (8006dec <HAL_TIM_PWM_Start+0x18c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d111      	bne.n	8006dba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d010      	beq.n	8006dca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db8:	e007      	b.n	8006dca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0201 	orr.w	r2, r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40010000 	.word	0x40010000
 8006dd8:	40010400 	.word	0x40010400
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40001800 	.word	0x40001800

08006df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e0ae      	b.n	8006f6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b0c      	cmp	r3, #12
 8006e1a:	f200 809f 	bhi.w	8006f5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e59 	.word	0x08006e59
 8006e28:	08006f5d 	.word	0x08006f5d
 8006e2c:	08006f5d 	.word	0x08006f5d
 8006e30:	08006f5d 	.word	0x08006f5d
 8006e34:	08006e99 	.word	0x08006e99
 8006e38:	08006f5d 	.word	0x08006f5d
 8006e3c:	08006f5d 	.word	0x08006f5d
 8006e40:	08006f5d 	.word	0x08006f5d
 8006e44:	08006edb 	.word	0x08006edb
 8006e48:	08006f5d 	.word	0x08006f5d
 8006e4c:	08006f5d 	.word	0x08006f5d
 8006e50:	08006f5d 	.word	0x08006f5d
 8006e54:	08006f1b 	.word	0x08006f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f9f0 	bl	8007244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0204 	bic.w	r2, r2, #4
 8006e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6999      	ldr	r1, [r3, #24]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	619a      	str	r2, [r3, #24]
      break;
 8006e96:	e064      	b.n	8006f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fa40 	bl	8007324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6999      	ldr	r1, [r3, #24]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	619a      	str	r2, [r3, #24]
      break;
 8006ed8:	e043      	b.n	8006f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fa95 	bl	8007410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0208 	orr.w	r2, r2, #8
 8006ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0204 	bic.w	r2, r2, #4
 8006f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69d9      	ldr	r1, [r3, #28]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	61da      	str	r2, [r3, #28]
      break;
 8006f18:	e023      	b.n	8006f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fae9 	bl	80074f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69d9      	ldr	r1, [r3, #28]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	021a      	lsls	r2, r3, #8
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	61da      	str	r2, [r3, #28]
      break;
 8006f5a:	e002      	b.n	8006f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIM_ConfigClockSource+0x1c>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e0b4      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x186>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc8:	d03e      	beq.n	8007048 <HAL_TIM_ConfigClockSource+0xd4>
 8006fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fce:	f200 8087 	bhi.w	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd6:	f000 8086 	beq.w	80070e6 <HAL_TIM_ConfigClockSource+0x172>
 8006fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fde:	d87f      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe0:	2b70      	cmp	r3, #112	@ 0x70
 8006fe2:	d01a      	beq.n	800701a <HAL_TIM_ConfigClockSource+0xa6>
 8006fe4:	2b70      	cmp	r3, #112	@ 0x70
 8006fe6:	d87b      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fe8:	2b60      	cmp	r3, #96	@ 0x60
 8006fea:	d050      	beq.n	800708e <HAL_TIM_ConfigClockSource+0x11a>
 8006fec:	2b60      	cmp	r3, #96	@ 0x60
 8006fee:	d877      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff0:	2b50      	cmp	r3, #80	@ 0x50
 8006ff2:	d03c      	beq.n	800706e <HAL_TIM_ConfigClockSource+0xfa>
 8006ff4:	2b50      	cmp	r3, #80	@ 0x50
 8006ff6:	d873      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ff8:	2b40      	cmp	r3, #64	@ 0x40
 8006ffa:	d058      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x13a>
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	d86f      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007000:	2b30      	cmp	r3, #48	@ 0x30
 8007002:	d064      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 8007004:	2b30      	cmp	r3, #48	@ 0x30
 8007006:	d86b      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007008:	2b20      	cmp	r3, #32
 800700a:	d060      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 800700c:	2b20      	cmp	r3, #32
 800700e:	d867      	bhi.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d05c      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 8007014:	2b10      	cmp	r3, #16
 8007016:	d05a      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x15a>
 8007018:	e062      	b.n	80070e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6899      	ldr	r1, [r3, #8]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f000 fb35 	bl	8007698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800703c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	609a      	str	r2, [r3, #8]
      break;
 8007046:	e04f      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6899      	ldr	r1, [r3, #8]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f000 fb1e 	bl	8007698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800706a:	609a      	str	r2, [r3, #8]
      break;
 800706c:	e03c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6859      	ldr	r1, [r3, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	461a      	mov	r2, r3
 800707c:	f000 fa92 	bl	80075a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2150      	movs	r1, #80	@ 0x50
 8007086:	4618      	mov	r0, r3
 8007088:	f000 faeb 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 800708c:	e02c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6859      	ldr	r1, [r3, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	461a      	mov	r2, r3
 800709c:	f000 fab1 	bl	8007602 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2160      	movs	r1, #96	@ 0x60
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fadb 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 80070ac:	e01c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 fa72 	bl	80075a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2140      	movs	r1, #64	@ 0x40
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 facb 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 80070cc:	e00c      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	4610      	mov	r0, r2
 80070da:	f000 fac2 	bl	8007662 <TIM_ITRx_SetConfig>
      break;
 80070de:	e003      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]
      break;
 80070e4:	e000      	b.n	80070e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a40      	ldr	r2, [pc, #256]	@ (8007218 <TIM_Base_SetConfig+0x114>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d013      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007122:	d00f      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a3d      	ldr	r2, [pc, #244]	@ (800721c <TIM_Base_SetConfig+0x118>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a3c      	ldr	r2, [pc, #240]	@ (8007220 <TIM_Base_SetConfig+0x11c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a3b      	ldr	r2, [pc, #236]	@ (8007224 <TIM_Base_SetConfig+0x120>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a3a      	ldr	r2, [pc, #232]	@ (8007228 <TIM_Base_SetConfig+0x124>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d108      	bne.n	8007156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2f      	ldr	r2, [pc, #188]	@ (8007218 <TIM_Base_SetConfig+0x114>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d02b      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007164:	d027      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2c      	ldr	r2, [pc, #176]	@ (800721c <TIM_Base_SetConfig+0x118>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d023      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2b      	ldr	r2, [pc, #172]	@ (8007220 <TIM_Base_SetConfig+0x11c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d01f      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2a      	ldr	r2, [pc, #168]	@ (8007224 <TIM_Base_SetConfig+0x120>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01b      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a29      	ldr	r2, [pc, #164]	@ (8007228 <TIM_Base_SetConfig+0x124>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d017      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a28      	ldr	r2, [pc, #160]	@ (800722c <TIM_Base_SetConfig+0x128>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d013      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a27      	ldr	r2, [pc, #156]	@ (8007230 <TIM_Base_SetConfig+0x12c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00f      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a26      	ldr	r2, [pc, #152]	@ (8007234 <TIM_Base_SetConfig+0x130>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00b      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a25      	ldr	r2, [pc, #148]	@ (8007238 <TIM_Base_SetConfig+0x134>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d007      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a24      	ldr	r2, [pc, #144]	@ (800723c <TIM_Base_SetConfig+0x138>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d003      	beq.n	80071b6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a23      	ldr	r2, [pc, #140]	@ (8007240 <TIM_Base_SetConfig+0x13c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d108      	bne.n	80071c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007218 <TIM_Base_SetConfig+0x114>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_Base_SetConfig+0xf8>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007228 <TIM_Base_SetConfig+0x124>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d103      	bne.n	8007204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	691a      	ldr	r2, [r3, #16]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	615a      	str	r2, [r3, #20]
}
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40010000 	.word	0x40010000
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40010400 	.word	0x40010400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800
 8007238:	40001800 	.word	0x40001800
 800723c:	40001c00 	.word	0x40001c00
 8007240:	40002000 	.word	0x40002000

08007244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0303 	bic.w	r3, r3, #3
 800727a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 0302 	bic.w	r3, r3, #2
 800728c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a20      	ldr	r2, [pc, #128]	@ (800731c <TIM_OC1_SetConfig+0xd8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d003      	beq.n	80072a8 <TIM_OC1_SetConfig+0x64>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007320 <TIM_OC1_SetConfig+0xdc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d10c      	bne.n	80072c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f023 0308 	bic.w	r3, r3, #8
 80072ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f023 0304 	bic.w	r3, r3, #4
 80072c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a15      	ldr	r2, [pc, #84]	@ (800731c <TIM_OC1_SetConfig+0xd8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d003      	beq.n	80072d2 <TIM_OC1_SetConfig+0x8e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a14      	ldr	r2, [pc, #80]	@ (8007320 <TIM_OC1_SetConfig+0xdc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d111      	bne.n	80072f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	621a      	str	r2, [r3, #32]
}
 8007310:	bf00      	nop
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	40010000 	.word	0x40010000
 8007320:	40010400 	.word	0x40010400

08007324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f023 0210 	bic.w	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800735a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 0320 	bic.w	r3, r3, #32
 800736e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a22      	ldr	r2, [pc, #136]	@ (8007408 <TIM_OC2_SetConfig+0xe4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_OC2_SetConfig+0x68>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a21      	ldr	r2, [pc, #132]	@ (800740c <TIM_OC2_SetConfig+0xe8>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d10d      	bne.n	80073a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a17      	ldr	r2, [pc, #92]	@ (8007408 <TIM_OC2_SetConfig+0xe4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC2_SetConfig+0x94>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a16      	ldr	r2, [pc, #88]	@ (800740c <TIM_OC2_SetConfig+0xe8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d113      	bne.n	80073e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40010000 	.word	0x40010000
 800740c:	40010400 	.word	0x40010400

08007410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0303 	bic.w	r3, r3, #3
 8007446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a21      	ldr	r2, [pc, #132]	@ (80074f0 <TIM_OC3_SetConfig+0xe0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d003      	beq.n	8007476 <TIM_OC3_SetConfig+0x66>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a20      	ldr	r2, [pc, #128]	@ (80074f4 <TIM_OC3_SetConfig+0xe4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d10d      	bne.n	8007492 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800747c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <TIM_OC3_SetConfig+0xe0>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d003      	beq.n	80074a2 <TIM_OC3_SetConfig+0x92>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a15      	ldr	r2, [pc, #84]	@ (80074f4 <TIM_OC3_SetConfig+0xe4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d113      	bne.n	80074ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	621a      	str	r2, [r3, #32]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40010400 	.word	0x40010400

080074f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800752e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	031b      	lsls	r3, r3, #12
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	4313      	orrs	r3, r2
 800754e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a12      	ldr	r2, [pc, #72]	@ (800759c <TIM_OC4_SetConfig+0xa4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_OC4_SetConfig+0x68>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a11      	ldr	r2, [pc, #68]	@ (80075a0 <TIM_OC4_SetConfig+0xa8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d109      	bne.n	8007574 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	019b      	lsls	r3, r3, #6
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40010400 	.word	0x40010400

080075a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f023 0201 	bic.w	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 030a 	bic.w	r3, r3, #10
 80075e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	621a      	str	r2, [r3, #32]
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007602:	b480      	push	{r7}
 8007604:	b087      	sub	sp, #28
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f023 0210 	bic.w	r2, r3, #16
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800762c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	031b      	lsls	r3, r3, #12
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800763e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	621a      	str	r2, [r3, #32]
}
 8007656:	bf00      	nop
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	f043 0307 	orr.w	r3, r3, #7
 8007684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	609a      	str	r2, [r3, #8]
}
 800768c:	bf00      	nop
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	021a      	lsls	r2, r3, #8
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4313      	orrs	r3, r2
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	609a      	str	r2, [r3, #8]
}
 80076cc:	bf00      	nop
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f003 031f 	and.w	r3, r3, #31
 80076ea:	2201      	movs	r2, #1
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1a      	ldr	r2, [r3, #32]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	43db      	mvns	r3, r3
 80076fa:	401a      	ands	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1a      	ldr	r2, [r3, #32]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	fa01 f303 	lsl.w	r3, r1, r3
 8007710:	431a      	orrs	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007738:	2302      	movs	r3, #2
 800773a:	e05a      	b.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a21      	ldr	r2, [pc, #132]	@ (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007788:	d01d      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1d      	ldr	r2, [pc, #116]	@ (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1b      	ldr	r2, [pc, #108]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1a      	ldr	r2, [pc, #104]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a18      	ldr	r2, [pc, #96]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a17      	ldr	r2, [pc, #92]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a15      	ldr	r2, [pc, #84]	@ (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d10c      	bne.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40010000 	.word	0x40010000
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40010400 	.word	0x40010400
 8007814:	40014000 	.word	0x40014000
 8007818:	40001800 	.word	0x40001800

0800781c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007834:	2302      	movs	r3, #2
 8007836:	e03d      	b.n	80078b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e03f      	b.n	8007952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fc fa92 	bl	8003e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	@ 0x24
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 ff81 	bl	800880c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695a      	ldr	r2, [r3, #20]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08c      	sub	sp, #48	@ 0x30
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b20      	cmp	r3, #32
 8007974:	d165      	bne.n	8007a42 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_UART_Transmit_DMA+0x26>
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e05e      	b.n	8007a44 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_UART_Transmit_DMA+0x38>
 8007990:	2302      	movs	r3, #2
 8007992:	e057      	b.n	8007a44 <HAL_UART_Transmit_DMA+0xe8>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	88fa      	ldrh	r2, [r7, #6]
 80079a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2221      	movs	r2, #33	@ 0x21
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c0:	4a22      	ldr	r2, [pc, #136]	@ (8007a4c <HAL_UART_Transmit_DMA+0xf0>)
 80079c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c8:	4a21      	ldr	r2, [pc, #132]	@ (8007a50 <HAL_UART_Transmit_DMA+0xf4>)
 80079ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d0:	4a20      	ldr	r2, [pc, #128]	@ (8007a54 <HAL_UART_Transmit_DMA+0xf8>)
 80079d2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d8:	2200      	movs	r2, #0
 80079da:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80079e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e8:	6819      	ldr	r1, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3304      	adds	r3, #4
 80079f0:	461a      	mov	r2, r3
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	f7fd fe1a 	bl	800562c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3314      	adds	r3, #20
 8007a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a2c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6a39      	ldr	r1, [r7, #32]
 8007a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e5      	bne.n	8007a0a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e000      	b.n	8007a44 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a42:	2302      	movs	r3, #2
  }
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3730      	adds	r7, #48	@ 0x30
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	080080a5 	.word	0x080080a5
 8007a50:	0800813f 	.word	0x0800813f
 8007a54:	080082b7 	.word	0x080082b7

08007a58 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	@ 0x30
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d152      	bne.n	8007b18 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e04b      	b.n	8007b1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e044      	b.n	8007b1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fc51 	bl	800834c <UART_Start_Receive_DMA>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d12c      	bne.n	8007b12 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d125      	bne.n	8007b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f043 0310 	orr.w	r3, r3, #16
 8007aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007af6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6a39      	ldr	r1, [r7, #32]
 8007afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e5      	bne.n	8007ad6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007b0a:	e002      	b.n	8007b12 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007b12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b16:	e000      	b.n	8007b1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007b18:	2302      	movs	r3, #2
  }
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3730      	adds	r7, #48	@ 0x30
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b0ba      	sub	sp, #232	@ 0xe8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10f      	bne.n	8007b8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <HAL_UART_IRQHandler+0x66>
 8007b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd87 	bl	8008696 <UART_Receive_IT>
      return;
 8007b88:	e256      	b.n	8008038 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80de 	beq.w	8007d50 <HAL_UART_IRQHandler+0x22c>
 8007b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d106      	bne.n	8007bae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ba4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80d1 	beq.w	8007d50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00b      	beq.n	8007bd2 <HAL_UART_IRQHandler+0xae>
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bca:	f043 0201 	orr.w	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_UART_IRQHandler+0xd2>
 8007bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bee:	f043 0202 	orr.w	r2, r3, #2
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00b      	beq.n	8007c1a <HAL_UART_IRQHandler+0xf6>
 8007c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	f043 0204 	orr.w	r2, r3, #4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d011      	beq.n	8007c4a <HAL_UART_IRQHandler+0x126>
 8007c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c42:	f043 0208 	orr.w	r2, r3, #8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 81ed 	beq.w	800802e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <HAL_UART_IRQHandler+0x14e>
 8007c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fd12 	bl	8008696 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c7c:	2b40      	cmp	r3, #64	@ 0x40
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d103      	bne.n	8007c9e <HAL_UART_IRQHandler+0x17a>
 8007c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d04f      	beq.n	8007d3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc1a 	bl	80084d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cae:	2b40      	cmp	r3, #64	@ 0x40
 8007cb0:	d141      	bne.n	8007d36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3314      	adds	r3, #20
 8007cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3314      	adds	r3, #20
 8007cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d9      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0a:	4a7d      	ldr	r2, [pc, #500]	@ (8007f00 <HAL_UART_IRQHandler+0x3dc>)
 8007d0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fd fd52 	bl	80057bc <HAL_DMA_Abort_IT>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d016      	beq.n	8007d4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2c:	e00e      	b.n	8007d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f9ae 	bl	8008090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d34:	e00a      	b.n	8007d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f9aa 	bl	8008090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	e006      	b.n	8007d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9a6 	bl	8008090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007d4a:	e170      	b.n	800802e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4c:	bf00      	nop
    return;
 8007d4e:	e16e      	b.n	800802e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	f040 814a 	bne.w	8007fee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8143 	beq.w	8007fee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d6c:	f003 0310 	and.w	r3, r3, #16
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 813c 	beq.w	8007fee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d76:	2300      	movs	r3, #0
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d96:	2b40      	cmp	r3, #64	@ 0x40
 8007d98:	f040 80b4 	bne.w	8007f04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007da8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8140 	beq.w	8008032 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	f080 8139 	bcs.w	8008032 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dd2:	f000 8088 	beq.w	8007ee6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	330c      	adds	r3, #12
 8007ddc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1d9      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3314      	adds	r3, #20
 8007e28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3314      	adds	r3, #20
 8007e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e1      	bne.n	8007e22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3314      	adds	r3, #20
 8007e64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3314      	adds	r3, #20
 8007e7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e3      	bne.n	8007e5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb6:	f023 0310 	bic.w	r3, r3, #16
 8007eba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ec8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007eca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ece:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e3      	bne.n	8007ea4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fd fbfb 	bl	80056dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7f9 fbfa 	bl	80016f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007efc:	e099      	b.n	8008032 <HAL_UART_IRQHandler+0x50e>
 8007efe:	bf00      	nop
 8007f00:	0800859f 	.word	0x0800859f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 808b 	beq.w	8008036 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8086 	beq.w	8008036 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	330c      	adds	r3, #12
 8007f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007f4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e3      	bne.n	8007f2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3314      	adds	r3, #20
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	623b      	str	r3, [r7, #32]
   return(result);
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	f023 0301 	bic.w	r3, r3, #1
 8007f78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3314      	adds	r3, #20
 8007f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f86:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e3      	bne.n	8007f62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	330c      	adds	r3, #12
 8007fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0310 	bic.w	r3, r3, #16
 8007fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	330c      	adds	r3, #12
 8007fc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007fcc:	61fa      	str	r2, [r7, #28]
 8007fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	69b9      	ldr	r1, [r7, #24]
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e3      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7f9 fb82 	bl	80016f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fec:	e023      	b.n	8008036 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <HAL_UART_IRQHandler+0x4ea>
 8007ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fadd 	bl	80085c6 <UART_Transmit_IT>
    return;
 800800c:	e014      	b.n	8008038 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00e      	beq.n	8008038 <HAL_UART_IRQHandler+0x514>
 800801a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800801e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d008      	beq.n	8008038 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fb1d 	bl	8008666 <UART_EndTransmit_IT>
    return;
 800802c:	e004      	b.n	8008038 <HAL_UART_IRQHandler+0x514>
    return;
 800802e:	bf00      	nop
 8008030:	e002      	b.n	8008038 <HAL_UART_IRQHandler+0x514>
      return;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <HAL_UART_IRQHandler+0x514>
      return;
 8008036:	bf00      	nop
  }
}
 8008038:	37e8      	adds	r7, #232	@ 0xe8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop

08008040 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b090      	sub	sp, #64	@ 0x40
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d137      	bne.n	8008130 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80080c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c2:	2200      	movs	r2, #0
 80080c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3314      	adds	r3, #20
 80080cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	623b      	str	r3, [r7, #32]
   return(result);
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3314      	adds	r3, #20
 80080e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80080e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e5      	bne.n	80080c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	330c      	adds	r3, #12
 8008100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	60fb      	str	r3, [r7, #12]
   return(result);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
 8008112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800811a:	61fa      	str	r2, [r7, #28]
 800811c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	617b      	str	r3, [r7, #20]
   return(result);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e5      	bne.n	80080fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800812e:	e002      	b.n	8008136 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008130:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008132:	f7ff ff85 	bl	8008040 <HAL_UART_TxCpltCallback>
}
 8008136:	bf00      	nop
 8008138:	3740      	adds	r7, #64	@ 0x40
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff ff81 	bl	8008054 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b09c      	sub	sp, #112	@ 0x70
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008166:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d172      	bne.n	800825c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008178:	2200      	movs	r2, #0
 800817a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800817c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800818c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800818e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008192:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	330c      	adds	r3, #12
 800819a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800819c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800819e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e5      	bne.n	800817c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3314      	adds	r3, #20
 80081b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c2:	f023 0301 	bic.w	r3, r3, #1
 80081c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80081c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3314      	adds	r3, #20
 80081ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80081d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80081d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e5      	bne.n	80081b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3314      	adds	r3, #20
 80081ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	623b      	str	r3, [r7, #32]
   return(result);
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80081fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3314      	adds	r3, #20
 8008202:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008204:	633a      	str	r2, [r7, #48]	@ 0x30
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800820a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e5      	bne.n	80081e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800821a:	2220      	movs	r2, #32
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008224:	2b01      	cmp	r3, #1
 8008226:	d119      	bne.n	800825c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	330c      	adds	r3, #12
 800822e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	60fb      	str	r3, [r7, #12]
   return(result);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0310 	bic.w	r3, r3, #16
 800823e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	330c      	adds	r3, #12
 8008246:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008248:	61fa      	str	r2, [r7, #28]
 800824a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	69b9      	ldr	r1, [r7, #24]
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	617b      	str	r3, [r7, #20]
   return(result);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e5      	bne.n	8008228 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800825c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800825e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008260:	2b01      	cmp	r3, #1
 8008262:	d106      	bne.n	8008272 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008266:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008268:	4619      	mov	r1, r3
 800826a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800826c:	f7f9 fa40 	bl	80016f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008270:	e002      	b.n	8008278 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008274:	f7ff fef8 	bl	8008068 <HAL_UART_RxCpltCallback>
}
 8008278:	bf00      	nop
 800827a:	3770      	adds	r7, #112	@ 0x70
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	2b01      	cmp	r3, #1
 8008294:	d108      	bne.n	80082a8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	b29b      	uxth	r3, r3
 800829e:	4619      	mov	r1, r3
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7f9 fa25 	bl	80016f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082a6:	e002      	b.n	80082ae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff fee7 	bl	800807c <HAL_UART_RxHalfCpltCallback>
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d2:	2b80      	cmp	r3, #128	@ 0x80
 80082d4:	bf0c      	ite	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	2300      	movne	r3, #0
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b21      	cmp	r3, #33	@ 0x21
 80082e8:	d108      	bne.n	80082fc <UART_DMAError+0x46>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80082f6:	68b8      	ldr	r0, [r7, #8]
 80082f8:	f000 f8c6 	bl	8008488 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008306:	2b40      	cmp	r3, #64	@ 0x40
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b22      	cmp	r3, #34	@ 0x22
 800831c:	d108      	bne.n	8008330 <UART_DMAError+0x7a>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2200      	movs	r2, #0
 8008328:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800832a:	68b8      	ldr	r0, [r7, #8]
 800832c:	f000 f8d4 	bl	80084d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008334:	f043 0210 	orr.w	r2, r3, #16
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800833c:	68b8      	ldr	r0, [r7, #8]
 800833e:	f7ff fea7 	bl	8008090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b098      	sub	sp, #96	@ 0x60
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2222      	movs	r2, #34	@ 0x22
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008378:	4a40      	ldr	r2, [pc, #256]	@ (800847c <UART_Start_Receive_DMA+0x130>)
 800837a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	4a3f      	ldr	r2, [pc, #252]	@ (8008480 <UART_Start_Receive_DMA+0x134>)
 8008382:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008388:	4a3e      	ldr	r2, [pc, #248]	@ (8008484 <UART_Start_Receive_DMA+0x138>)
 800838a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008390:	2200      	movs	r2, #0
 8008392:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008394:	f107 0308 	add.w	r3, r7, #8
 8008398:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3304      	adds	r3, #4
 80083a4:	4619      	mov	r1, r3
 80083a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	f7fd f93e 	bl	800562c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80083b0:	2300      	movs	r3, #0
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d019      	beq.n	800840a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	330c      	adds	r3, #12
 80083dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80083f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80083fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e5      	bne.n	80083d6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3314      	adds	r3, #20
 8008410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	f043 0301 	orr.w	r3, r3, #1
 8008420:	657b      	str	r3, [r7, #84]	@ 0x54
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3314      	adds	r3, #20
 8008428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800842a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e5      	bne.n	800840a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3314      	adds	r3, #20
 8008444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	617b      	str	r3, [r7, #20]
   return(result);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008454:	653b      	str	r3, [r7, #80]	@ 0x50
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3314      	adds	r3, #20
 800845c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800845e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	6a39      	ldr	r1, [r7, #32]
 8008464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	61fb      	str	r3, [r7, #28]
   return(result);
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e5      	bne.n	800843e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3760      	adds	r7, #96	@ 0x60
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	0800815b 	.word	0x0800815b
 8008480:	08008281 	.word	0x08008281
 8008484:	080082b7 	.word	0x080082b7

08008488 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b089      	sub	sp, #36	@ 0x24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	330c      	adds	r3, #12
 8008496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	60bb      	str	r3, [r7, #8]
   return(result);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	61ba      	str	r2, [r7, #24]
 80084b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6979      	ldr	r1, [r7, #20]
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	613b      	str	r3, [r7, #16]
   return(result);
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e5      	bne.n	8008490 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80084cc:	bf00      	nop
 80084ce:	3724      	adds	r7, #36	@ 0x24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b095      	sub	sp, #84	@ 0x54
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	330c      	adds	r3, #12
 80084e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	330c      	adds	r3, #12
 80084fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008500:	643a      	str	r2, [r7, #64]	@ 0x40
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800850e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e5      	bne.n	80084e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3314      	adds	r3, #20
 800851a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	61fb      	str	r3, [r7, #28]
   return(result);
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	f023 0301 	bic.w	r3, r3, #1
 800852a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3314      	adds	r3, #20
 8008532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800853a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e5      	bne.n	8008514 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854c:	2b01      	cmp	r3, #1
 800854e:	d119      	bne.n	8008584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	330c      	adds	r3, #12
 8008556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	647b      	str	r3, [r7, #68]	@ 0x44
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	330c      	adds	r3, #12
 800856e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008570:	61ba      	str	r2, [r7, #24]
 8008572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6979      	ldr	r1, [r7, #20]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	613b      	str	r3, [r7, #16]
   return(result);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e5      	bne.n	8008550 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2220      	movs	r2, #32
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008592:	bf00      	nop
 8008594:	3754      	adds	r7, #84	@ 0x54
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff fd69 	bl	8008090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b085      	sub	sp, #20
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b21      	cmp	r3, #33	@ 0x21
 80085d8:	d13e      	bne.n	8008658 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e2:	d114      	bne.n	800860e <UART_Transmit_IT+0x48>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d110      	bne.n	800860e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008600:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	1c9a      	adds	r2, r3, #2
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	621a      	str	r2, [r3, #32]
 800860c:	e008      	b.n	8008620 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	1c59      	adds	r1, r3, #1
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6211      	str	r1, [r2, #32]
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29b      	uxth	r3, r3
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	4619      	mov	r1, r3
 800862e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10f      	bne.n	8008654 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008642:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008652:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	e000      	b.n	800865a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008658:	2302      	movs	r3, #2
  }
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800867c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2220      	movs	r2, #32
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff fcda 	bl	8008040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b08c      	sub	sp, #48	@ 0x30
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b22      	cmp	r3, #34	@ 0x22
 80086a8:	f040 80ab 	bne.w	8008802 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086b4:	d117      	bne.n	80086e6 <UART_Receive_IT+0x50>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d113      	bne.n	80086e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086de:	1c9a      	adds	r2, r3, #2
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80086e4:	e026      	b.n	8008734 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f8:	d007      	beq.n	800870a <UART_Receive_IT+0x74>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10a      	bne.n	8008718 <UART_Receive_IT+0x82>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	b2da      	uxtb	r2, r3
 8008712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e008      	b.n	800872a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008724:	b2da      	uxtb	r2, r3
 8008726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008728:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29b      	uxth	r3, r3
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	4619      	mov	r1, r3
 8008742:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008744:	2b00      	cmp	r3, #0
 8008746:	d15a      	bne.n	80087fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0220 	bic.w	r2, r2, #32
 8008756:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695a      	ldr	r2, [r3, #20]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0201 	bic.w	r2, r2, #1
 8008776:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2220      	movs	r2, #32
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	2b01      	cmp	r3, #1
 8008786:	d135      	bne.n	80087f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	330c      	adds	r3, #12
 8008794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	613b      	str	r3, [r7, #16]
   return(result);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f023 0310 	bic.w	r3, r3, #16
 80087a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	330c      	adds	r3, #12
 80087ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ae:	623a      	str	r2, [r7, #32]
 80087b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	69f9      	ldr	r1, [r7, #28]
 80087b4:	6a3a      	ldr	r2, [r7, #32]
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e5      	bne.n	800878e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b10      	cmp	r3, #16
 80087ce:	d10a      	bne.n	80087e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087d0:	2300      	movs	r3, #0
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7f8 ff7f 	bl	80016f0 <HAL_UARTEx_RxEventCallback>
 80087f2:	e002      	b.n	80087fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff fc37 	bl	8008068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	e002      	b.n	8008804 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008802:	2302      	movs	r3, #2
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3730      	adds	r7, #48	@ 0x30
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800880c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008810:	b0c0      	sub	sp, #256	@ 0x100
 8008812:	af00      	add	r7, sp, #0
 8008814:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008828:	68d9      	ldr	r1, [r3, #12]
 800882a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	ea40 0301 	orr.w	r3, r0, r1
 8008834:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	431a      	orrs	r2, r3
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	431a      	orrs	r2, r3
 800884c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	4313      	orrs	r3, r2
 8008854:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008864:	f021 010c 	bic.w	r1, r1, #12
 8008868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008872:	430b      	orrs	r3, r1
 8008874:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008886:	6999      	ldr	r1, [r3, #24]
 8008888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	ea40 0301 	orr.w	r3, r0, r1
 8008892:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	4b8f      	ldr	r3, [pc, #572]	@ (8008ad8 <UART_SetConfig+0x2cc>)
 800889c:	429a      	cmp	r2, r3
 800889e:	d005      	beq.n	80088ac <UART_SetConfig+0xa0>
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4b8d      	ldr	r3, [pc, #564]	@ (8008adc <UART_SetConfig+0x2d0>)
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d104      	bne.n	80088b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088ac:	f7fe f818 	bl	80068e0 <HAL_RCC_GetPCLK2Freq>
 80088b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80088b4:	e003      	b.n	80088be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088b6:	f7fd ffff 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 80088ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088c8:	f040 810c 	bne.w	8008ae4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80088da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80088de:	4622      	mov	r2, r4
 80088e0:	462b      	mov	r3, r5
 80088e2:	1891      	adds	r1, r2, r2
 80088e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80088e6:	415b      	adcs	r3, r3
 80088e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80088ee:	4621      	mov	r1, r4
 80088f0:	eb12 0801 	adds.w	r8, r2, r1
 80088f4:	4629      	mov	r1, r5
 80088f6:	eb43 0901 	adc.w	r9, r3, r1
 80088fa:	f04f 0200 	mov.w	r2, #0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800890a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800890e:	4690      	mov	r8, r2
 8008910:	4699      	mov	r9, r3
 8008912:	4623      	mov	r3, r4
 8008914:	eb18 0303 	adds.w	r3, r8, r3
 8008918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800891c:	462b      	mov	r3, r5
 800891e:	eb49 0303 	adc.w	r3, r9, r3
 8008922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008932:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008936:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800893a:	460b      	mov	r3, r1
 800893c:	18db      	adds	r3, r3, r3
 800893e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008940:	4613      	mov	r3, r2
 8008942:	eb42 0303 	adc.w	r3, r2, r3
 8008946:	657b      	str	r3, [r7, #84]	@ 0x54
 8008948:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800894c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008950:	f7f8 f92a 	bl	8000ba8 <__aeabi_uldivmod>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4b61      	ldr	r3, [pc, #388]	@ (8008ae0 <UART_SetConfig+0x2d4>)
 800895a:	fba3 2302 	umull	r2, r3, r3, r2
 800895e:	095b      	lsrs	r3, r3, #5
 8008960:	011c      	lsls	r4, r3, #4
 8008962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008966:	2200      	movs	r2, #0
 8008968:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800896c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008970:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008974:	4642      	mov	r2, r8
 8008976:	464b      	mov	r3, r9
 8008978:	1891      	adds	r1, r2, r2
 800897a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800897c:	415b      	adcs	r3, r3
 800897e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008980:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008984:	4641      	mov	r1, r8
 8008986:	eb12 0a01 	adds.w	sl, r2, r1
 800898a:	4649      	mov	r1, r9
 800898c:	eb43 0b01 	adc.w	fp, r3, r1
 8008990:	f04f 0200 	mov.w	r2, #0
 8008994:	f04f 0300 	mov.w	r3, #0
 8008998:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800899c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089a4:	4692      	mov	sl, r2
 80089a6:	469b      	mov	fp, r3
 80089a8:	4643      	mov	r3, r8
 80089aa:	eb1a 0303 	adds.w	r3, sl, r3
 80089ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089b2:	464b      	mov	r3, r9
 80089b4:	eb4b 0303 	adc.w	r3, fp, r3
 80089b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80089bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80089cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80089d0:	460b      	mov	r3, r1
 80089d2:	18db      	adds	r3, r3, r3
 80089d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80089d6:	4613      	mov	r3, r2
 80089d8:	eb42 0303 	adc.w	r3, r2, r3
 80089dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80089de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80089e6:	f7f8 f8df 	bl	8000ba8 <__aeabi_uldivmod>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4611      	mov	r1, r2
 80089f0:	4b3b      	ldr	r3, [pc, #236]	@ (8008ae0 <UART_SetConfig+0x2d4>)
 80089f2:	fba3 2301 	umull	r2, r3, r3, r1
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	2264      	movs	r2, #100	@ 0x64
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	1acb      	subs	r3, r1, r3
 8008a00:	00db      	lsls	r3, r3, #3
 8008a02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a06:	4b36      	ldr	r3, [pc, #216]	@ (8008ae0 <UART_SetConfig+0x2d4>)
 8008a08:	fba3 2302 	umull	r2, r3, r3, r2
 8008a0c:	095b      	lsrs	r3, r3, #5
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a14:	441c      	add	r4, r3
 8008a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a28:	4642      	mov	r2, r8
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	1891      	adds	r1, r2, r2
 8008a2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a30:	415b      	adcs	r3, r3
 8008a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a38:	4641      	mov	r1, r8
 8008a3a:	1851      	adds	r1, r2, r1
 8008a3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a3e:	4649      	mov	r1, r9
 8008a40:	414b      	adcs	r3, r1
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a50:	4659      	mov	r1, fp
 8008a52:	00cb      	lsls	r3, r1, #3
 8008a54:	4651      	mov	r1, sl
 8008a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a5a:	4651      	mov	r1, sl
 8008a5c:	00ca      	lsls	r2, r1, #3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	4619      	mov	r1, r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	4642      	mov	r2, r8
 8008a66:	189b      	adds	r3, r3, r2
 8008a68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	460a      	mov	r2, r1
 8008a70:	eb42 0303 	adc.w	r3, r2, r3
 8008a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	18db      	adds	r3, r3, r3
 8008a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a92:	4613      	mov	r3, r2
 8008a94:	eb42 0303 	adc.w	r3, r2, r3
 8008a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008aa2:	f7f8 f881 	bl	8000ba8 <__aeabi_uldivmod>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae0 <UART_SetConfig+0x2d4>)
 8008aac:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab0:	095b      	lsrs	r3, r3, #5
 8008ab2:	2164      	movs	r1, #100	@ 0x64
 8008ab4:	fb01 f303 	mul.w	r3, r1, r3
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	3332      	adds	r3, #50	@ 0x32
 8008abe:	4a08      	ldr	r2, [pc, #32]	@ (8008ae0 <UART_SetConfig+0x2d4>)
 8008ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac4:	095b      	lsrs	r3, r3, #5
 8008ac6:	f003 0207 	and.w	r2, r3, #7
 8008aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4422      	add	r2, r4
 8008ad2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ad4:	e106      	b.n	8008ce4 <UART_SetConfig+0x4d8>
 8008ad6:	bf00      	nop
 8008ad8:	40011000 	.word	0x40011000
 8008adc:	40011400 	.word	0x40011400
 8008ae0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008aee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008af2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008af6:	4642      	mov	r2, r8
 8008af8:	464b      	mov	r3, r9
 8008afa:	1891      	adds	r1, r2, r2
 8008afc:	6239      	str	r1, [r7, #32]
 8008afe:	415b      	adcs	r3, r3
 8008b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b06:	4641      	mov	r1, r8
 8008b08:	1854      	adds	r4, r2, r1
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	eb43 0501 	adc.w	r5, r3, r1
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	f04f 0300 	mov.w	r3, #0
 8008b18:	00eb      	lsls	r3, r5, #3
 8008b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b1e:	00e2      	lsls	r2, r4, #3
 8008b20:	4614      	mov	r4, r2
 8008b22:	461d      	mov	r5, r3
 8008b24:	4643      	mov	r3, r8
 8008b26:	18e3      	adds	r3, r4, r3
 8008b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	eb45 0303 	adc.w	r3, r5, r3
 8008b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b52:	4629      	mov	r1, r5
 8008b54:	008b      	lsls	r3, r1, #2
 8008b56:	4621      	mov	r1, r4
 8008b58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	008a      	lsls	r2, r1, #2
 8008b60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008b64:	f7f8 f820 	bl	8000ba8 <__aeabi_uldivmod>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4b60      	ldr	r3, [pc, #384]	@ (8008cf0 <UART_SetConfig+0x4e4>)
 8008b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	011c      	lsls	r4, r3, #4
 8008b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008b84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008b88:	4642      	mov	r2, r8
 8008b8a:	464b      	mov	r3, r9
 8008b8c:	1891      	adds	r1, r2, r2
 8008b8e:	61b9      	str	r1, [r7, #24]
 8008b90:	415b      	adcs	r3, r3
 8008b92:	61fb      	str	r3, [r7, #28]
 8008b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b98:	4641      	mov	r1, r8
 8008b9a:	1851      	adds	r1, r2, r1
 8008b9c:	6139      	str	r1, [r7, #16]
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	414b      	adcs	r3, r1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	00cb      	lsls	r3, r1, #3
 8008bb4:	4651      	mov	r1, sl
 8008bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bba:	4651      	mov	r1, sl
 8008bbc:	00ca      	lsls	r2, r1, #3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bcc:	464b      	mov	r3, r9
 8008bce:	460a      	mov	r2, r1
 8008bd0:	eb42 0303 	adc.w	r3, r2, r3
 8008bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008be2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	008b      	lsls	r3, r1, #2
 8008bf4:	4641      	mov	r1, r8
 8008bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	008a      	lsls	r2, r1, #2
 8008bfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c02:	f7f7 ffd1 	bl	8000ba8 <__aeabi_uldivmod>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4b38      	ldr	r3, [pc, #224]	@ (8008cf0 <UART_SetConfig+0x4e4>)
 8008c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c12:	095b      	lsrs	r3, r3, #5
 8008c14:	2264      	movs	r2, #100	@ 0x64
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	1acb      	subs	r3, r1, r3
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	3332      	adds	r3, #50	@ 0x32
 8008c20:	4a33      	ldr	r2, [pc, #204]	@ (8008cf0 <UART_SetConfig+0x4e4>)
 8008c22:	fba2 2303 	umull	r2, r3, r2, r3
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c2c:	441c      	add	r4, r3
 8008c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c32:	2200      	movs	r2, #0
 8008c34:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c36:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	1891      	adds	r1, r2, r2
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	415b      	adcs	r3, r3
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	1851      	adds	r1, r2, r1
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	4649      	mov	r1, r9
 8008c54:	414b      	adcs	r3, r1
 8008c56:	607b      	str	r3, [r7, #4]
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c64:	4659      	mov	r1, fp
 8008c66:	00cb      	lsls	r3, r1, #3
 8008c68:	4651      	mov	r1, sl
 8008c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c6e:	4651      	mov	r1, sl
 8008c70:	00ca      	lsls	r2, r1, #3
 8008c72:	4610      	mov	r0, r2
 8008c74:	4619      	mov	r1, r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	4642      	mov	r2, r8
 8008c7a:	189b      	adds	r3, r3, r2
 8008c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c7e:	464b      	mov	r3, r9
 8008c80:	460a      	mov	r2, r1
 8008c82:	eb42 0303 	adc.w	r3, r2, r3
 8008c86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c92:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c94:	f04f 0200 	mov.w	r2, #0
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	008b      	lsls	r3, r1, #2
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008caa:	4641      	mov	r1, r8
 8008cac:	008a      	lsls	r2, r1, #2
 8008cae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008cb2:	f7f7 ff79 	bl	8000ba8 <__aeabi_uldivmod>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf0 <UART_SetConfig+0x4e4>)
 8008cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	2164      	movs	r1, #100	@ 0x64
 8008cc4:	fb01 f303 	mul.w	r3, r1, r3
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	011b      	lsls	r3, r3, #4
 8008ccc:	3332      	adds	r3, #50	@ 0x32
 8008cce:	4a08      	ldr	r2, [pc, #32]	@ (8008cf0 <UART_SetConfig+0x4e4>)
 8008cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd4:	095b      	lsrs	r3, r3, #5
 8008cd6:	f003 020f 	and.w	r2, r3, #15
 8008cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4422      	add	r2, r4
 8008ce2:	609a      	str	r2, [r3, #8]
}
 8008ce4:	bf00      	nop
 8008ce6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008cea:	46bd      	mov	sp, r7
 8008cec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cf0:	51eb851f 	.word	0x51eb851f

08008cf4 <__NVIC_SetPriority>:
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	db0a      	blt.n	8008d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	490c      	ldr	r1, [pc, #48]	@ (8008d40 <__NVIC_SetPriority+0x4c>)
 8008d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d12:	0112      	lsls	r2, r2, #4
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	440b      	add	r3, r1
 8008d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008d1c:	e00a      	b.n	8008d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	4908      	ldr	r1, [pc, #32]	@ (8008d44 <__NVIC_SetPriority+0x50>)
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	3b04      	subs	r3, #4
 8008d2c:	0112      	lsls	r2, r2, #4
 8008d2e:	b2d2      	uxtb	r2, r2
 8008d30:	440b      	add	r3, r1
 8008d32:	761a      	strb	r2, [r3, #24]
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	e000e100 	.word	0xe000e100
 8008d44:	e000ed00 	.word	0xe000ed00

08008d48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	f06f 0004 	mvn.w	r0, #4
 8008d52:	f7ff ffcf 	bl	8008cf4 <__NVIC_SetPriority>
#endif
}
 8008d56:	bf00      	nop
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d62:	f3ef 8305 	mrs	r3, IPSR
 8008d66:	603b      	str	r3, [r7, #0]
  return(result);
 8008d68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008d6e:	f06f 0305 	mvn.w	r3, #5
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	e00c      	b.n	8008d90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d76:	4b0a      	ldr	r3, [pc, #40]	@ (8008da0 <osKernelInitialize+0x44>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d105      	bne.n	8008d8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d7e:	4b08      	ldr	r3, [pc, #32]	@ (8008da0 <osKernelInitialize+0x44>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	607b      	str	r3, [r7, #4]
 8008d88:	e002      	b.n	8008d90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d90:	687b      	ldr	r3, [r7, #4]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20000b70 	.word	0x20000b70

08008da4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008daa:	f3ef 8305 	mrs	r3, IPSR
 8008dae:	603b      	str	r3, [r7, #0]
  return(result);
 8008db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8008db6:	f06f 0305 	mvn.w	r3, #5
 8008dba:	607b      	str	r3, [r7, #4]
 8008dbc:	e010      	b.n	8008de0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008dec <osKernelStart+0x48>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d109      	bne.n	8008dda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008dc6:	f7ff ffbf 	bl	8008d48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008dca:	4b08      	ldr	r3, [pc, #32]	@ (8008dec <osKernelStart+0x48>)
 8008dcc:	2202      	movs	r2, #2
 8008dce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008dd0:	f001 f892 	bl	8009ef8 <vTaskStartScheduler>
      stat = osOK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	607b      	str	r3, [r7, #4]
 8008dd8:	e002      	b.n	8008de0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008dda:	f04f 33ff 	mov.w	r3, #4294967295
 8008dde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008de0:	687b      	ldr	r3, [r7, #4]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20000b70 	.word	0x20000b70

08008df0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	@ 0x38
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e00:	f3ef 8305 	mrs	r3, IPSR
 8008e04:	617b      	str	r3, [r7, #20]
  return(result);
 8008e06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d17e      	bne.n	8008f0a <osThreadNew+0x11a>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d07b      	beq.n	8008f0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e12:	2380      	movs	r3, #128	@ 0x80
 8008e14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e16:	2318      	movs	r3, #24
 8008e18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d045      	beq.n	8008eb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d002      	beq.n	8008e38 <osThreadNew+0x48>
        name = attr->name;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d008      	beq.n	8008e5e <osThreadNew+0x6e>
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	2b38      	cmp	r3, #56	@ 0x38
 8008e50:	d805      	bhi.n	8008e5e <osThreadNew+0x6e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <osThreadNew+0x72>
        return (NULL);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e054      	b.n	8008f0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	089b      	lsrs	r3, r3, #2
 8008e70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00e      	beq.n	8008e98 <osThreadNew+0xa8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	2ba7      	cmp	r3, #167	@ 0xa7
 8008e80:	d90a      	bls.n	8008e98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d006      	beq.n	8008e98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <osThreadNew+0xa8>
        mem = 1;
 8008e92:	2301      	movs	r3, #1
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	e010      	b.n	8008eba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10c      	bne.n	8008eba <osThreadNew+0xca>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d108      	bne.n	8008eba <osThreadNew+0xca>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d104      	bne.n	8008eba <osThreadNew+0xca>
          mem = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	e001      	b.n	8008eba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d110      	bne.n	8008ee2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ec8:	9202      	str	r2, [sp, #8]
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	6a3a      	ldr	r2, [r7, #32]
 8008ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fe1a 	bl	8009b10 <xTaskCreateStatic>
 8008edc:	4603      	mov	r3, r0
 8008ede:	613b      	str	r3, [r7, #16]
 8008ee0:	e013      	b.n	8008f0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d110      	bne.n	8008f0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	f107 0310 	add.w	r3, r7, #16
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fe68 	bl	8009bd0 <xTaskCreate>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d001      	beq.n	8008f0a <osThreadNew+0x11a>
            hTask = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f0a:	693b      	ldr	r3, [r7, #16]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3728      	adds	r7, #40	@ 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f1c:	f3ef 8305 	mrs	r3, IPSR
 8008f20:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <osDelay+0x1c>
    stat = osErrorISR;
 8008f28:	f06f 0305 	mvn.w	r3, #5
 8008f2c:	60fb      	str	r3, [r7, #12]
 8008f2e:	e007      	b.n	8008f40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 ffa6 	bl	8009e8c <vTaskDelay>
    }
  }

  return (stat);
 8008f40:	68fb      	ldr	r3, [r7, #12]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4a07      	ldr	r2, [pc, #28]	@ (8008f78 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	4a06      	ldr	r2, [pc, #24]	@ (8008f7c <vApplicationGetIdleTaskMemory+0x30>)
 8008f62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2280      	movs	r2, #128	@ 0x80
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000b74 	.word	0x20000b74
 8008f7c:	20000c1c 	.word	0x20000c1c

08008f80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a07      	ldr	r2, [pc, #28]	@ (8008fac <vApplicationGetTimerTaskMemory+0x2c>)
 8008f90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	4a06      	ldr	r2, [pc, #24]	@ (8008fb0 <vApplicationGetTimerTaskMemory+0x30>)
 8008f96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f9e:	601a      	str	r2, [r3, #0]
}
 8008fa0:	bf00      	nop
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	20000e1c 	.word	0x20000e1c
 8008fb0:	20000ec4 	.word	0x20000ec4

08008fb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f103 0208 	add.w	r2, r3, #8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f103 0208 	add.w	r2, r3, #8
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f103 0208 	add.w	r2, r3, #8
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009002:	bf00      	nop
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	601a      	str	r2, [r3, #0]
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d103      	bne.n	8009076 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	e00c      	b.n	8009090 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3308      	adds	r3, #8
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	e002      	b.n	8009084 <vListInsert+0x2e>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	429a      	cmp	r2, r3
 800908e:	d2f6      	bcs.n	800907e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]
}
 80090bc:	bf00      	nop
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	6892      	ldr	r2, [r2, #8]
 80090de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6852      	ldr	r2, [r2, #4]
 80090e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d103      	bne.n	80090fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	1e5a      	subs	r2, r3, #1
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10b      	bne.n	8009148 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009148:	f002 f8a6 	bl	800b298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009154:	68f9      	ldr	r1, [r7, #12]
 8009156:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009158:	fb01 f303 	mul.w	r3, r1, r3
 800915c:	441a      	add	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009178:	3b01      	subs	r3, #1
 800917a:	68f9      	ldr	r1, [r7, #12]
 800917c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800917e:	fb01 f303 	mul.w	r3, r1, r3
 8009182:	441a      	add	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	22ff      	movs	r2, #255	@ 0xff
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	22ff      	movs	r2, #255	@ 0xff
 8009194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d114      	bne.n	80091c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01a      	beq.n	80091dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3310      	adds	r3, #16
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 f942 	bl	800a434 <xTaskRemoveFromEventList>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d012      	beq.n	80091dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091b6:	4b0d      	ldr	r3, [pc, #52]	@ (80091ec <xQueueGenericReset+0xd0>)
 80091b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	e009      	b.n	80091dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3310      	adds	r3, #16
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff fef1 	bl	8008fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3324      	adds	r3, #36	@ 0x24
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff feec 	bl	8008fb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091dc:	f002 f88e 	bl	800b2fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091e0:	2301      	movs	r3, #1
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08e      	sub	sp, #56	@ 0x38
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10b      	bne.n	800921c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	e7fd      	b.n	8009218 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10b      	bne.n	800923a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	e7fd      	b.n	8009236 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <xQueueGenericCreateStatic+0x56>
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <xQueueGenericCreateStatic+0x5a>
 8009246:	2301      	movs	r3, #1
 8009248:	e000      	b.n	800924c <xQueueGenericCreateStatic+0x5c>
 800924a:	2300      	movs	r3, #0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10b      	bne.n	8009268 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	623b      	str	r3, [r7, #32]
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	e7fd      	b.n	8009264 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <xQueueGenericCreateStatic+0x84>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <xQueueGenericCreateStatic+0x88>
 8009274:	2301      	movs	r3, #1
 8009276:	e000      	b.n	800927a <xQueueGenericCreateStatic+0x8a>
 8009278:	2300      	movs	r3, #0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10b      	bne.n	8009296 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	61fb      	str	r3, [r7, #28]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009296:	2350      	movs	r3, #80	@ 0x50
 8009298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b50      	cmp	r3, #80	@ 0x50
 800929e:	d00b      	beq.n	80092b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	61bb      	str	r3, [r7, #24]
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	e7fd      	b.n	80092b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80092be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00d      	beq.n	80092e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80092d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4613      	mov	r3, r2
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	68b9      	ldr	r1, [r7, #8]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f805 	bl	80092ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3730      	adds	r7, #48	@ 0x30
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	e002      	b.n	800930c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009318:	2101      	movs	r1, #1
 800931a:	69b8      	ldr	r0, [r7, #24]
 800931c:	f7ff fefe 	bl	800911c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009328:	bf00      	nop
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08e      	sub	sp, #56	@ 0x38
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800933e:	2300      	movs	r3, #0
 8009340:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10b      	bne.n	8009364 <xQueueGenericSend+0x34>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	e7fd      	b.n	8009360 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d103      	bne.n	8009372 <xQueueGenericSend+0x42>
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <xQueueGenericSend+0x46>
 8009372:	2301      	movs	r3, #1
 8009374:	e000      	b.n	8009378 <xQueueGenericSend+0x48>
 8009376:	2300      	movs	r3, #0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10b      	bne.n	8009394 <xQueueGenericSend+0x64>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800938e:	bf00      	nop
 8009390:	bf00      	nop
 8009392:	e7fd      	b.n	8009390 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d103      	bne.n	80093a2 <xQueueGenericSend+0x72>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d101      	bne.n	80093a6 <xQueueGenericSend+0x76>
 80093a2:	2301      	movs	r3, #1
 80093a4:	e000      	b.n	80093a8 <xQueueGenericSend+0x78>
 80093a6:	2300      	movs	r3, #0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <xQueueGenericSend+0x94>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	623b      	str	r3, [r7, #32]
}
 80093be:	bf00      	nop
 80093c0:	bf00      	nop
 80093c2:	e7fd      	b.n	80093c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093c4:	f001 f9fc 	bl	800a7c0 <xTaskGetSchedulerState>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <xQueueGenericSend+0xa4>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <xQueueGenericSend+0xa8>
 80093d4:	2301      	movs	r3, #1
 80093d6:	e000      	b.n	80093da <xQueueGenericSend+0xaa>
 80093d8:	2300      	movs	r3, #0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10b      	bne.n	80093f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	61fb      	str	r3, [r7, #28]
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e7fd      	b.n	80093f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093f6:	f001 ff4f 	bl	800b298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009402:	429a      	cmp	r2, r3
 8009404:	d302      	bcc.n	800940c <xQueueGenericSend+0xdc>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d129      	bne.n	8009460 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	68b9      	ldr	r1, [r7, #8]
 8009410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009412:	f000 fa0f 	bl	8009834 <prvCopyDataToQueue>
 8009416:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941c:	2b00      	cmp	r3, #0
 800941e:	d010      	beq.n	8009442 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009422:	3324      	adds	r3, #36	@ 0x24
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f805 	bl	800a434 <xTaskRemoveFromEventList>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d013      	beq.n	8009458 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009430:	4b3f      	ldr	r3, [pc, #252]	@ (8009530 <xQueueGenericSend+0x200>)
 8009432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	e00a      	b.n	8009458 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009448:	4b39      	ldr	r3, [pc, #228]	@ (8009530 <xQueueGenericSend+0x200>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009458:	f001 ff50 	bl	800b2fc <vPortExitCritical>
				return pdPASS;
 800945c:	2301      	movs	r3, #1
 800945e:	e063      	b.n	8009528 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d103      	bne.n	800946e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009466:	f001 ff49 	bl	800b2fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800946a:	2300      	movs	r3, #0
 800946c:	e05c      	b.n	8009528 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800946e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009470:	2b00      	cmp	r3, #0
 8009472:	d106      	bne.n	8009482 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009474:	f107 0314 	add.w	r3, r7, #20
 8009478:	4618      	mov	r0, r3
 800947a:	f001 f83f 	bl	800a4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800947e:	2301      	movs	r3, #1
 8009480:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009482:	f001 ff3b 	bl	800b2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009486:	f000 fda7 	bl	8009fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800948a:	f001 ff05 	bl	800b298 <vPortEnterCritical>
 800948e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009490:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009494:	b25b      	sxtb	r3, r3
 8009496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949a:	d103      	bne.n	80094a4 <xQueueGenericSend+0x174>
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094aa:	b25b      	sxtb	r3, r3
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b0:	d103      	bne.n	80094ba <xQueueGenericSend+0x18a>
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094ba:	f001 ff1f 	bl	800b2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094be:	1d3a      	adds	r2, r7, #4
 80094c0:	f107 0314 	add.w	r3, r7, #20
 80094c4:	4611      	mov	r1, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f001 f82e 	bl	800a528 <xTaskCheckForTimeOut>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d124      	bne.n	800951c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094d4:	f000 faa6 	bl	8009a24 <prvIsQueueFull>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d018      	beq.n	8009510 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	3310      	adds	r3, #16
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	4611      	mov	r1, r2
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 ff52 	bl	800a390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094ee:	f000 fa31 	bl	8009954 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094f2:	f000 fd7f 	bl	8009ff4 <xTaskResumeAll>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f47f af7c 	bne.w	80093f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80094fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009530 <xQueueGenericSend+0x200>)
 8009500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	e772      	b.n	80093f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009512:	f000 fa1f 	bl	8009954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009516:	f000 fd6d 	bl	8009ff4 <xTaskResumeAll>
 800951a:	e76c      	b.n	80093f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800951c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800951e:	f000 fa19 	bl	8009954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009522:	f000 fd67 	bl	8009ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009528:	4618      	mov	r0, r3
 800952a:	3738      	adds	r7, #56	@ 0x38
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	e000ed04 	.word	0xe000ed04

08009534 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b090      	sub	sp, #64	@ 0x40
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	e7fd      	b.n	8009560 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d103      	bne.n	8009572 <xQueueGenericSendFromISR+0x3e>
 800956a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <xQueueGenericSendFromISR+0x42>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <xQueueGenericSendFromISR+0x44>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d103      	bne.n	80095a2 <xQueueGenericSendFromISR+0x6e>
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <xQueueGenericSendFromISR+0x72>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e000      	b.n	80095a8 <xQueueGenericSendFromISR+0x74>
 80095a6:	2300      	movs	r3, #0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	623b      	str	r3, [r7, #32]
}
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
 80095c2:	e7fd      	b.n	80095c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095c4:	f001 ff48 	bl	800b458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095c8:	f3ef 8211 	mrs	r2, BASEPRI
 80095cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	61fa      	str	r2, [r7, #28]
 80095de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d302      	bcc.n	80095f6 <xQueueGenericSendFromISR+0xc2>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d12f      	bne.n	8009656 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009604:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	68b9      	ldr	r1, [r7, #8]
 800960a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800960c:	f000 f912 	bl	8009834 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009610:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009618:	d112      	bne.n	8009640 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800961a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961e:	2b00      	cmp	r3, #0
 8009620:	d016      	beq.n	8009650 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	3324      	adds	r3, #36	@ 0x24
 8009626:	4618      	mov	r0, r3
 8009628:	f000 ff04 	bl	800a434 <xTaskRemoveFromEventList>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00e      	beq.n	8009650 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00b      	beq.n	8009650 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e007      	b.n	8009650 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009640:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009644:	3301      	adds	r3, #1
 8009646:	b2db      	uxtb	r3, r3
 8009648:	b25a      	sxtb	r2, r3
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009650:	2301      	movs	r3, #1
 8009652:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009654:	e001      	b.n	800965a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009656:	2300      	movs	r3, #0
 8009658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800965a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009664:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009668:	4618      	mov	r0, r3
 800966a:	3740      	adds	r7, #64	@ 0x40
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08c      	sub	sp, #48	@ 0x30
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800967c:	2300      	movs	r3, #0
 800967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10b      	bne.n	80096a2 <xQueueReceive+0x32>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	623b      	str	r3, [r7, #32]
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	e7fd      	b.n	800969e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d103      	bne.n	80096b0 <xQueueReceive+0x40>
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <xQueueReceive+0x44>
 80096b0:	2301      	movs	r3, #1
 80096b2:	e000      	b.n	80096b6 <xQueueReceive+0x46>
 80096b4:	2300      	movs	r3, #0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10b      	bne.n	80096d2 <xQueueReceive+0x62>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	61fb      	str	r3, [r7, #28]
}
 80096cc:	bf00      	nop
 80096ce:	bf00      	nop
 80096d0:	e7fd      	b.n	80096ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096d2:	f001 f875 	bl	800a7c0 <xTaskGetSchedulerState>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d102      	bne.n	80096e2 <xQueueReceive+0x72>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <xQueueReceive+0x76>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <xQueueReceive+0x78>
 80096e6:	2300      	movs	r3, #0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10b      	bne.n	8009704 <xQueueReceive+0x94>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	61bb      	str	r3, [r7, #24]
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	e7fd      	b.n	8009700 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009704:	f001 fdc8 	bl	800b298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01f      	beq.n	8009754 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009714:	68b9      	ldr	r1, [r7, #8]
 8009716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009718:	f000 f8f6 	bl	8009908 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	1e5a      	subs	r2, r3, #1
 8009720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009722:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00f      	beq.n	800974c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800972c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972e:	3310      	adds	r3, #16
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fe7f 	bl	800a434 <xTaskRemoveFromEventList>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d007      	beq.n	800974c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800973c:	4b3c      	ldr	r3, [pc, #240]	@ (8009830 <xQueueReceive+0x1c0>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800974c:	f001 fdd6 	bl	800b2fc <vPortExitCritical>
				return pdPASS;
 8009750:	2301      	movs	r3, #1
 8009752:	e069      	b.n	8009828 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d103      	bne.n	8009762 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800975a:	f001 fdcf 	bl	800b2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800975e:	2300      	movs	r3, #0
 8009760:	e062      	b.n	8009828 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d106      	bne.n	8009776 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009768:	f107 0310 	add.w	r3, r7, #16
 800976c:	4618      	mov	r0, r3
 800976e:	f000 fec5 	bl	800a4fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009776:	f001 fdc1 	bl	800b2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800977a:	f000 fc2d 	bl	8009fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800977e:	f001 fd8b 	bl	800b298 <vPortEnterCritical>
 8009782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009788:	b25b      	sxtb	r3, r3
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d103      	bne.n	8009798 <xQueueReceive+0x128>
 8009790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800979e:	b25b      	sxtb	r3, r3
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a4:	d103      	bne.n	80097ae <xQueueReceive+0x13e>
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097ae:	f001 fda5 	bl	800b2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097b2:	1d3a      	adds	r2, r7, #4
 80097b4:	f107 0310 	add.w	r3, r7, #16
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 feb4 	bl	800a528 <xTaskCheckForTimeOut>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d123      	bne.n	800980e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097c8:	f000 f916 	bl	80099f8 <prvIsQueueEmpty>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d017      	beq.n	8009802 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d4:	3324      	adds	r3, #36	@ 0x24
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fdd8 	bl	800a390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097e2:	f000 f8b7 	bl	8009954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097e6:	f000 fc05 	bl	8009ff4 <xTaskResumeAll>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d189      	bne.n	8009704 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80097f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009830 <xQueueReceive+0x1c0>)
 80097f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	e780      	b.n	8009704 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009804:	f000 f8a6 	bl	8009954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009808:	f000 fbf4 	bl	8009ff4 <xTaskResumeAll>
 800980c:	e77a      	b.n	8009704 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800980e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009810:	f000 f8a0 	bl	8009954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009814:	f000 fbee 	bl	8009ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800981a:	f000 f8ed 	bl	80099f8 <prvIsQueueEmpty>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	f43f af6f 	beq.w	8009704 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009826:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009828:	4618      	mov	r0, r3
 800982a:	3730      	adds	r7, #48	@ 0x30
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	e000ed04 	.word	0xe000ed04

08009834 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009840:	2300      	movs	r3, #0
 8009842:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009848:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10d      	bne.n	800986e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d14d      	bne.n	80098f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 ffcc 	bl	800a7fc <xTaskPriorityDisinherit>
 8009864:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	609a      	str	r2, [r3, #8]
 800986c:	e043      	b.n	80098f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d119      	bne.n	80098a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6858      	ldr	r0, [r3, #4]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800987c:	461a      	mov	r2, r3
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	f002 fe6d 	bl	800c55e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988c:	441a      	add	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	429a      	cmp	r2, r3
 800989c:	d32b      	bcc.n	80098f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	e026      	b.n	80098f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68d8      	ldr	r0, [r3, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b0:	461a      	mov	r2, r3
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	f002 fe53 	bl	800c55e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c0:	425b      	negs	r3, r3
 80098c2:	441a      	add	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d207      	bcs.n	80098e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098dc:	425b      	negs	r3, r3
 80098de:	441a      	add	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d105      	bne.n	80098f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80098fe:	697b      	ldr	r3, [r7, #20]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	d018      	beq.n	800994c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009922:	441a      	add	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68da      	ldr	r2, [r3, #12]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	429a      	cmp	r2, r3
 8009932:	d303      	bcc.n	800993c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68d9      	ldr	r1, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009944:	461a      	mov	r2, r3
 8009946:	6838      	ldr	r0, [r7, #0]
 8009948:	f002 fe09 	bl	800c55e <memcpy>
	}
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800995c:	f001 fc9c 	bl	800b298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009966:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009968:	e011      	b.n	800998e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996e:	2b00      	cmp	r3, #0
 8009970:	d012      	beq.n	8009998 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3324      	adds	r3, #36	@ 0x24
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fd5c 	bl	800a434 <xTaskRemoveFromEventList>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009982:	f000 fe35 	bl	800a5f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	3b01      	subs	r3, #1
 800998a:	b2db      	uxtb	r3, r3
 800998c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800998e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dce9      	bgt.n	800996a <prvUnlockQueue+0x16>
 8009996:	e000      	b.n	800999a <prvUnlockQueue+0x46>
					break;
 8009998:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	22ff      	movs	r2, #255	@ 0xff
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80099a2:	f001 fcab 	bl	800b2fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099a6:	f001 fc77 	bl	800b298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099b2:	e011      	b.n	80099d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d012      	beq.n	80099e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3310      	adds	r3, #16
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 fd37 	bl	800a434 <xTaskRemoveFromEventList>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099cc:	f000 fe10 	bl	800a5f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dce9      	bgt.n	80099b4 <prvUnlockQueue+0x60>
 80099e0:	e000      	b.n	80099e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	22ff      	movs	r2, #255	@ 0xff
 80099e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80099ec:	f001 fc86 	bl	800b2fc <vPortExitCritical>
}
 80099f0:	bf00      	nop
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a00:	f001 fc4a 	bl	800b298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	e001      	b.n	8009a16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a16:	f001 fc71 	bl	800b2fc <vPortExitCritical>

	return xReturn;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a2c:	f001 fc34 	bl	800b298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d102      	bne.n	8009a42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e001      	b.n	8009a46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a46:	f001 fc59 	bl	800b2fc <vPortExitCritical>

	return xReturn;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]
 8009a62:	e014      	b.n	8009a8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a64:	4a0f      	ldr	r2, [pc, #60]	@ (8009aa4 <vQueueAddToRegistry+0x50>)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10b      	bne.n	8009a88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a70:	490c      	ldr	r1, [pc, #48]	@ (8009aa4 <vQueueAddToRegistry+0x50>)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009aa4 <vQueueAddToRegistry+0x50>)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	4413      	add	r3, r2
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a86:	e006      	b.n	8009a96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b07      	cmp	r3, #7
 8009a92:	d9e7      	bls.n	8009a64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	200012c4 	.word	0x200012c4

08009aa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ab8:	f001 fbee 	bl	800b298 <vPortEnterCritical>
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ac2:	b25b      	sxtb	r3, r3
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d103      	bne.n	8009ad2 <vQueueWaitForMessageRestricted+0x2a>
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ad8:	b25b      	sxtb	r3, r3
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	d103      	bne.n	8009ae8 <vQueueWaitForMessageRestricted+0x40>
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ae8:	f001 fc08 	bl	800b2fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d106      	bne.n	8009b02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	3324      	adds	r3, #36	@ 0x24
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fc6d 	bl	800a3dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b02:	6978      	ldr	r0, [r7, #20]
 8009b04:	f7ff ff26 	bl	8009954 <prvUnlockQueue>
	}
 8009b08:	bf00      	nop
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08e      	sub	sp, #56	@ 0x38
 8009b14:	af04      	add	r7, sp, #16
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10b      	bne.n	8009b3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	623b      	str	r3, [r7, #32]
}
 8009b36:	bf00      	nop
 8009b38:	bf00      	nop
 8009b3a:	e7fd      	b.n	8009b38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10b      	bne.n	8009b5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	61fb      	str	r3, [r7, #28]
}
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	e7fd      	b.n	8009b56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b5a:	23a8      	movs	r3, #168	@ 0xa8
 8009b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2ba8      	cmp	r3, #168	@ 0xa8
 8009b62:	d00b      	beq.n	8009b7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	61bb      	str	r3, [r7, #24]
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	e7fd      	b.n	8009b78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01e      	beq.n	8009bc2 <xTaskCreateStatic+0xb2>
 8009b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01b      	beq.n	8009bc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	f107 0314 	add.w	r3, r7, #20
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f851 	bl	8009c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009bbc:	f000 f8f6 	bl	8009dac <prvAddNewTaskToReadyList>
 8009bc0:	e001      	b.n	8009bc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bc6:	697b      	ldr	r3, [r7, #20]
	}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3728      	adds	r7, #40	@ 0x28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08c      	sub	sp, #48	@ 0x30
 8009bd4:	af04      	add	r7, sp, #16
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 fc79 	bl	800b4dc <pvPortMalloc>
 8009bea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bf2:	20a8      	movs	r0, #168	@ 0xa8
 8009bf4:	f001 fc72 	bl	800b4dc <pvPortMalloc>
 8009bf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c06:	e005      	b.n	8009c14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c08:	6978      	ldr	r0, [r7, #20]
 8009c0a:	f001 fd35 	bl	800b678 <vPortFree>
 8009c0e:	e001      	b.n	8009c14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d017      	beq.n	8009c4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	2300      	movs	r3, #0
 8009c26:	9303      	str	r3, [sp, #12]
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f80f 	bl	8009c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c3e:	69f8      	ldr	r0, [r7, #28]
 8009c40:	f000 f8b4 	bl	8009dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c44:	2301      	movs	r3, #1
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	e002      	b.n	8009c50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c50:	69bb      	ldr	r3, [r7, #24]
	}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	461a      	mov	r2, r3
 8009c74:	21a5      	movs	r1, #165	@ 0xa5
 8009c76:	f002 fb9d 	bl	800c3b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009c84:	3b01      	subs	r3, #1
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f023 0307 	bic.w	r3, r3, #7
 8009c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00b      	beq.n	8009cb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	617b      	str	r3, [r7, #20]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01f      	beq.n	8009cfc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61fb      	str	r3, [r7, #28]
 8009cc0:	e012      	b.n	8009ce8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	7819      	ldrb	r1, [r3, #0]
 8009cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	4413      	add	r3, r2
 8009cd0:	3334      	adds	r3, #52	@ 0x34
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	4413      	add	r3, r2
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d006      	beq.n	8009cf0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	61fb      	str	r3, [r7, #28]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2b0f      	cmp	r3, #15
 8009cec:	d9e9      	bls.n	8009cc2 <prvInitialiseNewTask+0x66>
 8009cee:	e000      	b.n	8009cf2 <prvInitialiseNewTask+0x96>
			{
				break;
 8009cf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009cfa:	e003      	b.n	8009d04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d06:	2b37      	cmp	r3, #55	@ 0x37
 8009d08:	d901      	bls.n	8009d0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d0a:	2337      	movs	r3, #55	@ 0x37
 8009d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d22:	3304      	adds	r3, #4
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff f965 	bl	8008ff4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2c:	3318      	adds	r3, #24
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff f960 	bl	8008ff4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	3354      	adds	r3, #84	@ 0x54
 8009d5e:	224c      	movs	r2, #76	@ 0x4c
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 fb26 	bl	800c3b4 <memset>
 8009d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8009da0 <prvInitialiseNewTask+0x144>)
 8009d6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	4a0c      	ldr	r2, [pc, #48]	@ (8009da4 <prvInitialiseNewTask+0x148>)
 8009d72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	4a0c      	ldr	r2, [pc, #48]	@ (8009da8 <prvInitialiseNewTask+0x14c>)
 8009d78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	68f9      	ldr	r1, [r7, #12]
 8009d7e:	69b8      	ldr	r0, [r7, #24]
 8009d80:	f001 f95a 	bl	800b038 <pxPortInitialiseStack>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d96:	bf00      	nop
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20005558 	.word	0x20005558
 8009da4:	200055c0 	.word	0x200055c0
 8009da8:	20005628 	.word	0x20005628

08009dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009db4:	f001 fa70 	bl	800b298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009db8:	4b2d      	ldr	r3, [pc, #180]	@ (8009e70 <prvAddNewTaskToReadyList+0xc4>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8009e70 <prvAddNewTaskToReadyList+0xc4>)
 8009dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8009e74 <prvAddNewTaskToReadyList+0xc8>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009dca:	4a2a      	ldr	r2, [pc, #168]	@ (8009e74 <prvAddNewTaskToReadyList+0xc8>)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009dd0:	4b27      	ldr	r3, [pc, #156]	@ (8009e70 <prvAddNewTaskToReadyList+0xc4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d110      	bne.n	8009dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009dd8:	f000 fc2e 	bl	800a638 <prvInitialiseTaskLists>
 8009ddc:	e00d      	b.n	8009dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009dde:	4b26      	ldr	r3, [pc, #152]	@ (8009e78 <prvAddNewTaskToReadyList+0xcc>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d109      	bne.n	8009dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009de6:	4b23      	ldr	r3, [pc, #140]	@ (8009e74 <prvAddNewTaskToReadyList+0xc8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d802      	bhi.n	8009dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009df4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e74 <prvAddNewTaskToReadyList+0xc8>)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009dfa:	4b20      	ldr	r3, [pc, #128]	@ (8009e7c <prvAddNewTaskToReadyList+0xd0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	4a1e      	ldr	r2, [pc, #120]	@ (8009e7c <prvAddNewTaskToReadyList+0xd0>)
 8009e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e04:	4b1d      	ldr	r3, [pc, #116]	@ (8009e7c <prvAddNewTaskToReadyList+0xd0>)
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e10:	4b1b      	ldr	r3, [pc, #108]	@ (8009e80 <prvAddNewTaskToReadyList+0xd4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d903      	bls.n	8009e20 <prvAddNewTaskToReadyList+0x74>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1c:	4a18      	ldr	r2, [pc, #96]	@ (8009e80 <prvAddNewTaskToReadyList+0xd4>)
 8009e1e:	6013      	str	r3, [r2, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e24:	4613      	mov	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4a15      	ldr	r2, [pc, #84]	@ (8009e84 <prvAddNewTaskToReadyList+0xd8>)
 8009e2e:	441a      	add	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f7ff f8e9 	bl	800900e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e3c:	f001 fa5e 	bl	800b2fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e40:	4b0d      	ldr	r3, [pc, #52]	@ (8009e78 <prvAddNewTaskToReadyList+0xcc>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00e      	beq.n	8009e66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e48:	4b0a      	ldr	r3, [pc, #40]	@ (8009e74 <prvAddNewTaskToReadyList+0xc8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d207      	bcs.n	8009e66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e56:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <prvAddNewTaskToReadyList+0xdc>)
 8009e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200017d8 	.word	0x200017d8
 8009e74:	20001304 	.word	0x20001304
 8009e78:	200017e4 	.word	0x200017e4
 8009e7c:	200017f4 	.word	0x200017f4
 8009e80:	200017e0 	.word	0x200017e0
 8009e84:	20001308 	.word	0x20001308
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d018      	beq.n	8009ed0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e9e:	4b14      	ldr	r3, [pc, #80]	@ (8009ef0 <vTaskDelay+0x64>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <vTaskDelay+0x32>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	60bb      	str	r3, [r7, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	e7fd      	b.n	8009eba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ebe:	f000 f88b 	bl	8009fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fd09 	bl	800a8dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009eca:	f000 f893 	bl	8009ff4 <xTaskResumeAll>
 8009ece:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d107      	bne.n	8009ee6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009ed6:	4b07      	ldr	r3, [pc, #28]	@ (8009ef4 <vTaskDelay+0x68>)
 8009ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20001800 	.word	0x20001800
 8009ef4:	e000ed04 	.word	0xe000ed04

08009ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b08a      	sub	sp, #40	@ 0x28
 8009efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f06:	463a      	mov	r2, r7
 8009f08:	1d39      	adds	r1, r7, #4
 8009f0a:	f107 0308 	add.w	r3, r7, #8
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff f81c 	bl	8008f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	9202      	str	r2, [sp, #8]
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	2300      	movs	r3, #0
 8009f24:	460a      	mov	r2, r1
 8009f26:	4924      	ldr	r1, [pc, #144]	@ (8009fb8 <vTaskStartScheduler+0xc0>)
 8009f28:	4824      	ldr	r0, [pc, #144]	@ (8009fbc <vTaskStartScheduler+0xc4>)
 8009f2a:	f7ff fdf1 	bl	8009b10 <xTaskCreateStatic>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	4a23      	ldr	r2, [pc, #140]	@ (8009fc0 <vTaskStartScheduler+0xc8>)
 8009f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f34:	4b22      	ldr	r3, [pc, #136]	@ (8009fc0 <vTaskStartScheduler+0xc8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	e001      	b.n	8009f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d102      	bne.n	8009f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f4c:	f000 fd1a 	bl	800a984 <xTimerCreateTimerTask>
 8009f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d11b      	bne.n	8009f90 <vTaskStartScheduler+0x98>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	613b      	str	r3, [r7, #16]
}
 8009f6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f6c:	4b15      	ldr	r3, [pc, #84]	@ (8009fc4 <vTaskStartScheduler+0xcc>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3354      	adds	r3, #84	@ 0x54
 8009f72:	4a15      	ldr	r2, [pc, #84]	@ (8009fc8 <vTaskStartScheduler+0xd0>)
 8009f74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f76:	4b15      	ldr	r3, [pc, #84]	@ (8009fcc <vTaskStartScheduler+0xd4>)
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f7e:	4b14      	ldr	r3, [pc, #80]	@ (8009fd0 <vTaskStartScheduler+0xd8>)
 8009f80:	2201      	movs	r2, #1
 8009f82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f84:	4b13      	ldr	r3, [pc, #76]	@ (8009fd4 <vTaskStartScheduler+0xdc>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f8a:	f001 f8e1 	bl	800b150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f8e:	e00f      	b.n	8009fb0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f96:	d10b      	bne.n	8009fb0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	60fb      	str	r3, [r7, #12]
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	e7fd      	b.n	8009fac <vTaskStartScheduler+0xb4>
}
 8009fb0:	bf00      	nop
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	0800f76c 	.word	0x0800f76c
 8009fbc:	0800a609 	.word	0x0800a609
 8009fc0:	200017fc 	.word	0x200017fc
 8009fc4:	20001304 	.word	0x20001304
 8009fc8:	2000003c 	.word	0x2000003c
 8009fcc:	200017f8 	.word	0x200017f8
 8009fd0:	200017e4 	.word	0x200017e4
 8009fd4:	200017dc 	.word	0x200017dc

08009fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009fdc:	4b04      	ldr	r3, [pc, #16]	@ (8009ff0 <vTaskSuspendAll+0x18>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	4a03      	ldr	r2, [pc, #12]	@ (8009ff0 <vTaskSuspendAll+0x18>)
 8009fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009fe6:	bf00      	nop
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	20001800 	.word	0x20001800

08009ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a002:	4b42      	ldr	r3, [pc, #264]	@ (800a10c <xTaskResumeAll+0x118>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <xTaskResumeAll+0x2e>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	603b      	str	r3, [r7, #0]
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a022:	f001 f939 	bl	800b298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a026:	4b39      	ldr	r3, [pc, #228]	@ (800a10c <xTaskResumeAll+0x118>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	4a37      	ldr	r2, [pc, #220]	@ (800a10c <xTaskResumeAll+0x118>)
 800a02e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a030:	4b36      	ldr	r3, [pc, #216]	@ (800a10c <xTaskResumeAll+0x118>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d162      	bne.n	800a0fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a038:	4b35      	ldr	r3, [pc, #212]	@ (800a110 <xTaskResumeAll+0x11c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d05e      	beq.n	800a0fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a040:	e02f      	b.n	800a0a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a042:	4b34      	ldr	r3, [pc, #208]	@ (800a114 <xTaskResumeAll+0x120>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3318      	adds	r3, #24
 800a04e:	4618      	mov	r0, r3
 800a050:	f7ff f83a 	bl	80090c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3304      	adds	r3, #4
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff f835 	bl	80090c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a062:	4b2d      	ldr	r3, [pc, #180]	@ (800a118 <xTaskResumeAll+0x124>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d903      	bls.n	800a072 <xTaskResumeAll+0x7e>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06e:	4a2a      	ldr	r2, [pc, #168]	@ (800a118 <xTaskResumeAll+0x124>)
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4a27      	ldr	r2, [pc, #156]	@ (800a11c <xTaskResumeAll+0x128>)
 800a080:	441a      	add	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3304      	adds	r3, #4
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f7fe ffc0 	bl	800900e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a092:	4b23      	ldr	r3, [pc, #140]	@ (800a120 <xTaskResumeAll+0x12c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a098:	429a      	cmp	r2, r3
 800a09a:	d302      	bcc.n	800a0a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a09c:	4b21      	ldr	r3, [pc, #132]	@ (800a124 <xTaskResumeAll+0x130>)
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0a2:	4b1c      	ldr	r3, [pc, #112]	@ (800a114 <xTaskResumeAll+0x120>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1cb      	bne.n	800a042 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0b0:	f000 fb66 	bl	800a780 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a128 <xTaskResumeAll+0x134>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d010      	beq.n	800a0e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0c0:	f000 f846 	bl	800a150 <xTaskIncrementTick>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a0ca:	4b16      	ldr	r3, [pc, #88]	@ (800a124 <xTaskResumeAll+0x130>)
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f1      	bne.n	800a0c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a0dc:	4b12      	ldr	r3, [pc, #72]	@ (800a128 <xTaskResumeAll+0x134>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0e2:	4b10      	ldr	r3, [pc, #64]	@ (800a124 <xTaskResumeAll+0x130>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d009      	beq.n	800a0fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a0ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a12c <xTaskResumeAll+0x138>)
 800a0f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0fe:	f001 f8fd 	bl	800b2fc <vPortExitCritical>

	return xAlreadyYielded;
 800a102:	68bb      	ldr	r3, [r7, #8]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20001800 	.word	0x20001800
 800a110:	200017d8 	.word	0x200017d8
 800a114:	20001798 	.word	0x20001798
 800a118:	200017e0 	.word	0x200017e0
 800a11c:	20001308 	.word	0x20001308
 800a120:	20001304 	.word	0x20001304
 800a124:	200017ec 	.word	0x200017ec
 800a128:	200017e8 	.word	0x200017e8
 800a12c:	e000ed04 	.word	0xe000ed04

0800a130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a136:	4b05      	ldr	r3, [pc, #20]	@ (800a14c <xTaskGetTickCount+0x1c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a13c:	687b      	ldr	r3, [r7, #4]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	200017dc 	.word	0x200017dc

0800a150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a156:	2300      	movs	r3, #0
 800a158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a15a:	4b4f      	ldr	r3, [pc, #316]	@ (800a298 <xTaskIncrementTick+0x148>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f040 8090 	bne.w	800a284 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a164:	4b4d      	ldr	r3, [pc, #308]	@ (800a29c <xTaskIncrementTick+0x14c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3301      	adds	r3, #1
 800a16a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a16c:	4a4b      	ldr	r2, [pc, #300]	@ (800a29c <xTaskIncrementTick+0x14c>)
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d121      	bne.n	800a1bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a178:	4b49      	ldr	r3, [pc, #292]	@ (800a2a0 <xTaskIncrementTick+0x150>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	603b      	str	r3, [r7, #0]
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	e7fd      	b.n	800a196 <xTaskIncrementTick+0x46>
 800a19a:	4b41      	ldr	r3, [pc, #260]	@ (800a2a0 <xTaskIncrementTick+0x150>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	4b40      	ldr	r3, [pc, #256]	@ (800a2a4 <xTaskIncrementTick+0x154>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a3e      	ldr	r2, [pc, #248]	@ (800a2a0 <xTaskIncrementTick+0x150>)
 800a1a6:	6013      	str	r3, [r2, #0]
 800a1a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a2a4 <xTaskIncrementTick+0x154>)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	4b3e      	ldr	r3, [pc, #248]	@ (800a2a8 <xTaskIncrementTick+0x158>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	4a3c      	ldr	r2, [pc, #240]	@ (800a2a8 <xTaskIncrementTick+0x158>)
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	f000 fae2 	bl	800a780 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a2ac <xTaskIncrementTick+0x15c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d349      	bcc.n	800a25a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1c6:	4b36      	ldr	r3, [pc, #216]	@ (800a2a0 <xTaskIncrementTick+0x150>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d104      	bne.n	800a1da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d0:	4b36      	ldr	r3, [pc, #216]	@ (800a2ac <xTaskIncrementTick+0x15c>)
 800a1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d6:	601a      	str	r2, [r3, #0]
					break;
 800a1d8:	e03f      	b.n	800a25a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1da:	4b31      	ldr	r3, [pc, #196]	@ (800a2a0 <xTaskIncrementTick+0x150>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d203      	bcs.n	800a1fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1f2:	4a2e      	ldr	r2, [pc, #184]	@ (800a2ac <xTaskIncrementTick+0x15c>)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1f8:	e02f      	b.n	800a25a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe ff62 	bl	80090c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d004      	beq.n	800a216 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	3318      	adds	r3, #24
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe ff59 	bl	80090c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a21a:	4b25      	ldr	r3, [pc, #148]	@ (800a2b0 <xTaskIncrementTick+0x160>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d903      	bls.n	800a22a <xTaskIncrementTick+0xda>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	4a22      	ldr	r2, [pc, #136]	@ (800a2b0 <xTaskIncrementTick+0x160>)
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b4 <xTaskIncrementTick+0x164>)
 800a238:	441a      	add	r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	3304      	adds	r3, #4
 800a23e:	4619      	mov	r1, r3
 800a240:	4610      	mov	r0, r2
 800a242:	f7fe fee4 	bl	800900e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24a:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b8 <xTaskIncrementTick+0x168>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a250:	429a      	cmp	r2, r3
 800a252:	d3b8      	bcc.n	800a1c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a254:	2301      	movs	r3, #1
 800a256:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a258:	e7b5      	b.n	800a1c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a25a:	4b17      	ldr	r3, [pc, #92]	@ (800a2b8 <xTaskIncrementTick+0x168>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a260:	4914      	ldr	r1, [pc, #80]	@ (800a2b4 <xTaskIncrementTick+0x164>)
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	440b      	add	r3, r1
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d901      	bls.n	800a276 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a272:	2301      	movs	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a276:	4b11      	ldr	r3, [pc, #68]	@ (800a2bc <xTaskIncrementTick+0x16c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a27e:	2301      	movs	r3, #1
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e004      	b.n	800a28e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a284:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c0 <xTaskIncrementTick+0x170>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3301      	adds	r3, #1
 800a28a:	4a0d      	ldr	r2, [pc, #52]	@ (800a2c0 <xTaskIncrementTick+0x170>)
 800a28c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a28e:	697b      	ldr	r3, [r7, #20]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	20001800 	.word	0x20001800
 800a29c:	200017dc 	.word	0x200017dc
 800a2a0:	20001790 	.word	0x20001790
 800a2a4:	20001794 	.word	0x20001794
 800a2a8:	200017f0 	.word	0x200017f0
 800a2ac:	200017f8 	.word	0x200017f8
 800a2b0:	200017e0 	.word	0x200017e0
 800a2b4:	20001308 	.word	0x20001308
 800a2b8:	20001304 	.word	0x20001304
 800a2bc:	200017ec 	.word	0x200017ec
 800a2c0:	200017e8 	.word	0x200017e8

0800a2c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ca:	4b2b      	ldr	r3, [pc, #172]	@ (800a378 <vTaskSwitchContext+0xb4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2d2:	4b2a      	ldr	r3, [pc, #168]	@ (800a37c <vTaskSwitchContext+0xb8>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2d8:	e047      	b.n	800a36a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a2da:	4b28      	ldr	r3, [pc, #160]	@ (800a37c <vTaskSwitchContext+0xb8>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e0:	4b27      	ldr	r3, [pc, #156]	@ (800a380 <vTaskSwitchContext+0xbc>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e011      	b.n	800a30c <vTaskSwitchContext+0x48>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10b      	bne.n	800a306 <vTaskSwitchContext+0x42>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	607b      	str	r3, [r7, #4]
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	e7fd      	b.n	800a302 <vTaskSwitchContext+0x3e>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b01      	subs	r3, #1
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	491d      	ldr	r1, [pc, #116]	@ (800a384 <vTaskSwitchContext+0xc0>)
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	4613      	mov	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	440b      	add	r3, r1
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0e3      	beq.n	800a2e8 <vTaskSwitchContext+0x24>
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4613      	mov	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4a16      	ldr	r2, [pc, #88]	@ (800a384 <vTaskSwitchContext+0xc0>)
 800a32c:	4413      	add	r3, r2
 800a32e:	60bb      	str	r3, [r7, #8]
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	605a      	str	r2, [r3, #4]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	3308      	adds	r3, #8
 800a342:	429a      	cmp	r2, r3
 800a344:	d104      	bne.n	800a350 <vTaskSwitchContext+0x8c>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	605a      	str	r2, [r3, #4]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	4a0c      	ldr	r2, [pc, #48]	@ (800a388 <vTaskSwitchContext+0xc4>)
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	4a09      	ldr	r2, [pc, #36]	@ (800a380 <vTaskSwitchContext+0xbc>)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a360:	4b09      	ldr	r3, [pc, #36]	@ (800a388 <vTaskSwitchContext+0xc4>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3354      	adds	r3, #84	@ 0x54
 800a366:	4a09      	ldr	r2, [pc, #36]	@ (800a38c <vTaskSwitchContext+0xc8>)
 800a368:	6013      	str	r3, [r2, #0]
}
 800a36a:	bf00      	nop
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	20001800 	.word	0x20001800
 800a37c:	200017ec 	.word	0x200017ec
 800a380:	200017e0 	.word	0x200017e0
 800a384:	20001308 	.word	0x20001308
 800a388:	20001304 	.word	0x20001304
 800a38c:	2000003c 	.word	0x2000003c

0800a390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10b      	bne.n	800a3b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	60fb      	str	r3, [r7, #12]
}
 800a3b2:	bf00      	nop
 800a3b4:	bf00      	nop
 800a3b6:	e7fd      	b.n	800a3b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3b8:	4b07      	ldr	r3, [pc, #28]	@ (800a3d8 <vTaskPlaceOnEventList+0x48>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3318      	adds	r3, #24
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7fe fe48 	bl	8009056 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	6838      	ldr	r0, [r7, #0]
 800a3ca:	f000 fa87 	bl	800a8dc <prvAddCurrentTaskToDelayedList>
}
 800a3ce:	bf00      	nop
 800a3d0:	3710      	adds	r7, #16
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20001304 	.word	0x20001304

0800a3dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10b      	bne.n	800a406 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	617b      	str	r3, [r7, #20]
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	e7fd      	b.n	800a402 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a406:	4b0a      	ldr	r3, [pc, #40]	@ (800a430 <vTaskPlaceOnEventListRestricted+0x54>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3318      	adds	r3, #24
 800a40c:	4619      	mov	r1, r3
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7fe fdfd 	bl	800900e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d002      	beq.n	800a420 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a41a:	f04f 33ff 	mov.w	r3, #4294967295
 800a41e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	68b8      	ldr	r0, [r7, #8]
 800a424:	f000 fa5a 	bl	800a8dc <prvAddCurrentTaskToDelayedList>
	}
 800a428:	bf00      	nop
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	20001304 	.word	0x20001304

0800a434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10b      	bne.n	800a462 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	60fb      	str	r3, [r7, #12]
}
 800a45c:	bf00      	nop
 800a45e:	bf00      	nop
 800a460:	e7fd      	b.n	800a45e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	3318      	adds	r3, #24
 800a466:	4618      	mov	r0, r3
 800a468:	f7fe fe2e 	bl	80090c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a46c:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e4 <xTaskRemoveFromEventList+0xb0>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d11d      	bne.n	800a4b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	3304      	adds	r3, #4
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fe fe25 	bl	80090c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a482:	4b19      	ldr	r3, [pc, #100]	@ (800a4e8 <xTaskRemoveFromEventList+0xb4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d903      	bls.n	800a492 <xTaskRemoveFromEventList+0x5e>
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48e:	4a16      	ldr	r2, [pc, #88]	@ (800a4e8 <xTaskRemoveFromEventList+0xb4>)
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a496:	4613      	mov	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4a13      	ldr	r2, [pc, #76]	@ (800a4ec <xTaskRemoveFromEventList+0xb8>)
 800a4a0:	441a      	add	r2, r3
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	f7fe fdb0 	bl	800900e <vListInsertEnd>
 800a4ae:	e005      	b.n	800a4bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	3318      	adds	r3, #24
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	480e      	ldr	r0, [pc, #56]	@ (800a4f0 <xTaskRemoveFromEventList+0xbc>)
 800a4b8:	f7fe fda9 	bl	800900e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <xTaskRemoveFromEventList+0xc0>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d905      	bls.n	800a4d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f8 <xTaskRemoveFromEventList+0xc4>)
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	e001      	b.n	800a4da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4da:	697b      	ldr	r3, [r7, #20]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20001800 	.word	0x20001800
 800a4e8:	200017e0 	.word	0x200017e0
 800a4ec:	20001308 	.word	0x20001308
 800a4f0:	20001798 	.word	0x20001798
 800a4f4:	20001304 	.word	0x20001304
 800a4f8:	200017ec 	.word	0x200017ec

0800a4fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a504:	4b06      	ldr	r3, [pc, #24]	@ (800a520 <vTaskInternalSetTimeOutState+0x24>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a50c:	4b05      	ldr	r3, [pc, #20]	@ (800a524 <vTaskInternalSetTimeOutState+0x28>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	605a      	str	r2, [r3, #4]
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	200017f0 	.word	0x200017f0
 800a524:	200017dc 	.word	0x200017dc

0800a528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10b      	bne.n	800a550 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	613b      	str	r3, [r7, #16]
}
 800a54a:	bf00      	nop
 800a54c:	bf00      	nop
 800a54e:	e7fd      	b.n	800a54c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10b      	bne.n	800a56e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	60fb      	str	r3, [r7, #12]
}
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	e7fd      	b.n	800a56a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a56e:	f000 fe93 	bl	800b298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a572:	4b1d      	ldr	r3, [pc, #116]	@ (800a5e8 <xTaskCheckForTimeOut+0xc0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	69ba      	ldr	r2, [r7, #24]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d102      	bne.n	800a592 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	e023      	b.n	800a5da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b15      	ldr	r3, [pc, #84]	@ (800a5ec <xTaskCheckForTimeOut+0xc4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d007      	beq.n	800a5ae <xTaskCheckForTimeOut+0x86>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d302      	bcc.n	800a5ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	61fb      	str	r3, [r7, #28]
 800a5ac:	e015      	b.n	800a5da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d20b      	bcs.n	800a5d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff ff99 	bl	800a4fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61fb      	str	r3, [r7, #28]
 800a5ce:	e004      	b.n	800a5da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5da:	f000 fe8f 	bl	800b2fc <vPortExitCritical>

	return xReturn;
 800a5de:	69fb      	ldr	r3, [r7, #28]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200017dc 	.word	0x200017dc
 800a5ec:	200017f0 	.word	0x200017f0

0800a5f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5f4:	4b03      	ldr	r3, [pc, #12]	@ (800a604 <vTaskMissedYield+0x14>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
}
 800a5fa:	bf00      	nop
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	200017ec 	.word	0x200017ec

0800a608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a610:	f000 f852 	bl	800a6b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a614:	4b06      	ldr	r3, [pc, #24]	@ (800a630 <prvIdleTask+0x28>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d9f9      	bls.n	800a610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a61c:	4b05      	ldr	r3, [pc, #20]	@ (800a634 <prvIdleTask+0x2c>)
 800a61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a62c:	e7f0      	b.n	800a610 <prvIdleTask+0x8>
 800a62e:	bf00      	nop
 800a630:	20001308 	.word	0x20001308
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
 800a642:	e00c      	b.n	800a65e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a12      	ldr	r2, [pc, #72]	@ (800a698 <prvInitialiseTaskLists+0x60>)
 800a650:	4413      	add	r3, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fcae 	bl	8008fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3301      	adds	r3, #1
 800a65c:	607b      	str	r3, [r7, #4]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b37      	cmp	r3, #55	@ 0x37
 800a662:	d9ef      	bls.n	800a644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a664:	480d      	ldr	r0, [pc, #52]	@ (800a69c <prvInitialiseTaskLists+0x64>)
 800a666:	f7fe fca5 	bl	8008fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a66a:	480d      	ldr	r0, [pc, #52]	@ (800a6a0 <prvInitialiseTaskLists+0x68>)
 800a66c:	f7fe fca2 	bl	8008fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a670:	480c      	ldr	r0, [pc, #48]	@ (800a6a4 <prvInitialiseTaskLists+0x6c>)
 800a672:	f7fe fc9f 	bl	8008fb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a676:	480c      	ldr	r0, [pc, #48]	@ (800a6a8 <prvInitialiseTaskLists+0x70>)
 800a678:	f7fe fc9c 	bl	8008fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a67c:	480b      	ldr	r0, [pc, #44]	@ (800a6ac <prvInitialiseTaskLists+0x74>)
 800a67e:	f7fe fc99 	bl	8008fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a682:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b0 <prvInitialiseTaskLists+0x78>)
 800a684:	4a05      	ldr	r2, [pc, #20]	@ (800a69c <prvInitialiseTaskLists+0x64>)
 800a686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a688:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b4 <prvInitialiseTaskLists+0x7c>)
 800a68a:	4a05      	ldr	r2, [pc, #20]	@ (800a6a0 <prvInitialiseTaskLists+0x68>)
 800a68c:	601a      	str	r2, [r3, #0]
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20001308 	.word	0x20001308
 800a69c:	20001768 	.word	0x20001768
 800a6a0:	2000177c 	.word	0x2000177c
 800a6a4:	20001798 	.word	0x20001798
 800a6a8:	200017ac 	.word	0x200017ac
 800a6ac:	200017c4 	.word	0x200017c4
 800a6b0:	20001790 	.word	0x20001790
 800a6b4:	20001794 	.word	0x20001794

0800a6b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6be:	e019      	b.n	800a6f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6c0:	f000 fdea 	bl	800b298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c4:	4b10      	ldr	r3, [pc, #64]	@ (800a708 <prvCheckTasksWaitingTermination+0x50>)
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fcf9 	bl	80090c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a70c <prvCheckTasksWaitingTermination+0x54>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	4a0b      	ldr	r2, [pc, #44]	@ (800a70c <prvCheckTasksWaitingTermination+0x54>)
 800a6de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a710 <prvCheckTasksWaitingTermination+0x58>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	4a0a      	ldr	r2, [pc, #40]	@ (800a710 <prvCheckTasksWaitingTermination+0x58>)
 800a6e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6ea:	f000 fe07 	bl	800b2fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f810 	bl	800a714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6f4:	4b06      	ldr	r3, [pc, #24]	@ (800a710 <prvCheckTasksWaitingTermination+0x58>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e1      	bne.n	800a6c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200017ac 	.word	0x200017ac
 800a70c:	200017d8 	.word	0x200017d8
 800a710:	200017c0 	.word	0x200017c0

0800a714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3354      	adds	r3, #84	@ 0x54
 800a720:	4618      	mov	r0, r3
 800a722:	f001 fe63 	bl	800c3ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a734:	4618      	mov	r0, r3
 800a736:	f000 ff9f 	bl	800b678 <vPortFree>
				vPortFree( pxTCB );
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 ff9c 	bl	800b678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a740:	e019      	b.n	800a776 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d103      	bne.n	800a754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 ff93 	bl	800b678 <vPortFree>
	}
 800a752:	e010      	b.n	800a776 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d00b      	beq.n	800a776 <prvDeleteTCB+0x62>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	60fb      	str	r3, [r7, #12]
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	e7fd      	b.n	800a772 <prvDeleteTCB+0x5e>
	}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
	...

0800a780 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a786:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b8 <prvResetNextTaskUnblockTime+0x38>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a790:	4b0a      	ldr	r3, [pc, #40]	@ (800a7bc <prvResetNextTaskUnblockTime+0x3c>)
 800a792:	f04f 32ff 	mov.w	r2, #4294967295
 800a796:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a798:	e008      	b.n	800a7ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79a:	4b07      	ldr	r3, [pc, #28]	@ (800a7b8 <prvResetNextTaskUnblockTime+0x38>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	4a04      	ldr	r2, [pc, #16]	@ (800a7bc <prvResetNextTaskUnblockTime+0x3c>)
 800a7aa:	6013      	str	r3, [r2, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	20001790 	.word	0x20001790
 800a7bc:	200017f8 	.word	0x200017f8

0800a7c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f4 <xTaskGetSchedulerState+0x34>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d102      	bne.n	800a7d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	e008      	b.n	800a7e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7d4:	4b08      	ldr	r3, [pc, #32]	@ (800a7f8 <xTaskGetSchedulerState+0x38>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7dc:	2302      	movs	r3, #2
 800a7de:	607b      	str	r3, [r7, #4]
 800a7e0:	e001      	b.n	800a7e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7e6:	687b      	ldr	r3, [r7, #4]
	}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	200017e4 	.word	0x200017e4
 800a7f8:	20001800 	.word	0x20001800

0800a7fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a808:	2300      	movs	r3, #0
 800a80a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d058      	beq.n	800a8c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a812:	4b2f      	ldr	r3, [pc, #188]	@ (800a8d0 <xTaskPriorityDisinherit+0xd4>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d00b      	beq.n	800a834 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	60fb      	str	r3, [r7, #12]
}
 800a82e:	bf00      	nop
 800a830:	bf00      	nop
 800a832:	e7fd      	b.n	800a830 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10b      	bne.n	800a854 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	60bb      	str	r3, [r7, #8]
}
 800a84e:	bf00      	nop
 800a850:	bf00      	nop
 800a852:	e7fd      	b.n	800a850 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a858:	1e5a      	subs	r2, r3, #1
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a866:	429a      	cmp	r2, r3
 800a868:	d02c      	beq.n	800a8c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d128      	bne.n	800a8c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	3304      	adds	r3, #4
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe fc26 	bl	80090c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a894:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d4 <xTaskPriorityDisinherit+0xd8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d903      	bls.n	800a8a4 <xTaskPriorityDisinherit+0xa8>
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a0:	4a0c      	ldr	r2, [pc, #48]	@ (800a8d4 <xTaskPriorityDisinherit+0xd8>)
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4a09      	ldr	r2, [pc, #36]	@ (800a8d8 <xTaskPriorityDisinherit+0xdc>)
 800a8b2:	441a      	add	r2, r3
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	f7fe fba7 	bl	800900e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8c4:	697b      	ldr	r3, [r7, #20]
	}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20001304 	.word	0x20001304
 800a8d4:	200017e0 	.word	0x200017e0
 800a8d8:	20001308 	.word	0x20001308

0800a8dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8e6:	4b21      	ldr	r3, [pc, #132]	@ (800a96c <prvAddCurrentTaskToDelayedList+0x90>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ec:	4b20      	ldr	r3, [pc, #128]	@ (800a970 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fbe8 	bl	80090c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fe:	d10a      	bne.n	800a916 <prvAddCurrentTaskToDelayedList+0x3a>
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d007      	beq.n	800a916 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a906:	4b1a      	ldr	r3, [pc, #104]	@ (800a970 <prvAddCurrentTaskToDelayedList+0x94>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3304      	adds	r3, #4
 800a90c:	4619      	mov	r1, r3
 800a90e:	4819      	ldr	r0, [pc, #100]	@ (800a974 <prvAddCurrentTaskToDelayedList+0x98>)
 800a910:	f7fe fb7d 	bl	800900e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a914:	e026      	b.n	800a964 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4413      	add	r3, r2
 800a91c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a91e:	4b14      	ldr	r3, [pc, #80]	@ (800a970 <prvAddCurrentTaskToDelayedList+0x94>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d209      	bcs.n	800a942 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a92e:	4b12      	ldr	r3, [pc, #72]	@ (800a978 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b0f      	ldr	r3, [pc, #60]	@ (800a970 <prvAddCurrentTaskToDelayedList+0x94>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3304      	adds	r3, #4
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7fe fb8b 	bl	8009056 <vListInsert>
}
 800a940:	e010      	b.n	800a964 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a942:	4b0e      	ldr	r3, [pc, #56]	@ (800a97c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4b0a      	ldr	r3, [pc, #40]	@ (800a970 <prvAddCurrentTaskToDelayedList+0x94>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f7fe fb81 	bl	8009056 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a954:	4b0a      	ldr	r3, [pc, #40]	@ (800a980 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d202      	bcs.n	800a964 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a95e:	4a08      	ldr	r2, [pc, #32]	@ (800a980 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	6013      	str	r3, [r2, #0]
}
 800a964:	bf00      	nop
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	200017dc 	.word	0x200017dc
 800a970:	20001304 	.word	0x20001304
 800a974:	200017c4 	.word	0x200017c4
 800a978:	20001794 	.word	0x20001794
 800a97c:	20001790 	.word	0x20001790
 800a980:	200017f8 	.word	0x200017f8

0800a984 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08a      	sub	sp, #40	@ 0x28
 800a988:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a98e:	f000 fb13 	bl	800afb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a992:	4b1d      	ldr	r3, [pc, #116]	@ (800aa08 <xTimerCreateTimerTask+0x84>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d021      	beq.n	800a9de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9a2:	1d3a      	adds	r2, r7, #4
 800a9a4:	f107 0108 	add.w	r1, r7, #8
 800a9a8:	f107 030c 	add.w	r3, r7, #12
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fae7 	bl	8008f80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	9202      	str	r2, [sp, #8]
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	2302      	movs	r3, #2
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	460a      	mov	r2, r1
 800a9c4:	4911      	ldr	r1, [pc, #68]	@ (800aa0c <xTimerCreateTimerTask+0x88>)
 800a9c6:	4812      	ldr	r0, [pc, #72]	@ (800aa10 <xTimerCreateTimerTask+0x8c>)
 800a9c8:	f7ff f8a2 	bl	8009b10 <xTaskCreateStatic>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4a11      	ldr	r2, [pc, #68]	@ (800aa14 <xTimerCreateTimerTask+0x90>)
 800a9d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9d2:	4b10      	ldr	r3, [pc, #64]	@ (800aa14 <xTimerCreateTimerTask+0x90>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10b      	bne.n	800a9fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	613b      	str	r3, [r7, #16]
}
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	e7fd      	b.n	800a9f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a9fc:	697b      	ldr	r3, [r7, #20]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20001834 	.word	0x20001834
 800aa0c:	0800f774 	.word	0x0800f774
 800aa10:	0800ab51 	.word	0x0800ab51
 800aa14:	20001838 	.word	0x20001838

0800aa18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08a      	sub	sp, #40	@ 0x28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
 800aa24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa26:	2300      	movs	r3, #0
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10b      	bne.n	800aa48 <xTimerGenericCommand+0x30>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	623b      	str	r3, [r7, #32]
}
 800aa42:	bf00      	nop
 800aa44:	bf00      	nop
 800aa46:	e7fd      	b.n	800aa44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa48:	4b19      	ldr	r3, [pc, #100]	@ (800aab0 <xTimerGenericCommand+0x98>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d02a      	beq.n	800aaa6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	dc18      	bgt.n	800aa94 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa62:	f7ff fead 	bl	800a7c0 <xTaskGetSchedulerState>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d109      	bne.n	800aa80 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa6c:	4b10      	ldr	r3, [pc, #64]	@ (800aab0 <xTimerGenericCommand+0x98>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	f107 0110 	add.w	r1, r7, #16
 800aa74:	2300      	movs	r3, #0
 800aa76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa78:	f7fe fc5a 	bl	8009330 <xQueueGenericSend>
 800aa7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa7e:	e012      	b.n	800aaa6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa80:	4b0b      	ldr	r3, [pc, #44]	@ (800aab0 <xTimerGenericCommand+0x98>)
 800aa82:	6818      	ldr	r0, [r3, #0]
 800aa84:	f107 0110 	add.w	r1, r7, #16
 800aa88:	2300      	movs	r3, #0
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f7fe fc50 	bl	8009330 <xQueueGenericSend>
 800aa90:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa92:	e008      	b.n	800aaa6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa94:	4b06      	ldr	r3, [pc, #24]	@ (800aab0 <xTimerGenericCommand+0x98>)
 800aa96:	6818      	ldr	r0, [r3, #0]
 800aa98:	f107 0110 	add.w	r1, r7, #16
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	f7fe fd48 	bl	8009534 <xQueueGenericSendFromISR>
 800aaa4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3728      	adds	r7, #40	@ 0x28
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20001834 	.word	0x20001834

0800aab4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aabe:	4b23      	ldr	r3, [pc, #140]	@ (800ab4c <prvProcessExpiredTimer+0x98>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	3304      	adds	r3, #4
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fafb 	bl	80090c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d023      	beq.n	800ab28 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	699a      	ldr	r2, [r3, #24]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	18d1      	adds	r1, r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	6978      	ldr	r0, [r7, #20]
 800aaee:	f000 f8d5 	bl	800ac9c <prvInsertTimerInActiveList>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d020      	beq.n	800ab3a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aaf8:	2300      	movs	r3, #0
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	2300      	movs	r3, #0
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	2100      	movs	r1, #0
 800ab02:	6978      	ldr	r0, [r7, #20]
 800ab04:	f7ff ff88 	bl	800aa18 <xTimerGenericCommand>
 800ab08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d114      	bne.n	800ab3a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	60fb      	str	r3, [r7, #12]
}
 800ab22:	bf00      	nop
 800ab24:	bf00      	nop
 800ab26:	e7fd      	b.n	800ab24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab2e:	f023 0301 	bic.w	r3, r3, #1
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	6978      	ldr	r0, [r7, #20]
 800ab40:	4798      	blx	r3
}
 800ab42:	bf00      	nop
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	2000182c 	.word	0x2000182c

0800ab50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f859 	bl	800ac14 <prvGetNextExpireTime>
 800ab62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	4619      	mov	r1, r3
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 f805 	bl	800ab78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab6e:	f000 f8d7 	bl	800ad20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab72:	bf00      	nop
 800ab74:	e7f0      	b.n	800ab58 <prvTimerTask+0x8>
	...

0800ab78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab82:	f7ff fa29 	bl	8009fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab86:	f107 0308 	add.w	r3, r7, #8
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 f866 	bl	800ac5c <prvSampleTimeNow>
 800ab90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d130      	bne.n	800abfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <prvProcessTimerOrBlockTask+0x3c>
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d806      	bhi.n	800abb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aba6:	f7ff fa25 	bl	8009ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abaa:	68f9      	ldr	r1, [r7, #12]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff ff81 	bl	800aab4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abb2:	e024      	b.n	800abfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d008      	beq.n	800abcc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abba:	4b13      	ldr	r3, [pc, #76]	@ (800ac08 <prvProcessTimerOrBlockTask+0x90>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <prvProcessTimerOrBlockTask+0x50>
 800abc4:	2301      	movs	r3, #1
 800abc6:	e000      	b.n	800abca <prvProcessTimerOrBlockTask+0x52>
 800abc8:	2300      	movs	r3, #0
 800abca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abcc:	4b0f      	ldr	r3, [pc, #60]	@ (800ac0c <prvProcessTimerOrBlockTask+0x94>)
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	4619      	mov	r1, r3
 800abda:	f7fe ff65 	bl	8009aa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abde:	f7ff fa09 	bl	8009ff4 <xTaskResumeAll>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800abe8:	4b09      	ldr	r3, [pc, #36]	@ (800ac10 <prvProcessTimerOrBlockTask+0x98>)
 800abea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	f3bf 8f6f 	isb	sy
}
 800abf8:	e001      	b.n	800abfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abfa:	f7ff f9fb 	bl	8009ff4 <xTaskResumeAll>
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20001830 	.word	0x20001830
 800ac0c:	20001834 	.word	0x20001834
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ac58 <prvGetNextExpireTime+0x44>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <prvGetNextExpireTime+0x16>
 800ac26:	2201      	movs	r2, #1
 800ac28:	e000      	b.n	800ac2c <prvGetNextExpireTime+0x18>
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d105      	bne.n	800ac44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac38:	4b07      	ldr	r3, [pc, #28]	@ (800ac58 <prvGetNextExpireTime+0x44>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]
 800ac42:	e001      	b.n	800ac48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac48:	68fb      	ldr	r3, [r7, #12]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	2000182c 	.word	0x2000182c

0800ac5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac64:	f7ff fa64 	bl	800a130 <xTaskGetTickCount>
 800ac68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac98 <prvSampleTimeNow+0x3c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d205      	bcs.n	800ac80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac74:	f000 f93a 	bl	800aeec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	e002      	b.n	800ac86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac86:	4a04      	ldr	r2, [pc, #16]	@ (800ac98 <prvSampleTimeNow+0x3c>)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	2000183c 	.word	0x2000183c

0800ac9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d812      	bhi.n	800ace8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	1ad2      	subs	r2, r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	429a      	cmp	r2, r3
 800acce:	d302      	bcc.n	800acd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acd0:	2301      	movs	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	e01b      	b.n	800ad0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acd6:	4b10      	ldr	r3, [pc, #64]	@ (800ad18 <prvInsertTimerInActiveList+0x7c>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3304      	adds	r3, #4
 800acde:	4619      	mov	r1, r3
 800ace0:	4610      	mov	r0, r2
 800ace2:	f7fe f9b8 	bl	8009056 <vListInsert>
 800ace6:	e012      	b.n	800ad0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	429a      	cmp	r2, r3
 800acee:	d206      	bcs.n	800acfe <prvInsertTimerInActiveList+0x62>
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d302      	bcc.n	800acfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800acf8:	2301      	movs	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	e007      	b.n	800ad0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acfe:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <prvInsertTimerInActiveList+0x80>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4619      	mov	r1, r3
 800ad08:	4610      	mov	r0, r2
 800ad0a:	f7fe f9a4 	bl	8009056 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad0e:	697b      	ldr	r3, [r7, #20]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3718      	adds	r7, #24
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20001830 	.word	0x20001830
 800ad1c:	2000182c 	.word	0x2000182c

0800ad20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08e      	sub	sp, #56	@ 0x38
 800ad24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad26:	e0ce      	b.n	800aec6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	da19      	bge.n	800ad62 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad2e:	1d3b      	adds	r3, r7, #4
 800ad30:	3304      	adds	r3, #4
 800ad32:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10b      	bne.n	800ad52 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	61fb      	str	r3, [r7, #28]
}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	e7fd      	b.n	800ad4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad58:	6850      	ldr	r0, [r2, #4]
 800ad5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad5c:	6892      	ldr	r2, [r2, #8]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f2c0 80ae 	blt.w	800aec6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d004      	beq.n	800ad80 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	3304      	adds	r3, #4
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe f9a4 	bl	80090c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad80:	463b      	mov	r3, r7
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff ff6a 	bl	800ac5c <prvSampleTimeNow>
 800ad88:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b09      	cmp	r3, #9
 800ad8e:	f200 8097 	bhi.w	800aec0 <prvProcessReceivedCommands+0x1a0>
 800ad92:	a201      	add	r2, pc, #4	@ (adr r2, 800ad98 <prvProcessReceivedCommands+0x78>)
 800ad94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad98:	0800adc1 	.word	0x0800adc1
 800ad9c:	0800adc1 	.word	0x0800adc1
 800ada0:	0800adc1 	.word	0x0800adc1
 800ada4:	0800ae37 	.word	0x0800ae37
 800ada8:	0800ae4b 	.word	0x0800ae4b
 800adac:	0800ae97 	.word	0x0800ae97
 800adb0:	0800adc1 	.word	0x0800adc1
 800adb4:	0800adc1 	.word	0x0800adc1
 800adb8:	0800ae37 	.word	0x0800ae37
 800adbc:	0800ae4b 	.word	0x0800ae4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adc6:	f043 0301 	orr.w	r3, r3, #1
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	18d1      	adds	r1, r2, r3
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ade0:	f7ff ff5c 	bl	800ac9c <prvInsertTimerInActiveList>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d06c      	beq.n	800aec4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d061      	beq.n	800aec4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	441a      	add	r2, r3
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2100      	movs	r1, #0
 800ae10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae12:	f7ff fe01 	bl	800aa18 <xTimerGenericCommand>
 800ae16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d152      	bne.n	800aec4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	61bb      	str	r3, [r7, #24]
}
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	e7fd      	b.n	800ae32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae48:	e03d      	b.n	800aec6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae50:	f043 0301 	orr.w	r3, r3, #1
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae5c:	68ba      	ldr	r2, [r7, #8]
 800ae5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10b      	bne.n	800ae82 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	617b      	str	r3, [r7, #20]
}
 800ae7c:	bf00      	nop
 800ae7e:	bf00      	nop
 800ae80:	e7fd      	b.n	800ae7e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae84:	699a      	ldr	r2, [r3, #24]
 800ae86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae88:	18d1      	adds	r1, r2, r3
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae90:	f7ff ff04 	bl	800ac9c <prvInsertTimerInActiveList>
					break;
 800ae94:	e017      	b.n	800aec6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae9c:	f003 0302 	and.w	r3, r3, #2
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d103      	bne.n	800aeac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800aea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aea6:	f000 fbe7 	bl	800b678 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aeaa:	e00c      	b.n	800aec6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeb2:	f023 0301 	bic.w	r3, r3, #1
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aebe:	e002      	b.n	800aec6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800aec0:	bf00      	nop
 800aec2:	e000      	b.n	800aec6 <prvProcessReceivedCommands+0x1a6>
					break;
 800aec4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aec6:	4b08      	ldr	r3, [pc, #32]	@ (800aee8 <prvProcessReceivedCommands+0x1c8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	1d39      	adds	r1, r7, #4
 800aecc:	2200      	movs	r2, #0
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fbce 	bl	8009670 <xQueueReceive>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f47f af26 	bne.w	800ad28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aedc:	bf00      	nop
 800aede:	bf00      	nop
 800aee0:	3730      	adds	r7, #48	@ 0x30
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	20001834 	.word	0x20001834

0800aeec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aef2:	e049      	b.n	800af88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aef4:	4b2e      	ldr	r3, [pc, #184]	@ (800afb0 <prvSwitchTimerLists+0xc4>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aefe:	4b2c      	ldr	r3, [pc, #176]	@ (800afb0 <prvSwitchTimerLists+0xc4>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe f8db 	bl	80090c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b00      	cmp	r3, #0
 800af26:	d02f      	beq.n	800af88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	4413      	add	r3, r2
 800af30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	429a      	cmp	r2, r3
 800af38:	d90e      	bls.n	800af58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af46:	4b1a      	ldr	r3, [pc, #104]	@ (800afb0 <prvSwitchTimerLists+0xc4>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3304      	adds	r3, #4
 800af4e:	4619      	mov	r1, r3
 800af50:	4610      	mov	r0, r2
 800af52:	f7fe f880 	bl	8009056 <vListInsert>
 800af56:	e017      	b.n	800af88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af58:	2300      	movs	r3, #0
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2300      	movs	r3, #0
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	2100      	movs	r1, #0
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f7ff fd58 	bl	800aa18 <xTimerGenericCommand>
 800af68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10b      	bne.n	800af88 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	603b      	str	r3, [r7, #0]
}
 800af82:	bf00      	nop
 800af84:	bf00      	nop
 800af86:	e7fd      	b.n	800af84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af88:	4b09      	ldr	r3, [pc, #36]	@ (800afb0 <prvSwitchTimerLists+0xc4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1b0      	bne.n	800aef4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af92:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <prvSwitchTimerLists+0xc4>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af98:	4b06      	ldr	r3, [pc, #24]	@ (800afb4 <prvSwitchTimerLists+0xc8>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a04      	ldr	r2, [pc, #16]	@ (800afb0 <prvSwitchTimerLists+0xc4>)
 800af9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800afa0:	4a04      	ldr	r2, [pc, #16]	@ (800afb4 <prvSwitchTimerLists+0xc8>)
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	6013      	str	r3, [r2, #0]
}
 800afa6:	bf00      	nop
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	2000182c 	.word	0x2000182c
 800afb4:	20001830 	.word	0x20001830

0800afb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afbe:	f000 f96b 	bl	800b298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afc2:	4b15      	ldr	r3, [pc, #84]	@ (800b018 <prvCheckForValidListAndQueue+0x60>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d120      	bne.n	800b00c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afca:	4814      	ldr	r0, [pc, #80]	@ (800b01c <prvCheckForValidListAndQueue+0x64>)
 800afcc:	f7fd fff2 	bl	8008fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afd0:	4813      	ldr	r0, [pc, #76]	@ (800b020 <prvCheckForValidListAndQueue+0x68>)
 800afd2:	f7fd ffef 	bl	8008fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800afd6:	4b13      	ldr	r3, [pc, #76]	@ (800b024 <prvCheckForValidListAndQueue+0x6c>)
 800afd8:	4a10      	ldr	r2, [pc, #64]	@ (800b01c <prvCheckForValidListAndQueue+0x64>)
 800afda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800afdc:	4b12      	ldr	r3, [pc, #72]	@ (800b028 <prvCheckForValidListAndQueue+0x70>)
 800afde:	4a10      	ldr	r2, [pc, #64]	@ (800b020 <prvCheckForValidListAndQueue+0x68>)
 800afe0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afe2:	2300      	movs	r3, #0
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	4b11      	ldr	r3, [pc, #68]	@ (800b02c <prvCheckForValidListAndQueue+0x74>)
 800afe8:	4a11      	ldr	r2, [pc, #68]	@ (800b030 <prvCheckForValidListAndQueue+0x78>)
 800afea:	2110      	movs	r1, #16
 800afec:	200a      	movs	r0, #10
 800afee:	f7fe f8ff 	bl	80091f0 <xQueueGenericCreateStatic>
 800aff2:	4603      	mov	r3, r0
 800aff4:	4a08      	ldr	r2, [pc, #32]	@ (800b018 <prvCheckForValidListAndQueue+0x60>)
 800aff6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aff8:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <prvCheckForValidListAndQueue+0x60>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d005      	beq.n	800b00c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b000:	4b05      	ldr	r3, [pc, #20]	@ (800b018 <prvCheckForValidListAndQueue+0x60>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	490b      	ldr	r1, [pc, #44]	@ (800b034 <prvCheckForValidListAndQueue+0x7c>)
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fd24 	bl	8009a54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b00c:	f000 f976 	bl	800b2fc <vPortExitCritical>
}
 800b010:	bf00      	nop
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20001834 	.word	0x20001834
 800b01c:	20001804 	.word	0x20001804
 800b020:	20001818 	.word	0x20001818
 800b024:	2000182c 	.word	0x2000182c
 800b028:	20001830 	.word	0x20001830
 800b02c:	200018e0 	.word	0x200018e0
 800b030:	20001840 	.word	0x20001840
 800b034:	0800f77c 	.word	0x0800f77c

0800b038 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3b04      	subs	r3, #4
 800b048:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3b04      	subs	r3, #4
 800b056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f023 0201 	bic.w	r2, r3, #1
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3b04      	subs	r3, #4
 800b066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b068:	4a0c      	ldr	r2, [pc, #48]	@ (800b09c <pxPortInitialiseStack+0x64>)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3b14      	subs	r3, #20
 800b072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3b04      	subs	r3, #4
 800b07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f06f 0202 	mvn.w	r2, #2
 800b086:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3b20      	subs	r3, #32
 800b08c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b08e:	68fb      	ldr	r3, [r7, #12]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	0800b0a1 	.word	0x0800b0a1

0800b0a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0aa:	4b13      	ldr	r3, [pc, #76]	@ (800b0f8 <prvTaskExitError+0x58>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b2:	d00b      	beq.n	800b0cc <prvTaskExitError+0x2c>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60fb      	str	r3, [r7, #12]
}
 800b0c6:	bf00      	nop
 800b0c8:	bf00      	nop
 800b0ca:	e7fd      	b.n	800b0c8 <prvTaskExitError+0x28>
	__asm volatile
 800b0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	60bb      	str	r3, [r7, #8]
}
 800b0de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0e0:	bf00      	nop
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d0fc      	beq.n	800b0e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0e8:	bf00      	nop
 800b0ea:	bf00      	nop
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	2000002c 	.word	0x2000002c
 800b0fc:	00000000 	.word	0x00000000

0800b100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b100:	4b07      	ldr	r3, [pc, #28]	@ (800b120 <pxCurrentTCBConst2>)
 800b102:	6819      	ldr	r1, [r3, #0]
 800b104:	6808      	ldr	r0, [r1, #0]
 800b106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10a:	f380 8809 	msr	PSP, r0
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f04f 0000 	mov.w	r0, #0
 800b116:	f380 8811 	msr	BASEPRI, r0
 800b11a:	4770      	bx	lr
 800b11c:	f3af 8000 	nop.w

0800b120 <pxCurrentTCBConst2>:
 800b120:	20001304 	.word	0x20001304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b124:	bf00      	nop
 800b126:	bf00      	nop

0800b128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b128:	4808      	ldr	r0, [pc, #32]	@ (800b14c <prvPortStartFirstTask+0x24>)
 800b12a:	6800      	ldr	r0, [r0, #0]
 800b12c:	6800      	ldr	r0, [r0, #0]
 800b12e:	f380 8808 	msr	MSP, r0
 800b132:	f04f 0000 	mov.w	r0, #0
 800b136:	f380 8814 	msr	CONTROL, r0
 800b13a:	b662      	cpsie	i
 800b13c:	b661      	cpsie	f
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	df00      	svc	0
 800b148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b14a:	bf00      	nop
 800b14c:	e000ed08 	.word	0xe000ed08

0800b150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b156:	4b47      	ldr	r3, [pc, #284]	@ (800b274 <xPortStartScheduler+0x124>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a47      	ldr	r2, [pc, #284]	@ (800b278 <xPortStartScheduler+0x128>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d10b      	bne.n	800b178 <xPortStartScheduler+0x28>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	613b      	str	r3, [r7, #16]
}
 800b172:	bf00      	nop
 800b174:	bf00      	nop
 800b176:	e7fd      	b.n	800b174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b178:	4b3e      	ldr	r3, [pc, #248]	@ (800b274 <xPortStartScheduler+0x124>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a3f      	ldr	r2, [pc, #252]	@ (800b27c <xPortStartScheduler+0x12c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d10b      	bne.n	800b19a <xPortStartScheduler+0x4a>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	60fb      	str	r3, [r7, #12]
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop
 800b198:	e7fd      	b.n	800b196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b19a:	4b39      	ldr	r3, [pc, #228]	@ (800b280 <xPortStartScheduler+0x130>)
 800b19c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	22ff      	movs	r2, #255	@ 0xff
 800b1aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	4b31      	ldr	r3, [pc, #196]	@ (800b284 <xPortStartScheduler+0x134>)
 800b1c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1c2:	4b31      	ldr	r3, [pc, #196]	@ (800b288 <xPortStartScheduler+0x138>)
 800b1c4:	2207      	movs	r2, #7
 800b1c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1c8:	e009      	b.n	800b1de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b288 <xPortStartScheduler+0x138>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	4a2d      	ldr	r2, [pc, #180]	@ (800b288 <xPortStartScheduler+0x138>)
 800b1d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e6:	2b80      	cmp	r3, #128	@ 0x80
 800b1e8:	d0ef      	beq.n	800b1ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1ea:	4b27      	ldr	r3, [pc, #156]	@ (800b288 <xPortStartScheduler+0x138>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f1c3 0307 	rsb	r3, r3, #7
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d00b      	beq.n	800b20e <xPortStartScheduler+0xbe>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60bb      	str	r3, [r7, #8]
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	e7fd      	b.n	800b20a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b20e:	4b1e      	ldr	r3, [pc, #120]	@ (800b288 <xPortStartScheduler+0x138>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	021b      	lsls	r3, r3, #8
 800b214:	4a1c      	ldr	r2, [pc, #112]	@ (800b288 <xPortStartScheduler+0x138>)
 800b216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b218:	4b1b      	ldr	r3, [pc, #108]	@ (800b288 <xPortStartScheduler+0x138>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b220:	4a19      	ldr	r2, [pc, #100]	@ (800b288 <xPortStartScheduler+0x138>)
 800b222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	b2da      	uxtb	r2, r3
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b22c:	4b17      	ldr	r3, [pc, #92]	@ (800b28c <xPortStartScheduler+0x13c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a16      	ldr	r2, [pc, #88]	@ (800b28c <xPortStartScheduler+0x13c>)
 800b232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b238:	4b14      	ldr	r3, [pc, #80]	@ (800b28c <xPortStartScheduler+0x13c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a13      	ldr	r2, [pc, #76]	@ (800b28c <xPortStartScheduler+0x13c>)
 800b23e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b244:	f000 f8da 	bl	800b3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b248:	4b11      	ldr	r3, [pc, #68]	@ (800b290 <xPortStartScheduler+0x140>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b24e:	f000 f8f9 	bl	800b444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b252:	4b10      	ldr	r3, [pc, #64]	@ (800b294 <xPortStartScheduler+0x144>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a0f      	ldr	r2, [pc, #60]	@ (800b294 <xPortStartScheduler+0x144>)
 800b258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b25c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b25e:	f7ff ff63 	bl	800b128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b262:	f7ff f82f 	bl	800a2c4 <vTaskSwitchContext>
	prvTaskExitError();
 800b266:	f7ff ff1b 	bl	800b0a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	e000ed00 	.word	0xe000ed00
 800b278:	410fc271 	.word	0x410fc271
 800b27c:	410fc270 	.word	0x410fc270
 800b280:	e000e400 	.word	0xe000e400
 800b284:	20001930 	.word	0x20001930
 800b288:	20001934 	.word	0x20001934
 800b28c:	e000ed20 	.word	0xe000ed20
 800b290:	2000002c 	.word	0x2000002c
 800b294:	e000ef34 	.word	0xe000ef34

0800b298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	607b      	str	r3, [r7, #4]
}
 800b2b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2b2:	4b10      	ldr	r3, [pc, #64]	@ (800b2f4 <vPortEnterCritical+0x5c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	4a0e      	ldr	r2, [pc, #56]	@ (800b2f4 <vPortEnterCritical+0x5c>)
 800b2ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f4 <vPortEnterCritical+0x5c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d110      	bne.n	800b2e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b2f8 <vPortEnterCritical+0x60>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00b      	beq.n	800b2e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	603b      	str	r3, [r7, #0]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <vPortEnterCritical+0x4a>
	}
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	2000002c 	.word	0x2000002c
 800b2f8:	e000ed04 	.word	0xe000ed04

0800b2fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b302:	4b12      	ldr	r3, [pc, #72]	@ (800b34c <vPortExitCritical+0x50>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10b      	bne.n	800b322 <vPortExitCritical+0x26>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	607b      	str	r3, [r7, #4]
}
 800b31c:	bf00      	nop
 800b31e:	bf00      	nop
 800b320:	e7fd      	b.n	800b31e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b322:	4b0a      	ldr	r3, [pc, #40]	@ (800b34c <vPortExitCritical+0x50>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3b01      	subs	r3, #1
 800b328:	4a08      	ldr	r2, [pc, #32]	@ (800b34c <vPortExitCritical+0x50>)
 800b32a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b32c:	4b07      	ldr	r3, [pc, #28]	@ (800b34c <vPortExitCritical+0x50>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d105      	bne.n	800b340 <vPortExitCritical+0x44>
 800b334:	2300      	movs	r3, #0
 800b336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	f383 8811 	msr	BASEPRI, r3
}
 800b33e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	2000002c 	.word	0x2000002c

0800b350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b350:	f3ef 8009 	mrs	r0, PSP
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	4b15      	ldr	r3, [pc, #84]	@ (800b3b0 <pxCurrentTCBConst>)
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	f01e 0f10 	tst.w	lr, #16
 800b360:	bf08      	it	eq
 800b362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36a:	6010      	str	r0, [r2, #0]
 800b36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b374:	f380 8811 	msr	BASEPRI, r0
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f7fe ffa0 	bl	800a2c4 <vTaskSwitchContext>
 800b384:	f04f 0000 	mov.w	r0, #0
 800b388:	f380 8811 	msr	BASEPRI, r0
 800b38c:	bc09      	pop	{r0, r3}
 800b38e:	6819      	ldr	r1, [r3, #0]
 800b390:	6808      	ldr	r0, [r1, #0]
 800b392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b396:	f01e 0f10 	tst.w	lr, #16
 800b39a:	bf08      	it	eq
 800b39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3a0:	f380 8809 	msr	PSP, r0
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	f3af 8000 	nop.w

0800b3b0 <pxCurrentTCBConst>:
 800b3b0:	20001304 	.word	0x20001304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop

0800b3b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	607b      	str	r3, [r7, #4]
}
 800b3d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3d2:	f7fe febd 	bl	800a150 <xTaskIncrementTick>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3dc:	4b06      	ldr	r3, [pc, #24]	@ (800b3f8 <xPortSysTickHandler+0x40>)
 800b3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	f383 8811 	msr	BASEPRI, r3
}
 800b3ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b400:	4b0b      	ldr	r3, [pc, #44]	@ (800b430 <vPortSetupTimerInterrupt+0x34>)
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b406:	4b0b      	ldr	r3, [pc, #44]	@ (800b434 <vPortSetupTimerInterrupt+0x38>)
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b40c:	4b0a      	ldr	r3, [pc, #40]	@ (800b438 <vPortSetupTimerInterrupt+0x3c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a0a      	ldr	r2, [pc, #40]	@ (800b43c <vPortSetupTimerInterrupt+0x40>)
 800b412:	fba2 2303 	umull	r2, r3, r2, r3
 800b416:	099b      	lsrs	r3, r3, #6
 800b418:	4a09      	ldr	r2, [pc, #36]	@ (800b440 <vPortSetupTimerInterrupt+0x44>)
 800b41a:	3b01      	subs	r3, #1
 800b41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b41e:	4b04      	ldr	r3, [pc, #16]	@ (800b430 <vPortSetupTimerInterrupt+0x34>)
 800b420:	2207      	movs	r2, #7
 800b422:	601a      	str	r2, [r3, #0]
}
 800b424:	bf00      	nop
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	e000e010 	.word	0xe000e010
 800b434:	e000e018 	.word	0xe000e018
 800b438:	20000020 	.word	0x20000020
 800b43c:	10624dd3 	.word	0x10624dd3
 800b440:	e000e014 	.word	0xe000e014

0800b444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b454 <vPortEnableVFP+0x10>
 800b448:	6801      	ldr	r1, [r0, #0]
 800b44a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b44e:	6001      	str	r1, [r0, #0]
 800b450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b452:	bf00      	nop
 800b454:	e000ed88 	.word	0xe000ed88

0800b458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b45e:	f3ef 8305 	mrs	r3, IPSR
 800b462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b0f      	cmp	r3, #15
 800b468:	d915      	bls.n	800b496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b46a:	4a18      	ldr	r2, [pc, #96]	@ (800b4cc <vPortValidateInterruptPriority+0x74>)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b474:	4b16      	ldr	r3, [pc, #88]	@ (800b4d0 <vPortValidateInterruptPriority+0x78>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	7afa      	ldrb	r2, [r7, #11]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d20b      	bcs.n	800b496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	607b      	str	r3, [r7, #4]
}
 800b490:	bf00      	nop
 800b492:	bf00      	nop
 800b494:	e7fd      	b.n	800b492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b496:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d4 <vPortValidateInterruptPriority+0x7c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b49e:	4b0e      	ldr	r3, [pc, #56]	@ (800b4d8 <vPortValidateInterruptPriority+0x80>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d90b      	bls.n	800b4be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	603b      	str	r3, [r7, #0]
}
 800b4b8:	bf00      	nop
 800b4ba:	bf00      	nop
 800b4bc:	e7fd      	b.n	800b4ba <vPortValidateInterruptPriority+0x62>
	}
 800b4be:	bf00      	nop
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	e000e3f0 	.word	0xe000e3f0
 800b4d0:	20001930 	.word	0x20001930
 800b4d4:	e000ed0c 	.word	0xe000ed0c
 800b4d8:	20001934 	.word	0x20001934

0800b4dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08a      	sub	sp, #40	@ 0x28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4e8:	f7fe fd76 	bl	8009fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4ec:	4b5c      	ldr	r3, [pc, #368]	@ (800b660 <pvPortMalloc+0x184>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4f4:	f000 f924 	bl	800b740 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b664 <pvPortMalloc+0x188>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4013      	ands	r3, r2
 800b500:	2b00      	cmp	r3, #0
 800b502:	f040 8095 	bne.w	800b630 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d01e      	beq.n	800b54a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b50c:	2208      	movs	r2, #8
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4413      	add	r3, r2
 800b512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d015      	beq.n	800b54a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f023 0307 	bic.w	r3, r3, #7
 800b524:	3308      	adds	r3, #8
 800b526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f003 0307 	and.w	r3, r3, #7
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00b      	beq.n	800b54a <pvPortMalloc+0x6e>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	617b      	str	r3, [r7, #20]
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
 800b548:	e7fd      	b.n	800b546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d06f      	beq.n	800b630 <pvPortMalloc+0x154>
 800b550:	4b45      	ldr	r3, [pc, #276]	@ (800b668 <pvPortMalloc+0x18c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	429a      	cmp	r2, r3
 800b558:	d86a      	bhi.n	800b630 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b55a:	4b44      	ldr	r3, [pc, #272]	@ (800b66c <pvPortMalloc+0x190>)
 800b55c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b55e:	4b43      	ldr	r3, [pc, #268]	@ (800b66c <pvPortMalloc+0x190>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b564:	e004      	b.n	800b570 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	429a      	cmp	r2, r3
 800b578:	d903      	bls.n	800b582 <pvPortMalloc+0xa6>
 800b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1f1      	bne.n	800b566 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b582:	4b37      	ldr	r3, [pc, #220]	@ (800b660 <pvPortMalloc+0x184>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b588:	429a      	cmp	r2, r3
 800b58a:	d051      	beq.n	800b630 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2208      	movs	r2, #8
 800b592:	4413      	add	r3, r2
 800b594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	1ad2      	subs	r2, r2, r3
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d920      	bls.n	800b5f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	f003 0307 	and.w	r3, r3, #7
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00b      	beq.n	800b5d8 <pvPortMalloc+0xfc>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	613b      	str	r3, [r7, #16]
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	e7fd      	b.n	800b5d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5ea:	69b8      	ldr	r0, [r7, #24]
 800b5ec:	f000 f90a 	bl	800b804 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b668 <pvPortMalloc+0x18c>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	4a1b      	ldr	r2, [pc, #108]	@ (800b668 <pvPortMalloc+0x18c>)
 800b5fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b668 <pvPortMalloc+0x18c>)
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	4b1b      	ldr	r3, [pc, #108]	@ (800b670 <pvPortMalloc+0x194>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d203      	bcs.n	800b612 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b60a:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <pvPortMalloc+0x18c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a18      	ldr	r2, [pc, #96]	@ (800b670 <pvPortMalloc+0x194>)
 800b610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	685a      	ldr	r2, [r3, #4]
 800b616:	4b13      	ldr	r3, [pc, #76]	@ (800b664 <pvPortMalloc+0x188>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	431a      	orrs	r2, r3
 800b61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b626:	4b13      	ldr	r3, [pc, #76]	@ (800b674 <pvPortMalloc+0x198>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3301      	adds	r3, #1
 800b62c:	4a11      	ldr	r2, [pc, #68]	@ (800b674 <pvPortMalloc+0x198>)
 800b62e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b630:	f7fe fce0 	bl	8009ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00b      	beq.n	800b656 <pvPortMalloc+0x17a>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	60fb      	str	r3, [r7, #12]
}
 800b650:	bf00      	nop
 800b652:	bf00      	nop
 800b654:	e7fd      	b.n	800b652 <pvPortMalloc+0x176>
	return pvReturn;
 800b656:	69fb      	ldr	r3, [r7, #28]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3728      	adds	r7, #40	@ 0x28
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20005540 	.word	0x20005540
 800b664:	20005554 	.word	0x20005554
 800b668:	20005544 	.word	0x20005544
 800b66c:	20005538 	.word	0x20005538
 800b670:	20005548 	.word	0x20005548
 800b674:	2000554c 	.word	0x2000554c

0800b678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d04f      	beq.n	800b72a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b68a:	2308      	movs	r3, #8
 800b68c:	425b      	negs	r3, r3
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	4413      	add	r3, r2
 800b692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	4b25      	ldr	r3, [pc, #148]	@ (800b734 <vPortFree+0xbc>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10b      	bne.n	800b6be <vPortFree+0x46>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	60fb      	str	r3, [r7, #12]
}
 800b6b8:	bf00      	nop
 800b6ba:	bf00      	nop
 800b6bc:	e7fd      	b.n	800b6ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00b      	beq.n	800b6de <vPortFree+0x66>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	60bb      	str	r3, [r7, #8]
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	e7fd      	b.n	800b6da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	4b14      	ldr	r3, [pc, #80]	@ (800b734 <vPortFree+0xbc>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d01e      	beq.n	800b72a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d11a      	bne.n	800b72a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b734 <vPortFree+0xbc>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	43db      	mvns	r3, r3
 800b6fe:	401a      	ands	r2, r3
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b704:	f7fe fc68 	bl	8009fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <vPortFree+0xc0>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4413      	add	r3, r2
 800b712:	4a09      	ldr	r2, [pc, #36]	@ (800b738 <vPortFree+0xc0>)
 800b714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	f000 f874 	bl	800b804 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b71c:	4b07      	ldr	r3, [pc, #28]	@ (800b73c <vPortFree+0xc4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3301      	adds	r3, #1
 800b722:	4a06      	ldr	r2, [pc, #24]	@ (800b73c <vPortFree+0xc4>)
 800b724:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b726:	f7fe fc65 	bl	8009ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b72a:	bf00      	nop
 800b72c:	3718      	adds	r7, #24
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	20005554 	.word	0x20005554
 800b738:	20005544 	.word	0x20005544
 800b73c:	20005550 	.word	0x20005550

0800b740 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b746:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b74a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b74c:	4b27      	ldr	r3, [pc, #156]	@ (800b7ec <prvHeapInit+0xac>)
 800b74e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00c      	beq.n	800b774 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3307      	adds	r3, #7
 800b75e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 0307 	bic.w	r3, r3, #7
 800b766:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7ec <prvHeapInit+0xac>)
 800b770:	4413      	add	r3, r2
 800b772:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b778:	4a1d      	ldr	r2, [pc, #116]	@ (800b7f0 <prvHeapInit+0xb0>)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b77e:	4b1c      	ldr	r3, [pc, #112]	@ (800b7f0 <prvHeapInit+0xb0>)
 800b780:	2200      	movs	r2, #0
 800b782:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	4413      	add	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b78c:	2208      	movs	r2, #8
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	1a9b      	subs	r3, r3, r2
 800b792:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f023 0307 	bic.w	r3, r3, #7
 800b79a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	4a15      	ldr	r2, [pc, #84]	@ (800b7f4 <prvHeapInit+0xb4>)
 800b7a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b7a2:	4b14      	ldr	r3, [pc, #80]	@ (800b7f4 <prvHeapInit+0xb4>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b7aa:	4b12      	ldr	r3, [pc, #72]	@ (800b7f4 <prvHeapInit+0xb4>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	1ad2      	subs	r2, r2, r3
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f4 <prvHeapInit+0xb4>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	4a0a      	ldr	r2, [pc, #40]	@ (800b7f8 <prvHeapInit+0xb8>)
 800b7ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	4a09      	ldr	r2, [pc, #36]	@ (800b7fc <prvHeapInit+0xbc>)
 800b7d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7d8:	4b09      	ldr	r3, [pc, #36]	@ (800b800 <prvHeapInit+0xc0>)
 800b7da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b7de:	601a      	str	r2, [r3, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	20001938 	.word	0x20001938
 800b7f0:	20005538 	.word	0x20005538
 800b7f4:	20005540 	.word	0x20005540
 800b7f8:	20005548 	.word	0x20005548
 800b7fc:	20005544 	.word	0x20005544
 800b800:	20005554 	.word	0x20005554

0800b804 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b80c:	4b28      	ldr	r3, [pc, #160]	@ (800b8b0 <prvInsertBlockIntoFreeList+0xac>)
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e002      	b.n	800b818 <prvInsertBlockIntoFreeList+0x14>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d8f7      	bhi.n	800b812 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	4413      	add	r3, r2
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	429a      	cmp	r2, r3
 800b832:	d108      	bne.n	800b846 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	441a      	add	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	441a      	add	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d118      	bne.n	800b88c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	4b15      	ldr	r3, [pc, #84]	@ (800b8b4 <prvInsertBlockIntoFreeList+0xb0>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	429a      	cmp	r2, r3
 800b864:	d00d      	beq.n	800b882 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685a      	ldr	r2, [r3, #4]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	441a      	add	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	601a      	str	r2, [r3, #0]
 800b880:	e008      	b.n	800b894 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b882:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b4 <prvInsertBlockIntoFreeList+0xb0>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	e003      	b.n	800b894 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d002      	beq.n	800b8a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8a2:	bf00      	nop
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	20005538 	.word	0x20005538
 800b8b4:	20005540 	.word	0x20005540

0800b8b8 <__cvt>:
 800b8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8bc:	ec57 6b10 	vmov	r6, r7, d0
 800b8c0:	2f00      	cmp	r7, #0
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	463b      	mov	r3, r7
 800b8c8:	bfbb      	ittet	lt
 800b8ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8ce:	461f      	movlt	r7, r3
 800b8d0:	2300      	movge	r3, #0
 800b8d2:	232d      	movlt	r3, #45	@ 0x2d
 800b8d4:	700b      	strb	r3, [r1, #0]
 800b8d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8dc:	4691      	mov	r9, r2
 800b8de:	f023 0820 	bic.w	r8, r3, #32
 800b8e2:	bfbc      	itt	lt
 800b8e4:	4632      	movlt	r2, r6
 800b8e6:	4616      	movlt	r6, r2
 800b8e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8ec:	d005      	beq.n	800b8fa <__cvt+0x42>
 800b8ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b8f2:	d100      	bne.n	800b8f6 <__cvt+0x3e>
 800b8f4:	3401      	adds	r4, #1
 800b8f6:	2102      	movs	r1, #2
 800b8f8:	e000      	b.n	800b8fc <__cvt+0x44>
 800b8fa:	2103      	movs	r1, #3
 800b8fc:	ab03      	add	r3, sp, #12
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	ab02      	add	r3, sp, #8
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	ec47 6b10 	vmov	d0, r6, r7
 800b908:	4653      	mov	r3, sl
 800b90a:	4622      	mov	r2, r4
 800b90c:	f000 fec0 	bl	800c690 <_dtoa_r>
 800b910:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b914:	4605      	mov	r5, r0
 800b916:	d119      	bne.n	800b94c <__cvt+0x94>
 800b918:	f019 0f01 	tst.w	r9, #1
 800b91c:	d00e      	beq.n	800b93c <__cvt+0x84>
 800b91e:	eb00 0904 	add.w	r9, r0, r4
 800b922:	2200      	movs	r2, #0
 800b924:	2300      	movs	r3, #0
 800b926:	4630      	mov	r0, r6
 800b928:	4639      	mov	r1, r7
 800b92a:	f7f5 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b92e:	b108      	cbz	r0, 800b934 <__cvt+0x7c>
 800b930:	f8cd 900c 	str.w	r9, [sp, #12]
 800b934:	2230      	movs	r2, #48	@ 0x30
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	454b      	cmp	r3, r9
 800b93a:	d31e      	bcc.n	800b97a <__cvt+0xc2>
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b940:	1b5b      	subs	r3, r3, r5
 800b942:	4628      	mov	r0, r5
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	b004      	add	sp, #16
 800b948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b950:	eb00 0904 	add.w	r9, r0, r4
 800b954:	d1e5      	bne.n	800b922 <__cvt+0x6a>
 800b956:	7803      	ldrb	r3, [r0, #0]
 800b958:	2b30      	cmp	r3, #48	@ 0x30
 800b95a:	d10a      	bne.n	800b972 <__cvt+0xba>
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f5 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b968:	b918      	cbnz	r0, 800b972 <__cvt+0xba>
 800b96a:	f1c4 0401 	rsb	r4, r4, #1
 800b96e:	f8ca 4000 	str.w	r4, [sl]
 800b972:	f8da 3000 	ldr.w	r3, [sl]
 800b976:	4499      	add	r9, r3
 800b978:	e7d3      	b.n	800b922 <__cvt+0x6a>
 800b97a:	1c59      	adds	r1, r3, #1
 800b97c:	9103      	str	r1, [sp, #12]
 800b97e:	701a      	strb	r2, [r3, #0]
 800b980:	e7d9      	b.n	800b936 <__cvt+0x7e>

0800b982 <__exponent>:
 800b982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b984:	2900      	cmp	r1, #0
 800b986:	bfba      	itte	lt
 800b988:	4249      	neglt	r1, r1
 800b98a:	232d      	movlt	r3, #45	@ 0x2d
 800b98c:	232b      	movge	r3, #43	@ 0x2b
 800b98e:	2909      	cmp	r1, #9
 800b990:	7002      	strb	r2, [r0, #0]
 800b992:	7043      	strb	r3, [r0, #1]
 800b994:	dd29      	ble.n	800b9ea <__exponent+0x68>
 800b996:	f10d 0307 	add.w	r3, sp, #7
 800b99a:	461d      	mov	r5, r3
 800b99c:	270a      	movs	r7, #10
 800b99e:	461a      	mov	r2, r3
 800b9a0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b9a4:	fb07 1416 	mls	r4, r7, r6, r1
 800b9a8:	3430      	adds	r4, #48	@ 0x30
 800b9aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	2c63      	cmp	r4, #99	@ 0x63
 800b9b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	dcf1      	bgt.n	800b99e <__exponent+0x1c>
 800b9ba:	3130      	adds	r1, #48	@ 0x30
 800b9bc:	1e94      	subs	r4, r2, #2
 800b9be:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9c2:	1c41      	adds	r1, r0, #1
 800b9c4:	4623      	mov	r3, r4
 800b9c6:	42ab      	cmp	r3, r5
 800b9c8:	d30a      	bcc.n	800b9e0 <__exponent+0x5e>
 800b9ca:	f10d 0309 	add.w	r3, sp, #9
 800b9ce:	1a9b      	subs	r3, r3, r2
 800b9d0:	42ac      	cmp	r4, r5
 800b9d2:	bf88      	it	hi
 800b9d4:	2300      	movhi	r3, #0
 800b9d6:	3302      	adds	r3, #2
 800b9d8:	4403      	add	r3, r0
 800b9da:	1a18      	subs	r0, r3, r0
 800b9dc:	b003      	add	sp, #12
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9e8:	e7ed      	b.n	800b9c6 <__exponent+0x44>
 800b9ea:	2330      	movs	r3, #48	@ 0x30
 800b9ec:	3130      	adds	r1, #48	@ 0x30
 800b9ee:	7083      	strb	r3, [r0, #2]
 800b9f0:	70c1      	strb	r1, [r0, #3]
 800b9f2:	1d03      	adds	r3, r0, #4
 800b9f4:	e7f1      	b.n	800b9da <__exponent+0x58>
	...

0800b9f8 <_printf_float>:
 800b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9fc:	b08d      	sub	sp, #52	@ 0x34
 800b9fe:	460c      	mov	r4, r1
 800ba00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba04:	4616      	mov	r6, r2
 800ba06:	461f      	mov	r7, r3
 800ba08:	4605      	mov	r5, r0
 800ba0a:	f000 fcdb 	bl	800c3c4 <_localeconv_r>
 800ba0e:	6803      	ldr	r3, [r0, #0]
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7f4 fc2c 	bl	8000270 <strlen>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba20:	9005      	str	r0, [sp, #20]
 800ba22:	3307      	adds	r3, #7
 800ba24:	f023 0307 	bic.w	r3, r3, #7
 800ba28:	f103 0208 	add.w	r2, r3, #8
 800ba2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba30:	f8d4 b000 	ldr.w	fp, [r4]
 800ba34:	f8c8 2000 	str.w	r2, [r8]
 800ba38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba40:	9307      	str	r3, [sp, #28]
 800ba42:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba4e:	4b9c      	ldr	r3, [pc, #624]	@ (800bcc0 <_printf_float+0x2c8>)
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295
 800ba54:	f7f5 f86a 	bl	8000b2c <__aeabi_dcmpun>
 800ba58:	bb70      	cbnz	r0, 800bab8 <_printf_float+0xc0>
 800ba5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba5e:	4b98      	ldr	r3, [pc, #608]	@ (800bcc0 <_printf_float+0x2c8>)
 800ba60:	f04f 32ff 	mov.w	r2, #4294967295
 800ba64:	f7f5 f844 	bl	8000af0 <__aeabi_dcmple>
 800ba68:	bb30      	cbnz	r0, 800bab8 <_printf_float+0xc0>
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4640      	mov	r0, r8
 800ba70:	4649      	mov	r1, r9
 800ba72:	f7f5 f833 	bl	8000adc <__aeabi_dcmplt>
 800ba76:	b110      	cbz	r0, 800ba7e <_printf_float+0x86>
 800ba78:	232d      	movs	r3, #45	@ 0x2d
 800ba7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba7e:	4a91      	ldr	r2, [pc, #580]	@ (800bcc4 <_printf_float+0x2cc>)
 800ba80:	4b91      	ldr	r3, [pc, #580]	@ (800bcc8 <_printf_float+0x2d0>)
 800ba82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba86:	bf94      	ite	ls
 800ba88:	4690      	movls	r8, r2
 800ba8a:	4698      	movhi	r8, r3
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	6123      	str	r3, [r4, #16]
 800ba90:	f02b 0304 	bic.w	r3, fp, #4
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	f04f 0900 	mov.w	r9, #0
 800ba9a:	9700      	str	r7, [sp, #0]
 800ba9c:	4633      	mov	r3, r6
 800ba9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800baa0:	4621      	mov	r1, r4
 800baa2:	4628      	mov	r0, r5
 800baa4:	f000 f9d2 	bl	800be4c <_printf_common>
 800baa8:	3001      	adds	r0, #1
 800baaa:	f040 808d 	bne.w	800bbc8 <_printf_float+0x1d0>
 800baae:	f04f 30ff 	mov.w	r0, #4294967295
 800bab2:	b00d      	add	sp, #52	@ 0x34
 800bab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab8:	4642      	mov	r2, r8
 800baba:	464b      	mov	r3, r9
 800babc:	4640      	mov	r0, r8
 800babe:	4649      	mov	r1, r9
 800bac0:	f7f5 f834 	bl	8000b2c <__aeabi_dcmpun>
 800bac4:	b140      	cbz	r0, 800bad8 <_printf_float+0xe0>
 800bac6:	464b      	mov	r3, r9
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfbc      	itt	lt
 800bacc:	232d      	movlt	r3, #45	@ 0x2d
 800bace:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bad2:	4a7e      	ldr	r2, [pc, #504]	@ (800bccc <_printf_float+0x2d4>)
 800bad4:	4b7e      	ldr	r3, [pc, #504]	@ (800bcd0 <_printf_float+0x2d8>)
 800bad6:	e7d4      	b.n	800ba82 <_printf_float+0x8a>
 800bad8:	6863      	ldr	r3, [r4, #4]
 800bada:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bade:	9206      	str	r2, [sp, #24]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	d13b      	bne.n	800bb5c <_printf_float+0x164>
 800bae4:	2306      	movs	r3, #6
 800bae6:	6063      	str	r3, [r4, #4]
 800bae8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800baec:	2300      	movs	r3, #0
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	9303      	str	r3, [sp, #12]
 800baf2:	ab0a      	add	r3, sp, #40	@ 0x28
 800baf4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800baf8:	ab09      	add	r3, sp, #36	@ 0x24
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	6861      	ldr	r1, [r4, #4]
 800bafe:	ec49 8b10 	vmov	d0, r8, r9
 800bb02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb06:	4628      	mov	r0, r5
 800bb08:	f7ff fed6 	bl	800b8b8 <__cvt>
 800bb0c:	9b06      	ldr	r3, [sp, #24]
 800bb0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb10:	2b47      	cmp	r3, #71	@ 0x47
 800bb12:	4680      	mov	r8, r0
 800bb14:	d129      	bne.n	800bb6a <_printf_float+0x172>
 800bb16:	1cc8      	adds	r0, r1, #3
 800bb18:	db02      	blt.n	800bb20 <_printf_float+0x128>
 800bb1a:	6863      	ldr	r3, [r4, #4]
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	dd41      	ble.n	800bba4 <_printf_float+0x1ac>
 800bb20:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb24:	fa5f fa8a 	uxtb.w	sl, sl
 800bb28:	3901      	subs	r1, #1
 800bb2a:	4652      	mov	r2, sl
 800bb2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb30:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb32:	f7ff ff26 	bl	800b982 <__exponent>
 800bb36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb38:	1813      	adds	r3, r2, r0
 800bb3a:	2a01      	cmp	r2, #1
 800bb3c:	4681      	mov	r9, r0
 800bb3e:	6123      	str	r3, [r4, #16]
 800bb40:	dc02      	bgt.n	800bb48 <_printf_float+0x150>
 800bb42:	6822      	ldr	r2, [r4, #0]
 800bb44:	07d2      	lsls	r2, r2, #31
 800bb46:	d501      	bpl.n	800bb4c <_printf_float+0x154>
 800bb48:	3301      	adds	r3, #1
 800bb4a:	6123      	str	r3, [r4, #16]
 800bb4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d0a2      	beq.n	800ba9a <_printf_float+0xa2>
 800bb54:	232d      	movs	r3, #45	@ 0x2d
 800bb56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb5a:	e79e      	b.n	800ba9a <_printf_float+0xa2>
 800bb5c:	9a06      	ldr	r2, [sp, #24]
 800bb5e:	2a47      	cmp	r2, #71	@ 0x47
 800bb60:	d1c2      	bne.n	800bae8 <_printf_float+0xf0>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1c0      	bne.n	800bae8 <_printf_float+0xf0>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e7bd      	b.n	800bae6 <_printf_float+0xee>
 800bb6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb6e:	d9db      	bls.n	800bb28 <_printf_float+0x130>
 800bb70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb74:	d118      	bne.n	800bba8 <_printf_float+0x1b0>
 800bb76:	2900      	cmp	r1, #0
 800bb78:	6863      	ldr	r3, [r4, #4]
 800bb7a:	dd0b      	ble.n	800bb94 <_printf_float+0x19c>
 800bb7c:	6121      	str	r1, [r4, #16]
 800bb7e:	b913      	cbnz	r3, 800bb86 <_printf_float+0x18e>
 800bb80:	6822      	ldr	r2, [r4, #0]
 800bb82:	07d0      	lsls	r0, r2, #31
 800bb84:	d502      	bpl.n	800bb8c <_printf_float+0x194>
 800bb86:	3301      	adds	r3, #1
 800bb88:	440b      	add	r3, r1
 800bb8a:	6123      	str	r3, [r4, #16]
 800bb8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb8e:	f04f 0900 	mov.w	r9, #0
 800bb92:	e7db      	b.n	800bb4c <_printf_float+0x154>
 800bb94:	b913      	cbnz	r3, 800bb9c <_printf_float+0x1a4>
 800bb96:	6822      	ldr	r2, [r4, #0]
 800bb98:	07d2      	lsls	r2, r2, #31
 800bb9a:	d501      	bpl.n	800bba0 <_printf_float+0x1a8>
 800bb9c:	3302      	adds	r3, #2
 800bb9e:	e7f4      	b.n	800bb8a <_printf_float+0x192>
 800bba0:	2301      	movs	r3, #1
 800bba2:	e7f2      	b.n	800bb8a <_printf_float+0x192>
 800bba4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	db05      	blt.n	800bbba <_printf_float+0x1c2>
 800bbae:	6823      	ldr	r3, [r4, #0]
 800bbb0:	6121      	str	r1, [r4, #16]
 800bbb2:	07d8      	lsls	r0, r3, #31
 800bbb4:	d5ea      	bpl.n	800bb8c <_printf_float+0x194>
 800bbb6:	1c4b      	adds	r3, r1, #1
 800bbb8:	e7e7      	b.n	800bb8a <_printf_float+0x192>
 800bbba:	2900      	cmp	r1, #0
 800bbbc:	bfd4      	ite	le
 800bbbe:	f1c1 0202 	rsble	r2, r1, #2
 800bbc2:	2201      	movgt	r2, #1
 800bbc4:	4413      	add	r3, r2
 800bbc6:	e7e0      	b.n	800bb8a <_printf_float+0x192>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	055a      	lsls	r2, r3, #21
 800bbcc:	d407      	bmi.n	800bbde <_printf_float+0x1e6>
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	4642      	mov	r2, r8
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b8      	blx	r7
 800bbd8:	3001      	adds	r0, #1
 800bbda:	d12b      	bne.n	800bc34 <_printf_float+0x23c>
 800bbdc:	e767      	b.n	800baae <_printf_float+0xb6>
 800bbde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbe2:	f240 80dd 	bls.w	800bda0 <_printf_float+0x3a8>
 800bbe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbea:	2200      	movs	r2, #0
 800bbec:	2300      	movs	r3, #0
 800bbee:	f7f4 ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d033      	beq.n	800bc5e <_printf_float+0x266>
 800bbf6:	4a37      	ldr	r2, [pc, #220]	@ (800bcd4 <_printf_float+0x2dc>)
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	4631      	mov	r1, r6
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	47b8      	blx	r7
 800bc00:	3001      	adds	r0, #1
 800bc02:	f43f af54 	beq.w	800baae <_printf_float+0xb6>
 800bc06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc0a:	4543      	cmp	r3, r8
 800bc0c:	db02      	blt.n	800bc14 <_printf_float+0x21c>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	07d8      	lsls	r0, r3, #31
 800bc12:	d50f      	bpl.n	800bc34 <_printf_float+0x23c>
 800bc14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	47b8      	blx	r7
 800bc1e:	3001      	adds	r0, #1
 800bc20:	f43f af45 	beq.w	800baae <_printf_float+0xb6>
 800bc24:	f04f 0900 	mov.w	r9, #0
 800bc28:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc2c:	f104 0a1a 	add.w	sl, r4, #26
 800bc30:	45c8      	cmp	r8, r9
 800bc32:	dc09      	bgt.n	800bc48 <_printf_float+0x250>
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	079b      	lsls	r3, r3, #30
 800bc38:	f100 8103 	bmi.w	800be42 <_printf_float+0x44a>
 800bc3c:	68e0      	ldr	r0, [r4, #12]
 800bc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc40:	4298      	cmp	r0, r3
 800bc42:	bfb8      	it	lt
 800bc44:	4618      	movlt	r0, r3
 800bc46:	e734      	b.n	800bab2 <_printf_float+0xba>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4652      	mov	r2, sl
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	f43f af2b 	beq.w	800baae <_printf_float+0xb6>
 800bc58:	f109 0901 	add.w	r9, r9, #1
 800bc5c:	e7e8      	b.n	800bc30 <_printf_float+0x238>
 800bc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	dc39      	bgt.n	800bcd8 <_printf_float+0x2e0>
 800bc64:	4a1b      	ldr	r2, [pc, #108]	@ (800bcd4 <_printf_float+0x2dc>)
 800bc66:	2301      	movs	r3, #1
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b8      	blx	r7
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f43f af1d 	beq.w	800baae <_printf_float+0xb6>
 800bc74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc78:	ea59 0303 	orrs.w	r3, r9, r3
 800bc7c:	d102      	bne.n	800bc84 <_printf_float+0x28c>
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	07d9      	lsls	r1, r3, #31
 800bc82:	d5d7      	bpl.n	800bc34 <_printf_float+0x23c>
 800bc84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	f43f af0d 	beq.w	800baae <_printf_float+0xb6>
 800bc94:	f04f 0a00 	mov.w	sl, #0
 800bc98:	f104 0b1a 	add.w	fp, r4, #26
 800bc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9e:	425b      	negs	r3, r3
 800bca0:	4553      	cmp	r3, sl
 800bca2:	dc01      	bgt.n	800bca8 <_printf_float+0x2b0>
 800bca4:	464b      	mov	r3, r9
 800bca6:	e793      	b.n	800bbd0 <_printf_float+0x1d8>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	465a      	mov	r2, fp
 800bcac:	4631      	mov	r1, r6
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f aefb 	beq.w	800baae <_printf_float+0xb6>
 800bcb8:	f10a 0a01 	add.w	sl, sl, #1
 800bcbc:	e7ee      	b.n	800bc9c <_printf_float+0x2a4>
 800bcbe:	bf00      	nop
 800bcc0:	7fefffff 	.word	0x7fefffff
 800bcc4:	0800f7ec 	.word	0x0800f7ec
 800bcc8:	0800f7f0 	.word	0x0800f7f0
 800bccc:	0800f7f4 	.word	0x0800f7f4
 800bcd0:	0800f7f8 	.word	0x0800f7f8
 800bcd4:	0800f7fc 	.word	0x0800f7fc
 800bcd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcde:	4553      	cmp	r3, sl
 800bce0:	bfa8      	it	ge
 800bce2:	4653      	movge	r3, sl
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	4699      	mov	r9, r3
 800bce8:	dc36      	bgt.n	800bd58 <_printf_float+0x360>
 800bcea:	f04f 0b00 	mov.w	fp, #0
 800bcee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcf2:	f104 021a 	add.w	r2, r4, #26
 800bcf6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcf8:	9306      	str	r3, [sp, #24]
 800bcfa:	eba3 0309 	sub.w	r3, r3, r9
 800bcfe:	455b      	cmp	r3, fp
 800bd00:	dc31      	bgt.n	800bd66 <_printf_float+0x36e>
 800bd02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd04:	459a      	cmp	sl, r3
 800bd06:	dc3a      	bgt.n	800bd7e <_printf_float+0x386>
 800bd08:	6823      	ldr	r3, [r4, #0]
 800bd0a:	07da      	lsls	r2, r3, #31
 800bd0c:	d437      	bmi.n	800bd7e <_printf_float+0x386>
 800bd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd10:	ebaa 0903 	sub.w	r9, sl, r3
 800bd14:	9b06      	ldr	r3, [sp, #24]
 800bd16:	ebaa 0303 	sub.w	r3, sl, r3
 800bd1a:	4599      	cmp	r9, r3
 800bd1c:	bfa8      	it	ge
 800bd1e:	4699      	movge	r9, r3
 800bd20:	f1b9 0f00 	cmp.w	r9, #0
 800bd24:	dc33      	bgt.n	800bd8e <_printf_float+0x396>
 800bd26:	f04f 0800 	mov.w	r8, #0
 800bd2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd2e:	f104 0b1a 	add.w	fp, r4, #26
 800bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd34:	ebaa 0303 	sub.w	r3, sl, r3
 800bd38:	eba3 0309 	sub.w	r3, r3, r9
 800bd3c:	4543      	cmp	r3, r8
 800bd3e:	f77f af79 	ble.w	800bc34 <_printf_float+0x23c>
 800bd42:	2301      	movs	r3, #1
 800bd44:	465a      	mov	r2, fp
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	f43f aeae 	beq.w	800baae <_printf_float+0xb6>
 800bd52:	f108 0801 	add.w	r8, r8, #1
 800bd56:	e7ec      	b.n	800bd32 <_printf_float+0x33a>
 800bd58:	4642      	mov	r2, r8
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b8      	blx	r7
 800bd60:	3001      	adds	r0, #1
 800bd62:	d1c2      	bne.n	800bcea <_printf_float+0x2f2>
 800bd64:	e6a3      	b.n	800baae <_printf_float+0xb6>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	9206      	str	r2, [sp, #24]
 800bd6e:	47b8      	blx	r7
 800bd70:	3001      	adds	r0, #1
 800bd72:	f43f ae9c 	beq.w	800baae <_printf_float+0xb6>
 800bd76:	9a06      	ldr	r2, [sp, #24]
 800bd78:	f10b 0b01 	add.w	fp, fp, #1
 800bd7c:	e7bb      	b.n	800bcf6 <_printf_float+0x2fe>
 800bd7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd82:	4631      	mov	r1, r6
 800bd84:	4628      	mov	r0, r5
 800bd86:	47b8      	blx	r7
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d1c0      	bne.n	800bd0e <_printf_float+0x316>
 800bd8c:	e68f      	b.n	800baae <_printf_float+0xb6>
 800bd8e:	9a06      	ldr	r2, [sp, #24]
 800bd90:	464b      	mov	r3, r9
 800bd92:	4442      	add	r2, r8
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b8      	blx	r7
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d1c3      	bne.n	800bd26 <_printf_float+0x32e>
 800bd9e:	e686      	b.n	800baae <_printf_float+0xb6>
 800bda0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bda4:	f1ba 0f01 	cmp.w	sl, #1
 800bda8:	dc01      	bgt.n	800bdae <_printf_float+0x3b6>
 800bdaa:	07db      	lsls	r3, r3, #31
 800bdac:	d536      	bpl.n	800be1c <_printf_float+0x424>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	4642      	mov	r2, r8
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	47b8      	blx	r7
 800bdb8:	3001      	adds	r0, #1
 800bdba:	f43f ae78 	beq.w	800baae <_printf_float+0xb6>
 800bdbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	47b8      	blx	r7
 800bdc8:	3001      	adds	r0, #1
 800bdca:	f43f ae70 	beq.w	800baae <_printf_float+0xb6>
 800bdce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdda:	f7f4 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdde:	b9c0      	cbnz	r0, 800be12 <_printf_float+0x41a>
 800bde0:	4653      	mov	r3, sl
 800bde2:	f108 0201 	add.w	r2, r8, #1
 800bde6:	4631      	mov	r1, r6
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b8      	blx	r7
 800bdec:	3001      	adds	r0, #1
 800bdee:	d10c      	bne.n	800be0a <_printf_float+0x412>
 800bdf0:	e65d      	b.n	800baae <_printf_float+0xb6>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	465a      	mov	r2, fp
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	f43f ae56 	beq.w	800baae <_printf_float+0xb6>
 800be02:	f108 0801 	add.w	r8, r8, #1
 800be06:	45d0      	cmp	r8, sl
 800be08:	dbf3      	blt.n	800bdf2 <_printf_float+0x3fa>
 800be0a:	464b      	mov	r3, r9
 800be0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be10:	e6df      	b.n	800bbd2 <_printf_float+0x1da>
 800be12:	f04f 0800 	mov.w	r8, #0
 800be16:	f104 0b1a 	add.w	fp, r4, #26
 800be1a:	e7f4      	b.n	800be06 <_printf_float+0x40e>
 800be1c:	2301      	movs	r3, #1
 800be1e:	4642      	mov	r2, r8
 800be20:	e7e1      	b.n	800bde6 <_printf_float+0x3ee>
 800be22:	2301      	movs	r3, #1
 800be24:	464a      	mov	r2, r9
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae3e 	beq.w	800baae <_printf_float+0xb6>
 800be32:	f108 0801 	add.w	r8, r8, #1
 800be36:	68e3      	ldr	r3, [r4, #12]
 800be38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be3a:	1a5b      	subs	r3, r3, r1
 800be3c:	4543      	cmp	r3, r8
 800be3e:	dcf0      	bgt.n	800be22 <_printf_float+0x42a>
 800be40:	e6fc      	b.n	800bc3c <_printf_float+0x244>
 800be42:	f04f 0800 	mov.w	r8, #0
 800be46:	f104 0919 	add.w	r9, r4, #25
 800be4a:	e7f4      	b.n	800be36 <_printf_float+0x43e>

0800be4c <_printf_common>:
 800be4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be50:	4616      	mov	r6, r2
 800be52:	4698      	mov	r8, r3
 800be54:	688a      	ldr	r2, [r1, #8]
 800be56:	690b      	ldr	r3, [r1, #16]
 800be58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be5c:	4293      	cmp	r3, r2
 800be5e:	bfb8      	it	lt
 800be60:	4613      	movlt	r3, r2
 800be62:	6033      	str	r3, [r6, #0]
 800be64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be68:	4607      	mov	r7, r0
 800be6a:	460c      	mov	r4, r1
 800be6c:	b10a      	cbz	r2, 800be72 <_printf_common+0x26>
 800be6e:	3301      	adds	r3, #1
 800be70:	6033      	str	r3, [r6, #0]
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	0699      	lsls	r1, r3, #26
 800be76:	bf42      	ittt	mi
 800be78:	6833      	ldrmi	r3, [r6, #0]
 800be7a:	3302      	addmi	r3, #2
 800be7c:	6033      	strmi	r3, [r6, #0]
 800be7e:	6825      	ldr	r5, [r4, #0]
 800be80:	f015 0506 	ands.w	r5, r5, #6
 800be84:	d106      	bne.n	800be94 <_printf_common+0x48>
 800be86:	f104 0a19 	add.w	sl, r4, #25
 800be8a:	68e3      	ldr	r3, [r4, #12]
 800be8c:	6832      	ldr	r2, [r6, #0]
 800be8e:	1a9b      	subs	r3, r3, r2
 800be90:	42ab      	cmp	r3, r5
 800be92:	dc26      	bgt.n	800bee2 <_printf_common+0x96>
 800be94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be98:	6822      	ldr	r2, [r4, #0]
 800be9a:	3b00      	subs	r3, #0
 800be9c:	bf18      	it	ne
 800be9e:	2301      	movne	r3, #1
 800bea0:	0692      	lsls	r2, r2, #26
 800bea2:	d42b      	bmi.n	800befc <_printf_common+0xb0>
 800bea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bea8:	4641      	mov	r1, r8
 800beaa:	4638      	mov	r0, r7
 800beac:	47c8      	blx	r9
 800beae:	3001      	adds	r0, #1
 800beb0:	d01e      	beq.n	800bef0 <_printf_common+0xa4>
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	6922      	ldr	r2, [r4, #16]
 800beb6:	f003 0306 	and.w	r3, r3, #6
 800beba:	2b04      	cmp	r3, #4
 800bebc:	bf02      	ittt	eq
 800bebe:	68e5      	ldreq	r5, [r4, #12]
 800bec0:	6833      	ldreq	r3, [r6, #0]
 800bec2:	1aed      	subeq	r5, r5, r3
 800bec4:	68a3      	ldr	r3, [r4, #8]
 800bec6:	bf0c      	ite	eq
 800bec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800becc:	2500      	movne	r5, #0
 800bece:	4293      	cmp	r3, r2
 800bed0:	bfc4      	itt	gt
 800bed2:	1a9b      	subgt	r3, r3, r2
 800bed4:	18ed      	addgt	r5, r5, r3
 800bed6:	2600      	movs	r6, #0
 800bed8:	341a      	adds	r4, #26
 800beda:	42b5      	cmp	r5, r6
 800bedc:	d11a      	bne.n	800bf14 <_printf_common+0xc8>
 800bede:	2000      	movs	r0, #0
 800bee0:	e008      	b.n	800bef4 <_printf_common+0xa8>
 800bee2:	2301      	movs	r3, #1
 800bee4:	4652      	mov	r2, sl
 800bee6:	4641      	mov	r1, r8
 800bee8:	4638      	mov	r0, r7
 800beea:	47c8      	blx	r9
 800beec:	3001      	adds	r0, #1
 800beee:	d103      	bne.n	800bef8 <_printf_common+0xac>
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef8:	3501      	adds	r5, #1
 800befa:	e7c6      	b.n	800be8a <_printf_common+0x3e>
 800befc:	18e1      	adds	r1, r4, r3
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	2030      	movs	r0, #48	@ 0x30
 800bf02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf06:	4422      	add	r2, r4
 800bf08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf10:	3302      	adds	r3, #2
 800bf12:	e7c7      	b.n	800bea4 <_printf_common+0x58>
 800bf14:	2301      	movs	r3, #1
 800bf16:	4622      	mov	r2, r4
 800bf18:	4641      	mov	r1, r8
 800bf1a:	4638      	mov	r0, r7
 800bf1c:	47c8      	blx	r9
 800bf1e:	3001      	adds	r0, #1
 800bf20:	d0e6      	beq.n	800bef0 <_printf_common+0xa4>
 800bf22:	3601      	adds	r6, #1
 800bf24:	e7d9      	b.n	800beda <_printf_common+0x8e>
	...

0800bf28 <_printf_i>:
 800bf28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2c:	7e0f      	ldrb	r7, [r1, #24]
 800bf2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf30:	2f78      	cmp	r7, #120	@ 0x78
 800bf32:	4691      	mov	r9, r2
 800bf34:	4680      	mov	r8, r0
 800bf36:	460c      	mov	r4, r1
 800bf38:	469a      	mov	sl, r3
 800bf3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf3e:	d807      	bhi.n	800bf50 <_printf_i+0x28>
 800bf40:	2f62      	cmp	r7, #98	@ 0x62
 800bf42:	d80a      	bhi.n	800bf5a <_printf_i+0x32>
 800bf44:	2f00      	cmp	r7, #0
 800bf46:	f000 80d2 	beq.w	800c0ee <_printf_i+0x1c6>
 800bf4a:	2f58      	cmp	r7, #88	@ 0x58
 800bf4c:	f000 80b9 	beq.w	800c0c2 <_printf_i+0x19a>
 800bf50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf58:	e03a      	b.n	800bfd0 <_printf_i+0xa8>
 800bf5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf5e:	2b15      	cmp	r3, #21
 800bf60:	d8f6      	bhi.n	800bf50 <_printf_i+0x28>
 800bf62:	a101      	add	r1, pc, #4	@ (adr r1, 800bf68 <_printf_i+0x40>)
 800bf64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf68:	0800bfc1 	.word	0x0800bfc1
 800bf6c:	0800bfd5 	.word	0x0800bfd5
 800bf70:	0800bf51 	.word	0x0800bf51
 800bf74:	0800bf51 	.word	0x0800bf51
 800bf78:	0800bf51 	.word	0x0800bf51
 800bf7c:	0800bf51 	.word	0x0800bf51
 800bf80:	0800bfd5 	.word	0x0800bfd5
 800bf84:	0800bf51 	.word	0x0800bf51
 800bf88:	0800bf51 	.word	0x0800bf51
 800bf8c:	0800bf51 	.word	0x0800bf51
 800bf90:	0800bf51 	.word	0x0800bf51
 800bf94:	0800c0d5 	.word	0x0800c0d5
 800bf98:	0800bfff 	.word	0x0800bfff
 800bf9c:	0800c08f 	.word	0x0800c08f
 800bfa0:	0800bf51 	.word	0x0800bf51
 800bfa4:	0800bf51 	.word	0x0800bf51
 800bfa8:	0800c0f7 	.word	0x0800c0f7
 800bfac:	0800bf51 	.word	0x0800bf51
 800bfb0:	0800bfff 	.word	0x0800bfff
 800bfb4:	0800bf51 	.word	0x0800bf51
 800bfb8:	0800bf51 	.word	0x0800bf51
 800bfbc:	0800c097 	.word	0x0800c097
 800bfc0:	6833      	ldr	r3, [r6, #0]
 800bfc2:	1d1a      	adds	r2, r3, #4
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6032      	str	r2, [r6, #0]
 800bfc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e09d      	b.n	800c110 <_printf_i+0x1e8>
 800bfd4:	6833      	ldr	r3, [r6, #0]
 800bfd6:	6820      	ldr	r0, [r4, #0]
 800bfd8:	1d19      	adds	r1, r3, #4
 800bfda:	6031      	str	r1, [r6, #0]
 800bfdc:	0606      	lsls	r6, r0, #24
 800bfde:	d501      	bpl.n	800bfe4 <_printf_i+0xbc>
 800bfe0:	681d      	ldr	r5, [r3, #0]
 800bfe2:	e003      	b.n	800bfec <_printf_i+0xc4>
 800bfe4:	0645      	lsls	r5, r0, #25
 800bfe6:	d5fb      	bpl.n	800bfe0 <_printf_i+0xb8>
 800bfe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bfec:	2d00      	cmp	r5, #0
 800bfee:	da03      	bge.n	800bff8 <_printf_i+0xd0>
 800bff0:	232d      	movs	r3, #45	@ 0x2d
 800bff2:	426d      	negs	r5, r5
 800bff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bff8:	4859      	ldr	r0, [pc, #356]	@ (800c160 <_printf_i+0x238>)
 800bffa:	230a      	movs	r3, #10
 800bffc:	e011      	b.n	800c022 <_printf_i+0xfa>
 800bffe:	6821      	ldr	r1, [r4, #0]
 800c000:	6833      	ldr	r3, [r6, #0]
 800c002:	0608      	lsls	r0, r1, #24
 800c004:	f853 5b04 	ldr.w	r5, [r3], #4
 800c008:	d402      	bmi.n	800c010 <_printf_i+0xe8>
 800c00a:	0649      	lsls	r1, r1, #25
 800c00c:	bf48      	it	mi
 800c00e:	b2ad      	uxthmi	r5, r5
 800c010:	2f6f      	cmp	r7, #111	@ 0x6f
 800c012:	4853      	ldr	r0, [pc, #332]	@ (800c160 <_printf_i+0x238>)
 800c014:	6033      	str	r3, [r6, #0]
 800c016:	bf14      	ite	ne
 800c018:	230a      	movne	r3, #10
 800c01a:	2308      	moveq	r3, #8
 800c01c:	2100      	movs	r1, #0
 800c01e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c022:	6866      	ldr	r6, [r4, #4]
 800c024:	60a6      	str	r6, [r4, #8]
 800c026:	2e00      	cmp	r6, #0
 800c028:	bfa2      	ittt	ge
 800c02a:	6821      	ldrge	r1, [r4, #0]
 800c02c:	f021 0104 	bicge.w	r1, r1, #4
 800c030:	6021      	strge	r1, [r4, #0]
 800c032:	b90d      	cbnz	r5, 800c038 <_printf_i+0x110>
 800c034:	2e00      	cmp	r6, #0
 800c036:	d04b      	beq.n	800c0d0 <_printf_i+0x1a8>
 800c038:	4616      	mov	r6, r2
 800c03a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c03e:	fb03 5711 	mls	r7, r3, r1, r5
 800c042:	5dc7      	ldrb	r7, [r0, r7]
 800c044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c048:	462f      	mov	r7, r5
 800c04a:	42bb      	cmp	r3, r7
 800c04c:	460d      	mov	r5, r1
 800c04e:	d9f4      	bls.n	800c03a <_printf_i+0x112>
 800c050:	2b08      	cmp	r3, #8
 800c052:	d10b      	bne.n	800c06c <_printf_i+0x144>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	07df      	lsls	r7, r3, #31
 800c058:	d508      	bpl.n	800c06c <_printf_i+0x144>
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	6861      	ldr	r1, [r4, #4]
 800c05e:	4299      	cmp	r1, r3
 800c060:	bfde      	ittt	le
 800c062:	2330      	movle	r3, #48	@ 0x30
 800c064:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c06c:	1b92      	subs	r2, r2, r6
 800c06e:	6122      	str	r2, [r4, #16]
 800c070:	f8cd a000 	str.w	sl, [sp]
 800c074:	464b      	mov	r3, r9
 800c076:	aa03      	add	r2, sp, #12
 800c078:	4621      	mov	r1, r4
 800c07a:	4640      	mov	r0, r8
 800c07c:	f7ff fee6 	bl	800be4c <_printf_common>
 800c080:	3001      	adds	r0, #1
 800c082:	d14a      	bne.n	800c11a <_printf_i+0x1f2>
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	b004      	add	sp, #16
 800c08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	f043 0320 	orr.w	r3, r3, #32
 800c094:	6023      	str	r3, [r4, #0]
 800c096:	4833      	ldr	r0, [pc, #204]	@ (800c164 <_printf_i+0x23c>)
 800c098:	2778      	movs	r7, #120	@ 0x78
 800c09a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	6831      	ldr	r1, [r6, #0]
 800c0a2:	061f      	lsls	r7, r3, #24
 800c0a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0a8:	d402      	bmi.n	800c0b0 <_printf_i+0x188>
 800c0aa:	065f      	lsls	r7, r3, #25
 800c0ac:	bf48      	it	mi
 800c0ae:	b2ad      	uxthmi	r5, r5
 800c0b0:	6031      	str	r1, [r6, #0]
 800c0b2:	07d9      	lsls	r1, r3, #31
 800c0b4:	bf44      	itt	mi
 800c0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0ba:	6023      	strmi	r3, [r4, #0]
 800c0bc:	b11d      	cbz	r5, 800c0c6 <_printf_i+0x19e>
 800c0be:	2310      	movs	r3, #16
 800c0c0:	e7ac      	b.n	800c01c <_printf_i+0xf4>
 800c0c2:	4827      	ldr	r0, [pc, #156]	@ (800c160 <_printf_i+0x238>)
 800c0c4:	e7e9      	b.n	800c09a <_printf_i+0x172>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	f023 0320 	bic.w	r3, r3, #32
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	e7f6      	b.n	800c0be <_printf_i+0x196>
 800c0d0:	4616      	mov	r6, r2
 800c0d2:	e7bd      	b.n	800c050 <_printf_i+0x128>
 800c0d4:	6833      	ldr	r3, [r6, #0]
 800c0d6:	6825      	ldr	r5, [r4, #0]
 800c0d8:	6961      	ldr	r1, [r4, #20]
 800c0da:	1d18      	adds	r0, r3, #4
 800c0dc:	6030      	str	r0, [r6, #0]
 800c0de:	062e      	lsls	r6, r5, #24
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	d501      	bpl.n	800c0e8 <_printf_i+0x1c0>
 800c0e4:	6019      	str	r1, [r3, #0]
 800c0e6:	e002      	b.n	800c0ee <_printf_i+0x1c6>
 800c0e8:	0668      	lsls	r0, r5, #25
 800c0ea:	d5fb      	bpl.n	800c0e4 <_printf_i+0x1bc>
 800c0ec:	8019      	strh	r1, [r3, #0]
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	4616      	mov	r6, r2
 800c0f4:	e7bc      	b.n	800c070 <_printf_i+0x148>
 800c0f6:	6833      	ldr	r3, [r6, #0]
 800c0f8:	1d1a      	adds	r2, r3, #4
 800c0fa:	6032      	str	r2, [r6, #0]
 800c0fc:	681e      	ldr	r6, [r3, #0]
 800c0fe:	6862      	ldr	r2, [r4, #4]
 800c100:	2100      	movs	r1, #0
 800c102:	4630      	mov	r0, r6
 800c104:	f7f4 f864 	bl	80001d0 <memchr>
 800c108:	b108      	cbz	r0, 800c10e <_printf_i+0x1e6>
 800c10a:	1b80      	subs	r0, r0, r6
 800c10c:	6060      	str	r0, [r4, #4]
 800c10e:	6863      	ldr	r3, [r4, #4]
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	2300      	movs	r3, #0
 800c114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c118:	e7aa      	b.n	800c070 <_printf_i+0x148>
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	4632      	mov	r2, r6
 800c11e:	4649      	mov	r1, r9
 800c120:	4640      	mov	r0, r8
 800c122:	47d0      	blx	sl
 800c124:	3001      	adds	r0, #1
 800c126:	d0ad      	beq.n	800c084 <_printf_i+0x15c>
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	079b      	lsls	r3, r3, #30
 800c12c:	d413      	bmi.n	800c156 <_printf_i+0x22e>
 800c12e:	68e0      	ldr	r0, [r4, #12]
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	4298      	cmp	r0, r3
 800c134:	bfb8      	it	lt
 800c136:	4618      	movlt	r0, r3
 800c138:	e7a6      	b.n	800c088 <_printf_i+0x160>
 800c13a:	2301      	movs	r3, #1
 800c13c:	4632      	mov	r2, r6
 800c13e:	4649      	mov	r1, r9
 800c140:	4640      	mov	r0, r8
 800c142:	47d0      	blx	sl
 800c144:	3001      	adds	r0, #1
 800c146:	d09d      	beq.n	800c084 <_printf_i+0x15c>
 800c148:	3501      	adds	r5, #1
 800c14a:	68e3      	ldr	r3, [r4, #12]
 800c14c:	9903      	ldr	r1, [sp, #12]
 800c14e:	1a5b      	subs	r3, r3, r1
 800c150:	42ab      	cmp	r3, r5
 800c152:	dcf2      	bgt.n	800c13a <_printf_i+0x212>
 800c154:	e7eb      	b.n	800c12e <_printf_i+0x206>
 800c156:	2500      	movs	r5, #0
 800c158:	f104 0619 	add.w	r6, r4, #25
 800c15c:	e7f5      	b.n	800c14a <_printf_i+0x222>
 800c15e:	bf00      	nop
 800c160:	0800f7fe 	.word	0x0800f7fe
 800c164:	0800f80f 	.word	0x0800f80f

0800c168 <std>:
 800c168:	2300      	movs	r3, #0
 800c16a:	b510      	push	{r4, lr}
 800c16c:	4604      	mov	r4, r0
 800c16e:	e9c0 3300 	strd	r3, r3, [r0]
 800c172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c176:	6083      	str	r3, [r0, #8]
 800c178:	8181      	strh	r1, [r0, #12]
 800c17a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c17c:	81c2      	strh	r2, [r0, #14]
 800c17e:	6183      	str	r3, [r0, #24]
 800c180:	4619      	mov	r1, r3
 800c182:	2208      	movs	r2, #8
 800c184:	305c      	adds	r0, #92	@ 0x5c
 800c186:	f000 f915 	bl	800c3b4 <memset>
 800c18a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c0 <std+0x58>)
 800c18c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c18e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c4 <std+0x5c>)
 800c190:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c192:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c8 <std+0x60>)
 800c194:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c196:	4b0d      	ldr	r3, [pc, #52]	@ (800c1cc <std+0x64>)
 800c198:	6323      	str	r3, [r4, #48]	@ 0x30
 800c19a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d0 <std+0x68>)
 800c19c:	6224      	str	r4, [r4, #32]
 800c19e:	429c      	cmp	r4, r3
 800c1a0:	d006      	beq.n	800c1b0 <std+0x48>
 800c1a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1a6:	4294      	cmp	r4, r2
 800c1a8:	d002      	beq.n	800c1b0 <std+0x48>
 800c1aa:	33d0      	adds	r3, #208	@ 0xd0
 800c1ac:	429c      	cmp	r4, r3
 800c1ae:	d105      	bne.n	800c1bc <std+0x54>
 800c1b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1b8:	f000 b9ce 	b.w	800c558 <__retarget_lock_init_recursive>
 800c1bc:	bd10      	pop	{r4, pc}
 800c1be:	bf00      	nop
 800c1c0:	0800c2ed 	.word	0x0800c2ed
 800c1c4:	0800c30f 	.word	0x0800c30f
 800c1c8:	0800c347 	.word	0x0800c347
 800c1cc:	0800c36b 	.word	0x0800c36b
 800c1d0:	20005558 	.word	0x20005558

0800c1d4 <stdio_exit_handler>:
 800c1d4:	4a02      	ldr	r2, [pc, #8]	@ (800c1e0 <stdio_exit_handler+0xc>)
 800c1d6:	4903      	ldr	r1, [pc, #12]	@ (800c1e4 <stdio_exit_handler+0x10>)
 800c1d8:	4803      	ldr	r0, [pc, #12]	@ (800c1e8 <stdio_exit_handler+0x14>)
 800c1da:	f000 b869 	b.w	800c2b0 <_fwalk_sglue>
 800c1de:	bf00      	nop
 800c1e0:	20000030 	.word	0x20000030
 800c1e4:	0800ded5 	.word	0x0800ded5
 800c1e8:	20000040 	.word	0x20000040

0800c1ec <cleanup_stdio>:
 800c1ec:	6841      	ldr	r1, [r0, #4]
 800c1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c220 <cleanup_stdio+0x34>)
 800c1f0:	4299      	cmp	r1, r3
 800c1f2:	b510      	push	{r4, lr}
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	d001      	beq.n	800c1fc <cleanup_stdio+0x10>
 800c1f8:	f001 fe6c 	bl	800ded4 <_fflush_r>
 800c1fc:	68a1      	ldr	r1, [r4, #8]
 800c1fe:	4b09      	ldr	r3, [pc, #36]	@ (800c224 <cleanup_stdio+0x38>)
 800c200:	4299      	cmp	r1, r3
 800c202:	d002      	beq.n	800c20a <cleanup_stdio+0x1e>
 800c204:	4620      	mov	r0, r4
 800c206:	f001 fe65 	bl	800ded4 <_fflush_r>
 800c20a:	68e1      	ldr	r1, [r4, #12]
 800c20c:	4b06      	ldr	r3, [pc, #24]	@ (800c228 <cleanup_stdio+0x3c>)
 800c20e:	4299      	cmp	r1, r3
 800c210:	d004      	beq.n	800c21c <cleanup_stdio+0x30>
 800c212:	4620      	mov	r0, r4
 800c214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c218:	f001 be5c 	b.w	800ded4 <_fflush_r>
 800c21c:	bd10      	pop	{r4, pc}
 800c21e:	bf00      	nop
 800c220:	20005558 	.word	0x20005558
 800c224:	200055c0 	.word	0x200055c0
 800c228:	20005628 	.word	0x20005628

0800c22c <global_stdio_init.part.0>:
 800c22c:	b510      	push	{r4, lr}
 800c22e:	4b0b      	ldr	r3, [pc, #44]	@ (800c25c <global_stdio_init.part.0+0x30>)
 800c230:	4c0b      	ldr	r4, [pc, #44]	@ (800c260 <global_stdio_init.part.0+0x34>)
 800c232:	4a0c      	ldr	r2, [pc, #48]	@ (800c264 <global_stdio_init.part.0+0x38>)
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	4620      	mov	r0, r4
 800c238:	2200      	movs	r2, #0
 800c23a:	2104      	movs	r1, #4
 800c23c:	f7ff ff94 	bl	800c168 <std>
 800c240:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c244:	2201      	movs	r2, #1
 800c246:	2109      	movs	r1, #9
 800c248:	f7ff ff8e 	bl	800c168 <std>
 800c24c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c250:	2202      	movs	r2, #2
 800c252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c256:	2112      	movs	r1, #18
 800c258:	f7ff bf86 	b.w	800c168 <std>
 800c25c:	20005690 	.word	0x20005690
 800c260:	20005558 	.word	0x20005558
 800c264:	0800c1d5 	.word	0x0800c1d5

0800c268 <__sfp_lock_acquire>:
 800c268:	4801      	ldr	r0, [pc, #4]	@ (800c270 <__sfp_lock_acquire+0x8>)
 800c26a:	f000 b976 	b.w	800c55a <__retarget_lock_acquire_recursive>
 800c26e:	bf00      	nop
 800c270:	20005699 	.word	0x20005699

0800c274 <__sfp_lock_release>:
 800c274:	4801      	ldr	r0, [pc, #4]	@ (800c27c <__sfp_lock_release+0x8>)
 800c276:	f000 b971 	b.w	800c55c <__retarget_lock_release_recursive>
 800c27a:	bf00      	nop
 800c27c:	20005699 	.word	0x20005699

0800c280 <__sinit>:
 800c280:	b510      	push	{r4, lr}
 800c282:	4604      	mov	r4, r0
 800c284:	f7ff fff0 	bl	800c268 <__sfp_lock_acquire>
 800c288:	6a23      	ldr	r3, [r4, #32]
 800c28a:	b11b      	cbz	r3, 800c294 <__sinit+0x14>
 800c28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c290:	f7ff bff0 	b.w	800c274 <__sfp_lock_release>
 800c294:	4b04      	ldr	r3, [pc, #16]	@ (800c2a8 <__sinit+0x28>)
 800c296:	6223      	str	r3, [r4, #32]
 800c298:	4b04      	ldr	r3, [pc, #16]	@ (800c2ac <__sinit+0x2c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1f5      	bne.n	800c28c <__sinit+0xc>
 800c2a0:	f7ff ffc4 	bl	800c22c <global_stdio_init.part.0>
 800c2a4:	e7f2      	b.n	800c28c <__sinit+0xc>
 800c2a6:	bf00      	nop
 800c2a8:	0800c1ed 	.word	0x0800c1ed
 800c2ac:	20005690 	.word	0x20005690

0800c2b0 <_fwalk_sglue>:
 800c2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	4607      	mov	r7, r0
 800c2b6:	4688      	mov	r8, r1
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	2600      	movs	r6, #0
 800c2bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c2c4:	d505      	bpl.n	800c2d2 <_fwalk_sglue+0x22>
 800c2c6:	6824      	ldr	r4, [r4, #0]
 800c2c8:	2c00      	cmp	r4, #0
 800c2ca:	d1f7      	bne.n	800c2bc <_fwalk_sglue+0xc>
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	89ab      	ldrh	r3, [r5, #12]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d907      	bls.n	800c2e8 <_fwalk_sglue+0x38>
 800c2d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	d003      	beq.n	800c2e8 <_fwalk_sglue+0x38>
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	47c0      	blx	r8
 800c2e6:	4306      	orrs	r6, r0
 800c2e8:	3568      	adds	r5, #104	@ 0x68
 800c2ea:	e7e9      	b.n	800c2c0 <_fwalk_sglue+0x10>

0800c2ec <__sread>:
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f4:	f000 f8e2 	bl	800c4bc <_read_r>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	bfab      	itete	ge
 800c2fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c300:	181b      	addge	r3, r3, r0
 800c302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c306:	bfac      	ite	ge
 800c308:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c30a:	81a3      	strhlt	r3, [r4, #12]
 800c30c:	bd10      	pop	{r4, pc}

0800c30e <__swrite>:
 800c30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c312:	461f      	mov	r7, r3
 800c314:	898b      	ldrh	r3, [r1, #12]
 800c316:	05db      	lsls	r3, r3, #23
 800c318:	4605      	mov	r5, r0
 800c31a:	460c      	mov	r4, r1
 800c31c:	4616      	mov	r6, r2
 800c31e:	d505      	bpl.n	800c32c <__swrite+0x1e>
 800c320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c324:	2302      	movs	r3, #2
 800c326:	2200      	movs	r2, #0
 800c328:	f000 f8b6 	bl	800c498 <_lseek_r>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	4632      	mov	r2, r6
 800c33a:	463b      	mov	r3, r7
 800c33c:	4628      	mov	r0, r5
 800c33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c342:	f000 b8cd 	b.w	800c4e0 <_write_r>

0800c346 <__sseek>:
 800c346:	b510      	push	{r4, lr}
 800c348:	460c      	mov	r4, r1
 800c34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c34e:	f000 f8a3 	bl	800c498 <_lseek_r>
 800c352:	1c43      	adds	r3, r0, #1
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	bf15      	itete	ne
 800c358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c35a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c35e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c362:	81a3      	strheq	r3, [r4, #12]
 800c364:	bf18      	it	ne
 800c366:	81a3      	strhne	r3, [r4, #12]
 800c368:	bd10      	pop	{r4, pc}

0800c36a <__sclose>:
 800c36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c36e:	f000 b82d 	b.w	800c3cc <_close_r>
	...

0800c374 <_vsiprintf_r>:
 800c374:	b500      	push	{lr}
 800c376:	b09b      	sub	sp, #108	@ 0x6c
 800c378:	9100      	str	r1, [sp, #0]
 800c37a:	9104      	str	r1, [sp, #16]
 800c37c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c380:	9105      	str	r1, [sp, #20]
 800c382:	9102      	str	r1, [sp, #8]
 800c384:	4905      	ldr	r1, [pc, #20]	@ (800c39c <_vsiprintf_r+0x28>)
 800c386:	9103      	str	r1, [sp, #12]
 800c388:	4669      	mov	r1, sp
 800c38a:	f001 fc23 	bl	800dbd4 <_svfiprintf_r>
 800c38e:	9b00      	ldr	r3, [sp, #0]
 800c390:	2200      	movs	r2, #0
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	b01b      	add	sp, #108	@ 0x6c
 800c396:	f85d fb04 	ldr.w	pc, [sp], #4
 800c39a:	bf00      	nop
 800c39c:	ffff0208 	.word	0xffff0208

0800c3a0 <vsiprintf>:
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	460a      	mov	r2, r1
 800c3a4:	4601      	mov	r1, r0
 800c3a6:	4802      	ldr	r0, [pc, #8]	@ (800c3b0 <vsiprintf+0x10>)
 800c3a8:	6800      	ldr	r0, [r0, #0]
 800c3aa:	f7ff bfe3 	b.w	800c374 <_vsiprintf_r>
 800c3ae:	bf00      	nop
 800c3b0:	2000003c 	.word	0x2000003c

0800c3b4 <memset>:
 800c3b4:	4402      	add	r2, r0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d100      	bne.n	800c3be <memset+0xa>
 800c3bc:	4770      	bx	lr
 800c3be:	f803 1b01 	strb.w	r1, [r3], #1
 800c3c2:	e7f9      	b.n	800c3b8 <memset+0x4>

0800c3c4 <_localeconv_r>:
 800c3c4:	4800      	ldr	r0, [pc, #0]	@ (800c3c8 <_localeconv_r+0x4>)
 800c3c6:	4770      	bx	lr
 800c3c8:	2000017c 	.word	0x2000017c

0800c3cc <_close_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4d06      	ldr	r5, [pc, #24]	@ (800c3e8 <_close_r+0x1c>)
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	602b      	str	r3, [r5, #0]
 800c3d8:	f7f7 ffee 	bl	80043b8 <_close>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_close_r+0x1a>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_close_r+0x1a>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20005694 	.word	0x20005694

0800c3ec <_reclaim_reent>:
 800c3ec:	4b29      	ldr	r3, [pc, #164]	@ (800c494 <_reclaim_reent+0xa8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4283      	cmp	r3, r0
 800c3f2:	b570      	push	{r4, r5, r6, lr}
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	d04b      	beq.n	800c490 <_reclaim_reent+0xa4>
 800c3f8:	69c3      	ldr	r3, [r0, #28]
 800c3fa:	b1ab      	cbz	r3, 800c428 <_reclaim_reent+0x3c>
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	b16b      	cbz	r3, 800c41c <_reclaim_reent+0x30>
 800c400:	2500      	movs	r5, #0
 800c402:	69e3      	ldr	r3, [r4, #28]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	5959      	ldr	r1, [r3, r5]
 800c408:	2900      	cmp	r1, #0
 800c40a:	d13b      	bne.n	800c484 <_reclaim_reent+0x98>
 800c40c:	3504      	adds	r5, #4
 800c40e:	2d80      	cmp	r5, #128	@ 0x80
 800c410:	d1f7      	bne.n	800c402 <_reclaim_reent+0x16>
 800c412:	69e3      	ldr	r3, [r4, #28]
 800c414:	4620      	mov	r0, r4
 800c416:	68d9      	ldr	r1, [r3, #12]
 800c418:	f000 fefe 	bl	800d218 <_free_r>
 800c41c:	69e3      	ldr	r3, [r4, #28]
 800c41e:	6819      	ldr	r1, [r3, #0]
 800c420:	b111      	cbz	r1, 800c428 <_reclaim_reent+0x3c>
 800c422:	4620      	mov	r0, r4
 800c424:	f000 fef8 	bl	800d218 <_free_r>
 800c428:	6961      	ldr	r1, [r4, #20]
 800c42a:	b111      	cbz	r1, 800c432 <_reclaim_reent+0x46>
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 fef3 	bl	800d218 <_free_r>
 800c432:	69e1      	ldr	r1, [r4, #28]
 800c434:	b111      	cbz	r1, 800c43c <_reclaim_reent+0x50>
 800c436:	4620      	mov	r0, r4
 800c438:	f000 feee 	bl	800d218 <_free_r>
 800c43c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c43e:	b111      	cbz	r1, 800c446 <_reclaim_reent+0x5a>
 800c440:	4620      	mov	r0, r4
 800c442:	f000 fee9 	bl	800d218 <_free_r>
 800c446:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c448:	b111      	cbz	r1, 800c450 <_reclaim_reent+0x64>
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 fee4 	bl	800d218 <_free_r>
 800c450:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c452:	b111      	cbz	r1, 800c45a <_reclaim_reent+0x6e>
 800c454:	4620      	mov	r0, r4
 800c456:	f000 fedf 	bl	800d218 <_free_r>
 800c45a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c45c:	b111      	cbz	r1, 800c464 <_reclaim_reent+0x78>
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 feda 	bl	800d218 <_free_r>
 800c464:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c466:	b111      	cbz	r1, 800c46e <_reclaim_reent+0x82>
 800c468:	4620      	mov	r0, r4
 800c46a:	f000 fed5 	bl	800d218 <_free_r>
 800c46e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c470:	b111      	cbz	r1, 800c478 <_reclaim_reent+0x8c>
 800c472:	4620      	mov	r0, r4
 800c474:	f000 fed0 	bl	800d218 <_free_r>
 800c478:	6a23      	ldr	r3, [r4, #32]
 800c47a:	b14b      	cbz	r3, 800c490 <_reclaim_reent+0xa4>
 800c47c:	4620      	mov	r0, r4
 800c47e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c482:	4718      	bx	r3
 800c484:	680e      	ldr	r6, [r1, #0]
 800c486:	4620      	mov	r0, r4
 800c488:	f000 fec6 	bl	800d218 <_free_r>
 800c48c:	4631      	mov	r1, r6
 800c48e:	e7bb      	b.n	800c408 <_reclaim_reent+0x1c>
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	bf00      	nop
 800c494:	2000003c 	.word	0x2000003c

0800c498 <_lseek_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d07      	ldr	r5, [pc, #28]	@ (800c4b8 <_lseek_r+0x20>)
 800c49c:	4604      	mov	r4, r0
 800c49e:	4608      	mov	r0, r1
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	602a      	str	r2, [r5, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f7f7 ffad 	bl	8004406 <_lseek>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_lseek_r+0x1e>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_lseek_r+0x1e>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	20005694 	.word	0x20005694

0800c4bc <_read_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4d07      	ldr	r5, [pc, #28]	@ (800c4dc <_read_r+0x20>)
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	4608      	mov	r0, r1
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	602a      	str	r2, [r5, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f7f7 ff3b 	bl	8004346 <_read>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_read_r+0x1e>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_read_r+0x1e>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	20005694 	.word	0x20005694

0800c4e0 <_write_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d07      	ldr	r5, [pc, #28]	@ (800c500 <_write_r+0x20>)
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	602a      	str	r2, [r5, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f7f7 ff46 	bl	8004380 <_write>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_write_r+0x1e>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_write_r+0x1e>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	20005694 	.word	0x20005694

0800c504 <__errno>:
 800c504:	4b01      	ldr	r3, [pc, #4]	@ (800c50c <__errno+0x8>)
 800c506:	6818      	ldr	r0, [r3, #0]
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	2000003c 	.word	0x2000003c

0800c510 <__libc_init_array>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	4d0d      	ldr	r5, [pc, #52]	@ (800c548 <__libc_init_array+0x38>)
 800c514:	4c0d      	ldr	r4, [pc, #52]	@ (800c54c <__libc_init_array+0x3c>)
 800c516:	1b64      	subs	r4, r4, r5
 800c518:	10a4      	asrs	r4, r4, #2
 800c51a:	2600      	movs	r6, #0
 800c51c:	42a6      	cmp	r6, r4
 800c51e:	d109      	bne.n	800c534 <__libc_init_array+0x24>
 800c520:	4d0b      	ldr	r5, [pc, #44]	@ (800c550 <__libc_init_array+0x40>)
 800c522:	4c0c      	ldr	r4, [pc, #48]	@ (800c554 <__libc_init_array+0x44>)
 800c524:	f003 f8ec 	bl	800f700 <_init>
 800c528:	1b64      	subs	r4, r4, r5
 800c52a:	10a4      	asrs	r4, r4, #2
 800c52c:	2600      	movs	r6, #0
 800c52e:	42a6      	cmp	r6, r4
 800c530:	d105      	bne.n	800c53e <__libc_init_array+0x2e>
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	f855 3b04 	ldr.w	r3, [r5], #4
 800c538:	4798      	blx	r3
 800c53a:	3601      	adds	r6, #1
 800c53c:	e7ee      	b.n	800c51c <__libc_init_array+0xc>
 800c53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c542:	4798      	blx	r3
 800c544:	3601      	adds	r6, #1
 800c546:	e7f2      	b.n	800c52e <__libc_init_array+0x1e>
 800c548:	0800fd40 	.word	0x0800fd40
 800c54c:	0800fd40 	.word	0x0800fd40
 800c550:	0800fd40 	.word	0x0800fd40
 800c554:	0800fd44 	.word	0x0800fd44

0800c558 <__retarget_lock_init_recursive>:
 800c558:	4770      	bx	lr

0800c55a <__retarget_lock_acquire_recursive>:
 800c55a:	4770      	bx	lr

0800c55c <__retarget_lock_release_recursive>:
 800c55c:	4770      	bx	lr

0800c55e <memcpy>:
 800c55e:	440a      	add	r2, r1
 800c560:	4291      	cmp	r1, r2
 800c562:	f100 33ff 	add.w	r3, r0, #4294967295
 800c566:	d100      	bne.n	800c56a <memcpy+0xc>
 800c568:	4770      	bx	lr
 800c56a:	b510      	push	{r4, lr}
 800c56c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c570:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c574:	4291      	cmp	r1, r2
 800c576:	d1f9      	bne.n	800c56c <memcpy+0xe>
 800c578:	bd10      	pop	{r4, pc}

0800c57a <quorem>:
 800c57a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57e:	6903      	ldr	r3, [r0, #16]
 800c580:	690c      	ldr	r4, [r1, #16]
 800c582:	42a3      	cmp	r3, r4
 800c584:	4607      	mov	r7, r0
 800c586:	db7e      	blt.n	800c686 <quorem+0x10c>
 800c588:	3c01      	subs	r4, #1
 800c58a:	f101 0814 	add.w	r8, r1, #20
 800c58e:	00a3      	lsls	r3, r4, #2
 800c590:	f100 0514 	add.w	r5, r0, #20
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5b0:	d32e      	bcc.n	800c610 <quorem+0x96>
 800c5b2:	f04f 0a00 	mov.w	sl, #0
 800c5b6:	46c4      	mov	ip, r8
 800c5b8:	46ae      	mov	lr, r5
 800c5ba:	46d3      	mov	fp, sl
 800c5bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5c0:	b298      	uxth	r0, r3
 800c5c2:	fb06 a000 	mla	r0, r6, r0, sl
 800c5c6:	0c02      	lsrs	r2, r0, #16
 800c5c8:	0c1b      	lsrs	r3, r3, #16
 800c5ca:	fb06 2303 	mla	r3, r6, r3, r2
 800c5ce:	f8de 2000 	ldr.w	r2, [lr]
 800c5d2:	b280      	uxth	r0, r0
 800c5d4:	b292      	uxth	r2, r2
 800c5d6:	1a12      	subs	r2, r2, r0
 800c5d8:	445a      	add	r2, fp
 800c5da:	f8de 0000 	ldr.w	r0, [lr]
 800c5de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c5e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c5ec:	b292      	uxth	r2, r2
 800c5ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5f2:	45e1      	cmp	r9, ip
 800c5f4:	f84e 2b04 	str.w	r2, [lr], #4
 800c5f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c5fc:	d2de      	bcs.n	800c5bc <quorem+0x42>
 800c5fe:	9b00      	ldr	r3, [sp, #0]
 800c600:	58eb      	ldr	r3, [r5, r3]
 800c602:	b92b      	cbnz	r3, 800c610 <quorem+0x96>
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	3b04      	subs	r3, #4
 800c608:	429d      	cmp	r5, r3
 800c60a:	461a      	mov	r2, r3
 800c60c:	d32f      	bcc.n	800c66e <quorem+0xf4>
 800c60e:	613c      	str	r4, [r7, #16]
 800c610:	4638      	mov	r0, r7
 800c612:	f001 f97b 	bl	800d90c <__mcmp>
 800c616:	2800      	cmp	r0, #0
 800c618:	db25      	blt.n	800c666 <quorem+0xec>
 800c61a:	4629      	mov	r1, r5
 800c61c:	2000      	movs	r0, #0
 800c61e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c622:	f8d1 c000 	ldr.w	ip, [r1]
 800c626:	fa1f fe82 	uxth.w	lr, r2
 800c62a:	fa1f f38c 	uxth.w	r3, ip
 800c62e:	eba3 030e 	sub.w	r3, r3, lr
 800c632:	4403      	add	r3, r0
 800c634:	0c12      	lsrs	r2, r2, #16
 800c636:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c63a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c63e:	b29b      	uxth	r3, r3
 800c640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c644:	45c1      	cmp	r9, r8
 800c646:	f841 3b04 	str.w	r3, [r1], #4
 800c64a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c64e:	d2e6      	bcs.n	800c61e <quorem+0xa4>
 800c650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c658:	b922      	cbnz	r2, 800c664 <quorem+0xea>
 800c65a:	3b04      	subs	r3, #4
 800c65c:	429d      	cmp	r5, r3
 800c65e:	461a      	mov	r2, r3
 800c660:	d30b      	bcc.n	800c67a <quorem+0x100>
 800c662:	613c      	str	r4, [r7, #16]
 800c664:	3601      	adds	r6, #1
 800c666:	4630      	mov	r0, r6
 800c668:	b003      	add	sp, #12
 800c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	6812      	ldr	r2, [r2, #0]
 800c670:	3b04      	subs	r3, #4
 800c672:	2a00      	cmp	r2, #0
 800c674:	d1cb      	bne.n	800c60e <quorem+0x94>
 800c676:	3c01      	subs	r4, #1
 800c678:	e7c6      	b.n	800c608 <quorem+0x8e>
 800c67a:	6812      	ldr	r2, [r2, #0]
 800c67c:	3b04      	subs	r3, #4
 800c67e:	2a00      	cmp	r2, #0
 800c680:	d1ef      	bne.n	800c662 <quorem+0xe8>
 800c682:	3c01      	subs	r4, #1
 800c684:	e7ea      	b.n	800c65c <quorem+0xe2>
 800c686:	2000      	movs	r0, #0
 800c688:	e7ee      	b.n	800c668 <quorem+0xee>
 800c68a:	0000      	movs	r0, r0
 800c68c:	0000      	movs	r0, r0
	...

0800c690 <_dtoa_r>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	69c7      	ldr	r7, [r0, #28]
 800c696:	b099      	sub	sp, #100	@ 0x64
 800c698:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c69c:	ec55 4b10 	vmov	r4, r5, d0
 800c6a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c6a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6a4:	4683      	mov	fp, r0
 800c6a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6aa:	b97f      	cbnz	r7, 800c6cc <_dtoa_r+0x3c>
 800c6ac:	2010      	movs	r0, #16
 800c6ae:	f000 fdfd 	bl	800d2ac <malloc>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c6b8:	b920      	cbnz	r0, 800c6c4 <_dtoa_r+0x34>
 800c6ba:	4ba7      	ldr	r3, [pc, #668]	@ (800c958 <_dtoa_r+0x2c8>)
 800c6bc:	21ef      	movs	r1, #239	@ 0xef
 800c6be:	48a7      	ldr	r0, [pc, #668]	@ (800c95c <_dtoa_r+0x2cc>)
 800c6c0:	f001 fc5a 	bl	800df78 <__assert_func>
 800c6c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c6c8:	6007      	str	r7, [r0, #0]
 800c6ca:	60c7      	str	r7, [r0, #12]
 800c6cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6d0:	6819      	ldr	r1, [r3, #0]
 800c6d2:	b159      	cbz	r1, 800c6ec <_dtoa_r+0x5c>
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	604a      	str	r2, [r1, #4]
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4093      	lsls	r3, r2
 800c6dc:	608b      	str	r3, [r1, #8]
 800c6de:	4658      	mov	r0, fp
 800c6e0:	f000 feda 	bl	800d498 <_Bfree>
 800c6e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	1e2b      	subs	r3, r5, #0
 800c6ee:	bfb9      	ittee	lt
 800c6f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c6f4:	9303      	strlt	r3, [sp, #12]
 800c6f6:	2300      	movge	r3, #0
 800c6f8:	6033      	strge	r3, [r6, #0]
 800c6fa:	9f03      	ldr	r7, [sp, #12]
 800c6fc:	4b98      	ldr	r3, [pc, #608]	@ (800c960 <_dtoa_r+0x2d0>)
 800c6fe:	bfbc      	itt	lt
 800c700:	2201      	movlt	r2, #1
 800c702:	6032      	strlt	r2, [r6, #0]
 800c704:	43bb      	bics	r3, r7
 800c706:	d112      	bne.n	800c72e <_dtoa_r+0x9e>
 800c708:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c70a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c714:	4323      	orrs	r3, r4
 800c716:	f000 854d 	beq.w	800d1b4 <_dtoa_r+0xb24>
 800c71a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c71c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c974 <_dtoa_r+0x2e4>
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 854f 	beq.w	800d1c4 <_dtoa_r+0xb34>
 800c726:	f10a 0303 	add.w	r3, sl, #3
 800c72a:	f000 bd49 	b.w	800d1c0 <_dtoa_r+0xb30>
 800c72e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c732:	2200      	movs	r2, #0
 800c734:	ec51 0b17 	vmov	r0, r1, d7
 800c738:	2300      	movs	r3, #0
 800c73a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c73e:	f7f4 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c742:	4680      	mov	r8, r0
 800c744:	b158      	cbz	r0, 800c75e <_dtoa_r+0xce>
 800c746:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c748:	2301      	movs	r3, #1
 800c74a:	6013      	str	r3, [r2, #0]
 800c74c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c74e:	b113      	cbz	r3, 800c756 <_dtoa_r+0xc6>
 800c750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c752:	4b84      	ldr	r3, [pc, #528]	@ (800c964 <_dtoa_r+0x2d4>)
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c978 <_dtoa_r+0x2e8>
 800c75a:	f000 bd33 	b.w	800d1c4 <_dtoa_r+0xb34>
 800c75e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c762:	aa16      	add	r2, sp, #88	@ 0x58
 800c764:	a917      	add	r1, sp, #92	@ 0x5c
 800c766:	4658      	mov	r0, fp
 800c768:	f001 f980 	bl	800da6c <__d2b>
 800c76c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c770:	4681      	mov	r9, r0
 800c772:	2e00      	cmp	r6, #0
 800c774:	d077      	beq.n	800c866 <_dtoa_r+0x1d6>
 800c776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c778:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c784:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c788:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c78c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c790:	4619      	mov	r1, r3
 800c792:	2200      	movs	r2, #0
 800c794:	4b74      	ldr	r3, [pc, #464]	@ (800c968 <_dtoa_r+0x2d8>)
 800c796:	f7f3 fd77 	bl	8000288 <__aeabi_dsub>
 800c79a:	a369      	add	r3, pc, #420	@ (adr r3, 800c940 <_dtoa_r+0x2b0>)
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	f7f3 ff2a 	bl	80005f8 <__aeabi_dmul>
 800c7a4:	a368      	add	r3, pc, #416	@ (adr r3, 800c948 <_dtoa_r+0x2b8>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	f7f3 fd6f 	bl	800028c <__adddf3>
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	460d      	mov	r5, r1
 800c7b4:	f7f3 feb6 	bl	8000524 <__aeabi_i2d>
 800c7b8:	a365      	add	r3, pc, #404	@ (adr r3, 800c950 <_dtoa_r+0x2c0>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	f7f3 ff1b 	bl	80005f8 <__aeabi_dmul>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7f3 fd5f 	bl	800028c <__adddf3>
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	f7f4 f9c1 	bl	8000b58 <__aeabi_d2iz>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	4607      	mov	r7, r0
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	f7f4 f97c 	bl	8000adc <__aeabi_dcmplt>
 800c7e4:	b140      	cbz	r0, 800c7f8 <_dtoa_r+0x168>
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	f7f3 fe9c 	bl	8000524 <__aeabi_i2d>
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	462b      	mov	r3, r5
 800c7f0:	f7f4 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7f4:	b900      	cbnz	r0, 800c7f8 <_dtoa_r+0x168>
 800c7f6:	3f01      	subs	r7, #1
 800c7f8:	2f16      	cmp	r7, #22
 800c7fa:	d851      	bhi.n	800c8a0 <_dtoa_r+0x210>
 800c7fc:	4b5b      	ldr	r3, [pc, #364]	@ (800c96c <_dtoa_r+0x2dc>)
 800c7fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c80a:	f7f4 f967 	bl	8000adc <__aeabi_dcmplt>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d048      	beq.n	800c8a4 <_dtoa_r+0x214>
 800c812:	3f01      	subs	r7, #1
 800c814:	2300      	movs	r3, #0
 800c816:	9312      	str	r3, [sp, #72]	@ 0x48
 800c818:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c81a:	1b9b      	subs	r3, r3, r6
 800c81c:	1e5a      	subs	r2, r3, #1
 800c81e:	bf44      	itt	mi
 800c820:	f1c3 0801 	rsbmi	r8, r3, #1
 800c824:	2300      	movmi	r3, #0
 800c826:	9208      	str	r2, [sp, #32]
 800c828:	bf54      	ite	pl
 800c82a:	f04f 0800 	movpl.w	r8, #0
 800c82e:	9308      	strmi	r3, [sp, #32]
 800c830:	2f00      	cmp	r7, #0
 800c832:	db39      	blt.n	800c8a8 <_dtoa_r+0x218>
 800c834:	9b08      	ldr	r3, [sp, #32]
 800c836:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c838:	443b      	add	r3, r7
 800c83a:	9308      	str	r3, [sp, #32]
 800c83c:	2300      	movs	r3, #0
 800c83e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c842:	2b09      	cmp	r3, #9
 800c844:	d864      	bhi.n	800c910 <_dtoa_r+0x280>
 800c846:	2b05      	cmp	r3, #5
 800c848:	bfc4      	itt	gt
 800c84a:	3b04      	subgt	r3, #4
 800c84c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c850:	f1a3 0302 	sub.w	r3, r3, #2
 800c854:	bfcc      	ite	gt
 800c856:	2400      	movgt	r4, #0
 800c858:	2401      	movle	r4, #1
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	d863      	bhi.n	800c926 <_dtoa_r+0x296>
 800c85e:	e8df f003 	tbb	[pc, r3]
 800c862:	372a      	.short	0x372a
 800c864:	5535      	.short	0x5535
 800c866:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c86a:	441e      	add	r6, r3
 800c86c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c870:	2b20      	cmp	r3, #32
 800c872:	bfc1      	itttt	gt
 800c874:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c878:	409f      	lslgt	r7, r3
 800c87a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c87e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c882:	bfd6      	itet	le
 800c884:	f1c3 0320 	rsble	r3, r3, #32
 800c888:	ea47 0003 	orrgt.w	r0, r7, r3
 800c88c:	fa04 f003 	lslle.w	r0, r4, r3
 800c890:	f7f3 fe38 	bl	8000504 <__aeabi_ui2d>
 800c894:	2201      	movs	r2, #1
 800c896:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c89a:	3e01      	subs	r6, #1
 800c89c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c89e:	e777      	b.n	800c790 <_dtoa_r+0x100>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e7b8      	b.n	800c816 <_dtoa_r+0x186>
 800c8a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c8a6:	e7b7      	b.n	800c818 <_dtoa_r+0x188>
 800c8a8:	427b      	negs	r3, r7
 800c8aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	eba8 0807 	sub.w	r8, r8, r7
 800c8b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8b4:	e7c4      	b.n	800c840 <_dtoa_r+0x1b0>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dc35      	bgt.n	800c92c <_dtoa_r+0x29c>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	9307      	str	r3, [sp, #28]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c8ca:	e00b      	b.n	800c8e4 <_dtoa_r+0x254>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e7f3      	b.n	800c8b8 <_dtoa_r+0x228>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8d6:	18fb      	adds	r3, r7, r3
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	9307      	str	r3, [sp, #28]
 800c8e0:	bfb8      	it	lt
 800c8e2:	2301      	movlt	r3, #1
 800c8e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	2204      	movs	r2, #4
 800c8ec:	f102 0514 	add.w	r5, r2, #20
 800c8f0:	429d      	cmp	r5, r3
 800c8f2:	d91f      	bls.n	800c934 <_dtoa_r+0x2a4>
 800c8f4:	6041      	str	r1, [r0, #4]
 800c8f6:	4658      	mov	r0, fp
 800c8f8:	f000 fd8e 	bl	800d418 <_Balloc>
 800c8fc:	4682      	mov	sl, r0
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d13c      	bne.n	800c97c <_dtoa_r+0x2ec>
 800c902:	4b1b      	ldr	r3, [pc, #108]	@ (800c970 <_dtoa_r+0x2e0>)
 800c904:	4602      	mov	r2, r0
 800c906:	f240 11af 	movw	r1, #431	@ 0x1af
 800c90a:	e6d8      	b.n	800c6be <_dtoa_r+0x2e>
 800c90c:	2301      	movs	r3, #1
 800c90e:	e7e0      	b.n	800c8d2 <_dtoa_r+0x242>
 800c910:	2401      	movs	r4, #1
 800c912:	2300      	movs	r3, #0
 800c914:	9309      	str	r3, [sp, #36]	@ 0x24
 800c916:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c918:	f04f 33ff 	mov.w	r3, #4294967295
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	9307      	str	r3, [sp, #28]
 800c920:	2200      	movs	r2, #0
 800c922:	2312      	movs	r3, #18
 800c924:	e7d0      	b.n	800c8c8 <_dtoa_r+0x238>
 800c926:	2301      	movs	r3, #1
 800c928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c92a:	e7f5      	b.n	800c918 <_dtoa_r+0x288>
 800c92c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	e7d7      	b.n	800c8e4 <_dtoa_r+0x254>
 800c934:	3101      	adds	r1, #1
 800c936:	0052      	lsls	r2, r2, #1
 800c938:	e7d8      	b.n	800c8ec <_dtoa_r+0x25c>
 800c93a:	bf00      	nop
 800c93c:	f3af 8000 	nop.w
 800c940:	636f4361 	.word	0x636f4361
 800c944:	3fd287a7 	.word	0x3fd287a7
 800c948:	8b60c8b3 	.word	0x8b60c8b3
 800c94c:	3fc68a28 	.word	0x3fc68a28
 800c950:	509f79fb 	.word	0x509f79fb
 800c954:	3fd34413 	.word	0x3fd34413
 800c958:	0800f82d 	.word	0x0800f82d
 800c95c:	0800f844 	.word	0x0800f844
 800c960:	7ff00000 	.word	0x7ff00000
 800c964:	0800f7fd 	.word	0x0800f7fd
 800c968:	3ff80000 	.word	0x3ff80000
 800c96c:	0800f940 	.word	0x0800f940
 800c970:	0800f89c 	.word	0x0800f89c
 800c974:	0800f829 	.word	0x0800f829
 800c978:	0800f7fc 	.word	0x0800f7fc
 800c97c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c980:	6018      	str	r0, [r3, #0]
 800c982:	9b07      	ldr	r3, [sp, #28]
 800c984:	2b0e      	cmp	r3, #14
 800c986:	f200 80a4 	bhi.w	800cad2 <_dtoa_r+0x442>
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	f000 80a1 	beq.w	800cad2 <_dtoa_r+0x442>
 800c990:	2f00      	cmp	r7, #0
 800c992:	dd33      	ble.n	800c9fc <_dtoa_r+0x36c>
 800c994:	4bad      	ldr	r3, [pc, #692]	@ (800cc4c <_dtoa_r+0x5bc>)
 800c996:	f007 020f 	and.w	r2, r7, #15
 800c99a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c99e:	ed93 7b00 	vldr	d7, [r3]
 800c9a2:	05f8      	lsls	r0, r7, #23
 800c9a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c9a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9ac:	d516      	bpl.n	800c9dc <_dtoa_r+0x34c>
 800c9ae:	4ba8      	ldr	r3, [pc, #672]	@ (800cc50 <_dtoa_r+0x5c0>)
 800c9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9b8:	f7f3 ff48 	bl	800084c <__aeabi_ddiv>
 800c9bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9c0:	f004 040f 	and.w	r4, r4, #15
 800c9c4:	2603      	movs	r6, #3
 800c9c6:	4da2      	ldr	r5, [pc, #648]	@ (800cc50 <_dtoa_r+0x5c0>)
 800c9c8:	b954      	cbnz	r4, 800c9e0 <_dtoa_r+0x350>
 800c9ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9d2:	f7f3 ff3b 	bl	800084c <__aeabi_ddiv>
 800c9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9da:	e028      	b.n	800ca2e <_dtoa_r+0x39e>
 800c9dc:	2602      	movs	r6, #2
 800c9de:	e7f2      	b.n	800c9c6 <_dtoa_r+0x336>
 800c9e0:	07e1      	lsls	r1, r4, #31
 800c9e2:	d508      	bpl.n	800c9f6 <_dtoa_r+0x366>
 800c9e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9ec:	f7f3 fe04 	bl	80005f8 <__aeabi_dmul>
 800c9f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9f4:	3601      	adds	r6, #1
 800c9f6:	1064      	asrs	r4, r4, #1
 800c9f8:	3508      	adds	r5, #8
 800c9fa:	e7e5      	b.n	800c9c8 <_dtoa_r+0x338>
 800c9fc:	f000 80d2 	beq.w	800cba4 <_dtoa_r+0x514>
 800ca00:	427c      	negs	r4, r7
 800ca02:	4b92      	ldr	r3, [pc, #584]	@ (800cc4c <_dtoa_r+0x5bc>)
 800ca04:	4d92      	ldr	r5, [pc, #584]	@ (800cc50 <_dtoa_r+0x5c0>)
 800ca06:	f004 020f 	and.w	r2, r4, #15
 800ca0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca16:	f7f3 fdef 	bl	80005f8 <__aeabi_dmul>
 800ca1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca1e:	1124      	asrs	r4, r4, #4
 800ca20:	2300      	movs	r3, #0
 800ca22:	2602      	movs	r6, #2
 800ca24:	2c00      	cmp	r4, #0
 800ca26:	f040 80b2 	bne.w	800cb8e <_dtoa_r+0x4fe>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1d3      	bne.n	800c9d6 <_dtoa_r+0x346>
 800ca2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ca30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 80b7 	beq.w	800cba8 <_dtoa_r+0x518>
 800ca3a:	4b86      	ldr	r3, [pc, #536]	@ (800cc54 <_dtoa_r+0x5c4>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	4620      	mov	r0, r4
 800ca40:	4629      	mov	r1, r5
 800ca42:	f7f4 f84b 	bl	8000adc <__aeabi_dcmplt>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	f000 80ae 	beq.w	800cba8 <_dtoa_r+0x518>
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 80aa 	beq.w	800cba8 <_dtoa_r+0x518>
 800ca54:	9b00      	ldr	r3, [sp, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	dd37      	ble.n	800caca <_dtoa_r+0x43a>
 800ca5a:	1e7b      	subs	r3, r7, #1
 800ca5c:	9304      	str	r3, [sp, #16]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	4b7d      	ldr	r3, [pc, #500]	@ (800cc58 <_dtoa_r+0x5c8>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	4629      	mov	r1, r5
 800ca66:	f7f3 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ca6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca6e:	9c00      	ldr	r4, [sp, #0]
 800ca70:	3601      	adds	r6, #1
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7f3 fd56 	bl	8000524 <__aeabi_i2d>
 800ca78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca7c:	f7f3 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ca80:	4b76      	ldr	r3, [pc, #472]	@ (800cc5c <_dtoa_r+0x5cc>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	f7f3 fc02 	bl	800028c <__adddf3>
 800ca88:	4605      	mov	r5, r0
 800ca8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ca8e:	2c00      	cmp	r4, #0
 800ca90:	f040 808d 	bne.w	800cbae <_dtoa_r+0x51e>
 800ca94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca98:	4b71      	ldr	r3, [pc, #452]	@ (800cc60 <_dtoa_r+0x5d0>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f7f3 fbf4 	bl	8000288 <__aeabi_dsub>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800caa8:	462a      	mov	r2, r5
 800caaa:	4633      	mov	r3, r6
 800caac:	f7f4 f834 	bl	8000b18 <__aeabi_dcmpgt>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	f040 828b 	bne.w	800cfcc <_dtoa_r+0x93c>
 800cab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caba:	462a      	mov	r2, r5
 800cabc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cac0:	f7f4 f80c 	bl	8000adc <__aeabi_dcmplt>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	f040 8128 	bne.w	800cd1a <_dtoa_r+0x68a>
 800caca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cace:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cad2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f2c0 815a 	blt.w	800cd8e <_dtoa_r+0x6fe>
 800cada:	2f0e      	cmp	r7, #14
 800cadc:	f300 8157 	bgt.w	800cd8e <_dtoa_r+0x6fe>
 800cae0:	4b5a      	ldr	r3, [pc, #360]	@ (800cc4c <_dtoa_r+0x5bc>)
 800cae2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cae6:	ed93 7b00 	vldr	d7, [r3]
 800caea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caec:	2b00      	cmp	r3, #0
 800caee:	ed8d 7b00 	vstr	d7, [sp]
 800caf2:	da03      	bge.n	800cafc <_dtoa_r+0x46c>
 800caf4:	9b07      	ldr	r3, [sp, #28]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f340 8101 	ble.w	800ccfe <_dtoa_r+0x66e>
 800cafc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb00:	4656      	mov	r6, sl
 800cb02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb06:	4620      	mov	r0, r4
 800cb08:	4629      	mov	r1, r5
 800cb0a:	f7f3 fe9f 	bl	800084c <__aeabi_ddiv>
 800cb0e:	f7f4 f823 	bl	8000b58 <__aeabi_d2iz>
 800cb12:	4680      	mov	r8, r0
 800cb14:	f7f3 fd06 	bl	8000524 <__aeabi_i2d>
 800cb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb1c:	f7f3 fd6c 	bl	80005f8 <__aeabi_dmul>
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	4620      	mov	r0, r4
 800cb26:	4629      	mov	r1, r5
 800cb28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb2c:	f7f3 fbac 	bl	8000288 <__aeabi_dsub>
 800cb30:	f806 4b01 	strb.w	r4, [r6], #1
 800cb34:	9d07      	ldr	r5, [sp, #28]
 800cb36:	eba6 040a 	sub.w	r4, r6, sl
 800cb3a:	42a5      	cmp	r5, r4
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	f040 8117 	bne.w	800cd72 <_dtoa_r+0x6e2>
 800cb44:	f7f3 fba2 	bl	800028c <__adddf3>
 800cb48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	460d      	mov	r5, r1
 800cb50:	f7f3 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	f040 80f9 	bne.w	800cd4c <_dtoa_r+0x6bc>
 800cb5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb5e:	4620      	mov	r0, r4
 800cb60:	4629      	mov	r1, r5
 800cb62:	f7f3 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb66:	b118      	cbz	r0, 800cb70 <_dtoa_r+0x4e0>
 800cb68:	f018 0f01 	tst.w	r8, #1
 800cb6c:	f040 80ee 	bne.w	800cd4c <_dtoa_r+0x6bc>
 800cb70:	4649      	mov	r1, r9
 800cb72:	4658      	mov	r0, fp
 800cb74:	f000 fc90 	bl	800d498 <_Bfree>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	7033      	strb	r3, [r6, #0]
 800cb7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb7e:	3701      	adds	r7, #1
 800cb80:	601f      	str	r7, [r3, #0]
 800cb82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 831d 	beq.w	800d1c4 <_dtoa_r+0xb34>
 800cb8a:	601e      	str	r6, [r3, #0]
 800cb8c:	e31a      	b.n	800d1c4 <_dtoa_r+0xb34>
 800cb8e:	07e2      	lsls	r2, r4, #31
 800cb90:	d505      	bpl.n	800cb9e <_dtoa_r+0x50e>
 800cb92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb96:	f7f3 fd2f 	bl	80005f8 <__aeabi_dmul>
 800cb9a:	3601      	adds	r6, #1
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	1064      	asrs	r4, r4, #1
 800cba0:	3508      	adds	r5, #8
 800cba2:	e73f      	b.n	800ca24 <_dtoa_r+0x394>
 800cba4:	2602      	movs	r6, #2
 800cba6:	e742      	b.n	800ca2e <_dtoa_r+0x39e>
 800cba8:	9c07      	ldr	r4, [sp, #28]
 800cbaa:	9704      	str	r7, [sp, #16]
 800cbac:	e761      	b.n	800ca72 <_dtoa_r+0x3e2>
 800cbae:	4b27      	ldr	r3, [pc, #156]	@ (800cc4c <_dtoa_r+0x5bc>)
 800cbb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cbb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbba:	4454      	add	r4, sl
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	d053      	beq.n	800cc68 <_dtoa_r+0x5d8>
 800cbc0:	4928      	ldr	r1, [pc, #160]	@ (800cc64 <_dtoa_r+0x5d4>)
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	f7f3 fe42 	bl	800084c <__aeabi_ddiv>
 800cbc8:	4633      	mov	r3, r6
 800cbca:	462a      	mov	r2, r5
 800cbcc:	f7f3 fb5c 	bl	8000288 <__aeabi_dsub>
 800cbd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbd4:	4656      	mov	r6, sl
 800cbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbda:	f7f3 ffbd 	bl	8000b58 <__aeabi_d2iz>
 800cbde:	4605      	mov	r5, r0
 800cbe0:	f7f3 fca0 	bl	8000524 <__aeabi_i2d>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbec:	f7f3 fb4c 	bl	8000288 <__aeabi_dsub>
 800cbf0:	3530      	adds	r5, #48	@ 0x30
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbfa:	f806 5b01 	strb.w	r5, [r6], #1
 800cbfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc02:	f7f3 ff6b 	bl	8000adc <__aeabi_dcmplt>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d171      	bne.n	800ccee <_dtoa_r+0x65e>
 800cc0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc0e:	4911      	ldr	r1, [pc, #68]	@ (800cc54 <_dtoa_r+0x5c4>)
 800cc10:	2000      	movs	r0, #0
 800cc12:	f7f3 fb39 	bl	8000288 <__aeabi_dsub>
 800cc16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc1a:	f7f3 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f040 8095 	bne.w	800cd4e <_dtoa_r+0x6be>
 800cc24:	42a6      	cmp	r6, r4
 800cc26:	f43f af50 	beq.w	800caca <_dtoa_r+0x43a>
 800cc2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc2e:	4b0a      	ldr	r3, [pc, #40]	@ (800cc58 <_dtoa_r+0x5c8>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	f7f3 fce1 	bl	80005f8 <__aeabi_dmul>
 800cc36:	4b08      	ldr	r3, [pc, #32]	@ (800cc58 <_dtoa_r+0x5c8>)
 800cc38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc42:	f7f3 fcd9 	bl	80005f8 <__aeabi_dmul>
 800cc46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc4a:	e7c4      	b.n	800cbd6 <_dtoa_r+0x546>
 800cc4c:	0800f940 	.word	0x0800f940
 800cc50:	0800f918 	.word	0x0800f918
 800cc54:	3ff00000 	.word	0x3ff00000
 800cc58:	40240000 	.word	0x40240000
 800cc5c:	401c0000 	.word	0x401c0000
 800cc60:	40140000 	.word	0x40140000
 800cc64:	3fe00000 	.word	0x3fe00000
 800cc68:	4631      	mov	r1, r6
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f7f3 fcc4 	bl	80005f8 <__aeabi_dmul>
 800cc70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cc74:	9415      	str	r4, [sp, #84]	@ 0x54
 800cc76:	4656      	mov	r6, sl
 800cc78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc7c:	f7f3 ff6c 	bl	8000b58 <__aeabi_d2iz>
 800cc80:	4605      	mov	r5, r0
 800cc82:	f7f3 fc4f 	bl	8000524 <__aeabi_i2d>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc8e:	f7f3 fafb 	bl	8000288 <__aeabi_dsub>
 800cc92:	3530      	adds	r5, #48	@ 0x30
 800cc94:	f806 5b01 	strb.w	r5, [r6], #1
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	42a6      	cmp	r6, r4
 800cc9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cca2:	f04f 0200 	mov.w	r2, #0
 800cca6:	d124      	bne.n	800ccf2 <_dtoa_r+0x662>
 800cca8:	4bac      	ldr	r3, [pc, #688]	@ (800cf5c <_dtoa_r+0x8cc>)
 800ccaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ccae:	f7f3 faed 	bl	800028c <__adddf3>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccba:	f7f3 ff2d 	bl	8000b18 <__aeabi_dcmpgt>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d145      	bne.n	800cd4e <_dtoa_r+0x6be>
 800ccc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ccc6:	49a5      	ldr	r1, [pc, #660]	@ (800cf5c <_dtoa_r+0x8cc>)
 800ccc8:	2000      	movs	r0, #0
 800ccca:	f7f3 fadd 	bl	8000288 <__aeabi_dsub>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccd6:	f7f3 ff01 	bl	8000adc <__aeabi_dcmplt>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f43f aef5 	beq.w	800caca <_dtoa_r+0x43a>
 800cce0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cce2:	1e73      	subs	r3, r6, #1
 800cce4:	9315      	str	r3, [sp, #84]	@ 0x54
 800cce6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccea:	2b30      	cmp	r3, #48	@ 0x30
 800ccec:	d0f8      	beq.n	800cce0 <_dtoa_r+0x650>
 800ccee:	9f04      	ldr	r7, [sp, #16]
 800ccf0:	e73e      	b.n	800cb70 <_dtoa_r+0x4e0>
 800ccf2:	4b9b      	ldr	r3, [pc, #620]	@ (800cf60 <_dtoa_r+0x8d0>)
 800ccf4:	f7f3 fc80 	bl	80005f8 <__aeabi_dmul>
 800ccf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccfc:	e7bc      	b.n	800cc78 <_dtoa_r+0x5e8>
 800ccfe:	d10c      	bne.n	800cd1a <_dtoa_r+0x68a>
 800cd00:	4b98      	ldr	r3, [pc, #608]	@ (800cf64 <_dtoa_r+0x8d4>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd08:	f7f3 fc76 	bl	80005f8 <__aeabi_dmul>
 800cd0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd10:	f7f3 fef8 	bl	8000b04 <__aeabi_dcmpge>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	f000 8157 	beq.w	800cfc8 <_dtoa_r+0x938>
 800cd1a:	2400      	movs	r4, #0
 800cd1c:	4625      	mov	r5, r4
 800cd1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd20:	43db      	mvns	r3, r3
 800cd22:	9304      	str	r3, [sp, #16]
 800cd24:	4656      	mov	r6, sl
 800cd26:	2700      	movs	r7, #0
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4658      	mov	r0, fp
 800cd2c:	f000 fbb4 	bl	800d498 <_Bfree>
 800cd30:	2d00      	cmp	r5, #0
 800cd32:	d0dc      	beq.n	800ccee <_dtoa_r+0x65e>
 800cd34:	b12f      	cbz	r7, 800cd42 <_dtoa_r+0x6b2>
 800cd36:	42af      	cmp	r7, r5
 800cd38:	d003      	beq.n	800cd42 <_dtoa_r+0x6b2>
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	4658      	mov	r0, fp
 800cd3e:	f000 fbab 	bl	800d498 <_Bfree>
 800cd42:	4629      	mov	r1, r5
 800cd44:	4658      	mov	r0, fp
 800cd46:	f000 fba7 	bl	800d498 <_Bfree>
 800cd4a:	e7d0      	b.n	800ccee <_dtoa_r+0x65e>
 800cd4c:	9704      	str	r7, [sp, #16]
 800cd4e:	4633      	mov	r3, r6
 800cd50:	461e      	mov	r6, r3
 800cd52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd56:	2a39      	cmp	r2, #57	@ 0x39
 800cd58:	d107      	bne.n	800cd6a <_dtoa_r+0x6da>
 800cd5a:	459a      	cmp	sl, r3
 800cd5c:	d1f8      	bne.n	800cd50 <_dtoa_r+0x6c0>
 800cd5e:	9a04      	ldr	r2, [sp, #16]
 800cd60:	3201      	adds	r2, #1
 800cd62:	9204      	str	r2, [sp, #16]
 800cd64:	2230      	movs	r2, #48	@ 0x30
 800cd66:	f88a 2000 	strb.w	r2, [sl]
 800cd6a:	781a      	ldrb	r2, [r3, #0]
 800cd6c:	3201      	adds	r2, #1
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	e7bd      	b.n	800ccee <_dtoa_r+0x65e>
 800cd72:	4b7b      	ldr	r3, [pc, #492]	@ (800cf60 <_dtoa_r+0x8d0>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	f7f3 fc3f 	bl	80005f8 <__aeabi_dmul>
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	4604      	mov	r4, r0
 800cd80:	460d      	mov	r5, r1
 800cd82:	f7f3 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f43f aebb 	beq.w	800cb02 <_dtoa_r+0x472>
 800cd8c:	e6f0      	b.n	800cb70 <_dtoa_r+0x4e0>
 800cd8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd90:	2a00      	cmp	r2, #0
 800cd92:	f000 80db 	beq.w	800cf4c <_dtoa_r+0x8bc>
 800cd96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd98:	2a01      	cmp	r2, #1
 800cd9a:	f300 80bf 	bgt.w	800cf1c <_dtoa_r+0x88c>
 800cd9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cda0:	2a00      	cmp	r2, #0
 800cda2:	f000 80b7 	beq.w	800cf14 <_dtoa_r+0x884>
 800cda6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cdaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cdac:	4646      	mov	r6, r8
 800cdae:	9a08      	ldr	r2, [sp, #32]
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	441a      	add	r2, r3
 800cdb4:	4658      	mov	r0, fp
 800cdb6:	4498      	add	r8, r3
 800cdb8:	9208      	str	r2, [sp, #32]
 800cdba:	f000 fc21 	bl	800d600 <__i2b>
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	b15e      	cbz	r6, 800cdda <_dtoa_r+0x74a>
 800cdc2:	9b08      	ldr	r3, [sp, #32]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	dd08      	ble.n	800cdda <_dtoa_r+0x74a>
 800cdc8:	42b3      	cmp	r3, r6
 800cdca:	9a08      	ldr	r2, [sp, #32]
 800cdcc:	bfa8      	it	ge
 800cdce:	4633      	movge	r3, r6
 800cdd0:	eba8 0803 	sub.w	r8, r8, r3
 800cdd4:	1af6      	subs	r6, r6, r3
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	9308      	str	r3, [sp, #32]
 800cdda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cddc:	b1f3      	cbz	r3, 800ce1c <_dtoa_r+0x78c>
 800cdde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 80b7 	beq.w	800cf54 <_dtoa_r+0x8c4>
 800cde6:	b18c      	cbz	r4, 800ce0c <_dtoa_r+0x77c>
 800cde8:	4629      	mov	r1, r5
 800cdea:	4622      	mov	r2, r4
 800cdec:	4658      	mov	r0, fp
 800cdee:	f000 fcc7 	bl	800d780 <__pow5mult>
 800cdf2:	464a      	mov	r2, r9
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	4658      	mov	r0, fp
 800cdfa:	f000 fc17 	bl	800d62c <__multiply>
 800cdfe:	4649      	mov	r1, r9
 800ce00:	9004      	str	r0, [sp, #16]
 800ce02:	4658      	mov	r0, fp
 800ce04:	f000 fb48 	bl	800d498 <_Bfree>
 800ce08:	9b04      	ldr	r3, [sp, #16]
 800ce0a:	4699      	mov	r9, r3
 800ce0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce0e:	1b1a      	subs	r2, r3, r4
 800ce10:	d004      	beq.n	800ce1c <_dtoa_r+0x78c>
 800ce12:	4649      	mov	r1, r9
 800ce14:	4658      	mov	r0, fp
 800ce16:	f000 fcb3 	bl	800d780 <__pow5mult>
 800ce1a:	4681      	mov	r9, r0
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	4658      	mov	r0, fp
 800ce20:	f000 fbee 	bl	800d600 <__i2b>
 800ce24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce26:	4604      	mov	r4, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 81cf 	beq.w	800d1cc <_dtoa_r+0xb3c>
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4601      	mov	r1, r0
 800ce32:	4658      	mov	r0, fp
 800ce34:	f000 fca4 	bl	800d780 <__pow5mult>
 800ce38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	f300 8095 	bgt.w	800cf6c <_dtoa_r+0x8dc>
 800ce42:	9b02      	ldr	r3, [sp, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f040 8087 	bne.w	800cf58 <_dtoa_r+0x8c8>
 800ce4a:	9b03      	ldr	r3, [sp, #12]
 800ce4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f040 8089 	bne.w	800cf68 <_dtoa_r+0x8d8>
 800ce56:	9b03      	ldr	r3, [sp, #12]
 800ce58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce5c:	0d1b      	lsrs	r3, r3, #20
 800ce5e:	051b      	lsls	r3, r3, #20
 800ce60:	b12b      	cbz	r3, 800ce6e <_dtoa_r+0x7de>
 800ce62:	9b08      	ldr	r3, [sp, #32]
 800ce64:	3301      	adds	r3, #1
 800ce66:	9308      	str	r3, [sp, #32]
 800ce68:	f108 0801 	add.w	r8, r8, #1
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f000 81b0 	beq.w	800d1d8 <_dtoa_r+0xb48>
 800ce78:	6923      	ldr	r3, [r4, #16]
 800ce7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ce7e:	6918      	ldr	r0, [r3, #16]
 800ce80:	f000 fb72 	bl	800d568 <__hi0bits>
 800ce84:	f1c0 0020 	rsb	r0, r0, #32
 800ce88:	9b08      	ldr	r3, [sp, #32]
 800ce8a:	4418      	add	r0, r3
 800ce8c:	f010 001f 	ands.w	r0, r0, #31
 800ce90:	d077      	beq.n	800cf82 <_dtoa_r+0x8f2>
 800ce92:	f1c0 0320 	rsb	r3, r0, #32
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	dd6b      	ble.n	800cf72 <_dtoa_r+0x8e2>
 800ce9a:	9b08      	ldr	r3, [sp, #32]
 800ce9c:	f1c0 001c 	rsb	r0, r0, #28
 800cea0:	4403      	add	r3, r0
 800cea2:	4480      	add	r8, r0
 800cea4:	4406      	add	r6, r0
 800cea6:	9308      	str	r3, [sp, #32]
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	dd05      	ble.n	800ceba <_dtoa_r+0x82a>
 800ceae:	4649      	mov	r1, r9
 800ceb0:	4642      	mov	r2, r8
 800ceb2:	4658      	mov	r0, fp
 800ceb4:	f000 fcbe 	bl	800d834 <__lshift>
 800ceb8:	4681      	mov	r9, r0
 800ceba:	9b08      	ldr	r3, [sp, #32]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	dd05      	ble.n	800cecc <_dtoa_r+0x83c>
 800cec0:	4621      	mov	r1, r4
 800cec2:	461a      	mov	r2, r3
 800cec4:	4658      	mov	r0, fp
 800cec6:	f000 fcb5 	bl	800d834 <__lshift>
 800ceca:	4604      	mov	r4, r0
 800cecc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d059      	beq.n	800cf86 <_dtoa_r+0x8f6>
 800ced2:	4621      	mov	r1, r4
 800ced4:	4648      	mov	r0, r9
 800ced6:	f000 fd19 	bl	800d90c <__mcmp>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	da53      	bge.n	800cf86 <_dtoa_r+0x8f6>
 800cede:	1e7b      	subs	r3, r7, #1
 800cee0:	9304      	str	r3, [sp, #16]
 800cee2:	4649      	mov	r1, r9
 800cee4:	2300      	movs	r3, #0
 800cee6:	220a      	movs	r2, #10
 800cee8:	4658      	mov	r0, fp
 800ceea:	f000 faf7 	bl	800d4dc <__multadd>
 800ceee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cef0:	4681      	mov	r9, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 8172 	beq.w	800d1dc <_dtoa_r+0xb4c>
 800cef8:	2300      	movs	r3, #0
 800cefa:	4629      	mov	r1, r5
 800cefc:	220a      	movs	r2, #10
 800cefe:	4658      	mov	r0, fp
 800cf00:	f000 faec 	bl	800d4dc <__multadd>
 800cf04:	9b00      	ldr	r3, [sp, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	4605      	mov	r5, r0
 800cf0a:	dc67      	bgt.n	800cfdc <_dtoa_r+0x94c>
 800cf0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	dc41      	bgt.n	800cf96 <_dtoa_r+0x906>
 800cf12:	e063      	b.n	800cfdc <_dtoa_r+0x94c>
 800cf14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf1a:	e746      	b.n	800cdaa <_dtoa_r+0x71a>
 800cf1c:	9b07      	ldr	r3, [sp, #28]
 800cf1e:	1e5c      	subs	r4, r3, #1
 800cf20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf22:	42a3      	cmp	r3, r4
 800cf24:	bfbf      	itttt	lt
 800cf26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cf28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cf2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cf2c:	1ae3      	sublt	r3, r4, r3
 800cf2e:	bfb4      	ite	lt
 800cf30:	18d2      	addlt	r2, r2, r3
 800cf32:	1b1c      	subge	r4, r3, r4
 800cf34:	9b07      	ldr	r3, [sp, #28]
 800cf36:	bfbc      	itt	lt
 800cf38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cf3a:	2400      	movlt	r4, #0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bfb5      	itete	lt
 800cf40:	eba8 0603 	sublt.w	r6, r8, r3
 800cf44:	9b07      	ldrge	r3, [sp, #28]
 800cf46:	2300      	movlt	r3, #0
 800cf48:	4646      	movge	r6, r8
 800cf4a:	e730      	b.n	800cdae <_dtoa_r+0x71e>
 800cf4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cf4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cf50:	4646      	mov	r6, r8
 800cf52:	e735      	b.n	800cdc0 <_dtoa_r+0x730>
 800cf54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf56:	e75c      	b.n	800ce12 <_dtoa_r+0x782>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	e788      	b.n	800ce6e <_dtoa_r+0x7de>
 800cf5c:	3fe00000 	.word	0x3fe00000
 800cf60:	40240000 	.word	0x40240000
 800cf64:	40140000 	.word	0x40140000
 800cf68:	9b02      	ldr	r3, [sp, #8]
 800cf6a:	e780      	b.n	800ce6e <_dtoa_r+0x7de>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf70:	e782      	b.n	800ce78 <_dtoa_r+0x7e8>
 800cf72:	d099      	beq.n	800cea8 <_dtoa_r+0x818>
 800cf74:	9a08      	ldr	r2, [sp, #32]
 800cf76:	331c      	adds	r3, #28
 800cf78:	441a      	add	r2, r3
 800cf7a:	4498      	add	r8, r3
 800cf7c:	441e      	add	r6, r3
 800cf7e:	9208      	str	r2, [sp, #32]
 800cf80:	e792      	b.n	800cea8 <_dtoa_r+0x818>
 800cf82:	4603      	mov	r3, r0
 800cf84:	e7f6      	b.n	800cf74 <_dtoa_r+0x8e4>
 800cf86:	9b07      	ldr	r3, [sp, #28]
 800cf88:	9704      	str	r7, [sp, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	dc20      	bgt.n	800cfd0 <_dtoa_r+0x940>
 800cf8e:	9300      	str	r3, [sp, #0]
 800cf90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	dd1e      	ble.n	800cfd4 <_dtoa_r+0x944>
 800cf96:	9b00      	ldr	r3, [sp, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f47f aec0 	bne.w	800cd1e <_dtoa_r+0x68e>
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	2205      	movs	r2, #5
 800cfa2:	4658      	mov	r0, fp
 800cfa4:	f000 fa9a 	bl	800d4dc <__multadd>
 800cfa8:	4601      	mov	r1, r0
 800cfaa:	4604      	mov	r4, r0
 800cfac:	4648      	mov	r0, r9
 800cfae:	f000 fcad 	bl	800d90c <__mcmp>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	f77f aeb3 	ble.w	800cd1e <_dtoa_r+0x68e>
 800cfb8:	4656      	mov	r6, sl
 800cfba:	2331      	movs	r3, #49	@ 0x31
 800cfbc:	f806 3b01 	strb.w	r3, [r6], #1
 800cfc0:	9b04      	ldr	r3, [sp, #16]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	9304      	str	r3, [sp, #16]
 800cfc6:	e6ae      	b.n	800cd26 <_dtoa_r+0x696>
 800cfc8:	9c07      	ldr	r4, [sp, #28]
 800cfca:	9704      	str	r7, [sp, #16]
 800cfcc:	4625      	mov	r5, r4
 800cfce:	e7f3      	b.n	800cfb8 <_dtoa_r+0x928>
 800cfd0:	9b07      	ldr	r3, [sp, #28]
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 8104 	beq.w	800d1e4 <_dtoa_r+0xb54>
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	dd05      	ble.n	800cfec <_dtoa_r+0x95c>
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	4632      	mov	r2, r6
 800cfe4:	4658      	mov	r0, fp
 800cfe6:	f000 fc25 	bl	800d834 <__lshift>
 800cfea:	4605      	mov	r5, r0
 800cfec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d05a      	beq.n	800d0a8 <_dtoa_r+0xa18>
 800cff2:	6869      	ldr	r1, [r5, #4]
 800cff4:	4658      	mov	r0, fp
 800cff6:	f000 fa0f 	bl	800d418 <_Balloc>
 800cffa:	4606      	mov	r6, r0
 800cffc:	b928      	cbnz	r0, 800d00a <_dtoa_r+0x97a>
 800cffe:	4b84      	ldr	r3, [pc, #528]	@ (800d210 <_dtoa_r+0xb80>)
 800d000:	4602      	mov	r2, r0
 800d002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d006:	f7ff bb5a 	b.w	800c6be <_dtoa_r+0x2e>
 800d00a:	692a      	ldr	r2, [r5, #16]
 800d00c:	3202      	adds	r2, #2
 800d00e:	0092      	lsls	r2, r2, #2
 800d010:	f105 010c 	add.w	r1, r5, #12
 800d014:	300c      	adds	r0, #12
 800d016:	f7ff faa2 	bl	800c55e <memcpy>
 800d01a:	2201      	movs	r2, #1
 800d01c:	4631      	mov	r1, r6
 800d01e:	4658      	mov	r0, fp
 800d020:	f000 fc08 	bl	800d834 <__lshift>
 800d024:	f10a 0301 	add.w	r3, sl, #1
 800d028:	9307      	str	r3, [sp, #28]
 800d02a:	9b00      	ldr	r3, [sp, #0]
 800d02c:	4453      	add	r3, sl
 800d02e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d030:	9b02      	ldr	r3, [sp, #8]
 800d032:	f003 0301 	and.w	r3, r3, #1
 800d036:	462f      	mov	r7, r5
 800d038:	930a      	str	r3, [sp, #40]	@ 0x28
 800d03a:	4605      	mov	r5, r0
 800d03c:	9b07      	ldr	r3, [sp, #28]
 800d03e:	4621      	mov	r1, r4
 800d040:	3b01      	subs	r3, #1
 800d042:	4648      	mov	r0, r9
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	f7ff fa98 	bl	800c57a <quorem>
 800d04a:	4639      	mov	r1, r7
 800d04c:	9002      	str	r0, [sp, #8]
 800d04e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d052:	4648      	mov	r0, r9
 800d054:	f000 fc5a 	bl	800d90c <__mcmp>
 800d058:	462a      	mov	r2, r5
 800d05a:	9008      	str	r0, [sp, #32]
 800d05c:	4621      	mov	r1, r4
 800d05e:	4658      	mov	r0, fp
 800d060:	f000 fc70 	bl	800d944 <__mdiff>
 800d064:	68c2      	ldr	r2, [r0, #12]
 800d066:	4606      	mov	r6, r0
 800d068:	bb02      	cbnz	r2, 800d0ac <_dtoa_r+0xa1c>
 800d06a:	4601      	mov	r1, r0
 800d06c:	4648      	mov	r0, r9
 800d06e:	f000 fc4d 	bl	800d90c <__mcmp>
 800d072:	4602      	mov	r2, r0
 800d074:	4631      	mov	r1, r6
 800d076:	4658      	mov	r0, fp
 800d078:	920e      	str	r2, [sp, #56]	@ 0x38
 800d07a:	f000 fa0d 	bl	800d498 <_Bfree>
 800d07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d082:	9e07      	ldr	r6, [sp, #28]
 800d084:	ea43 0102 	orr.w	r1, r3, r2
 800d088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d08a:	4319      	orrs	r1, r3
 800d08c:	d110      	bne.n	800d0b0 <_dtoa_r+0xa20>
 800d08e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d092:	d029      	beq.n	800d0e8 <_dtoa_r+0xa58>
 800d094:	9b08      	ldr	r3, [sp, #32]
 800d096:	2b00      	cmp	r3, #0
 800d098:	dd02      	ble.n	800d0a0 <_dtoa_r+0xa10>
 800d09a:	9b02      	ldr	r3, [sp, #8]
 800d09c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d0a0:	9b00      	ldr	r3, [sp, #0]
 800d0a2:	f883 8000 	strb.w	r8, [r3]
 800d0a6:	e63f      	b.n	800cd28 <_dtoa_r+0x698>
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	e7bb      	b.n	800d024 <_dtoa_r+0x994>
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	e7e1      	b.n	800d074 <_dtoa_r+0x9e4>
 800d0b0:	9b08      	ldr	r3, [sp, #32]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	db04      	blt.n	800d0c0 <_dtoa_r+0xa30>
 800d0b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0b8:	430b      	orrs	r3, r1
 800d0ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d0bc:	430b      	orrs	r3, r1
 800d0be:	d120      	bne.n	800d102 <_dtoa_r+0xa72>
 800d0c0:	2a00      	cmp	r2, #0
 800d0c2:	dded      	ble.n	800d0a0 <_dtoa_r+0xa10>
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	4658      	mov	r0, fp
 800d0ca:	f000 fbb3 	bl	800d834 <__lshift>
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	4681      	mov	r9, r0
 800d0d2:	f000 fc1b 	bl	800d90c <__mcmp>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	dc03      	bgt.n	800d0e2 <_dtoa_r+0xa52>
 800d0da:	d1e1      	bne.n	800d0a0 <_dtoa_r+0xa10>
 800d0dc:	f018 0f01 	tst.w	r8, #1
 800d0e0:	d0de      	beq.n	800d0a0 <_dtoa_r+0xa10>
 800d0e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d0e6:	d1d8      	bne.n	800d09a <_dtoa_r+0xa0a>
 800d0e8:	9a00      	ldr	r2, [sp, #0]
 800d0ea:	2339      	movs	r3, #57	@ 0x39
 800d0ec:	7013      	strb	r3, [r2, #0]
 800d0ee:	4633      	mov	r3, r6
 800d0f0:	461e      	mov	r6, r3
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d0f8:	2a39      	cmp	r2, #57	@ 0x39
 800d0fa:	d052      	beq.n	800d1a2 <_dtoa_r+0xb12>
 800d0fc:	3201      	adds	r2, #1
 800d0fe:	701a      	strb	r2, [r3, #0]
 800d100:	e612      	b.n	800cd28 <_dtoa_r+0x698>
 800d102:	2a00      	cmp	r2, #0
 800d104:	dd07      	ble.n	800d116 <_dtoa_r+0xa86>
 800d106:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d10a:	d0ed      	beq.n	800d0e8 <_dtoa_r+0xa58>
 800d10c:	9a00      	ldr	r2, [sp, #0]
 800d10e:	f108 0301 	add.w	r3, r8, #1
 800d112:	7013      	strb	r3, [r2, #0]
 800d114:	e608      	b.n	800cd28 <_dtoa_r+0x698>
 800d116:	9b07      	ldr	r3, [sp, #28]
 800d118:	9a07      	ldr	r2, [sp, #28]
 800d11a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d120:	4293      	cmp	r3, r2
 800d122:	d028      	beq.n	800d176 <_dtoa_r+0xae6>
 800d124:	4649      	mov	r1, r9
 800d126:	2300      	movs	r3, #0
 800d128:	220a      	movs	r2, #10
 800d12a:	4658      	mov	r0, fp
 800d12c:	f000 f9d6 	bl	800d4dc <__multadd>
 800d130:	42af      	cmp	r7, r5
 800d132:	4681      	mov	r9, r0
 800d134:	f04f 0300 	mov.w	r3, #0
 800d138:	f04f 020a 	mov.w	r2, #10
 800d13c:	4639      	mov	r1, r7
 800d13e:	4658      	mov	r0, fp
 800d140:	d107      	bne.n	800d152 <_dtoa_r+0xac2>
 800d142:	f000 f9cb 	bl	800d4dc <__multadd>
 800d146:	4607      	mov	r7, r0
 800d148:	4605      	mov	r5, r0
 800d14a:	9b07      	ldr	r3, [sp, #28]
 800d14c:	3301      	adds	r3, #1
 800d14e:	9307      	str	r3, [sp, #28]
 800d150:	e774      	b.n	800d03c <_dtoa_r+0x9ac>
 800d152:	f000 f9c3 	bl	800d4dc <__multadd>
 800d156:	4629      	mov	r1, r5
 800d158:	4607      	mov	r7, r0
 800d15a:	2300      	movs	r3, #0
 800d15c:	220a      	movs	r2, #10
 800d15e:	4658      	mov	r0, fp
 800d160:	f000 f9bc 	bl	800d4dc <__multadd>
 800d164:	4605      	mov	r5, r0
 800d166:	e7f0      	b.n	800d14a <_dtoa_r+0xaba>
 800d168:	9b00      	ldr	r3, [sp, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	bfcc      	ite	gt
 800d16e:	461e      	movgt	r6, r3
 800d170:	2601      	movle	r6, #1
 800d172:	4456      	add	r6, sl
 800d174:	2700      	movs	r7, #0
 800d176:	4649      	mov	r1, r9
 800d178:	2201      	movs	r2, #1
 800d17a:	4658      	mov	r0, fp
 800d17c:	f000 fb5a 	bl	800d834 <__lshift>
 800d180:	4621      	mov	r1, r4
 800d182:	4681      	mov	r9, r0
 800d184:	f000 fbc2 	bl	800d90c <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	dcb0      	bgt.n	800d0ee <_dtoa_r+0xa5e>
 800d18c:	d102      	bne.n	800d194 <_dtoa_r+0xb04>
 800d18e:	f018 0f01 	tst.w	r8, #1
 800d192:	d1ac      	bne.n	800d0ee <_dtoa_r+0xa5e>
 800d194:	4633      	mov	r3, r6
 800d196:	461e      	mov	r6, r3
 800d198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d19c:	2a30      	cmp	r2, #48	@ 0x30
 800d19e:	d0fa      	beq.n	800d196 <_dtoa_r+0xb06>
 800d1a0:	e5c2      	b.n	800cd28 <_dtoa_r+0x698>
 800d1a2:	459a      	cmp	sl, r3
 800d1a4:	d1a4      	bne.n	800d0f0 <_dtoa_r+0xa60>
 800d1a6:	9b04      	ldr	r3, [sp, #16]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	9304      	str	r3, [sp, #16]
 800d1ac:	2331      	movs	r3, #49	@ 0x31
 800d1ae:	f88a 3000 	strb.w	r3, [sl]
 800d1b2:	e5b9      	b.n	800cd28 <_dtoa_r+0x698>
 800d1b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d214 <_dtoa_r+0xb84>
 800d1ba:	b11b      	cbz	r3, 800d1c4 <_dtoa_r+0xb34>
 800d1bc:	f10a 0308 	add.w	r3, sl, #8
 800d1c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	4650      	mov	r0, sl
 800d1c6:	b019      	add	sp, #100	@ 0x64
 800d1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	f77f ae37 	ble.w	800ce42 <_dtoa_r+0x7b2>
 800d1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1d8:	2001      	movs	r0, #1
 800d1da:	e655      	b.n	800ce88 <_dtoa_r+0x7f8>
 800d1dc:	9b00      	ldr	r3, [sp, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f77f aed6 	ble.w	800cf90 <_dtoa_r+0x900>
 800d1e4:	4656      	mov	r6, sl
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	4648      	mov	r0, r9
 800d1ea:	f7ff f9c6 	bl	800c57a <quorem>
 800d1ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d1f2:	f806 8b01 	strb.w	r8, [r6], #1
 800d1f6:	9b00      	ldr	r3, [sp, #0]
 800d1f8:	eba6 020a 	sub.w	r2, r6, sl
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	ddb3      	ble.n	800d168 <_dtoa_r+0xad8>
 800d200:	4649      	mov	r1, r9
 800d202:	2300      	movs	r3, #0
 800d204:	220a      	movs	r2, #10
 800d206:	4658      	mov	r0, fp
 800d208:	f000 f968 	bl	800d4dc <__multadd>
 800d20c:	4681      	mov	r9, r0
 800d20e:	e7ea      	b.n	800d1e6 <_dtoa_r+0xb56>
 800d210:	0800f89c 	.word	0x0800f89c
 800d214:	0800f820 	.word	0x0800f820

0800d218 <_free_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4605      	mov	r5, r0
 800d21c:	2900      	cmp	r1, #0
 800d21e:	d041      	beq.n	800d2a4 <_free_r+0x8c>
 800d220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d224:	1f0c      	subs	r4, r1, #4
 800d226:	2b00      	cmp	r3, #0
 800d228:	bfb8      	it	lt
 800d22a:	18e4      	addlt	r4, r4, r3
 800d22c:	f000 f8e8 	bl	800d400 <__malloc_lock>
 800d230:	4a1d      	ldr	r2, [pc, #116]	@ (800d2a8 <_free_r+0x90>)
 800d232:	6813      	ldr	r3, [r2, #0]
 800d234:	b933      	cbnz	r3, 800d244 <_free_r+0x2c>
 800d236:	6063      	str	r3, [r4, #4]
 800d238:	6014      	str	r4, [r2, #0]
 800d23a:	4628      	mov	r0, r5
 800d23c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d240:	f000 b8e4 	b.w	800d40c <__malloc_unlock>
 800d244:	42a3      	cmp	r3, r4
 800d246:	d908      	bls.n	800d25a <_free_r+0x42>
 800d248:	6820      	ldr	r0, [r4, #0]
 800d24a:	1821      	adds	r1, r4, r0
 800d24c:	428b      	cmp	r3, r1
 800d24e:	bf01      	itttt	eq
 800d250:	6819      	ldreq	r1, [r3, #0]
 800d252:	685b      	ldreq	r3, [r3, #4]
 800d254:	1809      	addeq	r1, r1, r0
 800d256:	6021      	streq	r1, [r4, #0]
 800d258:	e7ed      	b.n	800d236 <_free_r+0x1e>
 800d25a:	461a      	mov	r2, r3
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	b10b      	cbz	r3, 800d264 <_free_r+0x4c>
 800d260:	42a3      	cmp	r3, r4
 800d262:	d9fa      	bls.n	800d25a <_free_r+0x42>
 800d264:	6811      	ldr	r1, [r2, #0]
 800d266:	1850      	adds	r0, r2, r1
 800d268:	42a0      	cmp	r0, r4
 800d26a:	d10b      	bne.n	800d284 <_free_r+0x6c>
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	4401      	add	r1, r0
 800d270:	1850      	adds	r0, r2, r1
 800d272:	4283      	cmp	r3, r0
 800d274:	6011      	str	r1, [r2, #0]
 800d276:	d1e0      	bne.n	800d23a <_free_r+0x22>
 800d278:	6818      	ldr	r0, [r3, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	6053      	str	r3, [r2, #4]
 800d27e:	4408      	add	r0, r1
 800d280:	6010      	str	r0, [r2, #0]
 800d282:	e7da      	b.n	800d23a <_free_r+0x22>
 800d284:	d902      	bls.n	800d28c <_free_r+0x74>
 800d286:	230c      	movs	r3, #12
 800d288:	602b      	str	r3, [r5, #0]
 800d28a:	e7d6      	b.n	800d23a <_free_r+0x22>
 800d28c:	6820      	ldr	r0, [r4, #0]
 800d28e:	1821      	adds	r1, r4, r0
 800d290:	428b      	cmp	r3, r1
 800d292:	bf04      	itt	eq
 800d294:	6819      	ldreq	r1, [r3, #0]
 800d296:	685b      	ldreq	r3, [r3, #4]
 800d298:	6063      	str	r3, [r4, #4]
 800d29a:	bf04      	itt	eq
 800d29c:	1809      	addeq	r1, r1, r0
 800d29e:	6021      	streq	r1, [r4, #0]
 800d2a0:	6054      	str	r4, [r2, #4]
 800d2a2:	e7ca      	b.n	800d23a <_free_r+0x22>
 800d2a4:	bd38      	pop	{r3, r4, r5, pc}
 800d2a6:	bf00      	nop
 800d2a8:	200056a0 	.word	0x200056a0

0800d2ac <malloc>:
 800d2ac:	4b02      	ldr	r3, [pc, #8]	@ (800d2b8 <malloc+0xc>)
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	f000 b825 	b.w	800d300 <_malloc_r>
 800d2b6:	bf00      	nop
 800d2b8:	2000003c 	.word	0x2000003c

0800d2bc <sbrk_aligned>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	4e0f      	ldr	r6, [pc, #60]	@ (800d2fc <sbrk_aligned+0x40>)
 800d2c0:	460c      	mov	r4, r1
 800d2c2:	6831      	ldr	r1, [r6, #0]
 800d2c4:	4605      	mov	r5, r0
 800d2c6:	b911      	cbnz	r1, 800d2ce <sbrk_aligned+0x12>
 800d2c8:	f000 fe46 	bl	800df58 <_sbrk_r>
 800d2cc:	6030      	str	r0, [r6, #0]
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	f000 fe41 	bl	800df58 <_sbrk_r>
 800d2d6:	1c43      	adds	r3, r0, #1
 800d2d8:	d103      	bne.n	800d2e2 <sbrk_aligned+0x26>
 800d2da:	f04f 34ff 	mov.w	r4, #4294967295
 800d2de:	4620      	mov	r0, r4
 800d2e0:	bd70      	pop	{r4, r5, r6, pc}
 800d2e2:	1cc4      	adds	r4, r0, #3
 800d2e4:	f024 0403 	bic.w	r4, r4, #3
 800d2e8:	42a0      	cmp	r0, r4
 800d2ea:	d0f8      	beq.n	800d2de <sbrk_aligned+0x22>
 800d2ec:	1a21      	subs	r1, r4, r0
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 fe32 	bl	800df58 <_sbrk_r>
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d1f2      	bne.n	800d2de <sbrk_aligned+0x22>
 800d2f8:	e7ef      	b.n	800d2da <sbrk_aligned+0x1e>
 800d2fa:	bf00      	nop
 800d2fc:	2000569c 	.word	0x2000569c

0800d300 <_malloc_r>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	1ccd      	adds	r5, r1, #3
 800d306:	f025 0503 	bic.w	r5, r5, #3
 800d30a:	3508      	adds	r5, #8
 800d30c:	2d0c      	cmp	r5, #12
 800d30e:	bf38      	it	cc
 800d310:	250c      	movcc	r5, #12
 800d312:	2d00      	cmp	r5, #0
 800d314:	4606      	mov	r6, r0
 800d316:	db01      	blt.n	800d31c <_malloc_r+0x1c>
 800d318:	42a9      	cmp	r1, r5
 800d31a:	d904      	bls.n	800d326 <_malloc_r+0x26>
 800d31c:	230c      	movs	r3, #12
 800d31e:	6033      	str	r3, [r6, #0]
 800d320:	2000      	movs	r0, #0
 800d322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3fc <_malloc_r+0xfc>
 800d32a:	f000 f869 	bl	800d400 <__malloc_lock>
 800d32e:	f8d8 3000 	ldr.w	r3, [r8]
 800d332:	461c      	mov	r4, r3
 800d334:	bb44      	cbnz	r4, 800d388 <_malloc_r+0x88>
 800d336:	4629      	mov	r1, r5
 800d338:	4630      	mov	r0, r6
 800d33a:	f7ff ffbf 	bl	800d2bc <sbrk_aligned>
 800d33e:	1c43      	adds	r3, r0, #1
 800d340:	4604      	mov	r4, r0
 800d342:	d158      	bne.n	800d3f6 <_malloc_r+0xf6>
 800d344:	f8d8 4000 	ldr.w	r4, [r8]
 800d348:	4627      	mov	r7, r4
 800d34a:	2f00      	cmp	r7, #0
 800d34c:	d143      	bne.n	800d3d6 <_malloc_r+0xd6>
 800d34e:	2c00      	cmp	r4, #0
 800d350:	d04b      	beq.n	800d3ea <_malloc_r+0xea>
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	4639      	mov	r1, r7
 800d356:	4630      	mov	r0, r6
 800d358:	eb04 0903 	add.w	r9, r4, r3
 800d35c:	f000 fdfc 	bl	800df58 <_sbrk_r>
 800d360:	4581      	cmp	r9, r0
 800d362:	d142      	bne.n	800d3ea <_malloc_r+0xea>
 800d364:	6821      	ldr	r1, [r4, #0]
 800d366:	1a6d      	subs	r5, r5, r1
 800d368:	4629      	mov	r1, r5
 800d36a:	4630      	mov	r0, r6
 800d36c:	f7ff ffa6 	bl	800d2bc <sbrk_aligned>
 800d370:	3001      	adds	r0, #1
 800d372:	d03a      	beq.n	800d3ea <_malloc_r+0xea>
 800d374:	6823      	ldr	r3, [r4, #0]
 800d376:	442b      	add	r3, r5
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	f8d8 3000 	ldr.w	r3, [r8]
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	bb62      	cbnz	r2, 800d3dc <_malloc_r+0xdc>
 800d382:	f8c8 7000 	str.w	r7, [r8]
 800d386:	e00f      	b.n	800d3a8 <_malloc_r+0xa8>
 800d388:	6822      	ldr	r2, [r4, #0]
 800d38a:	1b52      	subs	r2, r2, r5
 800d38c:	d420      	bmi.n	800d3d0 <_malloc_r+0xd0>
 800d38e:	2a0b      	cmp	r2, #11
 800d390:	d917      	bls.n	800d3c2 <_malloc_r+0xc2>
 800d392:	1961      	adds	r1, r4, r5
 800d394:	42a3      	cmp	r3, r4
 800d396:	6025      	str	r5, [r4, #0]
 800d398:	bf18      	it	ne
 800d39a:	6059      	strne	r1, [r3, #4]
 800d39c:	6863      	ldr	r3, [r4, #4]
 800d39e:	bf08      	it	eq
 800d3a0:	f8c8 1000 	streq.w	r1, [r8]
 800d3a4:	5162      	str	r2, [r4, r5]
 800d3a6:	604b      	str	r3, [r1, #4]
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f000 f82f 	bl	800d40c <__malloc_unlock>
 800d3ae:	f104 000b 	add.w	r0, r4, #11
 800d3b2:	1d23      	adds	r3, r4, #4
 800d3b4:	f020 0007 	bic.w	r0, r0, #7
 800d3b8:	1ac2      	subs	r2, r0, r3
 800d3ba:	bf1c      	itt	ne
 800d3bc:	1a1b      	subne	r3, r3, r0
 800d3be:	50a3      	strne	r3, [r4, r2]
 800d3c0:	e7af      	b.n	800d322 <_malloc_r+0x22>
 800d3c2:	6862      	ldr	r2, [r4, #4]
 800d3c4:	42a3      	cmp	r3, r4
 800d3c6:	bf0c      	ite	eq
 800d3c8:	f8c8 2000 	streq.w	r2, [r8]
 800d3cc:	605a      	strne	r2, [r3, #4]
 800d3ce:	e7eb      	b.n	800d3a8 <_malloc_r+0xa8>
 800d3d0:	4623      	mov	r3, r4
 800d3d2:	6864      	ldr	r4, [r4, #4]
 800d3d4:	e7ae      	b.n	800d334 <_malloc_r+0x34>
 800d3d6:	463c      	mov	r4, r7
 800d3d8:	687f      	ldr	r7, [r7, #4]
 800d3da:	e7b6      	b.n	800d34a <_malloc_r+0x4a>
 800d3dc:	461a      	mov	r2, r3
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	42a3      	cmp	r3, r4
 800d3e2:	d1fb      	bne.n	800d3dc <_malloc_r+0xdc>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	6053      	str	r3, [r2, #4]
 800d3e8:	e7de      	b.n	800d3a8 <_malloc_r+0xa8>
 800d3ea:	230c      	movs	r3, #12
 800d3ec:	6033      	str	r3, [r6, #0]
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f000 f80c 	bl	800d40c <__malloc_unlock>
 800d3f4:	e794      	b.n	800d320 <_malloc_r+0x20>
 800d3f6:	6005      	str	r5, [r0, #0]
 800d3f8:	e7d6      	b.n	800d3a8 <_malloc_r+0xa8>
 800d3fa:	bf00      	nop
 800d3fc:	200056a0 	.word	0x200056a0

0800d400 <__malloc_lock>:
 800d400:	4801      	ldr	r0, [pc, #4]	@ (800d408 <__malloc_lock+0x8>)
 800d402:	f7ff b8aa 	b.w	800c55a <__retarget_lock_acquire_recursive>
 800d406:	bf00      	nop
 800d408:	20005698 	.word	0x20005698

0800d40c <__malloc_unlock>:
 800d40c:	4801      	ldr	r0, [pc, #4]	@ (800d414 <__malloc_unlock+0x8>)
 800d40e:	f7ff b8a5 	b.w	800c55c <__retarget_lock_release_recursive>
 800d412:	bf00      	nop
 800d414:	20005698 	.word	0x20005698

0800d418 <_Balloc>:
 800d418:	b570      	push	{r4, r5, r6, lr}
 800d41a:	69c6      	ldr	r6, [r0, #28]
 800d41c:	4604      	mov	r4, r0
 800d41e:	460d      	mov	r5, r1
 800d420:	b976      	cbnz	r6, 800d440 <_Balloc+0x28>
 800d422:	2010      	movs	r0, #16
 800d424:	f7ff ff42 	bl	800d2ac <malloc>
 800d428:	4602      	mov	r2, r0
 800d42a:	61e0      	str	r0, [r4, #28]
 800d42c:	b920      	cbnz	r0, 800d438 <_Balloc+0x20>
 800d42e:	4b18      	ldr	r3, [pc, #96]	@ (800d490 <_Balloc+0x78>)
 800d430:	4818      	ldr	r0, [pc, #96]	@ (800d494 <_Balloc+0x7c>)
 800d432:	216b      	movs	r1, #107	@ 0x6b
 800d434:	f000 fda0 	bl	800df78 <__assert_func>
 800d438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d43c:	6006      	str	r6, [r0, #0]
 800d43e:	60c6      	str	r6, [r0, #12]
 800d440:	69e6      	ldr	r6, [r4, #28]
 800d442:	68f3      	ldr	r3, [r6, #12]
 800d444:	b183      	cbz	r3, 800d468 <_Balloc+0x50>
 800d446:	69e3      	ldr	r3, [r4, #28]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d44e:	b9b8      	cbnz	r0, 800d480 <_Balloc+0x68>
 800d450:	2101      	movs	r1, #1
 800d452:	fa01 f605 	lsl.w	r6, r1, r5
 800d456:	1d72      	adds	r2, r6, #5
 800d458:	0092      	lsls	r2, r2, #2
 800d45a:	4620      	mov	r0, r4
 800d45c:	f000 fdaa 	bl	800dfb4 <_calloc_r>
 800d460:	b160      	cbz	r0, 800d47c <_Balloc+0x64>
 800d462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d466:	e00e      	b.n	800d486 <_Balloc+0x6e>
 800d468:	2221      	movs	r2, #33	@ 0x21
 800d46a:	2104      	movs	r1, #4
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fda1 	bl	800dfb4 <_calloc_r>
 800d472:	69e3      	ldr	r3, [r4, #28]
 800d474:	60f0      	str	r0, [r6, #12]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1e4      	bne.n	800d446 <_Balloc+0x2e>
 800d47c:	2000      	movs	r0, #0
 800d47e:	bd70      	pop	{r4, r5, r6, pc}
 800d480:	6802      	ldr	r2, [r0, #0]
 800d482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d486:	2300      	movs	r3, #0
 800d488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d48c:	e7f7      	b.n	800d47e <_Balloc+0x66>
 800d48e:	bf00      	nop
 800d490:	0800f82d 	.word	0x0800f82d
 800d494:	0800f8ad 	.word	0x0800f8ad

0800d498 <_Bfree>:
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	69c6      	ldr	r6, [r0, #28]
 800d49c:	4605      	mov	r5, r0
 800d49e:	460c      	mov	r4, r1
 800d4a0:	b976      	cbnz	r6, 800d4c0 <_Bfree+0x28>
 800d4a2:	2010      	movs	r0, #16
 800d4a4:	f7ff ff02 	bl	800d2ac <malloc>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	61e8      	str	r0, [r5, #28]
 800d4ac:	b920      	cbnz	r0, 800d4b8 <_Bfree+0x20>
 800d4ae:	4b09      	ldr	r3, [pc, #36]	@ (800d4d4 <_Bfree+0x3c>)
 800d4b0:	4809      	ldr	r0, [pc, #36]	@ (800d4d8 <_Bfree+0x40>)
 800d4b2:	218f      	movs	r1, #143	@ 0x8f
 800d4b4:	f000 fd60 	bl	800df78 <__assert_func>
 800d4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4bc:	6006      	str	r6, [r0, #0]
 800d4be:	60c6      	str	r6, [r0, #12]
 800d4c0:	b13c      	cbz	r4, 800d4d2 <_Bfree+0x3a>
 800d4c2:	69eb      	ldr	r3, [r5, #28]
 800d4c4:	6862      	ldr	r2, [r4, #4]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4cc:	6021      	str	r1, [r4, #0]
 800d4ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4d2:	bd70      	pop	{r4, r5, r6, pc}
 800d4d4:	0800f82d 	.word	0x0800f82d
 800d4d8:	0800f8ad 	.word	0x0800f8ad

0800d4dc <__multadd>:
 800d4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e0:	690d      	ldr	r5, [r1, #16]
 800d4e2:	4607      	mov	r7, r0
 800d4e4:	460c      	mov	r4, r1
 800d4e6:	461e      	mov	r6, r3
 800d4e8:	f101 0c14 	add.w	ip, r1, #20
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	f8dc 3000 	ldr.w	r3, [ip]
 800d4f2:	b299      	uxth	r1, r3
 800d4f4:	fb02 6101 	mla	r1, r2, r1, r6
 800d4f8:	0c1e      	lsrs	r6, r3, #16
 800d4fa:	0c0b      	lsrs	r3, r1, #16
 800d4fc:	fb02 3306 	mla	r3, r2, r6, r3
 800d500:	b289      	uxth	r1, r1
 800d502:	3001      	adds	r0, #1
 800d504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d508:	4285      	cmp	r5, r0
 800d50a:	f84c 1b04 	str.w	r1, [ip], #4
 800d50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d512:	dcec      	bgt.n	800d4ee <__multadd+0x12>
 800d514:	b30e      	cbz	r6, 800d55a <__multadd+0x7e>
 800d516:	68a3      	ldr	r3, [r4, #8]
 800d518:	42ab      	cmp	r3, r5
 800d51a:	dc19      	bgt.n	800d550 <__multadd+0x74>
 800d51c:	6861      	ldr	r1, [r4, #4]
 800d51e:	4638      	mov	r0, r7
 800d520:	3101      	adds	r1, #1
 800d522:	f7ff ff79 	bl	800d418 <_Balloc>
 800d526:	4680      	mov	r8, r0
 800d528:	b928      	cbnz	r0, 800d536 <__multadd+0x5a>
 800d52a:	4602      	mov	r2, r0
 800d52c:	4b0c      	ldr	r3, [pc, #48]	@ (800d560 <__multadd+0x84>)
 800d52e:	480d      	ldr	r0, [pc, #52]	@ (800d564 <__multadd+0x88>)
 800d530:	21ba      	movs	r1, #186	@ 0xba
 800d532:	f000 fd21 	bl	800df78 <__assert_func>
 800d536:	6922      	ldr	r2, [r4, #16]
 800d538:	3202      	adds	r2, #2
 800d53a:	f104 010c 	add.w	r1, r4, #12
 800d53e:	0092      	lsls	r2, r2, #2
 800d540:	300c      	adds	r0, #12
 800d542:	f7ff f80c 	bl	800c55e <memcpy>
 800d546:	4621      	mov	r1, r4
 800d548:	4638      	mov	r0, r7
 800d54a:	f7ff ffa5 	bl	800d498 <_Bfree>
 800d54e:	4644      	mov	r4, r8
 800d550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d554:	3501      	adds	r5, #1
 800d556:	615e      	str	r6, [r3, #20]
 800d558:	6125      	str	r5, [r4, #16]
 800d55a:	4620      	mov	r0, r4
 800d55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d560:	0800f89c 	.word	0x0800f89c
 800d564:	0800f8ad 	.word	0x0800f8ad

0800d568 <__hi0bits>:
 800d568:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d56c:	4603      	mov	r3, r0
 800d56e:	bf36      	itet	cc
 800d570:	0403      	lslcc	r3, r0, #16
 800d572:	2000      	movcs	r0, #0
 800d574:	2010      	movcc	r0, #16
 800d576:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d57a:	bf3c      	itt	cc
 800d57c:	021b      	lslcc	r3, r3, #8
 800d57e:	3008      	addcc	r0, #8
 800d580:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d584:	bf3c      	itt	cc
 800d586:	011b      	lslcc	r3, r3, #4
 800d588:	3004      	addcc	r0, #4
 800d58a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d58e:	bf3c      	itt	cc
 800d590:	009b      	lslcc	r3, r3, #2
 800d592:	3002      	addcc	r0, #2
 800d594:	2b00      	cmp	r3, #0
 800d596:	db05      	blt.n	800d5a4 <__hi0bits+0x3c>
 800d598:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d59c:	f100 0001 	add.w	r0, r0, #1
 800d5a0:	bf08      	it	eq
 800d5a2:	2020      	moveq	r0, #32
 800d5a4:	4770      	bx	lr

0800d5a6 <__lo0bits>:
 800d5a6:	6803      	ldr	r3, [r0, #0]
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	f013 0007 	ands.w	r0, r3, #7
 800d5ae:	d00b      	beq.n	800d5c8 <__lo0bits+0x22>
 800d5b0:	07d9      	lsls	r1, r3, #31
 800d5b2:	d421      	bmi.n	800d5f8 <__lo0bits+0x52>
 800d5b4:	0798      	lsls	r0, r3, #30
 800d5b6:	bf49      	itett	mi
 800d5b8:	085b      	lsrmi	r3, r3, #1
 800d5ba:	089b      	lsrpl	r3, r3, #2
 800d5bc:	2001      	movmi	r0, #1
 800d5be:	6013      	strmi	r3, [r2, #0]
 800d5c0:	bf5c      	itt	pl
 800d5c2:	6013      	strpl	r3, [r2, #0]
 800d5c4:	2002      	movpl	r0, #2
 800d5c6:	4770      	bx	lr
 800d5c8:	b299      	uxth	r1, r3
 800d5ca:	b909      	cbnz	r1, 800d5d0 <__lo0bits+0x2a>
 800d5cc:	0c1b      	lsrs	r3, r3, #16
 800d5ce:	2010      	movs	r0, #16
 800d5d0:	b2d9      	uxtb	r1, r3
 800d5d2:	b909      	cbnz	r1, 800d5d8 <__lo0bits+0x32>
 800d5d4:	3008      	adds	r0, #8
 800d5d6:	0a1b      	lsrs	r3, r3, #8
 800d5d8:	0719      	lsls	r1, r3, #28
 800d5da:	bf04      	itt	eq
 800d5dc:	091b      	lsreq	r3, r3, #4
 800d5de:	3004      	addeq	r0, #4
 800d5e0:	0799      	lsls	r1, r3, #30
 800d5e2:	bf04      	itt	eq
 800d5e4:	089b      	lsreq	r3, r3, #2
 800d5e6:	3002      	addeq	r0, #2
 800d5e8:	07d9      	lsls	r1, r3, #31
 800d5ea:	d403      	bmi.n	800d5f4 <__lo0bits+0x4e>
 800d5ec:	085b      	lsrs	r3, r3, #1
 800d5ee:	f100 0001 	add.w	r0, r0, #1
 800d5f2:	d003      	beq.n	800d5fc <__lo0bits+0x56>
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	4770      	bx	lr
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	4770      	bx	lr
 800d5fc:	2020      	movs	r0, #32
 800d5fe:	4770      	bx	lr

0800d600 <__i2b>:
 800d600:	b510      	push	{r4, lr}
 800d602:	460c      	mov	r4, r1
 800d604:	2101      	movs	r1, #1
 800d606:	f7ff ff07 	bl	800d418 <_Balloc>
 800d60a:	4602      	mov	r2, r0
 800d60c:	b928      	cbnz	r0, 800d61a <__i2b+0x1a>
 800d60e:	4b05      	ldr	r3, [pc, #20]	@ (800d624 <__i2b+0x24>)
 800d610:	4805      	ldr	r0, [pc, #20]	@ (800d628 <__i2b+0x28>)
 800d612:	f240 1145 	movw	r1, #325	@ 0x145
 800d616:	f000 fcaf 	bl	800df78 <__assert_func>
 800d61a:	2301      	movs	r3, #1
 800d61c:	6144      	str	r4, [r0, #20]
 800d61e:	6103      	str	r3, [r0, #16]
 800d620:	bd10      	pop	{r4, pc}
 800d622:	bf00      	nop
 800d624:	0800f89c 	.word	0x0800f89c
 800d628:	0800f8ad 	.word	0x0800f8ad

0800d62c <__multiply>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	4614      	mov	r4, r2
 800d632:	690a      	ldr	r2, [r1, #16]
 800d634:	6923      	ldr	r3, [r4, #16]
 800d636:	429a      	cmp	r2, r3
 800d638:	bfa8      	it	ge
 800d63a:	4623      	movge	r3, r4
 800d63c:	460f      	mov	r7, r1
 800d63e:	bfa4      	itt	ge
 800d640:	460c      	movge	r4, r1
 800d642:	461f      	movge	r7, r3
 800d644:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d64c:	68a3      	ldr	r3, [r4, #8]
 800d64e:	6861      	ldr	r1, [r4, #4]
 800d650:	eb0a 0609 	add.w	r6, sl, r9
 800d654:	42b3      	cmp	r3, r6
 800d656:	b085      	sub	sp, #20
 800d658:	bfb8      	it	lt
 800d65a:	3101      	addlt	r1, #1
 800d65c:	f7ff fedc 	bl	800d418 <_Balloc>
 800d660:	b930      	cbnz	r0, 800d670 <__multiply+0x44>
 800d662:	4602      	mov	r2, r0
 800d664:	4b44      	ldr	r3, [pc, #272]	@ (800d778 <__multiply+0x14c>)
 800d666:	4845      	ldr	r0, [pc, #276]	@ (800d77c <__multiply+0x150>)
 800d668:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d66c:	f000 fc84 	bl	800df78 <__assert_func>
 800d670:	f100 0514 	add.w	r5, r0, #20
 800d674:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d678:	462b      	mov	r3, r5
 800d67a:	2200      	movs	r2, #0
 800d67c:	4543      	cmp	r3, r8
 800d67e:	d321      	bcc.n	800d6c4 <__multiply+0x98>
 800d680:	f107 0114 	add.w	r1, r7, #20
 800d684:	f104 0214 	add.w	r2, r4, #20
 800d688:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d68c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d690:	9302      	str	r3, [sp, #8]
 800d692:	1b13      	subs	r3, r2, r4
 800d694:	3b15      	subs	r3, #21
 800d696:	f023 0303 	bic.w	r3, r3, #3
 800d69a:	3304      	adds	r3, #4
 800d69c:	f104 0715 	add.w	r7, r4, #21
 800d6a0:	42ba      	cmp	r2, r7
 800d6a2:	bf38      	it	cc
 800d6a4:	2304      	movcc	r3, #4
 800d6a6:	9301      	str	r3, [sp, #4]
 800d6a8:	9b02      	ldr	r3, [sp, #8]
 800d6aa:	9103      	str	r1, [sp, #12]
 800d6ac:	428b      	cmp	r3, r1
 800d6ae:	d80c      	bhi.n	800d6ca <__multiply+0x9e>
 800d6b0:	2e00      	cmp	r6, #0
 800d6b2:	dd03      	ble.n	800d6bc <__multiply+0x90>
 800d6b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d05b      	beq.n	800d774 <__multiply+0x148>
 800d6bc:	6106      	str	r6, [r0, #16]
 800d6be:	b005      	add	sp, #20
 800d6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c4:	f843 2b04 	str.w	r2, [r3], #4
 800d6c8:	e7d8      	b.n	800d67c <__multiply+0x50>
 800d6ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800d6ce:	f1ba 0f00 	cmp.w	sl, #0
 800d6d2:	d024      	beq.n	800d71e <__multiply+0xf2>
 800d6d4:	f104 0e14 	add.w	lr, r4, #20
 800d6d8:	46a9      	mov	r9, r5
 800d6da:	f04f 0c00 	mov.w	ip, #0
 800d6de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6e2:	f8d9 3000 	ldr.w	r3, [r9]
 800d6e6:	fa1f fb87 	uxth.w	fp, r7
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d6f4:	f8d9 7000 	ldr.w	r7, [r9]
 800d6f8:	4463      	add	r3, ip
 800d6fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800d702:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d706:	b29b      	uxth	r3, r3
 800d708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d70c:	4572      	cmp	r2, lr
 800d70e:	f849 3b04 	str.w	r3, [r9], #4
 800d712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d716:	d8e2      	bhi.n	800d6de <__multiply+0xb2>
 800d718:	9b01      	ldr	r3, [sp, #4]
 800d71a:	f845 c003 	str.w	ip, [r5, r3]
 800d71e:	9b03      	ldr	r3, [sp, #12]
 800d720:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d724:	3104      	adds	r1, #4
 800d726:	f1b9 0f00 	cmp.w	r9, #0
 800d72a:	d021      	beq.n	800d770 <__multiply+0x144>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	f104 0c14 	add.w	ip, r4, #20
 800d732:	46ae      	mov	lr, r5
 800d734:	f04f 0a00 	mov.w	sl, #0
 800d738:	f8bc b000 	ldrh.w	fp, [ip]
 800d73c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d740:	fb09 770b 	mla	r7, r9, fp, r7
 800d744:	4457      	add	r7, sl
 800d746:	b29b      	uxth	r3, r3
 800d748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d74c:	f84e 3b04 	str.w	r3, [lr], #4
 800d750:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d754:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d758:	f8be 3000 	ldrh.w	r3, [lr]
 800d75c:	fb09 330a 	mla	r3, r9, sl, r3
 800d760:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d764:	4562      	cmp	r2, ip
 800d766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d76a:	d8e5      	bhi.n	800d738 <__multiply+0x10c>
 800d76c:	9f01      	ldr	r7, [sp, #4]
 800d76e:	51eb      	str	r3, [r5, r7]
 800d770:	3504      	adds	r5, #4
 800d772:	e799      	b.n	800d6a8 <__multiply+0x7c>
 800d774:	3e01      	subs	r6, #1
 800d776:	e79b      	b.n	800d6b0 <__multiply+0x84>
 800d778:	0800f89c 	.word	0x0800f89c
 800d77c:	0800f8ad 	.word	0x0800f8ad

0800d780 <__pow5mult>:
 800d780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d784:	4615      	mov	r5, r2
 800d786:	f012 0203 	ands.w	r2, r2, #3
 800d78a:	4607      	mov	r7, r0
 800d78c:	460e      	mov	r6, r1
 800d78e:	d007      	beq.n	800d7a0 <__pow5mult+0x20>
 800d790:	4c25      	ldr	r4, [pc, #148]	@ (800d828 <__pow5mult+0xa8>)
 800d792:	3a01      	subs	r2, #1
 800d794:	2300      	movs	r3, #0
 800d796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d79a:	f7ff fe9f 	bl	800d4dc <__multadd>
 800d79e:	4606      	mov	r6, r0
 800d7a0:	10ad      	asrs	r5, r5, #2
 800d7a2:	d03d      	beq.n	800d820 <__pow5mult+0xa0>
 800d7a4:	69fc      	ldr	r4, [r7, #28]
 800d7a6:	b97c      	cbnz	r4, 800d7c8 <__pow5mult+0x48>
 800d7a8:	2010      	movs	r0, #16
 800d7aa:	f7ff fd7f 	bl	800d2ac <malloc>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	61f8      	str	r0, [r7, #28]
 800d7b2:	b928      	cbnz	r0, 800d7c0 <__pow5mult+0x40>
 800d7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d82c <__pow5mult+0xac>)
 800d7b6:	481e      	ldr	r0, [pc, #120]	@ (800d830 <__pow5mult+0xb0>)
 800d7b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d7bc:	f000 fbdc 	bl	800df78 <__assert_func>
 800d7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7c4:	6004      	str	r4, [r0, #0]
 800d7c6:	60c4      	str	r4, [r0, #12]
 800d7c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7d0:	b94c      	cbnz	r4, 800d7e6 <__pow5mult+0x66>
 800d7d2:	f240 2171 	movw	r1, #625	@ 0x271
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	f7ff ff12 	bl	800d600 <__i2b>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	f04f 0900 	mov.w	r9, #0
 800d7ea:	07eb      	lsls	r3, r5, #31
 800d7ec:	d50a      	bpl.n	800d804 <__pow5mult+0x84>
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	f7ff ff1a 	bl	800d62c <__multiply>
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4680      	mov	r8, r0
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	f7ff fe4b 	bl	800d498 <_Bfree>
 800d802:	4646      	mov	r6, r8
 800d804:	106d      	asrs	r5, r5, #1
 800d806:	d00b      	beq.n	800d820 <__pow5mult+0xa0>
 800d808:	6820      	ldr	r0, [r4, #0]
 800d80a:	b938      	cbnz	r0, 800d81c <__pow5mult+0x9c>
 800d80c:	4622      	mov	r2, r4
 800d80e:	4621      	mov	r1, r4
 800d810:	4638      	mov	r0, r7
 800d812:	f7ff ff0b 	bl	800d62c <__multiply>
 800d816:	6020      	str	r0, [r4, #0]
 800d818:	f8c0 9000 	str.w	r9, [r0]
 800d81c:	4604      	mov	r4, r0
 800d81e:	e7e4      	b.n	800d7ea <__pow5mult+0x6a>
 800d820:	4630      	mov	r0, r6
 800d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d826:	bf00      	nop
 800d828:	0800f908 	.word	0x0800f908
 800d82c:	0800f82d 	.word	0x0800f82d
 800d830:	0800f8ad 	.word	0x0800f8ad

0800d834 <__lshift>:
 800d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d838:	460c      	mov	r4, r1
 800d83a:	6849      	ldr	r1, [r1, #4]
 800d83c:	6923      	ldr	r3, [r4, #16]
 800d83e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d842:	68a3      	ldr	r3, [r4, #8]
 800d844:	4607      	mov	r7, r0
 800d846:	4691      	mov	r9, r2
 800d848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d84c:	f108 0601 	add.w	r6, r8, #1
 800d850:	42b3      	cmp	r3, r6
 800d852:	db0b      	blt.n	800d86c <__lshift+0x38>
 800d854:	4638      	mov	r0, r7
 800d856:	f7ff fddf 	bl	800d418 <_Balloc>
 800d85a:	4605      	mov	r5, r0
 800d85c:	b948      	cbnz	r0, 800d872 <__lshift+0x3e>
 800d85e:	4602      	mov	r2, r0
 800d860:	4b28      	ldr	r3, [pc, #160]	@ (800d904 <__lshift+0xd0>)
 800d862:	4829      	ldr	r0, [pc, #164]	@ (800d908 <__lshift+0xd4>)
 800d864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d868:	f000 fb86 	bl	800df78 <__assert_func>
 800d86c:	3101      	adds	r1, #1
 800d86e:	005b      	lsls	r3, r3, #1
 800d870:	e7ee      	b.n	800d850 <__lshift+0x1c>
 800d872:	2300      	movs	r3, #0
 800d874:	f100 0114 	add.w	r1, r0, #20
 800d878:	f100 0210 	add.w	r2, r0, #16
 800d87c:	4618      	mov	r0, r3
 800d87e:	4553      	cmp	r3, sl
 800d880:	db33      	blt.n	800d8ea <__lshift+0xb6>
 800d882:	6920      	ldr	r0, [r4, #16]
 800d884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d888:	f104 0314 	add.w	r3, r4, #20
 800d88c:	f019 091f 	ands.w	r9, r9, #31
 800d890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d894:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d898:	d02b      	beq.n	800d8f2 <__lshift+0xbe>
 800d89a:	f1c9 0e20 	rsb	lr, r9, #32
 800d89e:	468a      	mov	sl, r1
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	6818      	ldr	r0, [r3, #0]
 800d8a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d8a8:	4310      	orrs	r0, r2
 800d8aa:	f84a 0b04 	str.w	r0, [sl], #4
 800d8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b2:	459c      	cmp	ip, r3
 800d8b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8b8:	d8f3      	bhi.n	800d8a2 <__lshift+0x6e>
 800d8ba:	ebac 0304 	sub.w	r3, ip, r4
 800d8be:	3b15      	subs	r3, #21
 800d8c0:	f023 0303 	bic.w	r3, r3, #3
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	f104 0015 	add.w	r0, r4, #21
 800d8ca:	4584      	cmp	ip, r0
 800d8cc:	bf38      	it	cc
 800d8ce:	2304      	movcc	r3, #4
 800d8d0:	50ca      	str	r2, [r1, r3]
 800d8d2:	b10a      	cbz	r2, 800d8d8 <__lshift+0xa4>
 800d8d4:	f108 0602 	add.w	r6, r8, #2
 800d8d8:	3e01      	subs	r6, #1
 800d8da:	4638      	mov	r0, r7
 800d8dc:	612e      	str	r6, [r5, #16]
 800d8de:	4621      	mov	r1, r4
 800d8e0:	f7ff fdda 	bl	800d498 <_Bfree>
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	e7c5      	b.n	800d87e <__lshift+0x4a>
 800d8f2:	3904      	subs	r1, #4
 800d8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8fc:	459c      	cmp	ip, r3
 800d8fe:	d8f9      	bhi.n	800d8f4 <__lshift+0xc0>
 800d900:	e7ea      	b.n	800d8d8 <__lshift+0xa4>
 800d902:	bf00      	nop
 800d904:	0800f89c 	.word	0x0800f89c
 800d908:	0800f8ad 	.word	0x0800f8ad

0800d90c <__mcmp>:
 800d90c:	690a      	ldr	r2, [r1, #16]
 800d90e:	4603      	mov	r3, r0
 800d910:	6900      	ldr	r0, [r0, #16]
 800d912:	1a80      	subs	r0, r0, r2
 800d914:	b530      	push	{r4, r5, lr}
 800d916:	d10e      	bne.n	800d936 <__mcmp+0x2a>
 800d918:	3314      	adds	r3, #20
 800d91a:	3114      	adds	r1, #20
 800d91c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d920:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d92c:	4295      	cmp	r5, r2
 800d92e:	d003      	beq.n	800d938 <__mcmp+0x2c>
 800d930:	d205      	bcs.n	800d93e <__mcmp+0x32>
 800d932:	f04f 30ff 	mov.w	r0, #4294967295
 800d936:	bd30      	pop	{r4, r5, pc}
 800d938:	42a3      	cmp	r3, r4
 800d93a:	d3f3      	bcc.n	800d924 <__mcmp+0x18>
 800d93c:	e7fb      	b.n	800d936 <__mcmp+0x2a>
 800d93e:	2001      	movs	r0, #1
 800d940:	e7f9      	b.n	800d936 <__mcmp+0x2a>
	...

0800d944 <__mdiff>:
 800d944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d948:	4689      	mov	r9, r1
 800d94a:	4606      	mov	r6, r0
 800d94c:	4611      	mov	r1, r2
 800d94e:	4648      	mov	r0, r9
 800d950:	4614      	mov	r4, r2
 800d952:	f7ff ffdb 	bl	800d90c <__mcmp>
 800d956:	1e05      	subs	r5, r0, #0
 800d958:	d112      	bne.n	800d980 <__mdiff+0x3c>
 800d95a:	4629      	mov	r1, r5
 800d95c:	4630      	mov	r0, r6
 800d95e:	f7ff fd5b 	bl	800d418 <_Balloc>
 800d962:	4602      	mov	r2, r0
 800d964:	b928      	cbnz	r0, 800d972 <__mdiff+0x2e>
 800d966:	4b3f      	ldr	r3, [pc, #252]	@ (800da64 <__mdiff+0x120>)
 800d968:	f240 2137 	movw	r1, #567	@ 0x237
 800d96c:	483e      	ldr	r0, [pc, #248]	@ (800da68 <__mdiff+0x124>)
 800d96e:	f000 fb03 	bl	800df78 <__assert_func>
 800d972:	2301      	movs	r3, #1
 800d974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d978:	4610      	mov	r0, r2
 800d97a:	b003      	add	sp, #12
 800d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d980:	bfbc      	itt	lt
 800d982:	464b      	movlt	r3, r9
 800d984:	46a1      	movlt	r9, r4
 800d986:	4630      	mov	r0, r6
 800d988:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d98c:	bfba      	itte	lt
 800d98e:	461c      	movlt	r4, r3
 800d990:	2501      	movlt	r5, #1
 800d992:	2500      	movge	r5, #0
 800d994:	f7ff fd40 	bl	800d418 <_Balloc>
 800d998:	4602      	mov	r2, r0
 800d99a:	b918      	cbnz	r0, 800d9a4 <__mdiff+0x60>
 800d99c:	4b31      	ldr	r3, [pc, #196]	@ (800da64 <__mdiff+0x120>)
 800d99e:	f240 2145 	movw	r1, #581	@ 0x245
 800d9a2:	e7e3      	b.n	800d96c <__mdiff+0x28>
 800d9a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d9a8:	6926      	ldr	r6, [r4, #16]
 800d9aa:	60c5      	str	r5, [r0, #12]
 800d9ac:	f109 0310 	add.w	r3, r9, #16
 800d9b0:	f109 0514 	add.w	r5, r9, #20
 800d9b4:	f104 0e14 	add.w	lr, r4, #20
 800d9b8:	f100 0b14 	add.w	fp, r0, #20
 800d9bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d9c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	46d9      	mov	r9, fp
 800d9c8:	f04f 0c00 	mov.w	ip, #0
 800d9cc:	9b01      	ldr	r3, [sp, #4]
 800d9ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d9d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d9d6:	9301      	str	r3, [sp, #4]
 800d9d8:	fa1f f38a 	uxth.w	r3, sl
 800d9dc:	4619      	mov	r1, r3
 800d9de:	b283      	uxth	r3, r0
 800d9e0:	1acb      	subs	r3, r1, r3
 800d9e2:	0c00      	lsrs	r0, r0, #16
 800d9e4:	4463      	add	r3, ip
 800d9e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9f4:	4576      	cmp	r6, lr
 800d9f6:	f849 3b04 	str.w	r3, [r9], #4
 800d9fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9fe:	d8e5      	bhi.n	800d9cc <__mdiff+0x88>
 800da00:	1b33      	subs	r3, r6, r4
 800da02:	3b15      	subs	r3, #21
 800da04:	f023 0303 	bic.w	r3, r3, #3
 800da08:	3415      	adds	r4, #21
 800da0a:	3304      	adds	r3, #4
 800da0c:	42a6      	cmp	r6, r4
 800da0e:	bf38      	it	cc
 800da10:	2304      	movcc	r3, #4
 800da12:	441d      	add	r5, r3
 800da14:	445b      	add	r3, fp
 800da16:	461e      	mov	r6, r3
 800da18:	462c      	mov	r4, r5
 800da1a:	4544      	cmp	r4, r8
 800da1c:	d30e      	bcc.n	800da3c <__mdiff+0xf8>
 800da1e:	f108 0103 	add.w	r1, r8, #3
 800da22:	1b49      	subs	r1, r1, r5
 800da24:	f021 0103 	bic.w	r1, r1, #3
 800da28:	3d03      	subs	r5, #3
 800da2a:	45a8      	cmp	r8, r5
 800da2c:	bf38      	it	cc
 800da2e:	2100      	movcc	r1, #0
 800da30:	440b      	add	r3, r1
 800da32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da36:	b191      	cbz	r1, 800da5e <__mdiff+0x11a>
 800da38:	6117      	str	r7, [r2, #16]
 800da3a:	e79d      	b.n	800d978 <__mdiff+0x34>
 800da3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800da40:	46e6      	mov	lr, ip
 800da42:	0c08      	lsrs	r0, r1, #16
 800da44:	fa1c fc81 	uxtah	ip, ip, r1
 800da48:	4471      	add	r1, lr
 800da4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da4e:	b289      	uxth	r1, r1
 800da50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da54:	f846 1b04 	str.w	r1, [r6], #4
 800da58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da5c:	e7dd      	b.n	800da1a <__mdiff+0xd6>
 800da5e:	3f01      	subs	r7, #1
 800da60:	e7e7      	b.n	800da32 <__mdiff+0xee>
 800da62:	bf00      	nop
 800da64:	0800f89c 	.word	0x0800f89c
 800da68:	0800f8ad 	.word	0x0800f8ad

0800da6c <__d2b>:
 800da6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da70:	460f      	mov	r7, r1
 800da72:	2101      	movs	r1, #1
 800da74:	ec59 8b10 	vmov	r8, r9, d0
 800da78:	4616      	mov	r6, r2
 800da7a:	f7ff fccd 	bl	800d418 <_Balloc>
 800da7e:	4604      	mov	r4, r0
 800da80:	b930      	cbnz	r0, 800da90 <__d2b+0x24>
 800da82:	4602      	mov	r2, r0
 800da84:	4b23      	ldr	r3, [pc, #140]	@ (800db14 <__d2b+0xa8>)
 800da86:	4824      	ldr	r0, [pc, #144]	@ (800db18 <__d2b+0xac>)
 800da88:	f240 310f 	movw	r1, #783	@ 0x30f
 800da8c:	f000 fa74 	bl	800df78 <__assert_func>
 800da90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da98:	b10d      	cbz	r5, 800da9e <__d2b+0x32>
 800da9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	f1b8 0300 	subs.w	r3, r8, #0
 800daa4:	d023      	beq.n	800daee <__d2b+0x82>
 800daa6:	4668      	mov	r0, sp
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	f7ff fd7c 	bl	800d5a6 <__lo0bits>
 800daae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dab2:	b1d0      	cbz	r0, 800daea <__d2b+0x7e>
 800dab4:	f1c0 0320 	rsb	r3, r0, #32
 800dab8:	fa02 f303 	lsl.w	r3, r2, r3
 800dabc:	430b      	orrs	r3, r1
 800dabe:	40c2      	lsrs	r2, r0
 800dac0:	6163      	str	r3, [r4, #20]
 800dac2:	9201      	str	r2, [sp, #4]
 800dac4:	9b01      	ldr	r3, [sp, #4]
 800dac6:	61a3      	str	r3, [r4, #24]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	bf0c      	ite	eq
 800dacc:	2201      	moveq	r2, #1
 800dace:	2202      	movne	r2, #2
 800dad0:	6122      	str	r2, [r4, #16]
 800dad2:	b1a5      	cbz	r5, 800dafe <__d2b+0x92>
 800dad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dad8:	4405      	add	r5, r0
 800dada:	603d      	str	r5, [r7, #0]
 800dadc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dae0:	6030      	str	r0, [r6, #0]
 800dae2:	4620      	mov	r0, r4
 800dae4:	b003      	add	sp, #12
 800dae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daea:	6161      	str	r1, [r4, #20]
 800daec:	e7ea      	b.n	800dac4 <__d2b+0x58>
 800daee:	a801      	add	r0, sp, #4
 800daf0:	f7ff fd59 	bl	800d5a6 <__lo0bits>
 800daf4:	9b01      	ldr	r3, [sp, #4]
 800daf6:	6163      	str	r3, [r4, #20]
 800daf8:	3020      	adds	r0, #32
 800dafa:	2201      	movs	r2, #1
 800dafc:	e7e8      	b.n	800dad0 <__d2b+0x64>
 800dafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800db06:	6038      	str	r0, [r7, #0]
 800db08:	6918      	ldr	r0, [r3, #16]
 800db0a:	f7ff fd2d 	bl	800d568 <__hi0bits>
 800db0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db12:	e7e5      	b.n	800dae0 <__d2b+0x74>
 800db14:	0800f89c 	.word	0x0800f89c
 800db18:	0800f8ad 	.word	0x0800f8ad

0800db1c <__ssputs_r>:
 800db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	688e      	ldr	r6, [r1, #8]
 800db22:	461f      	mov	r7, r3
 800db24:	42be      	cmp	r6, r7
 800db26:	680b      	ldr	r3, [r1, #0]
 800db28:	4682      	mov	sl, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	4690      	mov	r8, r2
 800db2e:	d82d      	bhi.n	800db8c <__ssputs_r+0x70>
 800db30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db38:	d026      	beq.n	800db88 <__ssputs_r+0x6c>
 800db3a:	6965      	ldr	r5, [r4, #20]
 800db3c:	6909      	ldr	r1, [r1, #16]
 800db3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db42:	eba3 0901 	sub.w	r9, r3, r1
 800db46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db4a:	1c7b      	adds	r3, r7, #1
 800db4c:	444b      	add	r3, r9
 800db4e:	106d      	asrs	r5, r5, #1
 800db50:	429d      	cmp	r5, r3
 800db52:	bf38      	it	cc
 800db54:	461d      	movcc	r5, r3
 800db56:	0553      	lsls	r3, r2, #21
 800db58:	d527      	bpl.n	800dbaa <__ssputs_r+0x8e>
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7ff fbd0 	bl	800d300 <_malloc_r>
 800db60:	4606      	mov	r6, r0
 800db62:	b360      	cbz	r0, 800dbbe <__ssputs_r+0xa2>
 800db64:	6921      	ldr	r1, [r4, #16]
 800db66:	464a      	mov	r2, r9
 800db68:	f7fe fcf9 	bl	800c55e <memcpy>
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db76:	81a3      	strh	r3, [r4, #12]
 800db78:	6126      	str	r6, [r4, #16]
 800db7a:	6165      	str	r5, [r4, #20]
 800db7c:	444e      	add	r6, r9
 800db7e:	eba5 0509 	sub.w	r5, r5, r9
 800db82:	6026      	str	r6, [r4, #0]
 800db84:	60a5      	str	r5, [r4, #8]
 800db86:	463e      	mov	r6, r7
 800db88:	42be      	cmp	r6, r7
 800db8a:	d900      	bls.n	800db8e <__ssputs_r+0x72>
 800db8c:	463e      	mov	r6, r7
 800db8e:	6820      	ldr	r0, [r4, #0]
 800db90:	4632      	mov	r2, r6
 800db92:	4641      	mov	r1, r8
 800db94:	f000 f9c6 	bl	800df24 <memmove>
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	1b9b      	subs	r3, r3, r6
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	4433      	add	r3, r6
 800dba2:	6023      	str	r3, [r4, #0]
 800dba4:	2000      	movs	r0, #0
 800dba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbaa:	462a      	mov	r2, r5
 800dbac:	f000 fa28 	bl	800e000 <_realloc_r>
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d1e0      	bne.n	800db78 <__ssputs_r+0x5c>
 800dbb6:	6921      	ldr	r1, [r4, #16]
 800dbb8:	4650      	mov	r0, sl
 800dbba:	f7ff fb2d 	bl	800d218 <_free_r>
 800dbbe:	230c      	movs	r3, #12
 800dbc0:	f8ca 3000 	str.w	r3, [sl]
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbca:	81a3      	strh	r3, [r4, #12]
 800dbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd0:	e7e9      	b.n	800dba6 <__ssputs_r+0x8a>
	...

0800dbd4 <_svfiprintf_r>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	4698      	mov	r8, r3
 800dbda:	898b      	ldrh	r3, [r1, #12]
 800dbdc:	061b      	lsls	r3, r3, #24
 800dbde:	b09d      	sub	sp, #116	@ 0x74
 800dbe0:	4607      	mov	r7, r0
 800dbe2:	460d      	mov	r5, r1
 800dbe4:	4614      	mov	r4, r2
 800dbe6:	d510      	bpl.n	800dc0a <_svfiprintf_r+0x36>
 800dbe8:	690b      	ldr	r3, [r1, #16]
 800dbea:	b973      	cbnz	r3, 800dc0a <_svfiprintf_r+0x36>
 800dbec:	2140      	movs	r1, #64	@ 0x40
 800dbee:	f7ff fb87 	bl	800d300 <_malloc_r>
 800dbf2:	6028      	str	r0, [r5, #0]
 800dbf4:	6128      	str	r0, [r5, #16]
 800dbf6:	b930      	cbnz	r0, 800dc06 <_svfiprintf_r+0x32>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	603b      	str	r3, [r7, #0]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dc00:	b01d      	add	sp, #116	@ 0x74
 800dc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc06:	2340      	movs	r3, #64	@ 0x40
 800dc08:	616b      	str	r3, [r5, #20]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc0e:	2320      	movs	r3, #32
 800dc10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc14:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc18:	2330      	movs	r3, #48	@ 0x30
 800dc1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ddb8 <_svfiprintf_r+0x1e4>
 800dc1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc22:	f04f 0901 	mov.w	r9, #1
 800dc26:	4623      	mov	r3, r4
 800dc28:	469a      	mov	sl, r3
 800dc2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc2e:	b10a      	cbz	r2, 800dc34 <_svfiprintf_r+0x60>
 800dc30:	2a25      	cmp	r2, #37	@ 0x25
 800dc32:	d1f9      	bne.n	800dc28 <_svfiprintf_r+0x54>
 800dc34:	ebba 0b04 	subs.w	fp, sl, r4
 800dc38:	d00b      	beq.n	800dc52 <_svfiprintf_r+0x7e>
 800dc3a:	465b      	mov	r3, fp
 800dc3c:	4622      	mov	r2, r4
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4638      	mov	r0, r7
 800dc42:	f7ff ff6b 	bl	800db1c <__ssputs_r>
 800dc46:	3001      	adds	r0, #1
 800dc48:	f000 80a7 	beq.w	800dd9a <_svfiprintf_r+0x1c6>
 800dc4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc4e:	445a      	add	r2, fp
 800dc50:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc52:	f89a 3000 	ldrb.w	r3, [sl]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f000 809f 	beq.w	800dd9a <_svfiprintf_r+0x1c6>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc66:	f10a 0a01 	add.w	sl, sl, #1
 800dc6a:	9304      	str	r3, [sp, #16]
 800dc6c:	9307      	str	r3, [sp, #28]
 800dc6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc72:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc74:	4654      	mov	r4, sl
 800dc76:	2205      	movs	r2, #5
 800dc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc7c:	484e      	ldr	r0, [pc, #312]	@ (800ddb8 <_svfiprintf_r+0x1e4>)
 800dc7e:	f7f2 faa7 	bl	80001d0 <memchr>
 800dc82:	9a04      	ldr	r2, [sp, #16]
 800dc84:	b9d8      	cbnz	r0, 800dcbe <_svfiprintf_r+0xea>
 800dc86:	06d0      	lsls	r0, r2, #27
 800dc88:	bf44      	itt	mi
 800dc8a:	2320      	movmi	r3, #32
 800dc8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc90:	0711      	lsls	r1, r2, #28
 800dc92:	bf44      	itt	mi
 800dc94:	232b      	movmi	r3, #43	@ 0x2b
 800dc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dca0:	d015      	beq.n	800dcce <_svfiprintf_r+0xfa>
 800dca2:	9a07      	ldr	r2, [sp, #28]
 800dca4:	4654      	mov	r4, sl
 800dca6:	2000      	movs	r0, #0
 800dca8:	f04f 0c0a 	mov.w	ip, #10
 800dcac:	4621      	mov	r1, r4
 800dcae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcb2:	3b30      	subs	r3, #48	@ 0x30
 800dcb4:	2b09      	cmp	r3, #9
 800dcb6:	d94b      	bls.n	800dd50 <_svfiprintf_r+0x17c>
 800dcb8:	b1b0      	cbz	r0, 800dce8 <_svfiprintf_r+0x114>
 800dcba:	9207      	str	r2, [sp, #28]
 800dcbc:	e014      	b.n	800dce8 <_svfiprintf_r+0x114>
 800dcbe:	eba0 0308 	sub.w	r3, r0, r8
 800dcc2:	fa09 f303 	lsl.w	r3, r9, r3
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	9304      	str	r3, [sp, #16]
 800dcca:	46a2      	mov	sl, r4
 800dccc:	e7d2      	b.n	800dc74 <_svfiprintf_r+0xa0>
 800dcce:	9b03      	ldr	r3, [sp, #12]
 800dcd0:	1d19      	adds	r1, r3, #4
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	9103      	str	r1, [sp, #12]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfbb      	ittet	lt
 800dcda:	425b      	neglt	r3, r3
 800dcdc:	f042 0202 	orrlt.w	r2, r2, #2
 800dce0:	9307      	strge	r3, [sp, #28]
 800dce2:	9307      	strlt	r3, [sp, #28]
 800dce4:	bfb8      	it	lt
 800dce6:	9204      	strlt	r2, [sp, #16]
 800dce8:	7823      	ldrb	r3, [r4, #0]
 800dcea:	2b2e      	cmp	r3, #46	@ 0x2e
 800dcec:	d10a      	bne.n	800dd04 <_svfiprintf_r+0x130>
 800dcee:	7863      	ldrb	r3, [r4, #1]
 800dcf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcf2:	d132      	bne.n	800dd5a <_svfiprintf_r+0x186>
 800dcf4:	9b03      	ldr	r3, [sp, #12]
 800dcf6:	1d1a      	adds	r2, r3, #4
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	9203      	str	r2, [sp, #12]
 800dcfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd00:	3402      	adds	r4, #2
 800dd02:	9305      	str	r3, [sp, #20]
 800dd04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ddc8 <_svfiprintf_r+0x1f4>
 800dd08:	7821      	ldrb	r1, [r4, #0]
 800dd0a:	2203      	movs	r2, #3
 800dd0c:	4650      	mov	r0, sl
 800dd0e:	f7f2 fa5f 	bl	80001d0 <memchr>
 800dd12:	b138      	cbz	r0, 800dd24 <_svfiprintf_r+0x150>
 800dd14:	9b04      	ldr	r3, [sp, #16]
 800dd16:	eba0 000a 	sub.w	r0, r0, sl
 800dd1a:	2240      	movs	r2, #64	@ 0x40
 800dd1c:	4082      	lsls	r2, r0
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	3401      	adds	r4, #1
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd28:	4824      	ldr	r0, [pc, #144]	@ (800ddbc <_svfiprintf_r+0x1e8>)
 800dd2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd2e:	2206      	movs	r2, #6
 800dd30:	f7f2 fa4e 	bl	80001d0 <memchr>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d036      	beq.n	800dda6 <_svfiprintf_r+0x1d2>
 800dd38:	4b21      	ldr	r3, [pc, #132]	@ (800ddc0 <_svfiprintf_r+0x1ec>)
 800dd3a:	bb1b      	cbnz	r3, 800dd84 <_svfiprintf_r+0x1b0>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	3307      	adds	r3, #7
 800dd40:	f023 0307 	bic.w	r3, r3, #7
 800dd44:	3308      	adds	r3, #8
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	4433      	add	r3, r6
 800dd4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd4e:	e76a      	b.n	800dc26 <_svfiprintf_r+0x52>
 800dd50:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd54:	460c      	mov	r4, r1
 800dd56:	2001      	movs	r0, #1
 800dd58:	e7a8      	b.n	800dcac <_svfiprintf_r+0xd8>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	3401      	adds	r4, #1
 800dd5e:	9305      	str	r3, [sp, #20]
 800dd60:	4619      	mov	r1, r3
 800dd62:	f04f 0c0a 	mov.w	ip, #10
 800dd66:	4620      	mov	r0, r4
 800dd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd6c:	3a30      	subs	r2, #48	@ 0x30
 800dd6e:	2a09      	cmp	r2, #9
 800dd70:	d903      	bls.n	800dd7a <_svfiprintf_r+0x1a6>
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0c6      	beq.n	800dd04 <_svfiprintf_r+0x130>
 800dd76:	9105      	str	r1, [sp, #20]
 800dd78:	e7c4      	b.n	800dd04 <_svfiprintf_r+0x130>
 800dd7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd7e:	4604      	mov	r4, r0
 800dd80:	2301      	movs	r3, #1
 800dd82:	e7f0      	b.n	800dd66 <_svfiprintf_r+0x192>
 800dd84:	ab03      	add	r3, sp, #12
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	462a      	mov	r2, r5
 800dd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc4 <_svfiprintf_r+0x1f0>)
 800dd8c:	a904      	add	r1, sp, #16
 800dd8e:	4638      	mov	r0, r7
 800dd90:	f7fd fe32 	bl	800b9f8 <_printf_float>
 800dd94:	1c42      	adds	r2, r0, #1
 800dd96:	4606      	mov	r6, r0
 800dd98:	d1d6      	bne.n	800dd48 <_svfiprintf_r+0x174>
 800dd9a:	89ab      	ldrh	r3, [r5, #12]
 800dd9c:	065b      	lsls	r3, r3, #25
 800dd9e:	f53f af2d 	bmi.w	800dbfc <_svfiprintf_r+0x28>
 800dda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dda4:	e72c      	b.n	800dc00 <_svfiprintf_r+0x2c>
 800dda6:	ab03      	add	r3, sp, #12
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	462a      	mov	r2, r5
 800ddac:	4b05      	ldr	r3, [pc, #20]	@ (800ddc4 <_svfiprintf_r+0x1f0>)
 800ddae:	a904      	add	r1, sp, #16
 800ddb0:	4638      	mov	r0, r7
 800ddb2:	f7fe f8b9 	bl	800bf28 <_printf_i>
 800ddb6:	e7ed      	b.n	800dd94 <_svfiprintf_r+0x1c0>
 800ddb8:	0800fa08 	.word	0x0800fa08
 800ddbc:	0800fa12 	.word	0x0800fa12
 800ddc0:	0800b9f9 	.word	0x0800b9f9
 800ddc4:	0800db1d 	.word	0x0800db1d
 800ddc8:	0800fa0e 	.word	0x0800fa0e

0800ddcc <__sflush_r>:
 800ddcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd4:	0716      	lsls	r6, r2, #28
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	460c      	mov	r4, r1
 800ddda:	d454      	bmi.n	800de86 <__sflush_r+0xba>
 800dddc:	684b      	ldr	r3, [r1, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dc02      	bgt.n	800dde8 <__sflush_r+0x1c>
 800dde2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd48      	ble.n	800de7a <__sflush_r+0xae>
 800dde8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddea:	2e00      	cmp	r6, #0
 800ddec:	d045      	beq.n	800de7a <__sflush_r+0xae>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ddf4:	682f      	ldr	r7, [r5, #0]
 800ddf6:	6a21      	ldr	r1, [r4, #32]
 800ddf8:	602b      	str	r3, [r5, #0]
 800ddfa:	d030      	beq.n	800de5e <__sflush_r+0x92>
 800ddfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	0759      	lsls	r1, r3, #29
 800de02:	d505      	bpl.n	800de10 <__sflush_r+0x44>
 800de04:	6863      	ldr	r3, [r4, #4]
 800de06:	1ad2      	subs	r2, r2, r3
 800de08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de0a:	b10b      	cbz	r3, 800de10 <__sflush_r+0x44>
 800de0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de0e:	1ad2      	subs	r2, r2, r3
 800de10:	2300      	movs	r3, #0
 800de12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de14:	6a21      	ldr	r1, [r4, #32]
 800de16:	4628      	mov	r0, r5
 800de18:	47b0      	blx	r6
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	d106      	bne.n	800de2e <__sflush_r+0x62>
 800de20:	6829      	ldr	r1, [r5, #0]
 800de22:	291d      	cmp	r1, #29
 800de24:	d82b      	bhi.n	800de7e <__sflush_r+0xb2>
 800de26:	4a2a      	ldr	r2, [pc, #168]	@ (800ded0 <__sflush_r+0x104>)
 800de28:	410a      	asrs	r2, r1
 800de2a:	07d6      	lsls	r6, r2, #31
 800de2c:	d427      	bmi.n	800de7e <__sflush_r+0xb2>
 800de2e:	2200      	movs	r2, #0
 800de30:	6062      	str	r2, [r4, #4]
 800de32:	04d9      	lsls	r1, r3, #19
 800de34:	6922      	ldr	r2, [r4, #16]
 800de36:	6022      	str	r2, [r4, #0]
 800de38:	d504      	bpl.n	800de44 <__sflush_r+0x78>
 800de3a:	1c42      	adds	r2, r0, #1
 800de3c:	d101      	bne.n	800de42 <__sflush_r+0x76>
 800de3e:	682b      	ldr	r3, [r5, #0]
 800de40:	b903      	cbnz	r3, 800de44 <__sflush_r+0x78>
 800de42:	6560      	str	r0, [r4, #84]	@ 0x54
 800de44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de46:	602f      	str	r7, [r5, #0]
 800de48:	b1b9      	cbz	r1, 800de7a <__sflush_r+0xae>
 800de4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de4e:	4299      	cmp	r1, r3
 800de50:	d002      	beq.n	800de58 <__sflush_r+0x8c>
 800de52:	4628      	mov	r0, r5
 800de54:	f7ff f9e0 	bl	800d218 <_free_r>
 800de58:	2300      	movs	r3, #0
 800de5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800de5c:	e00d      	b.n	800de7a <__sflush_r+0xae>
 800de5e:	2301      	movs	r3, #1
 800de60:	4628      	mov	r0, r5
 800de62:	47b0      	blx	r6
 800de64:	4602      	mov	r2, r0
 800de66:	1c50      	adds	r0, r2, #1
 800de68:	d1c9      	bne.n	800ddfe <__sflush_r+0x32>
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d0c6      	beq.n	800ddfe <__sflush_r+0x32>
 800de70:	2b1d      	cmp	r3, #29
 800de72:	d001      	beq.n	800de78 <__sflush_r+0xac>
 800de74:	2b16      	cmp	r3, #22
 800de76:	d11e      	bne.n	800deb6 <__sflush_r+0xea>
 800de78:	602f      	str	r7, [r5, #0]
 800de7a:	2000      	movs	r0, #0
 800de7c:	e022      	b.n	800dec4 <__sflush_r+0xf8>
 800de7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de82:	b21b      	sxth	r3, r3
 800de84:	e01b      	b.n	800debe <__sflush_r+0xf2>
 800de86:	690f      	ldr	r7, [r1, #16]
 800de88:	2f00      	cmp	r7, #0
 800de8a:	d0f6      	beq.n	800de7a <__sflush_r+0xae>
 800de8c:	0793      	lsls	r3, r2, #30
 800de8e:	680e      	ldr	r6, [r1, #0]
 800de90:	bf08      	it	eq
 800de92:	694b      	ldreq	r3, [r1, #20]
 800de94:	600f      	str	r7, [r1, #0]
 800de96:	bf18      	it	ne
 800de98:	2300      	movne	r3, #0
 800de9a:	eba6 0807 	sub.w	r8, r6, r7
 800de9e:	608b      	str	r3, [r1, #8]
 800dea0:	f1b8 0f00 	cmp.w	r8, #0
 800dea4:	dde9      	ble.n	800de7a <__sflush_r+0xae>
 800dea6:	6a21      	ldr	r1, [r4, #32]
 800dea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800deaa:	4643      	mov	r3, r8
 800deac:	463a      	mov	r2, r7
 800deae:	4628      	mov	r0, r5
 800deb0:	47b0      	blx	r6
 800deb2:	2800      	cmp	r0, #0
 800deb4:	dc08      	bgt.n	800dec8 <__sflush_r+0xfc>
 800deb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800debe:	81a3      	strh	r3, [r4, #12]
 800dec0:	f04f 30ff 	mov.w	r0, #4294967295
 800dec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec8:	4407      	add	r7, r0
 800deca:	eba8 0800 	sub.w	r8, r8, r0
 800dece:	e7e7      	b.n	800dea0 <__sflush_r+0xd4>
 800ded0:	dfbffffe 	.word	0xdfbffffe

0800ded4 <_fflush_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	690b      	ldr	r3, [r1, #16]
 800ded8:	4605      	mov	r5, r0
 800deda:	460c      	mov	r4, r1
 800dedc:	b913      	cbnz	r3, 800dee4 <_fflush_r+0x10>
 800dede:	2500      	movs	r5, #0
 800dee0:	4628      	mov	r0, r5
 800dee2:	bd38      	pop	{r3, r4, r5, pc}
 800dee4:	b118      	cbz	r0, 800deee <_fflush_r+0x1a>
 800dee6:	6a03      	ldr	r3, [r0, #32]
 800dee8:	b90b      	cbnz	r3, 800deee <_fflush_r+0x1a>
 800deea:	f7fe f9c9 	bl	800c280 <__sinit>
 800deee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d0f3      	beq.n	800dede <_fflush_r+0xa>
 800def6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800def8:	07d0      	lsls	r0, r2, #31
 800defa:	d404      	bmi.n	800df06 <_fflush_r+0x32>
 800defc:	0599      	lsls	r1, r3, #22
 800defe:	d402      	bmi.n	800df06 <_fflush_r+0x32>
 800df00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df02:	f7fe fb2a 	bl	800c55a <__retarget_lock_acquire_recursive>
 800df06:	4628      	mov	r0, r5
 800df08:	4621      	mov	r1, r4
 800df0a:	f7ff ff5f 	bl	800ddcc <__sflush_r>
 800df0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df10:	07da      	lsls	r2, r3, #31
 800df12:	4605      	mov	r5, r0
 800df14:	d4e4      	bmi.n	800dee0 <_fflush_r+0xc>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	059b      	lsls	r3, r3, #22
 800df1a:	d4e1      	bmi.n	800dee0 <_fflush_r+0xc>
 800df1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df1e:	f7fe fb1d 	bl	800c55c <__retarget_lock_release_recursive>
 800df22:	e7dd      	b.n	800dee0 <_fflush_r+0xc>

0800df24 <memmove>:
 800df24:	4288      	cmp	r0, r1
 800df26:	b510      	push	{r4, lr}
 800df28:	eb01 0402 	add.w	r4, r1, r2
 800df2c:	d902      	bls.n	800df34 <memmove+0x10>
 800df2e:	4284      	cmp	r4, r0
 800df30:	4623      	mov	r3, r4
 800df32:	d807      	bhi.n	800df44 <memmove+0x20>
 800df34:	1e43      	subs	r3, r0, #1
 800df36:	42a1      	cmp	r1, r4
 800df38:	d008      	beq.n	800df4c <memmove+0x28>
 800df3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df42:	e7f8      	b.n	800df36 <memmove+0x12>
 800df44:	4402      	add	r2, r0
 800df46:	4601      	mov	r1, r0
 800df48:	428a      	cmp	r2, r1
 800df4a:	d100      	bne.n	800df4e <memmove+0x2a>
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df56:	e7f7      	b.n	800df48 <memmove+0x24>

0800df58 <_sbrk_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4d06      	ldr	r5, [pc, #24]	@ (800df74 <_sbrk_r+0x1c>)
 800df5c:	2300      	movs	r3, #0
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	602b      	str	r3, [r5, #0]
 800df64:	f7f6 fa5c 	bl	8004420 <_sbrk>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_sbrk_r+0x1a>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_sbrk_r+0x1a>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	20005694 	.word	0x20005694

0800df78 <__assert_func>:
 800df78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df7a:	4614      	mov	r4, r2
 800df7c:	461a      	mov	r2, r3
 800df7e:	4b09      	ldr	r3, [pc, #36]	@ (800dfa4 <__assert_func+0x2c>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4605      	mov	r5, r0
 800df84:	68d8      	ldr	r0, [r3, #12]
 800df86:	b954      	cbnz	r4, 800df9e <__assert_func+0x26>
 800df88:	4b07      	ldr	r3, [pc, #28]	@ (800dfa8 <__assert_func+0x30>)
 800df8a:	461c      	mov	r4, r3
 800df8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df90:	9100      	str	r1, [sp, #0]
 800df92:	462b      	mov	r3, r5
 800df94:	4905      	ldr	r1, [pc, #20]	@ (800dfac <__assert_func+0x34>)
 800df96:	f000 f86f 	bl	800e078 <fiprintf>
 800df9a:	f000 f87f 	bl	800e09c <abort>
 800df9e:	4b04      	ldr	r3, [pc, #16]	@ (800dfb0 <__assert_func+0x38>)
 800dfa0:	e7f4      	b.n	800df8c <__assert_func+0x14>
 800dfa2:	bf00      	nop
 800dfa4:	2000003c 	.word	0x2000003c
 800dfa8:	0800fa5e 	.word	0x0800fa5e
 800dfac:	0800fa30 	.word	0x0800fa30
 800dfb0:	0800fa23 	.word	0x0800fa23

0800dfb4 <_calloc_r>:
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	fba1 5402 	umull	r5, r4, r1, r2
 800dfba:	b93c      	cbnz	r4, 800dfcc <_calloc_r+0x18>
 800dfbc:	4629      	mov	r1, r5
 800dfbe:	f7ff f99f 	bl	800d300 <_malloc_r>
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	b928      	cbnz	r0, 800dfd2 <_calloc_r+0x1e>
 800dfc6:	2600      	movs	r6, #0
 800dfc8:	4630      	mov	r0, r6
 800dfca:	bd70      	pop	{r4, r5, r6, pc}
 800dfcc:	220c      	movs	r2, #12
 800dfce:	6002      	str	r2, [r0, #0]
 800dfd0:	e7f9      	b.n	800dfc6 <_calloc_r+0x12>
 800dfd2:	462a      	mov	r2, r5
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	f7fe f9ed 	bl	800c3b4 <memset>
 800dfda:	e7f5      	b.n	800dfc8 <_calloc_r+0x14>

0800dfdc <__ascii_mbtowc>:
 800dfdc:	b082      	sub	sp, #8
 800dfde:	b901      	cbnz	r1, 800dfe2 <__ascii_mbtowc+0x6>
 800dfe0:	a901      	add	r1, sp, #4
 800dfe2:	b142      	cbz	r2, 800dff6 <__ascii_mbtowc+0x1a>
 800dfe4:	b14b      	cbz	r3, 800dffa <__ascii_mbtowc+0x1e>
 800dfe6:	7813      	ldrb	r3, [r2, #0]
 800dfe8:	600b      	str	r3, [r1, #0]
 800dfea:	7812      	ldrb	r2, [r2, #0]
 800dfec:	1e10      	subs	r0, r2, #0
 800dfee:	bf18      	it	ne
 800dff0:	2001      	movne	r0, #1
 800dff2:	b002      	add	sp, #8
 800dff4:	4770      	bx	lr
 800dff6:	4610      	mov	r0, r2
 800dff8:	e7fb      	b.n	800dff2 <__ascii_mbtowc+0x16>
 800dffa:	f06f 0001 	mvn.w	r0, #1
 800dffe:	e7f8      	b.n	800dff2 <__ascii_mbtowc+0x16>

0800e000 <_realloc_r>:
 800e000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e004:	4680      	mov	r8, r0
 800e006:	4615      	mov	r5, r2
 800e008:	460c      	mov	r4, r1
 800e00a:	b921      	cbnz	r1, 800e016 <_realloc_r+0x16>
 800e00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	4611      	mov	r1, r2
 800e012:	f7ff b975 	b.w	800d300 <_malloc_r>
 800e016:	b92a      	cbnz	r2, 800e024 <_realloc_r+0x24>
 800e018:	f7ff f8fe 	bl	800d218 <_free_r>
 800e01c:	2400      	movs	r4, #0
 800e01e:	4620      	mov	r0, r4
 800e020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e024:	f000 f841 	bl	800e0aa <_malloc_usable_size_r>
 800e028:	4285      	cmp	r5, r0
 800e02a:	4606      	mov	r6, r0
 800e02c:	d802      	bhi.n	800e034 <_realloc_r+0x34>
 800e02e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e032:	d8f4      	bhi.n	800e01e <_realloc_r+0x1e>
 800e034:	4629      	mov	r1, r5
 800e036:	4640      	mov	r0, r8
 800e038:	f7ff f962 	bl	800d300 <_malloc_r>
 800e03c:	4607      	mov	r7, r0
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0ec      	beq.n	800e01c <_realloc_r+0x1c>
 800e042:	42b5      	cmp	r5, r6
 800e044:	462a      	mov	r2, r5
 800e046:	4621      	mov	r1, r4
 800e048:	bf28      	it	cs
 800e04a:	4632      	movcs	r2, r6
 800e04c:	f7fe fa87 	bl	800c55e <memcpy>
 800e050:	4621      	mov	r1, r4
 800e052:	4640      	mov	r0, r8
 800e054:	f7ff f8e0 	bl	800d218 <_free_r>
 800e058:	463c      	mov	r4, r7
 800e05a:	e7e0      	b.n	800e01e <_realloc_r+0x1e>

0800e05c <__ascii_wctomb>:
 800e05c:	4603      	mov	r3, r0
 800e05e:	4608      	mov	r0, r1
 800e060:	b141      	cbz	r1, 800e074 <__ascii_wctomb+0x18>
 800e062:	2aff      	cmp	r2, #255	@ 0xff
 800e064:	d904      	bls.n	800e070 <__ascii_wctomb+0x14>
 800e066:	228a      	movs	r2, #138	@ 0x8a
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	f04f 30ff 	mov.w	r0, #4294967295
 800e06e:	4770      	bx	lr
 800e070:	700a      	strb	r2, [r1, #0]
 800e072:	2001      	movs	r0, #1
 800e074:	4770      	bx	lr
	...

0800e078 <fiprintf>:
 800e078:	b40e      	push	{r1, r2, r3}
 800e07a:	b503      	push	{r0, r1, lr}
 800e07c:	4601      	mov	r1, r0
 800e07e:	ab03      	add	r3, sp, #12
 800e080:	4805      	ldr	r0, [pc, #20]	@ (800e098 <fiprintf+0x20>)
 800e082:	f853 2b04 	ldr.w	r2, [r3], #4
 800e086:	6800      	ldr	r0, [r0, #0]
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	f000 f83f 	bl	800e10c <_vfiprintf_r>
 800e08e:	b002      	add	sp, #8
 800e090:	f85d eb04 	ldr.w	lr, [sp], #4
 800e094:	b003      	add	sp, #12
 800e096:	4770      	bx	lr
 800e098:	2000003c 	.word	0x2000003c

0800e09c <abort>:
 800e09c:	b508      	push	{r3, lr}
 800e09e:	2006      	movs	r0, #6
 800e0a0:	f000 fa08 	bl	800e4b4 <raise>
 800e0a4:	2001      	movs	r0, #1
 800e0a6:	f7f6 f943 	bl	8004330 <_exit>

0800e0aa <_malloc_usable_size_r>:
 800e0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0ae:	1f18      	subs	r0, r3, #4
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	bfbc      	itt	lt
 800e0b4:	580b      	ldrlt	r3, [r1, r0]
 800e0b6:	18c0      	addlt	r0, r0, r3
 800e0b8:	4770      	bx	lr

0800e0ba <__sfputc_r>:
 800e0ba:	6893      	ldr	r3, [r2, #8]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	b410      	push	{r4}
 800e0c2:	6093      	str	r3, [r2, #8]
 800e0c4:	da08      	bge.n	800e0d8 <__sfputc_r+0x1e>
 800e0c6:	6994      	ldr	r4, [r2, #24]
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	db01      	blt.n	800e0d0 <__sfputc_r+0x16>
 800e0cc:	290a      	cmp	r1, #10
 800e0ce:	d103      	bne.n	800e0d8 <__sfputc_r+0x1e>
 800e0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d4:	f000 b932 	b.w	800e33c <__swbuf_r>
 800e0d8:	6813      	ldr	r3, [r2, #0]
 800e0da:	1c58      	adds	r0, r3, #1
 800e0dc:	6010      	str	r0, [r2, #0]
 800e0de:	7019      	strb	r1, [r3, #0]
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <__sfputs_r>:
 800e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460f      	mov	r7, r1
 800e0ee:	4614      	mov	r4, r2
 800e0f0:	18d5      	adds	r5, r2, r3
 800e0f2:	42ac      	cmp	r4, r5
 800e0f4:	d101      	bne.n	800e0fa <__sfputs_r+0x12>
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	e007      	b.n	800e10a <__sfputs_r+0x22>
 800e0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0fe:	463a      	mov	r2, r7
 800e100:	4630      	mov	r0, r6
 800e102:	f7ff ffda 	bl	800e0ba <__sfputc_r>
 800e106:	1c43      	adds	r3, r0, #1
 800e108:	d1f3      	bne.n	800e0f2 <__sfputs_r+0xa>
 800e10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e10c <_vfiprintf_r>:
 800e10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e110:	460d      	mov	r5, r1
 800e112:	b09d      	sub	sp, #116	@ 0x74
 800e114:	4614      	mov	r4, r2
 800e116:	4698      	mov	r8, r3
 800e118:	4606      	mov	r6, r0
 800e11a:	b118      	cbz	r0, 800e124 <_vfiprintf_r+0x18>
 800e11c:	6a03      	ldr	r3, [r0, #32]
 800e11e:	b90b      	cbnz	r3, 800e124 <_vfiprintf_r+0x18>
 800e120:	f7fe f8ae 	bl	800c280 <__sinit>
 800e124:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e126:	07d9      	lsls	r1, r3, #31
 800e128:	d405      	bmi.n	800e136 <_vfiprintf_r+0x2a>
 800e12a:	89ab      	ldrh	r3, [r5, #12]
 800e12c:	059a      	lsls	r2, r3, #22
 800e12e:	d402      	bmi.n	800e136 <_vfiprintf_r+0x2a>
 800e130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e132:	f7fe fa12 	bl	800c55a <__retarget_lock_acquire_recursive>
 800e136:	89ab      	ldrh	r3, [r5, #12]
 800e138:	071b      	lsls	r3, r3, #28
 800e13a:	d501      	bpl.n	800e140 <_vfiprintf_r+0x34>
 800e13c:	692b      	ldr	r3, [r5, #16]
 800e13e:	b99b      	cbnz	r3, 800e168 <_vfiprintf_r+0x5c>
 800e140:	4629      	mov	r1, r5
 800e142:	4630      	mov	r0, r6
 800e144:	f000 f938 	bl	800e3b8 <__swsetup_r>
 800e148:	b170      	cbz	r0, 800e168 <_vfiprintf_r+0x5c>
 800e14a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e14c:	07dc      	lsls	r4, r3, #31
 800e14e:	d504      	bpl.n	800e15a <_vfiprintf_r+0x4e>
 800e150:	f04f 30ff 	mov.w	r0, #4294967295
 800e154:	b01d      	add	sp, #116	@ 0x74
 800e156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	0598      	lsls	r0, r3, #22
 800e15e:	d4f7      	bmi.n	800e150 <_vfiprintf_r+0x44>
 800e160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e162:	f7fe f9fb 	bl	800c55c <__retarget_lock_release_recursive>
 800e166:	e7f3      	b.n	800e150 <_vfiprintf_r+0x44>
 800e168:	2300      	movs	r3, #0
 800e16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e16c:	2320      	movs	r3, #32
 800e16e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e172:	f8cd 800c 	str.w	r8, [sp, #12]
 800e176:	2330      	movs	r3, #48	@ 0x30
 800e178:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e328 <_vfiprintf_r+0x21c>
 800e17c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e180:	f04f 0901 	mov.w	r9, #1
 800e184:	4623      	mov	r3, r4
 800e186:	469a      	mov	sl, r3
 800e188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e18c:	b10a      	cbz	r2, 800e192 <_vfiprintf_r+0x86>
 800e18e:	2a25      	cmp	r2, #37	@ 0x25
 800e190:	d1f9      	bne.n	800e186 <_vfiprintf_r+0x7a>
 800e192:	ebba 0b04 	subs.w	fp, sl, r4
 800e196:	d00b      	beq.n	800e1b0 <_vfiprintf_r+0xa4>
 800e198:	465b      	mov	r3, fp
 800e19a:	4622      	mov	r2, r4
 800e19c:	4629      	mov	r1, r5
 800e19e:	4630      	mov	r0, r6
 800e1a0:	f7ff ffa2 	bl	800e0e8 <__sfputs_r>
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	f000 80a7 	beq.w	800e2f8 <_vfiprintf_r+0x1ec>
 800e1aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1ac:	445a      	add	r2, fp
 800e1ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f000 809f 	beq.w	800e2f8 <_vfiprintf_r+0x1ec>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c4:	f10a 0a01 	add.w	sl, sl, #1
 800e1c8:	9304      	str	r3, [sp, #16]
 800e1ca:	9307      	str	r3, [sp, #28]
 800e1cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1d2:	4654      	mov	r4, sl
 800e1d4:	2205      	movs	r2, #5
 800e1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1da:	4853      	ldr	r0, [pc, #332]	@ (800e328 <_vfiprintf_r+0x21c>)
 800e1dc:	f7f1 fff8 	bl	80001d0 <memchr>
 800e1e0:	9a04      	ldr	r2, [sp, #16]
 800e1e2:	b9d8      	cbnz	r0, 800e21c <_vfiprintf_r+0x110>
 800e1e4:	06d1      	lsls	r1, r2, #27
 800e1e6:	bf44      	itt	mi
 800e1e8:	2320      	movmi	r3, #32
 800e1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ee:	0713      	lsls	r3, r2, #28
 800e1f0:	bf44      	itt	mi
 800e1f2:	232b      	movmi	r3, #43	@ 0x2b
 800e1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1fe:	d015      	beq.n	800e22c <_vfiprintf_r+0x120>
 800e200:	9a07      	ldr	r2, [sp, #28]
 800e202:	4654      	mov	r4, sl
 800e204:	2000      	movs	r0, #0
 800e206:	f04f 0c0a 	mov.w	ip, #10
 800e20a:	4621      	mov	r1, r4
 800e20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e210:	3b30      	subs	r3, #48	@ 0x30
 800e212:	2b09      	cmp	r3, #9
 800e214:	d94b      	bls.n	800e2ae <_vfiprintf_r+0x1a2>
 800e216:	b1b0      	cbz	r0, 800e246 <_vfiprintf_r+0x13a>
 800e218:	9207      	str	r2, [sp, #28]
 800e21a:	e014      	b.n	800e246 <_vfiprintf_r+0x13a>
 800e21c:	eba0 0308 	sub.w	r3, r0, r8
 800e220:	fa09 f303 	lsl.w	r3, r9, r3
 800e224:	4313      	orrs	r3, r2
 800e226:	9304      	str	r3, [sp, #16]
 800e228:	46a2      	mov	sl, r4
 800e22a:	e7d2      	b.n	800e1d2 <_vfiprintf_r+0xc6>
 800e22c:	9b03      	ldr	r3, [sp, #12]
 800e22e:	1d19      	adds	r1, r3, #4
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	9103      	str	r1, [sp, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	bfbb      	ittet	lt
 800e238:	425b      	neglt	r3, r3
 800e23a:	f042 0202 	orrlt.w	r2, r2, #2
 800e23e:	9307      	strge	r3, [sp, #28]
 800e240:	9307      	strlt	r3, [sp, #28]
 800e242:	bfb8      	it	lt
 800e244:	9204      	strlt	r2, [sp, #16]
 800e246:	7823      	ldrb	r3, [r4, #0]
 800e248:	2b2e      	cmp	r3, #46	@ 0x2e
 800e24a:	d10a      	bne.n	800e262 <_vfiprintf_r+0x156>
 800e24c:	7863      	ldrb	r3, [r4, #1]
 800e24e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e250:	d132      	bne.n	800e2b8 <_vfiprintf_r+0x1ac>
 800e252:	9b03      	ldr	r3, [sp, #12]
 800e254:	1d1a      	adds	r2, r3, #4
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	9203      	str	r2, [sp, #12]
 800e25a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e25e:	3402      	adds	r4, #2
 800e260:	9305      	str	r3, [sp, #20]
 800e262:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e338 <_vfiprintf_r+0x22c>
 800e266:	7821      	ldrb	r1, [r4, #0]
 800e268:	2203      	movs	r2, #3
 800e26a:	4650      	mov	r0, sl
 800e26c:	f7f1 ffb0 	bl	80001d0 <memchr>
 800e270:	b138      	cbz	r0, 800e282 <_vfiprintf_r+0x176>
 800e272:	9b04      	ldr	r3, [sp, #16]
 800e274:	eba0 000a 	sub.w	r0, r0, sl
 800e278:	2240      	movs	r2, #64	@ 0x40
 800e27a:	4082      	lsls	r2, r0
 800e27c:	4313      	orrs	r3, r2
 800e27e:	3401      	adds	r4, #1
 800e280:	9304      	str	r3, [sp, #16]
 800e282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e286:	4829      	ldr	r0, [pc, #164]	@ (800e32c <_vfiprintf_r+0x220>)
 800e288:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e28c:	2206      	movs	r2, #6
 800e28e:	f7f1 ff9f 	bl	80001d0 <memchr>
 800e292:	2800      	cmp	r0, #0
 800e294:	d03f      	beq.n	800e316 <_vfiprintf_r+0x20a>
 800e296:	4b26      	ldr	r3, [pc, #152]	@ (800e330 <_vfiprintf_r+0x224>)
 800e298:	bb1b      	cbnz	r3, 800e2e2 <_vfiprintf_r+0x1d6>
 800e29a:	9b03      	ldr	r3, [sp, #12]
 800e29c:	3307      	adds	r3, #7
 800e29e:	f023 0307 	bic.w	r3, r3, #7
 800e2a2:	3308      	adds	r3, #8
 800e2a4:	9303      	str	r3, [sp, #12]
 800e2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2a8:	443b      	add	r3, r7
 800e2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2ac:	e76a      	b.n	800e184 <_vfiprintf_r+0x78>
 800e2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	2001      	movs	r0, #1
 800e2b6:	e7a8      	b.n	800e20a <_vfiprintf_r+0xfe>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	3401      	adds	r4, #1
 800e2bc:	9305      	str	r3, [sp, #20]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	f04f 0c0a 	mov.w	ip, #10
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ca:	3a30      	subs	r2, #48	@ 0x30
 800e2cc:	2a09      	cmp	r2, #9
 800e2ce:	d903      	bls.n	800e2d8 <_vfiprintf_r+0x1cc>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0c6      	beq.n	800e262 <_vfiprintf_r+0x156>
 800e2d4:	9105      	str	r1, [sp, #20]
 800e2d6:	e7c4      	b.n	800e262 <_vfiprintf_r+0x156>
 800e2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2dc:	4604      	mov	r4, r0
 800e2de:	2301      	movs	r3, #1
 800e2e0:	e7f0      	b.n	800e2c4 <_vfiprintf_r+0x1b8>
 800e2e2:	ab03      	add	r3, sp, #12
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	462a      	mov	r2, r5
 800e2e8:	4b12      	ldr	r3, [pc, #72]	@ (800e334 <_vfiprintf_r+0x228>)
 800e2ea:	a904      	add	r1, sp, #16
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	f7fd fb83 	bl	800b9f8 <_printf_float>
 800e2f2:	4607      	mov	r7, r0
 800e2f4:	1c78      	adds	r0, r7, #1
 800e2f6:	d1d6      	bne.n	800e2a6 <_vfiprintf_r+0x19a>
 800e2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2fa:	07d9      	lsls	r1, r3, #31
 800e2fc:	d405      	bmi.n	800e30a <_vfiprintf_r+0x1fe>
 800e2fe:	89ab      	ldrh	r3, [r5, #12]
 800e300:	059a      	lsls	r2, r3, #22
 800e302:	d402      	bmi.n	800e30a <_vfiprintf_r+0x1fe>
 800e304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e306:	f7fe f929 	bl	800c55c <__retarget_lock_release_recursive>
 800e30a:	89ab      	ldrh	r3, [r5, #12]
 800e30c:	065b      	lsls	r3, r3, #25
 800e30e:	f53f af1f 	bmi.w	800e150 <_vfiprintf_r+0x44>
 800e312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e314:	e71e      	b.n	800e154 <_vfiprintf_r+0x48>
 800e316:	ab03      	add	r3, sp, #12
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	462a      	mov	r2, r5
 800e31c:	4b05      	ldr	r3, [pc, #20]	@ (800e334 <_vfiprintf_r+0x228>)
 800e31e:	a904      	add	r1, sp, #16
 800e320:	4630      	mov	r0, r6
 800e322:	f7fd fe01 	bl	800bf28 <_printf_i>
 800e326:	e7e4      	b.n	800e2f2 <_vfiprintf_r+0x1e6>
 800e328:	0800fa08 	.word	0x0800fa08
 800e32c:	0800fa12 	.word	0x0800fa12
 800e330:	0800b9f9 	.word	0x0800b9f9
 800e334:	0800e0e9 	.word	0x0800e0e9
 800e338:	0800fa0e 	.word	0x0800fa0e

0800e33c <__swbuf_r>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	460e      	mov	r6, r1
 800e340:	4614      	mov	r4, r2
 800e342:	4605      	mov	r5, r0
 800e344:	b118      	cbz	r0, 800e34e <__swbuf_r+0x12>
 800e346:	6a03      	ldr	r3, [r0, #32]
 800e348:	b90b      	cbnz	r3, 800e34e <__swbuf_r+0x12>
 800e34a:	f7fd ff99 	bl	800c280 <__sinit>
 800e34e:	69a3      	ldr	r3, [r4, #24]
 800e350:	60a3      	str	r3, [r4, #8]
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	071a      	lsls	r2, r3, #28
 800e356:	d501      	bpl.n	800e35c <__swbuf_r+0x20>
 800e358:	6923      	ldr	r3, [r4, #16]
 800e35a:	b943      	cbnz	r3, 800e36e <__swbuf_r+0x32>
 800e35c:	4621      	mov	r1, r4
 800e35e:	4628      	mov	r0, r5
 800e360:	f000 f82a 	bl	800e3b8 <__swsetup_r>
 800e364:	b118      	cbz	r0, 800e36e <__swbuf_r+0x32>
 800e366:	f04f 37ff 	mov.w	r7, #4294967295
 800e36a:	4638      	mov	r0, r7
 800e36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	6922      	ldr	r2, [r4, #16]
 800e372:	1a98      	subs	r0, r3, r2
 800e374:	6963      	ldr	r3, [r4, #20]
 800e376:	b2f6      	uxtb	r6, r6
 800e378:	4283      	cmp	r3, r0
 800e37a:	4637      	mov	r7, r6
 800e37c:	dc05      	bgt.n	800e38a <__swbuf_r+0x4e>
 800e37e:	4621      	mov	r1, r4
 800e380:	4628      	mov	r0, r5
 800e382:	f7ff fda7 	bl	800ded4 <_fflush_r>
 800e386:	2800      	cmp	r0, #0
 800e388:	d1ed      	bne.n	800e366 <__swbuf_r+0x2a>
 800e38a:	68a3      	ldr	r3, [r4, #8]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	60a3      	str	r3, [r4, #8]
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	1c5a      	adds	r2, r3, #1
 800e394:	6022      	str	r2, [r4, #0]
 800e396:	701e      	strb	r6, [r3, #0]
 800e398:	6962      	ldr	r2, [r4, #20]
 800e39a:	1c43      	adds	r3, r0, #1
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d004      	beq.n	800e3aa <__swbuf_r+0x6e>
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	07db      	lsls	r3, r3, #31
 800e3a4:	d5e1      	bpl.n	800e36a <__swbuf_r+0x2e>
 800e3a6:	2e0a      	cmp	r6, #10
 800e3a8:	d1df      	bne.n	800e36a <__swbuf_r+0x2e>
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f7ff fd91 	bl	800ded4 <_fflush_r>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d0d9      	beq.n	800e36a <__swbuf_r+0x2e>
 800e3b6:	e7d6      	b.n	800e366 <__swbuf_r+0x2a>

0800e3b8 <__swsetup_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4b29      	ldr	r3, [pc, #164]	@ (800e460 <__swsetup_r+0xa8>)
 800e3bc:	4605      	mov	r5, r0
 800e3be:	6818      	ldr	r0, [r3, #0]
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	b118      	cbz	r0, 800e3cc <__swsetup_r+0x14>
 800e3c4:	6a03      	ldr	r3, [r0, #32]
 800e3c6:	b90b      	cbnz	r3, 800e3cc <__swsetup_r+0x14>
 800e3c8:	f7fd ff5a 	bl	800c280 <__sinit>
 800e3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3d0:	0719      	lsls	r1, r3, #28
 800e3d2:	d422      	bmi.n	800e41a <__swsetup_r+0x62>
 800e3d4:	06da      	lsls	r2, r3, #27
 800e3d6:	d407      	bmi.n	800e3e8 <__swsetup_r+0x30>
 800e3d8:	2209      	movs	r2, #9
 800e3da:	602a      	str	r2, [r5, #0]
 800e3dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3e0:	81a3      	strh	r3, [r4, #12]
 800e3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e6:	e033      	b.n	800e450 <__swsetup_r+0x98>
 800e3e8:	0758      	lsls	r0, r3, #29
 800e3ea:	d512      	bpl.n	800e412 <__swsetup_r+0x5a>
 800e3ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3ee:	b141      	cbz	r1, 800e402 <__swsetup_r+0x4a>
 800e3f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3f4:	4299      	cmp	r1, r3
 800e3f6:	d002      	beq.n	800e3fe <__swsetup_r+0x46>
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	f7fe ff0d 	bl	800d218 <_free_r>
 800e3fe:	2300      	movs	r3, #0
 800e400:	6363      	str	r3, [r4, #52]	@ 0x34
 800e402:	89a3      	ldrh	r3, [r4, #12]
 800e404:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	2300      	movs	r3, #0
 800e40c:	6063      	str	r3, [r4, #4]
 800e40e:	6923      	ldr	r3, [r4, #16]
 800e410:	6023      	str	r3, [r4, #0]
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	f043 0308 	orr.w	r3, r3, #8
 800e418:	81a3      	strh	r3, [r4, #12]
 800e41a:	6923      	ldr	r3, [r4, #16]
 800e41c:	b94b      	cbnz	r3, 800e432 <__swsetup_r+0x7a>
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e428:	d003      	beq.n	800e432 <__swsetup_r+0x7a>
 800e42a:	4621      	mov	r1, r4
 800e42c:	4628      	mov	r0, r5
 800e42e:	f000 f883 	bl	800e538 <__smakebuf_r>
 800e432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e436:	f013 0201 	ands.w	r2, r3, #1
 800e43a:	d00a      	beq.n	800e452 <__swsetup_r+0x9a>
 800e43c:	2200      	movs	r2, #0
 800e43e:	60a2      	str	r2, [r4, #8]
 800e440:	6962      	ldr	r2, [r4, #20]
 800e442:	4252      	negs	r2, r2
 800e444:	61a2      	str	r2, [r4, #24]
 800e446:	6922      	ldr	r2, [r4, #16]
 800e448:	b942      	cbnz	r2, 800e45c <__swsetup_r+0xa4>
 800e44a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e44e:	d1c5      	bne.n	800e3dc <__swsetup_r+0x24>
 800e450:	bd38      	pop	{r3, r4, r5, pc}
 800e452:	0799      	lsls	r1, r3, #30
 800e454:	bf58      	it	pl
 800e456:	6962      	ldrpl	r2, [r4, #20]
 800e458:	60a2      	str	r2, [r4, #8]
 800e45a:	e7f4      	b.n	800e446 <__swsetup_r+0x8e>
 800e45c:	2000      	movs	r0, #0
 800e45e:	e7f7      	b.n	800e450 <__swsetup_r+0x98>
 800e460:	2000003c 	.word	0x2000003c

0800e464 <_raise_r>:
 800e464:	291f      	cmp	r1, #31
 800e466:	b538      	push	{r3, r4, r5, lr}
 800e468:	4605      	mov	r5, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	d904      	bls.n	800e478 <_raise_r+0x14>
 800e46e:	2316      	movs	r3, #22
 800e470:	6003      	str	r3, [r0, #0]
 800e472:	f04f 30ff 	mov.w	r0, #4294967295
 800e476:	bd38      	pop	{r3, r4, r5, pc}
 800e478:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e47a:	b112      	cbz	r2, 800e482 <_raise_r+0x1e>
 800e47c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e480:	b94b      	cbnz	r3, 800e496 <_raise_r+0x32>
 800e482:	4628      	mov	r0, r5
 800e484:	f000 f830 	bl	800e4e8 <_getpid_r>
 800e488:	4622      	mov	r2, r4
 800e48a:	4601      	mov	r1, r0
 800e48c:	4628      	mov	r0, r5
 800e48e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e492:	f000 b817 	b.w	800e4c4 <_kill_r>
 800e496:	2b01      	cmp	r3, #1
 800e498:	d00a      	beq.n	800e4b0 <_raise_r+0x4c>
 800e49a:	1c59      	adds	r1, r3, #1
 800e49c:	d103      	bne.n	800e4a6 <_raise_r+0x42>
 800e49e:	2316      	movs	r3, #22
 800e4a0:	6003      	str	r3, [r0, #0]
 800e4a2:	2001      	movs	r0, #1
 800e4a4:	e7e7      	b.n	800e476 <_raise_r+0x12>
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	4798      	blx	r3
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	e7e0      	b.n	800e476 <_raise_r+0x12>

0800e4b4 <raise>:
 800e4b4:	4b02      	ldr	r3, [pc, #8]	@ (800e4c0 <raise+0xc>)
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	f7ff bfd3 	b.w	800e464 <_raise_r>
 800e4be:	bf00      	nop
 800e4c0:	2000003c 	.word	0x2000003c

0800e4c4 <_kill_r>:
 800e4c4:	b538      	push	{r3, r4, r5, lr}
 800e4c6:	4d07      	ldr	r5, [pc, #28]	@ (800e4e4 <_kill_r+0x20>)
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	4608      	mov	r0, r1
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	602b      	str	r3, [r5, #0]
 800e4d2:	f7f5 ff1d 	bl	8004310 <_kill>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	d102      	bne.n	800e4e0 <_kill_r+0x1c>
 800e4da:	682b      	ldr	r3, [r5, #0]
 800e4dc:	b103      	cbz	r3, 800e4e0 <_kill_r+0x1c>
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	bd38      	pop	{r3, r4, r5, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20005694 	.word	0x20005694

0800e4e8 <_getpid_r>:
 800e4e8:	f7f5 bf0a 	b.w	8004300 <_getpid>

0800e4ec <__swhatbuf_r>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	b096      	sub	sp, #88	@ 0x58
 800e4f8:	4615      	mov	r5, r2
 800e4fa:	461e      	mov	r6, r3
 800e4fc:	da0d      	bge.n	800e51a <__swhatbuf_r+0x2e>
 800e4fe:	89a3      	ldrh	r3, [r4, #12]
 800e500:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e504:	f04f 0100 	mov.w	r1, #0
 800e508:	bf14      	ite	ne
 800e50a:	2340      	movne	r3, #64	@ 0x40
 800e50c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e510:	2000      	movs	r0, #0
 800e512:	6031      	str	r1, [r6, #0]
 800e514:	602b      	str	r3, [r5, #0]
 800e516:	b016      	add	sp, #88	@ 0x58
 800e518:	bd70      	pop	{r4, r5, r6, pc}
 800e51a:	466a      	mov	r2, sp
 800e51c:	f000 f848 	bl	800e5b0 <_fstat_r>
 800e520:	2800      	cmp	r0, #0
 800e522:	dbec      	blt.n	800e4fe <__swhatbuf_r+0x12>
 800e524:	9901      	ldr	r1, [sp, #4]
 800e526:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e52a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e52e:	4259      	negs	r1, r3
 800e530:	4159      	adcs	r1, r3
 800e532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e536:	e7eb      	b.n	800e510 <__swhatbuf_r+0x24>

0800e538 <__smakebuf_r>:
 800e538:	898b      	ldrh	r3, [r1, #12]
 800e53a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e53c:	079d      	lsls	r5, r3, #30
 800e53e:	4606      	mov	r6, r0
 800e540:	460c      	mov	r4, r1
 800e542:	d507      	bpl.n	800e554 <__smakebuf_r+0x1c>
 800e544:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e548:	6023      	str	r3, [r4, #0]
 800e54a:	6123      	str	r3, [r4, #16]
 800e54c:	2301      	movs	r3, #1
 800e54e:	6163      	str	r3, [r4, #20]
 800e550:	b003      	add	sp, #12
 800e552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e554:	ab01      	add	r3, sp, #4
 800e556:	466a      	mov	r2, sp
 800e558:	f7ff ffc8 	bl	800e4ec <__swhatbuf_r>
 800e55c:	9f00      	ldr	r7, [sp, #0]
 800e55e:	4605      	mov	r5, r0
 800e560:	4639      	mov	r1, r7
 800e562:	4630      	mov	r0, r6
 800e564:	f7fe fecc 	bl	800d300 <_malloc_r>
 800e568:	b948      	cbnz	r0, 800e57e <__smakebuf_r+0x46>
 800e56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e56e:	059a      	lsls	r2, r3, #22
 800e570:	d4ee      	bmi.n	800e550 <__smakebuf_r+0x18>
 800e572:	f023 0303 	bic.w	r3, r3, #3
 800e576:	f043 0302 	orr.w	r3, r3, #2
 800e57a:	81a3      	strh	r3, [r4, #12]
 800e57c:	e7e2      	b.n	800e544 <__smakebuf_r+0xc>
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	6020      	str	r0, [r4, #0]
 800e582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e586:	81a3      	strh	r3, [r4, #12]
 800e588:	9b01      	ldr	r3, [sp, #4]
 800e58a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e58e:	b15b      	cbz	r3, 800e5a8 <__smakebuf_r+0x70>
 800e590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e594:	4630      	mov	r0, r6
 800e596:	f000 f81d 	bl	800e5d4 <_isatty_r>
 800e59a:	b128      	cbz	r0, 800e5a8 <__smakebuf_r+0x70>
 800e59c:	89a3      	ldrh	r3, [r4, #12]
 800e59e:	f023 0303 	bic.w	r3, r3, #3
 800e5a2:	f043 0301 	orr.w	r3, r3, #1
 800e5a6:	81a3      	strh	r3, [r4, #12]
 800e5a8:	89a3      	ldrh	r3, [r4, #12]
 800e5aa:	431d      	orrs	r5, r3
 800e5ac:	81a5      	strh	r5, [r4, #12]
 800e5ae:	e7cf      	b.n	800e550 <__smakebuf_r+0x18>

0800e5b0 <_fstat_r>:
 800e5b0:	b538      	push	{r3, r4, r5, lr}
 800e5b2:	4d07      	ldr	r5, [pc, #28]	@ (800e5d0 <_fstat_r+0x20>)
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	4608      	mov	r0, r1
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	602b      	str	r3, [r5, #0]
 800e5be:	f7f5 ff07 	bl	80043d0 <_fstat>
 800e5c2:	1c43      	adds	r3, r0, #1
 800e5c4:	d102      	bne.n	800e5cc <_fstat_r+0x1c>
 800e5c6:	682b      	ldr	r3, [r5, #0]
 800e5c8:	b103      	cbz	r3, 800e5cc <_fstat_r+0x1c>
 800e5ca:	6023      	str	r3, [r4, #0]
 800e5cc:	bd38      	pop	{r3, r4, r5, pc}
 800e5ce:	bf00      	nop
 800e5d0:	20005694 	.word	0x20005694

0800e5d4 <_isatty_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4d06      	ldr	r5, [pc, #24]	@ (800e5f0 <_isatty_r+0x1c>)
 800e5d8:	2300      	movs	r3, #0
 800e5da:	4604      	mov	r4, r0
 800e5dc:	4608      	mov	r0, r1
 800e5de:	602b      	str	r3, [r5, #0]
 800e5e0:	f7f5 ff06 	bl	80043f0 <_isatty>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	d102      	bne.n	800e5ee <_isatty_r+0x1a>
 800e5e8:	682b      	ldr	r3, [r5, #0]
 800e5ea:	b103      	cbz	r3, 800e5ee <_isatty_r+0x1a>
 800e5ec:	6023      	str	r3, [r4, #0]
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	20005694 	.word	0x20005694
 800e5f4:	00000000 	.word	0x00000000

0800e5f8 <cos>:
 800e5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5fa:	ec53 2b10 	vmov	r2, r3, d0
 800e5fe:	4826      	ldr	r0, [pc, #152]	@ (800e698 <cos+0xa0>)
 800e600:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e604:	4281      	cmp	r1, r0
 800e606:	d806      	bhi.n	800e616 <cos+0x1e>
 800e608:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e690 <cos+0x98>
 800e60c:	b005      	add	sp, #20
 800e60e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e612:	f000 b899 	b.w	800e748 <__kernel_cos>
 800e616:	4821      	ldr	r0, [pc, #132]	@ (800e69c <cos+0xa4>)
 800e618:	4281      	cmp	r1, r0
 800e61a:	d908      	bls.n	800e62e <cos+0x36>
 800e61c:	4610      	mov	r0, r2
 800e61e:	4619      	mov	r1, r3
 800e620:	f7f1 fe32 	bl	8000288 <__aeabi_dsub>
 800e624:	ec41 0b10 	vmov	d0, r0, r1
 800e628:	b005      	add	sp, #20
 800e62a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e62e:	4668      	mov	r0, sp
 800e630:	f000 fa0e 	bl	800ea50 <__ieee754_rem_pio2>
 800e634:	f000 0003 	and.w	r0, r0, #3
 800e638:	2801      	cmp	r0, #1
 800e63a:	d00b      	beq.n	800e654 <cos+0x5c>
 800e63c:	2802      	cmp	r0, #2
 800e63e:	d015      	beq.n	800e66c <cos+0x74>
 800e640:	b9d8      	cbnz	r0, 800e67a <cos+0x82>
 800e642:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e646:	ed9d 0b00 	vldr	d0, [sp]
 800e64a:	f000 f87d 	bl	800e748 <__kernel_cos>
 800e64e:	ec51 0b10 	vmov	r0, r1, d0
 800e652:	e7e7      	b.n	800e624 <cos+0x2c>
 800e654:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e658:	ed9d 0b00 	vldr	d0, [sp]
 800e65c:	f000 f93c 	bl	800e8d8 <__kernel_sin>
 800e660:	ec53 2b10 	vmov	r2, r3, d0
 800e664:	4610      	mov	r0, r2
 800e666:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e66a:	e7db      	b.n	800e624 <cos+0x2c>
 800e66c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e670:	ed9d 0b00 	vldr	d0, [sp]
 800e674:	f000 f868 	bl	800e748 <__kernel_cos>
 800e678:	e7f2      	b.n	800e660 <cos+0x68>
 800e67a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e67e:	ed9d 0b00 	vldr	d0, [sp]
 800e682:	2001      	movs	r0, #1
 800e684:	f000 f928 	bl	800e8d8 <__kernel_sin>
 800e688:	e7e1      	b.n	800e64e <cos+0x56>
 800e68a:	bf00      	nop
 800e68c:	f3af 8000 	nop.w
	...
 800e698:	3fe921fb 	.word	0x3fe921fb
 800e69c:	7fefffff 	.word	0x7fefffff

0800e6a0 <sin>:
 800e6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6a2:	ec53 2b10 	vmov	r2, r3, d0
 800e6a6:	4826      	ldr	r0, [pc, #152]	@ (800e740 <sin+0xa0>)
 800e6a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e6ac:	4281      	cmp	r1, r0
 800e6ae:	d807      	bhi.n	800e6c0 <sin+0x20>
 800e6b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e738 <sin+0x98>
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	b005      	add	sp, #20
 800e6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6bc:	f000 b90c 	b.w	800e8d8 <__kernel_sin>
 800e6c0:	4820      	ldr	r0, [pc, #128]	@ (800e744 <sin+0xa4>)
 800e6c2:	4281      	cmp	r1, r0
 800e6c4:	d908      	bls.n	800e6d8 <sin+0x38>
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	f7f1 fddd 	bl	8000288 <__aeabi_dsub>
 800e6ce:	ec41 0b10 	vmov	d0, r0, r1
 800e6d2:	b005      	add	sp, #20
 800e6d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6d8:	4668      	mov	r0, sp
 800e6da:	f000 f9b9 	bl	800ea50 <__ieee754_rem_pio2>
 800e6de:	f000 0003 	and.w	r0, r0, #3
 800e6e2:	2801      	cmp	r0, #1
 800e6e4:	d00c      	beq.n	800e700 <sin+0x60>
 800e6e6:	2802      	cmp	r0, #2
 800e6e8:	d011      	beq.n	800e70e <sin+0x6e>
 800e6ea:	b9e8      	cbnz	r0, 800e728 <sin+0x88>
 800e6ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e6f0:	ed9d 0b00 	vldr	d0, [sp]
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	f000 f8ef 	bl	800e8d8 <__kernel_sin>
 800e6fa:	ec51 0b10 	vmov	r0, r1, d0
 800e6fe:	e7e6      	b.n	800e6ce <sin+0x2e>
 800e700:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e704:	ed9d 0b00 	vldr	d0, [sp]
 800e708:	f000 f81e 	bl	800e748 <__kernel_cos>
 800e70c:	e7f5      	b.n	800e6fa <sin+0x5a>
 800e70e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e712:	ed9d 0b00 	vldr	d0, [sp]
 800e716:	2001      	movs	r0, #1
 800e718:	f000 f8de 	bl	800e8d8 <__kernel_sin>
 800e71c:	ec53 2b10 	vmov	r2, r3, d0
 800e720:	4610      	mov	r0, r2
 800e722:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e726:	e7d2      	b.n	800e6ce <sin+0x2e>
 800e728:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e72c:	ed9d 0b00 	vldr	d0, [sp]
 800e730:	f000 f80a 	bl	800e748 <__kernel_cos>
 800e734:	e7f2      	b.n	800e71c <sin+0x7c>
 800e736:	bf00      	nop
	...
 800e740:	3fe921fb 	.word	0x3fe921fb
 800e744:	7fefffff 	.word	0x7fefffff

0800e748 <__kernel_cos>:
 800e748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	ec57 6b10 	vmov	r6, r7, d0
 800e750:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e754:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e758:	ed8d 1b00 	vstr	d1, [sp]
 800e75c:	d206      	bcs.n	800e76c <__kernel_cos+0x24>
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f2 f9f9 	bl	8000b58 <__aeabi_d2iz>
 800e766:	2800      	cmp	r0, #0
 800e768:	f000 8088 	beq.w	800e87c <__kernel_cos+0x134>
 800e76c:	4632      	mov	r2, r6
 800e76e:	463b      	mov	r3, r7
 800e770:	4630      	mov	r0, r6
 800e772:	4639      	mov	r1, r7
 800e774:	f7f1 ff40 	bl	80005f8 <__aeabi_dmul>
 800e778:	4b51      	ldr	r3, [pc, #324]	@ (800e8c0 <__kernel_cos+0x178>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	4604      	mov	r4, r0
 800e77e:	460d      	mov	r5, r1
 800e780:	f7f1 ff3a 	bl	80005f8 <__aeabi_dmul>
 800e784:	a340      	add	r3, pc, #256	@ (adr r3, 800e888 <__kernel_cos+0x140>)
 800e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78a:	4682      	mov	sl, r0
 800e78c:	468b      	mov	fp, r1
 800e78e:	4620      	mov	r0, r4
 800e790:	4629      	mov	r1, r5
 800e792:	f7f1 ff31 	bl	80005f8 <__aeabi_dmul>
 800e796:	a33e      	add	r3, pc, #248	@ (adr r3, 800e890 <__kernel_cos+0x148>)
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	f7f1 fd76 	bl	800028c <__adddf3>
 800e7a0:	4622      	mov	r2, r4
 800e7a2:	462b      	mov	r3, r5
 800e7a4:	f7f1 ff28 	bl	80005f8 <__aeabi_dmul>
 800e7a8:	a33b      	add	r3, pc, #236	@ (adr r3, 800e898 <__kernel_cos+0x150>)
 800e7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ae:	f7f1 fd6b 	bl	8000288 <__aeabi_dsub>
 800e7b2:	4622      	mov	r2, r4
 800e7b4:	462b      	mov	r3, r5
 800e7b6:	f7f1 ff1f 	bl	80005f8 <__aeabi_dmul>
 800e7ba:	a339      	add	r3, pc, #228	@ (adr r3, 800e8a0 <__kernel_cos+0x158>)
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	f7f1 fd64 	bl	800028c <__adddf3>
 800e7c4:	4622      	mov	r2, r4
 800e7c6:	462b      	mov	r3, r5
 800e7c8:	f7f1 ff16 	bl	80005f8 <__aeabi_dmul>
 800e7cc:	a336      	add	r3, pc, #216	@ (adr r3, 800e8a8 <__kernel_cos+0x160>)
 800e7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d2:	f7f1 fd59 	bl	8000288 <__aeabi_dsub>
 800e7d6:	4622      	mov	r2, r4
 800e7d8:	462b      	mov	r3, r5
 800e7da:	f7f1 ff0d 	bl	80005f8 <__aeabi_dmul>
 800e7de:	a334      	add	r3, pc, #208	@ (adr r3, 800e8b0 <__kernel_cos+0x168>)
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	f7f1 fd52 	bl	800028c <__adddf3>
 800e7e8:	4622      	mov	r2, r4
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	f7f1 ff04 	bl	80005f8 <__aeabi_dmul>
 800e7f0:	4622      	mov	r2, r4
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	f7f1 ff00 	bl	80005f8 <__aeabi_dmul>
 800e7f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	460d      	mov	r5, r1
 800e800:	4630      	mov	r0, r6
 800e802:	4639      	mov	r1, r7
 800e804:	f7f1 fef8 	bl	80005f8 <__aeabi_dmul>
 800e808:	460b      	mov	r3, r1
 800e80a:	4602      	mov	r2, r0
 800e80c:	4629      	mov	r1, r5
 800e80e:	4620      	mov	r0, r4
 800e810:	f7f1 fd3a 	bl	8000288 <__aeabi_dsub>
 800e814:	4b2b      	ldr	r3, [pc, #172]	@ (800e8c4 <__kernel_cos+0x17c>)
 800e816:	4598      	cmp	r8, r3
 800e818:	4606      	mov	r6, r0
 800e81a:	460f      	mov	r7, r1
 800e81c:	d810      	bhi.n	800e840 <__kernel_cos+0xf8>
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	4650      	mov	r0, sl
 800e824:	4659      	mov	r1, fp
 800e826:	f7f1 fd2f 	bl	8000288 <__aeabi_dsub>
 800e82a:	460b      	mov	r3, r1
 800e82c:	4926      	ldr	r1, [pc, #152]	@ (800e8c8 <__kernel_cos+0x180>)
 800e82e:	4602      	mov	r2, r0
 800e830:	2000      	movs	r0, #0
 800e832:	f7f1 fd29 	bl	8000288 <__aeabi_dsub>
 800e836:	ec41 0b10 	vmov	d0, r0, r1
 800e83a:	b003      	add	sp, #12
 800e83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e840:	4b22      	ldr	r3, [pc, #136]	@ (800e8cc <__kernel_cos+0x184>)
 800e842:	4921      	ldr	r1, [pc, #132]	@ (800e8c8 <__kernel_cos+0x180>)
 800e844:	4598      	cmp	r8, r3
 800e846:	bf8c      	ite	hi
 800e848:	4d21      	ldrhi	r5, [pc, #132]	@ (800e8d0 <__kernel_cos+0x188>)
 800e84a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e84e:	2400      	movs	r4, #0
 800e850:	4622      	mov	r2, r4
 800e852:	462b      	mov	r3, r5
 800e854:	2000      	movs	r0, #0
 800e856:	f7f1 fd17 	bl	8000288 <__aeabi_dsub>
 800e85a:	4622      	mov	r2, r4
 800e85c:	4680      	mov	r8, r0
 800e85e:	4689      	mov	r9, r1
 800e860:	462b      	mov	r3, r5
 800e862:	4650      	mov	r0, sl
 800e864:	4659      	mov	r1, fp
 800e866:	f7f1 fd0f 	bl	8000288 <__aeabi_dsub>
 800e86a:	4632      	mov	r2, r6
 800e86c:	463b      	mov	r3, r7
 800e86e:	f7f1 fd0b 	bl	8000288 <__aeabi_dsub>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
 800e876:	4640      	mov	r0, r8
 800e878:	4649      	mov	r1, r9
 800e87a:	e7da      	b.n	800e832 <__kernel_cos+0xea>
 800e87c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e8b8 <__kernel_cos+0x170>
 800e880:	e7db      	b.n	800e83a <__kernel_cos+0xf2>
 800e882:	bf00      	nop
 800e884:	f3af 8000 	nop.w
 800e888:	be8838d4 	.word	0xbe8838d4
 800e88c:	bda8fae9 	.word	0xbda8fae9
 800e890:	bdb4b1c4 	.word	0xbdb4b1c4
 800e894:	3e21ee9e 	.word	0x3e21ee9e
 800e898:	809c52ad 	.word	0x809c52ad
 800e89c:	3e927e4f 	.word	0x3e927e4f
 800e8a0:	19cb1590 	.word	0x19cb1590
 800e8a4:	3efa01a0 	.word	0x3efa01a0
 800e8a8:	16c15177 	.word	0x16c15177
 800e8ac:	3f56c16c 	.word	0x3f56c16c
 800e8b0:	5555554c 	.word	0x5555554c
 800e8b4:	3fa55555 	.word	0x3fa55555
 800e8b8:	00000000 	.word	0x00000000
 800e8bc:	3ff00000 	.word	0x3ff00000
 800e8c0:	3fe00000 	.word	0x3fe00000
 800e8c4:	3fd33332 	.word	0x3fd33332
 800e8c8:	3ff00000 	.word	0x3ff00000
 800e8cc:	3fe90000 	.word	0x3fe90000
 800e8d0:	3fd20000 	.word	0x3fd20000
 800e8d4:	00000000 	.word	0x00000000

0800e8d8 <__kernel_sin>:
 800e8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8dc:	ec55 4b10 	vmov	r4, r5, d0
 800e8e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e8e4:	b085      	sub	sp, #20
 800e8e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e8ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e8ee:	4680      	mov	r8, r0
 800e8f0:	d205      	bcs.n	800e8fe <__kernel_sin+0x26>
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	f7f2 f92f 	bl	8000b58 <__aeabi_d2iz>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d052      	beq.n	800e9a4 <__kernel_sin+0xcc>
 800e8fe:	4622      	mov	r2, r4
 800e900:	462b      	mov	r3, r5
 800e902:	4620      	mov	r0, r4
 800e904:	4629      	mov	r1, r5
 800e906:	f7f1 fe77 	bl	80005f8 <__aeabi_dmul>
 800e90a:	4682      	mov	sl, r0
 800e90c:	468b      	mov	fp, r1
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	4620      	mov	r0, r4
 800e914:	4629      	mov	r1, r5
 800e916:	f7f1 fe6f 	bl	80005f8 <__aeabi_dmul>
 800e91a:	a342      	add	r3, pc, #264	@ (adr r3, 800ea24 <__kernel_sin+0x14c>)
 800e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e920:	e9cd 0100 	strd	r0, r1, [sp]
 800e924:	4650      	mov	r0, sl
 800e926:	4659      	mov	r1, fp
 800e928:	f7f1 fe66 	bl	80005f8 <__aeabi_dmul>
 800e92c:	a33f      	add	r3, pc, #252	@ (adr r3, 800ea2c <__kernel_sin+0x154>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	f7f1 fca9 	bl	8000288 <__aeabi_dsub>
 800e936:	4652      	mov	r2, sl
 800e938:	465b      	mov	r3, fp
 800e93a:	f7f1 fe5d 	bl	80005f8 <__aeabi_dmul>
 800e93e:	a33d      	add	r3, pc, #244	@ (adr r3, 800ea34 <__kernel_sin+0x15c>)
 800e940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e944:	f7f1 fca2 	bl	800028c <__adddf3>
 800e948:	4652      	mov	r2, sl
 800e94a:	465b      	mov	r3, fp
 800e94c:	f7f1 fe54 	bl	80005f8 <__aeabi_dmul>
 800e950:	a33a      	add	r3, pc, #232	@ (adr r3, 800ea3c <__kernel_sin+0x164>)
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	f7f1 fc97 	bl	8000288 <__aeabi_dsub>
 800e95a:	4652      	mov	r2, sl
 800e95c:	465b      	mov	r3, fp
 800e95e:	f7f1 fe4b 	bl	80005f8 <__aeabi_dmul>
 800e962:	a338      	add	r3, pc, #224	@ (adr r3, 800ea44 <__kernel_sin+0x16c>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f7f1 fc90 	bl	800028c <__adddf3>
 800e96c:	4606      	mov	r6, r0
 800e96e:	460f      	mov	r7, r1
 800e970:	f1b8 0f00 	cmp.w	r8, #0
 800e974:	d11b      	bne.n	800e9ae <__kernel_sin+0xd6>
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	4650      	mov	r0, sl
 800e97c:	4659      	mov	r1, fp
 800e97e:	f7f1 fe3b 	bl	80005f8 <__aeabi_dmul>
 800e982:	a325      	add	r3, pc, #148	@ (adr r3, 800ea18 <__kernel_sin+0x140>)
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	f7f1 fc7e 	bl	8000288 <__aeabi_dsub>
 800e98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e990:	f7f1 fe32 	bl	80005f8 <__aeabi_dmul>
 800e994:	4602      	mov	r2, r0
 800e996:	460b      	mov	r3, r1
 800e998:	4620      	mov	r0, r4
 800e99a:	4629      	mov	r1, r5
 800e99c:	f7f1 fc76 	bl	800028c <__adddf3>
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	460d      	mov	r5, r1
 800e9a4:	ec45 4b10 	vmov	d0, r4, r5
 800e9a8:	b005      	add	sp, #20
 800e9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9b2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea20 <__kernel_sin+0x148>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f7f1 fe1f 	bl	80005f8 <__aeabi_dmul>
 800e9ba:	4632      	mov	r2, r6
 800e9bc:	4680      	mov	r8, r0
 800e9be:	4689      	mov	r9, r1
 800e9c0:	463b      	mov	r3, r7
 800e9c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9c6:	f7f1 fe17 	bl	80005f8 <__aeabi_dmul>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	f7f1 fc59 	bl	8000288 <__aeabi_dsub>
 800e9d6:	4652      	mov	r2, sl
 800e9d8:	465b      	mov	r3, fp
 800e9da:	f7f1 fe0d 	bl	80005f8 <__aeabi_dmul>
 800e9de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9e2:	f7f1 fc51 	bl	8000288 <__aeabi_dsub>
 800e9e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800ea18 <__kernel_sin+0x140>)
 800e9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	460f      	mov	r7, r1
 800e9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9f4:	f7f1 fe00 	bl	80005f8 <__aeabi_dmul>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	4639      	mov	r1, r7
 800ea00:	f7f1 fc44 	bl	800028c <__adddf3>
 800ea04:	4602      	mov	r2, r0
 800ea06:	460b      	mov	r3, r1
 800ea08:	4620      	mov	r0, r4
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	f7f1 fc3c 	bl	8000288 <__aeabi_dsub>
 800ea10:	e7c6      	b.n	800e9a0 <__kernel_sin+0xc8>
 800ea12:	bf00      	nop
 800ea14:	f3af 8000 	nop.w
 800ea18:	55555549 	.word	0x55555549
 800ea1c:	3fc55555 	.word	0x3fc55555
 800ea20:	3fe00000 	.word	0x3fe00000
 800ea24:	5acfd57c 	.word	0x5acfd57c
 800ea28:	3de5d93a 	.word	0x3de5d93a
 800ea2c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ea30:	3e5ae5e6 	.word	0x3e5ae5e6
 800ea34:	57b1fe7d 	.word	0x57b1fe7d
 800ea38:	3ec71de3 	.word	0x3ec71de3
 800ea3c:	19c161d5 	.word	0x19c161d5
 800ea40:	3f2a01a0 	.word	0x3f2a01a0
 800ea44:	1110f8a6 	.word	0x1110f8a6
 800ea48:	3f811111 	.word	0x3f811111
 800ea4c:	00000000 	.word	0x00000000

0800ea50 <__ieee754_rem_pio2>:
 800ea50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea54:	ec57 6b10 	vmov	r6, r7, d0
 800ea58:	4bc5      	ldr	r3, [pc, #788]	@ (800ed70 <__ieee754_rem_pio2+0x320>)
 800ea5a:	b08d      	sub	sp, #52	@ 0x34
 800ea5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ea60:	4598      	cmp	r8, r3
 800ea62:	4604      	mov	r4, r0
 800ea64:	9704      	str	r7, [sp, #16]
 800ea66:	d807      	bhi.n	800ea78 <__ieee754_rem_pio2+0x28>
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	ed80 0b00 	vstr	d0, [r0]
 800ea70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ea74:	2500      	movs	r5, #0
 800ea76:	e028      	b.n	800eaca <__ieee754_rem_pio2+0x7a>
 800ea78:	4bbe      	ldr	r3, [pc, #760]	@ (800ed74 <__ieee754_rem_pio2+0x324>)
 800ea7a:	4598      	cmp	r8, r3
 800ea7c:	d878      	bhi.n	800eb70 <__ieee754_rem_pio2+0x120>
 800ea7e:	9b04      	ldr	r3, [sp, #16]
 800ea80:	4dbd      	ldr	r5, [pc, #756]	@ (800ed78 <__ieee754_rem_pio2+0x328>)
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	4630      	mov	r0, r6
 800ea86:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ed38 <__ieee754_rem_pio2+0x2e8>)
 800ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8c:	4639      	mov	r1, r7
 800ea8e:	dd38      	ble.n	800eb02 <__ieee754_rem_pio2+0xb2>
 800ea90:	f7f1 fbfa 	bl	8000288 <__aeabi_dsub>
 800ea94:	45a8      	cmp	r8, r5
 800ea96:	4606      	mov	r6, r0
 800ea98:	460f      	mov	r7, r1
 800ea9a:	d01a      	beq.n	800ead2 <__ieee754_rem_pio2+0x82>
 800ea9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ed40 <__ieee754_rem_pio2+0x2f0>)
 800ea9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa2:	f7f1 fbf1 	bl	8000288 <__aeabi_dsub>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4680      	mov	r8, r0
 800eaac:	4689      	mov	r9, r1
 800eaae:	4630      	mov	r0, r6
 800eab0:	4639      	mov	r1, r7
 800eab2:	f7f1 fbe9 	bl	8000288 <__aeabi_dsub>
 800eab6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ed40 <__ieee754_rem_pio2+0x2f0>)
 800eab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabc:	f7f1 fbe4 	bl	8000288 <__aeabi_dsub>
 800eac0:	e9c4 8900 	strd	r8, r9, [r4]
 800eac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eac8:	2501      	movs	r5, #1
 800eaca:	4628      	mov	r0, r5
 800eacc:	b00d      	add	sp, #52	@ 0x34
 800eace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead2:	a39d      	add	r3, pc, #628	@ (adr r3, 800ed48 <__ieee754_rem_pio2+0x2f8>)
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	f7f1 fbd6 	bl	8000288 <__aeabi_dsub>
 800eadc:	a39c      	add	r3, pc, #624	@ (adr r3, 800ed50 <__ieee754_rem_pio2+0x300>)
 800eade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae2:	4606      	mov	r6, r0
 800eae4:	460f      	mov	r7, r1
 800eae6:	f7f1 fbcf 	bl	8000288 <__aeabi_dsub>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	4680      	mov	r8, r0
 800eaf0:	4689      	mov	r9, r1
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	4639      	mov	r1, r7
 800eaf6:	f7f1 fbc7 	bl	8000288 <__aeabi_dsub>
 800eafa:	a395      	add	r3, pc, #596	@ (adr r3, 800ed50 <__ieee754_rem_pio2+0x300>)
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	e7dc      	b.n	800eabc <__ieee754_rem_pio2+0x6c>
 800eb02:	f7f1 fbc3 	bl	800028c <__adddf3>
 800eb06:	45a8      	cmp	r8, r5
 800eb08:	4606      	mov	r6, r0
 800eb0a:	460f      	mov	r7, r1
 800eb0c:	d018      	beq.n	800eb40 <__ieee754_rem_pio2+0xf0>
 800eb0e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ed40 <__ieee754_rem_pio2+0x2f0>)
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	f7f1 fbba 	bl	800028c <__adddf3>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	4689      	mov	r9, r1
 800eb20:	4630      	mov	r0, r6
 800eb22:	4639      	mov	r1, r7
 800eb24:	f7f1 fbb0 	bl	8000288 <__aeabi_dsub>
 800eb28:	a385      	add	r3, pc, #532	@ (adr r3, 800ed40 <__ieee754_rem_pio2+0x2f0>)
 800eb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2e:	f7f1 fbad 	bl	800028c <__adddf3>
 800eb32:	f04f 35ff 	mov.w	r5, #4294967295
 800eb36:	e9c4 8900 	strd	r8, r9, [r4]
 800eb3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eb3e:	e7c4      	b.n	800eaca <__ieee754_rem_pio2+0x7a>
 800eb40:	a381      	add	r3, pc, #516	@ (adr r3, 800ed48 <__ieee754_rem_pio2+0x2f8>)
 800eb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb46:	f7f1 fba1 	bl	800028c <__adddf3>
 800eb4a:	a381      	add	r3, pc, #516	@ (adr r3, 800ed50 <__ieee754_rem_pio2+0x300>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	4606      	mov	r6, r0
 800eb52:	460f      	mov	r7, r1
 800eb54:	f7f1 fb9a 	bl	800028c <__adddf3>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	4680      	mov	r8, r0
 800eb5e:	4689      	mov	r9, r1
 800eb60:	4630      	mov	r0, r6
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7f1 fb90 	bl	8000288 <__aeabi_dsub>
 800eb68:	a379      	add	r3, pc, #484	@ (adr r3, 800ed50 <__ieee754_rem_pio2+0x300>)
 800eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6e:	e7de      	b.n	800eb2e <__ieee754_rem_pio2+0xde>
 800eb70:	4b82      	ldr	r3, [pc, #520]	@ (800ed7c <__ieee754_rem_pio2+0x32c>)
 800eb72:	4598      	cmp	r8, r3
 800eb74:	f200 80d1 	bhi.w	800ed1a <__ieee754_rem_pio2+0x2ca>
 800eb78:	f000 f966 	bl	800ee48 <fabs>
 800eb7c:	ec57 6b10 	vmov	r6, r7, d0
 800eb80:	a375      	add	r3, pc, #468	@ (adr r3, 800ed58 <__ieee754_rem_pio2+0x308>)
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	4630      	mov	r0, r6
 800eb88:	4639      	mov	r1, r7
 800eb8a:	f7f1 fd35 	bl	80005f8 <__aeabi_dmul>
 800eb8e:	4b7c      	ldr	r3, [pc, #496]	@ (800ed80 <__ieee754_rem_pio2+0x330>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	f7f1 fb7b 	bl	800028c <__adddf3>
 800eb96:	f7f1 ffdf 	bl	8000b58 <__aeabi_d2iz>
 800eb9a:	4605      	mov	r5, r0
 800eb9c:	f7f1 fcc2 	bl	8000524 <__aeabi_i2d>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eba8:	a363      	add	r3, pc, #396	@ (adr r3, 800ed38 <__ieee754_rem_pio2+0x2e8>)
 800ebaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebae:	f7f1 fd23 	bl	80005f8 <__aeabi_dmul>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	4639      	mov	r1, r7
 800ebba:	f7f1 fb65 	bl	8000288 <__aeabi_dsub>
 800ebbe:	a360      	add	r3, pc, #384	@ (adr r3, 800ed40 <__ieee754_rem_pio2+0x2f0>)
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	4682      	mov	sl, r0
 800ebc6:	468b      	mov	fp, r1
 800ebc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebcc:	f7f1 fd14 	bl	80005f8 <__aeabi_dmul>
 800ebd0:	2d1f      	cmp	r5, #31
 800ebd2:	4606      	mov	r6, r0
 800ebd4:	460f      	mov	r7, r1
 800ebd6:	dc0c      	bgt.n	800ebf2 <__ieee754_rem_pio2+0x1a2>
 800ebd8:	4b6a      	ldr	r3, [pc, #424]	@ (800ed84 <__ieee754_rem_pio2+0x334>)
 800ebda:	1e6a      	subs	r2, r5, #1
 800ebdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebe0:	4543      	cmp	r3, r8
 800ebe2:	d006      	beq.n	800ebf2 <__ieee754_rem_pio2+0x1a2>
 800ebe4:	4632      	mov	r2, r6
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	4650      	mov	r0, sl
 800ebea:	4659      	mov	r1, fp
 800ebec:	f7f1 fb4c 	bl	8000288 <__aeabi_dsub>
 800ebf0:	e00e      	b.n	800ec10 <__ieee754_rem_pio2+0x1c0>
 800ebf2:	463b      	mov	r3, r7
 800ebf4:	4632      	mov	r2, r6
 800ebf6:	4650      	mov	r0, sl
 800ebf8:	4659      	mov	r1, fp
 800ebfa:	f7f1 fb45 	bl	8000288 <__aeabi_dsub>
 800ebfe:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ec02:	9305      	str	r3, [sp, #20]
 800ec04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec08:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ec0c:	2b10      	cmp	r3, #16
 800ec0e:	dc02      	bgt.n	800ec16 <__ieee754_rem_pio2+0x1c6>
 800ec10:	e9c4 0100 	strd	r0, r1, [r4]
 800ec14:	e039      	b.n	800ec8a <__ieee754_rem_pio2+0x23a>
 800ec16:	a34c      	add	r3, pc, #304	@ (adr r3, 800ed48 <__ieee754_rem_pio2+0x2f8>)
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec20:	f7f1 fcea 	bl	80005f8 <__aeabi_dmul>
 800ec24:	4606      	mov	r6, r0
 800ec26:	460f      	mov	r7, r1
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	4650      	mov	r0, sl
 800ec2e:	4659      	mov	r1, fp
 800ec30:	f7f1 fb2a 	bl	8000288 <__aeabi_dsub>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4680      	mov	r8, r0
 800ec3a:	4689      	mov	r9, r1
 800ec3c:	4650      	mov	r0, sl
 800ec3e:	4659      	mov	r1, fp
 800ec40:	f7f1 fb22 	bl	8000288 <__aeabi_dsub>
 800ec44:	4632      	mov	r2, r6
 800ec46:	463b      	mov	r3, r7
 800ec48:	f7f1 fb1e 	bl	8000288 <__aeabi_dsub>
 800ec4c:	a340      	add	r3, pc, #256	@ (adr r3, 800ed50 <__ieee754_rem_pio2+0x300>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	4606      	mov	r6, r0
 800ec54:	460f      	mov	r7, r1
 800ec56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec5a:	f7f1 fccd 	bl	80005f8 <__aeabi_dmul>
 800ec5e:	4632      	mov	r2, r6
 800ec60:	463b      	mov	r3, r7
 800ec62:	f7f1 fb11 	bl	8000288 <__aeabi_dsub>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	4640      	mov	r0, r8
 800ec70:	4649      	mov	r1, r9
 800ec72:	f7f1 fb09 	bl	8000288 <__aeabi_dsub>
 800ec76:	9a05      	ldr	r2, [sp, #20]
 800ec78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	2b31      	cmp	r3, #49	@ 0x31
 800ec80:	dc20      	bgt.n	800ecc4 <__ieee754_rem_pio2+0x274>
 800ec82:	e9c4 0100 	strd	r0, r1, [r4]
 800ec86:	46c2      	mov	sl, r8
 800ec88:	46cb      	mov	fp, r9
 800ec8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ec8e:	4650      	mov	r0, sl
 800ec90:	4642      	mov	r2, r8
 800ec92:	464b      	mov	r3, r9
 800ec94:	4659      	mov	r1, fp
 800ec96:	f7f1 faf7 	bl	8000288 <__aeabi_dsub>
 800ec9a:	463b      	mov	r3, r7
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	f7f1 faf3 	bl	8000288 <__aeabi_dsub>
 800eca2:	9b04      	ldr	r3, [sp, #16]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ecaa:	f6bf af0e 	bge.w	800eaca <__ieee754_rem_pio2+0x7a>
 800ecae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ecb2:	6063      	str	r3, [r4, #4]
 800ecb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ecb8:	f8c4 8000 	str.w	r8, [r4]
 800ecbc:	60a0      	str	r0, [r4, #8]
 800ecbe:	60e3      	str	r3, [r4, #12]
 800ecc0:	426d      	negs	r5, r5
 800ecc2:	e702      	b.n	800eaca <__ieee754_rem_pio2+0x7a>
 800ecc4:	a326      	add	r3, pc, #152	@ (adr r3, 800ed60 <__ieee754_rem_pio2+0x310>)
 800ecc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecce:	f7f1 fc93 	bl	80005f8 <__aeabi_dmul>
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	460f      	mov	r7, r1
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	4640      	mov	r0, r8
 800ecdc:	4649      	mov	r1, r9
 800ecde:	f7f1 fad3 	bl	8000288 <__aeabi_dsub>
 800ece2:	4602      	mov	r2, r0
 800ece4:	460b      	mov	r3, r1
 800ece6:	4682      	mov	sl, r0
 800ece8:	468b      	mov	fp, r1
 800ecea:	4640      	mov	r0, r8
 800ecec:	4649      	mov	r1, r9
 800ecee:	f7f1 facb 	bl	8000288 <__aeabi_dsub>
 800ecf2:	4632      	mov	r2, r6
 800ecf4:	463b      	mov	r3, r7
 800ecf6:	f7f1 fac7 	bl	8000288 <__aeabi_dsub>
 800ecfa:	a31b      	add	r3, pc, #108	@ (adr r3, 800ed68 <__ieee754_rem_pio2+0x318>)
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	4606      	mov	r6, r0
 800ed02:	460f      	mov	r7, r1
 800ed04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed08:	f7f1 fc76 	bl	80005f8 <__aeabi_dmul>
 800ed0c:	4632      	mov	r2, r6
 800ed0e:	463b      	mov	r3, r7
 800ed10:	f7f1 faba 	bl	8000288 <__aeabi_dsub>
 800ed14:	4606      	mov	r6, r0
 800ed16:	460f      	mov	r7, r1
 800ed18:	e764      	b.n	800ebe4 <__ieee754_rem_pio2+0x194>
 800ed1a:	4b1b      	ldr	r3, [pc, #108]	@ (800ed88 <__ieee754_rem_pio2+0x338>)
 800ed1c:	4598      	cmp	r8, r3
 800ed1e:	d935      	bls.n	800ed8c <__ieee754_rem_pio2+0x33c>
 800ed20:	4632      	mov	r2, r6
 800ed22:	463b      	mov	r3, r7
 800ed24:	4630      	mov	r0, r6
 800ed26:	4639      	mov	r1, r7
 800ed28:	f7f1 faae 	bl	8000288 <__aeabi_dsub>
 800ed2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ed30:	e9c4 0100 	strd	r0, r1, [r4]
 800ed34:	e69e      	b.n	800ea74 <__ieee754_rem_pio2+0x24>
 800ed36:	bf00      	nop
 800ed38:	54400000 	.word	0x54400000
 800ed3c:	3ff921fb 	.word	0x3ff921fb
 800ed40:	1a626331 	.word	0x1a626331
 800ed44:	3dd0b461 	.word	0x3dd0b461
 800ed48:	1a600000 	.word	0x1a600000
 800ed4c:	3dd0b461 	.word	0x3dd0b461
 800ed50:	2e037073 	.word	0x2e037073
 800ed54:	3ba3198a 	.word	0x3ba3198a
 800ed58:	6dc9c883 	.word	0x6dc9c883
 800ed5c:	3fe45f30 	.word	0x3fe45f30
 800ed60:	2e000000 	.word	0x2e000000
 800ed64:	3ba3198a 	.word	0x3ba3198a
 800ed68:	252049c1 	.word	0x252049c1
 800ed6c:	397b839a 	.word	0x397b839a
 800ed70:	3fe921fb 	.word	0x3fe921fb
 800ed74:	4002d97b 	.word	0x4002d97b
 800ed78:	3ff921fb 	.word	0x3ff921fb
 800ed7c:	413921fb 	.word	0x413921fb
 800ed80:	3fe00000 	.word	0x3fe00000
 800ed84:	0800fb60 	.word	0x0800fb60
 800ed88:	7fefffff 	.word	0x7fefffff
 800ed8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ed90:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ed94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ed98:	4630      	mov	r0, r6
 800ed9a:	460f      	mov	r7, r1
 800ed9c:	f7f1 fedc 	bl	8000b58 <__aeabi_d2iz>
 800eda0:	f7f1 fbc0 	bl	8000524 <__aeabi_i2d>
 800eda4:	4602      	mov	r2, r0
 800eda6:	460b      	mov	r3, r1
 800eda8:	4630      	mov	r0, r6
 800edaa:	4639      	mov	r1, r7
 800edac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800edb0:	f7f1 fa6a 	bl	8000288 <__aeabi_dsub>
 800edb4:	4b22      	ldr	r3, [pc, #136]	@ (800ee40 <__ieee754_rem_pio2+0x3f0>)
 800edb6:	2200      	movs	r2, #0
 800edb8:	f7f1 fc1e 	bl	80005f8 <__aeabi_dmul>
 800edbc:	460f      	mov	r7, r1
 800edbe:	4606      	mov	r6, r0
 800edc0:	f7f1 feca 	bl	8000b58 <__aeabi_d2iz>
 800edc4:	f7f1 fbae 	bl	8000524 <__aeabi_i2d>
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	4630      	mov	r0, r6
 800edce:	4639      	mov	r1, r7
 800edd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800edd4:	f7f1 fa58 	bl	8000288 <__aeabi_dsub>
 800edd8:	4b19      	ldr	r3, [pc, #100]	@ (800ee40 <__ieee754_rem_pio2+0x3f0>)
 800edda:	2200      	movs	r2, #0
 800eddc:	f7f1 fc0c 	bl	80005f8 <__aeabi_dmul>
 800ede0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ede4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ede8:	f04f 0803 	mov.w	r8, #3
 800edec:	2600      	movs	r6, #0
 800edee:	2700      	movs	r7, #0
 800edf0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800edf4:	4632      	mov	r2, r6
 800edf6:	463b      	mov	r3, r7
 800edf8:	46c2      	mov	sl, r8
 800edfa:	f108 38ff 	add.w	r8, r8, #4294967295
 800edfe:	f7f1 fe63 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d1f4      	bne.n	800edf0 <__ieee754_rem_pio2+0x3a0>
 800ee06:	4b0f      	ldr	r3, [pc, #60]	@ (800ee44 <__ieee754_rem_pio2+0x3f4>)
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	462a      	mov	r2, r5
 800ee10:	4653      	mov	r3, sl
 800ee12:	4621      	mov	r1, r4
 800ee14:	a806      	add	r0, sp, #24
 800ee16:	f000 f81f 	bl	800ee58 <__kernel_rem_pio2>
 800ee1a:	9b04      	ldr	r3, [sp, #16]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	4605      	mov	r5, r0
 800ee20:	f6bf ae53 	bge.w	800eaca <__ieee754_rem_pio2+0x7a>
 800ee24:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ee28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ee2c:	e9c4 2300 	strd	r2, r3, [r4]
 800ee30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ee34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ee38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ee3c:	e740      	b.n	800ecc0 <__ieee754_rem_pio2+0x270>
 800ee3e:	bf00      	nop
 800ee40:	41700000 	.word	0x41700000
 800ee44:	0800fbe0 	.word	0x0800fbe0

0800ee48 <fabs>:
 800ee48:	ec51 0b10 	vmov	r0, r1, d0
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ee52:	ec43 2b10 	vmov	d0, r2, r3
 800ee56:	4770      	bx	lr

0800ee58 <__kernel_rem_pio2>:
 800ee58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee5c:	ed2d 8b02 	vpush	{d8}
 800ee60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ee64:	f112 0f14 	cmn.w	r2, #20
 800ee68:	9306      	str	r3, [sp, #24]
 800ee6a:	9104      	str	r1, [sp, #16]
 800ee6c:	4bbe      	ldr	r3, [pc, #760]	@ (800f168 <__kernel_rem_pio2+0x310>)
 800ee6e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ee70:	9008      	str	r0, [sp, #32]
 800ee72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	9b06      	ldr	r3, [sp, #24]
 800ee7a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee7e:	bfa8      	it	ge
 800ee80:	1ed4      	subge	r4, r2, #3
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	bfb2      	itee	lt
 800ee86:	2400      	movlt	r4, #0
 800ee88:	2318      	movge	r3, #24
 800ee8a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ee8e:	f06f 0317 	mvn.w	r3, #23
 800ee92:	fb04 3303 	mla	r3, r4, r3, r3
 800ee96:	eb03 0b02 	add.w	fp, r3, r2
 800ee9a:	9b00      	ldr	r3, [sp, #0]
 800ee9c:	9a05      	ldr	r2, [sp, #20]
 800ee9e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800f158 <__kernel_rem_pio2+0x300>
 800eea2:	eb03 0802 	add.w	r8, r3, r2
 800eea6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800eea8:	1aa7      	subs	r7, r4, r2
 800eeaa:	ae20      	add	r6, sp, #128	@ 0x80
 800eeac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eeb0:	2500      	movs	r5, #0
 800eeb2:	4545      	cmp	r5, r8
 800eeb4:	dd13      	ble.n	800eede <__kernel_rem_pio2+0x86>
 800eeb6:	9b06      	ldr	r3, [sp, #24]
 800eeb8:	aa20      	add	r2, sp, #128	@ 0x80
 800eeba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800eebe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800eec2:	f04f 0800 	mov.w	r8, #0
 800eec6:	9b00      	ldr	r3, [sp, #0]
 800eec8:	4598      	cmp	r8, r3
 800eeca:	dc31      	bgt.n	800ef30 <__kernel_rem_pio2+0xd8>
 800eecc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800f158 <__kernel_rem_pio2+0x300>
 800eed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eed4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eed8:	462f      	mov	r7, r5
 800eeda:	2600      	movs	r6, #0
 800eedc:	e01b      	b.n	800ef16 <__kernel_rem_pio2+0xbe>
 800eede:	42ef      	cmn	r7, r5
 800eee0:	d407      	bmi.n	800eef2 <__kernel_rem_pio2+0x9a>
 800eee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800eee6:	f7f1 fb1d 	bl	8000524 <__aeabi_i2d>
 800eeea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800eeee:	3501      	adds	r5, #1
 800eef0:	e7df      	b.n	800eeb2 <__kernel_rem_pio2+0x5a>
 800eef2:	ec51 0b18 	vmov	r0, r1, d8
 800eef6:	e7f8      	b.n	800eeea <__kernel_rem_pio2+0x92>
 800eef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eefc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ef00:	f7f1 fb7a 	bl	80005f8 <__aeabi_dmul>
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef0c:	f7f1 f9be 	bl	800028c <__adddf3>
 800ef10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef14:	3601      	adds	r6, #1
 800ef16:	9b05      	ldr	r3, [sp, #20]
 800ef18:	429e      	cmp	r6, r3
 800ef1a:	f1a7 0708 	sub.w	r7, r7, #8
 800ef1e:	ddeb      	ble.n	800eef8 <__kernel_rem_pio2+0xa0>
 800ef20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef24:	f108 0801 	add.w	r8, r8, #1
 800ef28:	ecaa 7b02 	vstmia	sl!, {d7}
 800ef2c:	3508      	adds	r5, #8
 800ef2e:	e7ca      	b.n	800eec6 <__kernel_rem_pio2+0x6e>
 800ef30:	9b00      	ldr	r3, [sp, #0]
 800ef32:	f8dd 8000 	ldr.w	r8, [sp]
 800ef36:	aa0c      	add	r2, sp, #48	@ 0x30
 800ef38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ef40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ef44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef46:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ef4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef4c:	ab98      	add	r3, sp, #608	@ 0x260
 800ef4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ef52:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ef56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef5a:	ac0c      	add	r4, sp, #48	@ 0x30
 800ef5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ef5e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ef62:	46a1      	mov	r9, r4
 800ef64:	46c2      	mov	sl, r8
 800ef66:	f1ba 0f00 	cmp.w	sl, #0
 800ef6a:	f1a5 0508 	sub.w	r5, r5, #8
 800ef6e:	dc77      	bgt.n	800f060 <__kernel_rem_pio2+0x208>
 800ef70:	4658      	mov	r0, fp
 800ef72:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ef76:	f000 fac7 	bl	800f508 <scalbn>
 800ef7a:	ec57 6b10 	vmov	r6, r7, d0
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ef84:	4630      	mov	r0, r6
 800ef86:	4639      	mov	r1, r7
 800ef88:	f7f1 fb36 	bl	80005f8 <__aeabi_dmul>
 800ef8c:	ec41 0b10 	vmov	d0, r0, r1
 800ef90:	f000 fb3a 	bl	800f608 <floor>
 800ef94:	4b75      	ldr	r3, [pc, #468]	@ (800f16c <__kernel_rem_pio2+0x314>)
 800ef96:	ec51 0b10 	vmov	r0, r1, d0
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f7f1 fb2c 	bl	80005f8 <__aeabi_dmul>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4630      	mov	r0, r6
 800efa6:	4639      	mov	r1, r7
 800efa8:	f7f1 f96e 	bl	8000288 <__aeabi_dsub>
 800efac:	460f      	mov	r7, r1
 800efae:	4606      	mov	r6, r0
 800efb0:	f7f1 fdd2 	bl	8000b58 <__aeabi_d2iz>
 800efb4:	9002      	str	r0, [sp, #8]
 800efb6:	f7f1 fab5 	bl	8000524 <__aeabi_i2d>
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	4630      	mov	r0, r6
 800efc0:	4639      	mov	r1, r7
 800efc2:	f7f1 f961 	bl	8000288 <__aeabi_dsub>
 800efc6:	f1bb 0f00 	cmp.w	fp, #0
 800efca:	4606      	mov	r6, r0
 800efcc:	460f      	mov	r7, r1
 800efce:	dd6c      	ble.n	800f0aa <__kernel_rem_pio2+0x252>
 800efd0:	f108 31ff 	add.w	r1, r8, #4294967295
 800efd4:	ab0c      	add	r3, sp, #48	@ 0x30
 800efd6:	9d02      	ldr	r5, [sp, #8]
 800efd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efdc:	f1cb 0018 	rsb	r0, fp, #24
 800efe0:	fa43 f200 	asr.w	r2, r3, r0
 800efe4:	4415      	add	r5, r2
 800efe6:	4082      	lsls	r2, r0
 800efe8:	1a9b      	subs	r3, r3, r2
 800efea:	aa0c      	add	r2, sp, #48	@ 0x30
 800efec:	9502      	str	r5, [sp, #8]
 800efee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800eff2:	f1cb 0217 	rsb	r2, fp, #23
 800eff6:	fa43 f902 	asr.w	r9, r3, r2
 800effa:	f1b9 0f00 	cmp.w	r9, #0
 800effe:	dd64      	ble.n	800f0ca <__kernel_rem_pio2+0x272>
 800f000:	9b02      	ldr	r3, [sp, #8]
 800f002:	2200      	movs	r2, #0
 800f004:	3301      	adds	r3, #1
 800f006:	9302      	str	r3, [sp, #8]
 800f008:	4615      	mov	r5, r2
 800f00a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f00e:	4590      	cmp	r8, r2
 800f010:	f300 80b8 	bgt.w	800f184 <__kernel_rem_pio2+0x32c>
 800f014:	f1bb 0f00 	cmp.w	fp, #0
 800f018:	dd07      	ble.n	800f02a <__kernel_rem_pio2+0x1d2>
 800f01a:	f1bb 0f01 	cmp.w	fp, #1
 800f01e:	f000 80bf 	beq.w	800f1a0 <__kernel_rem_pio2+0x348>
 800f022:	f1bb 0f02 	cmp.w	fp, #2
 800f026:	f000 80c6 	beq.w	800f1b6 <__kernel_rem_pio2+0x35e>
 800f02a:	f1b9 0f02 	cmp.w	r9, #2
 800f02e:	d14c      	bne.n	800f0ca <__kernel_rem_pio2+0x272>
 800f030:	4632      	mov	r2, r6
 800f032:	463b      	mov	r3, r7
 800f034:	494e      	ldr	r1, [pc, #312]	@ (800f170 <__kernel_rem_pio2+0x318>)
 800f036:	2000      	movs	r0, #0
 800f038:	f7f1 f926 	bl	8000288 <__aeabi_dsub>
 800f03c:	4606      	mov	r6, r0
 800f03e:	460f      	mov	r7, r1
 800f040:	2d00      	cmp	r5, #0
 800f042:	d042      	beq.n	800f0ca <__kernel_rem_pio2+0x272>
 800f044:	4658      	mov	r0, fp
 800f046:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800f160 <__kernel_rem_pio2+0x308>
 800f04a:	f000 fa5d 	bl	800f508 <scalbn>
 800f04e:	4630      	mov	r0, r6
 800f050:	4639      	mov	r1, r7
 800f052:	ec53 2b10 	vmov	r2, r3, d0
 800f056:	f7f1 f917 	bl	8000288 <__aeabi_dsub>
 800f05a:	4606      	mov	r6, r0
 800f05c:	460f      	mov	r7, r1
 800f05e:	e034      	b.n	800f0ca <__kernel_rem_pio2+0x272>
 800f060:	4b44      	ldr	r3, [pc, #272]	@ (800f174 <__kernel_rem_pio2+0x31c>)
 800f062:	2200      	movs	r2, #0
 800f064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f068:	f7f1 fac6 	bl	80005f8 <__aeabi_dmul>
 800f06c:	f7f1 fd74 	bl	8000b58 <__aeabi_d2iz>
 800f070:	f7f1 fa58 	bl	8000524 <__aeabi_i2d>
 800f074:	4b40      	ldr	r3, [pc, #256]	@ (800f178 <__kernel_rem_pio2+0x320>)
 800f076:	2200      	movs	r2, #0
 800f078:	4606      	mov	r6, r0
 800f07a:	460f      	mov	r7, r1
 800f07c:	f7f1 fabc 	bl	80005f8 <__aeabi_dmul>
 800f080:	4602      	mov	r2, r0
 800f082:	460b      	mov	r3, r1
 800f084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f088:	f7f1 f8fe 	bl	8000288 <__aeabi_dsub>
 800f08c:	f7f1 fd64 	bl	8000b58 <__aeabi_d2iz>
 800f090:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f094:	f849 0b04 	str.w	r0, [r9], #4
 800f098:	4639      	mov	r1, r7
 800f09a:	4630      	mov	r0, r6
 800f09c:	f7f1 f8f6 	bl	800028c <__adddf3>
 800f0a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0a8:	e75d      	b.n	800ef66 <__kernel_rem_pio2+0x10e>
 800f0aa:	d107      	bne.n	800f0bc <__kernel_rem_pio2+0x264>
 800f0ac:	f108 33ff 	add.w	r3, r8, #4294967295
 800f0b0:	aa0c      	add	r2, sp, #48	@ 0x30
 800f0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f0ba:	e79e      	b.n	800effa <__kernel_rem_pio2+0x1a2>
 800f0bc:	4b2f      	ldr	r3, [pc, #188]	@ (800f17c <__kernel_rem_pio2+0x324>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f7f1 fd20 	bl	8000b04 <__aeabi_dcmpge>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d143      	bne.n	800f150 <__kernel_rem_pio2+0x2f8>
 800f0c8:	4681      	mov	r9, r0
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	f7f1 fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	f000 80bf 	beq.w	800f25a <__kernel_rem_pio2+0x402>
 800f0dc:	f108 33ff 	add.w	r3, r8, #4294967295
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	9900      	ldr	r1, [sp, #0]
 800f0e4:	428b      	cmp	r3, r1
 800f0e6:	da6e      	bge.n	800f1c6 <__kernel_rem_pio2+0x36e>
 800f0e8:	2a00      	cmp	r2, #0
 800f0ea:	f000 8089 	beq.w	800f200 <__kernel_rem_pio2+0x3a8>
 800f0ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f0f4:	f1ab 0b18 	sub.w	fp, fp, #24
 800f0f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d0f6      	beq.n	800f0ee <__kernel_rem_pio2+0x296>
 800f100:	4658      	mov	r0, fp
 800f102:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800f160 <__kernel_rem_pio2+0x308>
 800f106:	f000 f9ff 	bl	800f508 <scalbn>
 800f10a:	f108 0301 	add.w	r3, r8, #1
 800f10e:	00da      	lsls	r2, r3, #3
 800f110:	9205      	str	r2, [sp, #20]
 800f112:	ec55 4b10 	vmov	r4, r5, d0
 800f116:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f118:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800f174 <__kernel_rem_pio2+0x31c>
 800f11c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f120:	4646      	mov	r6, r8
 800f122:	f04f 0a00 	mov.w	sl, #0
 800f126:	2e00      	cmp	r6, #0
 800f128:	f280 80cf 	bge.w	800f2ca <__kernel_rem_pio2+0x472>
 800f12c:	4644      	mov	r4, r8
 800f12e:	2c00      	cmp	r4, #0
 800f130:	f2c0 80fd 	blt.w	800f32e <__kernel_rem_pio2+0x4d6>
 800f134:	4b12      	ldr	r3, [pc, #72]	@ (800f180 <__kernel_rem_pio2+0x328>)
 800f136:	461f      	mov	r7, r3
 800f138:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f13a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f13e:	9306      	str	r3, [sp, #24]
 800f140:	f04f 0a00 	mov.w	sl, #0
 800f144:	f04f 0b00 	mov.w	fp, #0
 800f148:	2600      	movs	r6, #0
 800f14a:	eba8 0504 	sub.w	r5, r8, r4
 800f14e:	e0e2      	b.n	800f316 <__kernel_rem_pio2+0x4be>
 800f150:	f04f 0902 	mov.w	r9, #2
 800f154:	e754      	b.n	800f000 <__kernel_rem_pio2+0x1a8>
 800f156:	bf00      	nop
	...
 800f164:	3ff00000 	.word	0x3ff00000
 800f168:	0800fd28 	.word	0x0800fd28
 800f16c:	40200000 	.word	0x40200000
 800f170:	3ff00000 	.word	0x3ff00000
 800f174:	3e700000 	.word	0x3e700000
 800f178:	41700000 	.word	0x41700000
 800f17c:	3fe00000 	.word	0x3fe00000
 800f180:	0800fce8 	.word	0x0800fce8
 800f184:	f854 3b04 	ldr.w	r3, [r4], #4
 800f188:	b945      	cbnz	r5, 800f19c <__kernel_rem_pio2+0x344>
 800f18a:	b123      	cbz	r3, 800f196 <__kernel_rem_pio2+0x33e>
 800f18c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f190:	f844 3c04 	str.w	r3, [r4, #-4]
 800f194:	2301      	movs	r3, #1
 800f196:	3201      	adds	r2, #1
 800f198:	461d      	mov	r5, r3
 800f19a:	e738      	b.n	800f00e <__kernel_rem_pio2+0x1b6>
 800f19c:	1acb      	subs	r3, r1, r3
 800f19e:	e7f7      	b.n	800f190 <__kernel_rem_pio2+0x338>
 800f1a0:	f108 32ff 	add.w	r2, r8, #4294967295
 800f1a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800f1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f1ae:	a90c      	add	r1, sp, #48	@ 0x30
 800f1b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f1b4:	e739      	b.n	800f02a <__kernel_rem_pio2+0x1d2>
 800f1b6:	f108 32ff 	add.w	r2, r8, #4294967295
 800f1ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800f1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f1c4:	e7f3      	b.n	800f1ae <__kernel_rem_pio2+0x356>
 800f1c6:	a90c      	add	r1, sp, #48	@ 0x30
 800f1c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	430a      	orrs	r2, r1
 800f1d0:	e787      	b.n	800f0e2 <__kernel_rem_pio2+0x28a>
 800f1d2:	3401      	adds	r4, #1
 800f1d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f1d8:	2a00      	cmp	r2, #0
 800f1da:	d0fa      	beq.n	800f1d2 <__kernel_rem_pio2+0x37a>
 800f1dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f1e2:	eb0d 0503 	add.w	r5, sp, r3
 800f1e6:	9b06      	ldr	r3, [sp, #24]
 800f1e8:	aa20      	add	r2, sp, #128	@ 0x80
 800f1ea:	4443      	add	r3, r8
 800f1ec:	f108 0701 	add.w	r7, r8, #1
 800f1f0:	3d98      	subs	r5, #152	@ 0x98
 800f1f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f1f6:	4444      	add	r4, r8
 800f1f8:	42bc      	cmp	r4, r7
 800f1fa:	da04      	bge.n	800f206 <__kernel_rem_pio2+0x3ae>
 800f1fc:	46a0      	mov	r8, r4
 800f1fe:	e6a2      	b.n	800ef46 <__kernel_rem_pio2+0xee>
 800f200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f202:	2401      	movs	r4, #1
 800f204:	e7e6      	b.n	800f1d4 <__kernel_rem_pio2+0x37c>
 800f206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f208:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f20c:	f7f1 f98a 	bl	8000524 <__aeabi_i2d>
 800f210:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800f4d8 <__kernel_rem_pio2+0x680>
 800f214:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f21c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f220:	46b2      	mov	sl, r6
 800f222:	f04f 0800 	mov.w	r8, #0
 800f226:	9b05      	ldr	r3, [sp, #20]
 800f228:	4598      	cmp	r8, r3
 800f22a:	dd05      	ble.n	800f238 <__kernel_rem_pio2+0x3e0>
 800f22c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f230:	3701      	adds	r7, #1
 800f232:	eca5 7b02 	vstmia	r5!, {d7}
 800f236:	e7df      	b.n	800f1f8 <__kernel_rem_pio2+0x3a0>
 800f238:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f23c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f240:	f7f1 f9da 	bl	80005f8 <__aeabi_dmul>
 800f244:	4602      	mov	r2, r0
 800f246:	460b      	mov	r3, r1
 800f248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f24c:	f7f1 f81e 	bl	800028c <__adddf3>
 800f250:	f108 0801 	add.w	r8, r8, #1
 800f254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f258:	e7e5      	b.n	800f226 <__kernel_rem_pio2+0x3ce>
 800f25a:	f1cb 0000 	rsb	r0, fp, #0
 800f25e:	ec47 6b10 	vmov	d0, r6, r7
 800f262:	f000 f951 	bl	800f508 <scalbn>
 800f266:	ec55 4b10 	vmov	r4, r5, d0
 800f26a:	4b9d      	ldr	r3, [pc, #628]	@ (800f4e0 <__kernel_rem_pio2+0x688>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	4620      	mov	r0, r4
 800f270:	4629      	mov	r1, r5
 800f272:	f7f1 fc47 	bl	8000b04 <__aeabi_dcmpge>
 800f276:	b300      	cbz	r0, 800f2ba <__kernel_rem_pio2+0x462>
 800f278:	4b9a      	ldr	r3, [pc, #616]	@ (800f4e4 <__kernel_rem_pio2+0x68c>)
 800f27a:	2200      	movs	r2, #0
 800f27c:	4620      	mov	r0, r4
 800f27e:	4629      	mov	r1, r5
 800f280:	f7f1 f9ba 	bl	80005f8 <__aeabi_dmul>
 800f284:	f7f1 fc68 	bl	8000b58 <__aeabi_d2iz>
 800f288:	4606      	mov	r6, r0
 800f28a:	f7f1 f94b 	bl	8000524 <__aeabi_i2d>
 800f28e:	4b94      	ldr	r3, [pc, #592]	@ (800f4e0 <__kernel_rem_pio2+0x688>)
 800f290:	2200      	movs	r2, #0
 800f292:	f7f1 f9b1 	bl	80005f8 <__aeabi_dmul>
 800f296:	460b      	mov	r3, r1
 800f298:	4602      	mov	r2, r0
 800f29a:	4629      	mov	r1, r5
 800f29c:	4620      	mov	r0, r4
 800f29e:	f7f0 fff3 	bl	8000288 <__aeabi_dsub>
 800f2a2:	f7f1 fc59 	bl	8000b58 <__aeabi_d2iz>
 800f2a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800f2a8:	f10b 0b18 	add.w	fp, fp, #24
 800f2ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f2b0:	f108 0801 	add.w	r8, r8, #1
 800f2b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f2b8:	e722      	b.n	800f100 <__kernel_rem_pio2+0x2a8>
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	4629      	mov	r1, r5
 800f2be:	f7f1 fc4b 	bl	8000b58 <__aeabi_d2iz>
 800f2c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f2c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f2c8:	e71a      	b.n	800f100 <__kernel_rem_pio2+0x2a8>
 800f2ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800f2cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f2d0:	f7f1 f928 	bl	8000524 <__aeabi_i2d>
 800f2d4:	4622      	mov	r2, r4
 800f2d6:	462b      	mov	r3, r5
 800f2d8:	f7f1 f98e 	bl	80005f8 <__aeabi_dmul>
 800f2dc:	4652      	mov	r2, sl
 800f2de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f2e2:	465b      	mov	r3, fp
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	f7f1 f986 	bl	80005f8 <__aeabi_dmul>
 800f2ec:	3e01      	subs	r6, #1
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	460d      	mov	r5, r1
 800f2f2:	e718      	b.n	800f126 <__kernel_rem_pio2+0x2ce>
 800f2f4:	9906      	ldr	r1, [sp, #24]
 800f2f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f2fa:	9106      	str	r1, [sp, #24]
 800f2fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f300:	f7f1 f97a 	bl	80005f8 <__aeabi_dmul>
 800f304:	4602      	mov	r2, r0
 800f306:	460b      	mov	r3, r1
 800f308:	4650      	mov	r0, sl
 800f30a:	4659      	mov	r1, fp
 800f30c:	f7f0 ffbe 	bl	800028c <__adddf3>
 800f310:	3601      	adds	r6, #1
 800f312:	4682      	mov	sl, r0
 800f314:	468b      	mov	fp, r1
 800f316:	9b00      	ldr	r3, [sp, #0]
 800f318:	429e      	cmp	r6, r3
 800f31a:	dc01      	bgt.n	800f320 <__kernel_rem_pio2+0x4c8>
 800f31c:	42b5      	cmp	r5, r6
 800f31e:	dae9      	bge.n	800f2f4 <__kernel_rem_pio2+0x49c>
 800f320:	ab48      	add	r3, sp, #288	@ 0x120
 800f322:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f326:	e9c5 ab00 	strd	sl, fp, [r5]
 800f32a:	3c01      	subs	r4, #1
 800f32c:	e6ff      	b.n	800f12e <__kernel_rem_pio2+0x2d6>
 800f32e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f330:	2b02      	cmp	r3, #2
 800f332:	dc0b      	bgt.n	800f34c <__kernel_rem_pio2+0x4f4>
 800f334:	2b00      	cmp	r3, #0
 800f336:	dc39      	bgt.n	800f3ac <__kernel_rem_pio2+0x554>
 800f338:	d05d      	beq.n	800f3f6 <__kernel_rem_pio2+0x59e>
 800f33a:	9b02      	ldr	r3, [sp, #8]
 800f33c:	f003 0007 	and.w	r0, r3, #7
 800f340:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f344:	ecbd 8b02 	vpop	{d8}
 800f348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f34e:	2b03      	cmp	r3, #3
 800f350:	d1f3      	bne.n	800f33a <__kernel_rem_pio2+0x4e2>
 800f352:	9b05      	ldr	r3, [sp, #20]
 800f354:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f358:	eb0d 0403 	add.w	r4, sp, r3
 800f35c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f360:	4625      	mov	r5, r4
 800f362:	46c2      	mov	sl, r8
 800f364:	f1ba 0f00 	cmp.w	sl, #0
 800f368:	f1a5 0508 	sub.w	r5, r5, #8
 800f36c:	dc6b      	bgt.n	800f446 <__kernel_rem_pio2+0x5ee>
 800f36e:	4645      	mov	r5, r8
 800f370:	2d01      	cmp	r5, #1
 800f372:	f1a4 0408 	sub.w	r4, r4, #8
 800f376:	f300 8087 	bgt.w	800f488 <__kernel_rem_pio2+0x630>
 800f37a:	9c05      	ldr	r4, [sp, #20]
 800f37c:	ab48      	add	r3, sp, #288	@ 0x120
 800f37e:	441c      	add	r4, r3
 800f380:	2000      	movs	r0, #0
 800f382:	2100      	movs	r1, #0
 800f384:	f1b8 0f01 	cmp.w	r8, #1
 800f388:	f300 809c 	bgt.w	800f4c4 <__kernel_rem_pio2+0x66c>
 800f38c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f390:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f394:	f1b9 0f00 	cmp.w	r9, #0
 800f398:	f040 80a6 	bne.w	800f4e8 <__kernel_rem_pio2+0x690>
 800f39c:	9b04      	ldr	r3, [sp, #16]
 800f39e:	e9c3 7800 	strd	r7, r8, [r3]
 800f3a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f3a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f3aa:	e7c6      	b.n	800f33a <__kernel_rem_pio2+0x4e2>
 800f3ac:	9d05      	ldr	r5, [sp, #20]
 800f3ae:	ab48      	add	r3, sp, #288	@ 0x120
 800f3b0:	441d      	add	r5, r3
 800f3b2:	4644      	mov	r4, r8
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	2c00      	cmp	r4, #0
 800f3ba:	da35      	bge.n	800f428 <__kernel_rem_pio2+0x5d0>
 800f3bc:	f1b9 0f00 	cmp.w	r9, #0
 800f3c0:	d038      	beq.n	800f434 <__kernel_rem_pio2+0x5dc>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3c8:	9c04      	ldr	r4, [sp, #16]
 800f3ca:	e9c4 2300 	strd	r2, r3, [r4]
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f3d6:	f7f0 ff57 	bl	8000288 <__aeabi_dsub>
 800f3da:	ad4a      	add	r5, sp, #296	@ 0x128
 800f3dc:	2401      	movs	r4, #1
 800f3de:	45a0      	cmp	r8, r4
 800f3e0:	da2b      	bge.n	800f43a <__kernel_rem_pio2+0x5e2>
 800f3e2:	f1b9 0f00 	cmp.w	r9, #0
 800f3e6:	d002      	beq.n	800f3ee <__kernel_rem_pio2+0x596>
 800f3e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	9b04      	ldr	r3, [sp, #16]
 800f3f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f3f4:	e7a1      	b.n	800f33a <__kernel_rem_pio2+0x4e2>
 800f3f6:	9c05      	ldr	r4, [sp, #20]
 800f3f8:	ab48      	add	r3, sp, #288	@ 0x120
 800f3fa:	441c      	add	r4, r3
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	2100      	movs	r1, #0
 800f400:	f1b8 0f00 	cmp.w	r8, #0
 800f404:	da09      	bge.n	800f41a <__kernel_rem_pio2+0x5c2>
 800f406:	f1b9 0f00 	cmp.w	r9, #0
 800f40a:	d002      	beq.n	800f412 <__kernel_rem_pio2+0x5ba>
 800f40c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f410:	4619      	mov	r1, r3
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	e9c3 0100 	strd	r0, r1, [r3]
 800f418:	e78f      	b.n	800f33a <__kernel_rem_pio2+0x4e2>
 800f41a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f41e:	f7f0 ff35 	bl	800028c <__adddf3>
 800f422:	f108 38ff 	add.w	r8, r8, #4294967295
 800f426:	e7eb      	b.n	800f400 <__kernel_rem_pio2+0x5a8>
 800f428:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f42c:	f7f0 ff2e 	bl	800028c <__adddf3>
 800f430:	3c01      	subs	r4, #1
 800f432:	e7c1      	b.n	800f3b8 <__kernel_rem_pio2+0x560>
 800f434:	4602      	mov	r2, r0
 800f436:	460b      	mov	r3, r1
 800f438:	e7c6      	b.n	800f3c8 <__kernel_rem_pio2+0x570>
 800f43a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f43e:	f7f0 ff25 	bl	800028c <__adddf3>
 800f442:	3401      	adds	r4, #1
 800f444:	e7cb      	b.n	800f3de <__kernel_rem_pio2+0x586>
 800f446:	ed95 7b00 	vldr	d7, [r5]
 800f44a:	ed8d 7b00 	vstr	d7, [sp]
 800f44e:	ed95 7b02 	vldr	d7, [r5, #8]
 800f452:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f456:	ec53 2b17 	vmov	r2, r3, d7
 800f45a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f45e:	f7f0 ff15 	bl	800028c <__adddf3>
 800f462:	4602      	mov	r2, r0
 800f464:	460b      	mov	r3, r1
 800f466:	4606      	mov	r6, r0
 800f468:	460f      	mov	r7, r1
 800f46a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f46e:	f7f0 ff0b 	bl	8000288 <__aeabi_dsub>
 800f472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f476:	f7f0 ff09 	bl	800028c <__adddf3>
 800f47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f47e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f482:	e9c5 6700 	strd	r6, r7, [r5]
 800f486:	e76d      	b.n	800f364 <__kernel_rem_pio2+0x50c>
 800f488:	ed94 7b00 	vldr	d7, [r4]
 800f48c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f490:	ec51 0b17 	vmov	r0, r1, d7
 800f494:	4652      	mov	r2, sl
 800f496:	465b      	mov	r3, fp
 800f498:	ed8d 7b00 	vstr	d7, [sp]
 800f49c:	f7f0 fef6 	bl	800028c <__adddf3>
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	4606      	mov	r6, r0
 800f4a6:	460f      	mov	r7, r1
 800f4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4ac:	f7f0 feec 	bl	8000288 <__aeabi_dsub>
 800f4b0:	4652      	mov	r2, sl
 800f4b2:	465b      	mov	r3, fp
 800f4b4:	f7f0 feea 	bl	800028c <__adddf3>
 800f4b8:	3d01      	subs	r5, #1
 800f4ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f4be:	e9c4 6700 	strd	r6, r7, [r4]
 800f4c2:	e755      	b.n	800f370 <__kernel_rem_pio2+0x518>
 800f4c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f4c8:	f7f0 fee0 	bl	800028c <__adddf3>
 800f4cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4d0:	e758      	b.n	800f384 <__kernel_rem_pio2+0x52c>
 800f4d2:	bf00      	nop
 800f4d4:	f3af 8000 	nop.w
	...
 800f4e0:	41700000 	.word	0x41700000
 800f4e4:	3e700000 	.word	0x3e700000
 800f4e8:	9b04      	ldr	r3, [sp, #16]
 800f4ea:	9a04      	ldr	r2, [sp, #16]
 800f4ec:	601f      	str	r7, [r3, #0]
 800f4ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800f4f2:	605c      	str	r4, [r3, #4]
 800f4f4:	609d      	str	r5, [r3, #8]
 800f4f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f4fa:	60d3      	str	r3, [r2, #12]
 800f4fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f500:	6110      	str	r0, [r2, #16]
 800f502:	6153      	str	r3, [r2, #20]
 800f504:	e719      	b.n	800f33a <__kernel_rem_pio2+0x4e2>
 800f506:	bf00      	nop

0800f508 <scalbn>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	ec55 4b10 	vmov	r4, r5, d0
 800f50e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f512:	4606      	mov	r6, r0
 800f514:	462b      	mov	r3, r5
 800f516:	b991      	cbnz	r1, 800f53e <scalbn+0x36>
 800f518:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f51c:	4323      	orrs	r3, r4
 800f51e:	d03d      	beq.n	800f59c <scalbn+0x94>
 800f520:	4b35      	ldr	r3, [pc, #212]	@ (800f5f8 <scalbn+0xf0>)
 800f522:	4620      	mov	r0, r4
 800f524:	4629      	mov	r1, r5
 800f526:	2200      	movs	r2, #0
 800f528:	f7f1 f866 	bl	80005f8 <__aeabi_dmul>
 800f52c:	4b33      	ldr	r3, [pc, #204]	@ (800f5fc <scalbn+0xf4>)
 800f52e:	429e      	cmp	r6, r3
 800f530:	4604      	mov	r4, r0
 800f532:	460d      	mov	r5, r1
 800f534:	da0f      	bge.n	800f556 <scalbn+0x4e>
 800f536:	a328      	add	r3, pc, #160	@ (adr r3, 800f5d8 <scalbn+0xd0>)
 800f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53c:	e01e      	b.n	800f57c <scalbn+0x74>
 800f53e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f542:	4291      	cmp	r1, r2
 800f544:	d10b      	bne.n	800f55e <scalbn+0x56>
 800f546:	4622      	mov	r2, r4
 800f548:	4620      	mov	r0, r4
 800f54a:	4629      	mov	r1, r5
 800f54c:	f7f0 fe9e 	bl	800028c <__adddf3>
 800f550:	4604      	mov	r4, r0
 800f552:	460d      	mov	r5, r1
 800f554:	e022      	b.n	800f59c <scalbn+0x94>
 800f556:	460b      	mov	r3, r1
 800f558:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f55c:	3936      	subs	r1, #54	@ 0x36
 800f55e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f562:	4296      	cmp	r6, r2
 800f564:	dd0d      	ble.n	800f582 <scalbn+0x7a>
 800f566:	2d00      	cmp	r5, #0
 800f568:	a11d      	add	r1, pc, #116	@ (adr r1, 800f5e0 <scalbn+0xd8>)
 800f56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f56e:	da02      	bge.n	800f576 <scalbn+0x6e>
 800f570:	a11d      	add	r1, pc, #116	@ (adr r1, 800f5e8 <scalbn+0xe0>)
 800f572:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f576:	a31a      	add	r3, pc, #104	@ (adr r3, 800f5e0 <scalbn+0xd8>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f7f1 f83c 	bl	80005f8 <__aeabi_dmul>
 800f580:	e7e6      	b.n	800f550 <scalbn+0x48>
 800f582:	1872      	adds	r2, r6, r1
 800f584:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f588:	428a      	cmp	r2, r1
 800f58a:	dcec      	bgt.n	800f566 <scalbn+0x5e>
 800f58c:	2a00      	cmp	r2, #0
 800f58e:	dd08      	ble.n	800f5a2 <scalbn+0x9a>
 800f590:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f594:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f598:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f59c:	ec45 4b10 	vmov	d0, r4, r5
 800f5a0:	bd70      	pop	{r4, r5, r6, pc}
 800f5a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f5a6:	da08      	bge.n	800f5ba <scalbn+0xb2>
 800f5a8:	2d00      	cmp	r5, #0
 800f5aa:	a10b      	add	r1, pc, #44	@ (adr r1, 800f5d8 <scalbn+0xd0>)
 800f5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5b0:	dac1      	bge.n	800f536 <scalbn+0x2e>
 800f5b2:	a10f      	add	r1, pc, #60	@ (adr r1, 800f5f0 <scalbn+0xe8>)
 800f5b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5b8:	e7bd      	b.n	800f536 <scalbn+0x2e>
 800f5ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f5be:	3236      	adds	r2, #54	@ 0x36
 800f5c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f5c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f600 <scalbn+0xf8>)
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	e7d4      	b.n	800f57c <scalbn+0x74>
 800f5d2:	bf00      	nop
 800f5d4:	f3af 8000 	nop.w
 800f5d8:	c2f8f359 	.word	0xc2f8f359
 800f5dc:	01a56e1f 	.word	0x01a56e1f
 800f5e0:	8800759c 	.word	0x8800759c
 800f5e4:	7e37e43c 	.word	0x7e37e43c
 800f5e8:	8800759c 	.word	0x8800759c
 800f5ec:	fe37e43c 	.word	0xfe37e43c
 800f5f0:	c2f8f359 	.word	0xc2f8f359
 800f5f4:	81a56e1f 	.word	0x81a56e1f
 800f5f8:	43500000 	.word	0x43500000
 800f5fc:	ffff3cb0 	.word	0xffff3cb0
 800f600:	3c900000 	.word	0x3c900000
 800f604:	00000000 	.word	0x00000000

0800f608 <floor>:
 800f608:	ec51 0b10 	vmov	r0, r1, d0
 800f60c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f614:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f618:	2e13      	cmp	r6, #19
 800f61a:	460c      	mov	r4, r1
 800f61c:	4605      	mov	r5, r0
 800f61e:	4680      	mov	r8, r0
 800f620:	dc34      	bgt.n	800f68c <floor+0x84>
 800f622:	2e00      	cmp	r6, #0
 800f624:	da17      	bge.n	800f656 <floor+0x4e>
 800f626:	a332      	add	r3, pc, #200	@ (adr r3, 800f6f0 <floor+0xe8>)
 800f628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62c:	f7f0 fe2e 	bl	800028c <__adddf3>
 800f630:	2200      	movs	r2, #0
 800f632:	2300      	movs	r3, #0
 800f634:	f7f1 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 800f638:	b150      	cbz	r0, 800f650 <floor+0x48>
 800f63a:	2c00      	cmp	r4, #0
 800f63c:	da55      	bge.n	800f6ea <floor+0xe2>
 800f63e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f642:	432c      	orrs	r4, r5
 800f644:	2500      	movs	r5, #0
 800f646:	42ac      	cmp	r4, r5
 800f648:	4c2b      	ldr	r4, [pc, #172]	@ (800f6f8 <floor+0xf0>)
 800f64a:	bf08      	it	eq
 800f64c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f650:	4621      	mov	r1, r4
 800f652:	4628      	mov	r0, r5
 800f654:	e023      	b.n	800f69e <floor+0x96>
 800f656:	4f29      	ldr	r7, [pc, #164]	@ (800f6fc <floor+0xf4>)
 800f658:	4137      	asrs	r7, r6
 800f65a:	ea01 0307 	and.w	r3, r1, r7
 800f65e:	4303      	orrs	r3, r0
 800f660:	d01d      	beq.n	800f69e <floor+0x96>
 800f662:	a323      	add	r3, pc, #140	@ (adr r3, 800f6f0 <floor+0xe8>)
 800f664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f668:	f7f0 fe10 	bl	800028c <__adddf3>
 800f66c:	2200      	movs	r2, #0
 800f66e:	2300      	movs	r3, #0
 800f670:	f7f1 fa52 	bl	8000b18 <__aeabi_dcmpgt>
 800f674:	2800      	cmp	r0, #0
 800f676:	d0eb      	beq.n	800f650 <floor+0x48>
 800f678:	2c00      	cmp	r4, #0
 800f67a:	bfbe      	ittt	lt
 800f67c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f680:	4133      	asrlt	r3, r6
 800f682:	18e4      	addlt	r4, r4, r3
 800f684:	ea24 0407 	bic.w	r4, r4, r7
 800f688:	2500      	movs	r5, #0
 800f68a:	e7e1      	b.n	800f650 <floor+0x48>
 800f68c:	2e33      	cmp	r6, #51	@ 0x33
 800f68e:	dd0a      	ble.n	800f6a6 <floor+0x9e>
 800f690:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f694:	d103      	bne.n	800f69e <floor+0x96>
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	f7f0 fdf7 	bl	800028c <__adddf3>
 800f69e:	ec41 0b10 	vmov	d0, r0, r1
 800f6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f6aa:	f04f 37ff 	mov.w	r7, #4294967295
 800f6ae:	40df      	lsrs	r7, r3
 800f6b0:	4207      	tst	r7, r0
 800f6b2:	d0f4      	beq.n	800f69e <floor+0x96>
 800f6b4:	a30e      	add	r3, pc, #56	@ (adr r3, 800f6f0 <floor+0xe8>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	f7f0 fde7 	bl	800028c <__adddf3>
 800f6be:	2200      	movs	r2, #0
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f7f1 fa29 	bl	8000b18 <__aeabi_dcmpgt>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d0c2      	beq.n	800f650 <floor+0x48>
 800f6ca:	2c00      	cmp	r4, #0
 800f6cc:	da0a      	bge.n	800f6e4 <floor+0xdc>
 800f6ce:	2e14      	cmp	r6, #20
 800f6d0:	d101      	bne.n	800f6d6 <floor+0xce>
 800f6d2:	3401      	adds	r4, #1
 800f6d4:	e006      	b.n	800f6e4 <floor+0xdc>
 800f6d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f6da:	2301      	movs	r3, #1
 800f6dc:	40b3      	lsls	r3, r6
 800f6de:	441d      	add	r5, r3
 800f6e0:	4545      	cmp	r5, r8
 800f6e2:	d3f6      	bcc.n	800f6d2 <floor+0xca>
 800f6e4:	ea25 0507 	bic.w	r5, r5, r7
 800f6e8:	e7b2      	b.n	800f650 <floor+0x48>
 800f6ea:	2500      	movs	r5, #0
 800f6ec:	462c      	mov	r4, r5
 800f6ee:	e7af      	b.n	800f650 <floor+0x48>
 800f6f0:	8800759c 	.word	0x8800759c
 800f6f4:	7e37e43c 	.word	0x7e37e43c
 800f6f8:	bff00000 	.word	0xbff00000
 800f6fc:	000fffff 	.word	0x000fffff

0800f700 <_init>:
 800f700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f702:	bf00      	nop
 800f704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f706:	bc08      	pop	{r3}
 800f708:	469e      	mov	lr, r3
 800f70a:	4770      	bx	lr

0800f70c <_fini>:
 800f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70e:	bf00      	nop
 800f710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f712:	bc08      	pop	{r3}
 800f714:	469e      	mov	lr, r3
 800f716:	4770      	bx	lr
